[{"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/OrderType.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/OrderType.java b/api/src/main/java/org/openmrs/OrderType.java\nindex e304dc0..a63e5d0 100644\n--- a/api/src/main/java/org/openmrs/OrderType.java\n+++ b/api/src/main/java/org/openmrs/OrderType.java\n@@ -151,7 +151,7 @@\n \t * @return The Java class as {@link java.lang.Class}\n \t * @throws APIException\n \t */\n-\tpublic Class getJavaClass() throws APIException {\n+\tpublic Class getJavaClass() {\n \t\ttry {\n \t\t\treturn Context.loadClass(javaClassName);\n \t\t}\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 147, "bugNodeStartChar": 3528, "bugNodeLength": 479, "fixLineNum": 147, "fixNodeStartChar": 3528, "fixNodeLength": 459, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 51, "bugNodeStartChar": 1587, "bugNodeLength": 417, "fixLineNum": 51, "fixNodeStartChar": 1587, "fixNodeLength": 397, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 61, "bugNodeStartChar": 2008, "bugNodeLength": 308, "fixLineNum": 61, "fixNodeStartChar": 2008, "fixNodeLength": 288, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 71, "bugNodeStartChar": 2320, "bugNodeLength": 346, "fixLineNum": 71, "fixNodeStartChar": 2320, "fixNodeLength": 326, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 80, "bugNodeStartChar": 2670, "bugNodeLength": 658, "fixLineNum": 80, "fixNodeStartChar": 2670, "fixNodeLength": 638, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 95, "bugNodeStartChar": 3332, "bugNodeLength": 687, "fixLineNum": 95, "fixNodeStartChar": 3332, "fixNodeLength": 667, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 140, "bugNodeStartChar": 5175, "bugNodeLength": 292, "fixLineNum": 140, "fixNodeStartChar": 5175, "fixNodeLength": 272, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 149, "bugNodeStartChar": 5471, "bugNodeLength": 520, "fixLineNum": 149, "fixNodeStartChar": 5471, "fixNodeLength": 500, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 162, "bugNodeStartChar": 5995, "bugNodeLength": 376, "fixLineNum": 162, "fixNodeStartChar": 5995, "fixNodeLength": 356, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 172, "bugNodeStartChar": 6375, "bugNodeLength": 394, "fixLineNum": 172, "fixNodeStartChar": 6375, "fixNodeLength": 374, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 194, "bugNodeStartChar": 7298, "bugNodeLength": 655, "fixLineNum": 194, "fixNodeStartChar": 7298, "fixNodeLength": 626, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 207, "bugNodeStartChar": 7957, "bugNodeLength": 625, "fixLineNum": 207, "fixNodeStartChar": 7957, "fixNodeLength": 605, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 238, "bugNodeStartChar": 9072, "bugNodeLength": 424, "fixLineNum": 238, "fixNodeStartChar": 9072, "fixNodeLength": 404, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 251, "bugNodeStartChar": 9500, "bugNodeLength": 402, "fixLineNum": 251, "fixNodeStartChar": 9500, "fixNodeLength": 382, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 261, "bugNodeStartChar": 9906, "bugNodeLength": 862, "fixLineNum": 261, "fixNodeStartChar": 9906, "fixNodeLength": 842, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 306, "bugNodeStartChar": 12325, "bugNodeLength": 409, "fixLineNum": 306, "fixNodeStartChar": 12325, "fixNodeLength": 389, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 325, "bugNodeStartChar": 13006, "bugNodeLength": 412, "fixLineNum": 325, "fixNodeStartChar": 13006, "fixNodeLength": 392, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 339, "bugNodeStartChar": 13421, "bugNodeLength": 293, "fixLineNum": 339, "fixNodeStartChar": 13421, "fixNodeLength": 273, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "fixCommitParentSHA1": "acb8a1c6457d55e3717ddd1ca93bb76ff77e9e41", "bugFilePath": "api/src/main/java/org/openmrs/api/AdministrationService.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/AdministrationService.java b/api/src/main/java/org/openmrs/api/AdministrationService.java\nindex 3650ae2..94e559c 100644\n--- a/api/src/main/java/org/openmrs/api/AdministrationService.java\n+++ b/api/src/main/java/org/openmrs/api/AdministrationService.java\n@@ -56,7 +56,7 @@\n \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n-\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n+\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t\n \t/**\n \t * Get a listing or important variables used in openmrs\n@@ -66,7 +66,7 @@\n \t */\n \t\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n+\tpublic SortedMap<String, String> getSystemVariables();\n \t\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc\n@@ -75,7 +75,7 @@\n \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n-\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n+\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.\n@@ -90,7 +90,7 @@\n \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n-\tpublic String getGlobalProperty(String propertyName) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -106,7 +106,7 @@\n \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n-\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n+\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>\n@@ -144,7 +144,7 @@\n \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n+\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t\n \t/**\n \t * Save the given list of global properties to the database.\n@@ -157,7 +157,7 @@\n \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n+\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t\n \t/**\n \t * Completely remove the given global property from the database\n@@ -167,7 +167,7 @@\n \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n+\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t\n \t/**\n \t * Completely remove the given global properties from the database\n@@ -177,7 +177,7 @@\n \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n-\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n+\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t\n \t/**\n \t * Save the given global property to the database. If the global property already exists,\n@@ -202,7 +202,7 @@\n \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n-\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n+\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t\n \t/**\n \t * Save the given global property to the database\n@@ -217,7 +217,7 @@\n \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n-\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n+\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.\n@@ -246,7 +246,7 @@\n \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n-\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n+\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has\n@@ -256,7 +256,7 @@\n \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic ImplementationId getImplementationId() throws APIException;\n+\tpublic ImplementationId getImplementationId();\n \t\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id\n@@ -273,7 +273,7 @@\n \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n-\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n+\tpublic void setImplementationId(ImplementationId implementationId);\n \t\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is\n@@ -313,7 +313,7 @@\n \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n-\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n+\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t\n \t/**\n \t * @param aClass class of object getting length for\n@@ -334,7 +334,7 @@\n \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n-\tpublic void validate(Object object, Errors errors) throws APIException;\n+\tpublic void validate(Object object, Errors errors);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -344,7 +344,7 @@\n \t * @return\n \t * @throws APIException\n      */\n-\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n+\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \n \t/**\n \t * Returns a list of locales used by the user when searching.\n@@ -359,7 +359,7 @@\n \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n-\tpublic List<Locale> getSearchLocales() throws APIException;\n+\tpublic List<Locale> getSearchLocales();\n \t\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 349, "bugNodeStartChar": 13717, "bugNodeLength": 504, "fixLineNum": 349, "fixNodeStartChar": 13717, "fixNodeLength": 484, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "49736ff78d46cf4aae5a621f887c09b18d10ddf6", "fixCommitParentSHA1": "acd49ef5b57361a1df1209060bc110db0d092f63", "bugFilePath": "api/src/main/java/org/openmrs/Allergy.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/Allergy.java b/api/src/main/java/org/openmrs/Allergy.java\nindex 1a9c291..b2813b5 100644\n--- a/api/src/main/java/org/openmrs/Allergy.java\n+++ b/api/src/main/java/org/openmrs/Allergy.java\n@@ -317,7 +317,7 @@\n \t * @throws InvocationTargetException\n \t * @throws IllegalAccessException\n \t */\n-\tpublic void copy(Allergy allergy) throws InvocationTargetException, IllegalAccessException {\n+\tpublic void copy(Allergy allergy) {\n \t\tsetAllergyId(null);\n \t\tsetUuid(UUID.randomUUID().toString());\n \t\tsetPatient(allergy.getPatient());\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 312, "bugNodeStartChar": 7879, "bugNodeLength": 780, "fixLineNum": 312, "fixNodeStartChar": 7879, "fixNodeLength": 723, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d7bc370d22be69b58ecbd78a4ebcfa0c618b127a", "fixCommitParentSHA1": "7a512f1b6e9d76df92b4c564bd38dadba355e16b", "bugFilePath": "api/src/main/java/org/openmrs/Cohort.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/Cohort.java b/api/src/main/java/org/openmrs/Cohort.java\nindex 23fcaa9..e87f27c 100644\n--- a/api/src/main/java/org/openmrs/Cohort.java\n+++ b/api/src/main/java/org/openmrs/Cohort.java\n@@ -213,8 +213,7 @@\n \t * @since 2.1.0\n \t */\n \tpublic CohortMembership getActiveMembership(Patient patient) {\n-\t\treturn getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId()))\n-\t\t        .collect(Collectors.toList()).get(0);\n+\t\treturn getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).findFirst().get();\n \t}\n \t\n \tpublic int size() {\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 216, "bugNodeStartChar": 6575, "bugNodeLength": 142, "fixLineNum": 216, "fixNodeStartChar": 6575, "fixNodeLength": 114, "sourceBeforeFix": "getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).collect(Collectors.toList())", "sourceAfterFix": "getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).findFirst()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "722193d061bf6619508ed870fdf214c698f5f044", "fixCommitParentSHA1": "716ef1c03ef5490359a7e457965c4556c2b52b64", "bugFilePath": "api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterTest.java b/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterTest.java\nindex 26cde1d..e51ae34 100644\n--- a/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterTest.java\n+++ b/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterTest.java\n@@ -80,7 +80,7 @@\n \t */\n \t@Test\n \tpublic void match_shouldIncludeBeanIfModuleMissing() {\n-\t\tOpenmrsProfileWithoutTest1Module bean = applicationContext.getBean(OpenmrsProfileWithoutTest1Module.class);\n+\t\tOpenmrsProfileWithoutMissingModule bean = applicationContext.getBean(OpenmrsProfileWithoutMissingModule.class);\n \t\t\n \t\tassertThat(bean, is(notNullValue()));\n \t}\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 83, "bugNodeStartChar": 3061, "bugNodeLength": 107, "fixLineNum": 83, "fixNodeStartChar": 3061, "fixNodeLength": 111, "sourceBeforeFix": "OpenmrsProfileWithoutTest1Module bean=applicationContext.getBean(OpenmrsProfileWithoutTest1Module.class); ", "sourceAfterFix": "OpenmrsProfileWithoutMissingModule bean=applicationContext.getBean(OpenmrsProfileWithoutMissingModule.class); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "722193d061bf6619508ed870fdf214c698f5f044", "fixCommitParentSHA1": "716ef1c03ef5490359a7e457965c4556c2b52b64", "bugFilePath": "api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterWithModulesTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterWithModulesTest.java b/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterWithModulesTest.java\nindex 2150b30..df31d0c 100644\n--- a/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterWithModulesTest.java\n+++ b/api/src/test/java/org/openmrs/annotation/OpenmrsProfileExcludeFilterWithModulesTest.java\n@@ -21,6 +21,6 @@\n \t */\n \t@Test(expected = NoSuchBeanDefinitionException.class)\n \tpublic void match_shouldNotIncludeBeanIfModuleIsStarted() {\n-\t\tapplicationContext.getBean(OpenmrsProfileWithoutTest1Module.class);\n+\t\tapplicationContext.getBean(OpenmrsProfileWithoutMissingModule.class);\n \t}\n }\n\\ No newline at end of file\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 24, "bugNodeStartChar": 1154, "bugNodeLength": 38, "fixLineNum": 24, "fixNodeStartChar": 1154, "fixNodeLength": 40, "sourceBeforeFix": "OpenmrsProfileWithoutTest1Module.class", "sourceAfterFix": "OpenmrsProfileWithoutMissingModule.class"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "fixCommitParentSHA1": "0e0ede5a02b931e68c7d8c538ef815c47561e92e", "bugFilePath": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 51f946b..5201f1d 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n@@ -474,7 +474,7 @@\n \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n-\t\tAssert.assertEquals(20, Context.getAdministrationService().getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(21, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t\n \t/**\n@@ -546,9 +546,9 @@\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n \t\t\n-\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(21, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n-\t\tAssert.assertEquals(19, as.getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t}\n \t\n \t/**\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 477, "bugNodeStartChar": 20959, "bugNodeLength": 91, "fixLineNum": 477, "fixNodeStartChar": 20959, "fixNodeLength": 91, "sourceBeforeFix": "Assert.assertEquals(20,Context.getAdministrationService().getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(21,Context.getAdministrationService().getAllGlobalProperties().size())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "fixCommitParentSHA1": "0e0ede5a02b931e68c7d8c538ef815c47561e92e", "bugFilePath": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 51f946b..5201f1d 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n@@ -474,7 +474,7 @@\n \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n-\t\tAssert.assertEquals(20, Context.getAdministrationService().getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(21, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t\n \t/**\n@@ -546,9 +546,9 @@\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n \t\t\n-\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(21, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n-\t\tAssert.assertEquals(19, as.getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t}\n \t\n \t/**\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 549, "bugNodeStartChar": 24113, "bugNodeLength": 59, "fixLineNum": 549, "fixNodeStartChar": 24113, "fixNodeLength": 59, "sourceBeforeFix": "Assert.assertEquals(20,as.getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(21,as.getAllGlobalProperties().size())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "fixCommitParentSHA1": "0e0ede5a02b931e68c7d8c538ef815c47561e92e", "bugFilePath": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 51f946b..5201f1d 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n@@ -474,7 +474,7 @@\n \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n-\t\tAssert.assertEquals(20, Context.getAdministrationService().getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(21, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t\n \t/**\n@@ -546,9 +546,9 @@\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n \t\t\n-\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(21, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n-\t\tAssert.assertEquals(19, as.getAllGlobalProperties().size());\n+\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t}\n \t\n \t/**\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 551, "bugNodeStartChar": 24248, "bugNodeLength": 59, "fixLineNum": 551, "fixNodeStartChar": 24248, "fixNodeLength": 59, "sourceBeforeFix": "Assert.assertEquals(19,as.getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(20,as.getAllGlobalProperties().size())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "d1c3ee04ff2e26f5058129d3d7bf360891223ff8", "fixCommitParentSHA1": "6fae18e6bf10f5d854f6ffd9d94a97c22d19a38a", "bugFilePath": "api/src/main/java/org/openmrs/api/context/Context.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/Context.java b/api/src/main/java/org/openmrs/api/context/Context.java\nindex f6c6147..086a6cd 100644\n--- a/api/src/main/java/org/openmrs/api/context/Context.java\n+++ b/api/src/main/java/org/openmrs/api/context/Context.java\n@@ -807,7 +807,7 @@\n \t * @see InputRequiredException#getRequiredInput() InputRequiredException#getRequiredInput() for\n \t *      the required question/datatypes\n \t */\n-\tpublic static void startup(Properties props) throws DatabaseUpdateException, InputRequiredException,\n+\tpublic synchronized static void startup(Properties props) throws DatabaseUpdateException, InputRequiredException,\n \t        ModuleMustStartException {\n \t\t// do any context database specific startup\n \t\tgetContextDAO().startup(props);\n@@ -851,7 +851,7 @@\n \t * @see InputRequiredException#getRequiredInput() InputRequiredException#getRequiredInput() for\n \t *      the required question/datatypes\n \t */\n-\tpublic static void startup(String url, String username, String password, Properties properties)\n+\tpublic synchronized static void startup(String url, String username, String password, Properties properties)\n \t        throws DatabaseUpdateException, InputRequiredException, ModuleMustStartException {\n \t\tif (properties == null) {\n \t\t\tproperties = new Properties();\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 798, "bugNodeStartChar": 23561, "bugNodeLength": 1432, "fixLineNum": 798, "fixNodeStartChar": 23561, "fixNodeLength": 1445, "sourceBeforeFix": "9", "sourceAfterFix": "41"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "d1c3ee04ff2e26f5058129d3d7bf360891223ff8", "fixCommitParentSHA1": "6fae18e6bf10f5d854f6ffd9d94a97c22d19a38a", "bugFilePath": "api/src/main/java/org/openmrs/api/context/Context.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/Context.java b/api/src/main/java/org/openmrs/api/context/Context.java\nindex f6c6147..086a6cd 100644\n--- a/api/src/main/java/org/openmrs/api/context/Context.java\n+++ b/api/src/main/java/org/openmrs/api/context/Context.java\n@@ -807,7 +807,7 @@\n \t * @see InputRequiredException#getRequiredInput() InputRequiredException#getRequiredInput() for\n \t *      the required question/datatypes\n \t */\n-\tpublic static void startup(Properties props) throws DatabaseUpdateException, InputRequiredException,\n+\tpublic synchronized static void startup(Properties props) throws DatabaseUpdateException, InputRequiredException,\n \t        ModuleMustStartException {\n \t\t// do any context database specific startup\n \t\tgetContextDAO().startup(props);\n@@ -851,7 +851,7 @@\n \t * @see InputRequiredException#getRequiredInput() InputRequiredException#getRequiredInput() for\n \t *      the required question/datatypes\n \t */\n-\tpublic static void startup(String url, String username, String password, Properties properties)\n+\tpublic synchronized static void startup(String url, String username, String password, Properties properties)\n \t        throws DatabaseUpdateException, InputRequiredException, ModuleMustStartException {\n \t\tif (properties == null) {\n \t\t\tproperties = new Properties();\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 835, "bugNodeStartChar": 24996, "bugNodeLength": 1622, "fixLineNum": 835, "fixNodeStartChar": 24996, "fixNodeLength": 1635, "sourceBeforeFix": "9", "sourceAfterFix": "41"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "60ab1b09e8d7b90a59ee711fd696612afcc6e60d", "fixCommitParentSHA1": "ee64fcfbeba009e67640db2225d1e3a348f61221", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java\nindex 870156d..71a9a87 100644\n--- a/api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/PatientServiceImpl.java\n@@ -125,7 +125,7 @@\n \t\t\tContext.requirePrivilege(PrivilegeConstants.DELETE_PATIENTS);\n \t\t}\n \t\t\n-\t\tif (patient.getIdentifiers().size() == 1) {\n+\t\tif (!patient.isVoided() && patient.getIdentifiers().size() == 1) {\n \t\t\tpatient.getPatientIdentifier().setPreferred(true);\n \t\t}\n \t\t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 128, "bugNodeStartChar": 4417, "bugNodeLength": 36, "fixLineNum": 128, "fixNodeStartChar": 4417, "fixNodeLength": 59, "sourceBeforeFix": "patient.getIdentifiers().size() == 1", "sourceAfterFix": "!patient.isVoided() && patient.getIdentifiers().size() == 1"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "eb8f15bbc74aa8cbd188c57edb50117452dd7102", "fixCommitParentSHA1": "0afea95902e4d43f5d1234076e57fd83c5b31225", "bugFilePath": "api/src/test/java/org/openmrs/ObsTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/ObsTest.java b/api/src/test/java/org/openmrs/ObsTest.java\nindex 2afd828..b40c1bb 100644\n--- a/api/src/test/java/org/openmrs/ObsTest.java\n+++ b/api/src/test/java/org/openmrs/ObsTest.java\n@@ -53,7 +53,7 @@\n \tprivate static final List<String> IGNORED_FIELDS = Arrays.asList(\"dirty\", \"log\", \"serialVersionUID\",\n \t    \"DATE_TIME_PATTERN\", \"TIME_PATTERN\", \"DATE_PATTERN\", \"FORM_NAMESPACE_PATH_SEPARATOR\",\n \t    \"FORM_NAMESPACE_PATH_MAX_LENGTH\", \"obsId\", \"groupMembers\", \"uuid\", \"changedBy\", \"dateChanged\", \"voided\", \"voidedBy\",\n-\t    \"voidReason\", \"dateVoided\", \"formNamespaceAndPath\");\n+\t    \"voidReason\", \"dateVoided\", \"formNamespaceAndPath\", \"$jacocoData\");\n \t\n \tprivate void resetObs(Obs obs) throws Exception {\n \t\tField field = Obs.class.getDeclaredField(\"dirty\");\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 53, "bugNodeStartChar": 1762, "bugNodeLength": 319, "fixLineNum": 53, "fixNodeStartChar": 1762, "fixNodeLength": 334, "sourceBeforeFix": "Arrays.asList(\"dirty\",\"log\",\"serialVersionUID\",\"DATE_TIME_PATTERN\",\"TIME_PATTERN\",\"DATE_PATTERN\",\"FORM_NAMESPACE_PATH_SEPARATOR\",\"FORM_NAMESPACE_PATH_MAX_LENGTH\",\"obsId\",\"groupMembers\",\"uuid\",\"changedBy\",\"dateChanged\",\"voided\",\"voidedBy\",\"voidReason\",\"dateVoided\",\"formNamespaceAndPath\")", "sourceAfterFix": "Arrays.asList(\"dirty\",\"log\",\"serialVersionUID\",\"DATE_TIME_PATTERN\",\"TIME_PATTERN\",\"DATE_PATTERN\",\"FORM_NAMESPACE_PATH_SEPARATOR\",\"FORM_NAMESPACE_PATH_MAX_LENGTH\",\"obsId\",\"groupMembers\",\"uuid\",\"changedBy\",\"dateChanged\",\"voided\",\"voidedBy\",\"voidReason\",\"dateVoided\",\"formNamespaceAndPath\",\"$jacocoData\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ef6c3433dbf2f8d85ef23d4cf1ca0d3520ac2957", "fixCommitParentSHA1": "bb8257df3feaec8f4cf9c5fefe524a0960428eff", "bugFilePath": "web/src/main/java/org/openmrs/layout/web/name/NameSupport.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java b/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java\nindex 3fd326f..7b3345d 100644\n--- a/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java\n+++ b/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java\n@@ -21,7 +21,7 @@\n @Deprecated\n public class NameSupport extends LayoutSupport<NameTemplate> {\n \t\n-\tprivate static NameSupport singleton;\n+\tprivate static volatile NameSupport singleton;\n \t\n \tstatic Log log = LogFactory.getLog(NameSupport.class);\n \t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 24, "bugNodeStartChar": 809, "bugNodeLength": 37, "fixLineNum": 24, "fixNodeStartChar": 809, "fixNodeLength": 46, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "6abc370f9cba6b7046aea997215d926e372c6c94", "fixCommitParentSHA1": "8c877d40adb7022b6f1afd9fc1fd4e85a08d75e5", "bugFilePath": "web/src/main/java/org/openmrs/layout/web/name/NameSupport.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java b/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java\nindex bd0c181..3fd326f 100644\n--- a/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java\n+++ b/web/src/main/java/org/openmrs/layout/web/name/NameSupport.java\n@@ -31,7 +31,7 @@\n \t\t}\n \t}\n \t\n-\tpublic static NameSupport getInstance() {\n+\tpublic static synchronized NameSupport getInstance() {\n \t\tif (singleton == null) {\n \t\t\tthrow new RuntimeException(\"Not Yet Instantiated\");\n \t\t} else {\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 34, "bugNodeStartChar": 989, "bugNodeLength": 162, "fixLineNum": 34, "fixNodeStartChar": 989, "fixNodeLength": 175, "sourceBeforeFix": "9", "sourceAfterFix": "41"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "00617d3c125c64c8f7b4e7550bad32f1678bd061", "fixCommitParentSHA1": "2ab04de36a43875d9d2b2b0b0b2fa7e27d99bef7", "bugFilePath": "api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java\nindex 89cf2dc..596f2dd 100644\n--- a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java\n@@ -295,7 +295,7 @@\n \t\t\t\n \t\t\t// Update task that has been started\n \t\t\ttaskDefinition.setStarted(false);\n-\t\t\tsaveTask(taskDefinition);\n+\t\t\tsaveTaskDefinition(taskDefinition);\n \t\t}\n \t}\n \t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 298, "bugNodeStartChar": 10191, "bugNodeLength": 24, "fixLineNum": 298, "fixNodeStartChar": 10191, "fixNodeLength": 34, "sourceBeforeFix": "saveTask(taskDefinition)", "sourceAfterFix": "saveTaskDefinition(taskDefinition)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "00617d3c125c64c8f7b4e7550bad32f1678bd061", "fixCommitParentSHA1": "2ab04de36a43875d9d2b2b0b0b2fa7e27d99bef7", "bugFilePath": "api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java\nindex 89cf2dc..596f2dd 100644\n--- a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerServiceImpl.java\n@@ -295,7 +295,7 @@\n \t\t\t\n \t\t\t// Update task that has been started\n \t\t\ttaskDefinition.setStarted(false);\n-\t\t\tsaveTask(taskDefinition);\n+\t\t\tsaveTaskDefinition(taskDefinition);\n \t\t}\n \t}\n \t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 298, "bugNodeStartChar": 10191, "bugNodeLength": 24, "fixLineNum": 298, "fixNodeStartChar": 10191, "fixNodeLength": 34, "sourceBeforeFix": "saveTask(taskDefinition)", "sourceAfterFix": "saveTaskDefinition(taskDefinition)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "3fa164f11828af219d08c7884eb57d9f936fe520", "fixCommitParentSHA1": "be88cea0f6413eda288ef534fcba3fe8bdd2f26f", "bugFilePath": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java b/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java\nindex eea43d0..da51d64 100644\n--- a/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java\n+++ b/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java\n@@ -1394,7 +1394,7 @@\n \t\t\t\t\t\t\t\n \t\t\t\t\t\t\t// connect via jdbc with root user and create an openmrs user\n \t\t\t\t\t\t\tString host = \"'%'\";\n-\t\t\t\t\t\t\tif (wizardModel.databaseConnection.contains(\"localhost\")) {\n+\t\t\t\t\t\t\tif (wizardModel.databaseConnection.contains(\"localhost\") || wizardModel.databaseConnection.contains(\"127.0.0.1\")) {\n \t\t\t\t\t\t\t\thost = \"'localhost'\";\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tString sql = \"drop user '?'@\" + host;\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1397, "bugNodeStartChar": 51368, "bugNodeLength": 52, "fixLineNum": 1397, "fixNodeStartChar": 51368, "fixNodeLength": 108, "sourceBeforeFix": "wizardModel.databaseConnection.contains(\"localhost\")", "sourceAfterFix": "wizardModel.databaseConnection.contains(\"localhost\") || wizardModel.databaseConnection.contains(\"127.0.0.1\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 177b4c1..efe40d4 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -1093,7 +1093,7 @@\n \t\t\t\tif (mod.getModuleActivator() != null)// if extends BaseModuleActivator\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}\n \t\t\t\n@@ -1154,12 +1154,12 @@\n \t\t\t\t\t\t\t\tContext.removeAdvice(cls, (Advice) aopObject);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\tlog.warn(\"Could not remove advice point: \" + advice.getPoint(), t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting advicePoints from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t\t\n@@ -1180,7 +1180,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}\n@@ -1199,7 +1199,7 @@\n \t\t\t\telse\n \t\t\t\t\tmod.getActivator().shutdown();//implements old  Activator interface\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}\n \t\t\t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1096, "bugNodeStartChar": 37581, "bugNodeLength": 11, "fixLineNum": 1096, "fixNodeStartChar": 37581, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 177b4c1..efe40d4 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -1093,7 +1093,7 @@\n \t\t\t\tif (mod.getModuleActivator() != null)// if extends BaseModuleActivator\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}\n \t\t\t\n@@ -1154,12 +1154,12 @@\n \t\t\t\t\t\t\t\tContext.removeAdvice(cls, (Advice) aopObject);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\tlog.warn(\"Could not remove advice point: \" + advice.getPoint(), t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting advicePoints from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t\t\n@@ -1180,7 +1180,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}\n@@ -1199,7 +1199,7 @@\n \t\t\t\telse\n \t\t\t\t\tmod.getActivator().shutdown();//implements old  Activator interface\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}\n \t\t\t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1157, "bugNodeStartChar": 39958, "bugNodeLength": 11, "fixLineNum": 1157, "fixNodeStartChar": 39958, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 177b4c1..efe40d4 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -1093,7 +1093,7 @@\n \t\t\t\tif (mod.getModuleActivator() != null)// if extends BaseModuleActivator\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}\n \t\t\t\n@@ -1154,12 +1154,12 @@\n \t\t\t\t\t\t\t\tContext.removeAdvice(cls, (Advice) aopObject);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\tlog.warn(\"Could not remove advice point: \" + advice.getPoint(), t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting advicePoints from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t\t\n@@ -1180,7 +1180,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}\n@@ -1199,7 +1199,7 @@\n \t\t\t\telse\n \t\t\t\t\tmod.getActivator().shutdown();//implements old  Activator interface\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}\n \t\t\t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1162, "bugNodeStartChar": 40080, "bugNodeLength": 11, "fixLineNum": 1162, "fixNodeStartChar": 40080, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 177b4c1..efe40d4 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -1093,7 +1093,7 @@\n \t\t\t\tif (mod.getModuleActivator() != null)// if extends BaseModuleActivator\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}\n \t\t\t\n@@ -1154,12 +1154,12 @@\n \t\t\t\t\t\t\t\tContext.removeAdvice(cls, (Advice) aopObject);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\tlog.warn(\"Could not remove advice point: \" + advice.getPoint(), t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting advicePoints from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t\t\n@@ -1180,7 +1180,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}\n@@ -1199,7 +1199,7 @@\n \t\t\t\telse\n \t\t\t\t\tmod.getActivator().shutdown();//implements old  Activator interface\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}\n \t\t\t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1183, "bugNodeStartChar": 40724, "bugNodeLength": 11, "fixLineNum": 1183, "fixNodeStartChar": 40724, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 177b4c1..efe40d4 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -1093,7 +1093,7 @@\n \t\t\t\tif (mod.getModuleActivator() != null)// if extends BaseModuleActivator\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}\n \t\t\t\n@@ -1154,12 +1154,12 @@\n \t\t\t\t\t\t\t\tContext.removeAdvice(cls, (Advice) aopObject);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\tlog.warn(\"Could not remove advice point: \" + advice.getPoint(), t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting advicePoints from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t\t\n@@ -1180,7 +1180,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}\n@@ -1199,7 +1199,7 @@\n \t\t\t\telse\n \t\t\t\t\tmod.getActivator().shutdown();//implements old  Activator interface\n \t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}\n \t\t\t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1202, "bugNodeStartChar": 41318, "bugNodeLength": 11, "fixLineNum": 1202, "fixNodeStartChar": 41318, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\nindex e4360b5..005ac5f 100644\n--- a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n+++ b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n@@ -563,7 +563,7 @@\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);\n@@ -572,7 +572,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}\n@@ -665,7 +665,7 @@\n \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n-\t\tcatch (Throwable t) {\n+\t\tcatch (Exception t) {\n \t\t\t// pass\n \t\t}\n \t}\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 566, "bugNodeStartChar": 18449, "bugNodeLength": 11, "fixLineNum": 566, "fixNodeStartChar": 18449, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\nindex e4360b5..005ac5f 100644\n--- a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n+++ b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n@@ -563,7 +563,7 @@\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);\n@@ -572,7 +572,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}\n@@ -665,7 +665,7 @@\n \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n-\t\tcatch (Throwable t) {\n+\t\tcatch (Exception t) {\n \t\t\t// pass\n \t\t}\n \t}\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 575, "bugNodeStartChar": 18674, "bugNodeLength": 11, "fixLineNum": 575, "fixNodeStartChar": 18674, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "fixCommitParentSHA1": "df2638313bd7851fdba629ea00cd0192a895b356", "bugFilePath": "api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\nindex e4360b5..005ac5f 100644\n--- a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n+++ b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n@@ -563,7 +563,7 @@\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tcatch (Throwable t) {\n+\t\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);\n@@ -572,7 +572,7 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n+\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\tlog.debug(\"Could not clean fields for class \" + clazz.getName(), t);\n \t\t\t\t\t}\n@@ -665,7 +665,7 @@\n \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n-\t\tcatch (Throwable t) {\n+\t\tcatch (Exception t) {\n \t\t\t// pass\n \t\t}\n \t}\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 668, "bugNodeStartChar": 21449, "bugNodeLength": 11, "fixLineNum": 668, "fixNodeStartChar": 21449, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/api/context/ServiceContext.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/ServiceContext.java b/api/src/main/java/org/openmrs/api/context/ServiceContext.java\nindex 3e845c8..0abb5e4 100644\n--- a/api/src/main/java/org/openmrs/api/context/ServiceContext.java\n+++ b/api/src/main/java/org/openmrs/api/context/ServiceContext.java\n@@ -75,7 +75,7 @@\n \t\n \tprivate static final Log log = LogFactory.getLog(ServiceContext.class);\n \t\n-\tprivate static ServiceContext instance;\n+\tprivate static volatile ServiceContext instance;\n \t\n \tprivate ApplicationContext applicationContext;\n \t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 78, "bugNodeStartChar": 3133, "bugNodeLength": 39, "fixLineNum": 78, "fixNodeStartChar": 3133, "fixNodeLength": 48, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 6fd3560..177b4c1 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -64,14 +64,14 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();\n \t\n@@ -80,7 +80,7 @@\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2292, "bugNodeLength": 87, "fixLineNum": 67, "fixNodeStartChar": 2292, "fixNodeLength": 96, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 6fd3560..177b4c1 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -64,14 +64,14 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();\n \t\n@@ -80,7 +80,7 @@\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 69, "bugNodeStartChar": 2383, "bugNodeLength": 88, "fixLineNum": 69, "fixNodeStartChar": 2383, "fixNodeLength": 97, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 6fd3560..177b4c1 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -64,14 +64,14 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();\n \t\n@@ -80,7 +80,7 @@\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 71, "bugNodeStartChar": 2475, "bugNodeLength": 100, "fixLineNum": 71, "fixNodeStartChar": 2475, "fixNodeLength": 109, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 6fd3560..177b4c1 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -64,14 +64,14 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();\n \t\n@@ -80,7 +80,7 @@\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 74, "bugNodeStartChar": 2642, "bugNodeLength": 114, "fixLineNum": 74, "fixNodeStartChar": 2642, "fixNodeLength": 123, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 6fd3560..177b4c1 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -64,14 +64,14 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();\n \t\n@@ -80,7 +80,7 @@\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 83, "bugNodeStartChar": 3116, "bugNodeLength": 46, "fixLineNum": 83, "fixNodeStartChar": 3116, "fixNodeLength": 55, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "fixCommitParentSHA1": "ab2ba9c495d5df2eea285b21aaf5ebc4d0e53393", "bugFilePath": "api/src/main/java/org/openmrs/util/DatabaseUpdater.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/DatabaseUpdater.java b/api/src/main/java/org/openmrs/util/DatabaseUpdater.java\nindex 2f1871a..1d66d46 100644\n--- a/api/src/main/java/org/openmrs/util/DatabaseUpdater.java\n+++ b/api/src/main/java/org/openmrs/util/DatabaseUpdater.java\n@@ -79,7 +79,7 @@\n \t/**\n \t * Holds the update warnings generated by the custom liquibase changesets as they are executed\n \t */\n-\tprivate static List<String> updateWarnings = null;\n+\tprivate static volatile List<String> updateWarnings = null;\n \t\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 79, "bugNodeStartChar": 2808, "bugNodeLength": 156, "fixLineNum": 79, "fixNodeStartChar": 2808, "fixNodeLength": 165, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "222b3f8431fa0cacbaa03998109261c30a8e3427", "fixCommitParentSHA1": "636ff88ea7769ca68c7179faecce105794ffa66c", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleClassLoader.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleClassLoader.java b/api/src/main/java/org/openmrs/module/ModuleClassLoader.java\nindex 222dfbc..5435202 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleClassLoader.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleClassLoader.java\n@@ -65,7 +65,7 @@\n \t\n \tprivate Map<URI, File> libraryCache;\n \t\n-\tprivate boolean probeParentLoaderLast = true;\n+\tprivate boolean probeParentLoaderLast = false;\n \t\n \tprivate Set<String> providedPackages = new LinkedHashSet<String>();\n \t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 68, "bugNodeStartChar": 2125, "bugNodeLength": 28, "fixLineNum": 68, "fixNodeStartChar": 2125, "fixNodeLength": 29, "sourceBeforeFix": "probeParentLoaderLast=true", "sourceAfterFix": "probeParentLoaderLast=false"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/api/context/ServiceContext.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/ServiceContext.java b/api/src/main/java/org/openmrs/api/context/ServiceContext.java\nindex 3e845c8..0abb5e4 100644\n--- a/api/src/main/java/org/openmrs/api/context/ServiceContext.java\n+++ b/api/src/main/java/org/openmrs/api/context/ServiceContext.java\n@@ -75,7 +75,7 @@\n \t\n \tprivate static final Log log = LogFactory.getLog(ServiceContext.class);\n \t\n-\tprivate static ServiceContext instance;\n+\tprivate static volatile ServiceContext instance;\n \t\n \tprivate ApplicationContext applicationContext;\n \t\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 78, "bugNodeStartChar": 3133, "bugNodeLength": 39, "fixLineNum": 78, "fixNodeStartChar": 3133, "fixNodeLength": 48, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 7f32c89..b7d0806 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -62,21 +62,21 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \t// the name of the file within a module file\n \tprivate static final String MODULE_CHANGELOG_FILENAME = \"liquibase.xml\";\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 65, "bugNodeStartChar": 2219, "bugNodeLength": 87, "fixLineNum": 65, "fixNodeStartChar": 2219, "fixNodeLength": 96, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 7f32c89..b7d0806 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -62,21 +62,21 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \t// the name of the file within a module file\n \tprivate static final String MODULE_CHANGELOG_FILENAME = \"liquibase.xml\";\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2310, "bugNodeLength": 88, "fixLineNum": 67, "fixNodeStartChar": 2310, "fixNodeLength": 97, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 7f32c89..b7d0806 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -62,21 +62,21 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \t// the name of the file within a module file\n \tprivate static final String MODULE_CHANGELOG_FILENAME = \"liquibase.xml\";\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 69, "bugNodeStartChar": 2402, "bugNodeLength": 100, "fixLineNum": 69, "fixNodeStartChar": 2402, "fixNodeLength": 109, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 7f32c89..b7d0806 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -62,21 +62,21 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \t// the name of the file within a module file\n \tprivate static final String MODULE_CHANGELOG_FILENAME = \"liquibase.xml\";\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 72, "bugNodeStartChar": 2569, "bugNodeLength": 114, "fixLineNum": 72, "fixNodeStartChar": 2569, "fixNodeLength": 123, "sourceBeforeFix": "12", "sourceAfterFix": "76"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/module/ModuleFactory.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/module/ModuleFactory.java b/api/src/main/java/org/openmrs/module/ModuleFactory.java\nindex 7f32c89..b7d0806 100644\n--- a/api/src/main/java/org/openmrs/module/ModuleFactory.java\n+++ b/api/src/main/java/org/openmrs/module/ModuleFactory.java\n@@ -62,21 +62,21 @@\n \t\n \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n \t\n-\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n+\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n \t\n-\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n+\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n \t\n \t// maps to keep track of the memory and objects to free/close\n-\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n+\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \t\n \t// the name of the file within a module file\n \tprivate static final String MODULE_CHANGELOG_FILENAME = \"liquibase.xml\";\n \t\n \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n \t\n-\tprivate static Set<String> actualStartupOrder;\n+\tprivate static volatile Set<String> actualStartupOrder;\n \t\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 79, "bugNodeStartChar": 2913, "bugNodeLength": 46, "fixLineNum": 79, "fixNodeStartChar": 2913, "fixNodeLength": 55, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "fixCommitParentSHA1": "ae1dfe5790f6d87d7ec7350b693bdf003b10fa54", "bugFilePath": "api/src/main/java/org/openmrs/util/DatabaseUpdater.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/DatabaseUpdater.java b/api/src/main/java/org/openmrs/util/DatabaseUpdater.java\nindex 2f1871a..1d66d46 100644\n--- a/api/src/main/java/org/openmrs/util/DatabaseUpdater.java\n+++ b/api/src/main/java/org/openmrs/util/DatabaseUpdater.java\n@@ -79,7 +79,7 @@\n \t/**\n \t * Holds the update warnings generated by the custom liquibase changesets as they are executed\n \t */\n-\tprivate static List<String> updateWarnings = null;\n+\tprivate static volatile List<String> updateWarnings = null;\n \t\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 79, "bugNodeStartChar": 2808, "bugNodeLength": 156, "fixLineNum": 79, "fixNodeStartChar": 2808, "fixNodeLength": 165, "sourceBeforeFix": "10", "sourceAfterFix": "74"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "fixCommitParentSHA1": "4638b77ab49e0f66e1c07b49ab5ff187afcc0576", "bugFilePath": "api/src/main/java/org/openmrs/ConceptNumeric.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/ConceptNumeric.java b/api/src/main/java/org/openmrs/ConceptNumeric.java\nindex e483f60..6450dd8 100644\n--- a/api/src/main/java/org/openmrs/ConceptNumeric.java\n+++ b/api/src/main/java/org/openmrs/ConceptNumeric.java\n@@ -108,7 +108,7 @@\n \t\t\r\n \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n-\t\t\tcSet.setConcept(this);\r\n+\t\t\tcSet.setConceptSet(this);\r\n \t\t}\r\n \t\t\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 111, "bugNodeStartChar": 3360, "bugNodeLength": 21, "fixLineNum": 111, "fixNodeStartChar": 3250, "fixNodeLength": 24, "sourceBeforeFix": "cSet.setConcept(this)", "sourceAfterFix": "cSet.setConceptSet(this)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "fixCommitParentSHA1": "4638b77ab49e0f66e1c07b49ab5ff187afcc0576", "bugFilePath": "api/src/main/java/org/openmrs/ConceptNumeric.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/ConceptNumeric.java b/api/src/main/java/org/openmrs/ConceptNumeric.java\nindex e483f60..6450dd8 100644\n--- a/api/src/main/java/org/openmrs/ConceptNumeric.java\n+++ b/api/src/main/java/org/openmrs/ConceptNumeric.java\n@@ -108,7 +108,7 @@\n \t\t\r\n \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n-\t\t\tcSet.setConcept(this);\r\n+\t\t\tcSet.setConceptSet(this);\r\n \t\t}\r\n \t\t\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 111, "bugNodeStartChar": 3360, "bugNodeLength": 21, "fixLineNum": 111, "fixNodeStartChar": 3250, "fixNodeLength": 24, "sourceBeforeFix": "cSet.setConcept(this)", "sourceAfterFix": "cSet.setConceptSet(this)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "fixCommitParentSHA1": "4638b77ab49e0f66e1c07b49ab5ff187afcc0576", "bugFilePath": "api/src/test/java/org/openmrs/ConceptNumericTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/ConceptNumericTest.java b/api/src/test/java/org/openmrs/ConceptNumericTest.java\nindex 7342857..5e1e47b 100644\n--- a/api/src/test/java/org/openmrs/ConceptNumericTest.java\n+++ b/api/src/test/java/org/openmrs/ConceptNumericTest.java\n@@ -75,7 +75,7 @@\n \t\tConceptNumeric cn = new ConceptNumeric(c);\r\n \t\t\r\n \t\tfor (ConceptSet cSet : cn.getConceptSets()) {\r\n-\t\t\tAssert.assertSame(cn, cSet.getConcept());\r\n+\t\t\tAssert.assertSame(cn, cSet.getConceptSet());\r\n \t\t}\r\n \t}\r\n \t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 78, "bugNodeStartChar": 2946, "bugNodeLength": 17, "fixLineNum": 78, "fixNodeStartChar": 2869, "fixNodeLength": 20, "sourceBeforeFix": "cSet.getConcept()", "sourceAfterFix": "cSet.getConceptSet()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "fixCommitParentSHA1": "4638b77ab49e0f66e1c07b49ab5ff187afcc0576", "bugFilePath": "api/src/test/java/org/openmrs/ConceptNumericTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/ConceptNumericTest.java b/api/src/test/java/org/openmrs/ConceptNumericTest.java\nindex 7342857..5e1e47b 100644\n--- a/api/src/test/java/org/openmrs/ConceptNumericTest.java\n+++ b/api/src/test/java/org/openmrs/ConceptNumericTest.java\n@@ -75,7 +75,7 @@\n \t\tConceptNumeric cn = new ConceptNumeric(c);\r\n \t\t\r\n \t\tfor (ConceptSet cSet : cn.getConceptSets()) {\r\n-\t\t\tAssert.assertSame(cn, cSet.getConcept());\r\n+\t\t\tAssert.assertSame(cn, cSet.getConceptSet());\r\n \t\t}\r\n \t}\r\n \t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 78, "bugNodeStartChar": 2946, "bugNodeLength": 17, "fixLineNum": 78, "fixNodeStartChar": 2869, "fixNodeLength": 20, "sourceBeforeFix": "cSet.getConcept()", "sourceAfterFix": "cSet.getConceptSet()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "fixCommitParentSHA1": "35a8cf85bbb25e323719b695469c09905aa2b202", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\nindex 5d7da18..c054267 100644\n--- a/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\n@@ -60,7 +60,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n+\tpublic synchronized Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r\n@@ -72,7 +72,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n+\tpublic synchronized Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n \t\tif (handlerClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r\n@@ -159,7 +159,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n+\tpublic synchronized CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 58, "bugNodeStartChar": 1864, "bugNodeLength": 321, "fixLineNum": 58, "fixNodeStartChar": 1807, "fixNodeLength": 324, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "fixCommitParentSHA1": "35a8cf85bbb25e323719b695469c09905aa2b202", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\nindex 5d7da18..c054267 100644\n--- a/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\n@@ -60,7 +60,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n+\tpublic synchronized Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r\n@@ -72,7 +72,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n+\tpublic synchronized Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n \t\tif (handlerClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r\n@@ -159,7 +159,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n+\tpublic synchronized CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 70, "bugNodeStartChar": 2191, "bugNodeLength": 327, "fixLineNum": 70, "fixNodeStartChar": 2122, "fixNodeLength": 330, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "fixCommitParentSHA1": "35a8cf85bbb25e323719b695469c09905aa2b202", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\nindex 5d7da18..c054267 100644\n--- a/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/DatatypeServiceImpl.java\n@@ -60,7 +60,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n+\tpublic synchronized Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r\n@@ -72,7 +72,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n+\tpublic synchronized Set<Class<? extends CustomDatatypeHandler<?, ?>>> getAllHandlerClasses() {\r\n \t\tif (handlerClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r\n@@ -159,7 +159,7 @@\n \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n-\tpublic CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n+\tpublic synchronized CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 157, "bugNodeStartChar": 4992, "bugNodeLength": 802, "fixLineNum": 157, "fixNodeStartChar": 4836, "fixNodeLength": 793, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "fixCommitParentSHA1": "35a8cf85bbb25e323719b695469c09905aa2b202", "bugFilePath": "web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java b/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java\nindex 9c7b8d9..3638032 100644\n--- a/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java\n+++ b/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java\n@@ -144,7 +144,7 @@\n \t *      javax.servlet.http.HttpServletResponse)\r\n \t */\r\n \t@Override\r\n-\tprotected void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,\r\n+\tprotected synchronized void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,\r\n \t        ServletException {\r\n \t\t\r\n \t\tString page = httpRequest.getParameter(\"page\");\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 140, "bugNodeStartChar": 5128, "bugNodeLength": 6313, "fixLineNum": 140, "fixNodeStartChar": 4989, "fixNodeLength": 6170, "sourceBeforeFix": "4", "sourceAfterFix": "36"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "2d21e297b35059a577f6e111614bbebef3505632", "fixCommitParentSHA1": "8354f51f9107162e68b58605339d29e83f5d03c4", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java b/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java\nindex 529a12d..55b45e6 100644\n--- a/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java\n@@ -112,7 +112,7 @@\n \t\r\n \t@ModelAttribute(\"providerAttributeTypes\")\r\n \tpublic List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {\r\n-\t\treturn Context.getProviderService().getAllProviderAttributeTypes(false);\r\n+\t\treturn Context.getProviderService().getAllProviderAttributeTypes(true);\r\n \t}\r\n \t\r\n \t@RequestMapping(method = RequestMethod.GET)\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 115, "bugNodeStartChar": 4386, "bugNodeLength": 64, "fixLineNum": 115, "fixNodeStartChar": 4272, "fixNodeLength": 63, "sourceBeforeFix": "Context.getProviderService().getAllProviderAttributeTypes(false)", "sourceAfterFix": "Context.getProviderService().getAllProviderAttributeTypes(true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "1fb1de0cd8008d64284da71f49d56c435f7d153b", "fixCommitParentSHA1": "5a6a33a11fbe6f1e0d6224ed8de30a6946f3880f", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java b/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java\nindex 529a12d..55b45e6 100644\n--- a/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/provider/ProviderFormController.java\n@@ -112,7 +112,7 @@\n \t\r\n \t@ModelAttribute(\"providerAttributeTypes\")\r\n \tpublic List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {\r\n-\t\treturn Context.getProviderService().getAllProviderAttributeTypes(false);\r\n+\t\treturn Context.getProviderService().getAllProviderAttributeTypes(true);\r\n \t}\r\n \t\r\n \t@RequestMapping(method = RequestMethod.GET)\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 115, "bugNodeStartChar": 4386, "bugNodeLength": 64, "fixLineNum": 115, "fixNodeStartChar": 4272, "fixNodeLength": 63, "sourceBeforeFix": "Context.getProviderService().getAllProviderAttributeTypes(false)", "sourceAfterFix": "Context.getProviderService().getAllProviderAttributeTypes(true)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "95db9b935c3b0f4650e6fd13d807bb44e223ca95", "fixCommitParentSHA1": "059e1cfb09a8d07f5e4b621152495d28d9f9e7df", "bugFilePath": "api/src/main/java/org/openmrs/SimpleDosingInstructions.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/SimpleDosingInstructions.java b/api/src/main/java/org/openmrs/SimpleDosingInstructions.java\nindex 5210593..fe52b00 100644\n--- a/api/src/main/java/org/openmrs/SimpleDosingInstructions.java\n+++ b/api/src/main/java/org/openmrs/SimpleDosingInstructions.java\n@@ -112,7 +112,7 @@\n \t\tsimpleDosingInstructions.setDurationUnits(order.getDurationUnits());\r\n \t\tsimpleDosingInstructions.setAsNeeded(order.getAsNeeded());\r\n \t\tsimpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());\r\n-\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getInstructions());\r\n+\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getDosingInstructions());\r\n \t\treturn simpleDosingInstructions;\r\n \t}\r\n \t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 115, "bugNodeStartChar": 4025, "bugNodeLength": 23, "fixLineNum": 115, "fixNodeStartChar": 3911, "fixNodeLength": 29, "sourceBeforeFix": "order.getInstructions()", "sourceAfterFix": "order.getDosingInstructions()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "95db9b935c3b0f4650e6fd13d807bb44e223ca95", "fixCommitParentSHA1": "059e1cfb09a8d07f5e4b621152495d28d9f9e7df", "bugFilePath": "api/src/main/java/org/openmrs/SimpleDosingInstructions.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/SimpleDosingInstructions.java b/api/src/main/java/org/openmrs/SimpleDosingInstructions.java\nindex 5210593..fe52b00 100644\n--- a/api/src/main/java/org/openmrs/SimpleDosingInstructions.java\n+++ b/api/src/main/java/org/openmrs/SimpleDosingInstructions.java\n@@ -112,7 +112,7 @@\n \t\tsimpleDosingInstructions.setDurationUnits(order.getDurationUnits());\r\n \t\tsimpleDosingInstructions.setAsNeeded(order.getAsNeeded());\r\n \t\tsimpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());\r\n-\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getInstructions());\r\n+\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getDosingInstructions());\r\n \t\treturn simpleDosingInstructions;\r\n \t}\r\n \t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 115, "bugNodeStartChar": 4025, "bugNodeLength": 23, "fixLineNum": 115, "fixNodeStartChar": 3911, "fixNodeLength": 29, "sourceBeforeFix": "order.getInstructions()", "sourceAfterFix": "order.getDosingInstructions()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "api/src/main/java/org/openmrs/api/context/Daemon.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/Daemon.java b/api/src/main/java/org/openmrs/api/context/Daemon.java\nindex 6a0fac7..0e73116 100644\n--- a/api/src/main/java/org/openmrs/api/context/Daemon.java\n+++ b/api/src/main/java/org/openmrs/api/context/Daemon.java\n@@ -112,7 +112,7 @@\n \t * @should not be called from other methods other than TimerSchedulerTask\r\n \t * @should not throw error if called from a TimerSchedulerTask class\r\n \t */\r\n-\tpublic static void executeScheduledTask(final Task task) throws Throwable {\r\n+\tpublic static void executeScheduledTask(final Task task) throws Exception {\r\n \t\t\r\n \t\t// quick check to make sure we're only being called by ourselves\r\n \t\t//Class<?> callerClass = Reflection.getCallerClass(0);\r\n@@ -323,14 +323,14 @@\n \t\t/**\r\n \t\t * The exception thrown (if any) by the method called in {@link #run()}\r\n \t\t */\r\n-\t\tprotected Throwable exceptionThrown = null;\r\n+\t\tprotected Exception exceptionThrown = null;\r\n \t\t\r\n \t\t/**\r\n \t\t * Gets the exception thrown (if any) by the method called in {@link #run()}\r\n \t\t *\r\n \t\t * @return the thrown exception (if any).\r\n \t\t */\r\n-\t\tpublic Throwable getExceptionThrown() {\r\n+\t\tpublic Exception getExceptionThrown() {\r\n \t\t\treturn exceptionThrown;\r\n \t\t}\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 106, "bugNodeStartChar": 3740, "bugNodeLength": 1603, "fixLineNum": 106, "fixNodeStartChar": 3635, "fixNodeLength": 1549, "sourceBeforeFix": "/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Throwable {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException(\"This method can only be called from the TimerSchedulerTask class, not \" + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } ", "sourceAfterFix": "/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Exception {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException(\"This method can only be called from the TimerSchedulerTask class, not \" + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "api/src/main/java/org/openmrs/api/context/Daemon.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/Daemon.java b/api/src/main/java/org/openmrs/api/context/Daemon.java\nindex 6a0fac7..0e73116 100644\n--- a/api/src/main/java/org/openmrs/api/context/Daemon.java\n+++ b/api/src/main/java/org/openmrs/api/context/Daemon.java\n@@ -112,7 +112,7 @@\n \t * @should not be called from other methods other than TimerSchedulerTask\r\n \t * @should not throw error if called from a TimerSchedulerTask class\r\n \t */\r\n-\tpublic static void executeScheduledTask(final Task task) throws Throwable {\r\n+\tpublic static void executeScheduledTask(final Task task) throws Exception {\r\n \t\t\r\n \t\t// quick check to make sure we're only being called by ourselves\r\n \t\t//Class<?> callerClass = Reflection.getCallerClass(0);\r\n@@ -323,14 +323,14 @@\n \t\t/**\r\n \t\t * The exception thrown (if any) by the method called in {@link #run()}\r\n \t\t */\r\n-\t\tprotected Throwable exceptionThrown = null;\r\n+\t\tprotected Exception exceptionThrown = null;\r\n \t\t\r\n \t\t/**\r\n \t\t * Gets the exception thrown (if any) by the method called in {@link #run()}\r\n \t\t *\r\n \t\t * @return the thrown exception (if any).\r\n \t\t */\r\n-\t\tpublic Throwable getExceptionThrown() {\r\n+\t\tpublic Exception getExceptionThrown() {\r\n \t\t\treturn exceptionThrown;\r\n \t\t}\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 323, "bugNodeStartChar": 9909, "bugNodeLength": 132, "fixLineNum": 323, "fixNodeStartChar": 9587, "fixNodeLength": 129, "sourceBeforeFix": "/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Throwable exceptionThrown=null; ", "sourceAfterFix": "/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Exception exceptionThrown=null; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "api/src/main/java/org/openmrs/api/context/Daemon.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/context/Daemon.java b/api/src/main/java/org/openmrs/api/context/Daemon.java\nindex 6a0fac7..0e73116 100644\n--- a/api/src/main/java/org/openmrs/api/context/Daemon.java\n+++ b/api/src/main/java/org/openmrs/api/context/Daemon.java\n@@ -112,7 +112,7 @@\n \t * @should not be called from other methods other than TimerSchedulerTask\r\n \t * @should not throw error if called from a TimerSchedulerTask class\r\n \t */\r\n-\tpublic static void executeScheduledTask(final Task task) throws Throwable {\r\n+\tpublic static void executeScheduledTask(final Task task) throws Exception {\r\n \t\t\r\n \t\t// quick check to make sure we're only being called by ourselves\r\n \t\t//Class<?> callerClass = Reflection.getCallerClass(0);\r\n@@ -323,14 +323,14 @@\n \t\t/**\r\n \t\t * The exception thrown (if any) by the method called in {@link #run()}\r\n \t\t */\r\n-\t\tprotected Throwable exceptionThrown = null;\r\n+\t\tprotected Exception exceptionThrown = null;\r\n \t\t\r\n \t\t/**\r\n \t\t * Gets the exception thrown (if any) by the method called in {@link #run()}\r\n \t\t *\r\n \t\t * @return the thrown exception (if any).\r\n \t\t */\r\n-\t\tpublic Throwable getExceptionThrown() {\r\n+\t\tpublic Exception getExceptionThrown() {\r\n \t\t\treturn exceptionThrown;\r\n \t\t}\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 328, "bugNodeStartChar": 10049, "bugNodeLength": 217, "fixLineNum": 328, "fixNodeStartChar": 9722, "fixNodeLength": 210, "sourceBeforeFix": "/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Throwable getExceptionThrown(){   return exceptionThrown; } ", "sourceAfterFix": "/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Exception getExceptionThrown(){   return exceptionThrown; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java\nindex 843deb6..3bb1f19 100644\n--- a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java\n+++ b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java\n@@ -48,7 +48,7 @@\n \t\ttry {\r\n \t\t\tDaemon.executeScheduledTask(task);\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\t// Fix #862: IllegalStateException: Timer already cancelled.\r\n \t\t\t// Suppress error in order to keep the scheduler's Timer from completely failing.\r\n \t\t\tlog.error(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 51, "bugNodeStartChar": 1540, "bugNodeLength": 11, "fixLineNum": 51, "fixNodeStartChar": 1490, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\nindex f574bb6..4ef2e41 100644\n--- a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n+++ b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n@@ -363,7 +363,7 @@\n \t\t\t\tfield.setAccessible(true);\r\n \t\t\t\tfield.set(cacheManager, null);\r\n \t\t\t}\r\n-\t\t\tcatch (Throwable ex) {\r\n+\t\t\tcatch (Exception ex) {\r\n \t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t}\r\n \t\t}\r\n@@ -470,7 +470,7 @@\n \t\t\t\t\tlog.info(\"onShutdown Stopping thread: \" + thread.getName());\r\n \t\t\t\t\tthread.stop();\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable ex) {\r\n+\t\t\t\tcatch (Exception ex) {\r\n \t\t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t\t}\r\n \t\t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 366, "bugNodeStartChar": 11441, "bugNodeLength": 12, "fixLineNum": 366, "fixNodeStartChar": 11076, "fixNodeLength": 12, "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\nindex f574bb6..4ef2e41 100644\n--- a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n+++ b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java\n@@ -363,7 +363,7 @@\n \t\t\t\tfield.setAccessible(true);\r\n \t\t\t\tfield.set(cacheManager, null);\r\n \t\t\t}\r\n-\t\t\tcatch (Throwable ex) {\r\n+\t\t\tcatch (Exception ex) {\r\n \t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t}\r\n \t\t}\r\n@@ -470,7 +470,7 @@\n \t\t\t\t\tlog.info(\"onShutdown Stopping thread: \" + thread.getName());\r\n \t\t\t\t\tthread.stop();\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable ex) {\r\n+\t\t\t\tcatch (Exception ex) {\r\n \t\t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t\t}\r\n \t\t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 473, "bugNodeStartChar": 15170, "bugNodeLength": 12, "fixLineNum": 473, "fixNodeStartChar": 14698, "fixNodeLength": 12, "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/Listener.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java\nindex dd63212..4a15bd5 100644\n--- a/web/src/main/java/org/openmrs/web/Listener.java\n+++ b/web/src/main/java/org/openmrs/web/Listener.java\n@@ -243,7 +243,7 @@\n \t\t\t// start the scheduled tasks\r\n \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r\n@@ -558,7 +558,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\t\tcatch (Throwable e) {\r\n+\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n@@ -592,7 +592,7 @@\n \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n-\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n+\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\t\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r\n@@ -632,7 +632,7 @@\n \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n+\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\t// just keep going if we get an error shutting down.  was probably caused by the module \r\n \t\t\t\t\t\t\t\t// that actually got us to this point!\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r\n@@ -646,7 +646,7 @@\n \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable t2) {\r\n+\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\t// a mandatory or core module is causing spring to fail to start up.  We don't want those\r\n \t\t\t\t\t// stopped so we must report this error to the higher authorities\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 246, "bugNodeStartChar": 9050, "bugNodeLength": 11, "fixLineNum": 246, "fixNodeStartChar": 8805, "fixNodeLength": 11, "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/Listener.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java\nindex dd63212..4a15bd5 100644\n--- a/web/src/main/java/org/openmrs/web/Listener.java\n+++ b/web/src/main/java/org/openmrs/web/Listener.java\n@@ -243,7 +243,7 @@\n \t\t\t// start the scheduled tasks\r\n \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r\n@@ -558,7 +558,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\t\tcatch (Throwable e) {\r\n+\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n@@ -592,7 +592,7 @@\n \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n-\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n+\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\t\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r\n@@ -632,7 +632,7 @@\n \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n+\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\t// just keep going if we get an error shutting down.  was probably caused by the module \r\n \t\t\t\t\t\t\t\t// that actually got us to this point!\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r\n@@ -646,7 +646,7 @@\n \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable t2) {\r\n+\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\t// a mandatory or core module is causing spring to fail to start up.  We don't want those\r\n \t\t\t\t\t// stopped so we must report this error to the higher authorities\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 561, "bugNodeStartChar": 20572, "bugNodeLength": 11, "fixLineNum": 561, "fixNodeStartChar": 20012, "fixNodeLength": 11, "sourceBeforeFix": "Throwable e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/Listener.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java\nindex dd63212..4a15bd5 100644\n--- a/web/src/main/java/org/openmrs/web/Listener.java\n+++ b/web/src/main/java/org/openmrs/web/Listener.java\n@@ -243,7 +243,7 @@\n \t\t\t// start the scheduled tasks\r\n \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r\n@@ -558,7 +558,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\t\tcatch (Throwable e) {\r\n+\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n@@ -592,7 +592,7 @@\n \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n-\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n+\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\t\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r\n@@ -632,7 +632,7 @@\n \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n+\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\t// just keep going if we get an error shutting down.  was probably caused by the module \r\n \t\t\t\t\t\t\t\t// that actually got us to this point!\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r\n@@ -646,7 +646,7 @@\n \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable t2) {\r\n+\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\t// a mandatory or core module is causing spring to fail to start up.  We don't want those\r\n \t\t\t\t\t// stopped so we must report this error to the higher authorities\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 588, "bugNodeStartChar": 21229, "bugNodeLength": 3171, "fixLineNum": 588, "fixNodeStartChar": 20642, "fixNodeLength": 3095, "sourceBeforeFix": "/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage(\"Unable to start module\",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal(\"Unable to refresh the spring application context.  Root Cause was:\",rootCause);       }  else {         log.fatal(\"Unable to refresh the spring application context. Unloading all modules,  Error was:\",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace(\"Unable to shutdown module:\" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),\"Got an error while starting a mandatory module: \" + e.getMessage() + \". Check the server logs for more information\");       } catch (      Throwable t2) {         log.warn(\"caught another error: \",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } ", "sourceAfterFix": "/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage(\"Unable to start module\",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal(\"Unable to refresh the spring application context.  Root Cause was:\",rootCause);       }  else {         log.fatal(\"Unable to refresh the spring application context. Unloading all modules,  Error was:\",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace(\"Unable to shutdown module:\" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),\"Got an error while starting a mandatory module: \" + e.getMessage() + \". Check the server logs for more information\");       } catch (      Throwable t2) {         log.warn(\"caught another error: \",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/Listener.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java\nindex dd63212..4a15bd5 100644\n--- a/web/src/main/java/org/openmrs/web/Listener.java\n+++ b/web/src/main/java/org/openmrs/web/Listener.java\n@@ -243,7 +243,7 @@\n \t\t\t// start the scheduled tasks\r\n \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r\n@@ -558,7 +558,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\t\tcatch (Throwable e) {\r\n+\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n@@ -592,7 +592,7 @@\n \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n-\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n+\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\t\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r\n@@ -632,7 +632,7 @@\n \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n+\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\t// just keep going if we get an error shutting down.  was probably caused by the module \r\n \t\t\t\t\t\t\t\t// that actually got us to this point!\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r\n@@ -646,7 +646,7 @@\n \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable t2) {\r\n+\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\t// a mandatory or core module is causing spring to fail to start up.  We don't want those\r\n \t\t\t\t\t// stopped so we must report this error to the higher authorities\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 635, "bugNodeStartChar": 23120, "bugNodeLength": 12, "fixLineNum": 635, "fixNodeStartChar": 22486, "fixNodeLength": 12, "sourceBeforeFix": "Throwable t3", "sourceAfterFix": "Exception t3"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/Listener.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java\nindex dd63212..4a15bd5 100644\n--- a/web/src/main/java/org/openmrs/web/Listener.java\n+++ b/web/src/main/java/org/openmrs/web/Listener.java\n@@ -243,7 +243,7 @@\n \t\t\t// start the scheduled tasks\r\n \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r\n@@ -558,7 +558,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\t\tcatch (Throwable e) {\r\n+\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n@@ -592,7 +592,7 @@\n \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n-\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n+\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\t\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r\n@@ -632,7 +632,7 @@\n \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n+\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\t// just keep going if we get an error shutting down.  was probably caused by the module \r\n \t\t\t\t\t\t\t\t// that actually got us to this point!\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r\n@@ -646,7 +646,7 @@\n \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable t2) {\r\n+\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\t// a mandatory or core module is causing spring to fail to start up.  We don't want those\r\n \t\t\t\t\t// stopped so we must report this error to the higher authorities\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 649, "bugNodeStartChar": 23764, "bugNodeLength": 12, "fixLineNum": 649, "fixNodeStartChar": 23116, "fixNodeLength": 12, "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java b/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java\nindex a4df15d..0a4c878 100644\n--- a/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java\n+++ b/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java\n@@ -51,7 +51,7 @@\n \t\ttry {\r\n \t\t\tthis.destroy();\r\n \t\t}\r\n-\t\tcatch (Throwable ex) {\r\n+\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r\n@@ -64,7 +64,7 @@\n \t\t\tfield.setAccessible(true);\r\n \t\t\tinit((ServletConfig) field.get(this));\r\n \t\t}\r\n-\t\tcatch (Throwable ex) {\r\n+\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 54, "bugNodeStartChar": 1694, "bugNodeLength": 12, "fixLineNum": 54, "fixNodeStartChar": 1641, "fixNodeLength": 12, "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java b/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java\nindex a4df15d..0a4c878 100644\n--- a/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java\n+++ b/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java\n@@ -51,7 +51,7 @@\n \t\ttry {\r\n \t\t\tthis.destroy();\r\n \t\t}\r\n-\t\tcatch (Throwable ex) {\r\n+\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r\n@@ -64,7 +64,7 @@\n \t\t\tfield.setAccessible(true);\r\n \t\t\tinit((ServletConfig) field.get(this));\r\n \t\t}\r\n-\t\tcatch (Throwable ex) {\r\n+\t\tcatch (Exception ex) {\r\n \t\t\tlog.error(ex);\r\n \t\t}\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2054, "bugNodeLength": 12, "fixLineNum": 67, "fixNodeStartChar": 1988, "fixNodeLength": 12, "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec", "bugFilePath": "web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java b/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java\nindex 9dd7a93..87bbced 100644\n--- a/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java\n+++ b/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java\n@@ -380,7 +380,7 @@\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n-\t\t\tcatch (Throwable t2) {\r\n+\t\t\tcatch (Exception t2) {\r\n \t\t\t\tlog.error(\"Error while trying to authenticate as super user (voided version)\", e);\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 383, "bugNodeStartChar": 15420, "bugNodeLength": 12, "fixLineNum": 383, "fixNodeStartChar": 15038, "fixNodeLength": 12, "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e07a7b8bcd1e3abc3f3ea5559c8c74a6f8f8ccdc", "fixCommitParentSHA1": "a4582641131feda0f9b74bb4f745238a7767a5d2", "bugFilePath": "api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java b/api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java\nindex 9c554d0..fa8a057 100644\n--- a/api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ProgramWorkflowServiceTest.java\n@@ -343,7 +343,7 @@\n \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\t\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n-\t\tassertEquals(2, possibleOutcomes.size());\r\n+\t\tassertEquals(4, possibleOutcomes.size());\r\n \t}\r\n \t\r\n \t@Test\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 346, "bugNodeStartChar": 13805, "bugNodeLength": 40, "fixLineNum": 346, "fixNodeStartChar": 13460, "fixNodeLength": 40, "sourceBeforeFix": "assertEquals(2,possibleOutcomes.size())", "sourceAfterFix": "assertEquals(4,possibleOutcomes.size())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e07a7b8bcd1e3abc3f3ea5559c8c74a6f8f8ccdc", "fixCommitParentSHA1": "a4582641131feda0f9b74bb4f745238a7767a5d2", "bugFilePath": "web/src/test/java/org/openmrs/web/dwr/DWRProgramWorkflowServiceTest.java", "fixPatch": "diff --git a/web/src/test/java/org/openmrs/web/dwr/DWRProgramWorkflowServiceTest.java b/web/src/test/java/org/openmrs/web/dwr/DWRProgramWorkflowServiceTest.java\nindex 8e25003..63df58f 100644\n--- a/web/src/test/java/org/openmrs/web/dwr/DWRProgramWorkflowServiceTest.java\n+++ b/web/src/test/java/org/openmrs/web/dwr/DWRProgramWorkflowServiceTest.java\n@@ -27,6 +27,6 @@\n \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tVector<ListItem> possibleOutcomes = dwrProgramWorkflowService.getPossibleOutcomes(4);\r\n \t\tassertFalse(possibleOutcomes.isEmpty());\r\n-\t\tassertEquals(2, possibleOutcomes.size());\r\n+\t\tassertEquals(4, possibleOutcomes.size());\r\n \t}\r\n }\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 30, "bugNodeStartChar": 1094, "bugNodeLength": 40, "fixLineNum": 30, "fixNodeStartChar": 1065, "fixNodeLength": 40, "sourceBeforeFix": "assertEquals(2,possibleOutcomes.size())", "sourceAfterFix": "assertEquals(4,possibleOutcomes.size())"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "fixCommitParentSHA1": "0a0de43bf6458bddb3adbd30d81a97d8fec9deb3", "bugFilePath": "api/src/main/java/org/openmrs/OrderFrequency.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/OrderFrequency.java b/api/src/main/java/org/openmrs/OrderFrequency.java\nindex cb5da6f..8f5a553 100644\n--- a/api/src/main/java/org/openmrs/OrderFrequency.java\n+++ b/api/src/main/java/org/openmrs/OrderFrequency.java\n@@ -105,7 +105,7 @@\n \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n-\t\tif (getConcept() != null || getConcept().getName() != null) {\r\n+\t\tif (getConcept() != null && getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r\n@@ -116,7 +116,7 @@\n \t */\r\n \t@Override\r\n \tpublic String getDescription() {\r\n-\t\tif (getConcept() != null || getConcept().getDescription() != null) {\r\n+\t\tif (getConcept() != null && getConcept().getDescription() != null) {\r\n \t\t\treturn getConcept().getDescription().getDescription();\r\n \t\t}\r\n \t\treturn null;\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 108, "bugNodeStartChar": 2482, "bugNodeLength": 54, "fixLineNum": 108, "fixNodeStartChar": 2375, "fixNodeLength": 54, "sourceBeforeFix": "getConcept() != null || getConcept().getName() != null", "sourceAfterFix": "getConcept() != null && getConcept().getName() != null"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "fixCommitParentSHA1": "0a0de43bf6458bddb3adbd30d81a97d8fec9deb3", "bugFilePath": "api/src/main/java/org/openmrs/OrderFrequency.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/OrderFrequency.java b/api/src/main/java/org/openmrs/OrderFrequency.java\nindex cb5da6f..8f5a553 100644\n--- a/api/src/main/java/org/openmrs/OrderFrequency.java\n+++ b/api/src/main/java/org/openmrs/OrderFrequency.java\n@@ -105,7 +105,7 @@\n \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n-\t\tif (getConcept() != null || getConcept().getName() != null) {\r\n+\t\tif (getConcept() != null && getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r\n@@ -116,7 +116,7 @@\n \t */\r\n \t@Override\r\n \tpublic String getDescription() {\r\n-\t\tif (getConcept() != null || getConcept().getDescription() != null) {\r\n+\t\tif (getConcept() != null && getConcept().getDescription() != null) {\r\n \t\t\treturn getConcept().getDescription().getDescription();\r\n \t\t}\r\n \t\treturn null;\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 119, "bugNodeStartChar": 2732, "bugNodeLength": 61, "fixLineNum": 119, "fixNodeStartChar": 2614, "fixNodeLength": 61, "sourceBeforeFix": "getConcept() != null || getConcept().getDescription() != null", "sourceAfterFix": "getConcept() != null && getConcept().getDescription() != null"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b25df4b81f2bca4e6ba43796512625dab248a9cf", "fixCommitParentSHA1": "ef7b6da845e59cfdeadbeeed16933c6424390bbe", "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java\nindex 2bd1dd0..9da2255 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java\n@@ -446,7 +446,7 @@\n \t\t\tsubquery.add(Restrictions.eqProperty(\"ff.form\", \"form\"));\r\n \t\t\tsubquery.add(Restrictions.in(\"ff.formFieldId\", anyFormFieldIds));\r\n \t\t\t\r\n-\t\t\tcrit.add(Subqueries.gt(0L, subquery));\r\n+\t\t\tcrit.add(Subqueries.lt(0L, subquery));\r\n \t\t}\r\n \t\t\r\n \t\t//select * from form where len(containingallformfields) = (select count(*) from form_field ff where ff.form_id = form_id and form_field_id in (containingallformfields);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 449, "bugNodeStartChar": 15602, "bugNodeLength": 27, "fixLineNum": 449, "fixNodeStartChar": 15154, "fixNodeLength": 27, "sourceBeforeFix": "Subqueries.gt(0L,subquery)", "sourceAfterFix": "Subqueries.lt(0L,subquery)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b25df4b81f2bca4e6ba43796512625dab248a9cf", "fixCommitParentSHA1": "ef7b6da845e59cfdeadbeeed16933c6424390bbe", "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java\nindex 2bd1dd0..9da2255 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateFormDAO.java\n@@ -446,7 +446,7 @@\n \t\t\tsubquery.add(Restrictions.eqProperty(\"ff.form\", \"form\"));\r\n \t\t\tsubquery.add(Restrictions.in(\"ff.formFieldId\", anyFormFieldIds));\r\n \t\t\t\r\n-\t\t\tcrit.add(Subqueries.gt(0L, subquery));\r\n+\t\t\tcrit.add(Subqueries.lt(0L, subquery));\r\n \t\t}\r\n \t\t\r\n \t\t//select * from form where len(containingallformfields) = (select count(*) from form_field ff where ff.form_id = form_id and form_field_id in (containingallformfields);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 449, "bugNodeStartChar": 15602, "bugNodeLength": 27, "fixLineNum": 449, "fixNodeStartChar": 15154, "fixNodeLength": 27, "sourceBeforeFix": "Subqueries.gt(0L,subquery)", "sourceAfterFix": "Subqueries.lt(0L,subquery)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "b53085bdfbef2ad0c9ac7f59822a02ee006b41b7", "fixCommitParentSHA1": "ef61a0cab6d5a4f4df6d663917e8478faa40bf36", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java b/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java\nindex df87763..86ffec5 100644\n--- a/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java\n@@ -247,7 +247,7 @@\n \t\t\t\t\r\n \t\t\t\tif (!patient.getVoided()) {\r\n \t\t\t\t\t// save the relationships to the database\r\n-\t\t\t\t\tMap<String, Relationship> relationships = getRelationshipsMap(patientModel, request);\r\n+\t\t\t\t\tMap<String, Relationship> relationships = getRelationshipsMap(patientModel, result, request);\r\n \t\t\t\t\tfor (Relationship relationship : relationships.values()) {\r\n \t\t\t\t\t\t// if the user added a person to this relationship, save\r\n \t\t\t\t\t\t// it\r\n@@ -347,6 +347,7 @@\n \t\r\n \t/**\r\n \t * Creates a map of string of the form 3b, 3a and the actual person Relationships\r\n+\t * @param result \r\n \t * \r\n \t * @param person the patient/person whose relationships to return\r\n \t * @param request the webRequest Object\r\n@@ -354,13 +355,13 @@\n \t */\r\n \t@ModelAttribute(\"relationshipsMap\")\r\n \tprivate Map<String, Relationship> getRelationshipsMap(@ModelAttribute(\"patientModel\") ShortPatientModel patientModel,\r\n-\t        WebRequest request) {\r\n+\t        BindingResult result, WebRequest request) {\r\n \t\t\r\n \t\t// Check if relationships must be shown\r\n \t\tString showRelationships = Context.getAdministrationService().getGlobalProperty(\r\n \t\t    OpenmrsConstants.GLOBAL_PROPERTY_NEWPATIENTFORM_SHOW_RELATIONSHIPS, \"false\");\r\n \t\t\r\n-\t\tif (\"false\".equals(showRelationships)) {\r\n+\t\tif (\"false\".equals(showRelationships) || result.hasErrors()) {\r\n \t\t\treturn new LinkedHashMap<String, Relationship>();\r\n \t\t}\r\n \t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 363, "bugNodeStartChar": 14955, "bugNodeLength": 33, "fixLineNum": 363, "fixNodeStartChar": 14593, "fixNodeLength": 55, "sourceBeforeFix": "\"false\".equals(showRelationships)", "sourceAfterFix": "\"false\".equals(showRelationships) || result.hasErrors()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "dfb59a9e68b9bb0863b1397ddd0df1fa15eccdb8", "fixCommitParentSHA1": "4724e755f5a522cfe75f222c576b2360fce3762f", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java b/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java\nindex df87763..86ffec5 100644\n--- a/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/patient/ShortPatientFormController.java\n@@ -247,7 +247,7 @@\n \t\t\t\t\r\n \t\t\t\tif (!patient.getVoided()) {\r\n \t\t\t\t\t// save the relationships to the database\r\n-\t\t\t\t\tMap<String, Relationship> relationships = getRelationshipsMap(patientModel, request);\r\n+\t\t\t\t\tMap<String, Relationship> relationships = getRelationshipsMap(patientModel, result, request);\r\n \t\t\t\t\tfor (Relationship relationship : relationships.values()) {\r\n \t\t\t\t\t\t// if the user added a person to this relationship, save\r\n \t\t\t\t\t\t// it\r\n@@ -347,6 +347,7 @@\n \t\r\n \t/**\r\n \t * Creates a map of string of the form 3b, 3a and the actual person Relationships\r\n+\t * @param result \r\n \t * \r\n \t * @param person the patient/person whose relationships to return\r\n \t * @param request the webRequest Object\r\n@@ -354,13 +355,13 @@\n \t */\r\n \t@ModelAttribute(\"relationshipsMap\")\r\n \tprivate Map<String, Relationship> getRelationshipsMap(@ModelAttribute(\"patientModel\") ShortPatientModel patientModel,\r\n-\t        WebRequest request) {\r\n+\t        BindingResult result, WebRequest request) {\r\n \t\t\r\n \t\t// Check if relationships must be shown\r\n \t\tString showRelationships = Context.getAdministrationService().getGlobalProperty(\r\n \t\t    OpenmrsConstants.GLOBAL_PROPERTY_NEWPATIENTFORM_SHOW_RELATIONSHIPS, \"false\");\r\n \t\t\r\n-\t\tif (\"false\".equals(showRelationships)) {\r\n+\t\tif (\"false\".equals(showRelationships) || result.hasErrors()) {\r\n \t\t\treturn new LinkedHashMap<String, Relationship>();\r\n \t\t}\r\n \t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 363, "bugNodeStartChar": 14955, "bugNodeLength": 33, "fixLineNum": 363, "fixNodeStartChar": 14593, "fixNodeLength": 55, "sourceBeforeFix": "\"false\".equals(showRelationships)", "sourceAfterFix": "\"false\".equals(showRelationships) || result.hasErrors()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/ConceptValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/ConceptValidator.java b/api/src/main/java/org/openmrs/validator/ConceptValidator.java\nindex 8aa2da4..4002573 100644\n--- a/api/src/main/java/org/openmrs/validator/ConceptValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/ConceptValidator.java\n@@ -177,8 +177,8 @@\n \t\t\t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t\t\t\r\n \t\t\t\t\t\t\t\t//skip same\r\n-\t\t\t\t\t\t\t\tif (conceptToValidate.getConceptId() != null\r\n-\t\t\t\t\t\t\t\t        && conceptToValidate.getConceptId().equals(concept.getConceptId()))\r\n+\t\t\t\t\t\t\t\tif (conceptToValidate.getUuid() != null\r\n+\t\t\t\t\t\t\t\t        && conceptToValidate.getUuid().equals(concept.getUuid()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t\t\t\r\n \t\t\t\t\t\t\t\t//should be a unique name amongst all preferred and fully specified names in its locale system wide\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 180, "bugNodeStartChar": 8234, "bugNodeLength": 32, "fixLineNum": 180, "fixNodeStartChar": 8055, "fixNodeLength": 27, "sourceBeforeFix": "conceptToValidate.getConceptId()", "sourceAfterFix": "conceptToValidate.getUuid()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/ConceptValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/ConceptValidator.java b/api/src/main/java/org/openmrs/validator/ConceptValidator.java\nindex 8aa2da4..4002573 100644\n--- a/api/src/main/java/org/openmrs/validator/ConceptValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/ConceptValidator.java\n@@ -177,8 +177,8 @@\n \t\t\t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t\t\t\r\n \t\t\t\t\t\t\t\t//skip same\r\n-\t\t\t\t\t\t\t\tif (conceptToValidate.getConceptId() != null\r\n-\t\t\t\t\t\t\t\t        && conceptToValidate.getConceptId().equals(concept.getConceptId()))\r\n+\t\t\t\t\t\t\t\tif (conceptToValidate.getUuid() != null\r\n+\t\t\t\t\t\t\t\t        && conceptToValidate.getUuid().equals(concept.getUuid()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t\t\t\r\n \t\t\t\t\t\t\t\t//should be a unique name amongst all preferred and fully specified names in its locale system wide\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 180, "bugNodeStartChar": 8234, "bugNodeLength": 32, "fixLineNum": 180, "fixNodeStartChar": 8055, "fixNodeLength": 27, "sourceBeforeFix": "conceptToValidate.getConceptId()", "sourceAfterFix": "conceptToValidate.getUuid()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/PatientProgramValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\nindex fa91205..9bb6eb4 100644\n--- a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n@@ -140,7 +140,7 @@\n \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n-\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n+\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\t// we already have a patient state with the same work flow state and start date\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r\n@@ -185,7 +185,7 @@\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t\t\r\n-\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n+\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 143, "bugNodeStartChar": 6067, "bugNodeLength": 31, "fixLineNum": 143, "fixNodeStartChar": 5925, "fixNodeLength": 33, "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/PatientProgramValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\nindex fa91205..9bb6eb4 100644\n--- a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n@@ -140,7 +140,7 @@\n \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n-\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n+\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\t// we already have a patient state with the same work flow state and start date\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r\n@@ -185,7 +185,7 @@\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t\t\r\n-\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n+\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 143, "bugNodeStartChar": 6067, "bugNodeLength": 31, "fixLineNum": 143, "fixNodeStartChar": 5925, "fixNodeLength": 33, "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/PatientProgramValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\nindex fa91205..9bb6eb4 100644\n--- a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n@@ -140,7 +140,7 @@\n \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n-\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n+\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\t// we already have a patient state with the same work flow state and start date\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r\n@@ -185,7 +185,7 @@\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t\t\r\n-\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n+\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 188, "bugNodeStartChar": 8199, "bugNodeLength": 31, "fixLineNum": 188, "fixNodeStartChar": 8012, "fixNodeLength": 33, "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/PatientProgramValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\nindex fa91205..9bb6eb4 100644\n--- a/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/PatientProgramValidator.java\n@@ -140,7 +140,7 @@\n \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n-\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n+\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\t// we already have a patient state with the same work flow state and start date\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r\n@@ -185,7 +185,7 @@\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t\t\r\n-\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n+\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 188, "bugNodeStartChar": 8199, "bugNodeLength": 31, "fixLineNum": 188, "fixNodeStartChar": 8012, "fixNodeLength": 33, "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/ProgramValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/ProgramValidator.java b/api/src/main/java/org/openmrs/validator/ProgramValidator.java\nindex 7a551fa..5d1b9b2 100644\n--- a/api/src/main/java/org/openmrs/validator/ProgramValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/ProgramValidator.java\n@@ -63,7 +63,7 @@\n \t\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"description\", \"error.description.required\");\r\n \t\t\tList<Program> programs = Context.getProgramWorkflowService().getAllPrograms(false);\r\n \t\t\tfor (Program program : programs) {\r\n-\t\t\t\tif (program.getName().equals(p.getName()) && !program.getProgramId().equals(p.getProgramId())) {\r\n+\t\t\t\tif (program.getName().equals(p.getName()) && !program.getUuid().equals(p.getUuid())) {\r\n \t\t\t\t\terrors.rejectValue(\"name\", \"general.error.nameAlreadyInUse\");\r\n \t\t\t\t\tbreak;\r\n \t\t\t\t} else {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 66, "bugNodeStartChar": 2544, "bugNodeLength": 22, "fixLineNum": 66, "fixNodeStartChar": 2479, "fixNodeLength": 17, "sourceBeforeFix": "program.getProgramId()", "sourceAfterFix": "program.getUuid()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "fixCommitParentSHA1": "1adb490974aa0d69fcb64a58f59576424993cb41", "bugFilePath": "api/src/main/java/org/openmrs/validator/ProgramValidator.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/validator/ProgramValidator.java b/api/src/main/java/org/openmrs/validator/ProgramValidator.java\nindex 7a551fa..5d1b9b2 100644\n--- a/api/src/main/java/org/openmrs/validator/ProgramValidator.java\n+++ b/api/src/main/java/org/openmrs/validator/ProgramValidator.java\n@@ -63,7 +63,7 @@\n \t\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"description\", \"error.description.required\");\r\n \t\t\tList<Program> programs = Context.getProgramWorkflowService().getAllPrograms(false);\r\n \t\t\tfor (Program program : programs) {\r\n-\t\t\t\tif (program.getName().equals(p.getName()) && !program.getProgramId().equals(p.getProgramId())) {\r\n+\t\t\t\tif (program.getName().equals(p.getName()) && !program.getUuid().equals(p.getUuid())) {\r\n \t\t\t\t\terrors.rejectValue(\"name\", \"general.error.nameAlreadyInUse\");\r\n \t\t\t\t\tbreak;\r\n \t\t\t\t} else {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 66, "bugNodeStartChar": 2544, "bugNodeLength": 22, "fixLineNum": 66, "fixNodeStartChar": 2479, "fixNodeLength": 17, "sourceBeforeFix": "program.getProgramId()", "sourceAfterFix": "program.getUuid()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "788f17bef1ee997c7652cf6c560682d37edc24eb", "fixCommitParentSHA1": "0be5408023ff52e6acf6baa6922c66f768e9dcdd", "bugFilePath": "api/src/test/java/org/openmrs/api/ConceptServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex ba5b2e5..83f5cdf 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n@@ -1415,7 +1415,7 @@\n \t\tconceptService.saveConceptStopWord(conceptStopWord);\r\n \t\t\r\n \t\tList<String> conceptStopWords = conceptService.getConceptStopWords(Locale.US);\r\n-\t\tassertEquals(2, conceptStopWords.size());\r\n+\t\tassertEquals(1, conceptStopWords.size());\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1418, "bugNodeStartChar": 58874, "bugNodeLength": 40, "fixLineNum": 1418, "fixNodeStartChar": 57457, "fixNodeLength": 40, "sourceBeforeFix": "assertEquals(2,conceptStopWords.size())", "sourceAfterFix": "assertEquals(1,conceptStopWords.size())"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "8e3096cae54b7a772e6ad94cc45dae6344e92ab7", "fixCommitParentSHA1": "35093914b0f3797a355bd9ea6f7c8148768a8d67", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\nindex a322aa2..5990f27 100644\n--- a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n@@ -326,7 +326,7 @@\n \t\r\n \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n-\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n+\t\treturn Context.getVisitService().getAllVisitTypes();\r\n \t}\r\n \t\r\n \t@ModelAttribute(\"attributeTypes\")\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 329, "bugNodeStartChar": 13284, "bugNodeLength": 48, "fixLineNum": 329, "fixNodeStartChar": 12956, "fixNodeLength": 44, "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes(true)", "sourceAfterFix": "Context.getVisitService().getAllVisitTypes()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "35093914b0f3797a355bd9ea6f7c8148768a8d67", "fixCommitParentSHA1": "9542a04806a853686859bf69394fc57f900a91cb", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\nindex 5990f27..a322aa2 100644\n--- a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n@@ -326,7 +326,7 @@\n \t\r\n \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n-\t\treturn Context.getVisitService().getAllVisitTypes();\r\n+\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n \t}\r\n \t\r\n \t@ModelAttribute(\"attributeTypes\")\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 329, "bugNodeStartChar": 13284, "bugNodeLength": 44, "fixLineNum": 329, "fixNodeStartChar": 12956, "fixNodeLength": 48, "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes()", "sourceAfterFix": "Context.getVisitService().getAllVisitTypes(true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "2082d923ff4d3015eefa06e2e383dbe9fa3de2c5", "fixCommitParentSHA1": "b598f281edf6c17fd54ce83dacd9fcfe14516b77", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\nindex 6b32dcd..a322aa2 100644\n--- a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n@@ -326,7 +326,7 @@\n \t\r\n \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n-\t\treturn Context.getVisitService().getAllVisitTypes(false);\r\n+\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n \t}\r\n \t\r\n \t@ModelAttribute(\"attributeTypes\")\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 329, "bugNodeStartChar": 13284, "bugNodeLength": 49, "fixLineNum": 329, "fixNodeStartChar": 12956, "fixNodeLength": 48, "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes(false)", "sourceAfterFix": "Context.getVisitService().getAllVisitTypes(true)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "face989dd7a6641888bdec68b8b458b937e8d1e1", "fixCommitParentSHA1": "9b7bda8b5ee85d8b2ab0839679d36714e84d1eee", "bugFilePath": "api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\nindex b0ea726..92bd43a 100644\n--- a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n@@ -864,7 +864,7 @@\n \t\t}\r\n \t\tContext.getHL7Service().saveHL7InError(hl7InError);\r\n \t\tContext.getHL7Service().purgeHL7InQueue(hl7InQueue);\r\n-\t\tlog.error(error, cause);\r\n+\t\tlog.info(error, cause);\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 867, "bugNodeStartChar": 29023, "bugNodeLength": 23, "fixLineNum": 867, "fixNodeStartChar": 28157, "fixNodeLength": 22, "sourceBeforeFix": "log.error(error,cause)", "sourceAfterFix": "log.info(error,cause)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "face989dd7a6641888bdec68b8b458b937e8d1e1", "fixCommitParentSHA1": "9b7bda8b5ee85d8b2ab0839679d36714e84d1eee", "bugFilePath": "api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\nindex b0ea726..92bd43a 100644\n--- a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n@@ -864,7 +864,7 @@\n \t\t}\r\n \t\tContext.getHL7Service().saveHL7InError(hl7InError);\r\n \t\tContext.getHL7Service().purgeHL7InQueue(hl7InQueue);\r\n-\t\tlog.error(error, cause);\r\n+\t\tlog.info(error, cause);\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 867, "bugNodeStartChar": 29023, "bugNodeLength": 23, "fixLineNum": 867, "fixNodeStartChar": 28157, "fixNodeLength": 22, "sourceBeforeFix": "log.error(error,cause)", "sourceAfterFix": "log.info(error,cause)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d6683d7a2ec72295c4beb49fe36858eb639ee032", "fixCommitParentSHA1": "8ab86900625d09163d558bd7840043420503af6b", "bugFilePath": "web/src/test/java/org/openmrs/web/dwr/DWRProviderServiceTest.java", "fixPatch": "diff --git a/web/src/test/java/org/openmrs/web/dwr/DWRProviderServiceTest.java b/web/src/test/java/org/openmrs/web/dwr/DWRProviderServiceTest.java\nindex 76be8e9..a9f54d9 100644\n--- a/web/src/test/java/org/openmrs/web/dwr/DWRProviderServiceTest.java\n+++ b/web/src/test/java/org/openmrs/web/dwr/DWRProviderServiceTest.java\n@@ -64,7 +64,7 @@\n \t        throws Exception {\r\n \t\t\r\n \t\tVector<Object> providers = service.findProvider(\"provider\", true, 0, 10);\r\n-\t\tAssert.assertEquals(3, providers.size());\r\n+\t\tAssert.assertEquals(4, providers.size());\r\n \t\t\r\n \t\tAssert.assertTrue(CollectionUtils.exists(providers, new Predicate() {\r\n \t\t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2461, "bugNodeLength": 40, "fixLineNum": 67, "fixNodeStartChar": 2395, "fixNodeLength": 40, "sourceBeforeFix": "Assert.assertEquals(3,providers.size())", "sourceAfterFix": "Assert.assertEquals(4,providers.size())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "99bd2140d354fb492094b4e1557def9b5c643800", "fixCommitParentSHA1": "af516afc023cafaf36cc07940df5ee6a545db25e", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\nindex 7da0944..ea21e9d 100644\n--- a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n@@ -333,7 +333,7 @@\n \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n-\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n+\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 336, "bugNodeStartChar": 11613, "bugNodeLength": 26, "fixLineNum": 336, "fixNodeStartChar": 11278, "fixNodeLength": 32, "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "99bd2140d354fb492094b4e1557def9b5c643800", "fixCommitParentSHA1": "af516afc023cafaf36cc07940df5ee6a545db25e", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\nindex 7da0944..ea21e9d 100644\n--- a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n@@ -333,7 +333,7 @@\n \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n-\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n+\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 336, "bugNodeStartChar": 11613, "bugNodeLength": 26, "fixLineNum": 336, "fixNodeStartChar": 11278, "fixNodeLength": 32, "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c8fe889a5125e5bd80cb353a47ab4e3e87739ba4", "fixCommitParentSHA1": "66d499e127cd07978f8575a4140b8fb3e160c321", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\nindex 4345a9b..72884b9 100644\n--- a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n@@ -333,7 +333,7 @@\n \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n-\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n+\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 336, "bugNodeStartChar": 11613, "bugNodeLength": 26, "fixLineNum": 336, "fixNodeStartChar": 11278, "fixNodeLength": 32, "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c8fe889a5125e5bd80cb353a47ab4e3e87739ba4", "fixCommitParentSHA1": "66d499e127cd07978f8575a4140b8fb3e160c321", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\nindex 4345a9b..72884b9 100644\n--- a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n@@ -333,7 +333,7 @@\n \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n-\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n+\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 336, "bugNodeStartChar": 11613, "bugNodeLength": 26, "fixLineNum": 336, "fixNodeStartChar": 11278, "fixNodeLength": 32, "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "cb937d34c8bba4cac4cee727931dddc8371bd38f", "fixCommitParentSHA1": "98a180bb7fa8ec943748d6cc61d92ec597bb60cd", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\nindex 4345a9b..72884b9 100644\n--- a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n@@ -333,7 +333,7 @@\n \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n-\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n+\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 336, "bugNodeStartChar": 11613, "bugNodeLength": 26, "fixLineNum": 336, "fixNodeStartChar": 11278, "fixNodeLength": 32, "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cb937d34c8bba4cac4cee727931dddc8371bd38f", "fixCommitParentSHA1": "98a180bb7fa8ec943748d6cc61d92ec597bb60cd", "bugFilePath": "api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\nindex 4345a9b..72884b9 100644\n--- a/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/api/impl/ProgramWorkflowServiceImpl.java\n@@ -333,7 +333,7 @@\n \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n-\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n+\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 336, "bugNodeStartChar": 11613, "bugNodeLength": 26, "fixLineNum": 336, "fixNodeStartChar": 11278, "fixNodeLength": 32, "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "00d52565fc7047090c947eb7d34ca0392cf47002", "fixCommitParentSHA1": "491b2470c7640b2d9e613b547d5adaa117f7d276", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java b/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java\nindex 84ebc0e..7ea076c 100644\n--- a/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java\n@@ -36,7 +36,7 @@\n \t\t// determine whether it's need to show disclaimer on jsp page or not\r\n \t\t// as current user does not have enough permissions to view at least one\r\n \t\t// type of encounters\r\n-\t\tmodel.put(\"showDisclaimer\", Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n+\t\tmodel.put(\"showDisclaimer\", !Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n \t\r\n }\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 39, "bugNodeStartChar": 1471, "bugNodeLength": 86, "fixLineNum": 39, "fixNodeStartChar": 1433, "fixNodeLength": 87, "sourceBeforeFix": "Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())", "sourceAfterFix": "!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "00d52565fc7047090c947eb7d34ca0392cf47002", "fixCommitParentSHA1": "491b2470c7640b2d9e613b547d5adaa117f7d276", "bugFilePath": "web/src/main/java/org/openmrs/web/controller/PatientVisitsPortletController.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/PatientVisitsPortletController.java b/web/src/main/java/org/openmrs/web/controller/PatientVisitsPortletController.java\nindex 1bbc63b..03594c5 100644\n--- a/web/src/main/java/org/openmrs/web/controller/PatientVisitsPortletController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/PatientVisitsPortletController.java\n@@ -54,7 +54,7 @@\n \t\t// determine whether it's need to show disclaimer on jsp page or not\r\n \t\t// as current user does not have enough permissions to view at least one\r\n \t\t// type of encounters\r\n-\t\tmodel.put(\"showDisclaimer\", Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n+\t\tmodel.put(\"showDisclaimer\", !Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n \t\r\n }\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 57, "bugNodeStartChar": 2180, "bugNodeLength": 86, "fixLineNum": 57, "fixNodeStartChar": 2124, "fixNodeLength": 87, "sourceBeforeFix": "Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())", "sourceAfterFix": "!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "09f504b4985d7893731d1f1f5da2272c74801569", "fixCommitParentSHA1": "c7cb429b5b98c3915bc1815d56d3680f6c1d7949", "bugFilePath": "api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\nindex b549f79..53b73c4 100644\n--- a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n@@ -864,7 +864,7 @@\n \t\t}\r\n \t\tContext.getHL7Service().saveHL7InError(hl7InError);\r\n \t\tContext.getHL7Service().purgeHL7InQueue(hl7InQueue);\r\n-\t\tlog.error(error, cause);\r\n+\t\tlog.info(error, cause);\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 867, "bugNodeStartChar": 28933, "bugNodeLength": 23, "fixLineNum": 867, "fixNodeStartChar": 28067, "fixNodeLength": 22, "sourceBeforeFix": "log.error(error,cause)", "sourceAfterFix": "log.info(error,cause)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "09f504b4985d7893731d1f1f5da2272c74801569", "fixCommitParentSHA1": "c7cb429b5b98c3915bc1815d56d3680f6c1d7949", "bugFilePath": "api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\nindex b549f79..53b73c4 100644\n--- a/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/hl7/impl/HL7ServiceImpl.java\n@@ -864,7 +864,7 @@\n \t\t}\r\n \t\tContext.getHL7Service().saveHL7InError(hl7InError);\r\n \t\tContext.getHL7Service().purgeHL7InQueue(hl7InQueue);\r\n-\t\tlog.error(error, cause);\r\n+\t\tlog.info(error, cause);\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 867, "bugNodeStartChar": 28933, "bugNodeLength": 23, "fixLineNum": 867, "fixNodeStartChar": 28067, "fixNodeLength": 22, "sourceBeforeFix": "log.error(error,cause)", "sourceAfterFix": "log.info(error,cause)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c42fafa8e37df2c94b1a8223ef1f7950c2140ee8", "fixCommitParentSHA1": "bb6e28fb3f3ad1b6377d79f1c286a3a92e69ce12", "bugFilePath": "api/src/test/java/org/openmrs/report/PepfarReportFromXmlTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/report/PepfarReportFromXmlTest.java b/api/src/test/java/org/openmrs/report/PepfarReportFromXmlTest.java\nindex 66d567b..b2dbeb6 100644\n--- a/api/src/test/java/org/openmrs/report/PepfarReportFromXmlTest.java\n+++ b/api/src/test/java/org/openmrs/report/PepfarReportFromXmlTest.java\n@@ -133,7 +133,7 @@\n \t\t}\r\n \t\tif (Context.getReportObjectService().getPatientSearch(\"EnrolledOnDate\") == null) {\r\n \t\t\tPatientSearch ps = PatientSearch.createFilterSearch(ProgramStatePatientFilter.class);\r\n-\t\t\tps.addArgument(\"program\", hivProgram.getProgramId().toString(), Integer.class);\r\n+\t\t\tps.addArgument(\"program\", hivProgram.getProgramId().toString(), Program.class);\r\n \t\t\tps.addArgument(\"untilDate\", \"${date}\", Date.class);\r\n \t\t\tContext.getReportObjectService().saveReportObject(new PatientSearchReportObject(\"EnrolledOnDate\", ps));\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 136, "bugNodeStartChar": 6367, "bugNodeLength": 13, "fixLineNum": 136, "fixNodeStartChar": 6232, "fixNodeLength": 13, "sourceBeforeFix": "Integer.class", "sourceAfterFix": "Program.class"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "63dad4b878aa4ee03201ec8669a1ba0edfa5e999", "fixCommitParentSHA1": "ff908eabc2d086549981d0f8cb88bde838b98c2a", "bugFilePath": "api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java b/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\nindex 324f21c..d9d5f48 100644\n--- a/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\n+++ b/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\n@@ -166,7 +166,7 @@\n \t\t\t\t}\r\n \t\t\t\t\r\n \t\t\t\t//marks the changeset as a failed one\r\n-\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\");\r\n+\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\", be);\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 169, "bugNodeStartChar": 6104, "bugNodeLength": 75, "fixLineNum": 169, "fixNodeStartChar": 5936, "fixNodeLength": 79, "sourceBeforeFix": "new CustomChangeException(\"Failed to insert one or more concept map types\")", "sourceAfterFix": "new CustomChangeException(\"Failed to insert one or more concept map types\",be)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b9c238fc9e0e5735016102257d68ef21b54cfdff", "fixCommitParentSHA1": "0ff918438e050241184d15814022f0b2af6035a1", "bugFilePath": "api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java b/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\nindex 324f21c..d9d5f48 100644\n--- a/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\n+++ b/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\n@@ -166,7 +166,7 @@\n \t\t\t\t}\r\n \t\t\t\t\r\n \t\t\t\t//marks the changeset as a failed one\r\n-\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\");\r\n+\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\", be);\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 169, "bugNodeStartChar": 6104, "bugNodeLength": 75, "fixLineNum": 169, "fixNodeStartChar": 5936, "fixNodeLength": 79, "sourceBeforeFix": "new CustomChangeException(\"Failed to insert one or more concept map types\")", "sourceAfterFix": "new CustomChangeException(\"Failed to insert one or more concept map types\",be)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d80d48fcf4b812f5b4d5df3f4cd65e310dbc35a1", "fixCommitParentSHA1": "35e0a7a4f16c0ff8472612c11e0fe0c006dc7e53", "bugFilePath": "api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java b/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\nindex 324f21c..d9d5f48 100644\n--- a/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\n+++ b/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java\n@@ -166,7 +166,7 @@\n \t\t\t\t}\r\n \t\t\t\t\r\n \t\t\t\t//marks the changeset as a failed one\r\n-\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\");\r\n+\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\", be);\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 169, "bugNodeStartChar": 6104, "bugNodeLength": 75, "fixLineNum": 169, "fixNodeStartChar": 5936, "fixNodeLength": 79, "sourceBeforeFix": "new CustomChangeException(\"Failed to insert one or more concept map types\")", "sourceAfterFix": "new CustomChangeException(\"Failed to insert one or more concept map types\",be)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cee3b890b7c9a95936a50951d503adf0de74c452", "fixCommitParentSHA1": "ab3c312544029343fc974caa03168a1c3a7e21e4", "bugFilePath": "api/src/main/java/org/openmrs/api/db/ConceptDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/ConceptDAO.java b/api/src/main/java/org/openmrs/api/db/ConceptDAO.java\nindex 2a13184..308c6ee 100644\n--- a/api/src/main/java/org/openmrs/api/db/ConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/ConceptDAO.java\n@@ -601,7 +601,7 @@\n \t/**\r\n \t * @see ConceptService#getCountOfConceptReferenceTerms(String, ConceptSource, boolean)\r\n \t */\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException;\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 601, "bugNodeStartChar": 21512, "bugNodeLength": 245, "fixLineNum": 601, "fixNodeStartChar": 20912, "fixNodeLength": 238, "sourceBeforeFix": "/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; ", "sourceAfterFix": "/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cee3b890b7c9a95936a50951d503adf0de74c452", "fixCommitParentSHA1": "ab3c312544029343fc974caa03168a1c3a7e21e4", "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\nindex 71d4ab5..45b1dfa 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n@@ -1815,12 +1815,12 @@\n \t * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String, boolean)\r\n \t */\r\n \t@Override\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\t\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n-\t\treturn (Integer) criteria.uniqueResult();\r\n+\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1814, "bugNodeStartChar": 69121, "bugNodeLength": 469, "fixLineNum": 1814, "fixNodeStartChar": 67308, "fixNodeLength": 456, "sourceBeforeFix": "/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } ", "sourceAfterFix": "/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cee3b890b7c9a95936a50951d503adf0de74c452", "fixCommitParentSHA1": "ab3c312544029343fc974caa03168a1c3a7e21e4", "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\nindex 71d4ab5..45b1dfa 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n@@ -1815,12 +1815,12 @@\n \t * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String, boolean)\r\n \t */\r\n \t@Override\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\t\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n-\t\treturn (Integer) criteria.uniqueResult();\r\n+\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1823, "bugNodeStartChar": 69552, "bugNodeLength": 33, "fixLineNum": 1823, "fixNodeStartChar": 67730, "fixNodeLength": 30, "sourceBeforeFix": "(Integer)criteria.uniqueResult()", "sourceAfterFix": "(Long)criteria.uniqueResult()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53f6920929a7e40f680806fd727c195314f92414", "fixCommitParentSHA1": "bdcf67df04484b97c1a5b349c6dc7898361f3bc0", "bugFilePath": "api/src/main/java/org/openmrs/api/db/ConceptDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/ConceptDAO.java b/api/src/main/java/org/openmrs/api/db/ConceptDAO.java\nindex 2a13184..308c6ee 100644\n--- a/api/src/main/java/org/openmrs/api/db/ConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/ConceptDAO.java\n@@ -601,7 +601,7 @@\n \t/**\r\n \t * @see ConceptService#getCountOfConceptReferenceTerms(String, ConceptSource, boolean)\r\n \t */\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException;\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 601, "bugNodeStartChar": 21512, "bugNodeLength": 245, "fixLineNum": 601, "fixNodeStartChar": 20912, "fixNodeLength": 238, "sourceBeforeFix": "/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; ", "sourceAfterFix": "/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53f6920929a7e40f680806fd727c195314f92414", "fixCommitParentSHA1": "bdcf67df04484b97c1a5b349c6dc7898361f3bc0", "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\nindex 71d4ab5..45b1dfa 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n@@ -1815,12 +1815,12 @@\n \t * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String, boolean)\r\n \t */\r\n \t@Override\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\t\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n-\t\treturn (Integer) criteria.uniqueResult();\r\n+\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1814, "bugNodeStartChar": 69121, "bugNodeLength": 469, "fixLineNum": 1814, "fixNodeStartChar": 67308, "fixNodeLength": 456, "sourceBeforeFix": "/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } ", "sourceAfterFix": "/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53f6920929a7e40f680806fd727c195314f92414", "fixCommitParentSHA1": "bdcf67df04484b97c1a5b349c6dc7898361f3bc0", "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\nindex 71d4ab5..45b1dfa 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n@@ -1815,12 +1815,12 @@\n \t * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String, boolean)\r\n \t */\r\n \t@Override\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\t\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n-\t\treturn (Integer) criteria.uniqueResult();\r\n+\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t\r\n \t/**\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 1823, "bugNodeStartChar": 69552, "bugNodeLength": 33, "fixLineNum": 1823, "fixNodeStartChar": 67730, "fixNodeLength": 30, "sourceBeforeFix": "(Integer)criteria.uniqueResult()", "sourceAfterFix": "(Long)criteria.uniqueResult()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4a14fe194b8163a6b7b0c97c436e2d173c7929c0", "fixCommitParentSHA1": "fa9711d04704d0fefe4f0339128fec8d55f8a674", "bugFilePath": "api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java b/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java\nindex a99ce20..b97ac24 100644\n--- a/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java\n+++ b/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java\n@@ -118,7 +118,7 @@\n \t\tschedulerService.scheduleTask(t1);\r\n \t\tThread.sleep(50); // so t2 doesn't start before t1 due to random millisecond offsets\r\n \t\tschedulerService.scheduleTask(t2);\r\n-\t\tThread.sleep(600); // must be longer than t2's delay\r\n+\t\tThread.sleep(2500); // must be longer than t2's delay\r\n \t\tassertEquals(Arrays.asList(\"TASK-1\", \"TASK-2\", \"TASK-2\", \"TASK-1\"), outputForConcurrentTasks);\r\n \t}\r\n \t\r\n@@ -244,7 +244,7 @@\n \t\tt5.setTaskClass(SampleTask5.class.getName());\r\n \t\t\r\n \t\tschedulerService.scheduleTask(t5);\r\n-\t\tThread.sleep(1200);\r\n+\t\tThread.sleep(2500);\r\n \t\tassertEquals(Arrays.asList(\"INIT-START-5\", \"INIT-END-5\", \"IN EXECUTE\"), outputForInitExecSync);\r\n \t}\r\n \t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 121, "bugNodeStartChar": 4069, "bugNodeLength": 17, "fixLineNum": 121, "fixNodeStartChar": 3949, "fixNodeLength": 18, "sourceBeforeFix": "Thread.sleep(600)", "sourceAfterFix": "Thread.sleep(2500)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4a14fe194b8163a6b7b0c97c436e2d173c7929c0", "fixCommitParentSHA1": "fa9711d04704d0fefe4f0339128fec8d55f8a674", "bugFilePath": "api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java b/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java\nindex a99ce20..b97ac24 100644\n--- a/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java\n+++ b/api/src/test/java/org/openmrs/scheduler/SchedulerServiceTest.java\n@@ -118,7 +118,7 @@\n \t\tschedulerService.scheduleTask(t1);\r\n \t\tThread.sleep(50); // so t2 doesn't start before t1 due to random millisecond offsets\r\n \t\tschedulerService.scheduleTask(t2);\r\n-\t\tThread.sleep(600); // must be longer than t2's delay\r\n+\t\tThread.sleep(2500); // must be longer than t2's delay\r\n \t\tassertEquals(Arrays.asList(\"TASK-1\", \"TASK-2\", \"TASK-2\", \"TASK-1\"), outputForConcurrentTasks);\r\n \t}\r\n \t\r\n@@ -244,7 +244,7 @@\n \t\tt5.setTaskClass(SampleTask5.class.getName());\r\n \t\t\r\n \t\tschedulerService.scheduleTask(t5);\r\n-\t\tThread.sleep(1200);\r\n+\t\tThread.sleep(2500);\r\n \t\tassertEquals(Arrays.asList(\"INIT-START-5\", \"INIT-END-5\", \"IN EXECUTE\"), outputForInitExecSync);\r\n \t}\r\n \t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 247, "bugNodeStartChar": 7988, "bugNodeLength": 18, "fixLineNum": 247, "fixNodeStartChar": 7742, "fixNodeLength": 18, "sourceBeforeFix": "Thread.sleep(1200)", "sourceAfterFix": "Thread.sleep(2500)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b4723946075075539850d266a732e1f4dfca1dbd", "fixCommitParentSHA1": "4043ca439bba0e1b6685b80d2ced0b48b60b93c9", "bugFilePath": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java b/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java\nindex 3fb4062..c1511aa 100644\n--- a/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java\n+++ b/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java\n@@ -645,7 +645,7 @@\n \t\t\t\tif (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {\r\n \t\t\t\t\tpage = SIMPLE_SETUP;\r\n \t\t\t\t} else if (InitializationWizardModel.INSTALL_METHOD_TESTING.equals(wizardModel.installMethod)) {\r\n-\t\t\t\t\tpage = TESTING_AUTHENTICATION_SETUP;\r\n+\t\t\t\t\tpage = DATABASE_TABLES_AND_USER;\r\n \t\t\t\t} else {\r\n \t\t\t\t\tpage = IMPLEMENTATION_ID_SETUP;\r\n \t\t\t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 648, "bugNodeStartChar": 25750, "bugNodeLength": 35, "fixLineNum": 648, "fixNodeStartChar": 25103, "fixNodeLength": 31, "sourceBeforeFix": "page=TESTING_AUTHENTICATION_SETUP", "sourceAfterFix": "page=DATABASE_TABLES_AND_USER"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "7c22c64064897d27b707c056e7871832ec660b84", "fixCommitParentSHA1": "abb1cba4b707efc02a52606087abaebdabf92fe5", "bugFilePath": "api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java b/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java\nindex b62fc7f..e380dfb 100644\n--- a/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java\n+++ b/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java\n@@ -892,7 +892,7 @@\n \t * @should return a mapped Concept if given a valid mapping\r\n \t */\r\n \tprotected Concept getConcept(String hl7ConceptId, String codingSystem, String uid) throws HL7Exception {\r\n-\t\tif (HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)) {\r\n+\t\tif (codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)) {\r\n \t\t\t// the concept is local\r\n \t\t\ttry {\r\n \t\t\t\tInteger conceptId = new Integer(hl7ConceptId);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 895, "bugNodeStartChar": 34487, "bugNodeLength": 51, "fixLineNum": 895, "fixNodeStartChar": 33593, "fixNodeLength": 75, "sourceBeforeFix": "HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)", "sourceAfterFix": "codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "abb47c674f762d401d0ed4f2f236b0229f6e6e6a", "fixCommitParentSHA1": "289231ea6ef9c5599535866e70631cea39acf2b6", "bugFilePath": "api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java b/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java\nindex b62fc7f..e380dfb 100644\n--- a/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java\n+++ b/api/src/main/java/org/openmrs/hl7/handler/ORUR01Handler.java\n@@ -892,7 +892,7 @@\n \t * @should return a mapped Concept if given a valid mapping\r\n \t */\r\n \tprotected Concept getConcept(String hl7ConceptId, String codingSystem, String uid) throws HL7Exception {\r\n-\t\tif (HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)) {\r\n+\t\tif (codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)) {\r\n \t\t\t// the concept is local\r\n \t\t\ttry {\r\n \t\t\t\tInteger conceptId = new Integer(hl7ConceptId);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 895, "bugNodeStartChar": 34487, "bugNodeLength": 51, "fixLineNum": 895, "fixNodeStartChar": 33593, "fixNodeLength": 75, "sourceBeforeFix": "HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)", "sourceAfterFix": "codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "dbf099e38ac11b6a5e31791f5ccbbb2511fabbf8", "fixCommitParentSHA1": "07c7dd485506b511de206689b0e806f3d8411aab", "bugFilePath": "api/src/test/java/org/openmrs/OpenmrsTestsTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\nindex e6b272e..3960806 100644\n--- a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n+++ b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n@@ -199,7 +199,7 @@\n \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n \t\t\t\t\r\n \t\t\t\t// strip out the beginning (/home/ben/workspace...) up to org.openmrs.\r\n-\t\t\t\tclassName = className.substring(className.indexOf(\"org.openmrs.\"));\r\n+\t\t\t\tclassName = className.substring(className.lastIndexOf(\"org.openmrs.\"));\r\n \t\t\t\t\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 202, "bugNodeStartChar": 6896, "bugNodeLength": 33, "fixLineNum": 202, "fixNodeStartChar": 6695, "fixNodeLength": 37, "sourceBeforeFix": "className.indexOf(\"org.openmrs.\")", "sourceAfterFix": "className.lastIndexOf(\"org.openmrs.\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dbf099e38ac11b6a5e31791f5ccbbb2511fabbf8", "fixCommitParentSHA1": "07c7dd485506b511de206689b0e806f3d8411aab", "bugFilePath": "api/src/test/java/org/openmrs/OpenmrsTestsTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\nindex e6b272e..3960806 100644\n--- a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n+++ b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n@@ -199,7 +199,7 @@\n \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n \t\t\t\t\r\n \t\t\t\t// strip out the beginning (/home/ben/workspace...) up to org.openmrs.\r\n-\t\t\t\tclassName = className.substring(className.indexOf(\"org.openmrs.\"));\r\n+\t\t\t\tclassName = className.substring(className.lastIndexOf(\"org.openmrs.\"));\r\n \t\t\t\t\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 202, "bugNodeStartChar": 6896, "bugNodeLength": 33, "fixLineNum": 202, "fixNodeStartChar": 6695, "fixNodeLength": 37, "sourceBeforeFix": "className.indexOf(\"org.openmrs.\")", "sourceAfterFix": "className.lastIndexOf(\"org.openmrs.\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e22b5521a7a0f4c76a10f8a8c7b50d931ec3eda5", "fixCommitParentSHA1": "9eb93dadbdf6ae3eefbc90a035275723c34bb2d3", "bugFilePath": "api/src/test/java/org/openmrs/OpenmrsTestsTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\nindex e6b272e..3960806 100644\n--- a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n+++ b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n@@ -199,7 +199,7 @@\n \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n \t\t\t\t\r\n \t\t\t\t// strip out the beginning (/home/ben/workspace...) up to org.openmrs.\r\n-\t\t\t\tclassName = className.substring(className.indexOf(\"org.openmrs.\"));\r\n+\t\t\t\tclassName = className.substring(className.lastIndexOf(\"org.openmrs.\"));\r\n \t\t\t\t\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 202, "bugNodeStartChar": 6896, "bugNodeLength": 33, "fixLineNum": 202, "fixNodeStartChar": 6695, "fixNodeLength": 37, "sourceBeforeFix": "className.indexOf(\"org.openmrs.\")", "sourceAfterFix": "className.lastIndexOf(\"org.openmrs.\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e22b5521a7a0f4c76a10f8a8c7b50d931ec3eda5", "fixCommitParentSHA1": "9eb93dadbdf6ae3eefbc90a035275723c34bb2d3", "bugFilePath": "api/src/test/java/org/openmrs/OpenmrsTestsTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\nindex e6b272e..3960806 100644\n--- a/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n+++ b/api/src/test/java/org/openmrs/OpenmrsTestsTest.java\n@@ -199,7 +199,7 @@\n \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n \t\t\t\t\r\n \t\t\t\t// strip out the beginning (/home/ben/workspace...) up to org.openmrs.\r\n-\t\t\t\tclassName = className.substring(className.indexOf(\"org.openmrs.\"));\r\n+\t\t\t\tclassName = className.substring(className.lastIndexOf(\"org.openmrs.\"));\r\n \t\t\t\t\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 202, "bugNodeStartChar": 6896, "bugNodeLength": 33, "fixLineNum": 202, "fixNodeStartChar": 6695, "fixNodeLength": 37, "sourceBeforeFix": "className.indexOf(\"org.openmrs.\")", "sourceAfterFix": "className.lastIndexOf(\"org.openmrs.\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "57634b6921a0d40e0cedb8150a7051c9cc466a5a", "fixCommitParentSHA1": "cd16d4170043bc0c4f4e19488d813bb6cdbc1727", "bugFilePath": "api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\nindex a8ae49d..0dde3c0 100644\n--- a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -254,7 +254,7 @@\n \t\t\t}\r\n \r\n \t\t\telse {\r\n-\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n+\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 257, "bugNodeStartChar": 9307, "bugNodeLength": 64, "fixLineNum": 257, "fixNodeStartChar": 9051, "fixNodeLength": 64, "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "57634b6921a0d40e0cedb8150a7051c9cc466a5a", "fixCommitParentSHA1": "cd16d4170043bc0c4f4e19488d813bb6cdbc1727", "bugFilePath": "api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\nindex a8ae49d..0dde3c0 100644\n--- a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -254,7 +254,7 @@\n \t\t\t}\r\n \r\n \t\t\telse {\r\n-\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n+\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 257, "bugNodeStartChar": 9307, "bugNodeLength": 64, "fixLineNum": 257, "fixNodeStartChar": 9051, "fixNodeLength": 64, "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b73af3917eec722c20c0cd75547590158072cbd9", "fixCommitParentSHA1": "70c0515778f8d8890b6e8a884118912114696924", "bugFilePath": "api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\nindex a8ae49d..0dde3c0 100644\n--- a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -254,7 +254,7 @@\n \t\t\t}\r\n \r\n \t\t\telse {\r\n-\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n+\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 257, "bugNodeStartChar": 9307, "bugNodeLength": 64, "fixLineNum": 257, "fixNodeStartChar": 9051, "fixNodeLength": 64, "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b73af3917eec722c20c0cd75547590158072cbd9", "fixCommitParentSHA1": "70c0515778f8d8890b6e8a884118912114696924", "bugFilePath": "api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\nindex a8ae49d..0dde3c0 100644\n--- a/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/api/src/main/java/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -254,7 +254,7 @@\n \t\t\t}\r\n \r\n \t\t\telse {\r\n-\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n+\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 257, "bugNodeStartChar": 9307, "bugNodeLength": 64, "fixLineNum": 257, "fixNodeStartChar": 9051, "fixNodeLength": 64, "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f8d278fe37db3f41735b89ef557d42da47e95228", "fixCommitParentSHA1": "0c187419da170f3028329d407510abe18b7a8af2", "bugFilePath": "api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\nindex e0dacb4..75a0564 100644\n--- a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n+++ b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n@@ -93,7 +93,7 @@\n \t\t// do the checks for voided attributes (also in PersonVoidHandler)\r\n \t\tif (person.isPersonVoided()) {\r\n \t\t\t\r\n-\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n+\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r\n \t\t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 96, "bugNodeStartChar": 3181, "bugNodeLength": 22, "fixLineNum": 96, "fixNodeStartChar": 3086, "fixNodeLength": 28, "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f8d278fe37db3f41735b89ef557d42da47e95228", "fixCommitParentSHA1": "0c187419da170f3028329d407510abe18b7a8af2", "bugFilePath": "api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\nindex e0dacb4..75a0564 100644\n--- a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n+++ b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n@@ -93,7 +93,7 @@\n \t\t// do the checks for voided attributes (also in PersonVoidHandler)\r\n \t\tif (person.isPersonVoided()) {\r\n \t\t\t\r\n-\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n+\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r\n \t\t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 96, "bugNodeStartChar": 3181, "bugNodeLength": 22, "fixLineNum": 96, "fixNodeStartChar": 3086, "fixNodeLength": 28, "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "fixCommitParentSHA1": "20c3e886e74f2aace9d742dfdd365feff3569ef6", "bugFilePath": "api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\nindex e0dacb4..75a0564 100644\n--- a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n+++ b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n@@ -93,7 +93,7 @@\n \t\t// do the checks for voided attributes (also in PersonVoidHandler)\r\n \t\tif (person.isPersonVoided()) {\r\n \t\t\t\r\n-\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n+\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r\n \t\t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 96, "bugNodeStartChar": 3181, "bugNodeLength": 22, "fixLineNum": 96, "fixNodeStartChar": 3086, "fixNodeLength": 28, "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "fixCommitParentSHA1": "20c3e886e74f2aace9d742dfdd365feff3569ef6", "bugFilePath": "api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\nindex e0dacb4..75a0564 100644\n--- a/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n+++ b/api/src/main/java/org/openmrs/api/handler/PersonSaveHandler.java\n@@ -93,7 +93,7 @@\n \t\t// do the checks for voided attributes (also in PersonVoidHandler)\r\n \t\tif (person.isPersonVoided()) {\r\n \t\t\t\r\n-\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n+\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r\n \t\t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 96, "bugNodeStartChar": 3181, "bugNodeLength": 22, "fixLineNum": 96, "fixNodeStartChar": 3086, "fixNodeLength": 28, "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "58e2311116b2b7eab93c2f26a2ddc823d56e5375", "fixCommitParentSHA1": "fc32a9574448695fd1e96e9ff911a6603ab594d8", "bugFilePath": "api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java b/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java\nindex 4979a47..7c47488 100644\n--- a/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java\n+++ b/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java\n@@ -123,7 +123,7 @@\n \t\t\t\t// if a second argument exists, pass that to the save handler as well\r\n \t\t\t\t// (with current code, it means we're either in an obs save or a user save)\t\t\t\t\r\n \t\t\t\tString other = null;\r\n-\t\t\t\tif (args.length > 1)\r\n+\t\t\t\tif (args.length > 1 && args[1] instanceof String)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\t\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 126, "bugNodeStartChar": 5680, "bugNodeLength": 15, "fixLineNum": 126, "fixNodeStartChar": 5555, "fixNodeLength": 44, "sourceBeforeFix": "args.length > 1", "sourceAfterFix": "args.length > 1 && args[1] instanceof String"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "5924329db91d304964119a1cf1989b5b2c82f85e", "fixCommitParentSHA1": "9c4245a451e6286dc55e6dbbc935778656c214f1", "bugFilePath": "api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java", "fixPatch": "diff --git a/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java b/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java\nindex 4979a47..7c47488 100644\n--- a/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java\n+++ b/api/src/main/java/org/openmrs/aop/RequiredDataAdvice.java\n@@ -123,7 +123,7 @@\n \t\t\t\t// if a second argument exists, pass that to the save handler as well\r\n \t\t\t\t// (with current code, it means we're either in an obs save or a user save)\t\t\t\t\r\n \t\t\t\tString other = null;\r\n-\t\t\t\tif (args.length > 1)\r\n+\t\t\t\tif (args.length > 1 && args[1] instanceof String)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\t\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 126, "bugNodeStartChar": 5680, "bugNodeLength": 15, "fixLineNum": 126, "fixNodeStartChar": 5555, "fixNodeLength": 44, "sourceBeforeFix": "args.length > 1", "sourceAfterFix": "args.length > 1 && args[1] instanceof String"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "eef241f280971b1e1e0c71217456ba1c44af22d0", "fixCommitParentSHA1": "40058b05ac93205abac9a28b7ca76ef9954cae7c", "bugFilePath": "web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java", "fixPatch": "diff --git a/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java b/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java\nindex f8900b0..4f9bb3e 100644\n--- a/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java\n+++ b/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java\n@@ -228,7 +228,7 @@\n \tpublic void validate_shouldFailValidationIfBirthdateMakesPatient120YearsOldOrOlder() throws Exception {\r\n \t\tPatient p = ps.getPatient(2);\r\n \t\tCalendar c = Calendar.getInstance();\r\n-\t\tc.roll(Calendar.YEAR, -120);\r\n+\t\tc.roll(Calendar.YEAR, -121);\r\n \t\tp.setBirthdate(c.getTime());\r\n \t\tShortPatientModel model = new ShortPatientModel(p);\r\n \t\tErrors errors = new BindException(model, \"patientModel\");\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 231, "bugNodeStartChar": 9035, "bugNodeLength": 4, "fixLineNum": 231, "fixNodeStartChar": 8805, "fixNodeLength": 4, "sourceBeforeFix": "-120", "sourceAfterFix": "-121"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f1a7ba261addf3aa2610546d76cdea5ddfd14574", "fixCommitParentSHA1": "d46b3333427754b023f67ed0843294d236f16ce9", "bugFilePath": "web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java", "fixPatch": "diff --git a/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java b/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java\nindex f8900b0..4f9bb3e 100644\n--- a/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java\n+++ b/web/src/test/java/org/openmrs/web/controller/patient/ShortPatientFormValidatorTest.java\n@@ -228,7 +228,7 @@\n \tpublic void validate_shouldFailValidationIfBirthdateMakesPatient120YearsOldOrOlder() throws Exception {\r\n \t\tPatient p = ps.getPatient(2);\r\n \t\tCalendar c = Calendar.getInstance();\r\n-\t\tc.roll(Calendar.YEAR, -120);\r\n+\t\tc.roll(Calendar.YEAR, -121);\r\n \t\tp.setBirthdate(c.getTime());\r\n \t\tShortPatientModel model = new ShortPatientModel(p);\r\n \t\tErrors errors = new BindException(model, \"patientModel\");\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 231, "bugNodeStartChar": 9035, "bugNodeLength": 4, "fixLineNum": 231, "fixNodeStartChar": 8805, "fixNodeLength": 4, "sourceBeforeFix": "-120", "sourceAfterFix": "-121"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "fixCommitParentSHA1": "71fdc224c67c6fda92aa8e89592745a281dcafb6", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 119, "bugNodeStartChar": 5436, "bugNodeLength": 37, "fixLineNum": 119, "fixNodeStartChar": 5318, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "fixCommitParentSHA1": "71fdc224c67c6fda92aa8e89592745a281dcafb6", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 142, "bugNodeStartChar": 6692, "bugNodeLength": 37, "fixLineNum": 142, "fixNodeStartChar": 6551, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "fixCommitParentSHA1": "71fdc224c67c6fda92aa8e89592745a281dcafb6", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 194, "bugNodeStartChar": 9217, "bugNodeLength": 37, "fixLineNum": 194, "fixNodeStartChar": 9024, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "fixCommitParentSHA1": "71fdc224c67c6fda92aa8e89592745a281dcafb6", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 215, "bugNodeStartChar": 10241, "bugNodeLength": 37, "fixLineNum": 215, "fixNodeStartChar": 10027, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "fixCommitParentSHA1": "f10f38fbd8243f61adce6ac5e8e04e1665f42ced", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 119, "bugNodeStartChar": 5436, "bugNodeLength": 37, "fixLineNum": 119, "fixNodeStartChar": 5318, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "fixCommitParentSHA1": "f10f38fbd8243f61adce6ac5e8e04e1665f42ced", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 142, "bugNodeStartChar": 6692, "bugNodeLength": 37, "fixLineNum": 142, "fixNodeStartChar": 6551, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "fixCommitParentSHA1": "f10f38fbd8243f61adce6ac5e8e04e1665f42ced", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 194, "bugNodeStartChar": 9217, "bugNodeLength": 37, "fixLineNum": 194, "fixNodeStartChar": 9024, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "fixCommitParentSHA1": "f10f38fbd8243f61adce6ac5e8e04e1665f42ced", "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 215, "bugNodeStartChar": 10241, "bugNodeLength": 37, "fixLineNum": 215, "fixNodeStartChar": 10027, "fixNodeLength": 40, "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "a24cc003cb42557584c969fdc8b6cffc65af7072", "fixCommitParentSHA1": "9eefa8c7e22612ab9b65c156e0bb82e942f4697b", "bugFilePath": "src/web/org/openmrs/web/controller/user/UserFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/user/UserFormController.java b/src/web/org/openmrs/web/controller/user/UserFormController.java\nindex 82e6b04..5a9aa36 100644\n--- a/src/web/org/openmrs/web/controller/user/UserFormController.java\n+++ b/src/web/org/openmrs/web/controller/user/UserFormController.java\n@@ -256,7 +256,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n             \r\n-            if (StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)) {\r\n+            if (StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)) {\r\n             \tus.changeQuestionAnswer(user, secretQuestion, secretAnswer);\r\n             }\r\n             \r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 259, "bugNodeStartChar": 9959, "bugNodeLength": 76, "fixLineNum": 259, "fixNodeStartChar": 9701, "fixNodeLength": 76, "sourceBeforeFix": "StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)", "sourceAfterFix": "StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "077e2fe62b1c9eb661028983af6d3405ebd81449", "fixCommitParentSHA1": "4453eb50bf30d18422f98ffbcab6a617cf0785f7", "bugFilePath": "src/web/org/openmrs/web/controller/user/UserFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/user/UserFormController.java b/src/web/org/openmrs/web/controller/user/UserFormController.java\nindex 82e6b04..5a9aa36 100644\n--- a/src/web/org/openmrs/web/controller/user/UserFormController.java\n+++ b/src/web/org/openmrs/web/controller/user/UserFormController.java\n@@ -256,7 +256,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n             \r\n-            if (StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)) {\r\n+            if (StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)) {\r\n             \tus.changeQuestionAnswer(user, secretQuestion, secretAnswer);\r\n             }\r\n             \r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 259, "bugNodeStartChar": 9959, "bugNodeLength": 76, "fixLineNum": 259, "fixNodeStartChar": 9701, "fixNodeLength": 76, "sourceBeforeFix": "StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)", "sourceAfterFix": "StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "199acbe5764ea5ec39c1b36d7a28721671f17dd3", "fixCommitParentSHA1": "07e36ddebe48ab4acf0c2aff359b7f284a5cec92", "bugFilePath": "test/web/org/openmrs/web/controller/user/UserFormControllerTest.java", "fixPatch": "diff --git a/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java b/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java\nindex 52f4f54..bef5287 100644\n--- a/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java\n+++ b/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java\n@@ -42,7 +42,7 @@\n \t    User user = controller.formBackingObject(request, null);\n \t    user.addName(new PersonName(\"This\", \"is\", \"Test\"));\n \t    user.getPerson().setGender(\"F\");\n-\t    controller.handleSubmission(request, new MockHttpSession(), new ModelMap(), \"Save User\", \"pass123\", \"pass123\", new String[0], user, new BindException(user, \"user\"));\n+\t    controller.handleSubmission(request, new MockHttpSession(), new ModelMap(), \"Save User\", \"pass123\", \"pass123\", new String[0], \"true\", user, new BindException(user, \"user\"));\n     }\n \t\n }\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 45, "bugNodeStartChar": 1910, "bugNodeLength": 164, "fixLineNum": 45, "fixNodeStartChar": 1910, "fixNodeLength": 172, "sourceBeforeFix": "controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),\"Save User\",\"pass123\",\"pass123\",new String[0],user,new BindException(user,\"user\"))", "sourceAfterFix": "controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),\"Save User\",\"pass123\",\"pass123\",new String[0],\"true\",user,new BindException(user,\"user\"))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "744770affacdd41104e16fb323703fe042d7564e", "fixCommitParentSHA1": "d4b3c694f28625e29347de8dfc3cd94c4ba9f155", "bugFilePath": "test/web/org/openmrs/web/controller/user/UserFormControllerTest.java", "fixPatch": "diff --git a/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java b/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java\nindex 52f4f54..bef5287 100644\n--- a/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java\n+++ b/test/web/org/openmrs/web/controller/user/UserFormControllerTest.java\n@@ -42,7 +42,7 @@\n \t    User user = controller.formBackingObject(request, null);\n \t    user.addName(new PersonName(\"This\", \"is\", \"Test\"));\n \t    user.getPerson().setGender(\"F\");\n-\t    controller.handleSubmission(request, new MockHttpSession(), new ModelMap(), \"Save User\", \"pass123\", \"pass123\", new String[0], user, new BindException(user, \"user\"));\n+\t    controller.handleSubmission(request, new MockHttpSession(), new ModelMap(), \"Save User\", \"pass123\", \"pass123\", new String[0], \"true\", user, new BindException(user, \"user\"));\n     }\n \t\n }\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 45, "bugNodeStartChar": 1910, "bugNodeLength": 164, "fixLineNum": 45, "fixNodeStartChar": 1910, "fixNodeLength": 172, "sourceBeforeFix": "controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),\"Save User\",\"pass123\",\"pass123\",new String[0],user,new BindException(user,\"user\"))", "sourceAfterFix": "controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),\"Save User\",\"pass123\",\"pass123\",new String[0],\"true\",user,new BindException(user,\"user\"))"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "c79a37da032af5e7c7dcd506630a4985653d7e4f", "fixCommitParentSHA1": "3dcfe9237d2785d6cabb4aa3c3f6ba3502e6df0c", "bugFilePath": "src/web/org/openmrs/web/controller/program/PatientProgramFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java b/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java\nindex 7c8a01d..50106d3 100644\n--- a/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java\n+++ b/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java\n@@ -67,7 +67,7 @@\n \t\tDate completionDate = (Date) cde.getValue();\r\n \t\tPatient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));\r\n \t\tProgram program = pws.getProgram(Integer.valueOf(programIdStr));\r\n-\t\tif (!pws.getPatientPrograms(patient, program, null, enrollmentDate, completionDate, null, false).isEmpty())\r\n+\t\tif (!pws.getPatientPrograms(patient, program, null, completionDate, enrollmentDate, null, false).isEmpty())\r\n \t\t\trequest.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, \"Program.error.already\");\r\n \t\telse {\r\n \t\t\tPatientProgram pp = new PatientProgram();\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 70, "bugNodeStartChar": 3024, "bugNodeLength": 91, "fixLineNum": 70, "fixNodeStartChar": 2955, "fixNodeLength": 91, "sourceBeforeFix": "pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)", "sourceAfterFix": "pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "d84c24a83c18eb8b6c1ee26a1ed9f34b6c376868", "fixCommitParentSHA1": "477ed1ecdbeeedb78e8328fba5da059812dba698", "bugFilePath": "src/web/org/openmrs/web/controller/program/PatientProgramFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java b/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java\nindex 7c8a01d..50106d3 100644\n--- a/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java\n+++ b/src/web/org/openmrs/web/controller/program/PatientProgramFormController.java\n@@ -67,7 +67,7 @@\n \t\tDate completionDate = (Date) cde.getValue();\r\n \t\tPatient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));\r\n \t\tProgram program = pws.getProgram(Integer.valueOf(programIdStr));\r\n-\t\tif (!pws.getPatientPrograms(patient, program, null, enrollmentDate, completionDate, null, false).isEmpty())\r\n+\t\tif (!pws.getPatientPrograms(patient, program, null, completionDate, enrollmentDate, null, false).isEmpty())\r\n \t\t\trequest.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, \"Program.error.already\");\r\n \t\telse {\r\n \t\t\tPatientProgram pp = new PatientProgram();\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 70, "bugNodeStartChar": 3024, "bugNodeLength": 91, "fixLineNum": 70, "fixNodeStartChar": 2955, "fixNodeLength": 91, "sourceBeforeFix": "pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)", "sourceAfterFix": "pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "cb1dc659281f50d33e4039bbc2804a724f08649c", "fixCommitParentSHA1": "43fcca94b404cc6658c7b89a21e9d4e21bf260db", "bugFilePath": "src/web/org/openmrs/module/web/WebModuleUtil.java", "fixPatch": "diff --git a/src/web/org/openmrs/module/web/WebModuleUtil.java b/src/web/org/openmrs/module/web/WebModuleUtil.java\nindex 6ed18eb..e4f9b18 100644\n--- a/src/web/org/openmrs/module/web/WebModuleUtil.java\n+++ b/src/web/org/openmrs/module/web/WebModuleUtil.java\n@@ -313,7 +313,7 @@\n \t\t\t\t\t\tlog.warn(msg + \" for module: \" + mod.getModuleId(), e);\r\n \t\t\t\t\t\r\n \t\t\t\t\ttry {\r\n-\t\t\t\t\t\tModuleFactory.stopModule(mod); //remove jar from classloader play \r\n+\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true); //remove jar from classloader play \r\n \t\t\t\t\t\tstopModule(mod, servletContext, true);\r\n \t\t\t\t\t}\r\n \t\t\t\t\tcatch (Exception e2) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 316, "bugNodeStartChar": 12101, "bugNodeLength": 29, "fixLineNum": 316, "fixNodeStartChar": 11786, "fixNodeLength": 41, "sourceBeforeFix": "ModuleFactory.stopModule(mod)", "sourceAfterFix": "ModuleFactory.stopModule(mod,true,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "ed5e5d7b4665a39f7141d266098f21f29620e976", "fixCommitParentSHA1": "68ae71b650b17ad97b04ee6ab6557195577dac2a", "bugFilePath": "src/web/org/openmrs/module/web/WebModuleUtil.java", "fixPatch": "diff --git a/src/web/org/openmrs/module/web/WebModuleUtil.java b/src/web/org/openmrs/module/web/WebModuleUtil.java\nindex 6ed18eb..e4f9b18 100644\n--- a/src/web/org/openmrs/module/web/WebModuleUtil.java\n+++ b/src/web/org/openmrs/module/web/WebModuleUtil.java\n@@ -313,7 +313,7 @@\n \t\t\t\t\t\tlog.warn(msg + \" for module: \" + mod.getModuleId(), e);\r\n \t\t\t\t\t\r\n \t\t\t\t\ttry {\r\n-\t\t\t\t\t\tModuleFactory.stopModule(mod); //remove jar from classloader play \r\n+\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true); //remove jar from classloader play \r\n \t\t\t\t\t\tstopModule(mod, servletContext, true);\r\n \t\t\t\t\t}\r\n \t\t\t\t\tcatch (Exception e2) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 316, "bugNodeStartChar": 12101, "bugNodeLength": 29, "fixLineNum": 316, "fixNodeStartChar": 11786, "fixNodeLength": 41, "sourceBeforeFix": "ModuleFactory.stopModule(mod)", "sourceAfterFix": "ModuleFactory.stopModule(mod,true,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0ab8dd9b65b9bb1fd80a946900b93ce803b0f617", "fixCommitParentSHA1": "915c8fdc924d7fce0f559bb05f6435f302d8dbc4", "bugFilePath": "src/api/org/openmrs/api/context/Context.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/context/Context.java b/src/api/org/openmrs/api/context/Context.java\nindex f9e3974..005f2d7 100644\n--- a/src/api/org/openmrs/api/context/Context.java\n+++ b/src/api/org/openmrs/api/context/Context.java\n@@ -965,7 +965,7 @@\n \t\t\t\t\tGlobalProperty propToUpdate = propsMissingDescription.get(corePropName);\r\n \t\t\t\t\tif (propToUpdate != null) {\r\n \t\t\t\t\t\tpropToUpdate.setDescription(coreProp.getDescription());\r\n-\t\t\t\t\t\tContext.getAdministrationService().saveGlobalProperty(coreProp);\r\n+\t\t\t\t\t\tContext.getAdministrationService().saveGlobalProperty(propToUpdate);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 968, "bugNodeStartChar": 31492, "bugNodeLength": 63, "fixLineNum": 968, "fixNodeStartChar": 30525, "fixNodeLength": 67, "sourceBeforeFix": "Context.getAdministrationService().saveGlobalProperty(coreProp)", "sourceAfterFix": "Context.getAdministrationService().saveGlobalProperty(propToUpdate)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "35e1f837b39652869070a5daa771f30ad049f81a", "fixCommitParentSHA1": "b8dc8ba825d7fe940483a63c1b3b685facce19c5", "bugFilePath": "src/api/org/openmrs/api/context/Context.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/context/Context.java b/src/api/org/openmrs/api/context/Context.java\nindex f9e3974..005f2d7 100644\n--- a/src/api/org/openmrs/api/context/Context.java\n+++ b/src/api/org/openmrs/api/context/Context.java\n@@ -965,7 +965,7 @@\n \t\t\t\t\tGlobalProperty propToUpdate = propsMissingDescription.get(corePropName);\r\n \t\t\t\t\tif (propToUpdate != null) {\r\n \t\t\t\t\t\tpropToUpdate.setDescription(coreProp.getDescription());\r\n-\t\t\t\t\t\tContext.getAdministrationService().saveGlobalProperty(coreProp);\r\n+\t\t\t\t\t\tContext.getAdministrationService().saveGlobalProperty(propToUpdate);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 968, "bugNodeStartChar": 31492, "bugNodeLength": 63, "fixLineNum": 968, "fixNodeStartChar": 30525, "fixNodeLength": 67, "sourceBeforeFix": "Context.getAdministrationService().saveGlobalProperty(coreProp)", "sourceAfterFix": "Context.getAdministrationService().saveGlobalProperty(propToUpdate)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "fixCommitParentSHA1": "ddb113a660630b9be8aaf72a2154a39547ab7dd4", "bugFilePath": "src/api/org/openmrs/aop/RequiredDataAdvice.java", "fixPatch": "diff --git a/src/api/org/openmrs/aop/RequiredDataAdvice.java b/src/api/org/openmrs/aop/RequiredDataAdvice.java\nindex d89f00a..dd5a715 100644\n--- a/src/api/org/openmrs/aop/RequiredDataAdvice.java\n+++ b/src/api/org/openmrs/aop/RequiredDataAdvice.java\n@@ -98,7 +98,9 @@\n \tpublic void before(Method method, Object[] args, Object target) throws Throwable {\r\n \t\tString methodName = method.getName();\r\n \t\t\r\n-\t\tif (methodName.startsWith(\"save\")) {\r\n+\t\t// the \"create\" and \"update\" are in to cover old deprecated methods since AOP doesn't occur\r\n+\t\t// on method calls within a class, only on calls to methods from external classes to methods\r\n+\t\tif (methodName.startsWith(\"save\") || methodName.startsWith(\"create\") || methodName.startsWith(\"update\")) {\r\n \t\t\tObject mainArgument = args[0];\r\n \t\t\t\r\n \t\t\t// fail early on a null parameter\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 101, "bugNodeStartChar": 4471, "bugNodeLength": 29, "fixLineNum": 103, "fixNodeStartChar": 4560, "fixNodeLength": 99, "sourceBeforeFix": "methodName.startsWith(\"save\")", "sourceAfterFix": "methodName.startsWith(\"save\") || methodName.startsWith(\"create\") || methodName.startsWith(\"update\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "fixCommitParentSHA1": "ddb113a660630b9be8aaf72a2154a39547ab7dd4", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 40, "bugNodeStartChar": 1492, "bugNodeLength": 26, "fixLineNum": 40, "fixNodeStartChar": 1453, "fixNodeLength": 24, "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "fixCommitParentSHA1": "ddb113a660630b9be8aaf72a2154a39547ab7dd4", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 40, "bugNodeStartChar": 1492, "bugNodeLength": 26, "fixLineNum": 40, "fixNodeStartChar": 1453, "fixNodeLength": 24, "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "fixCommitParentSHA1": "ddb113a660630b9be8aaf72a2154a39547ab7dd4", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 52, "bugNodeStartChar": 2039, "bugNodeLength": 103, "fixLineNum": 52, "fixNodeStartChar": 1988, "fixNodeLength": 110, "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "fixCommitParentSHA1": "ddb113a660630b9be8aaf72a2154a39547ab7dd4", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 52, "bugNodeStartChar": 2039, "bugNodeLength": 103, "fixLineNum": 52, "fixNodeStartChar": 1988, "fixNodeLength": 110, "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "fixCommitParentSHA1": "28a40d21e119be5cd07c6cb1c08f0c8a23b14021", "bugFilePath": "src/api/org/openmrs/aop/RequiredDataAdvice.java", "fixPatch": "diff --git a/src/api/org/openmrs/aop/RequiredDataAdvice.java b/src/api/org/openmrs/aop/RequiredDataAdvice.java\nindex d89f00a..dd5a715 100644\n--- a/src/api/org/openmrs/aop/RequiredDataAdvice.java\n+++ b/src/api/org/openmrs/aop/RequiredDataAdvice.java\n@@ -98,7 +98,9 @@\n \tpublic void before(Method method, Object[] args, Object target) throws Throwable {\r\n \t\tString methodName = method.getName();\r\n \t\t\r\n-\t\tif (methodName.startsWith(\"save\")) {\r\n+\t\t// the \"create\" and \"update\" are in to cover old deprecated methods since AOP doesn't occur\r\n+\t\t// on method calls within a class, only on calls to methods from external classes to methods\r\n+\t\tif (methodName.startsWith(\"save\") || methodName.startsWith(\"create\") || methodName.startsWith(\"update\")) {\r\n \t\t\tObject mainArgument = args[0];\r\n \t\t\t\r\n \t\t\t// fail early on a null parameter\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 101, "bugNodeStartChar": 4471, "bugNodeLength": 29, "fixLineNum": 103, "fixNodeStartChar": 4560, "fixNodeLength": 99, "sourceBeforeFix": "methodName.startsWith(\"save\")", "sourceAfterFix": "methodName.startsWith(\"save\") || methodName.startsWith(\"create\") || methodName.startsWith(\"update\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "fixCommitParentSHA1": "28a40d21e119be5cd07c6cb1c08f0c8a23b14021", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 40, "bugNodeStartChar": 1492, "bugNodeLength": 26, "fixLineNum": 40, "fixNodeStartChar": 1453, "fixNodeLength": 24, "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "fixCommitParentSHA1": "28a40d21e119be5cd07c6cb1c08f0c8a23b14021", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 40, "bugNodeStartChar": 1492, "bugNodeLength": 26, "fixLineNum": 40, "fixNodeStartChar": 1453, "fixNodeLength": 24, "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "fixCommitParentSHA1": "28a40d21e119be5cd07c6cb1c08f0c8a23b14021", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 52, "bugNodeStartChar": 2039, "bugNodeLength": 103, "fixLineNum": 52, "fixNodeStartChar": 1988, "fixNodeLength": 110, "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "fixCommitParentSHA1": "28a40d21e119be5cd07c6cb1c08f0c8a23b14021", "bugFilePath": "src/web/org/openmrs/web/dwr/DWRRelationshipService.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\nindex 223eb26..c9530fb 100644\n--- a/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n+++ b/src/web/org/openmrs/web/dwr/DWRRelationshipService.java\n@@ -37,7 +37,7 @@\n \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n-\t\tps.createRelationship(rel);\r\n+\t\tps.saveRelationship(rel);\r\n \t}\r\n \t\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r\n@@ -50,7 +50,7 @@\n \t\t\r\n \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n-\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n+\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 52, "bugNodeStartChar": 2039, "bugNodeLength": 103, "fixLineNum": 52, "fixNodeStartChar": 1988, "fixNodeLength": 110, "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f59da66a15b2ee188834a85d8d38ae2777f8e05f", "fixCommitParentSHA1": "51b7aa7f5000628ad4f4b4c05075a646c1022794", "bugFilePath": "src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java b/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java\nindex bb087c2..d34479e 100644\n--- a/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java\n+++ b/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java\n@@ -355,7 +355,7 @@\n \t\t\tcriteria.add(Expression.eq(\"foreignKey\", foreignKey));\r\n \t\t\r\n \t\tif (searchable != null)\r\n-\t\t\tcriteria.add(Expression.eq(\"searchable\", format));\r\n+\t\t\tcriteria.add(Expression.eq(\"searchable\", searchable));\r\n \t\t\r\n \t\treturn criteria.list();\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 358, "bugNodeStartChar": 12894, "bugNodeLength": 35, "fixLineNum": 358, "fixNodeStartChar": 12537, "fixNodeLength": 39, "sourceBeforeFix": "Expression.eq(\"searchable\",format)", "sourceAfterFix": "Expression.eq(\"searchable\",searchable)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "f59da66a15b2ee188834a85d8d38ae2777f8e05f", "fixCommitParentSHA1": "51b7aa7f5000628ad4f4b4c05075a646c1022794", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 6b7b215..ac5b089 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -428,7 +428,7 @@\n \t */\r\n \tpublic User setUserProperty(User user, String key, String value) {\r\n \t\tif (user != null) {\r\n-\t\t\tif (!user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n+\t\t\tif (!Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n \t\t\t\tthrow new APIException(\"You are not authorized to change \" + user.getUserId() + \"'s properties\");\r\n \t\t\t\r\n \t\t\tuser.setUserProperty(key, value);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 431, "bugNodeStartChar": 13060, "bugNodeLength": 51, "fixLineNum": 431, "fixNodeStartChar": 12630, "fixNodeLength": 54, "sourceBeforeFix": "user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)", "sourceAfterFix": "Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f59da66a15b2ee188834a85d8d38ae2777f8e05f", "fixCommitParentSHA1": "51b7aa7f5000628ad4f4b4c05075a646c1022794", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 6b7b215..ac5b089 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -428,7 +428,7 @@\n \t */\r\n \tpublic User setUserProperty(User user, String key, String value) {\r\n \t\tif (user != null) {\r\n-\t\t\tif (!user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n+\t\t\tif (!Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n \t\t\t\tthrow new APIException(\"You are not authorized to change \" + user.getUserId() + \"'s properties\");\r\n \t\t\t\r\n \t\t\tuser.setUserProperty(key, value);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 431, "bugNodeStartChar": 13060, "bugNodeLength": 51, "fixLineNum": 431, "fixNodeStartChar": 12630, "fixNodeLength": 54, "sourceBeforeFix": "user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)", "sourceAfterFix": "Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "84471f6edc0c243fa8a12dbcb05aa16cbebaca8b", "fixCommitParentSHA1": "b9e61b8123abbdf6f93dd33613d99f2180d309ef", "bugFilePath": "src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java b/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java\nindex bb087c2..d34479e 100644\n--- a/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java\n+++ b/src/api/org/openmrs/api/db/hibernate/HibernatePersonDAO.java\n@@ -355,7 +355,7 @@\n \t\t\tcriteria.add(Expression.eq(\"foreignKey\", foreignKey));\r\n \t\t\r\n \t\tif (searchable != null)\r\n-\t\t\tcriteria.add(Expression.eq(\"searchable\", format));\r\n+\t\t\tcriteria.add(Expression.eq(\"searchable\", searchable));\r\n \t\t\r\n \t\treturn criteria.list();\r\n \t}\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 358, "bugNodeStartChar": 12894, "bugNodeLength": 35, "fixLineNum": 358, "fixNodeStartChar": 12537, "fixNodeLength": 39, "sourceBeforeFix": "Expression.eq(\"searchable\",format)", "sourceAfterFix": "Expression.eq(\"searchable\",searchable)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "84471f6edc0c243fa8a12dbcb05aa16cbebaca8b", "fixCommitParentSHA1": "b9e61b8123abbdf6f93dd33613d99f2180d309ef", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 6b7b215..ac5b089 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -428,7 +428,7 @@\n \t */\r\n \tpublic User setUserProperty(User user, String key, String value) {\r\n \t\tif (user != null) {\r\n-\t\t\tif (!user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n+\t\t\tif (!Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n \t\t\t\tthrow new APIException(\"You are not authorized to change \" + user.getUserId() + \"'s properties\");\r\n \t\t\t\r\n \t\t\tuser.setUserProperty(key, value);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 431, "bugNodeStartChar": 13060, "bugNodeLength": 51, "fixLineNum": 431, "fixNodeStartChar": 12630, "fixNodeLength": 54, "sourceBeforeFix": "user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)", "sourceAfterFix": "Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "84471f6edc0c243fa8a12dbcb05aa16cbebaca8b", "fixCommitParentSHA1": "b9e61b8123abbdf6f93dd33613d99f2180d309ef", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 6b7b215..ac5b089 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -428,7 +428,7 @@\n \t */\r\n \tpublic User setUserProperty(User user, String key, String value) {\r\n \t\tif (user != null) {\r\n-\t\t\tif (!user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n+\t\t\tif (!Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS) && !user.equals(Context.getAuthenticatedUser()))\r\n \t\t\t\tthrow new APIException(\"You are not authorized to change \" + user.getUserId() + \"'s properties\");\r\n \t\t\t\r\n \t\t\tuser.setUserProperty(key, value);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 431, "bugNodeStartChar": 13060, "bugNodeLength": 51, "fixLineNum": 431, "fixNodeStartChar": 12630, "fixNodeLength": 54, "sourceBeforeFix": "user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)", "sourceAfterFix": "Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bf22fcfa6b81fb336e26b04f39e8af9948c47bd3", "fixCommitParentSHA1": "29b36c4ea471b410f42c031baf493022dd40e509", "bugFilePath": "src/api/org/openmrs/api/impl/AdministrationServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java b/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java\nindex 20c6ee8..1deea7d 100644\n--- a/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java\n@@ -898,7 +898,7 @@\n \t\tif (globalLocaleList == null) {\r\n \t\t\tglobalLocaleList = new GlobalLocaleList();\r\n \t\t\taddGlobalPropertyListener(globalLocaleList);\r\n-\t\t\tString currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST);\r\n+\t\t\tString currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, \"\");\r\n \t\t\tGlobalProperty allowedLocalesProperty = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\r\n \t\t\t        currentPropertyValue);\r\n \t\t\tglobalLocaleList.globalPropertyChanged(allowedLocalesProperty);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 901, "bugNodeStartChar": 30524, "bugNodeLength": 71, "fixLineNum": 901, "fixNodeStartChar": 29624, "fixNodeLength": 75, "sourceBeforeFix": "getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)", "sourceAfterFix": "getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\"\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bc0df834a2fcab61542d1253e4daddcd47cafe3d", "fixCommitParentSHA1": "6471f7d40f7ab32555ce1d56b646c5766438ba3e", "bugFilePath": "src/api/org/openmrs/api/impl/AdministrationServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java b/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java\nindex 20c6ee8..1deea7d 100644\n--- a/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/AdministrationServiceImpl.java\n@@ -898,7 +898,7 @@\n \t\tif (globalLocaleList == null) {\r\n \t\t\tglobalLocaleList = new GlobalLocaleList();\r\n \t\t\taddGlobalPropertyListener(globalLocaleList);\r\n-\t\t\tString currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST);\r\n+\t\t\tString currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, \"\");\r\n \t\t\tGlobalProperty allowedLocalesProperty = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\r\n \t\t\t        currentPropertyValue);\r\n \t\t\tglobalLocaleList.globalPropertyChanged(allowedLocalesProperty);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 901, "bugNodeStartChar": 30524, "bugNodeLength": 71, "fixLineNum": 901, "fixNodeStartChar": 29624, "fixNodeLength": 75, "sourceBeforeFix": "getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)", "sourceAfterFix": "getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\"\")"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "2663f70f687240ee3d4c4c9d54a769ebff12c9ce", "fixCommitParentSHA1": "3301cbe16580806caa9f22320703070398f0ac34", "bugFilePath": "src/web/org/openmrs/web/controller/patient/PatientFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/patient/PatientFormController.java b/src/web/org/openmrs/web/controller/patient/PatientFormController.java\nindex f77c0f2..e02f9ab 100644\n--- a/src/web/org/openmrs/web/controller/patient/PatientFormController.java\n+++ b/src/web/org/openmrs/web/controller/patient/PatientFormController.java\n@@ -598,7 +598,7 @@\n \t\t\r\n \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n-\t\t\tif (patientExitObs != null) {\r\n+\t\t\tif (patientExitObs != null && patientExitObs.size() > 0) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 601, "bugNodeStartChar": 25170, "bugNodeLength": 22, "fixLineNum": 601, "fixNodeStartChar": 24570, "fixNodeLength": 51, "sourceBeforeFix": "patientExitObs != null", "sourceAfterFix": "patientExitObs != null && patientExitObs.size() > 0"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "5e12bb4e2c2a79b5af4dd4ab5e3547066e866580", "fixCommitParentSHA1": "34557cb76bd5cf3bc7ad81437541cdccda619034", "bugFilePath": "src/web/org/openmrs/web/controller/patient/PatientFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/patient/PatientFormController.java b/src/web/org/openmrs/web/controller/patient/PatientFormController.java\nindex f77c0f2..e02f9ab 100644\n--- a/src/web/org/openmrs/web/controller/patient/PatientFormController.java\n+++ b/src/web/org/openmrs/web/controller/patient/PatientFormController.java\n@@ -598,7 +598,7 @@\n \t\t\r\n \t\tif (reasonForExitConcept != null && patient.getPatientId() != null) {\r\n \t\t\tList<Obs> patientExitObs = Context.getObsService().getObservationsByPersonAndConcept(patient, reasonForExitConcept);\r\n-\t\t\tif (patientExitObs != null) {\r\n+\t\t\tif (patientExitObs != null && patientExitObs.size() > 0) {\r\n \t\t\t\tlog.debug(\"Exit obs is size \" + patientExitObs.size());\r\n \t\t\t\tif (patientExitObs.size() == 1) {\r\n \t\t\t\t\tObs exitObs = patientExitObs.iterator().next();\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 601, "bugNodeStartChar": 25170, "bugNodeLength": 22, "fixLineNum": 601, "fixNodeStartChar": 24570, "fixNodeLength": 51, "sourceBeforeFix": "patientExitObs != null", "sourceAfterFix": "patientExitObs != null && patientExitObs.size() > 0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6c2f07dd67357aaca75a1cf110bffe17c791b0cf", "fixCommitParentSHA1": "ec120bd3ad3f8510b021ac337917aa1676cc525e", "bugFilePath": "src/web/org/openmrs/web/filter/initialization/InitializationFilter.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java b/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java\nindex 9a4428d..3fd3457 100644\n--- a/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java\n+++ b/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java\n@@ -697,7 +697,7 @@\n \t * @return true if the value is non-empty\n \t */\n \tprivate boolean checkForEmptyValue(String value, List<String> errors, String errorMessage) {\n-\t\tif(value != null && !value.isEmpty()) {\n+\t\tif(value != null && !value.equals(\"\")) {\n \t\t\treturn true;\n \t\t}\n \t\terrors.add(errorMessage + \" required.\");\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 700, "bugNodeStartChar": 25721, "bugNodeLength": 15, "fixLineNum": 700, "fixNodeStartChar": 25721, "fixNodeLength": 16, "sourceBeforeFix": "value.isEmpty()", "sourceAfterFix": "value.equals(\"\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2dd536e4ea7b27c10f86075f7725d494f15c1f12", "fixCommitParentSHA1": "d289cf86927804eb2dbabcbe8a3938a548788954", "bugFilePath": "src/web/org/openmrs/web/filter/initialization/InitializationFilter.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java b/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java\nindex 9a4428d..3fd3457 100644\n--- a/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java\n+++ b/src/web/org/openmrs/web/filter/initialization/InitializationFilter.java\n@@ -697,7 +697,7 @@\n \t * @return true if the value is non-empty\n \t */\n \tprivate boolean checkForEmptyValue(String value, List<String> errors, String errorMessage) {\n-\t\tif(value != null && !value.isEmpty()) {\n+\t\tif(value != null && !value.equals(\"\")) {\n \t\t\treturn true;\n \t\t}\n \t\terrors.add(errorMessage + \" required.\");\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 700, "bugNodeStartChar": 25721, "bugNodeLength": 15, "fixLineNum": 700, "fixNodeStartChar": 25721, "fixNodeLength": 16, "sourceBeforeFix": "value.isEmpty()", "sourceAfterFix": "value.equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "8d8e6b726ed729117504c85b0aa08f45af9e0010", "fixCommitParentSHA1": "6c30fe10d295362fc28748752b55893abd4c9590", "bugFilePath": "src/web/org/openmrs/web/controller/RegimenPortletController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/RegimenPortletController.java b/src/web/org/openmrs/web/controller/RegimenPortletController.java\nindex 2314416..1f6cd19 100644\n--- a/src/web/org/openmrs/web/controller/RegimenPortletController.java\n+++ b/src/web/org/openmrs/web/controller/RegimenPortletController.java\n@@ -68,7 +68,7 @@\n \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n-\t\t\t\t\t\tif (order.isCurrent())\r\n+\t\t\t\t\t\tif (order.isCurrent() || order.isFuture())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 71, "bugNodeStartChar": 2870, "bugNodeLength": 17, "fixLineNum": 71, "fixNodeStartChar": 2800, "fixNodeLength": 37, "sourceBeforeFix": "order.isCurrent()", "sourceAfterFix": "order.isCurrent() || order.isFuture()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "c9046d9486f461df06dc49483571b6977f93a265", "fixCommitParentSHA1": "e01fe72afb58088f6cfeb7093eba8a59c84fb78e", "bugFilePath": "src/web/org/openmrs/web/controller/RegimenPortletController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/RegimenPortletController.java b/src/web/org/openmrs/web/controller/RegimenPortletController.java\nindex 2314416..1f6cd19 100644\n--- a/src/web/org/openmrs/web/controller/RegimenPortletController.java\n+++ b/src/web/org/openmrs/web/controller/RegimenPortletController.java\n@@ -68,7 +68,7 @@\n \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n-\t\t\t\t\t\tif (order.isCurrent())\r\n+\t\t\t\t\t\tif (order.isCurrent() || order.isFuture())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 71, "bugNodeStartChar": 2870, "bugNodeLength": 17, "fixLineNum": 71, "fixNodeStartChar": 2800, "fixNodeLength": 37, "sourceBeforeFix": "order.isCurrent()", "sourceAfterFix": "order.isCurrent() || order.isFuture()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a82c5ba127d1472c0c5c9dea4c1d8241bb391733", "fixCommitParentSHA1": "795f6652e9cfe60547e4d1b30e3faa2018df1e0a", "bugFilePath": "src/web/org/openmrs/web/servlet/LoginServlet.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/servlet/LoginServlet.java b/src/web/org/openmrs/web/servlet/LoginServlet.java\nindex 7ce23c6..121c6e7 100644\n--- a/src/web/org/openmrs/web/servlet/LoginServlet.java\n+++ b/src/web/org/openmrs/web/servlet/LoginServlet.java\n@@ -64,7 +64,7 @@\n \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n \t\t\r\n-\t\tString ipAddress = request.getLocalAddr();\r\n+\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2432, "bugNodeLength": 22, "fixLineNum": 67, "fixNodeStartChar": 2366, "fixNodeLength": 23, "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a82c5ba127d1472c0c5c9dea4c1d8241bb391733", "fixCommitParentSHA1": "795f6652e9cfe60547e4d1b30e3faa2018df1e0a", "bugFilePath": "src/web/org/openmrs/web/servlet/LoginServlet.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/servlet/LoginServlet.java b/src/web/org/openmrs/web/servlet/LoginServlet.java\nindex 7ce23c6..121c6e7 100644\n--- a/src/web/org/openmrs/web/servlet/LoginServlet.java\n+++ b/src/web/org/openmrs/web/servlet/LoginServlet.java\n@@ -64,7 +64,7 @@\n \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n \t\t\r\n-\t\tString ipAddress = request.getLocalAddr();\r\n+\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2432, "bugNodeLength": 22, "fixLineNum": 67, "fixNodeStartChar": 2366, "fixNodeLength": 23, "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4e2b481ca535a5db34807f8cc88c79740f485c49", "fixCommitParentSHA1": "2e9153ecfdb0fcca90375b2dbcaf3c0fce1c759f", "bugFilePath": "src/web/org/openmrs/web/servlet/LoginServlet.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/servlet/LoginServlet.java b/src/web/org/openmrs/web/servlet/LoginServlet.java\nindex 7ce23c6..121c6e7 100644\n--- a/src/web/org/openmrs/web/servlet/LoginServlet.java\n+++ b/src/web/org/openmrs/web/servlet/LoginServlet.java\n@@ -64,7 +64,7 @@\n \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n \t\t\r\n-\t\tString ipAddress = request.getLocalAddr();\r\n+\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2432, "bugNodeLength": 22, "fixLineNum": 67, "fixNodeStartChar": 2366, "fixNodeLength": 23, "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4e2b481ca535a5db34807f8cc88c79740f485c49", "fixCommitParentSHA1": "2e9153ecfdb0fcca90375b2dbcaf3c0fce1c759f", "bugFilePath": "src/web/org/openmrs/web/servlet/LoginServlet.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/servlet/LoginServlet.java b/src/web/org/openmrs/web/servlet/LoginServlet.java\nindex 7ce23c6..121c6e7 100644\n--- a/src/web/org/openmrs/web/servlet/LoginServlet.java\n+++ b/src/web/org/openmrs/web/servlet/LoginServlet.java\n@@ -64,7 +64,7 @@\n \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n \t\t\r\n-\t\tString ipAddress = request.getLocalAddr();\r\n+\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 67, "bugNodeStartChar": 2432, "bugNodeLength": 22, "fixLineNum": 67, "fixNodeStartChar": 2366, "fixNodeLength": 23, "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "fc800516d84b2d162de8dc00a51fe36e56de30ec", "fixCommitParentSHA1": "a4b3994fd4316a701738da5a1edbaafc39beab3a", "bugFilePath": "src/api/org/openmrs/api/impl/PersonServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/PersonServiceImpl.java b/src/api/org/openmrs/api/impl/PersonServiceImpl.java\nindex 1ffc8f8..893bfb2 100644\n--- a/src/api/org/openmrs/api/impl/PersonServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/PersonServiceImpl.java\n@@ -793,7 +793,7 @@\n \t\t\t}\r\n \t\t\telse {\r\n \t\t\t\tfirstName = names[1];\r\n-\t\t\t\tlastName = names[2];\r\n+\t\t\t\tlastName = names[0];\r\n \t\t\t}\r\n \t\t}\r\n \t\telse if (name.contains(\" \")) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 796, "bugNodeStartChar": 25887, "bugNodeLength": 8, "fixLineNum": 796, "fixNodeStartChar": 25092, "fixNodeLength": 8, "sourceBeforeFix": "names[2]", "sourceAfterFix": "names[0]"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d14dbb24b052e208abd5a407e3f5fb0df46ba828", "fixCommitParentSHA1": "956e9a18218b94ef2016b081cfc9029c9d27889e", "bugFilePath": "src/api/org/openmrs/api/impl/PersonServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/PersonServiceImpl.java b/src/api/org/openmrs/api/impl/PersonServiceImpl.java\nindex 1ffc8f8..893bfb2 100644\n--- a/src/api/org/openmrs/api/impl/PersonServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/PersonServiceImpl.java\n@@ -793,7 +793,7 @@\n \t\t\t}\r\n \t\t\telse {\r\n \t\t\t\tfirstName = names[1];\r\n-\t\t\t\tlastName = names[2];\r\n+\t\t\t\tlastName = names[0];\r\n \t\t\t}\r\n \t\t}\r\n \t\telse if (name.contains(\" \")) {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 796, "bugNodeStartChar": 25887, "bugNodeLength": 8, "fixLineNum": 796, "fixNodeStartChar": 25092, "fixNodeLength": 8, "sourceBeforeFix": "names[2]", "sourceAfterFix": "names[0]"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "21c7fa9a80fb34c514b8d44a80c4455e8cd2c28b", "fixCommitParentSHA1": "e0dbd156f16e52dab4cf83d30552e6da0e16e9ff", "bugFilePath": "test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java", "fixPatch": "diff --git a/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java b/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java\nindex 7b53fc2..6aabd73 100644\n--- a/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java\n+++ b/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java\n@@ -18,7 +18,7 @@\n import junit.framework.TestCase;\n \n /**\n- *\n+ * Tests the {@link LuhnIdentifierValidator}\n  */\n public class LuhnIdentifierValidatorTest extends TestCase {\n \t\n@@ -36,7 +36,7 @@\n \t\t//Make sure valid identifiers come back with the right check digit\n \t\t\n \t\tfor(int i=0;i<allowedIdentifiers.length;i++){\n-\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigits[i]);\n+\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigitsInts[i]);\n \t\t}\n \t\t\n \t\t//Make sure invalid identifiers throw an exception\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 39, "bugNodeStartChar": 1604, "bugNodeLength": 32, "fixLineNum": 39, "fixNodeStartChar": 1604, "fixNodeLength": 36, "sourceBeforeFix": "allowedIdentifiersCheckDigits[i]", "sourceAfterFix": "allowedIdentifiersCheckDigitsInts[i]"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3892fc236ec66c31418d8517cfe00e11920be69", "fixCommitParentSHA1": "bf7f9f7bde3bbd2ba6191ae66c02f6729ec142fe", "bugFilePath": "test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java", "fixPatch": "diff --git a/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java b/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java\nindex 7b53fc2..6aabd73 100644\n--- a/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java\n+++ b/test/api/org/openmrs/test/patient/LuhnIdentifierValidatorTest.java\n@@ -18,7 +18,7 @@\n import junit.framework.TestCase;\n \n /**\n- *\n+ * Tests the {@link LuhnIdentifierValidator}\n  */\n public class LuhnIdentifierValidatorTest extends TestCase {\n \t\n@@ -36,7 +36,7 @@\n \t\t//Make sure valid identifiers come back with the right check digit\n \t\t\n \t\tfor(int i=0;i<allowedIdentifiers.length;i++){\n-\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigits[i]);\n+\t\t\tassertEquals(validator.getValidIdentifier(allowedIdentifiers[i]), allowedIdentifiers[i] + \"-\" + allowedIdentifiersCheckDigitsInts[i]);\n \t\t}\n \t\t\n \t\t//Make sure invalid identifiers throw an exception\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 39, "bugNodeStartChar": 1604, "bugNodeLength": 32, "fixLineNum": 39, "fixNodeStartChar": 1604, "fixNodeLength": 36, "sourceBeforeFix": "allowedIdentifiersCheckDigits[i]", "sourceAfterFix": "allowedIdentifiersCheckDigitsInts[i]"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d07ad6127eeaed8db9233a12731e9c7dce2ec2c9", "fixCommitParentSHA1": "6491f0b0c08882b64303ec8d6f8bd3c464246b9a", "bugFilePath": "src/api/org/openmrs/hl7/handler/ORUR01Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\nindex de5ed9e..68d8290 100644\n--- a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n@@ -260,7 +260,7 @@\n \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n-\t\tContext.getEncounterService().createEncounter(encounter);\r\n+\t\tContext.getEncounterService().saveEncounter(encounter);\r\n \t\t\r\n \t\t// Notify HL7 service that we have created a new encounter, allowing\r\n \t\t// features/modules to trigger on HL7-generated encounters.\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 263, "bugNodeStartChar": 9273, "bugNodeLength": 56, "fixLineNum": 263, "fixNodeStartChar": 9011, "fixNodeLength": 54, "sourceBeforeFix": "Context.getEncounterService().createEncounter(encounter)", "sourceAfterFix": "Context.getEncounterService().saveEncounter(encounter)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d07ad6127eeaed8db9233a12731e9c7dce2ec2c9", "fixCommitParentSHA1": "6491f0b0c08882b64303ec8d6f8bd3c464246b9a", "bugFilePath": "src/api/org/openmrs/hl7/handler/ORUR01Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\nindex de5ed9e..68d8290 100644\n--- a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n@@ -260,7 +260,7 @@\n \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n-\t\tContext.getEncounterService().createEncounter(encounter);\r\n+\t\tContext.getEncounterService().saveEncounter(encounter);\r\n \t\t\r\n \t\t// Notify HL7 service that we have created a new encounter, allowing\r\n \t\t// features/modules to trigger on HL7-generated encounters.\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 263, "bugNodeStartChar": 9273, "bugNodeLength": 56, "fixLineNum": 263, "fixNodeStartChar": 9011, "fixNodeLength": 54, "sourceBeforeFix": "Context.getEncounterService().createEncounter(encounter)", "sourceAfterFix": "Context.getEncounterService().saveEncounter(encounter)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f56843207bb30d1e5e5f78484e7a3afc161585c6", "fixCommitParentSHA1": "ee3269b0d126056f3c8d63556ac6037aa1315c67", "bugFilePath": "src/api/org/openmrs/hl7/handler/ORUR01Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\nindex de5ed9e..68d8290 100644\n--- a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n@@ -260,7 +260,7 @@\n \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n-\t\tContext.getEncounterService().createEncounter(encounter);\r\n+\t\tContext.getEncounterService().saveEncounter(encounter);\r\n \t\t\r\n \t\t// Notify HL7 service that we have created a new encounter, allowing\r\n \t\t// features/modules to trigger on HL7-generated encounters.\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 263, "bugNodeStartChar": 9273, "bugNodeLength": 56, "fixLineNum": 263, "fixNodeStartChar": 9011, "fixNodeLength": 54, "sourceBeforeFix": "Context.getEncounterService().createEncounter(encounter)", "sourceAfterFix": "Context.getEncounterService().saveEncounter(encounter)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f56843207bb30d1e5e5f78484e7a3afc161585c6", "fixCommitParentSHA1": "ee3269b0d126056f3c8d63556ac6037aa1315c67", "bugFilePath": "src/api/org/openmrs/hl7/handler/ORUR01Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\nindex de5ed9e..68d8290 100644\n--- a/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ORUR01Handler.java\n@@ -260,7 +260,7 @@\n \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n-\t\tContext.getEncounterService().createEncounter(encounter);\r\n+\t\tContext.getEncounterService().saveEncounter(encounter);\r\n \t\t\r\n \t\t// Notify HL7 service that we have created a new encounter, allowing\r\n \t\t// features/modules to trigger on HL7-generated encounters.\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 263, "bugNodeStartChar": 9273, "bugNodeLength": 56, "fixLineNum": 263, "fixNodeStartChar": 9011, "fixNodeLength": 54, "sourceBeforeFix": "Context.getEncounterService().createEncounter(encounter)", "sourceAfterFix": "Context.getEncounterService().saveEncounter(encounter)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "2585513b6be984cf2f9219d8e23edb6a84e22ac9", "fixCommitParentSHA1": "4ac2492127a7d970b08a60214e5c4069392636b8", "bugFilePath": "src/web/org/openmrs/web/controller/encounter/EncounterFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java b/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java\nindex a80c32b..6669852 100644\n--- a/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java\n+++ b/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java\n@@ -214,7 +214,7 @@\n \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\t// loop over the encounter's observations to find the edited obs\r\n \t\t\tString reason = \"\";\r\n-\t\t\tfor (Obs o : encounter.getObsAtTopLevel(false)) {\r\n+\t\t\tfor (Obs o : encounter.getObsAtTopLevel(true)) {\r\n \t\t\t\t// only the voided obs have been edited\r\n \t\t\t\tif (o.isVoided()){\r\n \t\t\t\t\t// assumes format of: \".* (new obsId: \\d*)\"\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 217, "bugNodeStartChar": 9330, "bugNodeLength": 33, "fixLineNum": 217, "fixNodeStartChar": 9114, "fixNodeLength": 32, "sourceBeforeFix": "encounter.getObsAtTopLevel(false)", "sourceAfterFix": "encounter.getObsAtTopLevel(true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "cfecfd3093204505dda0a21835fd4f55be94960d", "fixCommitParentSHA1": "7318924eda1c9b0939ec33cad585a059eec5edc0", "bugFilePath": "src/web/org/openmrs/web/controller/encounter/EncounterFormController.java", "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java b/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java\nindex a80c32b..6669852 100644\n--- a/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java\n+++ b/src/web/org/openmrs/web/controller/encounter/EncounterFormController.java\n@@ -214,7 +214,7 @@\n \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\t// loop over the encounter's observations to find the edited obs\r\n \t\t\tString reason = \"\";\r\n-\t\t\tfor (Obs o : encounter.getObsAtTopLevel(false)) {\r\n+\t\t\tfor (Obs o : encounter.getObsAtTopLevel(true)) {\r\n \t\t\t\t// only the voided obs have been edited\r\n \t\t\t\tif (o.isVoided()){\r\n \t\t\t\t\t// assumes format of: \".* (new obsId: \\d*)\"\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 217, "bugNodeStartChar": 9330, "bugNodeLength": 33, "fixLineNum": 217, "fixNodeStartChar": 9114, "fixNodeLength": 32, "sourceBeforeFix": "encounter.getObsAtTopLevel(false)", "sourceAfterFix": "encounter.getObsAtTopLevel(true)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "c7314141c0b6c3caa0be72c78f2ba2996a9eabd7", "fixCommitParentSHA1": "ac696a6b50a5ca7f27fb5afd4002540f8aa718b7", "bugFilePath": "src/api/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\nindex ad5a952..2c78d85 100644\n--- a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -288,7 +288,7 @@\n \t\t\r\n \t\t// Date of Birth\r\n \t\tTS dateOfBirth = pid.getDateTimeOfBirth();\r\n-\t    if (dateOfBirth == null)\t\r\n+\t    if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)\t\r\n \t\t\tthrow new HL7Exception(\"Missing birth date in the PID segment\");\r\n \t\tpatient.setBirthdate(tsToDate(dateOfBirth));\r\n \t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 291, "bugNodeStartChar": 10658, "bugNodeLength": 19, "fixLineNum": 291, "fixNodeStartChar": 10368, "fixNodeLength": 96, "sourceBeforeFix": "dateOfBirth == null", "sourceAfterFix": "dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "c7314141c0b6c3caa0be72c78f2ba2996a9eabd7", "fixCommitParentSHA1": "ac696a6b50a5ca7f27fb5afd4002540f8aa718b7", "bugFilePath": "src/api/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\nindex ad5a952..2c78d85 100644\n--- a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -288,7 +288,7 @@\n \t\t\r\n \t\t// Date of Birth\r\n \t\tTS dateOfBirth = pid.getDateTimeOfBirth();\r\n-\t    if (dateOfBirth == null)\t\r\n+\t    if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)\t\r\n \t\t\tthrow new HL7Exception(\"Missing birth date in the PID segment\");\r\n \t\tpatient.setBirthdate(tsToDate(dateOfBirth));\r\n \t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 291, "bugNodeStartChar": 10658, "bugNodeLength": 19, "fixLineNum": 291, "fixNodeStartChar": 10368, "fixNodeLength": 96, "sourceBeforeFix": "dateOfBirth == null", "sourceAfterFix": "dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "0ee5eebaefe8c07c0c10f8595e241aa49ed12cc5", "fixCommitParentSHA1": "d7a2fe9b984acb5b2521eebd79055ddfcca750ba", "bugFilePath": "src/api/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\nindex ad5a952..2c78d85 100644\n--- a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -288,7 +288,7 @@\n \t\t\r\n \t\t// Date of Birth\r\n \t\tTS dateOfBirth = pid.getDateTimeOfBirth();\r\n-\t    if (dateOfBirth == null)\t\r\n+\t    if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)\t\r\n \t\t\tthrow new HL7Exception(\"Missing birth date in the PID segment\");\r\n \t\tpatient.setBirthdate(tsToDate(dateOfBirth));\r\n \t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 291, "bugNodeStartChar": 10658, "bugNodeLength": 19, "fixLineNum": 291, "fixNodeStartChar": 10368, "fixNodeLength": 96, "sourceBeforeFix": "dateOfBirth == null", "sourceAfterFix": "dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "0ee5eebaefe8c07c0c10f8595e241aa49ed12cc5", "fixCommitParentSHA1": "d7a2fe9b984acb5b2521eebd79055ddfcca750ba", "bugFilePath": "src/api/org/openmrs/hl7/handler/ADTA28Handler.java", "fixPatch": "diff --git a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\nindex ad5a952..2c78d85 100644\n--- a/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n+++ b/src/api/org/openmrs/hl7/handler/ADTA28Handler.java\n@@ -288,7 +288,7 @@\n \t\t\r\n \t\t// Date of Birth\r\n \t\tTS dateOfBirth = pid.getDateTimeOfBirth();\r\n-\t    if (dateOfBirth == null)\t\r\n+\t    if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)\t\r\n \t\t\tthrow new HL7Exception(\"Missing birth date in the PID segment\");\r\n \t\tpatient.setBirthdate(tsToDate(dateOfBirth));\r\n \t\t\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 291, "bugNodeStartChar": 10658, "bugNodeLength": 19, "fixLineNum": 291, "fixNodeStartChar": 10368, "fixNodeLength": 96, "sourceBeforeFix": "dateOfBirth == null", "sourceAfterFix": "dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "31011d3232ace5a459ea2ba37f5634f7d4940694", "fixCommitParentSHA1": "62c82d86eac614e3c37eb36424c84bd0d8b541f9", "bugFilePath": "src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\nindex da9a215..668d5b1 100644\n--- a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n+++ b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n@@ -104,7 +104,7 @@\n \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n-\t\tif (systemId == null || username.length() == 0)\r\n+\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\t\r\n \t\tif (userId == null)\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 107, "bugNodeStartChar": 3350, "bugNodeLength": 17, "fixLineNum": 107, "fixNodeStartChar": 3244, "fixNodeLength": 17, "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "31011d3232ace5a459ea2ba37f5634f7d4940694", "fixCommitParentSHA1": "62c82d86eac614e3c37eb36424c84bd0d8b541f9", "bugFilePath": "src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\nindex da9a215..668d5b1 100644\n--- a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n+++ b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n@@ -104,7 +104,7 @@\n \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n-\t\tif (systemId == null || username.length() == 0)\r\n+\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\t\r\n \t\tif (userId == null)\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 107, "bugNodeStartChar": 3350, "bugNodeLength": 17, "fixLineNum": 107, "fixNodeStartChar": 3244, "fixNodeLength": 17, "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "4eebdc1b07ab6b049491475b27cc27c1f94206e6", "fixCommitParentSHA1": "756a3fc4e6db11580c332bd38b8f11840bc4f36e", "bugFilePath": "src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\nindex da9a215..668d5b1 100644\n--- a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n+++ b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n@@ -104,7 +104,7 @@\n \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n-\t\tif (systemId == null || username.length() == 0)\r\n+\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\t\r\n \t\tif (userId == null)\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 107, "bugNodeStartChar": 3350, "bugNodeLength": 17, "fixLineNum": 107, "fixNodeStartChar": 3244, "fixNodeLength": 17, "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4eebdc1b07ab6b049491475b27cc27c1f94206e6", "fixCommitParentSHA1": "756a3fc4e6db11580c332bd38b8f11840bc4f36e", "bugFilePath": "src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\nindex da9a215..668d5b1 100644\n--- a/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n+++ b/src/api/org/openmrs/api/db/hibernate/HibernateUserDAO.java\n@@ -104,7 +104,7 @@\n \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n-\t\tif (systemId == null || username.length() == 0)\r\n+\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\t\r\n \t\tif (userId == null)\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 107, "bugNodeStartChar": 3350, "bugNodeLength": 17, "fixLineNum": 107, "fixNodeStartChar": 3244, "fixNodeLength": 17, "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "67ec1a78b8063260b668adf0afd7996326b3ea03", "fixCommitParentSHA1": "7640652edcb3c4966223e0c057c88c6676aaefef", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 8914b4c..9118305 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -98,24 +98,30 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Save changes to user\r\n-\t * @param user\r\n+\t * Save changes to given <code>user</code> to the database.\r\n+\t * \r\n+\t * If the user.systemId is blank or null, it will be filled in automatically\r\n+\t * by the current systemId algorithm \r\n+\t * \r\n+\t * @param user the OpenMRS User to save to the database\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void updateUser(User user) throws APIException {\r\n \t\tcheckPrivileges(user);\r\n \t\tsetCollectionProperties(user);\r\n \t\t\r\n-\t\tif (user.getSystemId() == null)\r\n+\t\tif (user.getSystemId() == null || user.getSystemId().equals(\"\"))\r\n \t\t\tuser.setSystemId(generateSystemId());\r\n \t\t\r\n \t\tgetUserDAO().updateUser(user);\r\n \t}\r\n \t\r\n \t/**\r\n-\t * Grant roles for user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Give a <code>role</code> to the given <code>user</code>.  If the \r\n+\t * <code>user</code> already has this role, the user is saved anyway.\r\n+\t * \r\n+\t * @param user The OpenMRS user to add the <code>role</code> to \r\n+\t * @param role Role to give to the <code>user</code>\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void grantUserRole(User user, Role role) throws APIException {\r\n@@ -124,9 +130,13 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Revoke roles from user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Remove the given <code>role</code> from the given <code>user</code>\r\n+\t * If the <code>user</code> does not have this <code>role</code>, no\r\n+\t * errors will be thrown and the user will be saved anyway\r\n+\t * \r\n+\t * @param user the OpenMRS user from which to remove the <code>role</code> \r\n+\t * @param role Role to remove from <code>user</code>\r\n+\t * \r\n \t * @throws APIException\r\n \t */\r\n \tpublic void revokeUserRole(User user, Role role) throws APIException {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 109, "bugNodeStartChar": 2829, "bugNodeLength": 26, "fixLineNum": 109, "fixNodeStartChar": 2721, "fixNodeLength": 59, "sourceBeforeFix": "user.getSystemId() == null", "sourceAfterFix": "user.getSystemId() == null || user.getSystemId().equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "67ec1a78b8063260b668adf0afd7996326b3ea03", "fixCommitParentSHA1": "7640652edcb3c4966223e0c057c88c6676aaefef", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 8914b4c..9118305 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -98,24 +98,30 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Save changes to user\r\n-\t * @param user\r\n+\t * Save changes to given <code>user</code> to the database.\r\n+\t * \r\n+\t * If the user.systemId is blank or null, it will be filled in automatically\r\n+\t * by the current systemId algorithm \r\n+\t * \r\n+\t * @param user the OpenMRS User to save to the database\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void updateUser(User user) throws APIException {\r\n \t\tcheckPrivileges(user);\r\n \t\tsetCollectionProperties(user);\r\n \t\t\r\n-\t\tif (user.getSystemId() == null)\r\n+\t\tif (user.getSystemId() == null || user.getSystemId().equals(\"\"))\r\n \t\t\tuser.setSystemId(generateSystemId());\r\n \t\t\r\n \t\tgetUserDAO().updateUser(user);\r\n \t}\r\n \t\r\n \t/**\r\n-\t * Grant roles for user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Give a <code>role</code> to the given <code>user</code>.  If the \r\n+\t * <code>user</code> already has this role, the user is saved anyway.\r\n+\t * \r\n+\t * @param user The OpenMRS user to add the <code>role</code> to \r\n+\t * @param role Role to give to the <code>user</code>\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void grantUserRole(User user, Role role) throws APIException {\r\n@@ -124,9 +130,13 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Revoke roles from user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Remove the given <code>role</code> from the given <code>user</code>\r\n+\t * If the <code>user</code> does not have this <code>role</code>, no\r\n+\t * errors will be thrown and the user will be saved anyway\r\n+\t * \r\n+\t * @param user the OpenMRS user from which to remove the <code>role</code> \r\n+\t * @param role Role to remove from <code>user</code>\r\n+\t * \r\n \t * @throws APIException\r\n \t */\r\n \tpublic void revokeUserRole(User user, Role role) throws APIException {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 109, "bugNodeStartChar": 2829, "bugNodeLength": 26, "fixLineNum": 109, "fixNodeStartChar": 2721, "fixNodeLength": 59, "sourceBeforeFix": "user.getSystemId() == null", "sourceAfterFix": "user.getSystemId() == null || user.getSystemId().equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "6fbbb838295a85ec7a7f373555debecdfe139a05", "fixCommitParentSHA1": "0b66c5a7d7afd62c79dd18a4b30e70f65dc62147", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 8914b4c..9118305 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -98,24 +98,30 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Save changes to user\r\n-\t * @param user\r\n+\t * Save changes to given <code>user</code> to the database.\r\n+\t * \r\n+\t * If the user.systemId is blank or null, it will be filled in automatically\r\n+\t * by the current systemId algorithm \r\n+\t * \r\n+\t * @param user the OpenMRS User to save to the database\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void updateUser(User user) throws APIException {\r\n \t\tcheckPrivileges(user);\r\n \t\tsetCollectionProperties(user);\r\n \t\t\r\n-\t\tif (user.getSystemId() == null)\r\n+\t\tif (user.getSystemId() == null || user.getSystemId().equals(\"\"))\r\n \t\t\tuser.setSystemId(generateSystemId());\r\n \t\t\r\n \t\tgetUserDAO().updateUser(user);\r\n \t}\r\n \t\r\n \t/**\r\n-\t * Grant roles for user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Give a <code>role</code> to the given <code>user</code>.  If the \r\n+\t * <code>user</code> already has this role, the user is saved anyway.\r\n+\t * \r\n+\t * @param user The OpenMRS user to add the <code>role</code> to \r\n+\t * @param role Role to give to the <code>user</code>\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void grantUserRole(User user, Role role) throws APIException {\r\n@@ -124,9 +130,13 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Revoke roles from user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Remove the given <code>role</code> from the given <code>user</code>\r\n+\t * If the <code>user</code> does not have this <code>role</code>, no\r\n+\t * errors will be thrown and the user will be saved anyway\r\n+\t * \r\n+\t * @param user the OpenMRS user from which to remove the <code>role</code> \r\n+\t * @param role Role to remove from <code>user</code>\r\n+\t * \r\n \t * @throws APIException\r\n \t */\r\n \tpublic void revokeUserRole(User user, Role role) throws APIException {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 109, "bugNodeStartChar": 2829, "bugNodeLength": 26, "fixLineNum": 109, "fixNodeStartChar": 2721, "fixNodeLength": 59, "sourceBeforeFix": "user.getSystemId() == null", "sourceAfterFix": "user.getSystemId() == null || user.getSystemId().equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "6fbbb838295a85ec7a7f373555debecdfe139a05", "fixCommitParentSHA1": "0b66c5a7d7afd62c79dd18a4b30e70f65dc62147", "bugFilePath": "src/api/org/openmrs/api/impl/UserServiceImpl.java", "fixPatch": "diff --git a/src/api/org/openmrs/api/impl/UserServiceImpl.java b/src/api/org/openmrs/api/impl/UserServiceImpl.java\nindex 8914b4c..9118305 100644\n--- a/src/api/org/openmrs/api/impl/UserServiceImpl.java\n+++ b/src/api/org/openmrs/api/impl/UserServiceImpl.java\n@@ -98,24 +98,30 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Save changes to user\r\n-\t * @param user\r\n+\t * Save changes to given <code>user</code> to the database.\r\n+\t * \r\n+\t * If the user.systemId is blank or null, it will be filled in automatically\r\n+\t * by the current systemId algorithm \r\n+\t * \r\n+\t * @param user the OpenMRS User to save to the database\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void updateUser(User user) throws APIException {\r\n \t\tcheckPrivileges(user);\r\n \t\tsetCollectionProperties(user);\r\n \t\t\r\n-\t\tif (user.getSystemId() == null)\r\n+\t\tif (user.getSystemId() == null || user.getSystemId().equals(\"\"))\r\n \t\t\tuser.setSystemId(generateSystemId());\r\n \t\t\r\n \t\tgetUserDAO().updateUser(user);\r\n \t}\r\n \t\r\n \t/**\r\n-\t * Grant roles for user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Give a <code>role</code> to the given <code>user</code>.  If the \r\n+\t * <code>user</code> already has this role, the user is saved anyway.\r\n+\t * \r\n+\t * @param user The OpenMRS user to add the <code>role</code> to \r\n+\t * @param role Role to give to the <code>user</code>\r\n \t * @throws APIException\r\n \t */\r\n \tpublic void grantUserRole(User user, Role role) throws APIException {\r\n@@ -124,9 +130,13 @@\n \t}\r\n \t\r\n \t/**\r\n-\t * Revoke roles from user\r\n-\t * @param user\r\n-\t * @param role\r\n+\t * Remove the given <code>role</code> from the given <code>user</code>\r\n+\t * If the <code>user</code> does not have this <code>role</code>, no\r\n+\t * errors will be thrown and the user will be saved anyway\r\n+\t * \r\n+\t * @param user the OpenMRS user from which to remove the <code>role</code> \r\n+\t * @param role Role to remove from <code>user</code>\r\n+\t * \r\n \t * @throws APIException\r\n \t */\r\n \tpublic void revokeUserRole(User user, Role role) throws APIException {\r\n", "projectName": "openmrs.openmrs-core", "bugLineNum": 109, "bugNodeStartChar": 2829, "bugNodeLength": 26, "fixLineNum": 109, "fixNodeStartChar": 2721, "fixNodeLength": 59, "sourceBeforeFix": "user.getSystemId() == null", "sourceAfterFix": "user.getSystemId() == null || user.getSystemId().equals(\"\")"}]