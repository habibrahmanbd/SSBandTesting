[{"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "cd750463fa622ca2ba5c60e3b54aeceb8d29e4f8", "fixCommitParentSHA1": "7afe473fd3d1a0d2e17383e4f3e6c18fb8bad28f", "bugFilePath": "services/src/main/java/org/apache/druid/cli/CliIndexer.java", "fixPatch": "diff --git a/services/src/main/java/org/apache/druid/cli/CliIndexer.java b/services/src/main/java/org/apache/druid/cli/CliIndexer.java\nindex fc1bed1..97afa5b 100644\n--- a/services/src/main/java/org/apache/druid/cli/CliIndexer.java\n+++ b/services/src/main/java/org/apache/druid/cli/CliIndexer.java\n@@ -100,7 +100,7 @@\n           {\n             binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/indexer\");\n             binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n-            binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8091);\n+            binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n \n             IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);\n \n", "projectName": "druid-io.druid", "bugLineNum": 103, "bugNodeStartChar": 4140, "bugNodeLength": 75, "fixLineNum": 103, "fixNodeStartChar": 4140, "fixNodeLength": 75, "sourceBeforeFix": "binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8091)", "sourceAfterFix": "binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "7d63c295ccfc15bd05164f32e5c49f9fed4da89b", "fixCommitParentSHA1": "d3545f508672cf6b5eb66c7c28483f5ab01813ec", "bugFilePath": "extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java", "fixPatch": "diff --git a/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java b/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java\nindex f53f5c3..f93cc00 100644\n--- a/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java\n+++ b/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java\n@@ -785,7 +785,7 @@\n       String user\n   )\n   {\n-    Response response = resource.getUser(req, AUTHORIZER_NAME, user, \"\");\n+    Response response = resource.getUser(req, AUTHORIZER_NAME, user, \"\", null);\n     Assert.assertEquals(200, response.getStatus());\n     BasicAuthorizerUserFull userFull = (BasicAuthorizerUserFull) response.getEntity();\n     Set<String> roleNames = new HashSet<>();\n", "projectName": "druid-io.druid", "bugLineNum": 788, "bugNodeStartChar": 32639, "bugNodeLength": 48, "fixLineNum": 788, "fixNodeStartChar": 32639, "fixNodeLength": 54, "sourceBeforeFix": "resource.getUser(req,AUTHORIZER_NAME,user,\"\")", "sourceAfterFix": "resource.getUser(req,AUTHORIZER_NAME,user,\"\",null)"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "a00d3e19313ef80233670a67fddb2dd7abcdfb5d", "fixCommitParentSHA1": "83b38c0911c6a040308c29dc88a3051d60c68b93", "bugFilePath": "integration-tests/src/test/java/org/apache/druid/tests/security/ITBasicAuthConfigurationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/org/apache/druid/tests/security/ITBasicAuthConfigurationTest.java b/integration-tests/src/test/java/org/apache/druid/tests/security/ITBasicAuthConfigurationTest.java\nindex dfa3791..67e1f37 100644\n--- a/integration-tests/src/test/java/org/apache/druid/tests/security/ITBasicAuthConfigurationTest.java\n+++ b/integration-tests/src/test/java/org/apache/druid/tests/security/ITBasicAuthConfigurationTest.java\n@@ -120,7 +120,7 @@\n   private CoordinatorResourceTestClient coordinatorClient;\n \n   @BeforeMethod\n-  public void before() throws Exception\n+  public void before()\n   {\n     // ensure that auth_test segments are loaded completely, we use them for testing system schema tables\n     RetryUtil.retryUntilTrue(\n", "projectName": "druid-io.druid", "bugLineNum": 122, "bugNodeStartChar": 4838, "bugNodeLength": 293, "fixLineNum": 122, "fixNodeStartChar": 4838, "fixNodeLength": 276, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "6fd6e5de891e8bafee8d87b90647c6bc068f98e0", "fixCommitParentSHA1": "3ec9fbaa477d221f56a2a2ff75b9f4c2ae428295", "bugFilePath": "processing/src/test/java/org/apache/druid/query/topn/TopNQueryQueryToolChestTest.java", "fixPatch": "diff --git a/processing/src/test/java/org/apache/druid/query/topn/TopNQueryQueryToolChestTest.java b/processing/src/test/java/org/apache/druid/query/topn/TopNQueryQueryToolChestTest.java\nindex cede671..81079df 100644\n--- a/processing/src/test/java/org/apache/druid/query/topn/TopNQueryQueryToolChestTest.java\n+++ b/processing/src/test/java/org/apache/druid/query/topn/TopNQueryQueryToolChestTest.java\n@@ -134,7 +134,7 @@\n   }\n \n   @Test\n-  public void testComputeResultLevelCacheKeyWithDifferentPostAgg() throws IOException\n+  public void testComputeResultLevelCacheKeyWithDifferentPostAgg()\n   {\n     final TopNQuery query1 = new TopNQuery(\n         new TableDataSource(\"dummy\"),\n", "projectName": "druid-io.druid", "bugLineNum": 136, "bugNodeStartChar": 5104, "bugNodeLength": 2967, "fixLineNum": 136, "fixNodeStartChar": 5104, "fixNodeLength": 2948, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "543324f8a92d6956574aa4da2edb7b3c429a6eda", "fixCommitParentSHA1": "4d37edac1e73f42eb70e9e066b8d4df2d89ec6f0", "bugFilePath": "server/src/main/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinator.java", "fixPatch": "diff --git a/server/src/main/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinator.java b/server/src/main/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinator.java\nindex c234148..c77dee1 100644\n--- a/server/src/main/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinator.java\n+++ b/server/src/main/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinator.java\n@@ -893,7 +893,7 @@\n       // Not in the desired start state.\n       log.error(\n           \"Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s].\",\n-          oldCommitMetadataBytesFromDb,\n+          oldCommitMetadataFromDb,\n           startMetadata\n       );\n       return DataSourceMetadataUpdateResult.FAILURE;\n", "projectName": "druid-io.druid", "bugLineNum": 894, "bugNodeStartChar": 32936, "bugNodeLength": 197, "fixLineNum": 894, "fixNodeStartChar": 32936, "fixNodeLength": 192, "sourceBeforeFix": "log.error(\"Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s].\",oldCommitMetadataBytesFromDb,startMetadata)", "sourceAfterFix": "log.error(\"Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s].\",oldCommitMetadataFromDb,startMetadata)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "105b4fa2379a1f83dab4755d563f11c547c2893e", "fixCommitParentSHA1": "bca40dcdaf3177b95d01187f413e1c0c6865964b", "bugFilePath": "services/src/main/java/org/apache/druid/cli/CliRealtimeExample.java", "fixPatch": "diff --git a/services/src/main/java/org/apache/druid/cli/CliRealtimeExample.java b/services/src/main/java/org/apache/druid/cli/CliRealtimeExample.java\nindex 64ad5e0..733ac74 100644\n--- a/services/src/main/java/org/apache/druid/cli/CliRealtimeExample.java\n+++ b/services/src/main/java/org/apache/druid/cli/CliRealtimeExample.java\n@@ -54,7 +54,7 @@\n )\n public class CliRealtimeExample extends ServerRunnable\n {\n-  private static final Logger log = new Logger(CliBroker.class);\n+  private static final Logger log = new Logger(CliRealtimeExample.class);\n \n   @Inject\n   private Properties properties;\n", "projectName": "druid-io.druid", "bugLineNum": 57, "bugNodeStartChar": 2292, "bugNodeLength": 15, "fixLineNum": 57, "fixNodeStartChar": 2292, "fixNodeLength": 24, "sourceBeforeFix": "CliBroker.class", "sourceAfterFix": "CliRealtimeExample.class"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "fixCommitParentSHA1": "953b96d0a436b2bd979c2aa6eecc3f636387633c", "bugFilePath": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java", "fixPatch": "diff --git a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java\nindex 46eb02c..1690ef9 100644\n--- a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java\n+++ b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java\n@@ -161,7 +161,7 @@\n \n     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n+    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new HllSketchSqlAggregator()),\n         ImmutableSet.of()\n", "projectName": "druid-io.druid", "bugLineNum": 164, "bugNodeStartChar": 7599, "bugNodeLength": 56, "fixLineNum": 164, "fixNodeStartChar": 7599, "fixNodeLength": 71, "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "fixCommitParentSHA1": "953b96d0a436b2bd979c2aa6eecc3f636387633c", "bugFilePath": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java", "fixPatch": "diff --git a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java\nindex ffbcc22..2b4e5e0 100644\n--- a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java\n+++ b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java\n@@ -157,7 +157,7 @@\n \n     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n+    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new DoublesSketchSqlAggregator()),\n         ImmutableSet.of()\n", "projectName": "druid-io.druid", "bugLineNum": 160, "bugNodeStartChar": 7432, "bugNodeLength": 56, "fixLineNum": 160, "fixNodeStartChar": 7432, "fixNodeLength": 71, "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "fixCommitParentSHA1": "953b96d0a436b2bd979c2aa6eecc3f636387633c", "bugFilePath": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java", "fixPatch": "diff --git a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java\nindex e844864..919a596 100644\n--- a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java\n+++ b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java\n@@ -162,7 +162,7 @@\n \n     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n+    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new ThetaSketchSqlAggregator()),\n         ImmutableSet.of()\n", "projectName": "druid-io.druid", "bugLineNum": 165, "bugNodeStartChar": 7638, "bugNodeLength": 56, "fixLineNum": 165, "fixNodeStartChar": 7638, "fixNodeLength": 71, "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "fixCommitParentSHA1": "953b96d0a436b2bd979c2aa6eecc3f636387633c", "bugFilePath": "extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java", "fixPatch": "diff --git a/extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java b/extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java\nindex 4ba94fe..2bac9e0 100644\n--- a/extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java\n+++ b/extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java\n@@ -161,7 +161,7 @@\n \n     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n+    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new QuantileSqlAggregator(), new FixedBucketsHistogramQuantileSqlAggregator()),\n         ImmutableSet.of()\n", "projectName": "druid-io.druid", "bugLineNum": 164, "bugNodeStartChar": 7725, "bugNodeLength": 56, "fixLineNum": 164, "fixNodeStartChar": 7725, "fixNodeLength": 71, "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c81cb94226a8381f512b8293659c82338a4626c3", "fixCommitParentSHA1": "c5405bb5929b117b31ad0f4c4ba8c6faf38beb63", "bugFilePath": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java", "fixPatch": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\nindex 92f01ac..d0d7a43 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\n@@ -627,7 +627,7 @@\n   public Response getTasks(\n       @QueryParam(\"state\") final String state,\n       @QueryParam(\"datasource\") final String dataSource,\n-      @PathParam(\"createdTimeInterval\") final String createdTimeInterval,\n+      @QueryParam(\"createdTimeInterval\") final String createdTimeInterval,\n       @QueryParam(\"max\") final Integer maxCompletedTasks,\n       @QueryParam(\"type\") final String type,\n       @Context final HttpServletRequest req\n", "projectName": "druid-io.druid", "bugLineNum": 630, "bugNodeStartChar": 20708, "bugNodeLength": 33, "fixLineNum": 630, "fixNodeStartChar": 20708, "fixNodeLength": 34, "sourceBeforeFix": "@PathParam(\"createdTimeInterval\")", "sourceAfterFix": "@QueryParam(\"createdTimeInterval\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0b70c36eb0dff06c81010d1569797c727712bddd", "fixCommitParentSHA1": "2ebdce20b1797858f8b20144eabfb46e3574f3e0", "bugFilePath": "core/src/main/java/org/apache/druid/math/expr/ExprEval.java", "fixPatch": "diff --git a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\nindex 2b649d4..4dad810 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n@@ -197,7 +197,7 @@\n           return this;\n         case LONG:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofLong(null);\n           } else {\n             return ExprEval.of(asLong());\n           }\n@@ -239,7 +239,7 @@\n       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofDouble(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }\n", "projectName": "druid-io.druid", "bugLineNum": 200, "bugNodeStartChar": 4625, "bugNodeLength": 17, "fixLineNum": 200, "fixNodeStartChar": 4625, "fixNodeLength": 21, "sourceBeforeFix": "ExprEval.of(null)", "sourceAfterFix": "ExprEval.ofLong(null)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b70c36eb0dff06c81010d1569797c727712bddd", "fixCommitParentSHA1": "2ebdce20b1797858f8b20144eabfb46e3574f3e0", "bugFilePath": "core/src/main/java/org/apache/druid/math/expr/ExprEval.java", "fixPatch": "diff --git a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\nindex 2b649d4..4dad810 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n@@ -197,7 +197,7 @@\n           return this;\n         case LONG:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofLong(null);\n           } else {\n             return ExprEval.of(asLong());\n           }\n@@ -239,7 +239,7 @@\n       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofDouble(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }\n", "projectName": "druid-io.druid", "bugLineNum": 200, "bugNodeStartChar": 4625, "bugNodeLength": 17, "fixLineNum": 200, "fixNodeStartChar": 4625, "fixNodeLength": 21, "sourceBeforeFix": "ExprEval.of(null)", "sourceAfterFix": "ExprEval.ofLong(null)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0b70c36eb0dff06c81010d1569797c727712bddd", "fixCommitParentSHA1": "2ebdce20b1797858f8b20144eabfb46e3574f3e0", "bugFilePath": "core/src/main/java/org/apache/druid/math/expr/ExprEval.java", "fixPatch": "diff --git a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\nindex 2b649d4..4dad810 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n@@ -197,7 +197,7 @@\n           return this;\n         case LONG:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofLong(null);\n           } else {\n             return ExprEval.of(asLong());\n           }\n@@ -239,7 +239,7 @@\n       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofDouble(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }\n", "projectName": "druid-io.druid", "bugLineNum": 242, "bugNodeStartChar": 5501, "bugNodeLength": 17, "fixLineNum": 242, "fixNodeStartChar": 5501, "fixNodeLength": 23, "sourceBeforeFix": "ExprEval.of(null)", "sourceAfterFix": "ExprEval.ofDouble(null)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b70c36eb0dff06c81010d1569797c727712bddd", "fixCommitParentSHA1": "2ebdce20b1797858f8b20144eabfb46e3574f3e0", "bugFilePath": "core/src/main/java/org/apache/druid/math/expr/ExprEval.java", "fixPatch": "diff --git a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\nindex 2b649d4..4dad810 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n@@ -197,7 +197,7 @@\n           return this;\n         case LONG:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofLong(null);\n           } else {\n             return ExprEval.of(asLong());\n           }\n@@ -239,7 +239,7 @@\n       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofDouble(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }\n", "projectName": "druid-io.druid", "bugLineNum": 242, "bugNodeStartChar": 5501, "bugNodeLength": 17, "fixLineNum": 242, "fixNodeStartChar": 5501, "fixNodeLength": 23, "sourceBeforeFix": "ExprEval.of(null)", "sourceAfterFix": "ExprEval.ofDouble(null)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f2b73f9df1a09b9c4937130254902ffc21c8a576", "fixCommitParentSHA1": "7b262b71230015fc89ea185adff0c8011355ef5a", "bugFilePath": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java", "fixPatch": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\nindex e26653b..6434dfe 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\n@@ -627,7 +627,7 @@\n   public Response getTasks(\n       @QueryParam(\"state\") final String state,\n       @QueryParam(\"datasource\") final String dataSource,\n-      @PathParam(\"interval\") final String interval,\n+      @QueryParam(\"interval\") final String interval,\n       @QueryParam(\"max\") final Integer maxCompletedTasks,\n       @QueryParam(\"type\") final String type,\n       @Context final HttpServletRequest req\n", "projectName": "druid-io.druid", "bugLineNum": 630, "bugNodeStartChar": 20648, "bugNodeLength": 22, "fixLineNum": 630, "fixNodeStartChar": 20648, "fixNodeLength": 23, "sourceBeforeFix": "@PathParam(\"interval\")", "sourceAfterFix": "@QueryParam(\"interval\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b662fe84c50386be4404bb2e1a50cd592e1196b7", "fixCommitParentSHA1": "73780536a6eb2cb618b70ead6dfc7f282213edab", "bugFilePath": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java", "fixPatch": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java\nindex 176a3a1..6352b86 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java\n@@ -99,12 +99,12 @@\n     }\n   }\n \n-  public static URL makeWorkerURL(Worker worker, String pathFormat, Object... pathParams)\n+  public static URL makeWorkerURL(Worker worker, String pathFormat, String... pathParams)\n   {\n     Preconditions.checkArgument(pathFormat.startsWith(\"/\"), \"path must start with '/': %s\", pathFormat);\n     final String path = StringUtils.format(\n         pathFormat,\n-        Arrays.stream(pathParams).map(s -> StringUtils.urlEncode(s.toString())).toArray()\n+        Arrays.stream(pathParams).map(StringUtils::urlEncode).toArray()\n     );\n \n     try {\n", "projectName": "druid-io.druid", "bugLineNum": 102, "bugNodeStartChar": 3335, "bugNodeLength": 20, "fixLineNum": 102, "fixNodeStartChar": 3335, "fixNodeLength": 20, "sourceBeforeFix": "Object... pathParams", "sourceAfterFix": "String... pathParams"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d0fb83760eefdf9269dd0e81ca83bbf52fb139d9", "fixCommitParentSHA1": "951b36e2bc7caed992a263a5e1289414b12b39da", "bugFilePath": "extensions-core/postgresql-metadata-storage/src/main/java/org/apache/druid/metadata/storage/postgresql/PostgreSQLMetadataStorageModule.java", "fixPatch": "diff --git a/extensions-core/postgresql-metadata-storage/src/main/java/org/apache/druid/metadata/storage/postgresql/PostgreSQLMetadataStorageModule.java b/extensions-core/postgresql-metadata-storage/src/main/java/org/apache/druid/metadata/storage/postgresql/PostgreSQLMetadataStorageModule.java\nindex 6eaca55..6cbb09b 100644\n--- a/extensions-core/postgresql-metadata-storage/src/main/java/org/apache/druid/metadata/storage/postgresql/PostgreSQLMetadataStorageModule.java\n+++ b/extensions-core/postgresql-metadata-storage/src/main/java/org/apache/druid/metadata/storage/postgresql/PostgreSQLMetadataStorageModule.java\n@@ -58,7 +58,7 @@\n   {\n     super.configure(binder);\n \n-    JsonConfigProvider.bind(binder, \"druid.metadata.postgres.ssl\", PostgreSQLConnector.class);\n+    JsonConfigProvider.bind(binder, \"druid.metadata.postgres.ssl\", PostgreSQLConnectorConfig.class);\n \n     PolyBind\n         .optionBinder(binder, Key.get(MetadataStorageProvider.class))\n", "projectName": "druid-io.druid", "bugLineNum": 61, "bugNodeStartChar": 2163, "bugNodeLength": 25, "fixLineNum": 61, "fixNodeStartChar": 2163, "fixNodeLength": 31, "sourceBeforeFix": "PostgreSQLConnector.class", "sourceAfterFix": "PostgreSQLConnectorConfig.class"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "8d886e59bfc878cfbbbcd23160a7dd7c44e5fe94", "fixCommitParentSHA1": "c47032d5662b0f16d20db9e266195ea24d2f3208", "bugFilePath": "java-util/src/main/java/io/druid/java/util/common/CompressionUtils.java", "fixPatch": "diff --git a/java-util/src/main/java/io/druid/java/util/common/CompressionUtils.java b/java-util/src/main/java/io/druid/java/util/common/CompressionUtils.java\nindex 9729dc4..2fc4a37 100644\n--- a/java-util/src/main/java/io/druid/java/util/common/CompressionUtils.java\n+++ b/java-util/src/main/java/io/druid/java/util/common/CompressionUtils.java\n@@ -125,7 +125,7 @@\n     long totalSize = 0;\n     for (File file : directory.listFiles()) {\n       log.info(\"Adding file[%s] with size[%,d].  Total size so far[%,d]\", file, file.length(), totalSize);\n-      if (file.length() >= Integer.MAX_VALUE) {\n+      if (file.length() > Integer.MAX_VALUE) {\n         zipOut.finish();\n         throw new IOE(\"file[%s] too large [%,d]\", file, file.length());\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 128, "bugNodeStartChar": 4934, "bugNodeLength": 34, "fixLineNum": 128, "fixNodeStartChar": 4934, "fixNodeLength": 33, "sourceBeforeFix": "file.length() >= Integer.MAX_VALUE", "sourceAfterFix": "file.length() > Integer.MAX_VALUE"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "da3a1f61ac1f89795ba22321a2ae77f0927941c6", "fixCommitParentSHA1": "ecee3e0a2479eba734f992ca9ea086ecfb9dbaee", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java b/indexing-service/src/main/java/io/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java\nindex c1ee50b..9a0ea65 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java\n@@ -322,7 +322,7 @@\n             AppenderatorDriverAddResult addResult = driver.add(inputRow, sequenceName, committerSupplier);\n \n             if (addResult.isOk()) {\n-              if (addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment()) {\n+              if (addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()) {\n                 publishSegments(driver, publisher, committerSupplier, sequenceName);\n \n                 sequenceNumber++;\n", "projectName": "druid-io.druid", "bugLineNum": 325, "bugNodeStartChar": 12153, "bugNodeLength": 69, "fixLineNum": 325, "fixNodeStartChar": 12153, "fixNodeLength": 70, "sourceBeforeFix": "addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment()", "sourceAfterFix": "addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f3796bc81b3fa0369aa2790ec3a261a9b70b3563", "fixCommitParentSHA1": "3f7253778781223ee9290232f2528c33baa0cef1", "bugFilePath": "sql/src/main/java/io/druid/sql/avatica/AvaticaServerConfig.java", "fixPatch": "diff --git a/sql/src/main/java/io/druid/sql/avatica/AvaticaServerConfig.java b/sql/src/main/java/io/druid/sql/avatica/AvaticaServerConfig.java\nindex db8eff4..c7e4362 100644\n--- a/sql/src/main/java/io/druid/sql/avatica/AvaticaServerConfig.java\n+++ b/sql/src/main/java/io/druid/sql/avatica/AvaticaServerConfig.java\n@@ -34,7 +34,7 @@\n   public Period connectionIdleTimeout = new Period(\"PT5M\");\n \n   @JsonProperty\n-  public int maxRowsPerFrame = 100_000;\n+  public int maxRowsPerFrame = 5000;\n \n   public int getMaxConnections()\n   {\n", "projectName": "druid-io.druid", "bugLineNum": 37, "bugNodeStartChar": 1176, "bugNodeLength": 25, "fixLineNum": 37, "fixNodeStartChar": 1176, "fixNodeLength": 22, "sourceBeforeFix": "maxRowsPerFrame=100_000", "sourceAfterFix": "maxRowsPerFrame=5000"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "aafd0373be686a3111cfbb0d487529c276772264", "fixCommitParentSHA1": "5f6bdd940b35734e98f6a681c0eb48173cd5f9df", "bugFilePath": "server/src/main/java/io/druid/client/DirectDruidClient.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/DirectDruidClient.java b/server/src/main/java/io/druid/client/DirectDruidClient.java\nindex cd1705d..5399a01 100644\n--- a/server/src/main/java/io/druid/client/DirectDruidClient.java\n+++ b/server/src/main/java/io/druid/client/DirectDruidClient.java\n@@ -337,7 +337,7 @@\n         public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)\n         {\n           long stopTimeNs = System.nanoTime();\n-          long nodeTimeNs = stopTimeNs - responseStartTimeNs;\n+          long nodeTimeNs = stopTimeNs - requestStartTimeNs;\n           final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);\n           log.debug(\n               \"Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].\",\n", "projectName": "druid-io.druid", "bugLineNum": 340, "bugNodeStartChar": 13062, "bugNodeLength": 32, "fixLineNum": 340, "fixNodeStartChar": 13062, "fixNodeLength": 31, "sourceBeforeFix": "stopTimeNs - responseStartTimeNs", "sourceAfterFix": "stopTimeNs - requestStartTimeNs"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "aafd0373be686a3111cfbb0d487529c276772264", "fixCommitParentSHA1": "5f6bdd940b35734e98f6a681c0eb48173cd5f9df", "bugFilePath": "server/src/main/java/io/druid/client/DirectDruidClient.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/DirectDruidClient.java b/server/src/main/java/io/druid/client/DirectDruidClient.java\nindex cd1705d..5399a01 100644\n--- a/server/src/main/java/io/druid/client/DirectDruidClient.java\n+++ b/server/src/main/java/io/druid/client/DirectDruidClient.java\n@@ -337,7 +337,7 @@\n         public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)\n         {\n           long stopTimeNs = System.nanoTime();\n-          long nodeTimeNs = stopTimeNs - responseStartTimeNs;\n+          long nodeTimeNs = stopTimeNs - requestStartTimeNs;\n           final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);\n           log.debug(\n               \"Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].\",\n", "projectName": "druid-io.druid", "bugLineNum": 340, "bugNodeStartChar": 13062, "bugNodeLength": 32, "fixLineNum": 340, "fixNodeStartChar": 13062, "fixNodeLength": 31, "sourceBeforeFix": "stopTimeNs - responseStartTimeNs", "sourceAfterFix": "stopTimeNs - requestStartTimeNs"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e78d8584a1298e79c17a45e01f79062b55c9f703", "fixCommitParentSHA1": "054cf8a18390f4a082629456d78f8657fc0515b3", "bugFilePath": "server/src/test/java/io/druid/server/initialization/JettyQosTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/initialization/JettyQosTest.java b/server/src/test/java/io/druid/server/initialization/JettyQosTest.java\nindex 1b37f48..a7d39dd 100644\n--- a/server/src/test/java/io/druid/server/initialization/JettyQosTest.java\n+++ b/server/src/test/java/io/druid/server/initialization/JettyQosTest.java\n@@ -98,7 +98,7 @@\n     );\n   }\n \n-  @Test(timeout = 60_000L)\n+  @Test(timeout = 120_000L)\n   public void testQoS() throws Exception\n   {\n     final int fastThreads = 20;\n", "projectName": "druid-io.druid", "bugLineNum": 101, "bugNodeStartChar": 3838, "bugNodeLength": 17, "fixLineNum": 101, "fixNodeStartChar": 3838, "fixNodeLength": 18, "sourceBeforeFix": "timeout=60_000L", "sourceAfterFix": "timeout=120_000L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e78d8584a1298e79c17a45e01f79062b55c9f703", "fixCommitParentSHA1": "054cf8a18390f4a082629456d78f8657fc0515b3", "bugFilePath": "sql/src/test/java/io/druid/sql/avatica/DruidAvaticaHandlerTest.java", "fixPatch": "diff --git a/sql/src/test/java/io/druid/sql/avatica/DruidAvaticaHandlerTest.java b/sql/src/test/java/io/druid/sql/avatica/DruidAvaticaHandlerTest.java\nindex 47a79c3..282c51a 100644\n--- a/sql/src/test/java/io/druid/sql/avatica/DruidAvaticaHandlerTest.java\n+++ b/sql/src/test/java/io/druid/sql/avatica/DruidAvaticaHandlerTest.java\n@@ -370,7 +370,7 @@\n     );\n   }\n \n-  @Test(timeout = 30000)\n+  @Test(timeout = 90000)\n   public void testConcurrentQueries() throws Exception\n   {\n     final List<ListenableFuture<Integer>> futures = new ArrayList<>();\n", "projectName": "druid-io.druid", "bugLineNum": 373, "bugNodeStartChar": 12116, "bugNodeLength": 15, "fixLineNum": 373, "fixNodeStartChar": 12116, "fixNodeLength": 15, "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=90000"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "4ef3a770a316068a6748f05a2c80969c3d6ffde1", "fixCommitParentSHA1": "6697f3a62b59c0f403da9bd9c784b3f29b0950ee", "bugFilePath": "benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java", "fixPatch": "diff --git a/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java b/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java\nindex 3a2f644..b554268 100644\n--- a/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java\n+++ b/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java\n@@ -166,7 +166,8 @@\n         index.getDataInterval(),\n         VirtualColumns.EMPTY,\n         Granularities.ALL,\n-        false\n+        false,\n+        null\n     );\n \n     final List<Double> results = Sequences.toList(\n", "projectName": "druid-io.druid", "bugLineNum": 164, "bugNodeStartChar": 5995, "bugNodeLength": 144, "fixLineNum": 164, "fixNodeStartChar": 5995, "fixNodeLength": 158, "sourceBeforeFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)", "sourceAfterFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "0e056863e4b10421a51c9276f21ad6fdc4af9ff5", "fixCommitParentSHA1": "d9f423f55deb81e4f5ae2bf4334de72dfec8dd6f", "bugFilePath": "server/src/main/java/io/druid/client/DirectDruidClient.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/DirectDruidClient.java b/server/src/main/java/io/druid/client/DirectDruidClient.java\nindex 5429485..34d6569 100644\n--- a/server/src/main/java/io/druid/client/DirectDruidClient.java\n+++ b/server/src/main/java/io/druid/client/DirectDruidClient.java\n@@ -375,7 +375,7 @@\n         private long checkQueryTimeout()\n         {\n           long timeLeft = timeoutAt - System.currentTimeMillis();\n-          if (timeLeft >= 0) {\n+          if (timeLeft <= 0) {\n             String msg = StringUtils.safeFormat(\"Query[%s] url[%s] timed out.\", query.getId(), url);\n             setupResponseReadFailure(msg, null);\n             throw new RE(msg);\n", "projectName": "druid-io.druid", "bugLineNum": 378, "bugNodeStartChar": 14572, "bugNodeLength": 13, "fixLineNum": 378, "fixNodeStartChar": 14572, "fixNodeLength": 13, "sourceBeforeFix": "timeLeft >= 0", "sourceAfterFix": "timeLeft <= 0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "117c698c59a011648c50e261ff5b555e3ee236f8", "fixCommitParentSHA1": "a0f2cf05d5a3a7d71635d1f54dd0efdfe57e469a", "bugFilePath": "extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java", "fixPatch": "diff --git a/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java b/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java\nindex 416f28f..d1b3200 100644\n--- a/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java\n+++ b/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java\n@@ -120,7 +120,7 @@\n             break;\n         }\n       } else {\n-        log.error(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n+        log.debug(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 123, "bugNodeStartChar": 4178, "bugNodeLength": 65, "fixLineNum": 123, "fixNodeStartChar": 4178, "fixNodeLength": 65, "sourceBeforeFix": "log.error(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)", "sourceAfterFix": "log.debug(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "117c698c59a011648c50e261ff5b555e3ee236f8", "fixCommitParentSHA1": "a0f2cf05d5a3a7d71635d1f54dd0efdfe57e469a", "bugFilePath": "extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java", "fixPatch": "diff --git a/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java b/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java\nindex 416f28f..d1b3200 100644\n--- a/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java\n+++ b/extensions-contrib/statsd-emitter/src/main/java/io/druid/emitter/statsd/StatsDEmitter.java\n@@ -120,7 +120,7 @@\n             break;\n         }\n       } else {\n-        log.error(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n+        log.debug(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 123, "bugNodeStartChar": 4178, "bugNodeLength": 65, "fixLineNum": 123, "fixNodeStartChar": 4178, "fixNodeLength": 65, "sourceBeforeFix": "log.error(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)", "sourceAfterFix": "log.debug(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bad250fe6dd65f2e5a20f945d365fe30adfcde82", "fixCommitParentSHA1": "dfe4bda7fd68be04712c612f9b027516e920c328", "bugFilePath": "sql/src/test/java/io/druid/sql/calcite/CalciteQueryTest.java", "fixPatch": "diff --git a/sql/src/test/java/io/druid/sql/calcite/CalciteQueryTest.java b/sql/src/test/java/io/druid/sql/calcite/CalciteQueryTest.java\nindex 69a867d..8393a92 100644\n--- a/sql/src/test/java/io/druid/sql/calcite/CalciteQueryTest.java\n+++ b/sql/src/test/java/io/druid/sql/calcite/CalciteQueryTest.java\n@@ -1350,7 +1350,7 @@\n   public void testExpressionAggregations() throws Exception\n   {\n     testQuery(\n-        \"SELECT SUM(cnt * 3), LN(SUM(cnt) + SUM(m1)) FROM druid.foo\",\n+        \"SELECT SUM(cnt * 3), LN(SUM(cnt) + SUM(m1)), SUM(cnt) / 0.25 FROM druid.foo\",\n         ImmutableList.<Query>of(\n             Druids.newTimeseriesQueryBuilder()\n                   .dataSource(CalciteTests.DATASOURCE1)\n@@ -1361,14 +1361,18 @@\n                       new LongSumAggregatorFactory(\"a1\", \"cnt\", null),\n                       new DoubleSumAggregatorFactory(\"a2\", \"m1\", null)\n                   ))\n-                  .postAggregators(ImmutableList.<PostAggregator>of(\n-                      new ExpressionPostAggregator(\"a3\", \"log((\\\"a1\\\" + \\\"a2\\\"))\")\n+                  .postAggregators(ImmutableList.of(\n+                      new ExpressionPostAggregator(\"a3\", \"log((\\\"a1\\\" + \\\"a2\\\"))\"),\n+                      new ArithmeticPostAggregator(\"a4\", \"quotient\", ImmutableList.of(\n+                          new FieldAccessPostAggregator(null, \"a1\"),\n+                          new ConstantPostAggregator(null, 0.25)\n+                      ))\n                   ))\n                   .context(TIMESERIES_CONTEXT_DEFAULT)\n                   .build()\n         ),\n         ImmutableList.of(\n-            new Object[]{18L, 3.295836866004329}\n+            new Object[]{18L, 3.295836866004329, 24.0}\n         )\n     );\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 1364, "bugNodeStartChar": 51894, "bugNodeLength": 136, "fixLineNum": 1364, "fixNodeStartChar": 51894, "fixNodeLength": 367, "sourceBeforeFix": "ImmutableList.<PostAggregator>of(new ExpressionPostAggregator(\"a3\",\"log((\\\"a1\\\" + \\\"a2\\\"))\"))", "sourceAfterFix": "ImmutableList.of(new ExpressionPostAggregator(\"a3\",\"log((\\\"a1\\\" + \\\"a2\\\"))\"),new ArithmeticPostAggregator(\"a4\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a1\"),new ConstantPostAggregator(null,0.25))))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b3dae0efc352c609fba4c4e008dc9ecb97532845", "fixCommitParentSHA1": "515caa8a852f257075f17aa5d32a218e10449a15", "bugFilePath": "extensions-core/kafka-indexing-service/src/main/java/io/druid/indexing/kafka/supervisor/KafkaSupervisor.java", "fixPatch": "diff --git a/extensions-core/kafka-indexing-service/src/main/java/io/druid/indexing/kafka/supervisor/KafkaSupervisor.java b/extensions-core/kafka-indexing-service/src/main/java/io/druid/indexing/kafka/supervisor/KafkaSupervisor.java\nindex 3769fe1..9a01344 100644\n--- a/extensions-core/kafka-indexing-service/src/main/java/io/druid/indexing/kafka/supervisor/KafkaSupervisor.java\n+++ b/extensions-core/kafka-indexing-service/src/main/java/io/druid/indexing/kafka/supervisor/KafkaSupervisor.java\n@@ -313,7 +313,7 @@\n                     try {\n                       notice.handle();\n                     }\n-                    catch (Exception e) {\n+                    catch (Throwable e) {\n                       log.makeAlert(e, \"KafkaSupervisor[%s] failed to handle notice\", dataSource)\n                          .addData(\"noticeClass\", notice.getClass().getSimpleName())\n                          .emit();\n", "projectName": "druid-io.druid", "bugLineNum": 316, "bugNodeStartChar": 14542, "bugNodeLength": 11, "fixLineNum": 316, "fixNodeStartChar": 14542, "fixNodeLength": 11, "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "74e1243c7e59690434b9815b05b123585223c091", "fixCommitParentSHA1": "49c0fe0e8bbbc685a3e8281c4b9239ddf6e7d742", "bugFilePath": "extensions-core/lookups-cached-single/src/test/java/io/druid/server/lookup/PollingLookupTest.java", "fixPatch": "diff --git a/extensions-core/lookups-cached-single/src/test/java/io/druid/server/lookup/PollingLookupTest.java b/extensions-core/lookups-cached-single/src/test/java/io/druid/server/lookup/PollingLookupTest.java\nindex f73562a..1715341 100644\n--- a/extensions-core/lookups-cached-single/src/test/java/io/druid/server/lookup/PollingLookupTest.java\n+++ b/extensions-core/lookups-cached-single/src/test/java/io/druid/server/lookup/PollingLookupTest.java\n@@ -59,7 +59,7 @@\n       \"new-bad\", \"new-bar\"\n   );\n \n-  private static final long POLL_PERIOD = 100L;\n+  private static final long POLL_PERIOD = 1000L;\n \n   @JsonTypeName(\"mock\")\n   private static class MockDataFetcher implements DataFetcher\n", "projectName": "druid-io.druid", "bugLineNum": 62, "bugNodeStartChar": 2112, "bugNodeLength": 18, "fixLineNum": 62, "fixNodeStartChar": 2112, "fixNodeLength": 19, "sourceBeforeFix": "POLL_PERIOD=100L", "sourceAfterFix": "POLL_PERIOD=1000L"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "eafafce1aa058a495e214045ccbfe4d82adca240", "fixCommitParentSHA1": "ed924bf214a373a0ceae4e078157c8b8e7f674b5", "bugFilePath": "server/src/main/java/io/druid/segment/indexing/DataSchema.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/indexing/DataSchema.java b/server/src/main/java/io/druid/segment/indexing/DataSchema.java\nindex 95f7462..cb8a489 100644\n--- a/server/src/main/java/io/druid/segment/indexing/DataSchema.java\n+++ b/server/src/main/java/io/druid/segment/indexing/DataSchema.java\n@@ -113,7 +113,7 @@\n       // exclude timestamp from dimensions by default, unless explicitly included in the list of dimensions\n       if (timestampSpec != null) {\n         final String timestampColumn = timestampSpec.getTimestampColumn();\n-        if (!(dimensionsSpec.hasCustomDimensions() && dimensionsSpec.getDimensions().contains(timestampColumn))) {\n+        if (!(dimensionsSpec.hasCustomDimensions() && dimensionsSpec.getDimensionNames().contains(timestampColumn))) {\n           dimensionExclusions.add(timestampColumn);\n         }\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 116, "bugNodeStartChar": 4185, "bugNodeLength": 30, "fixLineNum": 116, "fixNodeStartChar": 4185, "fixNodeLength": 34, "sourceBeforeFix": "dimensionsSpec.getDimensions()", "sourceAfterFix": "dimensionsSpec.getDimensionNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "eafafce1aa058a495e214045ccbfe4d82adca240", "fixCommitParentSHA1": "ed924bf214a373a0ceae4e078157c8b8e7f674b5", "bugFilePath": "server/src/main/java/io/druid/segment/indexing/DataSchema.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/indexing/DataSchema.java b/server/src/main/java/io/druid/segment/indexing/DataSchema.java\nindex 95f7462..cb8a489 100644\n--- a/server/src/main/java/io/druid/segment/indexing/DataSchema.java\n+++ b/server/src/main/java/io/druid/segment/indexing/DataSchema.java\n@@ -113,7 +113,7 @@\n       // exclude timestamp from dimensions by default, unless explicitly included in the list of dimensions\n       if (timestampSpec != null) {\n         final String timestampColumn = timestampSpec.getTimestampColumn();\n-        if (!(dimensionsSpec.hasCustomDimensions() && dimensionsSpec.getDimensions().contains(timestampColumn))) {\n+        if (!(dimensionsSpec.hasCustomDimensions() && dimensionsSpec.getDimensionNames().contains(timestampColumn))) {\n           dimensionExclusions.add(timestampColumn);\n         }\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 116, "bugNodeStartChar": 4185, "bugNodeLength": 30, "fixLineNum": 116, "fixNodeStartChar": 4185, "fixNodeLength": 34, "sourceBeforeFix": "dimensionsSpec.getDimensions()", "sourceAfterFix": "dimensionsSpec.getDimensionNames()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "79958182209bbd23e048760e954e996346efa9c7", "fixCommitParentSHA1": "90f5d8cd174f2e09625503e6c02c2676f93d36a6", "bugFilePath": "processing/src/test/java/io/druid/granularity/QueryGranularityTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/granularity/QueryGranularityTest.java b/processing/src/test/java/io/druid/granularity/QueryGranularityTest.java\nindex 3caeab6..c8e0889 100644\n--- a/processing/src/test/java/io/druid/granularity/QueryGranularityTest.java\n+++ b/processing/src/test/java/io/druid/granularity/QueryGranularityTest.java\n@@ -749,7 +749,7 @@\n     Assert.assertFalse(\"expectedIter not exhausted!?\", expectedIter.hasNext());\n   }\n   \n-  @Test(timeout = 10_000L)\n+  @Test(timeout = 60_000L)\n   public void testDeadLock() throws Exception\n   {\n     final URL[] urls = ((URLClassLoader)QueryGranularity.class.getClassLoader()).getURLs();\n", "projectName": "druid-io.druid", "bugLineNum": 752, "bugNodeStartChar": 27868, "bugNodeLength": 17, "fixLineNum": 752, "fixNodeStartChar": 27868, "fixNodeLength": 17, "sourceBeforeFix": "timeout=10_000L", "sourceAfterFix": "timeout=60_000L"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "3f71a4a3020bd65a54ae8753ff8f6c5540eec97c", "fixCommitParentSHA1": "67b47c982f22b8543988701099beec27c4aa5a9c", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/overlord/autoscaling/PendingTaskBasedWorkerResourceManagementStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/overlord/autoscaling/PendingTaskBasedWorkerResourceManagementStrategy.java b/indexing-service/src/main/java/io/druid/indexing/overlord/autoscaling/PendingTaskBasedWorkerResourceManagementStrategy.java\nindex fe5fd8e..50b3e7e 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/overlord/autoscaling/PendingTaskBasedWorkerResourceManagementStrategy.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/overlord/autoscaling/PendingTaskBasedWorkerResourceManagementStrategy.java\n@@ -211,7 +211,7 @@\n     );\n \n     if (want > 0 && currValidWorkers >= maxWorkerCount) {\n-      log.warn(\"Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].\");\n+      log.warn(\"Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].\", currValidWorkers, maxWorkerCount);\n       return 0;\n     }\n     want = Math.min(want, maxWorkerCount - currValidWorkers);\n", "projectName": "druid-io.druid", "bugLineNum": 214, "bugNodeStartChar": 8247, "bugNodeLength": 94, "fixLineNum": 214, "fixNodeStartChar": 8247, "fixNodeLength": 128, "sourceBeforeFix": "log.warn(\"Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].\")", "sourceAfterFix": "log.warn(\"Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].\",currValidWorkers,maxWorkerCount)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "fixCommitParentSHA1": "8f97b1e40c578c5e21703286a6d87a155c4765f0", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/HadoopTuningConfig.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopTuningConfig.java b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopTuningConfig.java\nindex 15d04b6..8a008ed 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopTuningConfig.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopTuningConfig.java\n@@ -41,7 +41,7 @@\n   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n-  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;\n+  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 75000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;\n", "projectName": "druid-io.druid", "bugLineNum": 44, "bugNodeStartChar": 1765, "bugNodeLength": 34, "fixLineNum": 44, "fixNodeStartChar": 1765, "fixNodeLength": 34, "sourceBeforeFix": "DEFAULT_ROW_FLUSH_BOUNDARY=80000", "sourceAfterFix": "DEFAULT_ROW_FLUSH_BOUNDARY=75000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "fixCommitParentSHA1": "8f97b1e40c578c5e21703286a6d87a155c4765f0", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/common/config/TaskConfig.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/common/config/TaskConfig.java b/indexing-service/src/main/java/io/druid/indexing/common/config/TaskConfig.java\nindex 7149d3d..e3fb7be 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/common/config/TaskConfig.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/common/config/TaskConfig.java\n@@ -78,7 +78,7 @@\n     this.baseTaskDir = new File(defaultDir(baseTaskDir, \"persistent/task\"));\n     // This is usually on HDFS or similar, so we can't use java.io.tmpdir\n     this.hadoopWorkingPath = hadoopWorkingPath == null ? \"/tmp/druid-indexing\" : hadoopWorkingPath;\n-    this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary;\n+    this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary;\n     this.defaultHadoopCoordinates = defaultHadoopCoordinates == null\n                                     ? DEFAULT_DEFAULT_HADOOP_COORDINATES\n                                     : defaultHadoopCoordinates;\n", "projectName": "druid-io.druid", "bugLineNum": 81, "bugNodeStartChar": 2909, "bugNodeLength": 66, "fixLineNum": 81, "fixNodeStartChar": 2909, "fixNodeLength": 65, "sourceBeforeFix": "defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary", "sourceAfterFix": "defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "fixCommitParentSHA1": "8f97b1e40c578c5e21703286a6d87a155c4765f0", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/common/task/IndexTask.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/common/task/IndexTask.java b/indexing-service/src/main/java/io/druid/indexing/common/task/IndexTask.java\nindex 8d23b54..70ea5d7 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/common/task/IndexTask.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/common/task/IndexTask.java\n@@ -499,7 +499,7 @@\n   public static class IndexTuningConfig implements TuningConfig\n   {\n     private static final int DEFAULT_TARGET_PARTITION_SIZE = 5000000;\n-    private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 500000;\n+    private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 75000;\n     private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n     private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n \n", "projectName": "druid-io.druid", "bugLineNum": 502, "bugNodeStartChar": 16249, "bugNodeLength": 35, "fixLineNum": 502, "fixNodeStartChar": 16249, "fixNodeLength": 34, "sourceBeforeFix": "DEFAULT_ROW_FLUSH_BOUNDARY=500000", "sourceAfterFix": "DEFAULT_ROW_FLUSH_BOUNDARY=75000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "fixCommitParentSHA1": "8f97b1e40c578c5e21703286a6d87a155c4765f0", "bugFilePath": "server/src/main/java/io/druid/segment/indexing/RealtimeTuningConfig.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/indexing/RealtimeTuningConfig.java b/server/src/main/java/io/druid/segment/indexing/RealtimeTuningConfig.java\nindex 07e4212..e32a25d 100644\n--- a/server/src/main/java/io/druid/segment/indexing/RealtimeTuningConfig.java\n+++ b/server/src/main/java/io/druid/segment/indexing/RealtimeTuningConfig.java\n@@ -37,7 +37,7 @@\n  */\n public class RealtimeTuningConfig implements TuningConfig\n {\n-  private static final int defaultMaxRowsInMemory = 500000;\n+  private static final int defaultMaxRowsInMemory = 75000;\n   private static final Period defaultIntermediatePersistPeriod = new Period(\"PT10M\");\n   private static final Period defaultWindowPeriod = new Period(\"PT10M\");\n   private static final File defaultBasePersistDirectory = Files.createTempDir();\n", "projectName": "druid-io.druid", "bugLineNum": 40, "bugNodeStartChar": 1534, "bugNodeLength": 31, "fixLineNum": 40, "fixNodeStartChar": 1534, "fixNodeLength": 30, "sourceBeforeFix": "defaultMaxRowsInMemory=500000", "sourceAfterFix": "defaultMaxRowsInMemory=75000"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a0728fa8544488762715ed1ddda525469f0f90c5", "fixCommitParentSHA1": "57a3d97837f2e614dec1b875ca4111bb37852a4f", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java b/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java\nindex 621c7fe..d022a43 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java\n@@ -351,7 +351,7 @@\n   @Override\n   public Optional<ScalingStats> getScalingStats()\n   {\n-    return Optional.of(resourceManagement.getStats());\n+    return Optional.fromNullable(resourceManagement.getStats());\n   }\n \n   public ZkWorker findWorkerRunningTask(String taskId)\n", "projectName": "druid-io.druid", "bugLineNum": 354, "bugNodeStartChar": 14442, "bugNodeLength": 42, "fixLineNum": 354, "fixNodeStartChar": 14442, "fixNodeLength": 52, "sourceBeforeFix": "Optional.of(resourceManagement.getStats())", "sourceAfterFix": "Optional.fromNullable(resourceManagement.getStats())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a0728fa8544488762715ed1ddda525469f0f90c5", "fixCommitParentSHA1": "57a3d97837f2e614dec1b875ca4111bb37852a4f", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java b/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java\nindex 621c7fe..d022a43 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/overlord/RemoteTaskRunner.java\n@@ -351,7 +351,7 @@\n   @Override\n   public Optional<ScalingStats> getScalingStats()\n   {\n-    return Optional.of(resourceManagement.getStats());\n+    return Optional.fromNullable(resourceManagement.getStats());\n   }\n \n   public ZkWorker findWorkerRunningTask(String taskId)\n", "projectName": "druid-io.druid", "bugLineNum": 354, "bugNodeStartChar": 14442, "bugNodeLength": 42, "fixLineNum": 354, "fixNodeStartChar": 14442, "fixNodeLength": 52, "sourceBeforeFix": "Optional.of(resourceManagement.getStats())", "sourceAfterFix": "Optional.fromNullable(resourceManagement.getStats())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c4fde52160773dca18bad002589957880b0aeeb3", "fixCommitParentSHA1": "867d6e84b3a7b335aeb1a04c5419abd36be84919", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/overlord/ThreadPoolTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/overlord/ThreadPoolTaskRunner.java b/indexing-service/src/main/java/io/druid/indexing/overlord/ThreadPoolTaskRunner.java\nindex 19c7a14..f7ae62f 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/overlord/ThreadPoolTaskRunner.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/overlord/ThreadPoolTaskRunner.java\n@@ -144,7 +144,7 @@\n              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n-          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\");\n+          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\", task.getId());\n           error = true;\n         }\n       } else {\n", "projectName": "druid-io.druid", "bugLineNum": 147, "bugNodeStartChar": 5377, "bugNodeLength": 68, "fixLineNum": 147, "fixNodeStartChar": 5377, "fixNodeLength": 82, "sourceBeforeFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\")", "sourceAfterFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\",task.getId())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "fixCommitParentSHA1": "cac675351ed18a7fd9093b6b496e35e58d5d781a", "bugFilePath": "processing/src/main/java/io/druid/query/extraction/LookupExtractor.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\nindex 091f1f1..2de937d 100644\n--- a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n+++ b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n@@ -44,7 +44,7 @@\n    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n-  abstract String apply(@NotNull String key);\n+  public abstract String apply(@NotNull String key);\n \n   /**\n    * @param keys set of keys to apply lookup for each element\n@@ -54,7 +54,7 @@\n    * User can override this method if there is a better way to perform bulk lookup\n    */\n \n-  Map<String, String> applyAll(Iterable<String> keys)\n+  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();\n@@ -88,7 +88,7 @@\n    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n \n-  Map<String, List<String>> unapplyAll(Iterable<String> values)\n+  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();\n@@ -107,5 +107,5 @@\n    */\n \n   @Nullable\n-  abstract byte[] getCacheKey();\n+  public abstract byte[] getCacheKey();\n }\n", "projectName": "druid-io.druid", "bugLineNum": 39, "bugNodeStartChar": 1335, "bugNodeLength": 314, "fixLineNum": 39, "fixNodeStartChar": 1335, "fixNodeLength": 321, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "fixCommitParentSHA1": "cac675351ed18a7fd9093b6b496e35e58d5d781a", "bugFilePath": "processing/src/main/java/io/druid/query/extraction/LookupExtractor.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\nindex 091f1f1..2de937d 100644\n--- a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n+++ b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n@@ -44,7 +44,7 @@\n    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n-  abstract String apply(@NotNull String key);\n+  public abstract String apply(@NotNull String key);\n \n   /**\n    * @param keys set of keys to apply lookup for each element\n@@ -54,7 +54,7 @@\n    * User can override this method if there is a better way to perform bulk lookup\n    */\n \n-  Map<String, String> applyAll(Iterable<String> keys)\n+  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();\n@@ -88,7 +88,7 @@\n    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n \n-  Map<String, List<String>> unapplyAll(Iterable<String> values)\n+  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();\n@@ -107,5 +107,5 @@\n    */\n \n   @Nullable\n-  abstract byte[] getCacheKey();\n+  public abstract byte[] getCacheKey();\n }\n", "projectName": "druid-io.druid", "bugLineNum": 49, "bugNodeStartChar": 1653, "bugNodeLength": 630, "fixLineNum": 49, "fixNodeStartChar": 1653, "fixNodeLength": 637, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "fixCommitParentSHA1": "cac675351ed18a7fd9093b6b496e35e58d5d781a", "bugFilePath": "processing/src/main/java/io/druid/query/extraction/LookupExtractor.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\nindex 091f1f1..2de937d 100644\n--- a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n+++ b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n@@ -44,7 +44,7 @@\n    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n-  abstract String apply(@NotNull String key);\n+  public abstract String apply(@NotNull String key);\n \n   /**\n    * @param keys set of keys to apply lookup for each element\n@@ -54,7 +54,7 @@\n    * User can override this method if there is a better way to perform bulk lookup\n    */\n \n-  Map<String, String> applyAll(Iterable<String> keys)\n+  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();\n@@ -88,7 +88,7 @@\n    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n \n-  Map<String, List<String>> unapplyAll(Iterable<String> values)\n+  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();\n@@ -107,5 +107,5 @@\n    */\n \n   @Nullable\n-  abstract byte[] getCacheKey();\n+  public abstract byte[] getCacheKey();\n }\n", "projectName": "druid-io.druid", "bugLineNum": 83, "bugNodeStartChar": 2995, "bugNodeLength": 694, "fixLineNum": 83, "fixNodeStartChar": 2995, "fixNodeLength": 701, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "fixCommitParentSHA1": "cac675351ed18a7fd9093b6b496e35e58d5d781a", "bugFilePath": "processing/src/main/java/io/druid/query/extraction/LookupExtractor.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\nindex 091f1f1..2de937d 100644\n--- a/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n+++ b/processing/src/main/java/io/druid/query/extraction/LookupExtractor.java\n@@ -44,7 +44,7 @@\n    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n-  abstract String apply(@NotNull String key);\n+  public abstract String apply(@NotNull String key);\n \n   /**\n    * @param keys set of keys to apply lookup for each element\n@@ -54,7 +54,7 @@\n    * User can override this method if there is a better way to perform bulk lookup\n    */\n \n-  Map<String, String> applyAll(Iterable<String> keys)\n+  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();\n@@ -88,7 +88,7 @@\n    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n \n-  Map<String, List<String>> unapplyAll(Iterable<String> values)\n+  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();\n@@ -107,5 +107,5 @@\n    */\n \n   @Nullable\n-  abstract byte[] getCacheKey();\n+  public abstract byte[] getCacheKey();\n }\n", "projectName": "druid-io.druid", "bugLineNum": 103, "bugNodeStartChar": 3693, "bugNodeLength": 230, "fixLineNum": 103, "fixNodeStartChar": 3693, "fixNodeLength": 237, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "8bb08f39e3d806264edbd2854bf678f961c7157a", "fixCommitParentSHA1": "f675ca667128c612762adbfb568a600236cb7774", "bugFilePath": "indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java", "fixPatch": "diff --git a/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java b/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java\nindex dcd643d..349620e 100644\n--- a/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java\n+++ b/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java\n@@ -72,7 +72,7 @@\n   private static final String announcementsPath = String.format(\"%s/indexer/announcements/worker\", basePath);\n   private static final String tasksPath = String.format(\"%s/indexer/tasks/worker\", basePath);\n   private static final String statusPath = String.format(\"%s/indexer/status/worker\", basePath);\n-  private static final int TIMEOUT_SECONDS = 5;\n+  private static final int TIMEOUT_SECONDS = 20;\n \n   private ObjectMapper jsonMapper;\n \n@@ -453,7 +453,7 @@\n   private void doSetup() throws Exception\n   {\n     makeWorker();\n-    makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period(\"PT1S\")));\n+    makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period(\"PT5S\")));\n   }\n \n   private void makeRemoteTaskRunner(RemoteTaskRunnerConfig config) throws Exception\n", "projectName": "druid-io.druid", "bugLineNum": 75, "bugNodeStartChar": 3289, "bugNodeLength": 19, "fixLineNum": 75, "fixNodeStartChar": 3289, "fixNodeLength": 20, "sourceBeforeFix": "TIMEOUT_SECONDS=5", "sourceAfterFix": "TIMEOUT_SECONDS=20"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7cbff731e32cc33efecd994b53f35be4e9c33f29", "fixCommitParentSHA1": "2d4d3a40de2730366587df39a16958e69fbb8895", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java b/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java\nindex b048bf2..4d73602 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java\n@@ -108,7 +108,7 @@\n           throw Throwables.propagate(e);\n         }\n \n-        if (response.getStatus().getCode() / 200 == 1) {\n+        if (response.getStatus().getCode() / 100 == 2) {\n           final Map<String, Object> responseDict = jsonMapper.readValue(\n               response.getContent(),\n               new TypeReference<Map<String, Object>>()\n", "projectName": "druid-io.druid", "bugLineNum": 111, "bugNodeStartChar": 3874, "bugNodeLength": 36, "fixLineNum": 111, "fixNodeStartChar": 3874, "fixNodeLength": 36, "sourceBeforeFix": "response.getStatus().getCode() / 200", "sourceAfterFix": "response.getStatus().getCode() / 100"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "cb409ee9287a60e77a130458cc1be3fc312682f9", "fixCommitParentSHA1": "2d4d3a40de2730366587df39a16958e69fbb8895", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java b/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java\nindex b048bf2..4d73602 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/common/actions/RemoteTaskActionClient.java\n@@ -108,7 +108,7 @@\n           throw Throwables.propagate(e);\n         }\n \n-        if (response.getStatus().getCode() / 200 == 1) {\n+        if (response.getStatus().getCode() / 100 == 2) {\n           final Map<String, Object> responseDict = jsonMapper.readValue(\n               response.getContent(),\n               new TypeReference<Map<String, Object>>()\n", "projectName": "druid-io.druid", "bugLineNum": 111, "bugNodeStartChar": 3874, "bugNodeLength": 36, "fixLineNum": 111, "fixNodeStartChar": 3874, "fixNodeLength": 36, "sourceBeforeFix": "response.getStatus().getCode() / 200", "sourceAfterFix": "response.getStatus().getCode() / 100"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "e797d222c7321d2de4ae53bbaedcbba60584603f", "fixCommitParentSHA1": "020a706ac48891cc57d04b295a0ba0c1f2964661", "bugFilePath": "processing/src/main/java/io/druid/segment/incremental/OffheapIncrementalIndex.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/segment/incremental/OffheapIncrementalIndex.java b/processing/src/main/java/io/druid/segment/incremental/OffheapIncrementalIndex.java\nindex dffdd2d..a7c850b 100644\n--- a/processing/src/main/java/io/druid/segment/incremental/OffheapIncrementalIndex.java\n+++ b/processing/src/main/java/io/druid/segment/incremental/OffheapIncrementalIndex.java\n@@ -187,7 +187,7 @@\n     synchronized (this) {\n       if (!facts.containsKey(key)) {\n         if (!canAppendRow(false)) {\n-          throw new IndexSizeExceededException(getOutOfRowsReason());\n+          throw new IndexSizeExceededException(\"%s\", getOutOfRowsReason());\n         }\n       }\n       rowOffset = totalAggSize * numEntries.get();\n", "projectName": "druid-io.druid", "bugLineNum": 190, "bugNodeStartChar": 6181, "bugNodeLength": 52, "fixLineNum": 190, "fixNodeStartChar": 6181, "fixNodeLength": 58, "sourceBeforeFix": "new IndexSizeExceededException(getOutOfRowsReason())", "sourceAfterFix": "new IndexSizeExceededException(\"%s\",getOutOfRowsReason())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5f1f4424eb8d949e136d05c9f8f5364ffcd76ea2", "fixCommitParentSHA1": "ccd46088b2f183665733abb0b54ceebe3d3fcc26", "bugFilePath": "services/src/main/java/io/druid/guice/RealtimeModule.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/guice/RealtimeModule.java b/services/src/main/java/io/druid/guice/RealtimeModule.java\nindex df4c08c..784aa79 100644\n--- a/services/src/main/java/io/druid/guice/RealtimeModule.java\n+++ b/services/src/main/java/io/druid/guice/RealtimeModule.java\n@@ -65,7 +65,7 @@\n         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n-        Key.get(NoopChatHandlerProvider.class)\n+        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 68, "bugNodeStartChar": 2425, "bugNodeLength": 29, "fixLineNum": 68, "fixNodeStartChar": 2425, "fixNodeLength": 42, "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4801de62a27d4673c6596f8d8128b478d82e9ecd", "fixCommitParentSHA1": "27cd7730c8a7d59bc51012ae1d13a68f959fe7f7", "bugFilePath": "services/src/main/java/io/druid/guice/RealtimeModule.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/guice/RealtimeModule.java b/services/src/main/java/io/druid/guice/RealtimeModule.java\nindex df4c08c..784aa79 100644\n--- a/services/src/main/java/io/druid/guice/RealtimeModule.java\n+++ b/services/src/main/java/io/druid/guice/RealtimeModule.java\n@@ -65,7 +65,7 @@\n         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n-        Key.get(NoopChatHandlerProvider.class)\n+        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 68, "bugNodeStartChar": 2425, "bugNodeLength": 29, "fixLineNum": 68, "fixNodeStartChar": 2425, "fixNodeLength": 42, "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1addbe163ae49ab0b942496713471c735422e638", "fixCommitParentSHA1": "b438ca32d52078dc41ccb51f2282832fa11535dd", "bugFilePath": "server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\nindex 31385e1..d6a9dbc 100644\n--- a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n+++ b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n@@ -67,10 +67,10 @@\n                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n-                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n+                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n-                      .put(\"payload\", mapper.writeValueAsString(segment))\n+                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );\n \n", "projectName": "druid-io.druid", "bugLineNum": 73, "bugNodeStartChar": 2953, "bugNodeLength": 34, "fixLineNum": 73, "fixNodeStartChar": 2953, "fixNodeLength": 33, "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1addbe163ae49ab0b942496713471c735422e638", "fixCommitParentSHA1": "b438ca32d52078dc41ccb51f2282832fa11535dd", "bugFilePath": "server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\nindex 31385e1..d6a9dbc 100644\n--- a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n+++ b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n@@ -67,10 +67,10 @@\n                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n-                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n+                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n-                      .put(\"payload\", mapper.writeValueAsString(segment))\n+                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );\n \n", "projectName": "druid-io.druid", "bugLineNum": 73, "bugNodeStartChar": 2953, "bugNodeLength": 34, "fixLineNum": 73, "fixNodeStartChar": 2953, "fixNodeLength": 33, "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4c240da4e9e79317fe6f8f8d49a49aacfa0c7fd4", "fixCommitParentSHA1": "eb1df425b1f6183ce0f74f85e2de5a29ff14169e", "bugFilePath": "server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\nindex 31385e1..d6a9dbc 100644\n--- a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n+++ b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n@@ -67,10 +67,10 @@\n                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n-                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n+                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n-                      .put(\"payload\", mapper.writeValueAsString(segment))\n+                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );\n \n", "projectName": "druid-io.druid", "bugLineNum": 73, "bugNodeStartChar": 2953, "bugNodeLength": 34, "fixLineNum": 73, "fixNodeStartChar": 2953, "fixNodeLength": 33, "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4c240da4e9e79317fe6f8f8d49a49aacfa0c7fd4", "fixCommitParentSHA1": "eb1df425b1f6183ce0f74f85e2de5a29ff14169e", "bugFilePath": "server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\nindex 31385e1..d6a9dbc 100644\n--- a/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n+++ b/server/src/main/java/io/druid/indexer/SQLMetadataStorageUpdaterJobHandler.java\n@@ -67,10 +67,10 @@\n                       .put(\"created_date\", new DateTime().toString())\n                       .put(\"start\", segment.getInterval().getStart().toString())\n                       .put(\"end\", segment.getInterval().getEnd().toString())\n-                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? 0 : 1)\n+                      .put(\"partitioned\", (segment.getShardSpec() instanceof NoneShardSpec) ? false : true)\n                       .put(\"version\", segment.getVersion())\n                       .put(\"used\", true)\n-                      .put(\"payload\", mapper.writeValueAsString(segment))\n+                      .put(\"payload\", mapper.writeValueAsBytes(segment))\n                       .build()\n               );\n \n", "projectName": "druid-io.druid", "bugLineNum": 73, "bugNodeStartChar": 2953, "bugNodeLength": 34, "fixLineNum": 73, "fixNodeStartChar": 2953, "fixNodeLength": 33, "sourceBeforeFix": "mapper.writeValueAsString(segment)", "sourceAfterFix": "mapper.writeValueAsBytes(segment)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "31cda0b83032c8a9567446422a4228fb4886c684", "fixCommitParentSHA1": "335fbebb9404419e015dcd62d358cb531efe38d4", "bugFilePath": "server/src/main/java/io/druid/curator/discovery/CuratorServiceUtils.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/curator/discovery/CuratorServiceUtils.java b/server/src/main/java/io/druid/curator/discovery/CuratorServiceUtils.java\nindex ad77816..936581d 100644\n--- a/server/src/main/java/io/druid/curator/discovery/CuratorServiceUtils.java\n+++ b/server/src/main/java/io/druid/curator/discovery/CuratorServiceUtils.java\n@@ -21,7 +21,22 @@\n \n public class CuratorServiceUtils\n {\n-  public static String makeCanonicalServiceName(String serviceName) {\n+  /**\n+   * Replacing '/' with ':' in service names makes it easier to provide an HTTP interface using\n+   * <a href=\"http://curator.apache.org/curator-x-discovery-server/\">curator-x-discovery-server</a>\n+   *\n+   * This method is marked protected because it should never be used outside of the io.druid.curator.discovery\n+   * package. If you are tempted to use this method anywhere else you are most likely doing something wrong.\n+   * Mapping the actual service name to the name used within curator should be left to {@link CuratorServiceAnnouncer}\n+   * and {@link ServerDiscoveryFactory}\n+   *\n+   * @see io.druid.curator.discovery.CuratorServiceAnnouncer\n+   * @see io.druid.curator.discovery.ServerDiscoveryFactory\n+   *\n+   * @param serviceName\n+   * @return\n+   */\n+  protected static String makeCanonicalServiceName(String serviceName) {\n     return serviceName.replaceAll(\"/\", \":\");\n   }\n }\n", "projectName": "druid-io.druid", "bugLineNum": 24, "bugNodeStartChar": 889, "bugNodeLength": 116, "fixLineNum": 24, "fixNodeStartChar": 889, "fixNodeLength": 879, "sourceBeforeFix": "9", "sourceAfterFix": "12"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "fixCommitParentSHA1": "024c5eed355c37aa28718017dc5e889136266869", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..f6a139f 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -276,7 +276,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -358,7 +358,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -392,7 +392,7 @@\n   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n-      queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+      queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();\n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 279, "bugNodeStartChar": 10175, "bugNodeLength": 49, "fixLineNum": 279, "fixNodeStartChar": 10175, "fixNodeLength": 51, "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "fixCommitParentSHA1": "024c5eed355c37aa28718017dc5e889136266869", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..f6a139f 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -276,7 +276,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -358,7 +358,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -392,7 +392,7 @@\n   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n-      queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+      queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();\n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 361, "bugNodeStartChar": 12797, "bugNodeLength": 49, "fixLineNum": 361, "fixNodeStartChar": 12797, "fixNodeLength": 51, "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "fixCommitParentSHA1": "024c5eed355c37aa28718017dc5e889136266869", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..f6a139f 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -276,7 +276,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -358,7 +358,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -392,7 +392,7 @@\n   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n-      queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+      queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();\n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 395, "bugNodeStartChar": 13877, "bugNodeLength": 49, "fixLineNum": 395, "fixNodeStartChar": 13877, "fixNodeLength": 51, "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "fixCommitParentSHA1": "024c5eed355c37aa28718017dc5e889136266869", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..f6a139f 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -276,7 +276,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -358,7 +358,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -392,7 +392,7 @@\n   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n-      queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+      queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();\n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 723, "bugNodeStartChar": 23094, "bugNodeLength": 47, "fixLineNum": 723, "fixNodeStartChar": 23094, "fixNodeLength": 49, "sourceBeforeFix": "waitYieldLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitYieldLatch.await(1000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "fixCommitParentSHA1": "024c5eed355c37aa28718017dc5e889136266869", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..f6a139f 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -276,7 +276,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -358,7 +358,7 @@\n         )\n     );\n \n-    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -392,7 +392,7 @@\n   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n-      queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n+      queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();\n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await(1000, TimeUnit.MILLISECONDS);\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 736, "bugNodeStartChar": 23447, "bugNodeLength": 42, "fixLineNum": 736, "fixNodeStartChar": 23447, "fixNodeLength": 44, "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await(1000,TimeUnit.MILLISECONDS)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "313d81ca2fb88a734f46e0e144d5a1a44ee1c4cd", "fixCommitParentSHA1": "d4ca805cb915e064a7b82fc9f0f3cafb6a947179", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..34f1df0 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await();\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await();\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await();\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 723, "bugNodeStartChar": 23094, "bugNodeLength": 47, "fixLineNum": 723, "fixNodeStartChar": 23094, "fixNodeLength": 22, "sourceBeforeFix": "waitYieldLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitYieldLatch.await()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "313d81ca2fb88a734f46e0e144d5a1a44ee1c4cd", "fixCommitParentSHA1": "d4ca805cb915e064a7b82fc9f0f3cafb6a947179", "bugFilePath": "server/src/test/java/io/druid/server/coordination/ServerManagerTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\nindex 72a15d9..34f1df0 100644\n--- a/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n+++ b/server/src/test/java/io/druid/server/coordination/ServerManagerTest.java\n@@ -315,7 +315,7 @@\n         )\n     );\n \n-    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n+    queryNotifyLatch.await();\n \n     Assert.assertEquals(1, factory.getSegmentReferences().size());\n \n@@ -720,7 +720,7 @@\n       notifyLatch.countDown();\n \n       try {\n-        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n+        waitYieldLatch.await();\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);\n@@ -733,7 +733,7 @@\n         public OutType get()\n         {\n           try {\n-            waitLatch.await(25, TimeUnit.MILLISECONDS);\n+            waitLatch.await();\n           }\n           catch (Exception e) {\n             throw Throwables.propagate(e);\n", "projectName": "druid-io.druid", "bugLineNum": 736, "bugNodeStartChar": 23447, "bugNodeLength": 42, "fixLineNum": 736, "fixNodeStartChar": 23447, "fixNodeLength": 17, "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "de4cd039b300659a2c4d6b8451615fc64f114cf1", "fixCommitParentSHA1": "69b75b6e4b8f1d757c1fee426d95ee07b9c5c2cc", "bugFilePath": "server/src/main/java/io/druid/client/FilteredServerViewProvider.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/FilteredServerViewProvider.java b/server/src/main/java/io/druid/client/FilteredServerViewProvider.java\nindex f9b2010..4570c7e 100644\n--- a/server/src/main/java/io/druid/client/FilteredServerViewProvider.java\n+++ b/server/src/main/java/io/druid/client/FilteredServerViewProvider.java\n@@ -24,7 +24,7 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.inject.Provider;\n \n-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = FilteredBatchServerViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = FilteredSingleServerViewProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = FilteredBatchServerViewProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 27, "bugNodeStartChar": 1073, "bugNodeLength": 35, "fixLineNum": 27, "fixNodeStartChar": 1073, "fixNodeLength": 37, "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "FilteredBatchServerViewProvider.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "de4cd039b300659a2c4d6b8451615fc64f114cf1", "fixCommitParentSHA1": "69b75b6e4b8f1d757c1fee426d95ee07b9c5c2cc", "bugFilePath": "server/src/main/java/io/druid/client/ServerInventoryViewProvider.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java b/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java\nindex fa48fba..f506d03 100644\n--- a/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java\n+++ b/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java\n@@ -25,7 +25,7 @@\n \n /**\n  */\n-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = BatchServerInventoryViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = SingleServerInventoryProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = BatchServerInventoryViewProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 28, "bugNodeStartChar": 1074, "bugNodeLength": 35, "fixLineNum": 28, "fixNodeStartChar": 1074, "fixNodeLength": 38, "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "BatchServerInventoryViewProvider.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ba442b98826fc79e2ff536c269eb7f8df9916b3a", "fixCommitParentSHA1": "69b75b6e4b8f1d757c1fee426d95ee07b9c5c2cc", "bugFilePath": "server/src/main/java/io/druid/client/FilteredServerViewProvider.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/FilteredServerViewProvider.java b/server/src/main/java/io/druid/client/FilteredServerViewProvider.java\nindex f9b2010..4570c7e 100644\n--- a/server/src/main/java/io/druid/client/FilteredServerViewProvider.java\n+++ b/server/src/main/java/io/druid/client/FilteredServerViewProvider.java\n@@ -24,7 +24,7 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.inject.Provider;\n \n-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = FilteredBatchServerViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = FilteredSingleServerViewProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = FilteredBatchServerViewProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 27, "bugNodeStartChar": 1073, "bugNodeLength": 35, "fixLineNum": 27, "fixNodeStartChar": 1073, "fixNodeLength": 37, "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "FilteredBatchServerViewProvider.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ba442b98826fc79e2ff536c269eb7f8df9916b3a", "fixCommitParentSHA1": "69b75b6e4b8f1d757c1fee426d95ee07b9c5c2cc", "bugFilePath": "server/src/main/java/io/druid/client/ServerInventoryViewProvider.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java b/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java\nindex fa48fba..f506d03 100644\n--- a/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java\n+++ b/server/src/main/java/io/druid/client/ServerInventoryViewProvider.java\n@@ -25,7 +25,7 @@\n \n /**\n  */\n-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = BatchServerInventoryViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = SingleServerInventoryProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = BatchServerInventoryViewProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 28, "bugNodeStartChar": 1074, "bugNodeLength": 35, "fixLineNum": 28, "fixNodeStartChar": 1074, "fixNodeLength": 38, "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "BatchServerInventoryViewProvider.class"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2c62b9e6e3665b68d8859ce0db6b39cc927b94f3", "fixCommitParentSHA1": "8045d0309f0cea2fd8565c8e45f864d18ca1e4b7", "bugFilePath": "server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java b/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java\nindex cf85087..b8ad2e2 100644\n--- a/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java\n+++ b/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java\n@@ -32,7 +32,7 @@\n {\n   @JsonProperty\n   @Min(0)\n-  private int numConnections = 5;\n+  private int numConnections = 20;\n \n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");\n", "projectName": "druid-io.druid", "bugLineNum": 35, "bugNodeStartChar": 1094, "bugNodeLength": 18, "fixLineNum": 35, "fixNodeStartChar": 1094, "fixNodeLength": 19, "sourceBeforeFix": "numConnections=5", "sourceAfterFix": "numConnections=20"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "42cf20c9f1842cc9257fe271b7b8bc4367795b57", "fixCommitParentSHA1": "3b29e778668dbacd322fa05c7c8e0407c0c1524a", "bugFilePath": "server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java b/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java\nindex cf85087..b8ad2e2 100644\n--- a/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java\n+++ b/server/src/main/java/io/druid/guice/http/DruidHttpClientConfig.java\n@@ -32,7 +32,7 @@\n {\n   @JsonProperty\n   @Min(0)\n-  private int numConnections = 5;\n+  private int numConnections = 20;\n \n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");\n", "projectName": "druid-io.druid", "bugLineNum": 35, "bugNodeStartChar": 1094, "bugNodeLength": 18, "fixLineNum": 35, "fixNodeStartChar": 1094, "fixNodeLength": 19, "sourceBeforeFix": "numConnections=5", "sourceAfterFix": "numConnections=20"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c2727dd063ee825119f627fdcf51a26a21d43fd5", "fixCommitParentSHA1": "1f171a2b8600b96d8349993d3916b8340d54b049", "bugFilePath": "server/src/main/java/io/druid/db/SQLMetadataConnector.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/db/SQLMetadataConnector.java b/server/src/main/java/io/druid/db/SQLMetadataConnector.java\nindex bfcff59..23e25e2 100644\n--- a/server/src/main/java/io/druid/db/SQLMetadataConnector.java\n+++ b/server/src/main/java/io/druid/db/SQLMetadataConnector.java\n@@ -77,7 +77,7 @@\n \n   protected abstract boolean tableExists(Handle handle, final String tableName);\n \n-  public void createTable(final IDBI dbi, final String tableName, final List<String> sql)\n+  public void createTable(final IDBI dbi, final String tableName, final Iterable<String> sql)\n   {\n     try {\n       dbi.withHandle(\n", "projectName": "druid-io.druid", "bugLineNum": 80, "bugNodeStartChar": 2963, "bugNodeLength": 12, "fixLineNum": 80, "fixNodeStartChar": 2963, "fixNodeLength": 16, "sourceBeforeFix": "List<String>", "sourceAfterFix": "Iterable<String>"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "290107ce7b8d1d3401e26c44b860d61b78094d0c", "fixCommitParentSHA1": "21ac3f2aab1eb7b83533daf9201f0bc2ab0078c3", "bugFilePath": "processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java b/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java\nindex 4a449ef..df8bdb5 100644\n--- a/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java\n+++ b/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java\n@@ -69,8 +69,7 @@\n     if (parseSpec == null) {\n       this.parseSpec = new JSONParseSpec(\n           timestampSpec,\n-          new DimensionsSpec(dimensions, dimensionExclusions, spatialDimensions),\n-          JSONParseSpec.JSON\n+          new DimensionsSpec(dimensions, dimensionExclusions, spatialDimensions)\n       );\n     } else {\n       this.parseSpec = parseSpec;\n", "projectName": "druid-io.druid", "bugLineNum": 70, "bugNodeStartChar": 2790, "bugNodeLength": 162, "fixLineNum": 70, "fixNodeStartChar": 2790, "fixNodeLength": 132, "sourceBeforeFix": "new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "290107ce7b8d1d3401e26c44b860d61b78094d0c", "fixCommitParentSHA1": "21ac3f2aab1eb7b83533daf9201f0bc2ab0078c3", "bugFilePath": "processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java b/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java\nindex 570045d..67d5fdc 100644\n--- a/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java\n+++ b/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java\n@@ -59,8 +59,7 @@\n     ProtoBufInputRowParser parser = new ProtoBufInputRowParser(\n         new JSONParseSpec(\n             new TimestampSpec(\"timestamp\", \"iso\"),\n-            new DimensionsSpec(Arrays.asList(DIMENSIONS), Arrays.<String>asList(), null),\n-            JSONParseSpec.JSON\n+            new DimensionsSpec(Arrays.asList(DIMENSIONS), Arrays.<String>asList(), null)\n         ),\n         \"prototest.desc\",\n         null, null, null, null\n", "projectName": "druid-io.druid", "bugLineNum": 60, "bugNodeStartChar": 1816, "bugNodeLength": 200, "fixLineNum": 60, "fixNodeStartChar": 1816, "fixNodeLength": 168, "sourceBeforeFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"iso\"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"iso\"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "290107ce7b8d1d3401e26c44b860d61b78094d0c", "fixCommitParentSHA1": "21ac3f2aab1eb7b83533daf9201f0bc2ab0078c3", "bugFilePath": "server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java b/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\nindex d212342..5fca643 100644\n--- a/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\n+++ b/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\n@@ -61,8 +61,7 @@\n                         Arrays.asList(\"dim1\", \"dim2\"),\n                         null,\n                         null\n-                    ),\n-                    JSONParseSpec.JSON\n+                    )\n                 ),\n                 null, null, null, null\n             ),\n", "projectName": "druid-io.druid", "bugLineNum": 55, "bugNodeStartChar": 2010, "bugNodeLength": 382, "fixLineNum": 55, "fixNodeStartChar": 2010, "fixNodeLength": 342, "sourceBeforeFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(Arrays.asList(\"dim1\",\"dim2\"),null,null),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(Arrays.asList(\"dim1\",\"dim2\"),null,null))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "290107ce7b8d1d3401e26c44b860d61b78094d0c", "fixCommitParentSHA1": "21ac3f2aab1eb7b83533daf9201f0bc2ab0078c3", "bugFilePath": "server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java b/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java\nindex ff4808f..3a9cdd3 100644\n--- a/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java\n+++ b/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java\n@@ -125,8 +125,7 @@\n           {\n             return new JSONParseSpec(\n                 new TimestampSpec(\"timestamp\", \"auto\"),\n-                new DimensionsSpec(null, null, null),\n-                JSONParseSpec.JSON\n+                new DimensionsSpec(null, null, null)\n             );\n           }\n \n", "projectName": "druid-io.druid", "bugLineNum": 126, "bugNodeStartChar": 4125, "bugNodeLength": 177, "fixLineNum": 126, "fixNodeStartChar": 4125, "fixNodeLength": 141, "sourceBeforeFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(null,null,null))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "c25203e1409ed2a2474fd267259e85e1a67e7942", "fixCommitParentSHA1": "8f7f497b55b3223229ab478eab41ede9d63a2691", "bugFilePath": "processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java b/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java\nindex 4a449ef..df8bdb5 100644\n--- a/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java\n+++ b/processing/src/main/java/io/druid/data/input/ProtoBufInputRowParser.java\n@@ -69,8 +69,7 @@\n     if (parseSpec == null) {\n       this.parseSpec = new JSONParseSpec(\n           timestampSpec,\n-          new DimensionsSpec(dimensions, dimensionExclusions, spatialDimensions),\n-          JSONParseSpec.JSON\n+          new DimensionsSpec(dimensions, dimensionExclusions, spatialDimensions)\n       );\n     } else {\n       this.parseSpec = parseSpec;\n", "projectName": "druid-io.druid", "bugLineNum": 70, "bugNodeStartChar": 2790, "bugNodeLength": 162, "fixLineNum": 70, "fixNodeStartChar": 2790, "fixNodeLength": 132, "sourceBeforeFix": "new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "c25203e1409ed2a2474fd267259e85e1a67e7942", "fixCommitParentSHA1": "8f7f497b55b3223229ab478eab41ede9d63a2691", "bugFilePath": "processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java b/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java\nindex 570045d..67d5fdc 100644\n--- a/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java\n+++ b/processing/src/test/java/io/druid/data/input/ProtoBufInputRowParserTest.java\n@@ -59,8 +59,7 @@\n     ProtoBufInputRowParser parser = new ProtoBufInputRowParser(\n         new JSONParseSpec(\n             new TimestampSpec(\"timestamp\", \"iso\"),\n-            new DimensionsSpec(Arrays.asList(DIMENSIONS), Arrays.<String>asList(), null),\n-            JSONParseSpec.JSON\n+            new DimensionsSpec(Arrays.asList(DIMENSIONS), Arrays.<String>asList(), null)\n         ),\n         \"prototest.desc\",\n         null, null, null, null\n", "projectName": "druid-io.druid", "bugLineNum": 60, "bugNodeStartChar": 1816, "bugNodeLength": 200, "fixLineNum": 60, "fixNodeStartChar": 1816, "fixNodeLength": 168, "sourceBeforeFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"iso\"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"iso\"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "c25203e1409ed2a2474fd267259e85e1a67e7942", "fixCommitParentSHA1": "8f7f497b55b3223229ab478eab41ede9d63a2691", "bugFilePath": "server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java b/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\nindex d212342..5fca643 100644\n--- a/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\n+++ b/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\n@@ -61,8 +61,7 @@\n                         Arrays.asList(\"dim1\", \"dim2\"),\n                         null,\n                         null\n-                    ),\n-                    JSONParseSpec.JSON\n+                    )\n                 ),\n                 null, null, null, null\n             ),\n", "projectName": "druid-io.druid", "bugLineNum": 55, "bugNodeStartChar": 2010, "bugNodeLength": 382, "fixLineNum": 55, "fixNodeStartChar": 2010, "fixNodeLength": 342, "sourceBeforeFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(Arrays.asList(\"dim1\",\"dim2\"),null,null),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(Arrays.asList(\"dim1\",\"dim2\"),null,null))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "c25203e1409ed2a2474fd267259e85e1a67e7942", "fixCommitParentSHA1": "8f7f497b55b3223229ab478eab41ede9d63a2691", "bugFilePath": "server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java b/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java\nindex ff4808f..3a9cdd3 100644\n--- a/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java\n+++ b/server/src/test/java/io/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java\n@@ -125,8 +125,7 @@\n           {\n             return new JSONParseSpec(\n                 new TimestampSpec(\"timestamp\", \"auto\"),\n-                new DimensionsSpec(null, null, null),\n-                JSONParseSpec.JSON\n+                new DimensionsSpec(null, null, null)\n             );\n           }\n \n", "projectName": "druid-io.druid", "bugLineNum": 126, "bugNodeStartChar": 4125, "bugNodeLength": 177, "fixLineNum": 126, "fixNodeStartChar": 4125, "fixNodeLength": 141, "sourceBeforeFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)", "sourceAfterFix": "new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(null,null,null))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "575d51b0ce4182cb6712001e121358c103dfd26c", "fixCommitParentSHA1": "4c23a5e9f655cf32b22048c96e49c94098d1f345", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/overlord/setup/FillCapacityWorkerSelectStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/overlord/setup/FillCapacityWorkerSelectStrategy.java b/indexing-service/src/main/java/io/druid/indexing/overlord/setup/FillCapacityWorkerSelectStrategy.java\nindex a72da10..7458030 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/overlord/setup/FillCapacityWorkerSelectStrategy.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/overlord/setup/FillCapacityWorkerSelectStrategy.java\n@@ -47,7 +47,7 @@\n     this.config = config;\n   }\n \n-  public Optional<ZkWorker> findWorkerForTask(\n+  public Optional<ImmutableZkWorker> findWorkerForTask(\n       final ImmutableMap<String, ImmutableZkWorker> zkWorkers,\n       final Task task\n   )\n", "projectName": "druid-io.druid", "bugLineNum": 50, "bugNodeStartChar": 1737, "bugNodeLength": 18, "fixLineNum": 50, "fixNodeStartChar": 1737, "fixNodeLength": 27, "sourceBeforeFix": "Optional<ZkWorker>", "sourceAfterFix": "Optional<ImmutableZkWorker>"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "296b9236fd1544637ae57d022c9e1dd9758577d0", "fixCommitParentSHA1": "a3a2c8b86f6abb319e4be31d71d69c4dc5e6b594", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\nindex 6dd97b9..e562f7f 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n@@ -448,7 +448,7 @@\n       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n-            \"path\", indexOutURI.getPath()\n+            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());\n", "projectName": "druid-io.druid", "bugLineNum": 451, "bugNodeStartChar": 15151, "bugNodeLength": 21, "fixLineNum": 451, "fixNodeStartChar": 15151, "fixNodeLength": 22, "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "296b9236fd1544637ae57d022c9e1dd9758577d0", "fixCommitParentSHA1": "a3a2c8b86f6abb319e4be31d71d69c4dc5e6b594", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\nindex 6dd97b9..e562f7f 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n@@ -448,7 +448,7 @@\n       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n-            \"path\", indexOutURI.getPath()\n+            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());\n", "projectName": "druid-io.druid", "bugLineNum": 451, "bugNodeStartChar": 15151, "bugNodeLength": 21, "fixLineNum": 451, "fixNodeStartChar": 15151, "fixNodeLength": 22, "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2dd62979bbcb4172fc801c918a750e6fcc4ec648", "fixCommitParentSHA1": "7cfe86b7bc0d7136418972ddacae4e2a38cc6380", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\nindex 6dd97b9..e562f7f 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n@@ -448,7 +448,7 @@\n       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n-            \"path\", indexOutURI.getPath()\n+            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());\n", "projectName": "druid-io.druid", "bugLineNum": 451, "bugNodeStartChar": 15151, "bugNodeLength": 21, "fixLineNum": 451, "fixNodeStartChar": 15151, "fixNodeLength": 22, "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2dd62979bbcb4172fc801c918a750e6fcc4ec648", "fixCommitParentSHA1": "7cfe86b7bc0d7136418972ddacae4e2a38cc6380", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\nindex 6dd97b9..e562f7f 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n@@ -448,7 +448,7 @@\n       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n-            \"path\", indexOutURI.getPath()\n+            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());\n", "projectName": "druid-io.druid", "bugLineNum": 451, "bugNodeStartChar": 15151, "bugNodeLength": 21, "fixLineNum": 451, "fixNodeStartChar": 15151, "fixNodeLength": 22, "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "32942def7634511d8dd8fb5c5040e4168521bfb5", "fixCommitParentSHA1": "a73670ee7b5daa535d03932ea1a856e5540211db", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\nindex ca496d3..94adbc0 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n@@ -177,7 +177,7 @@\n       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n-          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n+          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 180, "bugNodeStartChar": 6525, "bugNodeLength": 72, "fixLineNum": 180, "fixNodeStartChar": 6525, "fixNodeLength": 69, "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "32942def7634511d8dd8fb5c5040e4168521bfb5", "fixCommitParentSHA1": "a73670ee7b5daa535d03932ea1a856e5540211db", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\nindex ca496d3..94adbc0 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n@@ -177,7 +177,7 @@\n       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n-          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n+          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 180, "bugNodeStartChar": 6525, "bugNodeLength": 72, "fixLineNum": 180, "fixNodeStartChar": 6525, "fixNodeLength": 69, "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f006de8639371e844451db9024bcf4c8823b45b6", "fixCommitParentSHA1": "a73670ee7b5daa535d03932ea1a856e5540211db", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\nindex ca496d3..94adbc0 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n@@ -177,7 +177,7 @@\n       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n-          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n+          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 180, "bugNodeStartChar": 6525, "bugNodeLength": 72, "fixLineNum": 180, "fixNodeStartChar": 6525, "fixNodeLength": 69, "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f006de8639371e844451db9024bcf4c8823b45b6", "fixCommitParentSHA1": "a73670ee7b5daa535d03932ea1a856e5540211db", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\nindex ca496d3..94adbc0 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/firehose/IngestSegmentFirehoseFactory.java\n@@ -177,7 +177,7 @@\n       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n-          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n+          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 180, "bugNodeStartChar": 6525, "bugNodeLength": 72, "fixLineNum": 180, "fixNodeStartChar": 6525, "fixNodeLength": 69, "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "0209b7e44013c785bb6a7ed3e1c4bf6c842cb918", "fixCommitParentSHA1": "7d592939c59ab258f8e92b92ca2b3d8effdade50", "bugFilePath": "services/src/main/java/io/druid/cli/CliBridge.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/cli/CliBridge.java b/services/src/main/java/io/druid/cli/CliBridge.java\nindex 6da1ec2..a1f893f 100644\n--- a/services/src/main/java/io/druid/cli/CliBridge.java\n+++ b/services/src/main/java/io/druid/cli/CliBridge.java\n@@ -71,7 +71,7 @@\n           public void configure(Binder binder)\n           {\n             binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/bridge\");\n-            binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8081);\n+            binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8089);\n \n             ConfigProvider.bind(binder, BridgeCuratorConfig.class);\n \n", "projectName": "druid-io.druid", "bugLineNum": 74, "bugNodeStartChar": 2687, "bugNodeLength": 72, "fixLineNum": 74, "fixNodeStartChar": 2687, "fixNodeLength": 72, "sourceBeforeFix": "binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8081)", "sourceAfterFix": "binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8089)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3261fd879a17118dbf8664ceced117a9ecd9378a", "fixCommitParentSHA1": "72eb64a40c7a7f337bcf36928b24e8052d87ceb3", "bugFilePath": "processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java\nindex 22816b5..e15f109 100644\n--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java\n+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java\n@@ -355,7 +355,7 @@\n \n             while (aggsIter.hasNext()) {\n               final AggregatorFactory factory = aggsIter.next();\n-              Object agg = event.remove(factory.getName());\n+              Object agg = event.get(factory.getName());\n               if (agg != null) {\n                 event.put(factory.getName(), factory.deserialize(agg));\n               }\n", "projectName": "druid-io.druid", "bugLineNum": 358, "bugNodeStartChar": 12491, "bugNodeLength": 31, "fixLineNum": 358, "fixNodeStartChar": 12491, "fixNodeLength": 28, "sourceBeforeFix": "event.remove(factory.getName())", "sourceAfterFix": "event.get(factory.getName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3261fd879a17118dbf8664ceced117a9ecd9378a", "fixCommitParentSHA1": "72eb64a40c7a7f337bcf36928b24e8052d87ceb3", "bugFilePath": "processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java\nindex 22816b5..e15f109 100644\n--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java\n+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryQueryToolChest.java\n@@ -355,7 +355,7 @@\n \n             while (aggsIter.hasNext()) {\n               final AggregatorFactory factory = aggsIter.next();\n-              Object agg = event.remove(factory.getName());\n+              Object agg = event.get(factory.getName());\n               if (agg != null) {\n                 event.put(factory.getName(), factory.deserialize(agg));\n               }\n", "projectName": "druid-io.druid", "bugLineNum": 358, "bugNodeStartChar": 12491, "bugNodeLength": 31, "fixLineNum": 358, "fixNodeStartChar": 12491, "fixNodeLength": 28, "sourceBeforeFix": "event.remove(factory.getName())", "sourceAfterFix": "event.get(factory.getName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "197c80a69418a88d3baa4d0b2c8b056c7b411320", "fixCommitParentSHA1": "12f4147df57593736fb69c17cfad3089eee7f543", "bugFilePath": "processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java b/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java\nindex e86716e..39b1bcb 100644\n--- a/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java\n+++ b/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java\n@@ -76,7 +76,7 @@\n   @Override\n   public void progressSection(String section, String message)\n   {\n-    Stopwatch sectionWatch = sections.remove(section);\n+    Stopwatch sectionWatch = sections.get(section);\n     if (sectionWatch == null) {\n       throw new ISE(\"[%s]: Cannot progress tracker for [%s]. Nothing started.\", progressName, section);\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 79, "bugNodeStartChar": 2333, "bugNodeLength": 24, "fixLineNum": 79, "fixNodeStartChar": 2333, "fixNodeLength": 21, "sourceBeforeFix": "sections.remove(section)", "sourceAfterFix": "sections.get(section)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "197c80a69418a88d3baa4d0b2c8b056c7b411320", "fixCommitParentSHA1": "12f4147df57593736fb69c17cfad3089eee7f543", "bugFilePath": "processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java b/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java\nindex e86716e..39b1bcb 100644\n--- a/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java\n+++ b/processing/src/main/java/io/druid/segment/LoggingProgressIndicator.java\n@@ -76,7 +76,7 @@\n   @Override\n   public void progressSection(String section, String message)\n   {\n-    Stopwatch sectionWatch = sections.remove(section);\n+    Stopwatch sectionWatch = sections.get(section);\n     if (sectionWatch == null) {\n       throw new ISE(\"[%s]: Cannot progress tracker for [%s]. Nothing started.\", progressName, section);\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 79, "bugNodeStartChar": 2333, "bugNodeLength": 24, "fixLineNum": 79, "fixNodeStartChar": 2333, "fixNodeLength": 21, "sourceBeforeFix": "sections.remove(section)", "sourceAfterFix": "sections.get(section)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "fixCommitParentSHA1": "05b791376be55ddf3667450a763fd9635e41cb5c", "bugFilePath": "server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\nindex da0fd00..f596535 100644\n--- a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n+++ b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n@@ -174,7 +174,7 @@\n     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n@@ -206,7 +206,7 @@\n     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 177, "bugNodeStartChar": 5643, "bugNodeLength": 41, "fixLineNum": 177, "fixNodeStartChar": 5643, "fixNodeLength": 28, "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "fixCommitParentSHA1": "05b791376be55ddf3667450a763fd9635e41cb5c", "bugFilePath": "server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\nindex da0fd00..f596535 100644\n--- a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n+++ b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n@@ -174,7 +174,7 @@\n     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n@@ -206,7 +206,7 @@\n     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 177, "bugNodeStartChar": 5643, "bugNodeLength": 41, "fixLineNum": 177, "fixNodeStartChar": 5643, "fixNodeLength": 28, "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "fixCommitParentSHA1": "05b791376be55ddf3667450a763fd9635e41cb5c", "bugFilePath": "server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\nindex da0fd00..f596535 100644\n--- a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n+++ b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n@@ -174,7 +174,7 @@\n     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n@@ -206,7 +206,7 @@\n     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 209, "bugNodeStartChar": 6495, "bugNodeLength": 41, "fixLineNum": 209, "fixNodeStartChar": 6495, "fixNodeLength": 28, "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "fixCommitParentSHA1": "05b791376be55ddf3667450a763fd9635e41cb5c", "bugFilePath": "server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\nindex da0fd00..f596535 100644\n--- a/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n+++ b/server/src/main/java/io/druid/server/coordinator/LoadQueuePeon.java\n@@ -174,7 +174,7 @@\n     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n@@ -206,7 +206,7 @@\n     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n-          currentlyProcessing.addCallback(callback);\n+          holder.addCallback(callback);\n         }\n         return;\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 209, "bugNodeStartChar": 6495, "bugNodeLength": 41, "fixLineNum": 209, "fixNodeStartChar": 6495, "fixNodeLength": 28, "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "179170224d6f8b547a7b6ba2c2fe3d1b17bde65b", "fixCommitParentSHA1": "f547049929ff97decdad6fbb5730aac8f41463a2", "bugFilePath": "server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java b/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java\nindex 0da1a9a..bf1b575 100644\n--- a/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java\n+++ b/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java\n@@ -356,7 +356,7 @@\n               log.makeAlert(e, \"Failed to persist merged index[%s]\", schema.getDataSource())\n                  .addData(\"interval\", interval)\n                  .emit();\n-              if (!shuttingDown) {\n+              if (shuttingDown) {\n                 // We're trying to shut down, and this segment failed to push. Let's just get rid of it.\n                 // This call will also delete possibly-partially-written files, so we don't need to do it explicitly.\n                 abandonSegment(truncatedTime, sink);\n", "projectName": "druid-io.druid", "bugLineNum": 359, "bugNodeStartChar": 12962, "bugNodeLength": 13, "fixLineNum": 359, "fixNodeStartChar": 12962, "fixNodeLength": 12, "sourceBeforeFix": "!shuttingDown", "sourceAfterFix": "shuttingDown"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f1409f751a94e935f116cf2eb3732b56c128b501", "fixCommitParentSHA1": "d4cf2763ac7491309ab5775526755b29e5e67823", "bugFilePath": "server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java b/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java\nindex 8d52bcc..d911aef 100644\n--- a/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java\n+++ b/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java\n@@ -38,7 +38,7 @@\n       @JsonProperty(\"maxPriority\") Integer maxPriority\n   )\n   {\n-    this.minPriority = minPriority == null ? 1 : minPriority;\n+    this.minPriority = minPriority == null ? 0 : minPriority;\n     this.maxPriority = maxPriority == null ? 1 : maxPriority;\n   }\n \n", "projectName": "druid-io.druid", "bugLineNum": 41, "bugNodeStartChar": 1446, "bugNodeLength": 37, "fixLineNum": 41, "fixNodeStartChar": 1446, "fixNodeLength": 37, "sourceBeforeFix": "minPriority == null ? 1 : minPriority", "sourceAfterFix": "minPriority == null ? 0 : minPriority"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f1409f751a94e935f116cf2eb3732b56c128b501", "fixCommitParentSHA1": "d4cf2763ac7491309ab5775526755b29e5e67823", "bugFilePath": "server/src/main/java/io/druid/server/router/TieredBrokerConfig.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/router/TieredBrokerConfig.java b/server/src/main/java/io/druid/server/router/TieredBrokerConfig.java\nindex c23a15d..7d8d5bb 100644\n--- a/server/src/main/java/io/druid/server/router/TieredBrokerConfig.java\n+++ b/server/src/main/java/io/druid/server/router/TieredBrokerConfig.java\n@@ -60,7 +60,7 @@\n   @NotNull\n   private List<TieredBrokerSelectorStrategy> strategies = Arrays.asList(\n       new TimeBoundaryTieredBrokerSelectorStrategy(),\n-      new PriorityTieredBrokerSelectorStrategy(1, 1)\n+      new PriorityTieredBrokerSelectorStrategy(0, 1)\n   );\n \n   // tier, <bard, numThreads>\n", "projectName": "druid-io.druid", "bugLineNum": 63, "bugNodeStartChar": 1816, "bugNodeLength": 46, "fixLineNum": 63, "fixNodeStartChar": 1816, "fixNodeLength": 46, "sourceBeforeFix": "new PriorityTieredBrokerSelectorStrategy(1,1)", "sourceAfterFix": "new PriorityTieredBrokerSelectorStrategy(0,1)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d4cf2763ac7491309ab5775526755b29e5e67823", "fixCommitParentSHA1": "8877ee97143e1eed99029be50bc62cc25c86d7e5", "bugFilePath": "server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java b/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java\nindex c815065..5c2320f 100644\n--- a/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java\n+++ b/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java\n@@ -82,7 +82,7 @@\n           }\n         },\n         factory,\n-        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(1, 1))\n+        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(0, 1))\n     );\n     EasyMock.expect(factory.createSelector(EasyMock.<String>anyObject())).andReturn(selector).atLeastOnce();\n     EasyMock.replay(factory);\n", "projectName": "druid-io.druid", "bugLineNum": 85, "bugNodeStartChar": 2964, "bugNodeLength": 46, "fixLineNum": 85, "fixNodeStartChar": 2964, "fixNodeLength": 46, "sourceBeforeFix": "new PriorityTieredBrokerSelectorStrategy(1,1)", "sourceAfterFix": "new PriorityTieredBrokerSelectorStrategy(0,1)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "8877ee97143e1eed99029be50bc62cc25c86d7e5", "fixCommitParentSHA1": "b3eb4cc5dac2d3fcee87394bf841a243bf0ccbe4", "bugFilePath": "server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java b/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java\nindex 5c2320f..c815065 100644\n--- a/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java\n+++ b/server/src/test/java/io/druid/server/router/TieredBrokerHostSelectorTest.java\n@@ -82,7 +82,7 @@\n           }\n         },\n         factory,\n-        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(0, 1))\n+        Arrays.asList(new TimeBoundaryTieredBrokerSelectorStrategy(), new PriorityTieredBrokerSelectorStrategy(1, 1))\n     );\n     EasyMock.expect(factory.createSelector(EasyMock.<String>anyObject())).andReturn(selector).atLeastOnce();\n     EasyMock.replay(factory);\n", "projectName": "druid-io.druid", "bugLineNum": 85, "bugNodeStartChar": 2964, "bugNodeLength": 46, "fixLineNum": 85, "fixNodeStartChar": 2964, "fixNodeLength": 46, "sourceBeforeFix": "new PriorityTieredBrokerSelectorStrategy(0,1)", "sourceAfterFix": "new PriorityTieredBrokerSelectorStrategy(1,1)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b3eb4cc5dac2d3fcee87394bf841a243bf0ccbe4", "fixCommitParentSHA1": "627447c6f8715a61d5b91a58b0312ad7c61bc028", "bugFilePath": "server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java b/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java\nindex d911aef..8d52bcc 100644\n--- a/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java\n+++ b/server/src/main/java/io/druid/server/router/PriorityTieredBrokerSelectorStrategy.java\n@@ -38,7 +38,7 @@\n       @JsonProperty(\"maxPriority\") Integer maxPriority\n   )\n   {\n-    this.minPriority = minPriority == null ? 0 : minPriority;\n+    this.minPriority = minPriority == null ? 1 : minPriority;\n     this.maxPriority = maxPriority == null ? 1 : maxPriority;\n   }\n \n", "projectName": "druid-io.druid", "bugLineNum": 41, "bugNodeStartChar": 1446, "bugNodeLength": 37, "fixLineNum": 41, "fixNodeStartChar": 1446, "fixNodeLength": 37, "sourceBeforeFix": "minPriority == null ? 0 : minPriority", "sourceAfterFix": "minPriority == null ? 1 : minPriority"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7803ca07e7c9e291003fab3d1878945dc2a76eee", "fixCommitParentSHA1": "f7319620c4d4d57e2dafd5ed95d2b7ce26490174", "bugFilePath": "services/src/main/java/io/druid/guice/RealtimeModule.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/guice/RealtimeModule.java b/services/src/main/java/io/druid/guice/RealtimeModule.java\nindex 6770b65..7bcce15 100644\n--- a/services/src/main/java/io/druid/guice/RealtimeModule.java\n+++ b/services/src/main/java/io/druid/guice/RealtimeModule.java\n@@ -65,7 +65,7 @@\n         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n-        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n+        Key.get(NoopChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 68, "bugNodeStartChar": 2526, "bugNodeLength": 42, "fixLineNum": 68, "fixNodeStartChar": 2526, "fixNodeLength": 29, "sourceBeforeFix": "ServiceAnnouncingChatHandlerProvider.class", "sourceAfterFix": "NoopChatHandlerProvider.class"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "df7a39a682e60326a8db7542da54d8f2308e5df1", "fixCommitParentSHA1": "7aef463457a74bb8b68fb28dacd506af182141b9", "bugFilePath": "processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java b/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\nindex 7eb83b7..9dcd136 100644\n--- a/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\n+++ b/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\n@@ -508,7 +508,7 @@\n                               if (multiValueRow.size() == 0) {\n                                 return null;\n                               } else if (multiValueRow.size() == 1) {\n-                                return columnVals.lookupName(multiValueRow.get(1));\n+                                return columnVals.lookupName(multiValueRow.get(0));\n                               } else {\n                                 final String[] strings = new String[multiValueRow.size()];\n                                 for (int i = 0 ; i < multiValueRow.size() ; i++) {\n", "projectName": "druid-io.druid", "bugLineNum": 511, "bugNodeStartChar": 18779, "bugNodeLength": 20, "fixLineNum": 511, "fixNodeStartChar": 18779, "fixNodeLength": 20, "sourceBeforeFix": "multiValueRow.get(1)", "sourceAfterFix": "multiValueRow.get(0)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "bf71d079f373a5f8761acb186472f89259612b5d", "fixCommitParentSHA1": "0f3c474dee7f0fd7725865c491eec6064316cbfb", "bugFilePath": "services/src/main/java/io/druid/cli/CliPeon.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/cli/CliPeon.java b/services/src/main/java/io/druid/cli/CliPeon.java\nindex d4eb022..d85e974 100644\n--- a/services/src/main/java/io/druid/cli/CliPeon.java\n+++ b/services/src/main/java/io/druid/cli/CliPeon.java\n@@ -111,7 +111,7 @@\n                 binder,\n                 \"druid.indexer.task.chathandler.type\",\n                 Key.get(ChatHandlerProvider.class),\n-                Key.get(NoopChatHandlerProvider.class)\n+                Key.get(ServiceAnnouncingChatHandlerProvider.class)\n             );\n             final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n                 binder, Key.get(ChatHandlerProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 114, "bugNodeStartChar": 4485, "bugNodeLength": 29, "fixLineNum": 114, "fixNodeStartChar": 4485, "fixNodeLength": 42, "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "bf71d079f373a5f8761acb186472f89259612b5d", "fixCommitParentSHA1": "0f3c474dee7f0fd7725865c491eec6064316cbfb", "bugFilePath": "services/src/main/java/io/druid/guice/RealtimeModule.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/guice/RealtimeModule.java b/services/src/main/java/io/druid/guice/RealtimeModule.java\nindex 7bcce15..6770b65 100644\n--- a/services/src/main/java/io/druid/guice/RealtimeModule.java\n+++ b/services/src/main/java/io/druid/guice/RealtimeModule.java\n@@ -65,7 +65,7 @@\n         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n-        Key.get(NoopChatHandlerProvider.class)\n+        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)\n", "projectName": "druid-io.druid", "bugLineNum": 68, "bugNodeStartChar": 2526, "bugNodeLength": 29, "fixLineNum": 68, "fixNodeStartChar": 2526, "fixNodeLength": 42, "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "27c47507803729774b54977844d54495cfcb5b3b", "fixCommitParentSHA1": "bdfeccd092b3e0155715d338d851452f90c2eba9", "bugFilePath": "server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java b/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java\nindex 5f17601..2ab8265 100644\n--- a/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java\n+++ b/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java\n@@ -196,8 +196,9 @@\n   }\n \n   @Test\n-  public void testValidity(){\n-    for(int i=Integer.MIN_VALUE;i<=Integer.MAX_VALUE;i++){\n+  public void testValidity()\n+  {\n+    for (int i = Integer.MIN_VALUE; i < Integer.MAX_VALUE; i++) {\n       {\n         int partitionNum = Math.abs((int) ((long) i % 2));\n         if(partitionNum != 0 && partitionNum != 1){\n", "projectName": "druid-io.druid", "bugLineNum": 200, "bugNodeStartChar": 5541, "bugNodeLength": 20, "fixLineNum": 201, "fixNodeStartChar": 5548, "fixNodeLength": 21, "sourceBeforeFix": "i <= Integer.MAX_VALUE", "sourceAfterFix": "i < Integer.MAX_VALUE"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5955ecf032d678aa27095bd5193e24ed865b32b4", "fixCommitParentSHA1": "187b2beb47ce960f6cb01712a760218267168e68", "bugFilePath": "processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java b/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java\nindex ac85b75..90175c5 100644\n--- a/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java\n+++ b/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java\n@@ -150,7 +150,7 @@\n           @Override\n           public AggregatorFactory apply(String input)\n           {\n-            return new JavaScriptAggregatorFactory(name, Arrays.asList(input), fnAggregate, fnReset, fnCombine);\n+            return new JavaScriptAggregatorFactory(input, Arrays.asList(input), fnAggregate, fnReset, fnCombine);\n           }\n         }\n     );\n", "projectName": "druid-io.druid", "bugLineNum": 153, "bugNodeStartChar": 5020, "bugNodeLength": 92, "fixLineNum": 153, "fixNodeStartChar": 5020, "fixNodeLength": 93, "sourceBeforeFix": "new JavaScriptAggregatorFactory(name,Arrays.asList(input),fnAggregate,fnReset,fnCombine)", "sourceAfterFix": "new JavaScriptAggregatorFactory(input,Arrays.asList(input),fnAggregate,fnReset,fnCombine)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5955ecf032d678aa27095bd5193e24ed865b32b4", "fixCommitParentSHA1": "187b2beb47ce960f6cb01712a760218267168e68", "bugFilePath": "processing/src/main/java/io/druid/query/aggregation/cardinality/CardinalityAggregatorFactory.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/aggregation/cardinality/CardinalityAggregatorFactory.java b/processing/src/main/java/io/druid/query/aggregation/cardinality/CardinalityAggregatorFactory.java\nindex eacfede..4c79b07 100644\n--- a/processing/src/main/java/io/druid/query/aggregation/cardinality/CardinalityAggregatorFactory.java\n+++ b/processing/src/main/java/io/druid/query/aggregation/cardinality/CardinalityAggregatorFactory.java\n@@ -156,7 +156,7 @@\n           @Override\n           public AggregatorFactory apply(String input)\n           {\n-            return new CardinalityAggregatorFactory(name, Arrays.asList(input), byRow);\n+            return new CardinalityAggregatorFactory(input, Arrays.asList(input), byRow);\n           }\n         }\n     );\n", "projectName": "druid-io.druid", "bugLineNum": 159, "bugNodeStartChar": 4649, "bugNodeLength": 67, "fixLineNum": 159, "fixNodeStartChar": 4649, "fixNodeLength": 68, "sourceBeforeFix": "new CardinalityAggregatorFactory(name,Arrays.asList(input),byRow)", "sourceAfterFix": "new CardinalityAggregatorFactory(input,Arrays.asList(input),byRow)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "642897dca3aabcd38f0aec1047ba593599cf03da", "fixCommitParentSHA1": "2ee1defce937d736054cd6935b1906f5f93f8d1a", "bugFilePath": "processing/src/main/java/io/druid/query/dimension/DefaultDimensionSpec.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/dimension/DefaultDimensionSpec.java b/processing/src/main/java/io/druid/query/dimension/DefaultDimensionSpec.java\nindex 78fb2b4..ee5ee67 100644\n--- a/processing/src/main/java/io/druid/query/dimension/DefaultDimensionSpec.java\n+++ b/processing/src/main/java/io/druid/query/dimension/DefaultDimensionSpec.java\n@@ -79,7 +79,7 @@\n   @Override\n   public boolean preservesOrdering()\n   {\n-    return false;\n+    return true;\n   }\n \n   @Override\n", "projectName": "druid-io.druid", "bugLineNum": 82, "bugNodeStartChar": 2184, "bugNodeLength": 13, "fixLineNum": 82, "fixNodeStartChar": 2184, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "642897dca3aabcd38f0aec1047ba593599cf03da", "fixCommitParentSHA1": "2ee1defce937d736054cd6935b1906f5f93f8d1a", "bugFilePath": "processing/src/main/java/io/druid/query/topn/PooledTopNAlgorithm.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/topn/PooledTopNAlgorithm.java b/processing/src/main/java/io/druid/query/topn/PooledTopNAlgorithm.java\nindex 437b056..ea4fd37 100644\n--- a/processing/src/main/java/io/druid/query/topn/PooledTopNAlgorithm.java\n+++ b/processing/src/main/java/io/druid/query/topn/PooledTopNAlgorithm.java\n@@ -116,7 +116,7 @@\n   {\n     final TopNMetricSpecBuilder<int[]> arrayProvider = params.getArrayProvider();\n \n-    if (query.getDimensionSpec().preservesOrdering()) {\n+    if (!query.getDimensionSpec().preservesOrdering()) {\n       return arrayProvider.build();\n     }\n \n", "projectName": "druid-io.druid", "bugLineNum": 119, "bugNodeStartChar": 4017, "bugNodeLength": 44, "fixLineNum": 119, "fixNodeStartChar": 4017, "fixNodeLength": 45, "sourceBeforeFix": "query.getDimensionSpec().preservesOrdering()", "sourceAfterFix": "!query.getDimensionSpec().preservesOrdering()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "9ec7c71e0fa14638eb82f170e7a57433b2951417", "fixCommitParentSHA1": "61ceadbd579408106c9ea79ab58bc6ed9119b557", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/HadoopIngestionSpec.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopIngestionSpec.java b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopIngestionSpec.java\nindex 985b3f1..2ebd1b7 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopIngestionSpec.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopIngestionSpec.java\n@@ -139,7 +139,7 @@\n           dataSource,\n           new StringInputRowParser(\n               dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec, dimensionExclusions),\n-              null, null, null\n+              null, null, null, null\n           ),\n           rollupSpec == null\n           ? new AggregatorFactory[]{}\n", "projectName": "druid-io.druid", "bugLineNum": 140, "bugNodeStartChar": 6241, "bugNodeLength": 166, "fixLineNum": 140, "fixNodeStartChar": 6241, "fixNodeLength": 172, "sourceBeforeFix": "new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null)", "sourceAfterFix": "new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null,null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "9ec7c71e0fa14638eb82f170e7a57433b2951417", "fixCommitParentSHA1": "61ceadbd579408106c9ea79ab58bc6ed9119b557", "bugFilePath": "processing/src/test/java/io/druid/segment/TestIndex.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/segment/TestIndex.java b/processing/src/test/java/io/druid/segment/TestIndex.java\nindex 434042b..9582321 100644\n--- a/processing/src/test/java/io/druid/segment/TestIndex.java\n+++ b/processing/src/test/java/io/druid/segment/TestIndex.java\n@@ -182,7 +182,7 @@\n                     \"\\t\",\n                     Arrays.asList(COLUMNS)\n                 ),\n-                null, null, null\n+                null, null, null, null\n             );\n             boolean runOnce = false;\n             int lineCount = 0;\n", "projectName": "druid-io.druid", "bugLineNum": 178, "bugNodeStartChar": 5902, "bugNodeLength": 331, "fixLineNum": 178, "fixNodeStartChar": 5902, "fixNodeLength": 337, "sourceBeforeFix": "new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec(\"ts\",\"iso\"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),\"\\t\",Arrays.asList(COLUMNS)),null,null,null)", "sourceAfterFix": "new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec(\"ts\",\"iso\"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),\"\\t\",Arrays.asList(COLUMNS)),null,null,null,null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "9ec7c71e0fa14638eb82f170e7a57433b2951417", "fixCommitParentSHA1": "61ceadbd579408106c9ea79ab58bc6ed9119b557", "bugFilePath": "server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java b/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\nindex 2da5854..19c104a 100644\n--- a/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\n+++ b/server/src/test/java/io/druid/segment/realtime/FireDepartmentTest.java\n@@ -63,7 +63,7 @@\n                         null\n                     )\n                 ),\n-                null, null, null\n+                null, null, null, null\n             ),\n             new AggregatorFactory[]{\n                 new CountAggregatorFactory(\"count\")\n", "projectName": "druid-io.druid", "bugLineNum": 54, "bugNodeStartChar": 1968, "bugNodeLength": 432, "fixLineNum": 54, "fixNodeStartChar": 1968, "fixNodeLength": 438, "sourceBeforeFix": "new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(Arrays.asList(\"dim1\",\"dim2\"),null,null)),null,null,null)", "sourceAfterFix": "new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"timestamp\",\"auto\"),new DimensionsSpec(Arrays.asList(\"dim1\",\"dim2\"),null,null)),null,null,null,null)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3fd651c2359bc2e22de741942493590d9f1be6fc", "fixCommitParentSHA1": "9ad0da0794e5c93e7d08772d68696892776c5e8b", "bugFilePath": "server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\nindex 63d3384..afd2551 100644\n--- a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n+++ b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n@@ -49,7 +49,7 @@\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"2012-01-01/2012-12-31\")).build(), now));\n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"1000-01-01/2012-12-31\")).build(), now));\n-    Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n+    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n     );\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n-    Assert.assertFalse(\n+    Assert.assertTrue(\n         rule.appliesTo(\n             builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                    .build(),\n", "projectName": "druid-io.druid", "bugLineNum": 52, "bugNodeStartChar": 1914, "bugNodeLength": 104, "fixLineNum": 52, "fixNodeStartChar": 1914, "fixNodeLength": 103, "sourceBeforeFix": "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(),now))", "sourceAfterFix": "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(),now))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fd651c2359bc2e22de741942493590d9f1be6fc", "fixCommitParentSHA1": "9ad0da0794e5c93e7d08772d68696892776c5e8b", "bugFilePath": "server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\nindex 63d3384..afd2551 100644\n--- a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n+++ b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n@@ -49,7 +49,7 @@\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"2012-01-01/2012-12-31\")).build(), now));\n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"1000-01-01/2012-12-31\")).build(), now));\n-    Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n+    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n     );\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n-    Assert.assertFalse(\n+    Assert.assertTrue(\n         rule.appliesTo(\n             builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                    .build(),\n", "projectName": "druid-io.druid", "bugLineNum": 52, "bugNodeStartChar": 1914, "bugNodeLength": 104, "fixLineNum": 52, "fixNodeStartChar": 1914, "fixNodeLength": 103, "sourceBeforeFix": "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(),now))", "sourceAfterFix": "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(),now))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3fd651c2359bc2e22de741942493590d9f1be6fc", "fixCommitParentSHA1": "9ad0da0794e5c93e7d08772d68696892776c5e8b", "bugFilePath": "server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\nindex 63d3384..afd2551 100644\n--- a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n+++ b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n@@ -49,7 +49,7 @@\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"2012-01-01/2012-12-31\")).build(), now));\n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"1000-01-01/2012-12-31\")).build(), now));\n-    Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n+    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n     );\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n-    Assert.assertFalse(\n+    Assert.assertTrue(\n         rule.appliesTo(\n             builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                    .build(),\n", "projectName": "druid-io.druid", "bugLineNum": 67, "bugNodeStartChar": 2358, "bugNodeLength": 182, "fixLineNum": 67, "fixNodeStartChar": 2358, "fixNodeLength": 181, "sourceBeforeFix": "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))", "sourceAfterFix": "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fd651c2359bc2e22de741942493590d9f1be6fc", "fixCommitParentSHA1": "9ad0da0794e5c93e7d08772d68696892776c5e8b", "bugFilePath": "server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\nindex 63d3384..afd2551 100644\n--- a/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n+++ b/server/src/test/java/io/druid/server/coordinator/rules/PeriodLoadRuleTest.java\n@@ -49,7 +49,7 @@\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"2012-01-01/2012-12-31\")).build(), now));\n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"1000-01-01/2012-12-31\")).build(), now));\n-    Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n+    Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(\"0500-01-01/2100-12-31\")).build(), now));\n   }\n \n   @Test\n@@ -64,7 +64,7 @@\n     );\n \n     Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusWeeks(1), now)).build(), now));\n-    Assert.assertFalse(\n+    Assert.assertTrue(\n         rule.appliesTo(\n             builder.interval(new Interval(now.minusDays(1), now.plusDays(1)))\n                    .build(),\n", "projectName": "druid-io.druid", "bugLineNum": 67, "bugNodeStartChar": 2358, "bugNodeLength": 182, "fixLineNum": 67, "fixNodeStartChar": 2358, "fixNodeLength": 181, "sourceBeforeFix": "Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))", "sourceAfterFix": "Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5d105e75982c88ffc958ef9de14266ae8522a0f9", "fixCommitParentSHA1": "5e982752515dd52745d11d6dce6d6038dc482348", "bugFilePath": "server/src/main/java/io/druid/client/CachingQueryRunner.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/CachingQueryRunner.java b/server/src/main/java/io/druid/client/CachingQueryRunner.java\nindex d92db64..ad2718e 100644\n--- a/server/src/main/java/io/druid/client/CachingQueryRunner.java\n+++ b/server/src/main/java/io/druid/client/CachingQueryRunner.java\n@@ -82,7 +82,7 @@\n \n     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n-        && cacheConfig.isPopulateCache();\n+        && cacheConfig.isUseCache();\n \n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {\n", "projectName": "druid-io.druid", "bugLineNum": 85, "bugNodeStartChar": 2889, "bugNodeLength": 29, "fixLineNum": 85, "fixNodeStartChar": 2889, "fixNodeLength": 24, "sourceBeforeFix": "cacheConfig.isPopulateCache()", "sourceAfterFix": "cacheConfig.isUseCache()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5d105e75982c88ffc958ef9de14266ae8522a0f9", "fixCommitParentSHA1": "5e982752515dd52745d11d6dce6d6038dc482348", "bugFilePath": "server/src/main/java/io/druid/client/CachingQueryRunner.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/CachingQueryRunner.java b/server/src/main/java/io/druid/client/CachingQueryRunner.java\nindex d92db64..ad2718e 100644\n--- a/server/src/main/java/io/druid/client/CachingQueryRunner.java\n+++ b/server/src/main/java/io/druid/client/CachingQueryRunner.java\n@@ -82,7 +82,7 @@\n \n     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n-        && cacheConfig.isPopulateCache();\n+        && cacheConfig.isUseCache();\n \n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {\n", "projectName": "druid-io.druid", "bugLineNum": 85, "bugNodeStartChar": 2889, "bugNodeLength": 29, "fixLineNum": 85, "fixNodeStartChar": 2889, "fixNodeLength": 24, "sourceBeforeFix": "cacheConfig.isPopulateCache()", "sourceAfterFix": "cacheConfig.isUseCache()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "625a5418d2035a5598c46c33fe99405f71ab3c64", "fixCommitParentSHA1": "1ca61237c10e891682da45d9a3014409320ac4a9", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java\nindex 78f1fdd..530d155 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java\n@@ -348,7 +348,7 @@\n     {\n \n       if (config.get(\"mapred.job.tracker\").equals(\"local\") || determineIntervals) {\n-        return 1;\n+        return 0;\n       } else {\n         return reducerLookup.get(interval);\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 351, "bugNodeStartChar": 13119, "bugNodeLength": 9, "fixLineNum": 351, "fixNodeStartChar": 13119, "fixNodeLength": 9, "sourceBeforeFix": "return 1; ", "sourceAfterFix": "return 0; "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ecfa6bd1b16a9e2a5a80cf4dd3ff1146c48353c2", "fixCommitParentSHA1": "22c3296aa3fa12b453b7cd20e221d7ea9a305f5f", "bugFilePath": "processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java b/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java\nindex f848f3c..8c91b8f 100644\n--- a/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java\n+++ b/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java\n@@ -94,6 +94,7 @@\n       DimensionAndMetricValueExtractor arg1Val = retVals.get(dimensionValue);\n \n       if (arg1Val != null) {\n+        // size of map = aggregattor + topNDim + postAgg (If sorting is done on post agg field)\n         Map<String, Object> retVal = new LinkedHashMap<String, Object>(aggregations.size() + 2);\n \n         retVal.put(dimension, dimensionValue);\n@@ -102,7 +103,7 @@\n           retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n         }\n         for (PostAggregator postAgg : postAggregations) {\n-          if (postAgg.getName().equals(topNMetricName)) {\n+          if (postAgg.getName().equalsIgnoreCase(topNMetricName)) {\n             retVal.put(postAgg.getName(), postAgg.compute(retVal));\n           }\n         }\n", "projectName": "druid-io.druid", "bugLineNum": 105, "bugNodeStartChar": 3994, "bugNodeLength": 40, "fixLineNum": 105, "fixNodeStartChar": 3994, "fixNodeLength": 50, "sourceBeforeFix": "postAgg.getName().equals(topNMetricName)", "sourceAfterFix": "postAgg.getName().equalsIgnoreCase(topNMetricName)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ecfa6bd1b16a9e2a5a80cf4dd3ff1146c48353c2", "fixCommitParentSHA1": "22c3296aa3fa12b453b7cd20e221d7ea9a305f5f", "bugFilePath": "processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java b/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java\nindex f848f3c..8c91b8f 100644\n--- a/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java\n+++ b/processing/src/main/java/io/druid/query/topn/TopNBinaryFn.java\n@@ -94,6 +94,7 @@\n       DimensionAndMetricValueExtractor arg1Val = retVals.get(dimensionValue);\n \n       if (arg1Val != null) {\n+        // size of map = aggregattor + topNDim + postAgg (If sorting is done on post agg field)\n         Map<String, Object> retVal = new LinkedHashMap<String, Object>(aggregations.size() + 2);\n \n         retVal.put(dimension, dimensionValue);\n@@ -102,7 +103,7 @@\n           retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n         }\n         for (PostAggregator postAgg : postAggregations) {\n-          if (postAgg.getName().equals(topNMetricName)) {\n+          if (postAgg.getName().equalsIgnoreCase(topNMetricName)) {\n             retVal.put(postAgg.getName(), postAgg.compute(retVal));\n           }\n         }\n", "projectName": "druid-io.druid", "bugLineNum": 105, "bugNodeStartChar": 3994, "bugNodeLength": 40, "fixLineNum": 105, "fixNodeStartChar": 3994, "fixNodeLength": 50, "sourceBeforeFix": "postAgg.getName().equals(topNMetricName)", "sourceAfterFix": "postAgg.getName().equalsIgnoreCase(topNMetricName)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ecfa6bd1b16a9e2a5a80cf4dd3ff1146c48353c2", "fixCommitParentSHA1": "22c3296aa3fa12b453b7cd20e221d7ea9a305f5f", "bugFilePath": "processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java b/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java\nindex a806c79..bfe142e 100644\n--- a/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java\n+++ b/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java\n@@ -76,7 +76,7 @@\n     }\n \n     for (PostAggregator postAgg : postAggs) {\n-      if (postAgg.getName().equals(metricName)) {\n+      if (postAgg.getName().equalsIgnoreCase(metricName)) {\n         metricValues.put(postAgg.getName(), postAgg.compute(metricValues));\n         break;\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 79, "bugNodeStartChar": 2438, "bugNodeLength": 36, "fixLineNum": 79, "fixNodeStartChar": 2438, "fixNodeLength": 46, "sourceBeforeFix": "postAgg.getName().equals(metricName)", "sourceAfterFix": "postAgg.getName().equalsIgnoreCase(metricName)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ecfa6bd1b16a9e2a5a80cf4dd3ff1146c48353c2", "fixCommitParentSHA1": "22c3296aa3fa12b453b7cd20e221d7ea9a305f5f", "bugFilePath": "processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java b/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java\nindex a806c79..bfe142e 100644\n--- a/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java\n+++ b/processing/src/main/java/io/druid/query/topn/TopNNumericResultBuilder.java\n@@ -76,7 +76,7 @@\n     }\n \n     for (PostAggregator postAgg : postAggs) {\n-      if (postAgg.getName().equals(metricName)) {\n+      if (postAgg.getName().equalsIgnoreCase(metricName)) {\n         metricValues.put(postAgg.getName(), postAgg.compute(metricValues));\n         break;\n       }\n", "projectName": "druid-io.druid", "bugLineNum": 79, "bugNodeStartChar": 2438, "bugNodeLength": 36, "fixLineNum": 79, "fixNodeStartChar": 2438, "fixNodeLength": 46, "sourceBeforeFix": "postAgg.getName().equals(metricName)", "sourceAfterFix": "postAgg.getName().equalsIgnoreCase(metricName)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "fixCommitParentSHA1": "706143715114bb097c4175c8ff978defa77c7057", "bugFilePath": "s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java", "fixPatch": "diff --git a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\nindex 6206da8..c13d22d 100644\n--- a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n+++ b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n@@ -62,7 +62,7 @@\n   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -82,7 +82,7 @@\n   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -103,7 +103,7 @@\n   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mover.move(\n         sourceSegment,\n", "projectName": "druid-io.druid", "bugLineNum": 65, "bugNodeStartChar": 2223, "bugNodeLength": 36, "fixLineNum": 65, "fixNodeStartChar": 2223, "fixNodeLength": 69, "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "fixCommitParentSHA1": "706143715114bb097c4175c8ff978defa77c7057", "bugFilePath": "s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java", "fixPatch": "diff --git a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\nindex 6206da8..c13d22d 100644\n--- a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n+++ b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n@@ -62,7 +62,7 @@\n   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -82,7 +82,7 @@\n   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -103,7 +103,7 @@\n   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mover.move(\n         sourceSegment,\n", "projectName": "druid-io.druid", "bugLineNum": 85, "bugNodeStartChar": 3202, "bugNodeLength": 36, "fixLineNum": 85, "fixNodeStartChar": 3202, "fixNodeLength": 69, "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "fixCommitParentSHA1": "706143715114bb097c4175c8ff978defa77c7057", "bugFilePath": "s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java", "fixPatch": "diff --git a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\nindex 6206da8..c13d22d 100644\n--- a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n+++ b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n@@ -62,7 +62,7 @@\n   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -82,7 +82,7 @@\n   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -103,7 +103,7 @@\n   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mover.move(\n         sourceSegment,\n", "projectName": "druid-io.druid", "bugLineNum": 106, "bugNodeStartChar": 4248, "bugNodeLength": 36, "fixLineNum": 106, "fixNodeStartChar": 4248, "fixNodeLength": 69, "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "fixCommitParentSHA1": "cfe2466e4914bb3377c907e735777afb60dffea0", "bugFilePath": "s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java", "fixPatch": "diff --git a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\nindex 6206da8..c13d22d 100644\n--- a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n+++ b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n@@ -62,7 +62,7 @@\n   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -82,7 +82,7 @@\n   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -103,7 +103,7 @@\n   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mover.move(\n         sourceSegment,\n", "projectName": "druid-io.druid", "bugLineNum": 65, "bugNodeStartChar": 2223, "bugNodeLength": 36, "fixLineNum": 65, "fixNodeStartChar": 2223, "fixNodeLength": 69, "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "fixCommitParentSHA1": "cfe2466e4914bb3377c907e735777afb60dffea0", "bugFilePath": "s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java", "fixPatch": "diff --git a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\nindex 6206da8..c13d22d 100644\n--- a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n+++ b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n@@ -62,7 +62,7 @@\n   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -82,7 +82,7 @@\n   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -103,7 +103,7 @@\n   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mover.move(\n         sourceSegment,\n", "projectName": "druid-io.druid", "bugLineNum": 85, "bugNodeStartChar": 3202, "bugNodeLength": 36, "fixLineNum": 85, "fixNodeStartChar": 3202, "fixNodeLength": 69, "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "fixCommitParentSHA1": "cfe2466e4914bb3377c907e735777afb60dffea0", "bugFilePath": "s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java", "fixPatch": "diff --git a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\nindex 6206da8..c13d22d 100644\n--- a/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n+++ b/s3-extensions/src/test/java/io/druid/storage/s3/S3DataSegmentMoverTest.java\n@@ -62,7 +62,7 @@\n   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -82,7 +82,7 @@\n   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));\n@@ -103,7 +103,7 @@\n   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n-    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n+    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n \n     mover.move(\n         sourceSegment,\n", "projectName": "druid-io.druid", "bugLineNum": 106, "bugNodeStartChar": 4248, "bugNodeLength": 36, "fixLineNum": 106, "fixNodeStartChar": 4248, "fixNodeLength": 69, "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "e94badc917f7343820e4c40e1654f4c4b2c1901a", "fixCommitParentSHA1": "3243505950039ad65ac8b259639959aeec40a782", "bugFilePath": "processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\nindex ea58501..b8f63a5 100644\n--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n@@ -182,7 +182,7 @@\n \n         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n-        if (row.size() == 0) {\n+        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));\n", "projectName": "druid-io.druid", "bugLineNum": 185, "bugNodeStartChar": 6277, "bugNodeLength": 15, "fixLineNum": 185, "fixNodeStartChar": 6277, "fixNodeLength": 30, "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "e94badc917f7343820e4c40e1654f4c4b2c1901a", "fixCommitParentSHA1": "3243505950039ad65ac8b259639959aeec40a782", "bugFilePath": "processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\nindex ea58501..b8f63a5 100644\n--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n@@ -182,7 +182,7 @@\n \n         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n-        if (row.size() == 0) {\n+        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));\n", "projectName": "druid-io.druid", "bugLineNum": 185, "bugNodeStartChar": 6277, "bugNodeLength": 15, "fixLineNum": 185, "fixNodeStartChar": 6277, "fixNodeLength": 30, "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "e0e43deaec26384766a61874db4aaa6bda4ae415", "fixCommitParentSHA1": "8138d96f9d84d2d16dfc59f2187f3b57d52f5aed", "bugFilePath": "processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\nindex ea58501..b8f63a5 100644\n--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n@@ -182,7 +182,7 @@\n \n         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n-        if (row.size() == 0) {\n+        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));\n", "projectName": "druid-io.druid", "bugLineNum": 185, "bugNodeStartChar": 6277, "bugNodeLength": 15, "fixLineNum": 185, "fixNodeStartChar": 6277, "fixNodeLength": 30, "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "e0e43deaec26384766a61874db4aaa6bda4ae415", "fixCommitParentSHA1": "8138d96f9d84d2d16dfc59f2187f3b57d52f5aed", "bugFilePath": "processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\nindex ea58501..b8f63a5 100644\n--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java\n@@ -182,7 +182,7 @@\n \n         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n-        if (row.size() == 0) {\n+        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));\n", "projectName": "druid-io.druid", "bugLineNum": 185, "bugNodeStartChar": 6277, "bugNodeLength": 15, "fixLineNum": 185, "fixNodeStartChar": 6277, "fixNodeLength": 30, "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4b902aed232e9ad30cc3ecad518491f97cac2ab4", "fixCommitParentSHA1": "82fd35726fcf920d047dee6229335a4a17a27a94", "bugFilePath": "server/src/main/java/io/druid/client/BrokerServerView.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/client/BrokerServerView.java b/server/src/main/java/io/druid/client/BrokerServerView.java\nindex 3e860a4..d09a6d1 100644\n--- a/server/src/main/java/io/druid/client/BrokerServerView.java\n+++ b/server/src/main/java/io/druid/client/BrokerServerView.java\n@@ -54,7 +54,7 @@\n   private final Map<String, ServerSelector> selectors;\n   private final Map<String, VersionedIntervalTimeline<String, ServerSelector>> timelines;\n \n-  private final QueryToolChestWarehouse warehose;\n+  private final QueryToolChestWarehouse warehouse;\n   private final ObjectMapper smileMapper;\n   private final HttpClient httpClient;\n   private final ServerView baseView;\n@@ -62,14 +62,14 @@\n \n   @Inject\n   public BrokerServerView(\n-      QueryToolChestWarehouse warehose,\n+      QueryToolChestWarehouse warehouse,\n       ObjectMapper smileMapper,\n       @Client HttpClient httpClient,\n       ServerView baseView,\n       ServerSelectorStrategy serverSelectorStrategy\n   )\n   {\n-    this.warehose = warehose;\n+    this.warehouse = warehouse;\n     this.smileMapper = smileMapper;\n     this.httpClient = httpClient;\n     this.baseView = baseView;\n@@ -149,7 +149,7 @@\n \n   private DirectDruidClient makeDirectClient(DruidServer server)\n   {\n-    return new DirectDruidClient(warehose, smileMapper, httpClient, server.getHost());\n+    return new DirectDruidClient(warehouse, smileMapper, httpClient, server.getHost());\n   }\n \n   private QueryableDruidServer removeServer(DruidServer server)\n", "projectName": "druid-io.druid", "bugLineNum": 152, "bugNodeStartChar": 5019, "bugNodeLength": 74, "fixLineNum": 152, "fixNodeStartChar": 5019, "fixNodeLength": 75, "sourceBeforeFix": "new DirectDruidClient(warehose,smileMapper,httpClient,server.getHost())", "sourceAfterFix": "new DirectDruidClient(warehouse,smileMapper,httpClient,server.getHost())"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "facc9c51d37dad77ba2908c32b8ff43f405b7421", "fixCommitParentSHA1": "6b395910307240e607632af3bd547a2b9f73c68f", "bugFilePath": "server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumberSchool.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumberSchool.java b/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumberSchool.java\nindex b270398..2a8a096 100644\n--- a/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumberSchool.java\n+++ b/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumberSchool.java\n@@ -92,7 +92,7 @@\n     this.rejectionPolicyFactory = new ServerTimeRejectionPolicyFactory();\n     this.maxPendingPersists = (maxPendingPersists > 0) ? maxPendingPersists : defaultPending;\n \n-    Preconditions.checkArgument(maxPendingPersists > 0, \"RealtimePlumberSchool requires maxPendingPersists > 0\");\n+    Preconditions.checkArgument(maxPendingPersists <= 0, \"RealtimePlumberSchool requires maxPendingPersists > 0\");\n     Preconditions.checkNotNull(windowPeriod, \"RealtimePlumberSchool requires a windowPeriod.\");\n     Preconditions.checkNotNull(basePersistDirectory, \"RealtimePlumberSchool requires a basePersistDirectory.\");\n     Preconditions.checkNotNull(segmentGranularity, \"RealtimePlumberSchool requires a segmentGranularity.\");\n", "projectName": "druid-io.druid", "bugLineNum": 95, "bugNodeStartChar": 3621, "bugNodeLength": 22, "fixLineNum": 95, "fixNodeStartChar": 3621, "fixNodeLength": 23, "sourceBeforeFix": "maxPendingPersists > 0", "sourceAfterFix": "maxPendingPersists <= 0"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "022423e200ae95a00393c3e4551a1985705795d8", "fixCommitParentSHA1": "4a9c255cdea6db11a0307c6e7b03d7465ec39012", "bugFilePath": "processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java b/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\nindex 443c9cb..72758ef 100644\n--- a/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\n+++ b/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\n@@ -490,7 +490,7 @@\n               for (ComplexColumn complexColumn : complexColumnCache.values()) {\n                 Closeables.closeQuietly(complexColumn);\n               }\n-              for (Object column : complexColumnCache.values()) {\n+              for (Object column : objectColumnCache.values()) {\n                 if (column instanceof Closeable) {\n                   Closeables.closeQuietly((Closeable) column);\n                 }\n", "projectName": "druid-io.druid", "bugLineNum": 493, "bugNodeStartChar": 17733, "bugNodeLength": 27, "fixLineNum": 493, "fixNodeStartChar": 17733, "fixNodeLength": 26, "sourceBeforeFix": "complexColumnCache.values()", "sourceAfterFix": "objectColumnCache.values()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "022423e200ae95a00393c3e4551a1985705795d8", "fixCommitParentSHA1": "4a9c255cdea6db11a0307c6e7b03d7465ec39012", "bugFilePath": "processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java b/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\nindex 443c9cb..72758ef 100644\n--- a/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\n+++ b/processing/src/main/java/io/druid/segment/QueryableIndexStorageAdapter.java\n@@ -490,7 +490,7 @@\n               for (ComplexColumn complexColumn : complexColumnCache.values()) {\n                 Closeables.closeQuietly(complexColumn);\n               }\n-              for (Object column : complexColumnCache.values()) {\n+              for (Object column : objectColumnCache.values()) {\n                 if (column instanceof Closeable) {\n                   Closeables.closeQuietly((Closeable) column);\n                 }\n", "projectName": "druid-io.druid", "bugLineNum": 493, "bugNodeStartChar": 17733, "bugNodeLength": 27, "fixLineNum": 493, "fixNodeStartChar": 17733, "fixNodeLength": 26, "sourceBeforeFix": "complexColumnCache.values()", "sourceAfterFix": "objectColumnCache.values()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "26991b5a2a33bc91cefdf958ffa2973e27eeebb3", "fixCommitParentSHA1": "837dee1934b7d94dc44154a82aec450507a27e88", "bugFilePath": "indexing-service/src/main/java/io/druid/indexing/overlord/scaling/SimpleResourceManagementStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/io/druid/indexing/overlord/scaling/SimpleResourceManagementStrategy.java b/indexing-service/src/main/java/io/druid/indexing/overlord/scaling/SimpleResourceManagementStrategy.java\nindex fe08fd6..10e084b 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/overlord/scaling/SimpleResourceManagementStrategy.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/overlord/scaling/SimpleResourceManagementStrategy.java\n@@ -203,7 +203,7 @@\n                             .toList();\n \n           if (laziestWorkerIps.isEmpty()) {\n-            log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\");\n+            log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\", excessWorkers);\n           } else {\n             log.info(\n                 \"Terminating %,d workers (wanted %,d): %s\",\n", "projectName": "druid-io.druid", "bugLineNum": 206, "bugNodeStartChar": 7921, "bugNodeLength": 77, "fixLineNum": 206, "fixNodeStartChar": 7921, "fixNodeLength": 92, "sourceBeforeFix": "log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\")", "sourceAfterFix": "log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4ba8a44239804bb05c385384400f52ab978a1070", "fixCommitParentSHA1": "25c3f28907cd8d85db5ff91a69051b47169a510b", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java\nindex 9f1bd03..2eedaf7 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java\n@@ -62,7 +62,7 @@\n       try {\n         inputRow = parser.parse(value.toString());\n       }\n-      catch (IllegalArgumentException e) {\n+      catch (Exception e) {\n         if (config.isIgnoreInvalidRows()) {\n           context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);\n           return; // we're ignoring this invalid row\n", "projectName": "druid-io.druid", "bugLineNum": 65, "bugNodeStartChar": 1988, "bugNodeLength": 26, "fixLineNum": 65, "fixNodeStartChar": 1988, "fixNodeLength": 11, "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52746b8ea6d15e1814adbc657c7d64ee1af2af36", "fixCommitParentSHA1": "25c3f28907cd8d85db5ff91a69051b47169a510b", "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java", "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java\nindex 9f1bd03..2eedaf7 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/HadoopDruidIndexerMapper.java\n@@ -62,7 +62,7 @@\n       try {\n         inputRow = parser.parse(value.toString());\n       }\n-      catch (IllegalArgumentException e) {\n+      catch (Exception e) {\n         if (config.isIgnoreInvalidRows()) {\n           context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);\n           return; // we're ignoring this invalid row\n", "projectName": "druid-io.druid", "bugLineNum": 65, "bugNodeStartChar": 1988, "bugNodeLength": 26, "fixLineNum": 65, "fixNodeStartChar": 1988, "fixNodeLength": 11, "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3ae48a8191bda71e900bee767847ce56873a8c57", "fixCommitParentSHA1": "4a291fdf3094886e20d65b87554a6a5debd0a4f6", "bugFilePath": "s3-extensions/src/main/java/io/druid/storage/s3/S3DataSegmentMover.java", "fixPatch": "diff --git a/s3-extensions/src/main/java/io/druid/storage/s3/S3DataSegmentMover.java b/s3-extensions/src/main/java/io/druid/storage/s3/S3DataSegmentMover.java\nindex 599e3dc..96a5b8a 100644\n--- a/s3-extensions/src/main/java/io/druid/storage/s3/S3DataSegmentMover.java\n+++ b/s3-extensions/src/main/java/io/druid/storage/s3/S3DataSegmentMover.java\n@@ -34,7 +34,7 @@\n \n public class S3DataSegmentMover implements DataSegmentMover\n {\n-  private static final Logger log = new Logger(S3DataSegmentKiller.class);\n+  private static final Logger log = new Logger(S3DataSegmentMover.class);\n \n   private final RestS3Service s3Client;\n   private final S3DataSegmentMoverConfig config;\n", "projectName": "druid-io.druid", "bugLineNum": 37, "bugNodeStartChar": 1432, "bugNodeLength": 25, "fixLineNum": 37, "fixNodeStartChar": 1432, "fixNodeLength": 24, "sourceBeforeFix": "S3DataSegmentKiller.class", "sourceAfterFix": "S3DataSegmentMover.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d9762ac9bd5c578bc9b975dd1233cfea917134b2", "fixCommitParentSHA1": "5fe0a8f2fb6546dda4d90abc834d9367ad13456a", "bugFilePath": "server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java b/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java\nindex da27418..e2120b1 100644\n--- a/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java\n+++ b/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java\n@@ -182,7 +182,7 @@\n     log.info(\"Stopping job\");\n \n     for (final Map.Entry<Long, Sink> entry : getSinks().entrySet()) {\n-      flushAfterDuration(entry.getKey(), entry.getValue());\n+      abandonSegment(entry.getKey(), entry.getValue());\n     }\n     shutdownExecutors();\n \n", "projectName": "druid-io.druid", "bugLineNum": 185, "bugNodeStartChar": 5790, "bugNodeLength": 52, "fixLineNum": 185, "fixNodeStartChar": 5790, "fixNodeLength": 48, "sourceBeforeFix": "flushAfterDuration(entry.getKey(),entry.getValue())", "sourceAfterFix": "abandonSegment(entry.getKey(),entry.getValue())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d9762ac9bd5c578bc9b975dd1233cfea917134b2", "fixCommitParentSHA1": "5fe0a8f2fb6546dda4d90abc834d9367ad13456a", "bugFilePath": "server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java", "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java b/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java\nindex da27418..e2120b1 100644\n--- a/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java\n+++ b/server/src/main/java/io/druid/segment/realtime/plumber/FlushingPlumber.java\n@@ -182,7 +182,7 @@\n     log.info(\"Stopping job\");\n \n     for (final Map.Entry<Long, Sink> entry : getSinks().entrySet()) {\n-      flushAfterDuration(entry.getKey(), entry.getValue());\n+      abandonSegment(entry.getKey(), entry.getValue());\n     }\n     shutdownExecutors();\n \n", "projectName": "druid-io.druid", "bugLineNum": 185, "bugNodeStartChar": 5790, "bugNodeLength": 52, "fixLineNum": 185, "fixNodeStartChar": 5790, "fixNodeLength": 48, "sourceBeforeFix": "flushAfterDuration(entry.getKey(),entry.getValue())", "sourceAfterFix": "abandonSegment(entry.getKey(),entry.getValue())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2", "fixCommitParentSHA1": "ae5a4ff54ceaa6d28a305f057cfecd62b067461a", "bugFilePath": "processing/src/test/java/io/druid/query/QueryRunnerTestHelper.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/query/QueryRunnerTestHelper.java b/processing/src/test/java/io/druid/query/QueryRunnerTestHelper.java\nindex 58c1e97..747ab09 100644\n--- a/processing/src/test/java/io/druid/query/QueryRunnerTestHelper.java\n+++ b/processing/src/test/java/io/druid/query/QueryRunnerTestHelper.java\n@@ -110,7 +110,7 @@\n     return Arrays.asList(\n         new Object[][]{\n             {\n-                makeQueryRunner(factory, new IncrementalIndexSegment(rtIndex))\n+                makeQueryRunner(factory, new IncrementalIndexSegment(rtIndex, null))\n             },\n             {\n                 makeQueryRunner(factory, new QueryableIndexSegment(null, mMappedTestIndex))\n", "projectName": "druid-io.druid", "bugLineNum": 113, "bugNodeStartChar": 6401, "bugNodeLength": 36, "fixLineNum": 113, "fixNodeStartChar": 6401, "fixNodeLength": 42, "sourceBeforeFix": "new IncrementalIndexSegment(rtIndex)", "sourceAfterFix": "new IncrementalIndexSegment(rtIndex,null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2", "fixCommitParentSHA1": "ae5a4ff54ceaa6d28a305f057cfecd62b067461a", "bugFilePath": "processing/src/test/java/io/druid/query/metadata/SegmentAnalyzerTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/query/metadata/SegmentAnalyzerTest.java b/processing/src/test/java/io/druid/query/metadata/SegmentAnalyzerTest.java\nindex 55ed588..e1bc774 100644\n--- a/processing/src/test/java/io/druid/query/metadata/SegmentAnalyzerTest.java\n+++ b/processing/src/test/java/io/druid/query/metadata/SegmentAnalyzerTest.java\n@@ -47,7 +47,7 @@\n   public void testIncrementalDoesNotWork() throws Exception\n   {\n     final List<SegmentAnalysis> results = getSegmentAnalysises(\n-        new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex())\n+        new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(), null)\n     );\n \n     Assert.assertEquals(0, results.size());\n", "projectName": "druid-io.druid", "bugLineNum": 50, "bugNodeStartChar": 1774, "bugNodeLength": 64, "fixLineNum": 50, "fixNodeStartChar": 1774, "fixNodeLength": 70, "sourceBeforeFix": "new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex())", "sourceAfterFix": "new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(),null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2", "fixCommitParentSHA1": "ae5a4ff54ceaa6d28a305f057cfecd62b067461a", "bugFilePath": "processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java b/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java\nindex b31ff2b..d1497a1 100644\n--- a/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java\n+++ b/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java\n@@ -90,7 +90,7 @@\n     final QueryRunnerFactory factory = TimeseriesQueryRunnerFactory.create();\n     final QueryRunner<Result<TimeseriesResultValue>> runner = makeQueryRunner(\n         factory,\n-        new IncrementalIndexSegment(index)\n+        new IncrementalIndexSegment(index, null)\n     );\n \n     TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n", "projectName": "druid-io.druid", "bugLineNum": 93, "bugNodeStartChar": 3586, "bugNodeLength": 34, "fixLineNum": 93, "fixNodeStartChar": 3586, "fixNodeLength": 40, "sourceBeforeFix": "new IncrementalIndexSegment(index)", "sourceAfterFix": "new IncrementalIndexSegment(index,null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2", "fixCommitParentSHA1": "ae5a4ff54ceaa6d28a305f057cfecd62b067461a", "bugFilePath": "processing/src/test/java/io/druid/segment/filter/SpatialFilterBonusTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/segment/filter/SpatialFilterBonusTest.java b/processing/src/test/java/io/druid/segment/filter/SpatialFilterBonusTest.java\nindex 8e423df..0eb3279 100644\n--- a/processing/src/test/java/io/druid/segment/filter/SpatialFilterBonusTest.java\n+++ b/processing/src/test/java/io/druid/segment/filter/SpatialFilterBonusTest.java\n@@ -83,7 +83,7 @@\n     return Arrays.asList(\n         new Object[][]{\n             {\n-                new IncrementalIndexSegment(rtIndex)\n+                new IncrementalIndexSegment(rtIndex, null)\n             },\n             {\n                 new QueryableIndexSegment(null, mMappedTestIndex)\n", "projectName": "druid-io.druid", "bugLineNum": 86, "bugNodeStartChar": 3274, "bugNodeLength": 36, "fixLineNum": 86, "fixNodeStartChar": 3274, "fixNodeLength": 42, "sourceBeforeFix": "new IncrementalIndexSegment(rtIndex)", "sourceAfterFix": "new IncrementalIndexSegment(rtIndex,null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2", "fixCommitParentSHA1": "ae5a4ff54ceaa6d28a305f057cfecd62b067461a", "bugFilePath": "processing/src/test/java/io/druid/segment/filter/SpatialFilterTest.java", "fixPatch": "diff --git a/processing/src/test/java/io/druid/segment/filter/SpatialFilterTest.java b/processing/src/test/java/io/druid/segment/filter/SpatialFilterTest.java\nindex b59d4a3..d342c12 100644\n--- a/processing/src/test/java/io/druid/segment/filter/SpatialFilterTest.java\n+++ b/processing/src/test/java/io/druid/segment/filter/SpatialFilterTest.java\n@@ -83,7 +83,7 @@\n     return Arrays.asList(\n         new Object[][]{\n             {\n-                new IncrementalIndexSegment(rtIndex)\n+                new IncrementalIndexSegment(rtIndex, null)\n             },\n             {\n                 new QueryableIndexSegment(null, mMappedTestIndex)\n", "projectName": "druid-io.druid", "bugLineNum": 86, "bugNodeStartChar": 3273, "bugNodeLength": 36, "fixLineNum": 86, "fixNodeStartChar": 3273, "fixNodeLength": 42, "sourceBeforeFix": "new IncrementalIndexSegment(rtIndex)", "sourceAfterFix": "new IncrementalIndexSegment(rtIndex,null)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "929b2336a908ed1ddbe427ecf4f2d77aa9dce787", "fixCommitParentSHA1": "1a3a1221c24af7d256869c7ba14600c514c72354", "bugFilePath": "server/src/test/java/io/druid/client/client/BatchServerInventoryViewTest.java", "fixPatch": "diff --git a/server/src/test/java/io/druid/client/client/BatchServerInventoryViewTest.java b/server/src/test/java/io/druid/client/client/BatchServerInventoryViewTest.java\nindex 3886482..a777222 100644\n--- a/server/src/test/java/io/druid/client/client/BatchServerInventoryViewTest.java\n+++ b/server/src/test/java/io/druid/client/client/BatchServerInventoryViewTest.java\n@@ -198,7 +198,8 @@\n   private void waitForSync() throws Exception\n   {\n     Stopwatch stopwatch = new Stopwatch().start();\n-    while (Iterables.get(batchServerInventoryView.getInventory(), 0).getSegments().size() != testSegments.size()) {\n+    while (!Iterables.isEmpty(batchServerInventoryView.getInventory())\n+           && Iterables.get(batchServerInventoryView.getInventory(), 0).getSegments().size() != testSegments.size()) {\n       Thread.sleep(500);\n       if (stopwatch.elapsed(TimeUnit.MILLISECONDS) > 5000) {\n         throw new ISE(\"BatchServerInventoryView is not updating\");\n", "projectName": "druid-io.druid", "bugLineNum": 201, "bugNodeStartChar": 6132, "bugNodeLength": 101, "fixLineNum": 201, "fixNodeStartChar": 6132, "fixNodeLength": 175, "sourceBeforeFix": "Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()", "sourceAfterFix": "!Iterables.isEmpty(batchServerInventoryView.getInventory()) && Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ddb6e83f170ced7f2746d5ad81e0086d7087b9f1", "fixCommitParentSHA1": "99127a214adeed1594d3df96369782563c43250a", "bugFilePath": "services/src/main/java/io/druid/guice/RealtimeModule.java", "fixPatch": "diff --git a/services/src/main/java/io/druid/guice/RealtimeModule.java b/services/src/main/java/io/druid/guice/RealtimeModule.java\nindex 04f897a..276f850 100644\n--- a/services/src/main/java/io/druid/guice/RealtimeModule.java\n+++ b/services/src/main/java/io/druid/guice/RealtimeModule.java\n@@ -48,13 +48,13 @@\n         binder,\n         \"druid.publish.type\",\n         Key.get(SegmentPublisher.class),\n-        Key.get(NoopSegmentPublisher.class)\n+        Key.get(DbSegmentPublisher.class)\n     );\n     final MapBinder<String, SegmentPublisher> publisherBinder = PolyBind.optionBinder(\n         binder,\n         Key.get(SegmentPublisher.class)\n     );\n-    publisherBinder.addBinding(\"db\").to(DbSegmentPublisher.class);\n+    publisherBinder.addBinding(\"noop\").to(NoopSegmentPublisher.class);\n     binder.bind(DbSegmentPublisher.class).in(LazySingleton.class);\n \n     JsonConfigProvider.bind(binder, \"druid.realtime\", RealtimeManagerConfig.class);\n", "projectName": "druid-io.druid", "bugLineNum": 51, "bugNodeStartChar": 1785, "bugNodeLength": 26, "fixLineNum": 51, "fixNodeStartChar": 1785, "fixNodeLength": 24, "sourceBeforeFix": "NoopSegmentPublisher.class", "sourceAfterFix": "DbSegmentPublisher.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9be644847ecd6c621d8267acebc7c0aa0f13063b", "fixCommitParentSHA1": "9fb614c7737b9e2e506a2b9c9f3de6e7ac87f191", "bugFilePath": "kafka-eight/src/main/java/io/druid/firehose/kafka/KafkaEightDruidModule.java", "fixPatch": "diff --git a/kafka-eight/src/main/java/io/druid/firehose/kafka/KafkaEightDruidModule.java b/kafka-eight/src/main/java/io/druid/firehose/kafka/KafkaEightDruidModule.java\nindex b8ccc93..658b64b 100644\n--- a/kafka-eight/src/main/java/io/druid/firehose/kafka/KafkaEightDruidModule.java\n+++ b/kafka-eight/src/main/java/io/druid/firehose/kafka/KafkaEightDruidModule.java\n@@ -38,7 +38,7 @@\n     return Arrays.<Module>asList(\n         new SimpleModule(\"KafkaEightFirehoseModule\")\n             .registerSubtypes(\n-                new NamedType(KafkaEightDruidModule.class, \"kafka-0.8\")\n+                new NamedType(KafkaEightFirehoseFactory.class, \"kafka-0.8\")\n             )\n     );\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 41, "bugNodeStartChar": 1429, "bugNodeLength": 27, "fixLineNum": 41, "fixNodeStartChar": 1429, "fixNodeLength": 31, "sourceBeforeFix": "KafkaEightDruidModule.class", "sourceAfterFix": "KafkaEightFirehoseFactory.class"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "fixCommitParentSHA1": "04e285638e74f21eef706e9a71fe8fcd1ee15b1f", "bugFilePath": "processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java b/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java\nindex fea0c82..d297378 100644\n--- a/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java\n+++ b/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java\n@@ -52,7 +52,7 @@\n \n   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n-    Context context = contextFactory.enterContext();\n+    final Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n \n     final ScriptableObject scope = context.initStandardObjects();\n@@ -90,9 +90,9 @@\n       @JsonProperty(\"function\") final String function\n   )\n   {\n-    Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n+    Preconditions.checkNotNull(name, \"Must have a valid, non-null post-aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n-    Preconditions.checkNotNull(function, \"Must have a valid, non-null fnAggregate\");\n+    Preconditions.checkNotNull(function, \"Must have a valid, non-null function\");\n \n     this.name = name;\n     this.fieldNames = fieldNames;\n@@ -116,7 +116,7 @@\n   @Override\n   public Object compute(Map<String, Object> combinedAggregators)\n   {\n-    Object[] args = new Object[fieldNames.size()];\n+    final Object[] args = new Object[fieldNames.size()];\n     int i = 0;\n     for(String field : fieldNames) {\n       args[i++] = combinedAggregators.get(field);\n", "projectName": "druid-io.druid", "bugLineNum": 55, "bugNodeStartChar": 1814, "bugNodeLength": 48, "fixLineNum": 55, "fixNodeStartChar": 1814, "fixNodeLength": 54, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "fixCommitParentSHA1": "04e285638e74f21eef706e9a71fe8fcd1ee15b1f", "bugFilePath": "processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java", "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java b/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java\nindex fea0c82..d297378 100644\n--- a/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java\n+++ b/processing/src/main/java/io/druid/query/aggregation/post/JavaScriptPostAggregator.java\n@@ -52,7 +52,7 @@\n \n   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n-    Context context = contextFactory.enterContext();\n+    final Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n \n     final ScriptableObject scope = context.initStandardObjects();\n@@ -90,9 +90,9 @@\n       @JsonProperty(\"function\") final String function\n   )\n   {\n-    Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n+    Preconditions.checkNotNull(name, \"Must have a valid, non-null post-aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n-    Preconditions.checkNotNull(function, \"Must have a valid, non-null fnAggregate\");\n+    Preconditions.checkNotNull(function, \"Must have a valid, non-null function\");\n \n     this.name = name;\n     this.fieldNames = fieldNames;\n@@ -116,7 +116,7 @@\n   @Override\n   public Object compute(Map<String, Object> combinedAggregators)\n   {\n-    Object[] args = new Object[fieldNames.size()];\n+    final Object[] args = new Object[fieldNames.size()];\n     int i = 0;\n     for(String field : fieldNames) {\n       args[i++] = combinedAggregators.get(field);\n", "projectName": "druid-io.druid", "bugLineNum": 119, "bugNodeStartChar": 3501, "bugNodeLength": 46, "fixLineNum": 119, "fixNodeStartChar": 3501, "fixNodeLength": 52, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e283de68318f4e0568cc703c357e695c72d8bce1", "fixCommitParentSHA1": "baedacf9708d9c04b373f83df3d75b6aaf72aaa9", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\nindex c5da481..94e1ff8 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n@@ -661,7 +661,7 @@\n         );\n         tasksToFail.addAll(zkWorker.getRunningTaskIds());\n         for (String assignedTask : tasksToFail) {\n-          RemoteTaskRunnerWorkItem taskRunnerWorkItem = runningTasks.get(assignedTask);\n+          RemoteTaskRunnerWorkItem taskRunnerWorkItem = runningTasks.remove(assignedTask);\n           if (taskRunnerWorkItem != null) {\n             String taskPath = JOINER.join(config.getIndexerTaskPath(), worker.getHost(), assignedTask);\n             if (cf.checkExists().forPath(taskPath) != null) {\n", "projectName": "druid-io.druid", "bugLineNum": 664, "bugNodeStartChar": 24078, "bugNodeLength": 30, "fixLineNum": 664, "fixNodeStartChar": 24078, "fixNodeLength": 33, "sourceBeforeFix": "runningTasks.get(assignedTask)", "sourceAfterFix": "runningTasks.remove(assignedTask)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e283de68318f4e0568cc703c357e695c72d8bce1", "fixCommitParentSHA1": "baedacf9708d9c04b373f83df3d75b6aaf72aaa9", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\nindex c5da481..94e1ff8 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n@@ -661,7 +661,7 @@\n         );\n         tasksToFail.addAll(zkWorker.getRunningTaskIds());\n         for (String assignedTask : tasksToFail) {\n-          RemoteTaskRunnerWorkItem taskRunnerWorkItem = runningTasks.get(assignedTask);\n+          RemoteTaskRunnerWorkItem taskRunnerWorkItem = runningTasks.remove(assignedTask);\n           if (taskRunnerWorkItem != null) {\n             String taskPath = JOINER.join(config.getIndexerTaskPath(), worker.getHost(), assignedTask);\n             if (cf.checkExists().forPath(taskPath) != null) {\n", "projectName": "druid-io.druid", "bugLineNum": 664, "bugNodeStartChar": 24078, "bugNodeLength": 30, "fixLineNum": 664, "fixNodeStartChar": 24078, "fixNodeLength": 33, "sourceBeforeFix": "runningTasks.get(assignedTask)", "sourceAfterFix": "runningTasks.remove(assignedTask)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b102d67173da3ca972abf7fcd0a2f779ef9870a3", "fixCommitParentSHA1": "25e330780ca35fa44046888b99d076b2a3a46e02", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java\nindex f0332aa..dcdeff0 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java\n@@ -268,7 +268,7 @@\n   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n-      return Optional.of(resourceManagementScheduler);\n+      return Optional.fromNullable(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 271, "bugNodeStartChar": 8270, "bugNodeLength": 40, "fixLineNum": 271, "fixNodeStartChar": 8270, "fixNodeLength": 50, "sourceBeforeFix": "Optional.of(resourceManagementScheduler)", "sourceAfterFix": "Optional.fromNullable(resourceManagementScheduler)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b102d67173da3ca972abf7fcd0a2f779ef9870a3", "fixCommitParentSHA1": "25e330780ca35fa44046888b99d076b2a3a46e02", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java\nindex f0332aa..dcdeff0 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/TaskMasterLifecycle.java\n@@ -268,7 +268,7 @@\n   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n-      return Optional.of(resourceManagementScheduler);\n+      return Optional.fromNullable(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 271, "bugNodeStartChar": 8270, "bugNodeLength": 40, "fixLineNum": 271, "fixNodeStartChar": 8270, "fixNodeLength": 50, "sourceBeforeFix": "Optional.of(resourceManagementScheduler)", "sourceAfterFix": "Optional.fromNullable(resourceManagementScheduler)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "7ebe053ac1abce6e3b218beaee801ebbc6da2ecb", "fixCommitParentSHA1": "4a64ce37ed3207c858a1dee41e2a6d366218d8be", "bugFilePath": "server/src/main/java/com/metamx/druid/loading/OmniSegmentLoader.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/loading/OmniSegmentLoader.java b/server/src/main/java/com/metamx/druid/loading/OmniSegmentLoader.java\nindex 38b811c..ffe4192 100644\n--- a/server/src/main/java/com/metamx/druid/loading/OmniSegmentLoader.java\n+++ b/server/src/main/java/com/metamx/druid/loading/OmniSegmentLoader.java\n@@ -211,7 +211,7 @@\n \n     private synchronized void addSegment(DataSegment segment)\n     {\n-      if (! segments.add(segment)) {\n+      if (segments.add(segment)) {\n         currSize += segment.getSize();\n       }\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 214, "bugNodeStartChar": 6207, "bugNodeLength": 23, "fixLineNum": 214, "fixNodeStartChar": 6207, "fixNodeLength": 21, "sourceBeforeFix": "!segments.add(segment)", "sourceAfterFix": "segments.add(segment)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "7ebe053ac1abce6e3b218beaee801ebbc6da2ecb", "fixCommitParentSHA1": "4a64ce37ed3207c858a1dee41e2a6d366218d8be", "bugFilePath": "server/src/main/java/com/metamx/druid/loading/SingleSegmentLoader.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/loading/SingleSegmentLoader.java b/server/src/main/java/com/metamx/druid/loading/SingleSegmentLoader.java\nindex a9fe23d..e7aa60d 100644\n--- a/server/src/main/java/com/metamx/druid/loading/SingleSegmentLoader.java\n+++ b/server/src/main/java/com/metamx/druid/loading/SingleSegmentLoader.java\n@@ -210,7 +210,7 @@\n \n     private synchronized void addSegment(DataSegment segment)\n     {\n-      if (! segments.add(segment)) {\n+      if (segments.add(segment)) {\n         currSize += segment.getSize();\n       }\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 213, "bugNodeStartChar": 6546, "bugNodeLength": 23, "fixLineNum": 213, "fixNodeStartChar": 6546, "fixNodeLength": 21, "sourceBeforeFix": "!segments.add(segment)", "sourceAfterFix": "segments.add(segment)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "764863d6f5692fde63e4a2f6cdd627cd8eec4e0a", "fixCommitParentSHA1": "01b35ec81938a6754a88fdeda2cf96eccbf4be75", "bugFilePath": "server/src/main/java/com/metamx/druid/master/DruidMaster.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/DruidMaster.java b/server/src/main/java/com/metamx/druid/master/DruidMaster.java\nindex fde2de3..6a019a6 100644\n--- a/server/src/main/java/com/metamx/druid/master/DruidMaster.java\n+++ b/server/src/main/java/com/metamx/druid/master/DruidMaster.java\n@@ -95,7 +95,7 @@\n \n   private final Map<String, LoadQueuePeon> loadManagementPeons;\n   private final AtomicReference<LeaderLatch> leaderLatch;\n-  private AtomicReference<MasterSegmentSettings> segmentSettingsAtomicReference;\n+  private volatile AtomicReference<MasterSegmentSettings> segmentSettingsAtomicReference;\n \n   public DruidMaster(\n       DruidMasterConfig config,\n@@ -467,7 +467,7 @@\n         serverInventoryView.start();\n \n         final List<Pair<? extends MasterRunnable, Duration>> masterRunnables = Lists.newArrayList();\n-        segmentSettingsAtomicReference = configManager.watch(MasterSegmentSettings.CONFIG_KEY, MasterSegmentSettings.class,(new MasterSegmentSettings.Builder()).build());\n+        segmentSettingsAtomicReference = configManager.watch(MasterSegmentSettings.CONFIG_KEY, MasterSegmentSettings.class,new MasterSegmentSettings.Builder().build());\n         masterRunnables.add(Pair.of(new MasterComputeManagerRunnable(), config.getMasterPeriod()));\n         if (indexingServiceClient != null) {\n \n", "projectName": "druid-io.druid", "bugLineNum": 98, "bugNodeStartChar": 3914, "bugNodeLength": 78, "fixLineNum": 98, "fixNodeStartChar": 3914, "fixNodeLength": 87, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "df883a9823b4c1b84a2e5543fcbea121cdaeddb5", "fixCommitParentSHA1": "4617d37e28a052be85c203e2f74fcafb47bcf6dd", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\nindex a823e0c..32c5bed 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n@@ -691,7 +691,7 @@\n           {\n             int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());\n             if (retVal == 0) {\n-              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker.getWorker().getHost());\n+              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker2.getWorker().getHost());\n             }\n \n             return retVal;\n", "projectName": "druid-io.druid", "bugLineNum": 694, "bugNodeStartChar": 25135, "bugNodeLength": 20, "fixLineNum": 694, "fixNodeStartChar": 25135, "fixNodeLength": 21, "sourceBeforeFix": "zkWorker.getWorker()", "sourceAfterFix": "zkWorker2.getWorker()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "df883a9823b4c1b84a2e5543fcbea121cdaeddb5", "fixCommitParentSHA1": "4617d37e28a052be85c203e2f74fcafb47bcf6dd", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\nindex a823e0c..32c5bed 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/RemoteTaskRunner.java\n@@ -691,7 +691,7 @@\n           {\n             int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());\n             if (retVal == 0) {\n-              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker.getWorker().getHost());\n+              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker2.getWorker().getHost());\n             }\n \n             return retVal;\n", "projectName": "druid-io.druid", "bugLineNum": 694, "bugNodeStartChar": 25135, "bugNodeLength": 20, "fixLineNum": 694, "fixNodeStartChar": 25135, "fixNodeLength": 21, "sourceBeforeFix": "zkWorker.getWorker()", "sourceAfterFix": "zkWorker2.getWorker()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\nindex a20e324..3c65cc9 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n@@ -85,7 +85,7 @@\n     return worker;\n   }\n \n-  @JsonProperty\n+  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();\n@@ -99,8 +99,8 @@\n     return retVal;\n   }\n \n-  @JsonProperty(\"currCapacity\")\n-  public int getCurrCapacity()\n+  @JsonProperty(\"currCapacityUsed\")\n+  public int getCurrCapacityUsed()\n   {\n     int currCapacity = 0;\n     for (TaskStatus taskStatus : getRunningTasks().values()) {\n@@ -132,12 +132,12 @@\n \n   public boolean isAtCapacity()\n   {\n-    return getCurrCapacity() >= worker.getCapacity();\n+    return getCurrCapacityUsed() >= worker.getCapacity();\n   }\n \n   public boolean canRunTask(Task task)\n   {\n-    return (worker.getCapacity() - getCurrCapacity() >= task.getTaskResource().getRequiredCapacity()\n+    return (worker.getCapacity() - getCurrCapacityUsed() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }\n \n", "projectName": "druid-io.druid", "bugLineNum": 135, "bugNodeStartChar": 3981, "bugNodeLength": 17, "fixLineNum": 135, "fixNodeStartChar": 3981, "fixNodeLength": 21, "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\nindex a20e324..3c65cc9 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n@@ -85,7 +85,7 @@\n     return worker;\n   }\n \n-  @JsonProperty\n+  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();\n@@ -99,8 +99,8 @@\n     return retVal;\n   }\n \n-  @JsonProperty(\"currCapacity\")\n-  public int getCurrCapacity()\n+  @JsonProperty(\"currCapacityUsed\")\n+  public int getCurrCapacityUsed()\n   {\n     int currCapacity = 0;\n     for (TaskStatus taskStatus : getRunningTasks().values()) {\n@@ -132,12 +132,12 @@\n \n   public boolean isAtCapacity()\n   {\n-    return getCurrCapacity() >= worker.getCapacity();\n+    return getCurrCapacityUsed() >= worker.getCapacity();\n   }\n \n   public boolean canRunTask(Task task)\n   {\n-    return (worker.getCapacity() - getCurrCapacity() >= task.getTaskResource().getRequiredCapacity()\n+    return (worker.getCapacity() - getCurrCapacityUsed() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }\n \n", "projectName": "druid-io.druid", "bugLineNum": 135, "bugNodeStartChar": 3981, "bugNodeLength": 17, "fixLineNum": 135, "fixNodeStartChar": 3981, "fixNodeLength": 21, "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\nindex a20e324..3c65cc9 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n@@ -85,7 +85,7 @@\n     return worker;\n   }\n \n-  @JsonProperty\n+  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();\n@@ -99,8 +99,8 @@\n     return retVal;\n   }\n \n-  @JsonProperty(\"currCapacity\")\n-  public int getCurrCapacity()\n+  @JsonProperty(\"currCapacityUsed\")\n+  public int getCurrCapacityUsed()\n   {\n     int currCapacity = 0;\n     for (TaskStatus taskStatus : getRunningTasks().values()) {\n@@ -132,12 +132,12 @@\n \n   public boolean isAtCapacity()\n   {\n-    return getCurrCapacity() >= worker.getCapacity();\n+    return getCurrCapacityUsed() >= worker.getCapacity();\n   }\n \n   public boolean canRunTask(Task task)\n   {\n-    return (worker.getCapacity() - getCurrCapacity() >= task.getTaskResource().getRequiredCapacity()\n+    return (worker.getCapacity() - getCurrCapacityUsed() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }\n \n", "projectName": "druid-io.druid", "bugLineNum": 140, "bugNodeStartChar": 4107, "bugNodeLength": 17, "fixLineNum": 140, "fixNodeStartChar": 4107, "fixNodeLength": 21, "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\nindex a20e324..3c65cc9 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/ZkWorker.java\n@@ -85,7 +85,7 @@\n     return worker;\n   }\n \n-  @JsonProperty\n+  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();\n@@ -99,8 +99,8 @@\n     return retVal;\n   }\n \n-  @JsonProperty(\"currCapacity\")\n-  public int getCurrCapacity()\n+  @JsonProperty(\"currCapacityUsed\")\n+  public int getCurrCapacityUsed()\n   {\n     int currCapacity = 0;\n     for (TaskStatus taskStatus : getRunningTasks().values()) {\n@@ -132,12 +132,12 @@\n \n   public boolean isAtCapacity()\n   {\n-    return getCurrCapacity() >= worker.getCapacity();\n+    return getCurrCapacityUsed() >= worker.getCapacity();\n   }\n \n   public boolean canRunTask(Task task)\n   {\n-    return (worker.getCapacity() - getCurrCapacity() >= task.getTaskResource().getRequiredCapacity()\n+    return (worker.getCapacity() - getCurrCapacityUsed() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }\n \n", "projectName": "druid-io.druid", "bugLineNum": 140, "bugNodeStartChar": 4107, "bugNodeLength": 17, "fixLineNum": 140, "fixNodeStartChar": 4107, "fixNodeLength": 21, "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\nindex 5422a21..45b5573 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n@@ -218,7 +218,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n \n     return retVal;\n   }\n@@ -250,7 +250,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n \n     return retVal;\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 221, "bugNodeStartChar": 7118, "bugNodeLength": 53, "fixLineNum": 221, "fixNodeStartChar": 7118, "fixNodeLength": 54, "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",ips,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",ips,retVal)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\nindex 5422a21..45b5573 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n@@ -218,7 +218,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n \n     return retVal;\n   }\n@@ -250,7 +250,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n \n     return retVal;\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 221, "bugNodeStartChar": 7118, "bugNodeLength": 53, "fixLineNum": 221, "fixNodeStartChar": 7118, "fixNodeLength": 54, "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",ips,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",ips,retVal)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\nindex 5422a21..45b5573 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n@@ -218,7 +218,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n \n     return retVal;\n   }\n@@ -250,7 +250,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n \n     return retVal;\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 253, "bugNodeStartChar": 7929, "bugNodeLength": 57, "fixLineNum": 253, "fixNodeStartChar": 7929, "fixNodeLength": 58, "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\nindex 5422a21..45b5573 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/EC2AutoScalingStrategy.java\n@@ -218,7 +218,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n \n     return retVal;\n   }\n@@ -250,7 +250,7 @@\n         }\n     );\n \n-    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n+    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n \n     return retVal;\n   }\n", "projectName": "druid-io.druid", "bugLineNum": 253, "bugNodeStartChar": 7929, "bugNodeLength": 57, "fixLineNum": 253, "fixNodeStartChar": 7929, "fixNodeLength": 58, "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java\nindex 4451d68..2546d7e 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java\n@@ -72,7 +72,7 @@\n   public boolean doProvision(Collection<RemoteTaskRunnerWorkItem> pendingTasks, Collection<ZkWorker> zkWorkers)\n   {\n     if (zkWorkers.size() >= workerSetupdDataRef.get().getMaxNumWorkers()) {\n-      log.info(\n+      log.debug(\n           \"Cannot scale anymore. Num workers = %d, Max num workers = %d\",\n           zkWorkers.size(),\n           workerSetupdDataRef.get().getMaxNumWorkers()\n", "projectName": "druid-io.druid", "bugLineNum": 75, "bugNodeStartChar": 3053, "bugNodeLength": 174, "fixLineNum": 75, "fixNodeStartChar": 3053, "fixNodeLength": 175, "sourceBeforeFix": "log.info(\"Cannot scale anymore. Num workers = %d, Max num workers = %d\",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())", "sourceAfterFix": "log.debug(\"Cannot scale anymore. Num workers = %d, Max num workers = %d\",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "fixCommitParentSHA1": "a95d9c46e2f7bb9bec968f8392ac62ccda6c0283", "bugFilePath": "indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java", "fixPatch": "diff --git a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java\nindex 4451d68..2546d7e 100644\n--- a/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java\n+++ b/indexing-service/src/main/java/com/metamx/druid/indexing/coordinator/scaling/SimpleResourceManagementStrategy.java\n@@ -72,7 +72,7 @@\n   public boolean doProvision(Collection<RemoteTaskRunnerWorkItem> pendingTasks, Collection<ZkWorker> zkWorkers)\n   {\n     if (zkWorkers.size() >= workerSetupdDataRef.get().getMaxNumWorkers()) {\n-      log.info(\n+      log.debug(\n           \"Cannot scale anymore. Num workers = %d, Max num workers = %d\",\n           zkWorkers.size(),\n           workerSetupdDataRef.get().getMaxNumWorkers()\n", "projectName": "druid-io.druid", "bugLineNum": 75, "bugNodeStartChar": 3053, "bugNodeLength": 174, "fixLineNum": 75, "fixNodeStartChar": 3053, "fixNodeLength": 175, "sourceBeforeFix": "log.info(\"Cannot scale anymore. Num workers = %d, Max num workers = %d\",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())", "sourceAfterFix": "log.debug(\"Cannot scale anymore. Num workers = %d, Max num workers = %d\",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "cd0fa34a73bfd38b133fc0e1a28f4d26b947cfc7", "fixCommitParentSHA1": "9d80369c2b6a23e183604ba0094afaa6f27b9019", "bugFilePath": "server/src/main/java/com/metamx/druid/coordination/ZkCoordinator.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/coordination/ZkCoordinator.java b/server/src/main/java/com/metamx/druid/coordination/ZkCoordinator.java\nindex 1befc1d..0740be8 100644\n--- a/server/src/main/java/com/metamx/druid/coordination/ZkCoordinator.java\n+++ b/server/src/main/java/com/metamx/druid/coordination/ZkCoordinator.java\n@@ -261,7 +261,7 @@\n       announcer.unannounceSegment(segment);\n     }\n     catch (Exception e) {\n-      log.makeAlert(\"Failed to remove segment\")\n+      log.makeAlert(e, \"Failed to remove segment\")\n           .addData(\"segment\", segment)\n           .emit();\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 264, "bugNodeStartChar": 8587, "bugNodeLength": 41, "fixLineNum": 264, "fixNodeStartChar": 8587, "fixNodeLength": 44, "sourceBeforeFix": "log.makeAlert(\"Failed to remove segment\")", "sourceAfterFix": "log.makeAlert(e,\"Failed to remove segment\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "89eb2aff5a0094a018c4535d17caaaa1fb77c24e", "fixCommitParentSHA1": "3e3f2c2da7bcc7ae06cee1ac738f99654516c8cd", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java b/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java\nindex f8d7183..2542d82 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java\n@@ -687,7 +687,7 @@\n       );\n \n       if (workerQueue.isEmpty()) {\n-        log.info(\"Worker nodes %s do not have capacity to run any more tasks!\", zkWorkers.values());\n+        log.debug(\"Worker nodes %s do not have capacity to run any more tasks!\", zkWorkers.values());\n         return null;\n       }\n \n", "projectName": "druid-io.druid", "bugLineNum": 690, "bugNodeStartChar": 25228, "bugNodeLength": 91, "fixLineNum": 690, "fixNodeStartChar": 25228, "fixNodeLength": 92, "sourceBeforeFix": "log.info(\"Worker nodes %s do not have capacity to run any more tasks!\",zkWorkers.values())", "sourceAfterFix": "log.debug(\"Worker nodes %s do not have capacity to run any more tasks!\",zkWorkers.values())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "89eb2aff5a0094a018c4535d17caaaa1fb77c24e", "fixCommitParentSHA1": "3e3f2c2da7bcc7ae06cee1ac738f99654516c8cd", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java b/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java\nindex f8d7183..2542d82 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/coordinator/RemoteTaskRunner.java\n@@ -687,7 +687,7 @@\n       );\n \n       if (workerQueue.isEmpty()) {\n-        log.info(\"Worker nodes %s do not have capacity to run any more tasks!\", zkWorkers.values());\n+        log.debug(\"Worker nodes %s do not have capacity to run any more tasks!\", zkWorkers.values());\n         return null;\n       }\n \n", "projectName": "druid-io.druid", "bugLineNum": 690, "bugNodeStartChar": 25228, "bugNodeLength": 91, "fixLineNum": 690, "fixNodeStartChar": 25228, "fixNodeLength": 92, "sourceBeforeFix": "log.info(\"Worker nodes %s do not have capacity to run any more tasks!\",zkWorkers.values())", "sourceAfterFix": "log.debug(\"Worker nodes %s do not have capacity to run any more tasks!\",zkWorkers.values())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "8ce55ac632d89935288ef4a6fc1cdb640fef3884", "fixCommitParentSHA1": "8948c8d4ca3aa28aae5e12fee0a587d9c4d14040", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/worker/executor/ExecutorMain.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/worker/executor/ExecutorMain.java b/merger/src/main/java/com/metamx/druid/merger/worker/executor/ExecutorMain.java\nindex b55060b..f495aad 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/worker/executor/ExecutorMain.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/worker/executor/ExecutorMain.java\n@@ -37,7 +37,7 @@\n   {\n     LogLevelAdjuster.register();\n \n-    if (args.length != 3) {\n+    if (args.length != 2) {\n       log.info(\"Usage: ExecutorMain <task.json> <status.json>\");\n       System.exit(2);\n     }\n", "projectName": "druid-io.druid", "bugLineNum": 40, "bugNodeStartChar": 1281, "bugNodeLength": 16, "fixLineNum": 40, "fixNodeStartChar": 1281, "fixNodeLength": 16, "sourceBeforeFix": "args.length != 3", "sourceAfterFix": "args.length != 2"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "3884ebbc3ea4a04fb6f90973c383a201726b7aeb", "fixCommitParentSHA1": "3cfa081c6cb016080fb8530191a1518ba8202ba1", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java b/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java\nindex b6ebdf4..0f6c869 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java\n@@ -159,7 +159,7 @@\n                                     String.format(\n                                         \"-D%s=%s\",\n                                         propName.substring(CHILD_PROPERTY_PREFIX.length()),\n-                                        System.getProperty(propName)\n+                                        props.getProperty(propName)\n                                     )\n                                 );\n                               }\n", "projectName": "druid-io.druid", "bugLineNum": 162, "bugNodeStartChar": 6756, "bugNodeLength": 28, "fixLineNum": 162, "fixNodeStartChar": 6756, "fixNodeLength": 27, "sourceBeforeFix": "System.getProperty(propName)", "sourceAfterFix": "props.getProperty(propName)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3884ebbc3ea4a04fb6f90973c383a201726b7aeb", "fixCommitParentSHA1": "3cfa081c6cb016080fb8530191a1518ba8202ba1", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java b/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java\nindex b6ebdf4..0f6c869 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/coordinator/ForkingTaskRunner.java\n@@ -159,7 +159,7 @@\n                                     String.format(\n                                         \"-D%s=%s\",\n                                         propName.substring(CHILD_PROPERTY_PREFIX.length()),\n-                                        System.getProperty(propName)\n+                                        props.getProperty(propName)\n                                     )\n                                 );\n                               }\n", "projectName": "druid-io.druid", "bugLineNum": 162, "bugNodeStartChar": 6756, "bugNodeLength": 28, "fixLineNum": 162, "fixNodeStartChar": 6756, "fixNodeLength": 27, "sourceBeforeFix": "System.getProperty(propName)", "sourceAfterFix": "props.getProperty(propName)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "16e4cd4291c51fa1a2a9e3a189c8c57cd09d6901", "fixCommitParentSHA1": "c0397aa67c40dc8a7facca3f60ed2de769354a26", "bugFilePath": "server/src/main/java/com/metamx/druid/index/v1/IncrementalIndexStorageAdapter.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/index/v1/IncrementalIndexStorageAdapter.java b/server/src/main/java/com/metamx/druid/index/v1/IncrementalIndexStorageAdapter.java\nindex bf8e0ac..8ec2cc1 100644\n--- a/server/src/main/java/com/metamx/druid/index/v1/IncrementalIndexStorageAdapter.java\n+++ b/server/src/main/java/com/metamx/druid/index/v1/IncrementalIndexStorageAdapter.java\n@@ -164,7 +164,7 @@\n                                 timeStart, new String[][]{}\n                             ),\n                             new IncrementalIndex.TimeAndDims(\n-                                Math.min(actualInterval.getEndMillis(), gran.next(timeStart)), new String[][]{}\n+                                Math.min(actualInterval.getEndMillis(), gran.next(input)), new String[][]{}\n                             )\n                         );\n                         time = gran.toDateTime(input);\n", "projectName": "druid-io.druid", "bugLineNum": 167, "bugNodeStartChar": 5592, "bugNodeLength": 20, "fixLineNum": 167, "fixNodeStartChar": 5592, "fixNodeLength": 16, "sourceBeforeFix": "gran.next(timeStart)", "sourceAfterFix": "gran.next(input)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d722c995302f88cd0d00a0db585a8903a3da8517", "fixCommitParentSHA1": "cc08d6029fc0fced162aa150f7948ffa54ed79f8", "bugFilePath": "server/src/main/java/com/metamx/druid/index/v1/QueryableIndexStorageAdapter.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/index/v1/QueryableIndexStorageAdapter.java b/server/src/main/java/com/metamx/druid/index/v1/QueryableIndexStorageAdapter.java\nindex 0dfded5..1cde70b 100644\n--- a/server/src/main/java/com/metamx/druid/index/v1/QueryableIndexStorageAdapter.java\n+++ b/server/src/main/java/com/metamx/druid/index/v1/QueryableIndexStorageAdapter.java\n@@ -272,7 +272,7 @@\n                   }\n \n                   final Offset offset = new TimestampCheckingOffset(\n-                      baseOffset, timestamps, Math.min(interval.getEndMillis(), gran.next(timeStart))\n+                      baseOffset, timestamps, Math.min(interval.getEndMillis(), gran.next(input))\n                   );\n \n                   return new Cursor()\n", "projectName": "druid-io.druid", "bugLineNum": 275, "bugNodeStartChar": 8248, "bugNodeLength": 20, "fixLineNum": 275, "fixNodeStartChar": 8248, "fixNodeLength": 16, "sourceBeforeFix": "gran.next(timeStart)", "sourceAfterFix": "gran.next(input)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "f8d9a3b19b8a69e20c4469b541a5ae96b07e7cc8", "fixCommitParentSHA1": "d9b9f73494724d873968a014c1622b0b14b9e262", "bugFilePath": "server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java b/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java\nindex 4628028..75ebd7c 100644\n--- a/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java\n+++ b/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java\n@@ -204,7 +204,7 @@\n         @Override\n         public long increment(long timeMillis)\n         {\n-          return timeMillis - MILLIS_IN;\n+          return timeMillis + MILLIS_IN;\n         }\n \n         @Override\n@@ -273,7 +273,7 @@\n         @Override\n         public long increment(long timeMillis)\n         {\n-          return timeMillis - MILLIS_IN;\n+          return timeMillis + MILLIS_IN;\n         }\n \n         @Override\n", "projectName": "druid-io.druid", "bugLineNum": 207, "bugNodeStartChar": 5433, "bugNodeLength": 22, "fixLineNum": 207, "fixNodeStartChar": 5433, "fixNodeLength": 22, "sourceBeforeFix": "timeMillis - MILLIS_IN", "sourceAfterFix": "timeMillis + MILLIS_IN"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "f8d9a3b19b8a69e20c4469b541a5ae96b07e7cc8", "fixCommitParentSHA1": "d9b9f73494724d873968a014c1622b0b14b9e262", "bugFilePath": "server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java b/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java\nindex 4628028..75ebd7c 100644\n--- a/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java\n+++ b/server/src/main/java/com/metamx/druid/index/v1/IndexGranularity.java\n@@ -204,7 +204,7 @@\n         @Override\n         public long increment(long timeMillis)\n         {\n-          return timeMillis - MILLIS_IN;\n+          return timeMillis + MILLIS_IN;\n         }\n \n         @Override\n@@ -273,7 +273,7 @@\n         @Override\n         public long increment(long timeMillis)\n         {\n-          return timeMillis - MILLIS_IN;\n+          return timeMillis + MILLIS_IN;\n         }\n \n         @Override\n", "projectName": "druid-io.druid", "bugLineNum": 276, "bugNodeStartChar": 7110, "bugNodeLength": 22, "fixLineNum": 276, "fixNodeStartChar": 7110, "fixNodeLength": 22, "sourceBeforeFix": "timeMillis - MILLIS_IN", "sourceAfterFix": "timeMillis + MILLIS_IN"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "7540dd58cad2662684c60f7ebc5d86b4841382c3", "fixCommitParentSHA1": "e2862fe1fbad834faf83d83942fbf8e28a2d73f2", "bugFilePath": "server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java", "fixPatch": "diff --git a/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java b/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java\nindex 81e8d5e..8679daf 100644\n--- a/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java\n+++ b/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java\n@@ -926,7 +926,8 @@\n         Lists.<String>newArrayList(),\n         Lists.<String>newArrayList(),\n         new NoneShardSpec(),\n-        1\n+        1,\n+        0\n     );\n \n     afterParams = ruleRunner.run(\n@@ -971,7 +972,8 @@\n         Lists.<String>newArrayList(),\n         Lists.<String>newArrayList(),\n         new NoneShardSpec(),\n-        1\n+        1,\n+        0\n     );\n     List<DataSegment> longerAvailableSegments = Lists.newArrayList(availableSegments);\n     longerAvailableSegments.add(overFlowSegment);\n", "projectName": "druid-io.druid", "bugLineNum": 921, "bugNodeStartChar": 33506, "bugNodeLength": 278, "fixLineNum": 921, "fixNodeStartChar": 33506, "fixNodeLength": 289, "sourceBeforeFix": "new DataSegment(\"test\",new Interval(\"2012-02-01/2012-02-02\"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)", "sourceAfterFix": "new DataSegment(\"test\",new Interval(\"2012-02-01/2012-02-02\"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "7540dd58cad2662684c60f7ebc5d86b4841382c3", "fixCommitParentSHA1": "e2862fe1fbad834faf83d83942fbf8e28a2d73f2", "bugFilePath": "server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java", "fixPatch": "diff --git a/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java b/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java\nindex 81e8d5e..8679daf 100644\n--- a/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java\n+++ b/server/src/test/java/com/metamx/druid/master/DruidMasterRuleRunnerTest.java\n@@ -926,7 +926,8 @@\n         Lists.<String>newArrayList(),\n         Lists.<String>newArrayList(),\n         new NoneShardSpec(),\n-        1\n+        1,\n+        0\n     );\n \n     afterParams = ruleRunner.run(\n@@ -971,7 +972,8 @@\n         Lists.<String>newArrayList(),\n         Lists.<String>newArrayList(),\n         new NoneShardSpec(),\n-        1\n+        1,\n+        0\n     );\n     List<DataSegment> longerAvailableSegments = Lists.newArrayList(availableSegments);\n     longerAvailableSegments.add(overFlowSegment);\n", "projectName": "druid-io.druid", "bugLineNum": 966, "bugNodeStartChar": 35307, "bugNodeLength": 278, "fixLineNum": 966, "fixNodeStartChar": 35307, "fixNodeLength": 289, "sourceBeforeFix": "new DataSegment(\"test\",new Interval(\"2012-02-01/2012-02-02\"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)", "sourceAfterFix": "new DataSegment(\"test\",new Interval(\"2012-02-01/2012-02-02\"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "db556102db1b01327240df5c6265df1912104ec3", "fixCommitParentSHA1": "f9386c36231f158e62731bc09f3182f1e6e6aa47", "bugFilePath": "server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java b/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\nindex 41553b4..5607872 100644\n--- a/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\n+++ b/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\n@@ -52,7 +52,7 @@\n \n         // Also account for queued segments\n         for (DataSegment segment : serverHolder.getPeon().getSegmentsToLoad()) {\n-          Integer numReplicants = segmentsInCluster.get(segment.getIdentifier(), server.getTier());\n+          Integer numReplicants = loadingSegments.get(segment.getIdentifier(), server.getTier());\n           if (numReplicants == null) {\n             numReplicants = 0;\n           }\n", "projectName": "druid-io.druid", "bugLineNum": 55, "bugNodeStartChar": 2230, "bugNodeLength": 64, "fixLineNum": 55, "fixNodeStartChar": 2230, "fixNodeLength": 62, "sourceBeforeFix": "segmentsInCluster.get(segment.getIdentifier(),server.getTier())", "sourceAfterFix": "loadingSegments.get(segment.getIdentifier(),server.getTier())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "db556102db1b01327240df5c6265df1912104ec3", "fixCommitParentSHA1": "f9386c36231f158e62731bc09f3182f1e6e6aa47", "bugFilePath": "server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java b/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\nindex 41553b4..5607872 100644\n--- a/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\n+++ b/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\n@@ -52,7 +52,7 @@\n \n         // Also account for queued segments\n         for (DataSegment segment : serverHolder.getPeon().getSegmentsToLoad()) {\n-          Integer numReplicants = segmentsInCluster.get(segment.getIdentifier(), server.getTier());\n+          Integer numReplicants = loadingSegments.get(segment.getIdentifier(), server.getTier());\n           if (numReplicants == null) {\n             numReplicants = 0;\n           }\n", "projectName": "druid-io.druid", "bugLineNum": 55, "bugNodeStartChar": 2230, "bugNodeLength": 64, "fixLineNum": 55, "fixNodeStartChar": 2230, "fixNodeLength": 62, "sourceBeforeFix": "segmentsInCluster.get(segment.getIdentifier(),server.getTier())", "sourceAfterFix": "loadingSegments.get(segment.getIdentifier(),server.getTier())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "884da334b2b75ff063dabcbd6470938697ae7ff8", "fixCommitParentSHA1": "0821dce8c134b87bb9fbab0c04d858bde17e546e", "bugFilePath": "server/src/main/java/com/metamx/druid/master/rules/LoadRule.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java b/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java\nindex ab093f4..fea94f8 100644\n--- a/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java\n+++ b/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java\n@@ -84,7 +84,7 @@\n         break;\n       }\n       if (holder.containsSegment(segment)) {\n-        serverQueue.add(holder);\n+        assignedServers.add(holder);\n         continue;\n       }\n \n", "projectName": "druid-io.druid", "bugLineNum": 87, "bugNodeStartChar": 3156, "bugNodeLength": 23, "fixLineNum": 87, "fixNodeStartChar": 3156, "fixNodeLength": 27, "sourceBeforeFix": "serverQueue.add(holder)", "sourceAfterFix": "assignedServers.add(holder)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "884da334b2b75ff063dabcbd6470938697ae7ff8", "fixCommitParentSHA1": "0821dce8c134b87bb9fbab0c04d858bde17e546e", "bugFilePath": "server/src/main/java/com/metamx/druid/master/rules/LoadRule.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java b/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java\nindex ab093f4..fea94f8 100644\n--- a/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java\n+++ b/server/src/main/java/com/metamx/druid/master/rules/LoadRule.java\n@@ -84,7 +84,7 @@\n         break;\n       }\n       if (holder.containsSegment(segment)) {\n-        serverQueue.add(holder);\n+        assignedServers.add(holder);\n         continue;\n       }\n \n", "projectName": "druid-io.druid", "bugLineNum": 87, "bugNodeStartChar": 3156, "bugNodeLength": 23, "fixLineNum": 87, "fixNodeStartChar": 3156, "fixNodeLength": 27, "sourceBeforeFix": "serverQueue.add(holder)", "sourceAfterFix": "assignedServers.add(holder)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "404f6322c65eac5a8b4aea4205cab1f79988e9f4", "fixCommitParentSHA1": "9eb28254f8b84e2607b9a3a0c623874b9bebd16b", "bugFilePath": "server/src/main/java/com/metamx/druid/master/ServerHolder.java", "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/ServerHolder.java b/server/src/main/java/com/metamx/druid/master/ServerHolder.java\nindex 662aca0..6cf4d65 100644\n--- a/server/src/main/java/com/metamx/druid/master/ServerHolder.java\n+++ b/server/src/main/java/com/metamx/druid/master/ServerHolder.java\n@@ -96,7 +96,7 @@\n \n   public boolean containsSegment(DataSegment segment)\n   {\n-    return (server.getSegment(segment.getIdentifier()) != null && peon.getSegmentsToLoad().contains(segment));\n+    return (server.getSegment(segment.getIdentifier()) != null || peon.getSegmentsToLoad().contains(segment));\n   }\n \n   @Override\n", "projectName": "druid-io.druid", "bugLineNum": 99, "bugNodeStartChar": 2380, "bugNodeLength": 96, "fixLineNum": 99, "fixNodeStartChar": 2380, "fixNodeLength": 96, "sourceBeforeFix": "server.getSegment(segment.getIdentifier()) != null && peon.getSegmentsToLoad().contains(segment)", "sourceAfterFix": "server.getSegment(segment.getIdentifier()) != null || peon.getSegmentsToLoad().contains(segment)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c6e641e81964da8454021be53adb1e585eaf38e0", "fixCommitParentSHA1": "01dc787261af1989715258e7fe3b2d635e135d73", "bugFilePath": "client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java", "fixPatch": "diff --git a/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java b/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java\nindex 3ad6de4..5486a9e 100644\n--- a/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java\n+++ b/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java\n@@ -131,6 +131,6 @@\n   }\n \n   private String computeKey(String identifier, byte[] key) {\n-    return identifier + Base64.encodeBytes(key);\n+    return identifier + Base64.encodeBytes(key, Base64.DONT_BREAK_LINES);\n   }\n }\n", "projectName": "druid-io.druid", "bugLineNum": 134, "bugNodeStartChar": 4033, "bugNodeLength": 23, "fixLineNum": 134, "fixNodeStartChar": 4033, "fixNodeLength": 48, "sourceBeforeFix": "Base64.encodeBytes(key)", "sourceAfterFix": "Base64.encodeBytes(key,Base64.DONT_BREAK_LINES)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "fixCommitParentSHA1": "5859599365d419aa7aa8117b180512884a4d8f6f", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java b/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java\nindex f7e5fbe..d7ab574 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java\n@@ -480,7 +480,7 @@\n                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n-            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n+            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());\n", "projectName": "druid-io.druid", "bugLineNum": 483, "bugNodeStartChar": 16224, "bugNodeLength": 23, "fixLineNum": 483, "fixNodeStartChar": 16224, "fixNodeLength": 24, "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "fixCommitParentSHA1": "5859599365d419aa7aa8117b180512884a4d8f6f", "bugFilePath": "merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java", "fixPatch": "diff --git a/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java b/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java\nindex f7e5fbe..d7ab574 100644\n--- a/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java\n+++ b/merger/src/main/java/com/metamx/druid/merger/coordinator/http/IndexerCoordinatorNode.java\n@@ -480,7 +480,7 @@\n                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n-            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n+            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());\n", "projectName": "druid-io.druid", "bugLineNum": 483, "bugNodeStartChar": 16224, "bugNodeLength": 23, "fixLineNum": 483, "fixNodeStartChar": 16224, "fixNodeLength": 24, "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}]