[{"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2abaf505706d9a0f324a5ce42f739a2cd4f2d801", "fixCommitParentSHA1": "642c9166f486e318fa6154763cce084de50d2a6b", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandlerTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandlerTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandlerTest.java\nindex 6238d0e..dbffc26 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandlerTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandlerTest.java\n@@ -66,7 +66,7 @@\n     public void testWebSocketServerProtocolHandshakeHandlerReplacedBeforeHandshake() throws Exception {\n         EmbeddedChannel ch = createChannel(new MockOutboundHandler());\n         ChannelHandlerContext handshakerCtx = ch.pipeline().context(WebSocketServerProtocolHandshakeHandler.class);\n-        ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n+        ch.pipeline().addLast(new ChannelHandler() {\n             @Override\n             public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                 if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {\n", "projectName": "netty.netty", "bugLineNum": 69, "bugNodeStartChar": 2764, "bugNodeLength": 458, "fixLineNum": 69, "fixNodeStartChar": 2764, "fixNodeLength": 444, "sourceBeforeFix": "new ChannelInboundHandlerAdapter(){   @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {     if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {       assertNull(ctx.pipeline().context(WebSocketServerProtocolHandshakeHandler.class));     }   } } ", "sourceAfterFix": "new ChannelHandler(){   @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {     if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {       assertNull(ctx.pipeline().context(WebSocketServerProtocolHandshakeHandler.class));     }   } } "}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "fc33d6ae99e12f7e90036ec057644e7fd18ff413", "fixCommitParentSHA1": "7a375a492c08deee6ead242e03f4ecd694598993", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpClientCodecTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpClientCodecTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpClientCodecTest.java\nindex cb16a05..5d5dd54 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpClientCodecTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpClientCodecTest.java\n@@ -332,7 +332,7 @@\n         String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                 \"Content-Length: 0\\r\\n\\r\\n\";\n \n-        HttpClientCodec codec = new HttpClientCodec(4096, 8192, 8192, true);\n+        HttpClientCodec codec = new HttpClientCodec(4096, 8192, true);\n         EmbeddedChannel ch = new EmbeddedChannel(codec, new HttpObjectAggregator(1024));\n \n         HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"http://localhost/\");\n", "projectName": "netty.netty", "bugLineNum": 335, "bugNodeStartChar": 15263, "bugNodeLength": 43, "fixLineNum": 335, "fixNodeStartChar": 15263, "fixNodeLength": 37, "sourceBeforeFix": "new HttpClientCodec(4096,8192,8192,true)", "sourceAfterFix": "new HttpClientCodec(4096,8192,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d951140c565a081bf952a44c2fc9585cfc824e51", "fixCommitParentSHA1": "e177b74874c34770420c081035bff651c7b63251", "bugFilePath": "handler/src/test/java/io/netty/handler/flow/FlowControlHandlerTest.java", "fixPatch": "diff --git a/handler/src/test/java/io/netty/handler/flow/FlowControlHandlerTest.java b/handler/src/test/java/io/netty/handler/flow/FlowControlHandlerTest.java\nindex 2a9deb7..c0a6e8a 100644\n--- a/handler/src/test/java/io/netty/handler/flow/FlowControlHandlerTest.java\n+++ b/handler/src/test/java/io/netty/handler/flow/FlowControlHandlerTest.java\n@@ -373,7 +373,7 @@\n         final Exchanger<Channel> peerRef = new Exchanger<Channel>();\n         final CountDownLatch latch = new CountDownLatch(3);\n         final AtomicReference<Throwable> causeRef = new AtomicReference<Throwable>();\n-        ChannelInboundHandlerAdapter handler = new ChannelDuplexHandler() {\n+        ChannelHandler handler = new ChannelHandler() {\n             @Override\n             public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                 ctx.fireChannelActive();\n", "projectName": "netty.netty", "bugLineNum": 376, "bugNodeStartChar": 13472, "bugNodeLength": 638, "fixLineNum": 376, "fixNodeStartChar": 13472, "fixNodeLength": 618, "sourceBeforeFix": "ChannelInboundHandlerAdapter handler=new ChannelDuplexHandler(){   @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {     ctx.fireChannelActive();     peerRef.exchange(ctx.channel(),1L,SECONDS);   }   @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg){     latch.countDown();     ctx.read();   }   @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause){     causeRef.set(cause);   } } ; ", "sourceAfterFix": "ChannelHandler handler=new ChannelHandler(){   @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {     ctx.fireChannelActive();     peerRef.exchange(ctx.channel(),1L,SECONDS);   }   @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg){     latch.countDown();     ctx.read();   }   @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause){     causeRef.set(cause);   } } ; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "db1e662933707e5be7f0838667dd062e968900e0", "fixCommitParentSHA1": "acd13e1cf701bcca11f624932b572dacbf2d7a37", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java b/codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java\nindex bd630f7..b825b86 100644\n--- a/codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java\n+++ b/codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java\n@@ -51,7 +51,7 @@\n     private static Method updateByteBuffer(Checksum checksum) {\n         try {\n             Method method = checksum.getClass().getDeclaredMethod(\"update\", ByteBuffer.class);\n-            method.invoke(method, ByteBuffer.allocate(1));\n+            method.invoke(checksum, ByteBuffer.allocate(1));\n             return method;\n         } catch (Throwable ignore) {\n             return null;\n", "projectName": "netty.netty", "bugLineNum": 54, "bugNodeStartChar": 1971, "bugNodeLength": 45, "fixLineNum": 54, "fixNodeStartChar": 1971, "fixNodeLength": 47, "sourceBeforeFix": "method.invoke(method,ByteBuffer.allocate(1))", "sourceAfterFix": "method.invoke(checksum,ByteBuffer.allocate(1))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c6b372f517dc691910552f18db1ada3c3a4127f2", "fixCommitParentSHA1": "71d8d057e68834f711f7f38fe54a97b782550d60", "bugFilePath": "handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java", "fixPatch": "diff --git a/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java\nindex 278eb10..6979295 100644\n--- a/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java\n+++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java\n@@ -171,7 +171,7 @@\n     }\n \n     @Override\n-    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws HttpProxyConnectException {\n+    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws Exception {\n         if (response instanceof HttpResponse) {\n             if (status != null) {\n                 throw new HttpProxyConnectException(exceptionMessage(\"too many responses\"), /*headers=*/ null);\n", "projectName": "netty.netty", "bugLineNum": 173, "bugNodeStartChar": 5987, "bugNodeLength": 926, "fixLineNum": 173, "fixNodeStartChar": 5987, "fixNodeLength": 910, "sourceBeforeFix": "@Override protected boolean handleResponse(ChannelHandlerContext ctx,Object response) throws HttpProxyConnectException {   if (response instanceof HttpResponse) {     if (status != null) {       throw new HttpProxyConnectException(exceptionMessage(\"too many responses\"),null);     }     HttpResponse res=(HttpResponse)response;     status=res.status();     inboundHeaders=res.headers();   }   boolean finished=response instanceof LastHttpContent;   if (finished) {     if (status == null) {       throw new HttpProxyConnectException(exceptionMessage(\"missing response\"),inboundHeaders);     }     if (status.code() != 200) {       throw new HttpProxyConnectException(exceptionMessage(\"status: \" + status),inboundHeaders);     }   }   return finished; } ", "sourceAfterFix": "@Override protected boolean handleResponse(ChannelHandlerContext ctx,Object response) throws Exception {   if (response instanceof HttpResponse) {     if (status != null) {       throw new HttpProxyConnectException(exceptionMessage(\"too many responses\"),null);     }     HttpResponse res=(HttpResponse)response;     status=res.status();     inboundHeaders=res.headers();   }   boolean finished=response instanceof LastHttpContent;   if (finished) {     if (status == null) {       throw new HttpProxyConnectException(exceptionMessage(\"missing response\"),inboundHeaders);     }     if (status.code() != 200) {       throw new HttpProxyConnectException(exceptionMessage(\"status: \" + status),inboundHeaders);     }   }   return finished; } "}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "23190bd7878076b4c9518c38d16fd1b4fab969a4", "fixCommitParentSHA1": "1bc7c4900c09bc61179124adbfa6b28a24a0c5fd", "bugFilePath": "common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java\nindex 0b3b29e..bc55533 100644\n--- a/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java\n+++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java\n@@ -218,10 +218,13 @@\n             try {\n                 if (tmpFile != null && tmpFile.isFile() && tmpFile.canRead() &&\n                     !NoexecVolumeDetector.canExecuteExecutable(tmpFile)) {\n+                    // Pass \"io.netty.native.workdir\" as an argument to allow shading tools to see\n+                    // the string. Since this is printed out to users to tell them what to do next,\n+                    // we want the value to be correct even when shading.\n                     logger.info(\"{} exists but cannot be executed even when execute permissions set; \" +\n-                                \"check volume for \\\"noexec\\\" flag; use -Dio.netty.native.workdir=[path] \" +\n+                                \"check volume for \\\"noexec\\\" flag; use -D{}=[path] \" +\n                                 \"to set native working directory separately.\",\n-                                tmpFile.getPath());\n+                                tmpFile.getPath(), \"io.netty.native.workdir\");\n                 }\n             } catch (Throwable t) {\n                 suppressed.add(t);\n", "projectName": "netty.netty", "bugLineNum": 221, "bugNodeStartChar": 8913, "bugNodeLength": 322, "fixLineNum": 221, "fixNodeStartChar": 8913, "fixNodeLength": 349, "sourceBeforeFix": "logger.info(\"{} exists but cannot be executed even when execute permissions set; \" + \"check volume for \\\"noexec\\\" flag; use -Dio.netty.native.workdir=[path] \" + \"to set native working directory separately.\",tmpFile.getPath())", "sourceAfterFix": "logger.info(\"{} exists but cannot be executed even when execute permissions set; \" + \"check volume for \\\"noexec\\\" flag; use -Dio.netty.native.workdir=[path] \" + \"to set native working directory separately.\",tmpFile.getPath(),\"io.netty.native.workdir\")"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "5b239150f1c02189f2a3e17c6fd92f652dc267f5", "fixCommitParentSHA1": "e114d6be46c7d2d81c3198dc492190adac37836a", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\nindex 0d3307a..8a6f6da 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n@@ -1331,7 +1331,7 @@\n         private final Unsafe unsafe;\n \n         HeadContext(DefaultChannelPipeline pipeline) {\n-            super(pipeline, null, HEAD_NAME, false, true);\n+            super(pipeline, null, HEAD_NAME, true, true);\n             unsafe = pipeline.channel().unsafe();\n             setAddComplete();\n         }\n", "projectName": "netty.netty", "bugLineNum": 1334, "bugNodeStartChar": 45501, "bugNodeLength": 46, "fixLineNum": 1334, "fixNodeStartChar": 45501, "fixNodeLength": 45, "sourceBeforeFix": "super(pipeline,null,HEAD_NAME,false,true); ", "sourceAfterFix": "super(pipeline,null,HEAD_NAME,true,true); "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a80c49828f8d52b70e68b8a4c80f677ca44af0af", "fixCommitParentSHA1": "01db30a163819b34cd9f96fb40526c93b48e7534", "bugFilePath": "handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java", "fixPatch": "diff --git a/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java b/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java\nindex 813e599..2abc33e 100644\n--- a/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java\n+++ b/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java\n@@ -340,7 +340,7 @@\n                                 public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                                     if (cause.getCause() instanceof SSLException) {\n                                         // We received the alert and so produce an SSLException.\n-                                        promise.setSuccess(null);\n+                                        promise.trySuccess(null);\n                                     }\n                                 }\n                             });\n", "projectName": "netty.netty", "bugLineNum": 343, "bugNodeStartChar": 17574, "bugNodeLength": 24, "fixLineNum": 343, "fixNodeStartChar": 17574, "fixNodeLength": 24, "sourceBeforeFix": "promise.setSuccess(null)", "sourceAfterFix": "promise.trySuccess(null)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a80c49828f8d52b70e68b8a4c80f677ca44af0af", "fixCommitParentSHA1": "01db30a163819b34cd9f96fb40526c93b48e7534", "bugFilePath": "handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java", "fixPatch": "diff --git a/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java b/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java\nindex 813e599..2abc33e 100644\n--- a/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java\n+++ b/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java\n@@ -340,7 +340,7 @@\n                                 public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                                     if (cause.getCause() instanceof SSLException) {\n                                         // We received the alert and so produce an SSLException.\n-                                        promise.setSuccess(null);\n+                                        promise.trySuccess(null);\n                                     }\n                                 }\n                             });\n", "projectName": "netty.netty", "bugLineNum": 343, "bugNodeStartChar": 17574, "bugNodeLength": 24, "fixLineNum": 343, "fixNodeStartChar": 17574, "fixNodeLength": 24, "sourceBeforeFix": "promise.setSuccess(null)", "sourceAfterFix": "promise.trySuccess(null)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ea626ef8c390dc81c71b3a16521cf591611bc5df", "fixCommitParentSHA1": "79706357c73ded02615d0445db7503b646ff9547", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java\nindex f902e00..d964509 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java\n@@ -798,7 +798,7 @@\n                             return newResult(BUFFER_OVERFLOW, status, bytesConsumed, bytesProduced);\n                         } else {\n                             // Everything else is considered as error\n-                            throw shutdownWithError(\"SSL_write\");\n+                            throw shutdownWithError(\"SSL_write\", sslError);\n                         }\n                     }\n                 }\n@@ -855,14 +855,14 @@\n     /**\n      * Log the error, shutdown the engine and throw an exception.\n      */\n-    private SSLException shutdownWithError(String operations) {\n+    private SSLException shutdownWithError(String operations, int sslError) {\n         String err = SSL.getLastError();\n-        return shutdownWithError(operations, err);\n+        return shutdownWithError(operations, sslError, err);\n     }\n \n-    private SSLException shutdownWithError(String operation, String err) {\n+    private SSLException shutdownWithError(String operation, int sslError, String err) {\n         if (logger.isDebugEnabled()) {\n-            logger.debug(\"{} failed: OpenSSL error: {}\", operation, err);\n+            logger.debug(\"{} failed with {}: OpenSSL error: {}\", operation, sslError, err);\n         }\n \n         // There was an internal error -- shutdown\n@@ -1074,7 +1074,7 @@\n                                     return newResultMayFinishHandshake(isInboundDone() ? CLOSED : OK, status,\n                                                                        bytesConsumed, bytesProduced);\n                                 } else {\n-                                    return sslReadErrorResult(SSL.getLastErrorNumber(), bytesConsumed,\n+                                    return sslReadErrorResult(sslError, SSL.getLastErrorNumber(), bytesConsumed,\n                                                               bytesProduced);\n                                 }\n                             }\n@@ -1103,7 +1103,8 @@\n         }\n     }\n \n-    private SSLEngineResult sslReadErrorResult(int err, int bytesConsumed, int bytesProduced) throws SSLException {\n+    private SSLEngineResult sslReadErrorResult(int error, int stackError, int bytesConsumed, int bytesProduced)\n+            throws SSLException {\n         // Check if we have a pending handshakeException and if so see if we need to consume all pending data from the\n         // BIO first or can just shutdown and throw it now.\n         // This is needed so we ensure close_notify etc is correctly send to the remote peer.\n@@ -1112,14 +1113,14 @@\n             if (handshakeException == null && handshakeState != HandshakeState.FINISHED) {\n                 // we seems to have data left that needs to be transfered and so the user needs\n                 // call wrap(...). Store the error so we can pick it up later.\n-                handshakeException = new SSLHandshakeException(SSL.getErrorString(err));\n+                handshakeException = new SSLHandshakeException(SSL.getErrorString(stackError));\n             }\n             // We need to clear all errors so we not pick up anything that was left on the stack on the next\n             // operation. Note that shutdownWithError(...) will cleanup the stack as well so its only needed here.\n             SSL.clearError();\n             return new SSLEngineResult(OK, NEED_WRAP, bytesConsumed, bytesProduced);\n         }\n-        throw shutdownWithError(\"SSL_read\", SSL.getErrorString(err));\n+        throw shutdownWithError(\"SSL_read\", error, SSL.getErrorString(stackError));\n     }\n \n     private void closeAll() throws SSLException {\n@@ -1588,7 +1589,7 @@\n                 return pendingStatus(SSL.bioLengthNonApplication(networkBIO));\n             } else {\n                 // Everything else is considered as error\n-                throw shutdownWithError(\"SSL_do_handshake\");\n+                throw shutdownWithError(\"SSL_do_handshake\", sslError);\n             }\n         }\n         // if SSL_do_handshake returns > 0 or sslError == SSL.SSL_ERROR_NAME it means the handshake was finished.\n", "projectName": "netty.netty", "bugLineNum": 1115, "bugNodeStartChar": 52549, "bugNodeLength": 23, "fixLineNum": 1115, "fixNodeStartChar": 52549, "fixNodeLength": 30, "sourceBeforeFix": "SSL.getErrorString(err)", "sourceAfterFix": "SSL.getErrorString(stackError)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "092073893201d515eb2ee375849efae7cc9065db", "fixCommitParentSHA1": "cda4f88ca247d3a028deed52e6024cbf5a880b12", "bugFilePath": "common/src/main/java/io/netty/util/internal/PlatformDependent0.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java\nindex 7d56356..c6ebb55 100644\n--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java\n+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java\n@@ -368,7 +368,7 @@\n     }\n \n     static boolean isExplicitNoUnsafe() {\n-        return EXPLICIT_NO_UNSAFE_CAUSE == null;\n+        return EXPLICIT_NO_UNSAFE_CAUSE != null;\n     }\n \n     private static Throwable explicitNoUnsafeCause0() {\n", "projectName": "netty.netty", "bugLineNum": 371, "bugNodeStartChar": 17580, "bugNodeLength": 32, "fixLineNum": 371, "fixNodeStartChar": 17580, "fixNodeLength": 32, "sourceBeforeFix": "EXPLICIT_NO_UNSAFE_CAUSE == null", "sourceAfterFix": "EXPLICIT_NO_UNSAFE_CAUSE != null"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "47985c11c1d9f11b94018539108ed65f0c6a32ab", "fixCommitParentSHA1": "0bce0450c05697df6ff77a0a14183ee53a00053f", "bugFilePath": "handler/src/test/java/io/netty/handler/ssl/OpenSslErrorStackAssertSSLEngine.java", "fixPatch": "diff --git a/handler/src/test/java/io/netty/handler/ssl/OpenSslErrorStackAssertSSLEngine.java b/handler/src/test/java/io/netty/handler/ssl/OpenSslErrorStackAssertSSLEngine.java\nindex 8d43612..af71f72 100644\n--- a/handler/src/test/java/io/netty/handler/ssl/OpenSslErrorStackAssertSSLEngine.java\n+++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslErrorStackAssertSSLEngine.java\n@@ -416,7 +416,7 @@\n \n     @Override\n     public boolean release(int decrement) {\n-        return getWrappedEngine().release();\n+        return getWrappedEngine().release(decrement);\n     }\n \n     @Override\n", "projectName": "netty.netty", "bugLineNum": 419, "bugNodeStartChar": 10952, "bugNodeLength": 28, "fixLineNum": 419, "fixNodeStartChar": 10952, "fixNodeLength": 37, "sourceBeforeFix": "getWrappedEngine().release()", "sourceAfterFix": "getWrappedEngine().release(decrement)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ee9057ad99b9cc95140ee3e56265f32b6a28d709", "fixCommitParentSHA1": "473f6a6edb8353728ea8e711ac8241ddc21adf08", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java\nindex f4b5552..9e77565 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java\n@@ -205,7 +205,7 @@\n                 setExposeHeaders(response);\n             }\n         }\n-        ctx.writeAndFlush(msg, promise);\n+        ctx.write(msg, promise);\n     }\n \n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {\n", "projectName": "netty.netty", "bugLineNum": 208, "bugNodeStartChar": 8148, "bugNodeLength": 31, "fixLineNum": 208, "fixNodeStartChar": 8148, "fixNodeLength": 23, "sourceBeforeFix": "ctx.writeAndFlush(msg,promise)", "sourceAfterFix": "ctx.write(msg,promise)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ee9057ad99b9cc95140ee3e56265f32b6a28d709", "fixCommitParentSHA1": "473f6a6edb8353728ea8e711ac8241ddc21adf08", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java\nindex f4b5552..9e77565 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java\n@@ -205,7 +205,7 @@\n                 setExposeHeaders(response);\n             }\n         }\n-        ctx.writeAndFlush(msg, promise);\n+        ctx.write(msg, promise);\n     }\n \n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {\n", "projectName": "netty.netty", "bugLineNum": 208, "bugNodeStartChar": 8148, "bugNodeLength": 31, "fixLineNum": 208, "fixNodeStartChar": 8148, "fixNodeLength": 23, "sourceBeforeFix": "ctx.writeAndFlush(msg,promise)", "sourceAfterFix": "ctx.write(msg,promise)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "fixCommitParentSHA1": "95b02e49ac914972ac27c35bcb3272f8ca3956a4", "bugFilePath": "transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java", "fixPatch": "diff --git a/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java\nindex d23f8a2..eade60d 100644\n--- a/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java\n+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java\n@@ -302,7 +302,7 @@\n     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n-            ReferenceCountUtil.safeRelease(holder);\n+            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 305, "bugNodeStartChar": 10927, "bugNodeLength": 38, "fixLineNum": 305, "fixNodeStartChar": 10927, "fixNodeLength": 34, "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "fixCommitParentSHA1": "95b02e49ac914972ac27c35bcb3272f8ca3956a4", "bugFilePath": "transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java", "fixPatch": "diff --git a/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java\nindex d23f8a2..eade60d 100644\n--- a/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java\n+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java\n@@ -302,7 +302,7 @@\n     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n-            ReferenceCountUtil.safeRelease(holder);\n+            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 305, "bugNodeStartChar": 10927, "bugNodeLength": 38, "fixLineNum": 305, "fixNodeStartChar": 10927, "fixNodeLength": 34, "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "fixCommitParentSHA1": "95b02e49ac914972ac27c35bcb3272f8ca3956a4", "bugFilePath": "transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java", "fixPatch": "diff --git a/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java\nindex 020f651..fcab02e 100644\n--- a/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java\n+++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java\n@@ -248,7 +248,7 @@\n     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n-            ReferenceCountUtil.safeRelease(holder);\n+            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 251, "bugNodeStartChar": 9653, "bugNodeLength": 38, "fixLineNum": 251, "fixNodeStartChar": 9653, "fixNodeLength": 34, "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "fixCommitParentSHA1": "95b02e49ac914972ac27c35bcb3272f8ca3956a4", "bugFilePath": "transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java", "fixPatch": "diff --git a/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java\nindex 020f651..fcab02e 100644\n--- a/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java\n+++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java\n@@ -248,7 +248,7 @@\n     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n-            ReferenceCountUtil.safeRelease(holder);\n+            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 251, "bugNodeStartChar": 9653, "bugNodeLength": 38, "fixLineNum": 251, "fixNodeStartChar": 9653, "fixNodeLength": 34, "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "7321418eb550ff5737b11acbc2843b29b466e968", "fixCommitParentSHA1": "fa584c146f96bd3448f0b06fac8708e5d5b48480", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java\nindex 221900c..709214c 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java\n@@ -1115,7 +1115,10 @@\n     }\n \n     private void rejectRemoteInitiatedRenegotiation() throws SSLHandshakeException {\n-        if (rejectRemoteInitiatedRenegotiation && SSL.getHandshakeCount(ssl) > 1) {\n+        // As rejectRemoteInitiatedRenegotiation() is called in a finally block we also need to check if we shutdown\n+        // the engine before as otherwise SSL.getHandshakeCount(ssl) will throw an NPE if the passed in ssl is 0.\n+        // See https://github.com/netty/netty/issues/7353\n+        if (rejectRemoteInitiatedRenegotiation && !isDestroyed() && SSL.getHandshakeCount(ssl) > 1) {\n             // TODO: In future versions me may also want to send a fatal_alert to the client and so notify it\n             // that the renegotiation failed.\n             shutdown();\n", "projectName": "netty.netty", "bugLineNum": 1118, "bugNodeStartChar": 51983, "bugNodeLength": 68, "fixLineNum": 1121, "fixNodeStartChar": 52272, "fixNodeLength": 86, "sourceBeforeFix": "rejectRemoteInitiatedRenegotiation && SSL.getHandshakeCount(ssl) > 1", "sourceAfterFix": "rejectRemoteInitiatedRenegotiation && !isDestroyed() && SSL.getHandshakeCount(ssl) > 1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3b5dd4e9dc0b6e350d27a2628b3f37b2483fe4a9", "fixCommitParentSHA1": "ba3616da3edf843412bc366f5dde533f3aef1add", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java\nindex 205316b..cd05da1 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java\n@@ -147,7 +147,7 @@\n     /**\n      * {@code \"content-security-policy\"}\n      */\n-    public static final CharSequence CONTENT_SECURITY_POLICY = new AsciiString(\"content-security-policy\");\n+    public static final AsciiString CONTENT_SECURITY_POLICY = new AsciiString(\"content-security-policy\");\n     /**\n      * {@code \"content-type\"}\n      */\n@@ -353,7 +353,7 @@\n     /**\n      * {@code \"x-frame-options\"}\n      */\n-    public static final CharSequence X_FRAME_OPTIONS = new AsciiString(\"x-frame-options\");\n+    public static final AsciiString X_FRAME_OPTIONS = new AsciiString(\"x-frame-options\");\n \n     private HttpHeaderNames() { }\n }\n", "projectName": "netty.netty", "bugLineNum": 147, "bugNodeStartChar": 5136, "bugNodeLength": 159, "fixLineNum": 147, "fixNodeStartChar": 5136, "fixNodeLength": 158, "sourceBeforeFix": "/**   * {@code \"content-security-policy\"}  */ public static final CharSequence CONTENT_SECURITY_POLICY=new AsciiString(\"content-security-policy\"); ", "sourceAfterFix": "/**   * {@code \"content-security-policy\"}  */ public static final AsciiString CONTENT_SECURITY_POLICY=new AsciiString(\"content-security-policy\"); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3b5dd4e9dc0b6e350d27a2628b3f37b2483fe4a9", "fixCommitParentSHA1": "ba3616da3edf843412bc366f5dde533f3aef1add", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java\nindex 205316b..cd05da1 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderNames.java\n@@ -147,7 +147,7 @@\n     /**\n      * {@code \"content-security-policy\"}\n      */\n-    public static final CharSequence CONTENT_SECURITY_POLICY = new AsciiString(\"content-security-policy\");\n+    public static final AsciiString CONTENT_SECURITY_POLICY = new AsciiString(\"content-security-policy\");\n     /**\n      * {@code \"content-type\"}\n      */\n@@ -353,7 +353,7 @@\n     /**\n      * {@code \"x-frame-options\"}\n      */\n-    public static final CharSequence X_FRAME_OPTIONS = new AsciiString(\"x-frame-options\");\n+    public static final AsciiString X_FRAME_OPTIONS = new AsciiString(\"x-frame-options\");\n \n     private HttpHeaderNames() { }\n }\n", "projectName": "netty.netty", "bugLineNum": 353, "bugNodeStartChar": 11767, "bugNodeLength": 135, "fixLineNum": 353, "fixNodeStartChar": 11767, "fixNodeLength": 134, "sourceBeforeFix": "/**   * {@code \"x-frame-options\"}  */ public static final CharSequence X_FRAME_OPTIONS=new AsciiString(\"x-frame-options\"); ", "sourceAfterFix": "/**   * {@code \"x-frame-options\"}  */ public static final AsciiString X_FRAME_OPTIONS=new AsciiString(\"x-frame-options\"); "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "fixCommitParentSHA1": "14ea69cdc1ad3c77b9c5ec088f6a69e7ec565447", "bugFilePath": "transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java", "fixPatch": "diff --git a/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\nindex 60fec62..bb67f8d 100644\n--- a/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\n+++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\n@@ -47,8 +47,7 @@\n     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n-        assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n-\n+        assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n \n         byteBuf = alloc.heapBuffer();\n@@ -56,7 +55,7 @@\n         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n \n-        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n+        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);\n", "projectName": "netty.netty", "bugLineNum": 50, "bugNodeStartChar": 1800, "bugNodeLength": 60, "fixLineNum": 50, "fixNodeStartChar": 1800, "fixNodeLength": 61, "sourceBeforeFix": "assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))", "sourceAfterFix": "assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "fixCommitParentSHA1": "14ea69cdc1ad3c77b9c5ec088f6a69e7ec565447", "bugFilePath": "transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java", "fixPatch": "diff --git a/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\nindex 60fec62..bb67f8d 100644\n--- a/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\n+++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\n@@ -47,8 +47,7 @@\n     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n-        assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n-\n+        assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n \n         byteBuf = alloc.heapBuffer();\n@@ -56,7 +55,7 @@\n         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n \n-        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n+        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);\n", "projectName": "netty.netty", "bugLineNum": 50, "bugNodeStartChar": 1800, "bugNodeLength": 60, "fixLineNum": 50, "fixNodeStartChar": 1800, "fixNodeLength": 61, "sourceBeforeFix": "assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))", "sourceAfterFix": "assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "fixCommitParentSHA1": "14ea69cdc1ad3c77b9c5ec088f6a69e7ec565447", "bugFilePath": "transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java", "fixPatch": "diff --git a/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\nindex 60fec62..bb67f8d 100644\n--- a/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\n+++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixChannelUtilTest.java\n@@ -47,8 +47,7 @@\n     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n-        assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n-\n+        assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n \n         byteBuf = alloc.heapBuffer();\n@@ -56,7 +55,7 @@\n         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n \n-        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n+        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);\n", "projectName": "netty.netty", "bugLineNum": 59, "bugNodeStartChar": 2116, "bugNodeLength": 68, "fixLineNum": 59, "fixNodeStartChar": 2116, "fixNodeLength": 67, "sourceBeforeFix": "assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)", "sourceAfterFix": "assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "eee0ec390231389b32e27f9ab52e279140abd82e", "fixCommitParentSHA1": "1504abd474efd055e73ae75154f879c11e137465", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java\nindex 7ef528f..878a264 100755\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java\n@@ -195,7 +195,14 @@\n         }\n     }\n \n-    boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") H msg) {\n+    /**\n+     * Determine whether a message has a content or not. Some message may have headers indicating\n+     * a content without having an actual content, e.g the response to an HEAD or CONNECT request.\n+     *\n+     * @param msg the message to test\n+     * @return {@code true} to signal the message has no content\n+     */\n+    protected boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") H msg) {\n         return false;\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 198, "bugNodeStartChar": 7973, "bugNodeLength": 93, "fixLineNum": 198, "fixNodeStartChar": 7973, "fixNodeLength": 426, "sourceBeforeFix": "0", "sourceAfterFix": "4"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "eee0ec390231389b32e27f9ab52e279140abd82e", "fixCommitParentSHA1": "1504abd474efd055e73ae75154f879c11e137465", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java\nindex 29a1199..a009df1 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java\n@@ -112,7 +112,7 @@\n     private final class HttpServerResponseEncoder extends HttpResponseEncoder {\n \n         @Override\n-        boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") HttpResponse msg) {\n+        protected boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") HttpResponse msg) {\n             return HttpMethod.HEAD.equals(queue.poll());\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 114, "bugNodeStartChar": 4495, "bugNodeLength": 161, "fixLineNum": 114, "fixNodeStartChar": 4495, "fixNodeLength": 171, "sourceBeforeFix": "0", "sourceAfterFix": "4"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "ca9d1658a00fef7be53abeaf499cb78bdc3a5017", "fixCommitParentSHA1": "61efd81952499aa36ea53b703f94696907364e79", "bugFilePath": "transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpOutboundByteStreamHandler.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpOutboundByteStreamHandler.java b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpOutboundByteStreamHandler.java\nindex 1cd098b..453eb9e 100644\n--- a/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpOutboundByteStreamHandler.java\n+++ b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpOutboundByteStreamHandler.java\n@@ -53,6 +53,6 @@\n \n     @Override\n     protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception {\n-        out.add(new SctpMessage(streamIdentifier, protocolIdentifier, unordered, msg.retain()));\n+        out.add(new SctpMessage(protocolIdentifier, streamIdentifier, unordered, msg.retain()));\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 56, "bugNodeStartChar": 2404, "bugNodeLength": 78, "fixLineNum": 56, "fixNodeStartChar": 2404, "fixNodeLength": 78, "sourceBeforeFix": "new SctpMessage(streamIdentifier,protocolIdentifier,unordered,msg.retain())", "sourceAfterFix": "new SctpMessage(protocolIdentifier,streamIdentifier,unordered,msg.retain())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "fixCommitParentSHA1": "ed1071d327cdd77bf520befda7f62081374e77bc", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\nindex dad2c6f..e4d5c5f 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\n@@ -49,7 +49,7 @@\n import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\n \n-final class HpackDecoder {\n+public final class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");\n@@ -96,7 +96,7 @@\n      *  (which is dangerous).\n      * @param initialHuffmanDecodeCapacity Size of an intermediate buffer used during huffman decode.\n      */\n-    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n+    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n         this(maxHeaderListSize, initialHuffmanDecodeCapacity, DEFAULT_HEADER_TABLE_SIZE);\n     }\n \n@@ -104,7 +104,7 @@\n      * Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally\n      * for testing but violate the RFC if used outside the scope of testing.\n      */\n-    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n+    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n         this.maxHeaderListSize = checkPositive(maxHeaderListSize, \"maxHeaderListSize\");\n         this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);\n \n", "projectName": "netty.netty", "bugLineNum": 52, "bugNodeStartChar": 2361, "bugNodeLength": 21193, "fixLineNum": 52, "fixNodeStartChar": 2361, "fixNodeLength": 21200, "sourceBeforeFix": "16", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "fixCommitParentSHA1": "ed1071d327cdd77bf520befda7f62081374e77bc", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\nindex dad2c6f..e4d5c5f 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\n@@ -49,7 +49,7 @@\n import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\n \n-final class HpackDecoder {\n+public final class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");\n@@ -96,7 +96,7 @@\n      *  (which is dangerous).\n      * @param initialHuffmanDecodeCapacity Size of an intermediate buffer used during huffman decode.\n      */\n-    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n+    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n         this(maxHeaderListSize, initialHuffmanDecodeCapacity, DEFAULT_HEADER_TABLE_SIZE);\n     }\n \n@@ -104,7 +104,7 @@\n      * Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally\n      * for testing but violate the RFC if used outside the scope of testing.\n      */\n-    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n+    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n         this.maxHeaderListSize = checkPositive(maxHeaderListSize, \"maxHeaderListSize\");\n         this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);\n \n", "projectName": "netty.netty", "bugLineNum": 91, "bugNodeStartChar": 5159, "bugNodeLength": 672, "fixLineNum": 91, "fixNodeStartChar": 5159, "fixNodeLength": 679, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "fixCommitParentSHA1": "ed1071d327cdd77bf520befda7f62081374e77bc", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\nindex dad2c6f..e4d5c5f 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java\n@@ -49,7 +49,7 @@\n import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\n \n-final class HpackDecoder {\n+public final class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");\n@@ -96,7 +96,7 @@\n      *  (which is dangerous).\n      * @param initialHuffmanDecodeCapacity Size of an intermediate buffer used during huffman decode.\n      */\n-    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n+    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n         this(maxHeaderListSize, initialHuffmanDecodeCapacity, DEFAULT_HEADER_TABLE_SIZE);\n     }\n \n@@ -104,7 +104,7 @@\n      * Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally\n      * for testing but violate the RFC if used outside the scope of testing.\n      */\n-    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n+    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n         this.maxHeaderListSize = checkPositive(maxHeaderListSize, \"maxHeaderListSize\");\n         this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);\n \n", "projectName": "netty.netty", "bugLineNum": 103, "bugNodeStartChar": 5837, "bugNodeLength": 793, "fixLineNum": 103, "fixNodeStartChar": 5837, "fixNodeLength": 800, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "bf08ed0b93e54e8e21f23e9d948fd2732dc52171", "fixCommitParentSHA1": "aa2f16f3143e46412e3c043b097e0f70f5026196", "bugFilePath": "transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java\nindex ad57262..99173c1 100644\n--- a/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java\n+++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java\n@@ -461,7 +461,7 @@\n             }\n         } catch (Throwable t) {\n             logger.warn(\n-                    \"Failed to set channel option '{}' with value '{}' for channel '{}'\", option, channel, channel, t);\n+                    \"Failed to set channel option '{}' with value '{}' for channel '{}'\", option, value, channel, t);\n         }\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 463, "bugNodeStartChar": 16572, "bugNodeLength": 131, "fixLineNum": 463, "fixNodeStartChar": 16572, "fixNodeLength": 129, "sourceBeforeFix": "logger.warn(\"Failed to set channel option '{}' with value '{}' for channel '{}'\",option,channel,channel,t)", "sourceAfterFix": "logger.warn(\"Failed to set channel option '{}' with value '{}' for channel '{}'\",option,value,channel,t)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "847359fd36c28fa360090459d1243a9603e47786", "fixCommitParentSHA1": "43a2315372a8d642ce4df14db2ebfd001b9538e0", "bugFilePath": "handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java", "fixPatch": "diff --git a/handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java b/handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java\nindex 06dcef0..0c874b1 100644\n--- a/handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java\n+++ b/handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java\n@@ -88,6 +88,6 @@\n     @Override\n     protected boolean mySetupMutualAuthServerIsValidClientException(Throwable cause) {\n         // TODO(scott): work around for a JDK issue. The exception should be SSLHandshakeException.\n-        return super.mySetupMutualAuthServerIsValidException(cause) || cause instanceof SSLException;\n+        return super.mySetupMutualAuthServerIsValidClientException(cause) || cause instanceof SSLException;\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 91, "bugNodeStartChar": 3138, "bugNodeLength": 52, "fixLineNum": 91, "fixNodeStartChar": 3138, "fixNodeLength": 58, "sourceBeforeFix": "super.mySetupMutualAuthServerIsValidException(cause)", "sourceAfterFix": "super.mySetupMutualAuthServerIsValidClientException(cause)"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "f73c4f24ee36c671562840e941c914f79566cf97", "fixCommitParentSHA1": "21e8d84b7961c36435714cdb16eec31ad08213bc", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java\nindex fa37aca..b67a9dc 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java\n@@ -213,7 +213,7 @@\n                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n-                        if (nameLength > maxHeadersLength - headersLength) {\n+                        if (index > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;\n", "projectName": "netty.netty", "bugLineNum": 216, "bugNodeStartChar": 10512, "bugNodeLength": 45, "fixLineNum": 216, "fixNodeStartChar": 10512, "fixNodeLength": 40, "sourceBeforeFix": "nameLength > maxHeadersLength - headersLength", "sourceAfterFix": "index > maxHeadersLength - headersLength"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f73c4f24ee36c671562840e941c914f79566cf97", "fixCommitParentSHA1": "21e8d84b7961c36435714cdb16eec31ad08213bc", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java\nindex fa37aca..b67a9dc 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java\n@@ -213,7 +213,7 @@\n                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n-                        if (nameLength > maxHeadersLength - headersLength) {\n+                        if (index > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;\n", "projectName": "netty.netty", "bugLineNum": 216, "bugNodeStartChar": 10512, "bugNodeLength": 45, "fixLineNum": 216, "fixNodeStartChar": 10512, "fixNodeLength": 40, "sourceBeforeFix": "nameLength > maxHeadersLength - headersLength", "sourceAfterFix": "index > maxHeadersLength - headersLength"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java\nindex 70dbfe9..ac9e08f 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java\n@@ -141,7 +141,7 @@\n             int equalsPos = encoding.indexOf('=');\n             if (equalsPos != -1) {\n                 try {\n-                    q = Float.valueOf(encoding.substring(equalsPos + 1));\n+                    q = Float.parseFloat(encoding.substring(equalsPos + 1));\n                 } catch (NumberFormatException e) {\n                     // Ignore encoding\n                     q = 0.0f;\n", "projectName": "netty.netty", "bugLineNum": 144, "bugNodeStartChar": 5698, "bugNodeLength": 48, "fixLineNum": 144, "fixNodeStartChar": 5698, "fixNodeLength": 51, "sourceBeforeFix": "Float.valueOf(encoding.substring(equalsPos + 1))", "sourceAfterFix": "Float.parseFloat(encoding.substring(equalsPos + 1))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java\nindex 70dbfe9..ac9e08f 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java\n@@ -141,7 +141,7 @@\n             int equalsPos = encoding.indexOf('=');\n             if (equalsPos != -1) {\n                 try {\n-                    q = Float.valueOf(encoding.substring(equalsPos + 1));\n+                    q = Float.parseFloat(encoding.substring(equalsPos + 1));\n                 } catch (NumberFormatException e) {\n                     // Ignore encoding\n                     q = 0.0f;\n", "projectName": "netty.netty", "bugLineNum": 144, "bugNodeStartChar": 5698, "bugNodeLength": 48, "fixLineNum": 144, "fixNodeStartChar": 5698, "fixNodeLength": 51, "sourceBeforeFix": "Float.valueOf(encoding.substring(equalsPos + 1))", "sourceAfterFix": "Float.parseFloat(encoding.substring(equalsPos + 1))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 85, "bugNodeStartChar": 2525, "bugNodeLength": 30, "fixLineNum": 85, "fixNodeStartChar": 2525, "fixNodeLength": 32, "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 85, "bugNodeStartChar": 2525, "bugNodeLength": 30, "fixLineNum": 85, "fixNodeStartChar": 2525, "fixNodeLength": 32, "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 103, "bugNodeStartChar": 2972, "bugNodeLength": 31, "fixLineNum": 103, "fixNodeStartChar": 2972, "fixNodeLength": 34, "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 103, "bugNodeStartChar": 2972, "bugNodeLength": 31, "fixLineNum": 103, "fixNodeStartChar": 2972, "fixNodeLength": 34, "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 142, "bugNodeStartChar": 4056, "bugNodeLength": 31, "fixLineNum": 142, "fixNodeStartChar": 4056, "fixNodeLength": 34, "sourceBeforeFix": "Float.valueOf(value.toString())", "sourceAfterFix": "Float.parseFloat(value.toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 142, "bugNodeStartChar": 4056, "bugNodeLength": 31, "fixLineNum": 142, "fixNodeStartChar": 4056, "fixNodeLength": 34, "sourceBeforeFix": "Float.valueOf(value.toString())", "sourceAfterFix": "Float.parseFloat(value.toString())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 150, "bugNodeStartChar": 4291, "bugNodeLength": 32, "fixLineNum": 150, "fixNodeStartChar": 4291, "fixNodeLength": 36, "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "fixCommitParentSHA1": "e85d43739819e6408c3a4a4e2f9e71bcf6905a2e", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\nindex 0e243ce..dfdc856 100644\n--- a/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n+++ b/codec/src/main/java/io/netty/handler/codec/CharSequenceValueConverter.java\n@@ -82,7 +82,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n-        return Byte.valueOf(value.toString());\n+        return Byte.parseByte(value.toString());\n     }\n \n     @Override\n@@ -100,7 +100,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n-        return Short.valueOf(value.toString());\n+        return Short.parseShort(value.toString());\n     }\n \n     @Override\n@@ -139,7 +139,7 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n-        return Float.valueOf(value.toString());\n+        return Float.parseFloat(value.toString());\n     }\n \n     @Override\n@@ -147,6 +147,6 @@\n         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n-        return Double.valueOf(value.toString());\n+        return Double.parseDouble(value.toString());\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 150, "bugNodeStartChar": 4291, "bugNodeLength": 32, "fixLineNum": 150, "fixNodeStartChar": 4291, "fixNodeLength": 36, "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b0a5d4c266ed4117282decf06dc5053190423230", "fixCommitParentSHA1": "be3e6972a18e9a673ef54a63cd2fb16b20ee936e", "bugFilePath": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\nindex 453c44a..c50e0e5 100644\n--- a/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\n+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\n@@ -60,7 +60,7 @@\n      *\n      * Threading - synchronized(this). We must support adding listeners when there is no EventExecutor.\n      */\n-    private Object listeners;\n+    private volatile Object listeners;\n     /**\n      * Threading - synchronized(this). We are required to hold the monitor to use Java's underlying wait()/notifyAll().\n      */\n@@ -417,7 +417,6 @@\n     }\n \n     private void notifyListeners() {\n-        // Modifications to listeners should be done in a synchronized block before this, and should be visible here.\n         if (listeners == null) {\n             return;\n         }\n", "projectName": "netty.netty", "bugLineNum": 57, "bugNodeStartChar": 2890, "bugNodeLength": 364, "fixLineNum": 57, "fixNodeStartChar": 2890, "fixNodeLength": 373, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fe569ea7a31f2a85393eea1bb4fd0b648a0d5a97", "fixCommitParentSHA1": "9bfeab2c8a802b24e867c8f1ba424969ce206903", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java\nindex 67de79d..3758e4f 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java\n@@ -547,7 +547,7 @@\n \n             ByteBuf buffer = allocator.directBuffer(content.readableBytes());\n             try {\n-                buffer.writeBytes(content);\n+                buffer.writeBytes(content, content.readerIndex(), content.readableBytes());\n                 return newBIO(buffer.retainedSlice());\n             } finally {\n                 try {\n", "projectName": "netty.netty", "bugLineNum": 550, "bugNodeStartChar": 21812, "bugNodeLength": 26, "fixLineNum": 550, "fixNodeStartChar": 21812, "fixNodeLength": 74, "sourceBeforeFix": "buffer.writeBytes(content)", "sourceAfterFix": "buffer.writeBytes(content,content.readerIndex(),content.readableBytes())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a", "fixCommitParentSHA1": "6e919f70f8b55ae52f74b0992a7ecb89b5e91cf1", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java\nindex 51cb356..77f98dc 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java\n@@ -86,7 +86,7 @@\n         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n-                c.content().readBytes(CONTENT_LENGTH));\n+                c.content().readSlice(CONTENT_LENGTH));\n         c.release();\n \n         assertFalse(channel.finish());\n", "projectName": "netty.netty", "bugLineNum": 89, "bugNodeStartChar": 3685, "bugNodeLength": 37, "fixLineNum": 89, "fixNodeStartChar": 3685, "fixNodeLength": 37, "sourceBeforeFix": "c.content().readBytes(CONTENT_LENGTH)", "sourceAfterFix": "c.content().readSlice(CONTENT_LENGTH)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a", "fixCommitParentSHA1": "6e919f70f8b55ae52f74b0992a7ecb89b5e91cf1", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java\nindex 51cb356..77f98dc 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java\n@@ -86,7 +86,7 @@\n         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n-                c.content().readBytes(CONTENT_LENGTH));\n+                c.content().readSlice(CONTENT_LENGTH));\n         c.release();\n \n         assertFalse(channel.finish());\n", "projectName": "netty.netty", "bugLineNum": 89, "bugNodeStartChar": 3685, "bugNodeLength": 37, "fixLineNum": 89, "fixNodeStartChar": 3685, "fixNodeLength": 37, "sourceBeforeFix": "c.content().readBytes(CONTENT_LENGTH)", "sourceAfterFix": "c.content().readSlice(CONTENT_LENGTH)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "61cfdd767197dafcc4f201c5ec7577601b20ce25", "fixCommitParentSHA1": "e24a5d8839f97677341cc20d370b0b45be9b94e1", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java\nindex 73fb3d8..4cf2f00 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java\n@@ -35,7 +35,7 @@\n \n     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n-            connection.remote().nextStreamId());\n+                                  connection.remote().incrementAndGetNextStreamId());\n     }\n \n     @Override\n", "projectName": "netty.netty", "bugLineNum": 38, "bugNodeStartChar": 1493, "bugNodeLength": 34, "fixLineNum": 38, "fixNodeStartChar": 1515, "fixNodeLength": 49, "sourceBeforeFix": "connection.remote().nextStreamId()", "sourceAfterFix": "connection.remote().incrementAndGetNextStreamId()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "61cfdd767197dafcc4f201c5ec7577601b20ce25", "fixCommitParentSHA1": "e24a5d8839f97677341cc20d370b0b45be9b94e1", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java\nindex 73fb3d8..4cf2f00 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java\n@@ -35,7 +35,7 @@\n \n     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n-            connection.remote().nextStreamId());\n+                                  connection.remote().incrementAndGetNextStreamId());\n     }\n \n     @Override\n", "projectName": "netty.netty", "bugLineNum": 38, "bugNodeStartChar": 1493, "bugNodeLength": 34, "fixLineNum": 38, "fixNodeStartChar": 1515, "fixNodeLength": 49, "sourceBeforeFix": "connection.remote().nextStreamId()", "sourceAfterFix": "connection.remote().incrementAndGetNextStreamId()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c390ae66b42fc7f28e3aa3b5f6eebdd1fd1cbfc", "fixCommitParentSHA1": "3d115349b51f86d7bd3506b0c079f8efe903a820", "bugFilePath": "transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java", "fixPatch": "diff --git a/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java\nindex 2598d53..261a6f7 100644\n--- a/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java\n+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java\n@@ -35,7 +35,7 @@\n     public static final ChannelOption<Boolean> IP_FREEBIND = ChannelOption.valueOf(\"IP_FREEBIND\");\n     public static final ChannelOption<Integer> TCP_FASTOPEN = valueOf(T, \"TCP_FASTOPEN\");\n     public static final ChannelOption<Integer> TCP_DEFER_ACCEPT = ChannelOption.valueOf(T, \"TCP_DEFER_ACCEPT\");\n-    public static final ChannelOption<Integer> TCP_QUICKACK = ChannelOption.valueOf(T, \"TCP_QUICKACK\");\n+    public static final ChannelOption<Boolean> TCP_QUICKACK = ChannelOption.valueOf(T, \"TCP_QUICKACK\");\n \n     public static final ChannelOption<DomainSocketReadMode> DOMAIN_SOCKET_READ_MODE =\n             ChannelOption.valueOf(T, \"DOMAIN_SOCKET_READ_MODE\");\n", "projectName": "netty.netty", "bugLineNum": 38, "bugNodeStartChar": 2041, "bugNodeLength": 22, "fixLineNum": 38, "fixNodeStartChar": 2041, "fixNodeLength": 22, "sourceBeforeFix": "ChannelOption<Integer>", "sourceAfterFix": "ChannelOption<Boolean>"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4b5b23080231275733361d2dda966fce760cc295", "fixCommitParentSHA1": "9aac6dac2e934c7fdcca234607afbd2595b4aebe", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java\nindex f08a87b..be71dff 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java\n@@ -33,7 +33,7 @@\n import static io.netty.handler.codec.http2.Http2Exception.connectionError;\n \n public class DefaultHttp2HeadersDecoder implements Http2HeadersDecoder, Http2HeadersDecoder.Configuration {\n-    private static final float HEADERS_COUNT_WEIGHT_NEW = 1 / 5;\n+    private static final float HEADERS_COUNT_WEIGHT_NEW = 1 / 5f;\n     private static final float HEADERS_COUNT_WEIGHT_HISTORICAL = 1 - HEADERS_COUNT_WEIGHT_NEW;\n \n     private final int maxHeaderSize;\n", "projectName": "netty.netty", "bugLineNum": 36, "bugNodeStartChar": 1642, "bugNodeLength": 5, "fixLineNum": 36, "fixNodeStartChar": 1642, "fixNodeLength": 6, "sourceBeforeFix": "1 / 5", "sourceAfterFix": "1 / 5f"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "19907030d105079fee4fe6db70431f7f6b928149", "fixCommitParentSHA1": "75a2ddd61c3df0b7a1e6db1cc5c588177b24c3cf", "bugFilePath": "buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java b/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java\nindex 5cbd676..9cbf069 100644\n--- a/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java\n+++ b/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java\n@@ -251,7 +251,8 @@\n             short v = PlatformDependent.getShort(array, index);\n             return BIG_ENDIAN_NATIVE_ORDER ? v : Short.reverseBytes(v);\n         }\n-        return (short) (PlatformDependent.getByte(index) << 8 | PlatformDependent.getByte(index + 1) & 0xff);\n+        return (short) (PlatformDependent.getByte(array, index) << 8 |\n+                PlatformDependent.getByte(array, index + 1) & 0xff);\n     }\n \n     static short getShortLE(byte[] array, int index) {\n", "projectName": "netty.netty", "bugLineNum": 254, "bugNodeStartChar": 11275, "bugNodeLength": 32, "fixLineNum": 254, "fixNodeStartChar": 11275, "fixNodeLength": 39, "sourceBeforeFix": "PlatformDependent.getByte(index)", "sourceAfterFix": "PlatformDependent.getByte(array,index)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "19907030d105079fee4fe6db70431f7f6b928149", "fixCommitParentSHA1": "75a2ddd61c3df0b7a1e6db1cc5c588177b24c3cf", "bugFilePath": "buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java b/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java\nindex 5cbd676..9cbf069 100644\n--- a/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java\n+++ b/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java\n@@ -251,7 +251,8 @@\n             short v = PlatformDependent.getShort(array, index);\n             return BIG_ENDIAN_NATIVE_ORDER ? v : Short.reverseBytes(v);\n         }\n-        return (short) (PlatformDependent.getByte(index) << 8 | PlatformDependent.getByte(index + 1) & 0xff);\n+        return (short) (PlatformDependent.getByte(array, index) << 8 |\n+                PlatformDependent.getByte(array, index + 1) & 0xff);\n     }\n \n     static short getShortLE(byte[] array, int index) {\n", "projectName": "netty.netty", "bugLineNum": 254, "bugNodeStartChar": 11275, "bugNodeLength": 32, "fixLineNum": 254, "fixNodeStartChar": 11275, "fixNodeLength": 39, "sourceBeforeFix": "PlatformDependent.getByte(index)", "sourceAfterFix": "PlatformDependent.getByte(array,index)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "d4a16659412af852dd849b0e87b46779d9541fa0", "fixCommitParentSHA1": "a6fd8a96bf54fb369927c0375f90502c2ac3d41e", "bugFilePath": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "fixPatch": "diff --git a/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java\nindex d645920..312a757 100644\n--- a/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java\n+++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java\n@@ -397,7 +397,7 @@\n             runDelegatedTasks(serverResult, serverEngine);\n             cTOs.compact();\n             sTOc.compact();\n-        } while (isHandshaking(clientResult) && isHandshaking(serverResult));\n+        } while (isHandshaking(clientResult) || isHandshaking(serverResult));\n     }\n \n     private static boolean isHandshaking(SSLEngineResult result) {\n", "projectName": "netty.netty", "bugLineNum": 400, "bugNodeStartChar": 17713, "bugNodeLength": 58, "fixLineNum": 400, "fixNodeStartChar": 17713, "fixNodeLength": 58, "sourceBeforeFix": "isHandshaking(clientResult) && isHandshaking(serverResult)", "sourceAfterFix": "isHandshaking(clientResult) || isHandshaking(serverResult)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "fixCommitParentSHA1": "1848e73ce6ce563af315b6a51b60e2cd1a164fbe", "bugFilePath": "resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java", "fixPatch": "diff --git a/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java\nindex 8738969..9218a0c 100644\n--- a/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java\n+++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java\n@@ -499,7 +499,7 @@\n         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n \n-            assertEquals(\"10.0.0.1\", address.getHostName());\n+            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }\n", "projectName": "netty.netty", "bugLineNum": 502, "bugNodeStartChar": 18159, "bugNodeLength": 21, "fixLineNum": 502, "fixNodeStartChar": 18159, "fixNodeLength": 24, "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "fixCommitParentSHA1": "1848e73ce6ce563af315b6a51b60e2cd1a164fbe", "bugFilePath": "resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java", "fixPatch": "diff --git a/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java\nindex 8738969..9218a0c 100644\n--- a/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java\n+++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java\n@@ -499,7 +499,7 @@\n         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n \n-            assertEquals(\"10.0.0.1\", address.getHostName());\n+            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }\n", "projectName": "netty.netty", "bugLineNum": 502, "bugNodeStartChar": 18159, "bugNodeLength": 21, "fixLineNum": 502, "fixNodeStartChar": 18159, "fixNodeLength": 24, "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9ae155d25701591697dfe8b47d4b4b592807531f", "fixCommitParentSHA1": "6fe0db4001ebb9801705f6f3ca8911ff5fd5fe1e", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java\nindex b0b034f..991100e 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java\n@@ -79,10 +79,10 @@\n \n     @Override\n     public boolean equals(Object o) {\n-        if (!(o instanceof Attribute)) {\n+        if (!(o instanceof InternalAttribute)) {\n             return false;\n         }\n-        Attribute attribute = (Attribute) o;\n+        InternalAttribute attribute = (InternalAttribute) o;\n         return getName().equalsIgnoreCase(attribute.getName());\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 82, "bugNodeStartChar": 2527, "bugNodeLength": 22, "fixLineNum": 82, "fixNodeStartChar": 2527, "fixNodeLength": 30, "sourceBeforeFix": "o instanceof Attribute", "sourceAfterFix": "o instanceof InternalAttribute"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9ae155d25701591697dfe8b47d4b4b592807531f", "fixCommitParentSHA1": "6fe0db4001ebb9801705f6f3ca8911ff5fd5fe1e", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java\nindex b0b034f..991100e 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InternalAttribute.java\n@@ -79,10 +79,10 @@\n \n     @Override\n     public boolean equals(Object o) {\n-        if (!(o instanceof Attribute)) {\n+        if (!(o instanceof InternalAttribute)) {\n             return false;\n         }\n-        Attribute attribute = (Attribute) o;\n+        InternalAttribute attribute = (InternalAttribute) o;\n         return getName().equalsIgnoreCase(attribute.getName());\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 85, "bugNodeStartChar": 2598, "bugNodeLength": 36, "fixLineNum": 85, "fixNodeStartChar": 2598, "fixNodeLength": 52, "sourceBeforeFix": "Attribute attribute=(Attribute)o; ", "sourceAfterFix": "InternalAttribute attribute=(InternalAttribute)o; "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9e1e4f79c76f39c8d6efccbf8351e7d13ced8007", "fixCommitParentSHA1": "bf2a99518c3ebc484464fc35279452ddd24c0ea9", "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java\nindex f809999..d535fc9 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java\n@@ -160,7 +160,7 @@\n         if (msgInfo == null) {\n             return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());\n         } else {\n-            return new SctpMessage(msgInfo, content().copy());\n+            return new SctpMessage(msgInfo, content().duplicate());\n         }\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 163, "bugNodeStartChar": 4888, "bugNodeLength": 16, "fixLineNum": 163, "fixNodeStartChar": 4888, "fixNodeLength": 21, "sourceBeforeFix": "content().copy()", "sourceAfterFix": "content().duplicate()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9e1e4f79c76f39c8d6efccbf8351e7d13ced8007", "fixCommitParentSHA1": "bf2a99518c3ebc484464fc35279452ddd24c0ea9", "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java\nindex f809999..d535fc9 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpMessage.java\n@@ -160,7 +160,7 @@\n         if (msgInfo == null) {\n             return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());\n         } else {\n-            return new SctpMessage(msgInfo, content().copy());\n+            return new SctpMessage(msgInfo, content().duplicate());\n         }\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 163, "bugNodeStartChar": 4888, "bugNodeLength": 16, "fixLineNum": 163, "fixNodeStartChar": 4888, "fixNodeLength": 21, "sourceBeforeFix": "content().copy()", "sourceAfterFix": "content().duplicate()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b5d90388eaf3725757bc0c5dd7a0fa86ec0683ef", "fixCommitParentSHA1": "72accceeacf15d13358d5c46d5c414fc49f6c38d", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\nindex 3d60b6b..3fbc1e1 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n@@ -101,7 +101,7 @@\n \n             // set new content encoding,\n             CharSequence targetContentEncoding = getTargetContentEncoding(contentEncoding);\n-            if (HttpHeaderValues.IDENTITY.equals(targetContentEncoding)) {\n+            if (HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)) {\n                 // Do NOT set the 'Content-Encoding' header if the target encoding is 'identity'\n                 // as per: http://tools.ietf.org/html/rfc2616#section-14.11\n                 headers.remove(HttpHeaderNames.CONTENT_ENCODING);\n", "projectName": "netty.netty", "bugLineNum": 104, "bugNodeStartChar": 4447, "bugNodeLength": 55, "fixLineNum": 104, "fixNodeStartChar": 4447, "fixNodeLength": 62, "sourceBeforeFix": "HttpHeaderValues.IDENTITY.equals(targetContentEncoding)", "sourceAfterFix": "HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b5d90388eaf3725757bc0c5dd7a0fa86ec0683ef", "fixCommitParentSHA1": "72accceeacf15d13358d5c46d5c414fc49f6c38d", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\nindex 3d60b6b..3fbc1e1 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n@@ -101,7 +101,7 @@\n \n             // set new content encoding,\n             CharSequence targetContentEncoding = getTargetContentEncoding(contentEncoding);\n-            if (HttpHeaderValues.IDENTITY.equals(targetContentEncoding)) {\n+            if (HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)) {\n                 // Do NOT set the 'Content-Encoding' header if the target encoding is 'identity'\n                 // as per: http://tools.ietf.org/html/rfc2616#section-14.11\n                 headers.remove(HttpHeaderNames.CONTENT_ENCODING);\n", "projectName": "netty.netty", "bugLineNum": 104, "bugNodeStartChar": 4447, "bugNodeLength": 55, "fixLineNum": 104, "fixNodeStartChar": 4447, "fixNodeLength": 62, "sourceBeforeFix": "HttpHeaderValues.IDENTITY.equals(targetContentEncoding)", "sourceAfterFix": "HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "07d861c5ffbbbfde18ebfef12e3d57ba4dc2be42", "fixCommitParentSHA1": "d0f3cd383d2bdda3b55c3f071fa5622f65928f73", "bugFilePath": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java", "fixPatch": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java\nindex 6ca2801..0e193f7 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java\n@@ -133,7 +133,7 @@\n             public void operationComplete(Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> future) {\n                 queriesInProgress.remove(future);\n \n-                if (promise.isDone()) {\n+                if (promise.isDone() || future.isCancelled()) {\n                     return;\n                 }\n \n", "projectName": "netty.netty", "bugLineNum": 136, "bugNodeStartChar": 5005, "bugNodeLength": 16, "fixLineNum": 136, "fixNodeStartChar": 5005, "fixNodeLength": 40, "sourceBeforeFix": "promise.isDone()", "sourceAfterFix": "promise.isDone() || future.isCancelled()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0740f703c1cdde0f7d6147c4131814825b83bc72", "fixCommitParentSHA1": "99b11c95b4d9efc180fe2d6f35436a7d49b54106", "bugFilePath": "transport/src/main/java/io/netty/channel/AbstractChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/AbstractChannel.java b/transport/src/main/java/io/netty/channel/AbstractChannel.java\nindex 7dd9a6e..e1cef50 100644\n--- a/transport/src/main/java/io/netty/channel/AbstractChannel.java\n+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java\n@@ -55,7 +55,7 @@\n     private final Channel parent;\n     private final ChannelId id;\n     private final Unsafe unsafe;\n-    private final DefaultChannelPipeline pipeline;\n+    private final ChannelPipeline pipeline;\n     private final ChannelFuture succeededFuture = new SucceededChannelFuture(this, null);\n     private final VoidChannelPromise voidPromise = new VoidChannelPromise(this, true);\n     private final VoidChannelPromise unsafeVoidPromise = new VoidChannelPromise(this, false);\n", "projectName": "netty.netty", "bugLineNum": 58, "bugNodeStartChar": 2227, "bugNodeLength": 46, "fixLineNum": 58, "fixNodeStartChar": 2227, "fixNodeLength": 39, "sourceBeforeFix": "private final DefaultChannelPipeline pipeline; ", "sourceAfterFix": "private final ChannelPipeline pipeline; "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "eb1c97b3b99bca59971809260ad2977d5e5c886b", "fixCommitParentSHA1": "e7f2abbd3642e665c25939b3b60fd454bc107477", "bugFilePath": "common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java b/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java\nindex c1b931a..a1a8c2c 100644\n--- a/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java\n+++ b/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java\n@@ -32,22 +32,19 @@\n  * A lock-free concurrent single-consumer multi-producer {@link Queue}.\n  * It allows multiple producer threads to perform the following operations simultaneously:\n  * <ul>\n- * <li>{@link #offer(Object)}, {@link #add(Object)}, and {@link #addAll(Collection)}</li>\n- * <li>All other read-only operations:\n- *     <ul>\n- *     <li>{@link #contains(Object)} and {@link #containsAll(Collection)}</li>\n- *     <li>{@link #element()}, {@link #peek()}</li>\n- *     <li>{@link #size()} and {@link #isEmpty()}</li>\n- *     <li>{@link #iterator()} (except {@link Iterator#remove()}</li>\n- *     <li>{@link #toArray()} and {@link #toArray(Object[])}</li>\n- *     </ul>\n- * </li>\n+ *     <li>{@link #offer(Object)}, {@link #add(Object)}, {@link #addAll(Collection)}</li>\n+ *     <li>{@link #isEmpty()}</li>\n  * </ul>\n  * .. while only one consumer thread is allowed to perform the following operations exclusively:\n  * <ul>\n  * <li>{@link #poll()} and {@link #remove()}</li>\n+ *     <li>{@link #element()}, {@link #peek()}</li>\n  * <li>{@link #remove(Object)}, {@link #removeAll(Collection)}, and {@link #retainAll(Collection)}</li>\n  * <li>{@link #clear()}</li> {@link #}\n+ *     <li>{@link #iterator()}</li>\n+ *     <li>{@link #toArray()} and {@link #toArray(Object[])}</li>\n+ *     <li>{@link #contains(Object)} and {@link #containsAll(Collection)}</li>\n+ *     <li>{@link #size()}</li>\n  * </ul>\n  *\n  * <strong>The behavior of this implementation is undefined if you perform the operations for a consumer thread only\n@@ -184,7 +181,7 @@\n \n     @Override\n     public boolean isEmpty() {\n-        return peekNode() == null;\n+        return headRef() == tailRef();\n     }\n \n     @Override\n", "projectName": "netty.netty", "bugLineNum": 187, "bugNodeStartChar": 6704, "bugNodeLength": 10, "fixLineNum": 187, "fixNodeStartChar": 6704, "fixNodeLength": 9, "sourceBeforeFix": "peekNode()", "sourceAfterFix": "headRef()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "eb1c97b3b99bca59971809260ad2977d5e5c886b", "fixCommitParentSHA1": "e7f2abbd3642e665c25939b3b60fd454bc107477", "bugFilePath": "common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java b/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java\nindex c1b931a..a1a8c2c 100644\n--- a/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java\n+++ b/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java\n@@ -32,22 +32,19 @@\n  * A lock-free concurrent single-consumer multi-producer {@link Queue}.\n  * It allows multiple producer threads to perform the following operations simultaneously:\n  * <ul>\n- * <li>{@link #offer(Object)}, {@link #add(Object)}, and {@link #addAll(Collection)}</li>\n- * <li>All other read-only operations:\n- *     <ul>\n- *     <li>{@link #contains(Object)} and {@link #containsAll(Collection)}</li>\n- *     <li>{@link #element()}, {@link #peek()}</li>\n- *     <li>{@link #size()} and {@link #isEmpty()}</li>\n- *     <li>{@link #iterator()} (except {@link Iterator#remove()}</li>\n- *     <li>{@link #toArray()} and {@link #toArray(Object[])}</li>\n- *     </ul>\n- * </li>\n+ *     <li>{@link #offer(Object)}, {@link #add(Object)}, {@link #addAll(Collection)}</li>\n+ *     <li>{@link #isEmpty()}</li>\n  * </ul>\n  * .. while only one consumer thread is allowed to perform the following operations exclusively:\n  * <ul>\n  * <li>{@link #poll()} and {@link #remove()}</li>\n+ *     <li>{@link #element()}, {@link #peek()}</li>\n  * <li>{@link #remove(Object)}, {@link #removeAll(Collection)}, and {@link #retainAll(Collection)}</li>\n  * <li>{@link #clear()}</li> {@link #}\n+ *     <li>{@link #iterator()}</li>\n+ *     <li>{@link #toArray()} and {@link #toArray(Object[])}</li>\n+ *     <li>{@link #contains(Object)} and {@link #containsAll(Collection)}</li>\n+ *     <li>{@link #size()}</li>\n  * </ul>\n  *\n  * <strong>The behavior of this implementation is undefined if you perform the operations for a consumer thread only\n@@ -184,7 +181,7 @@\n \n     @Override\n     public boolean isEmpty() {\n-        return peekNode() == null;\n+        return headRef() == tailRef();\n     }\n \n     @Override\n", "projectName": "netty.netty", "bugLineNum": 187, "bugNodeStartChar": 6704, "bugNodeLength": 10, "fixLineNum": 187, "fixNodeStartChar": 6704, "fixNodeLength": 9, "sourceBeforeFix": "peekNode()", "sourceAfterFix": "headRef()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "4a0d68c50bc8ef11d94538567ce3c8f7deb5d4ab", "fixCommitParentSHA1": "09d826ed46cba3876d4e35231038c0c9d4e301da", "bugFilePath": "transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java b/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java\nindex 1066358..ddafebb 100644\n--- a/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java\n+++ b/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java\n@@ -264,7 +264,7 @@\n     }\n \n     private void runTaskQueue() {\n-        while (acquiredChannelCount <= maxConnections) {\n+        while (acquiredChannelCount < maxConnections) {\n             AcquireTask task = pendingAcquireQueue.poll();\n             if (task == null) {\n                 break;\n", "projectName": "netty.netty", "bugLineNum": 267, "bugNodeStartChar": 11536, "bugNodeLength": 38, "fixLineNum": 267, "fixNodeStartChar": 11536, "fixNodeLength": 37, "sourceBeforeFix": "acquiredChannelCount <= maxConnections", "sourceAfterFix": "acquiredChannelCount < maxConnections"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "d1b7f990f22e1792f514d0ed752bec461272e6b6", "fixCommitParentSHA1": "b169a76d462f346900c8d87f0ff5a65ce2d0bf5d", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java\nindex ddaa62f..6d50884 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java\n@@ -184,8 +184,8 @@\n             }\n             synchronized (OpenSslContext.class) {\n                 if (trustCertChainFile != null) {\n-                    /* Load the certificate chain. We must skip the first cert when server mode */\n-                    if (!SSLContext.setCertificateChainFile(ctx, trustCertChainFile.getPath(), true)) {\n+                    /* Load the certificate chain. We must NOT skip the first cert when client mode */\n+                    if (!SSLContext.setCertificateChainFile(ctx, trustCertChainFile.getPath(), false)) {\n                         long error = SSL.getLastErrorNumber();\n                         if (OpenSsl.isError(error)) {\n                             throw new SSLException(\n", "projectName": "netty.netty", "bugLineNum": 188, "bugNodeStartChar": 10088, "bugNodeLength": 75, "fixLineNum": 188, "fixNodeStartChar": 10092, "fixNodeLength": 76, "sourceBeforeFix": "SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),true)", "sourceAfterFix": "SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),false)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "bb5f9fe078e7d586d04d5858792f10e2fdc20ec3", "fixCommitParentSHA1": "a2cd01b32bffb6fe33d34362670c8bdc4ff9974b", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelId.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelId.java b/transport/src/main/java/io/netty/channel/DefaultChannelId.java\nindex fdc55b0..b31663c 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelId.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelId.java\n@@ -280,7 +280,7 @@\n     }\n \n     private static int scoreAddress(InetAddress addr) {\n-        if (addr.isAnyLocalAddress()) {\n+        if (addr.isAnyLocalAddress() || addr.isLoopbackAddress()) {\n             return 0;\n         }\n         if (addr.isMulticastAddress()) {\n", "projectName": "netty.netty", "bugLineNum": 283, "bugNodeStartChar": 10135, "bugNodeLength": 24, "fixLineNum": 283, "fixNodeStartChar": 10135, "fixNodeLength": 52, "sourceBeforeFix": "addr.isAnyLocalAddress()", "sourceAfterFix": "addr.isAnyLocalAddress() || addr.isLoopbackAddress()"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1", "fixCommitParentSHA1": "abaaa75ddcd2a99fd05ffb70af52437a7d8a47af", "bugFilePath": "codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java", "fixPatch": "diff --git a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\nindex 35cfd0f..44802c1 100644\n--- a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n+++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n@@ -32,22 +32,22 @@\n \n     @Test\n     public void writeQueryTest() throws Exception {\n-        InetSocketAddress addr = new InetSocketAddress(0);\n+        InetSocketAddress addr = new InetSocketAddress(\"8.8.8.8\", 53);\n         EmbeddedChannel embedder = new EmbeddedChannel(new DatagramDnsQueryEncoder());\n         List<DnsQuery> queries = new ArrayList<DnsQuery>(5);\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\", DnsRecordType.PTR)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"www.example.com\", DnsRecordType.A)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.AAAA)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.MX)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.CNAME)));\n \n", "projectName": "netty.netty", "bugLineNum": 38, "bugNodeStartChar": 1308, "bugNodeLength": 35, "fixLineNum": 38, "fixNodeStartChar": 1308, "fixNodeLength": 35, "sourceBeforeFix": "new DatagramDnsQuery(addr,null,1)", "sourceAfterFix": "new DatagramDnsQuery(null,addr,1)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1", "fixCommitParentSHA1": "abaaa75ddcd2a99fd05ffb70af52437a7d8a47af", "bugFilePath": "codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java", "fixPatch": "diff --git a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\nindex 35cfd0f..44802c1 100644\n--- a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n+++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n@@ -32,22 +32,22 @@\n \n     @Test\n     public void writeQueryTest() throws Exception {\n-        InetSocketAddress addr = new InetSocketAddress(0);\n+        InetSocketAddress addr = new InetSocketAddress(\"8.8.8.8\", 53);\n         EmbeddedChannel embedder = new EmbeddedChannel(new DatagramDnsQueryEncoder());\n         List<DnsQuery> queries = new ArrayList<DnsQuery>(5);\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\", DnsRecordType.PTR)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"www.example.com\", DnsRecordType.A)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.AAAA)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.MX)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.CNAME)));\n \n", "projectName": "netty.netty", "bugLineNum": 41, "bugNodeStartChar": 1499, "bugNodeLength": 35, "fixLineNum": 41, "fixNodeStartChar": 1499, "fixNodeLength": 35, "sourceBeforeFix": "new DatagramDnsQuery(addr,null,1)", "sourceAfterFix": "new DatagramDnsQuery(null,addr,1)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1", "fixCommitParentSHA1": "abaaa75ddcd2a99fd05ffb70af52437a7d8a47af", "bugFilePath": "codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java", "fixPatch": "diff --git a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\nindex 35cfd0f..44802c1 100644\n--- a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n+++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n@@ -32,22 +32,22 @@\n \n     @Test\n     public void writeQueryTest() throws Exception {\n-        InetSocketAddress addr = new InetSocketAddress(0);\n+        InetSocketAddress addr = new InetSocketAddress(\"8.8.8.8\", 53);\n         EmbeddedChannel embedder = new EmbeddedChannel(new DatagramDnsQueryEncoder());\n         List<DnsQuery> queries = new ArrayList<DnsQuery>(5);\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\", DnsRecordType.PTR)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"www.example.com\", DnsRecordType.A)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.AAAA)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.MX)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.CNAME)));\n \n", "projectName": "netty.netty", "bugLineNum": 44, "bugNodeStartChar": 1681, "bugNodeLength": 35, "fixLineNum": 44, "fixNodeStartChar": 1681, "fixNodeLength": 35, "sourceBeforeFix": "new DatagramDnsQuery(addr,null,1)", "sourceAfterFix": "new DatagramDnsQuery(null,addr,1)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1", "fixCommitParentSHA1": "abaaa75ddcd2a99fd05ffb70af52437a7d8a47af", "bugFilePath": "codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java", "fixPatch": "diff --git a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\nindex 35cfd0f..44802c1 100644\n--- a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n+++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n@@ -32,22 +32,22 @@\n \n     @Test\n     public void writeQueryTest() throws Exception {\n-        InetSocketAddress addr = new InetSocketAddress(0);\n+        InetSocketAddress addr = new InetSocketAddress(\"8.8.8.8\", 53);\n         EmbeddedChannel embedder = new EmbeddedChannel(new DatagramDnsQueryEncoder());\n         List<DnsQuery> queries = new ArrayList<DnsQuery>(5);\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\", DnsRecordType.PTR)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"www.example.com\", DnsRecordType.A)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.AAAA)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.MX)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.CNAME)));\n \n", "projectName": "netty.netty", "bugLineNum": 47, "bugNodeStartChar": 1862, "bugNodeLength": 35, "fixLineNum": 47, "fixNodeStartChar": 1862, "fixNodeLength": 35, "sourceBeforeFix": "new DatagramDnsQuery(addr,null,1)", "sourceAfterFix": "new DatagramDnsQuery(null,addr,1)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1", "fixCommitParentSHA1": "abaaa75ddcd2a99fd05ffb70af52437a7d8a47af", "bugFilePath": "codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java", "fixPatch": "diff --git a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\nindex 35cfd0f..44802c1 100644\n--- a/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n+++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java\n@@ -32,22 +32,22 @@\n \n     @Test\n     public void writeQueryTest() throws Exception {\n-        InetSocketAddress addr = new InetSocketAddress(0);\n+        InetSocketAddress addr = new InetSocketAddress(\"8.8.8.8\", 53);\n         EmbeddedChannel embedder = new EmbeddedChannel(new DatagramDnsQueryEncoder());\n         List<DnsQuery> queries = new ArrayList<DnsQuery>(5);\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\", DnsRecordType.PTR)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"www.example.com\", DnsRecordType.A)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.AAAA)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.MX)));\n-        queries.add(new DatagramDnsQuery(addr, null, 1).setRecord(\n+        queries.add(new DatagramDnsQuery(null, addr, 1).setRecord(\n                 DnsSection.QUESTION,\n                 new DefaultDnsQuestion(\"example.com\", DnsRecordType.CNAME)));\n \n", "projectName": "netty.netty", "bugLineNum": 50, "bugNodeStartChar": 2041, "bugNodeLength": 35, "fixLineNum": 50, "fixNodeStartChar": 2041, "fixNodeLength": 35, "sourceBeforeFix": "new DatagramDnsQuery(addr,null,1)", "sourceAfterFix": "new DatagramDnsQuery(null,addr,1)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b426fb1618757e3e8d700f90cf5b5e1c55bc9f2a", "fixCommitParentSHA1": "ee9233d8fa99e53408cba61d97d9707881fda1e0", "bugFilePath": "microbench/src/main/java/io/netty/microbench/http2/Http2PriorityTreeBenchmark.java", "fixPatch": "diff --git a/microbench/src/main/java/io/netty/microbench/http2/Http2PriorityTreeBenchmark.java b/microbench/src/main/java/io/netty/microbench/http2/Http2PriorityTreeBenchmark.java\nindex ed1b6a6..722e48b 100644\n--- a/microbench/src/main/java/io/netty/microbench/http2/Http2PriorityTreeBenchmark.java\n+++ b/microbench/src/main/java/io/netty/microbench/http2/Http2PriorityTreeBenchmark.java\n@@ -53,7 +53,7 @@\n     public void setup() throws Http2Exception {\n         connection = new DefaultHttp2Connection(false);\n         for (int i = 0; i < numStreams; ++i) {\n-            connection.local().createStream(toStreamId(i));\n+            connection.local().createStream(toStreamId(i), false);\n         }\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 56, "bugNodeStartChar": 1957, "bugNodeLength": 46, "fixLineNum": 56, "fixNodeStartChar": 1957, "fixNodeLength": 53, "sourceBeforeFix": "connection.local().createStream(toStreamId(i))", "sourceAfterFix": "connection.local().createStream(toStreamId(i),false)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "fixCommitParentSHA1": "8b1f247a1af6a17757c491922675f0ed9dd2a8e1", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\nindex e935e7c..fcc840e 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n@@ -31,7 +31,7 @@\n      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n-        return new SslContextBuilder(true);\n+        return new SslContextBuilder(false);\n     }\n \n     /**\n@@ -41,7 +41,7 @@\n      * @param keyFile a PKCS#8 private key file in PEM format\n      */\n     public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile);\n     }\n \n     /**\n@@ -54,7 +54,7 @@\n      */\n     public static SslContextBuilder forServer(\n             File keyCertChainFile, File keyFile, String keyPassword) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile, keyPassword);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile, keyPassword);\n     }\n \n     private final boolean forServer;\n", "projectName": "netty.netty", "bugLineNum": 34, "bugNodeStartChar": 1120, "bugNodeLength": 27, "fixLineNum": 34, "fixNodeStartChar": 1120, "fixNodeLength": 28, "sourceBeforeFix": "new SslContextBuilder(true)", "sourceAfterFix": "new SslContextBuilder(false)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "fixCommitParentSHA1": "8b1f247a1af6a17757c491922675f0ed9dd2a8e1", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\nindex e935e7c..fcc840e 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n@@ -31,7 +31,7 @@\n      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n-        return new SslContextBuilder(true);\n+        return new SslContextBuilder(false);\n     }\n \n     /**\n@@ -41,7 +41,7 @@\n      * @param keyFile a PKCS#8 private key file in PEM format\n      */\n     public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile);\n     }\n \n     /**\n@@ -54,7 +54,7 @@\n      */\n     public static SslContextBuilder forServer(\n             File keyCertChainFile, File keyFile, String keyPassword) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile, keyPassword);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile, keyPassword);\n     }\n \n     private final boolean forServer;\n", "projectName": "netty.netty", "bugLineNum": 44, "bugNodeStartChar": 1483, "bugNodeLength": 28, "fixLineNum": 44, "fixNodeStartChar": 1483, "fixNodeLength": 27, "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "fixCommitParentSHA1": "8b1f247a1af6a17757c491922675f0ed9dd2a8e1", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\nindex e935e7c..fcc840e 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n@@ -31,7 +31,7 @@\n      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n-        return new SslContextBuilder(true);\n+        return new SslContextBuilder(false);\n     }\n \n     /**\n@@ -41,7 +41,7 @@\n      * @param keyFile a PKCS#8 private key file in PEM format\n      */\n     public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile);\n     }\n \n     /**\n@@ -54,7 +54,7 @@\n      */\n     public static SslContextBuilder forServer(\n             File keyCertChainFile, File keyFile, String keyPassword) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile, keyPassword);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile, keyPassword);\n     }\n \n     private final boolean forServer;\n", "projectName": "netty.netty", "bugLineNum": 57, "bugNodeStartChar": 2039, "bugNodeLength": 28, "fixLineNum": 57, "fixNodeStartChar": 2039, "fixNodeLength": 27, "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "aa1e537de40c7ecea3516a40e52f1101c0f88908", "fixCommitParentSHA1": "d8e5d421e13e05edfea9894aa4f226f8e1b03692", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java\nindex bc583bc..f43e11b 100644\n--- a/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java\n+++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java\n@@ -269,7 +269,7 @@\n \n     static final Signal REPLAY = Signal.valueOf(ReplayingDecoder.class, \"REPLAY\");\n \n-    private final ReplayingDecoderBuffer replayable = new ReplayingDecoderBuffer();\n+    private final ReplayingDecoderByteBuf replayable = new ReplayingDecoderByteBuf();\n     private S state;\n     private int checkpoint = -1;\n \n", "projectName": "netty.netty", "bugLineNum": 272, "bugNodeStartChar": 10257, "bugNodeLength": 79, "fixLineNum": 272, "fixNodeStartChar": 10257, "fixNodeLength": 81, "sourceBeforeFix": "private final ReplayingDecoderBuffer replayable=new ReplayingDecoderBuffer(); ", "sourceAfterFix": "private final ReplayingDecoderByteBuf replayable=new ReplayingDecoderByteBuf(); "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "fixCommitParentSHA1": "86edc88448ce0f27304f33b788afa1d003edb284", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\nindex c99c87a..b8f9fea 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n@@ -465,7 +465,7 @@\n             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n-                parent.incrementPrioritizableForTree(amt, oldParent);\n+                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }\n \n@@ -487,7 +487,7 @@\n             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n-                parent.decrementPrioritizableForTree(amt);\n+                parent.decrementPrioritizableForTree0(amt);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 468, "bugNodeStartChar": 16209, "bugNodeLength": 52, "fixLineNum": 468, "fixNodeStartChar": 16209, "fixNodeLength": 53, "sourceBeforeFix": "parent.incrementPrioritizableForTree(amt,oldParent)", "sourceAfterFix": "parent.incrementPrioritizableForTree0(amt,oldParent)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "fixCommitParentSHA1": "86edc88448ce0f27304f33b788afa1d003edb284", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\nindex c99c87a..b8f9fea 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n@@ -465,7 +465,7 @@\n             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n-                parent.incrementPrioritizableForTree(amt, oldParent);\n+                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }\n \n@@ -487,7 +487,7 @@\n             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n-                parent.decrementPrioritizableForTree(amt);\n+                parent.decrementPrioritizableForTree0(amt);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 468, "bugNodeStartChar": 16209, "bugNodeLength": 52, "fixLineNum": 468, "fixNodeStartChar": 16209, "fixNodeLength": 53, "sourceBeforeFix": "parent.incrementPrioritizableForTree(amt,oldParent)", "sourceAfterFix": "parent.incrementPrioritizableForTree0(amt,oldParent)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "fixCommitParentSHA1": "86edc88448ce0f27304f33b788afa1d003edb284", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\nindex c99c87a..b8f9fea 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n@@ -465,7 +465,7 @@\n             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n-                parent.incrementPrioritizableForTree(amt, oldParent);\n+                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }\n \n@@ -487,7 +487,7 @@\n             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n-                parent.decrementPrioritizableForTree(amt);\n+                parent.decrementPrioritizableForTree0(amt);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 490, "bugNodeStartChar": 17020, "bugNodeLength": 41, "fixLineNum": 490, "fixNodeStartChar": 17020, "fixNodeLength": 42, "sourceBeforeFix": "parent.decrementPrioritizableForTree(amt)", "sourceAfterFix": "parent.decrementPrioritizableForTree0(amt)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "fixCommitParentSHA1": "86edc88448ce0f27304f33b788afa1d003edb284", "bugFilePath": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java", "fixPatch": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\nindex c99c87a..b8f9fea 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java\n@@ -465,7 +465,7 @@\n             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n-                parent.incrementPrioritizableForTree(amt, oldParent);\n+                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }\n \n@@ -487,7 +487,7 @@\n             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n-                parent.decrementPrioritizableForTree(amt);\n+                parent.decrementPrioritizableForTree0(amt);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 490, "bugNodeStartChar": 17020, "bugNodeLength": 41, "fixLineNum": 490, "fixNodeStartChar": 17020, "fixNodeLength": 42, "sourceBeforeFix": "parent.decrementPrioritizableForTree(amt)", "sourceAfterFix": "parent.decrementPrioritizableForTree0(amt)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "068132f1eabefb1760fec5b53997cd6143995a29", "fixCommitParentSHA1": "1a83232ab207eac0b904e30f4d7374f8abe13b1a", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java\nindex caf04bf..a4442d5 100644\n--- a/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java\n+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java\n@@ -332,7 +332,7 @@\n     private final class NioSocketChannelUnsafe extends NioByteUnsafe {\n         @Override\n         protected Executor closeExecutor() {\n-            if (config().getSoLinger() > 0) {\n+            if (javaChannel().isOpen() && config().getSoLinger() > 0) {\n                 return GlobalEventExecutor.INSTANCE;\n             }\n             return null;\n", "projectName": "netty.netty", "bugLineNum": 335, "bugNodeStartChar": 10919, "bugNodeLength": 26, "fixLineNum": 335, "fixNodeStartChar": 10919, "fixNodeLength": 52, "sourceBeforeFix": "config().getSoLinger() > 0", "sourceAfterFix": "javaChannel().isOpen() && config().getSoLinger() > 0"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3c6cbd40e297b397abe6d942b3c7d8f31062e348", "fixCommitParentSHA1": "200c6efc750615bc9610c88d16aee6ac9f44ba9c", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java\nindex d30278b..bcdee4e 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java\n@@ -46,8 +46,8 @@\n         assertTrue(matcher.find());\n         Date expiresDate = HttpHeaderDateFormat.get().parse(matcher.group(1));\n         long diff = (expiresDate.getTime() - System.currentTimeMillis()) / 1000;\n-        // 1 sec should be fine\n-        assertTrue(Math.abs(diff - maxAge) <= 1);\n+        // 2 secs should be fine\n+        assertTrue(Math.abs(diff - maxAge) <= 2);\n     }\n \n     @Test\n", "projectName": "netty.netty", "bugLineNum": 50, "bugNodeStartChar": 1777, "bugNodeLength": 28, "fixLineNum": 50, "fixNodeStartChar": 1778, "fixNodeLength": 28, "sourceBeforeFix": "Math.abs(diff - maxAge) <= 1", "sourceAfterFix": "Math.abs(diff - maxAge) <= 2"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9826d9bc1ad80bdfb4ebc22060fad3d3b4a92e9c", "fixCommitParentSHA1": "a653a8ecf44adb06ec899c5648ead7b01cdc8c42", "bugFilePath": "transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\nindex e283a10..e9dae04 100644\n--- a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n+++ b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n@@ -209,7 +209,7 @@\n     @Test\n     public void testWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -241,7 +241,7 @@\n     @Test\n     public void testUserDefinedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -273,7 +273,7 @@\n     @Test\n     public void testUserDefinedWritability2() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -309,7 +309,7 @@\n     @Test\n     public void testMixedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n", "projectName": "netty.netty", "bugLineNum": 212, "bugNodeStartChar": 6881, "bugNodeLength": 260, "fixLineNum": 212, "fixNodeStartChar": 6881, "fixNodeLength": 267, "sourceBeforeFix": "new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ", "sourceAfterFix": "new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9826d9bc1ad80bdfb4ebc22060fad3d3b4a92e9c", "fixCommitParentSHA1": "a653a8ecf44adb06ec899c5648ead7b01cdc8c42", "bugFilePath": "transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\nindex e283a10..e9dae04 100644\n--- a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n+++ b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n@@ -209,7 +209,7 @@\n     @Test\n     public void testWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -241,7 +241,7 @@\n     @Test\n     public void testUserDefinedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -273,7 +273,7 @@\n     @Test\n     public void testUserDefinedWritability2() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -309,7 +309,7 @@\n     @Test\n     public void testMixedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n", "projectName": "netty.netty", "bugLineNum": 244, "bugNodeStartChar": 8147, "bugNodeLength": 260, "fixLineNum": 244, "fixNodeStartChar": 8147, "fixNodeLength": 267, "sourceBeforeFix": "new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ", "sourceAfterFix": "new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9826d9bc1ad80bdfb4ebc22060fad3d3b4a92e9c", "fixCommitParentSHA1": "a653a8ecf44adb06ec899c5648ead7b01cdc8c42", "bugFilePath": "transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\nindex e283a10..e9dae04 100644\n--- a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n+++ b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n@@ -209,7 +209,7 @@\n     @Test\n     public void testWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -241,7 +241,7 @@\n     @Test\n     public void testUserDefinedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -273,7 +273,7 @@\n     @Test\n     public void testUserDefinedWritability2() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -309,7 +309,7 @@\n     @Test\n     public void testMixedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n", "projectName": "netty.netty", "bugLineNum": 276, "bugNodeStartChar": 9390, "bugNodeLength": 260, "fixLineNum": 276, "fixNodeStartChar": 9390, "fixNodeLength": 267, "sourceBeforeFix": "new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ", "sourceAfterFix": "new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9826d9bc1ad80bdfb4ebc22060fad3d3b4a92e9c", "fixCommitParentSHA1": "a653a8ecf44adb06ec899c5648ead7b01cdc8c42", "bugFilePath": "transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\nindex e283a10..e9dae04 100644\n--- a/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n+++ b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java\n@@ -209,7 +209,7 @@\n     @Test\n     public void testWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -241,7 +241,7 @@\n     @Test\n     public void testUserDefinedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -273,7 +273,7 @@\n     @Test\n     public void testUserDefinedWritability2() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n@@ -309,7 +309,7 @@\n     @Test\n     public void testMixedWritability() {\n         final StringBuilder buf = new StringBuilder();\n-        EmbeddedChannel ch = new EmbeddedChannel(new ChannelHandlerAdapter() {\n+        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {\n             @Override\n             public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {\n                 buf.append(ctx.channel().isWritable());\n", "projectName": "netty.netty", "bugLineNum": 312, "bugNodeStartChar": 10869, "bugNodeLength": 260, "fixLineNum": 312, "fixNodeStartChar": 10869, "fixNodeLength": 267, "sourceBeforeFix": "new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } ", "sourceAfterFix": "new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "a7a654c82f3eb1374001032a44b08b6b105b4992", "fixCommitParentSHA1": "d59629377c747758c96cf2a02c74a4d5f4b33fc2", "bugFilePath": "example/src/main/java/io/netty/example/http/websocketx/server/WebSocketServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/http/websocketx/server/WebSocketServerHandler.java b/example/src/main/java/io/netty/example/http/websocketx/server/WebSocketServerHandler.java\nindex 14e0360..7712a71 100644\n--- a/example/src/main/java/io/netty/example/http/websocketx/server/WebSocketServerHandler.java\n+++ b/example/src/main/java/io/netty/example/http/websocketx/server/WebSocketServerHandler.java\n@@ -94,7 +94,7 @@\n \n         // Handshake\n         WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(\n-                getWebSocketLocation(req), null, false);\n+                getWebSocketLocation(req), null, true);\n         handshaker = wsFactory.newHandshaker(req);\n         if (handshaker == null) {\n             WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());\n", "projectName": "netty.netty", "bugLineNum": 96, "bugNodeStartChar": 3821, "bugNodeLength": 93, "fixLineNum": 96, "fixNodeStartChar": 3821, "fixNodeLength": 92, "sourceBeforeFix": "new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,false)", "sourceAfterFix": "new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,true)"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "8988b3f4c0ab891f31679d97d48dd376b4bd2fee", "fixCommitParentSHA1": "f76a6f40d40d581d615252a9a115ad7be5be4aad", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java b/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java\nindex f502983..62cafc4 100644\n--- a/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java\n+++ b/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java\n@@ -144,7 +144,7 @@\n         if (pb < 0 || pb > 4) {\n             throw new IllegalArgumentException(\"pb: \" + pb + \" (expected: 0-4)\");\n         }\n-        if (lc + pb > 4) {\n+        if (lc + lp > 4) {\n             if (!warningLogged) {\n                 logger.warn(\"The latest versions of LZMA libraries (for example, XZ Utils) \" +\n                         \"has an additional requirement: lc + lp <= 4. Data which don't follow \" +\n", "projectName": "netty.netty", "bugLineNum": 147, "bugNodeStartChar": 5672, "bugNodeLength": 7, "fixLineNum": 147, "fixNodeStartChar": 5672, "fixNodeLength": 7, "sourceBeforeFix": "lc + pb", "sourceAfterFix": "lc + lp"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8988b3f4c0ab891f31679d97d48dd376b4bd2fee", "fixCommitParentSHA1": "f76a6f40d40d581d615252a9a115ad7be5be4aad", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java b/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java\nindex f502983..62cafc4 100644\n--- a/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java\n+++ b/codec/src/main/java/io/netty/handler/codec/compression/LzmaFrameEncoder.java\n@@ -144,7 +144,7 @@\n         if (pb < 0 || pb > 4) {\n             throw new IllegalArgumentException(\"pb: \" + pb + \" (expected: 0-4)\");\n         }\n-        if (lc + pb > 4) {\n+        if (lc + lp > 4) {\n             if (!warningLogged) {\n                 logger.warn(\"The latest versions of LZMA libraries (for example, XZ Utils) \" +\n                         \"has an additional requirement: lc + lp <= 4. Data which don't follow \" +\n", "projectName": "netty.netty", "bugLineNum": 147, "bugNodeStartChar": 5672, "bugNodeLength": 7, "fixLineNum": 147, "fixNodeStartChar": 5672, "fixNodeLength": 7, "sourceBeforeFix": "lc + pb", "sourceAfterFix": "lc + lp"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "003f97168c87fc350b6ea63405dbe98885a102bc", "fixCommitParentSHA1": "3cf65e3987785150d20e061049f7625cbcdd016d", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\nindex d011722..42ab3af 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n@@ -203,10 +203,10 @@\n \n     private void cleanup() {\n         if (decoder != null) {\n-            // Clean-up the previous encoder if not cleaned up correctly.\n+            // Clean-up the previous decoder if not cleaned up correctly.\n             if (decoder.finish()) {\n                 for (;;) {\n-                    ByteBuf buf = decoder.readOutbound();\n+                    ByteBuf buf = decoder.readInbound();\n                     if (buf == null) {\n                         break;\n                     }\n", "projectName": "netty.netty", "bugLineNum": 209, "bugNodeStartChar": 8422, "bugNodeLength": 22, "fixLineNum": 209, "fixNodeStartChar": 8422, "fixNodeLength": 21, "sourceBeforeFix": "decoder.readOutbound()", "sourceAfterFix": "decoder.readInbound()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "003f97168c87fc350b6ea63405dbe98885a102bc", "fixCommitParentSHA1": "3cf65e3987785150d20e061049f7625cbcdd016d", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\nindex d011722..42ab3af 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java\n@@ -203,10 +203,10 @@\n \n     private void cleanup() {\n         if (decoder != null) {\n-            // Clean-up the previous encoder if not cleaned up correctly.\n+            // Clean-up the previous decoder if not cleaned up correctly.\n             if (decoder.finish()) {\n                 for (;;) {\n-                    ByteBuf buf = decoder.readOutbound();\n+                    ByteBuf buf = decoder.readInbound();\n                     if (buf == null) {\n                         break;\n                     }\n", "projectName": "netty.netty", "bugLineNum": 209, "bugNodeStartChar": 8422, "bugNodeLength": 22, "fixLineNum": 209, "fixNodeStartChar": 8422, "fixNodeLength": 21, "sourceBeforeFix": "decoder.readOutbound()", "sourceAfterFix": "decoder.readInbound()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e09d2f32fb1c7f2ab8d1e41fdb72e00adb7032ff", "fixCommitParentSHA1": "f88cd62354464a3445c68976d6f3a535d775180a", "bugFilePath": "codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResource.java", "fixPatch": "diff --git a/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResource.java b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResource.java\nindex a6aa310..968a149 100644\n--- a/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResource.java\n+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResource.java\n@@ -74,7 +74,7 @@\n      * Returns a duplicate of this resource record.\n      */\n     @Override\n-    public ByteBufHolder duplicate() {\n+    public DnsResource duplicate() {\n         return new DnsResource(name(), type(), dnsClass(), ttl, content.duplicate());\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 73, "bugNodeStartChar": 2077, "bugNodeLength": 208, "fixLineNum": 73, "fixNodeStartChar": 2077, "fixNodeLength": 206, "sourceBeforeFix": "/**   * Returns a duplicate of this resource record.  */ @Override public ByteBufHolder duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } ", "sourceAfterFix": "/**   * Returns a duplicate of this resource record.  */ @Override public DnsResource duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } "}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dbc011c3f40c093057dfb9fd1cedf4bc783bd250", "fixCommitParentSHA1": "69a6ad940a88005f83dfff86f0b1eea6d567a190", "bugFilePath": "buffer/src/main/java/io/netty/buffer/PoolChunk.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/PoolChunk.java b/buffer/src/main/java/io/netty/buffer/PoolChunk.java\nindex 71dcd76..8c8d92e 100644\n--- a/buffer/src/main/java/io/netty/buffer/PoolChunk.java\n+++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java\n@@ -152,7 +152,7 @@\n         memoryMap = new short[maxSubpageAllocs << 1];\n         int memoryMapIndex = 1;\n         for (int d = 0; d <= maxOrder; ++d) { // move down the tree one level at a time\n-            short dd = (short) ((d << BYTE_LENGTH) | d);\n+            short dd = (short) (d << BYTE_LENGTH | d);\n             int depth = 1 << d;\n             for (int p = 0; p < depth; ++p) {\n                 // in each level traverse left to right and set value to the depth of subtree\n@@ -266,15 +266,15 @@\n             return -1;\n         }\n         while (val < d || (id & initial) == 0) { // id & initial == 1 << d for all ids at depth d, for < d it is 0\n-            id = id << 1;\n+            id <<= 1;\n             val = value(id);\n             if (val > d) {\n-                id = id ^ 1;\n+                id ^= 1;\n                 val = value(id);\n             }\n         }\n         byte value = value(id);\n-        assert value == d && ((id & initial) == 1 << d) : String.format(\"val = %d, id & initial = %d, d = %d\",\n+        assert value == d && (id & initial) == 1 << d : String.format(\"val = %d, id & initial = %d, d = %d\",\n                 value, id & initial, d);\n         setValue(id, unusable); // mark as unusable\n         updateParentsAlloc(id);\n@@ -383,7 +383,7 @@\n     }\n \n     private void setValue(int id, byte val) {\n-        memoryMap[id] = (short) ((memoryMap[id] & UPPER_BYTE_MASK) | val);\n+        memoryMap[id] = (short) (memoryMap[id] & UPPER_BYTE_MASK | val);\n     }\n \n     private byte depth(int id) {\n@@ -391,19 +391,19 @@\n         return (byte) (val >>> BYTE_LENGTH);\n     }\n \n-    private int log2(int val) {\n+    private static int log2(int val) {\n         // compute the (0-based, with lsb = 0) position of highest set bit i.e, log2\n         return Integer.SIZE - 1 - Integer.numberOfLeadingZeros(val);\n     }\n \n     private int runLength(int id) {\n         // represents the size in #bytes supported by node 'id' in the tree\n-        return 1 << (log2ChunkSize - depth(id));\n+        return 1 << log2ChunkSize - depth(id);\n     }\n \n     private int runOffset(int id) {\n         // represents the 0-based offset in #bytes from start of the byte-array chunk\n-        int shift = id ^ (1 << depth(id));\n+        int shift = id ^ 1 << depth(id);\n         return shift * runLength(id);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 394, "bugNodeStartChar": 14250, "bugNodeLength": 187, "fixLineNum": 394, "fixNodeStartChar": 14250, "fixNodeLength": 194, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4d60ea2aeb1071bebcd6471b550e6648a9fe05a1", "fixCommitParentSHA1": "066f95d0472b9535f398019eb1012f4641dcf65e", "bugFilePath": "common/src/main/java/io/netty/util/ThreadDeathWatcher.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/ThreadDeathWatcher.java b/common/src/main/java/io/netty/util/ThreadDeathWatcher.java\nindex f98870c..84dbd83 100644\n--- a/common/src/main/java/io/netty/util/ThreadDeathWatcher.java\n+++ b/common/src/main/java/io/netty/util/ThreadDeathWatcher.java\n@@ -85,7 +85,7 @@\n      *\n      * @return {@code true} if and only if the watcher thread has been terminated\n      */\n-    public boolean awaitInactivity(long timeout, TimeUnit unit) throws InterruptedException {\n+    public static boolean awaitInactivity(long timeout, TimeUnit unit) throws InterruptedException {\n         if (unit == null) {\n             throw new NullPointerException(\"unit\");\n         }\n", "projectName": "netty.netty", "bugLineNum": 79, "bugNodeStartChar": 3109, "bugNodeLength": 932, "fixLineNum": 79, "fixNodeStartChar": 3109, "fixNodeLength": 939, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "01ef614e77ec45d2b1abbe97e28d3fb6fe11bd13", "fixCommitParentSHA1": "e8b5f19b82eb116abb4e53a9fb1fa716e7623742", "bugFilePath": "codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java", "fixPatch": "diff --git a/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java\nindex c73a5ca..6411cb7 100644\n--- a/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java\n+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java\n@@ -63,7 +63,7 @@\n             case UNKNOWN:\n                 break;\n         }\n-        if (port < 0 && port >= 65535) {\n+        if (port < 0 && port >= 65536) {\n             throw new IllegalArgumentException(port + \" is not in bounds 0 < x < 65536\");\n         }\n         this.cmdType = cmdType;\n", "projectName": "netty.netty", "bugLineNum": 66, "bugNodeStartChar": 2311, "bugNodeLength": 13, "fixLineNum": 66, "fixNodeStartChar": 2311, "fixNodeLength": 13, "sourceBeforeFix": "port >= 65535", "sourceAfterFix": "port >= 65536"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6", "fixCommitParentSHA1": "b32316b33cad851a8e22b5bd4cbe1de2485f1416", "bugFilePath": "transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannel.java", "fixPatch": "diff --git a/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannel.java b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannel.java\nindex 4a9cebd..390ca3d 100644\n--- a/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannel.java\n+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannel.java\n@@ -123,7 +123,7 @@\n                 // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method\n                 //\n                 // See https://github.com/netty/netty/issues/2254\n-                if (config.isAutoRead() && !readPending) {\n+                if (!config.isAutoRead() && !readPending) {\n                     clearEpollIn();\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 126, "bugNodeStartChar": 4593, "bugNodeLength": 19, "fixLineNum": 126, "fixNodeStartChar": 4593, "fixNodeLength": 20, "sourceBeforeFix": "config.isAutoRead()", "sourceAfterFix": "!config.isAutoRead()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6", "fixCommitParentSHA1": "b32316b33cad851a8e22b5bd4cbe1de2485f1416", "bugFilePath": "transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java", "fixPatch": "diff --git a/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java\nindex edb1287..494d71c 100644\n--- a/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java\n+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java\n@@ -648,7 +648,7 @@\n                 // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method\n                 //\n                 // See https://github.com/netty/netty/issues/2254\n-                if (config.isAutoRead() && !readPending) {\n+                if (!config.isAutoRead() && !readPending) {\n                     clearEpollIn();\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 651, "bugNodeStartChar": 25149, "bugNodeLength": 19, "fixLineNum": 651, "fixNodeStartChar": 25149, "fixNodeLength": 20, "sourceBeforeFix": "config.isAutoRead()", "sourceAfterFix": "!config.isAutoRead()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6", "fixCommitParentSHA1": "b32316b33cad851a8e22b5bd4cbe1de2485f1416", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java\nindex 8815a23..4a5e1df 100644\n--- a/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java\n+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java\n@@ -152,7 +152,7 @@\n                 // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method\n                 //\n                 // See https://github.com/netty/netty/issues/2254\n-                if (config.isAutoRead() && !readPending) {\n+                if (!config.isAutoRead() && !readPending) {\n                     removeReadOp();\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 155, "bugNodeStartChar": 6157, "bugNodeLength": 19, "fixLineNum": 155, "fixNodeStartChar": 6157, "fixNodeLength": 20, "sourceBeforeFix": "config.isAutoRead()", "sourceAfterFix": "!config.isAutoRead()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6", "fixCommitParentSHA1": "b32316b33cad851a8e22b5bd4cbe1de2485f1416", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java\nindex d96200d..47581cc 100644\n--- a/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java\n+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java\n@@ -112,7 +112,7 @@\n                 // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method\n                 //\n                 // See https://github.com/netty/netty/issues/2254\n-                if (config.isAutoRead() && !readPending) {\n+                if (!config.isAutoRead() && !readPending) {\n                     removeReadOp();\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 115, "bugNodeStartChar": 4298, "bugNodeLength": 19, "fixLineNum": 115, "fixNodeStartChar": 4298, "fixNodeLength": 20, "sourceBeforeFix": "config.isAutoRead()", "sourceAfterFix": "!config.isAutoRead()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "0e71da3082d51b0099bd6e7e22369dd7d7615b98", "fixCommitParentSHA1": "7e0e4c63258b3af6155dfe463d6ea4741ac48dc9", "bugFilePath": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\nindex 2f396d1..fcacd61 100644\n--- a/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\n+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\n@@ -461,14 +461,14 @@\n     public boolean setUncancellable() {\n         Object result = this.result;\n         if (isDone0(result)) {\n-            return isCancelled0(result);\n+            return !isCancelled0(result);\n         }\n \n         synchronized (this) {\n             // Allow only once.\n             result = this.result;\n             if (isDone0(result)) {\n-                return isCancelled0(result);\n+                return !isCancelled0(result);\n             }\n \n             this.result = UNCANCELLABLE;\n", "projectName": "netty.netty", "bugLineNum": 464, "bugNodeStartChar": 13481, "bugNodeLength": 20, "fixLineNum": 464, "fixNodeStartChar": 13481, "fixNodeLength": 21, "sourceBeforeFix": "isCancelled0(result)", "sourceAfterFix": "!isCancelled0(result)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "0e71da3082d51b0099bd6e7e22369dd7d7615b98", "fixCommitParentSHA1": "7e0e4c63258b3af6155dfe463d6ea4741ac48dc9", "bugFilePath": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\nindex 2f396d1..fcacd61 100644\n--- a/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\n+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java\n@@ -461,14 +461,14 @@\n     public boolean setUncancellable() {\n         Object result = this.result;\n         if (isDone0(result)) {\n-            return isCancelled0(result);\n+            return !isCancelled0(result);\n         }\n \n         synchronized (this) {\n             // Allow only once.\n             result = this.result;\n             if (isDone0(result)) {\n-                return isCancelled0(result);\n+                return !isCancelled0(result);\n             }\n \n             this.result = UNCANCELLABLE;\n", "projectName": "netty.netty", "bugLineNum": 471, "bugNodeStartChar": 13668, "bugNodeLength": 20, "fixLineNum": 471, "fixNodeStartChar": 13668, "fixNodeLength": 21, "sourceBeforeFix": "isCancelled0(result)", "sourceAfterFix": "!isCancelled0(result)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "54d3c99469b923b409ce1a52b6d1181984470b11", "fixCommitParentSHA1": "b5a587fadfd0821088d37d9d23388c343d73eb45", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java\nindex a5547f4..fd17e88 100644\n--- a/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java\n+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java\n@@ -237,7 +237,8 @@\n                     t = newT;\n                 }\n \n-                connectPromise.setFailure(t);\n+                // Use tryFailure() instead of setFailure() to avoid the race against cancel().\n+                connectPromise.tryFailure(t);\n                 closeIfClosed();\n             } finally {\n                 // Check for null as the connectTimeoutFuture is only created if a connectTimeoutMillis > 0 is used\n", "projectName": "netty.netty", "bugLineNum": 240, "bugNodeStartChar": 8391, "bugNodeLength": 28, "fixLineNum": 241, "fixNodeStartChar": 8487, "fixNodeLength": 28, "sourceBeforeFix": "connectPromise.setFailure(t)", "sourceAfterFix": "connectPromise.tryFailure(t)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "54d3c99469b923b409ce1a52b6d1181984470b11", "fixCommitParentSHA1": "b5a587fadfd0821088d37d9d23388c343d73eb45", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java\nindex a5547f4..fd17e88 100644\n--- a/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java\n+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java\n@@ -237,7 +237,8 @@\n                     t = newT;\n                 }\n \n-                connectPromise.setFailure(t);\n+                // Use tryFailure() instead of setFailure() to avoid the race against cancel().\n+                connectPromise.tryFailure(t);\n                 closeIfClosed();\n             } finally {\n                 // Check for null as the connectTimeoutFuture is only created if a connectTimeoutMillis > 0 is used\n", "projectName": "netty.netty", "bugLineNum": 240, "bugNodeStartChar": 8391, "bugNodeLength": 28, "fixLineNum": 241, "fixNodeStartChar": 8487, "fixNodeLength": 28, "sourceBeforeFix": "connectPromise.setFailure(t)", "sourceAfterFix": "connectPromise.tryFailure(t)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0d1567da0b7e884712265b38780704b026e8edc4", "fixCommitParentSHA1": "51ca4f3e91599d6879f14608c83f02a079ea9dac", "bugFilePath": "common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java\nindex 1543225..e3614b3 100644\n--- a/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java\n+++ b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java\n@@ -38,11 +38,11 @@\n         classPool.appendClassPath(new ClassClassPath(NoOpTypeParameterMatcher.class));\n     }\n \n-    public void appendClassPath(ClassPath classpath) {\n+    public static void appendClassPath(ClassPath classpath) {\n         classPool.appendClassPath(classpath);\n     }\n \n-    public void appendClassPath(String pathname) throws NotFoundException {\n+    public static void appendClassPath(String pathname) throws NotFoundException {\n         classPool.appendClassPath(pathname);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 41, "bugNodeStartChar": 1381, "bugNodeLength": 102, "fixLineNum": 41, "fixNodeStartChar": 1381, "fixNodeLength": 109, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0d1567da0b7e884712265b38780704b026e8edc4", "fixCommitParentSHA1": "51ca4f3e91599d6879f14608c83f02a079ea9dac", "bugFilePath": "common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java\nindex 1543225..e3614b3 100644\n--- a/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java\n+++ b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java\n@@ -38,11 +38,11 @@\n         classPool.appendClassPath(new ClassClassPath(NoOpTypeParameterMatcher.class));\n     }\n \n-    public void appendClassPath(ClassPath classpath) {\n+    public static void appendClassPath(ClassPath classpath) {\n         classPool.appendClassPath(classpath);\n     }\n \n-    public void appendClassPath(String pathname) throws NotFoundException {\n+    public static void appendClassPath(String pathname) throws NotFoundException {\n         classPool.appendClassPath(pathname);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 45, "bugNodeStartChar": 1489, "bugNodeLength": 122, "fixLineNum": 45, "fixNodeStartChar": 1489, "fixNodeLength": 129, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "926479e9046655b04ca5b9204a84b575ae4aa3f7", "fixCommitParentSHA1": "4ce49a6195ea872569d316798d71bdde11810ab6", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java\nindex 58a0d46..127a1ee 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java\n@@ -40,11 +40,11 @@\n \n     private final WebSocketVersion version;\n \n-    private boolean handshakeComplete;\n+    private volatile boolean handshakeComplete;\n \n     private final String expectedSubprotocol;\n \n-    private String actualSubprotocol;\n+    private volatile String actualSubprotocol;\n \n     protected final HttpHeaders customHeaders;\n \n", "projectName": "netty.netty", "bugLineNum": 43, "bugNodeStartChar": 1528, "bugNodeLength": 34, "fixLineNum": 43, "fixNodeStartChar": 1528, "fixNodeLength": 43, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "926479e9046655b04ca5b9204a84b575ae4aa3f7", "fixCommitParentSHA1": "4ce49a6195ea872569d316798d71bdde11810ab6", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java\nindex 58a0d46..127a1ee 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java\n@@ -40,11 +40,11 @@\n \n     private final WebSocketVersion version;\n \n-    private boolean handshakeComplete;\n+    private volatile boolean handshakeComplete;\n \n     private final String expectedSubprotocol;\n \n-    private String actualSubprotocol;\n+    private volatile String actualSubprotocol;\n \n     protected final HttpHeaders customHeaders;\n \n", "projectName": "netty.netty", "bugLineNum": 47, "bugNodeStartChar": 1615, "bugNodeLength": 33, "fixLineNum": 47, "fixNodeStartChar": 1615, "fixNodeLength": 42, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce", "fixCommitParentSHA1": "d7f9b1ee76320dd9fc1e9992b4b75773718614bb", "bugFilePath": "handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\nindex 5ef5dfa..ec915cd 100644\n--- a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n@@ -351,7 +351,7 @@\n         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n-                promise.setFailure(cause);\n+                promise.tryFailure(cause);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 354, "bugNodeStartChar": 12950, "bugNodeLength": 25, "fixLineNum": 354, "fixNodeStartChar": 12950, "fixNodeLength": 25, "sourceBeforeFix": "promise.setFailure(cause)", "sourceAfterFix": "promise.tryFailure(cause)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce", "fixCommitParentSHA1": "d7f9b1ee76320dd9fc1e9992b4b75773718614bb", "bugFilePath": "handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\nindex 5ef5dfa..ec915cd 100644\n--- a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n@@ -351,7 +351,7 @@\n         void fail(Throwable cause) {\n             ReferenceCountUtil.release(msg);\n             if (promise != null) {\n-                promise.setFailure(cause);\n+                promise.tryFailure(cause);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 354, "bugNodeStartChar": 12950, "bugNodeLength": 25, "fixLineNum": 354, "fixNodeStartChar": 12950, "fixNodeLength": 25, "sourceBeforeFix": "promise.setFailure(cause)", "sourceAfterFix": "promise.tryFailure(cause)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "6a4131c10feaf0ce445f9d7092b30144d473cead", "fixCommitParentSHA1": "32deb2c22b56b4d775d185c8605084b33386bcf7", "bugFilePath": "codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java", "fixPatch": "diff --git a/codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java b/codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java\nindex d4ef176..d3bf885 100644\n--- a/codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java\n+++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java\n@@ -29,7 +29,7 @@\n     private static final boolean noJdkZlibDecoder;\n \n     static {\n-        noJdkZlibDecoder = !SystemPropertyUtil.getBoolean(\"io.netty.noJdkZlibDecoder\", true);\n+        noJdkZlibDecoder = SystemPropertyUtil.getBoolean(\"io.netty.noJdkZlibDecoder\", true);\n         logger.debug(\"-Dio.netty.noJdkZlibDecoder: {}\", noJdkZlibDecoder);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 32, "bugNodeStartChar": 1210, "bugNodeLength": 65, "fixLineNum": 32, "fixNodeStartChar": 1210, "fixNodeLength": 64, "sourceBeforeFix": "!SystemPropertyUtil.getBoolean(\"io.netty.noJdkZlibDecoder\",true)", "sourceAfterFix": "SystemPropertyUtil.getBoolean(\"io.netty.noJdkZlibDecoder\",true)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7aefd0cbdbc01aa344c5b2f3261734c4a2afe313", "fixCommitParentSHA1": "8142aae765b74ba7934b363b562a5ffe4a01a12c", "bugFilePath": "transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java\nindex 67e5d37..d152a31 100644\n--- a/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java\n+++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java\n@@ -39,7 +39,7 @@\n  * <p>When not used in a {@link ServerBootstrap} context, the {@link #bind()} methods are useful for connectionless\n  * transports such as datagram (UDP).</p>\n  */\n-abstract class AbstractBootstrap<B extends AbstractBootstrap<B, C>, C extends Channel> implements Cloneable {\n+public abstract class AbstractBootstrap<B extends AbstractBootstrap<B, C>, C extends Channel> implements Cloneable {\n \n     private volatile EventLoopGroup group;\n     private volatile ChannelFactory<? extends C> channelFactory;\n", "projectName": "netty.netty", "bugLineNum": 35, "bugNodeStartChar": 1171, "bugNodeLength": 13390, "fixLineNum": 35, "fixNodeStartChar": 1171, "fixNodeLength": 13397, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4f6ba4fe3dd1ab5443020923d14c5e4c379e56ec", "fixCommitParentSHA1": "762adfcb69266a7ba1786a966fe371d69a1043fd", "bugFilePath": "handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\nindex db9d62f..d4b8234 100644\n--- a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n@@ -350,7 +350,7 @@\n         void progress() {\n             progress ++;\n             if (promise instanceof ChannelProgressivePromise) {\n-                ((ChannelProgressivePromise) promise).setProgress(progress, -1);\n+                ((ChannelProgressivePromise) promise).tryProgress(progress, -1);\n             }\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 353, "bugNodeStartChar": 12870, "bugNodeLength": 63, "fixLineNum": 353, "fixNodeStartChar": 12870, "fixNodeLength": 63, "sourceBeforeFix": "((ChannelProgressivePromise)promise).setProgress(progress,-1)", "sourceAfterFix": "((ChannelProgressivePromise)promise).tryProgress(progress,-1)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4f6ba4fe3dd1ab5443020923d14c5e4c379e56ec", "fixCommitParentSHA1": "762adfcb69266a7ba1786a966fe371d69a1043fd", "bugFilePath": "handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\nindex db9d62f..d4b8234 100644\n--- a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n@@ -350,7 +350,7 @@\n         void progress() {\n             progress ++;\n             if (promise instanceof ChannelProgressivePromise) {\n-                ((ChannelProgressivePromise) promise).setProgress(progress, -1);\n+                ((ChannelProgressivePromise) promise).tryProgress(progress, -1);\n             }\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 353, "bugNodeStartChar": 12870, "bugNodeLength": 63, "fixLineNum": 353, "fixNodeStartChar": 12870, "fixNodeLength": 63, "sourceBeforeFix": "((ChannelProgressivePromise)promise).setProgress(progress,-1)", "sourceAfterFix": "((ChannelProgressivePromise)promise).tryProgress(progress,-1)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e10e9d38c4ec9ed081da916b924b43a6381fb93d", "fixCommitParentSHA1": "85a2ba37529bbd0f11443390af2544a1ee9a1742", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex 8488821..f152411 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -529,7 +529,7 @@\n         }\n \n         // Call flushNow which will also take care of clear the OP_WRITE once there is nothing left to write\n-        ch.unsafe().flushNow();\n+        ch.unsafe().flush();\n     }\n \n     private static void unregisterWritableTasks(AbstractNioChannel ch) {\n", "projectName": "netty.netty", "bugLineNum": 532, "bugNodeStartChar": 19514, "bugNodeLength": 22, "fixLineNum": 532, "fixNodeStartChar": 19514, "fixNodeLength": 19, "sourceBeforeFix": "ch.unsafe().flushNow()", "sourceAfterFix": "ch.unsafe().flush()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e10e9d38c4ec9ed081da916b924b43a6381fb93d", "fixCommitParentSHA1": "85a2ba37529bbd0f11443390af2544a1ee9a1742", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex 8488821..f152411 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -529,7 +529,7 @@\n         }\n \n         // Call flushNow which will also take care of clear the OP_WRITE once there is nothing left to write\n-        ch.unsafe().flushNow();\n+        ch.unsafe().flush();\n     }\n \n     private static void unregisterWritableTasks(AbstractNioChannel ch) {\n", "projectName": "netty.netty", "bugLineNum": 532, "bugNodeStartChar": 19514, "bugNodeLength": 22, "fixLineNum": 532, "fixNodeStartChar": 19514, "fixNodeLength": 19, "sourceBeforeFix": "ch.unsafe().flushNow()", "sourceAfterFix": "ch.unsafe().flush()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 50, "bugNodeStartChar": 2045, "bugNodeLength": 144, "fixLineNum": 50, "fixNodeStartChar": 2045, "fixNodeLength": 152, "sourceBeforeFix": "ctx.write(\"Welcome to \" + InetAddress.getLocalHost().getHostName() + \" secure chat service!\\n\")", "sourceAfterFix": "ctx.writeAndFlush(\"Welcome to \" + InetAddress.getLocalHost().getHostName() + \" secure chat service!\\n\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 50, "bugNodeStartChar": 2045, "bugNodeLength": 144, "fixLineNum": 50, "fixNodeStartChar": 2045, "fixNodeLength": 152, "sourceBeforeFix": "ctx.write(\"Welcome to \" + InetAddress.getLocalHost().getHostName() + \" secure chat service!\\n\")", "sourceAfterFix": "ctx.writeAndFlush(\"Welcome to \" + InetAddress.getLocalHost().getHostName() + \" secure chat service!\\n\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 53, "bugNodeStartChar": 2207, "bugNodeLength": 214, "fixLineNum": 53, "fixNodeStartChar": 2207, "fixNodeLength": 222, "sourceBeforeFix": "ctx.write(\"Your session is protected by \" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + \" cipher suite.\\n\")", "sourceAfterFix": "ctx.writeAndFlush(\"Your session is protected by \" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + \" cipher suite.\\n\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 53, "bugNodeStartChar": 2207, "bugNodeLength": 214, "fixLineNum": 53, "fixNodeStartChar": 2207, "fixNodeLength": 222, "sourceBeforeFix": "ctx.write(\"Your session is protected by \" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + \" cipher suite.\\n\")", "sourceAfterFix": "ctx.writeAndFlush(\"Your session is protected by \" + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + \" cipher suite.\\n\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 68, "bugNodeStartChar": 2767, "bugNodeLength": 88, "fixLineNum": 68, "fixNodeStartChar": 2767, "fixNodeLength": 96, "sourceBeforeFix": "c.write(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 68, "bugNodeStartChar": 2767, "bugNodeLength": 88, "fixLineNum": 68, "fixNodeStartChar": 2767, "fixNodeLength": 96, "sourceBeforeFix": "c.write(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 71, "bugNodeStartChar": 2894, "bugNodeLength": 30, "fixLineNum": 71, "fixNodeStartChar": 2894, "fixNodeLength": 38, "sourceBeforeFix": "c.write(\"[you] \" + msg + '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[you] \" + msg + '\\n')"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 71, "bugNodeStartChar": 2894, "bugNodeLength": 30, "fixLineNum": 71, "fixNodeStartChar": 2894, "fixNodeLength": 38, "sourceBeforeFix": "c.write(\"[you] \" + msg + '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[you] \" + msg + '\\n')"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "cad7c1f1b0e23a4a1320d967b17aafcaa0119ace", "fixCommitParentSHA1": "1fee1ef74ed8ac515c19a7f8eebd16f41a37b7b6", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\nindex 4e21627..e2c4fd5 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n@@ -103,7 +103,7 @@\n                 cbb.addComponent(buffer);\n                 cbb.writerIndex(cbb.writerIndex() + buffer.readableBytes());\n             } else {\n-                CompositeByteBuf cbb = compositeBuffer();\n+                CompositeByteBuf cbb = compositeBuffer(Integer.MAX_VALUE);\n                 cbb.addComponents(byteBuf, buffer);\n                 cbb.writerIndex(byteBuf.readableBytes() + buffer.readableBytes());\n                 byteBuf = cbb;\n@@ -142,7 +142,7 @@\n         if (byteBuf != null) {\n             byteBuf.release();\n         }\n-        byteBuf = wrappedBuffer(byteBuffer);\n+        byteBuf = wrappedBuffer(Integer.MAX_VALUE, byteBuffer);\n         size = newsize;\n         completed = true;\n     }\n", "projectName": "netty.netty", "bugLineNum": 106, "bugNodeStartChar": 3580, "bugNodeLength": 17, "fixLineNum": 106, "fixNodeStartChar": 3580, "fixNodeLength": 34, "sourceBeforeFix": "compositeBuffer()", "sourceAfterFix": "compositeBuffer(Integer.MAX_VALUE)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "cad7c1f1b0e23a4a1320d967b17aafcaa0119ace", "fixCommitParentSHA1": "1fee1ef74ed8ac515c19a7f8eebd16f41a37b7b6", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\nindex 4e21627..e2c4fd5 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n@@ -103,7 +103,7 @@\n                 cbb.addComponent(buffer);\n                 cbb.writerIndex(cbb.writerIndex() + buffer.readableBytes());\n             } else {\n-                CompositeByteBuf cbb = compositeBuffer();\n+                CompositeByteBuf cbb = compositeBuffer(Integer.MAX_VALUE);\n                 cbb.addComponents(byteBuf, buffer);\n                 cbb.writerIndex(byteBuf.readableBytes() + buffer.readableBytes());\n                 byteBuf = cbb;\n@@ -142,7 +142,7 @@\n         if (byteBuf != null) {\n             byteBuf.release();\n         }\n-        byteBuf = wrappedBuffer(byteBuffer);\n+        byteBuf = wrappedBuffer(Integer.MAX_VALUE, byteBuffer);\n         size = newsize;\n         completed = true;\n     }\n", "projectName": "netty.netty", "bugLineNum": 145, "bugNodeStartChar": 4860, "bugNodeLength": 25, "fixLineNum": 145, "fixNodeStartChar": 4860, "fixNodeLength": 44, "sourceBeforeFix": "wrappedBuffer(byteBuffer)", "sourceAfterFix": "wrappedBuffer(Integer.MAX_VALUE,byteBuffer)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "26b56d3addb34b409bf10b819a1e70ea2ad46b71", "fixCommitParentSHA1": "720de2e6ccd9bac41ffe24612d979a38a28fb616", "bugFilePath": "transport/src/main/java/io/netty/channel/MessageList.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/MessageList.java b/transport/src/main/java/io/netty/channel/MessageList.java\nindex 0a667b9..1b53fbb 100644\n--- a/transport/src/main/java/io/netty/channel/MessageList.java\n+++ b/transport/src/main/java/io/netty/channel/MessageList.java\n@@ -268,7 +268,7 @@\n         try {\n             if (byteBufsOnly) {\n                 while (i < srcEndIdx) {\n-                    T m = src[srcIdx];\n+                    T m = src[i];\n                     if (m == null) {\n                         throw new NullPointerException(\"src[\" + srcIdx + ']');\n                     }\n@@ -284,7 +284,7 @@\n             }\n \n             for (; i < srcEndIdx; i ++) {\n-                T m = src[srcIdx];\n+                T m = src[i];\n                 if (m == null) {\n                     throw new NullPointerException(\"src[\" + srcIdx + ']');\n                 }\n", "projectName": "netty.netty", "bugLineNum": 271, "bugNodeStartChar": 8720, "bugNodeLength": 11, "fixLineNum": 271, "fixNodeStartChar": 8720, "fixNodeLength": 6, "sourceBeforeFix": "src[srcIdx]", "sourceAfterFix": "src[i]"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "26b56d3addb34b409bf10b819a1e70ea2ad46b71", "fixCommitParentSHA1": "720de2e6ccd9bac41ffe24612d979a38a28fb616", "bugFilePath": "transport/src/main/java/io/netty/channel/MessageList.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/MessageList.java b/transport/src/main/java/io/netty/channel/MessageList.java\nindex 0a667b9..1b53fbb 100644\n--- a/transport/src/main/java/io/netty/channel/MessageList.java\n+++ b/transport/src/main/java/io/netty/channel/MessageList.java\n@@ -268,7 +268,7 @@\n         try {\n             if (byteBufsOnly) {\n                 while (i < srcEndIdx) {\n-                    T m = src[srcIdx];\n+                    T m = src[i];\n                     if (m == null) {\n                         throw new NullPointerException(\"src[\" + srcIdx + ']');\n                     }\n@@ -284,7 +284,7 @@\n             }\n \n             for (; i < srcEndIdx; i ++) {\n-                T m = src[srcIdx];\n+                T m = src[i];\n                 if (m == null) {\n                     throw new NullPointerException(\"src[\" + srcIdx + ']');\n                 }\n", "projectName": "netty.netty", "bugLineNum": 287, "bugNodeStartChar": 9191, "bugNodeLength": 11, "fixLineNum": 287, "fixNodeStartChar": 9191, "fixNodeLength": 6, "sourceBeforeFix": "src[srcIdx]", "sourceAfterFix": "src[i]"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c7c9e743ce8d08fecccea11372c976e63b2f2955", "fixCommitParentSHA1": "bc483724f42215c4ba53590540d83b57bfdf2099", "bugFilePath": "example/src/main/java/io/netty/example/telnet/TelnetServer.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/telnet/TelnetServer.java b/example/src/main/java/io/netty/example/telnet/TelnetServer.java\nindex 6d31936..d69da7a 100644\n--- a/example/src/main/java/io/netty/example/telnet/TelnetServer.java\n+++ b/example/src/main/java/io/netty/example/telnet/TelnetServer.java\n@@ -38,7 +38,7 @@\n             ServerBootstrap b = new ServerBootstrap();\n             b.group(bossGroup, workerGroup)\n              .channel(NioServerSocketChannel.class)\n-             .childHandler(new TelnetServerPipelineFactory());\n+             .childHandler(new TelnetServerInitializer());\n \n             b.bind(port).sync().channel().closeFuture().sync();\n         } finally {\n", "projectName": "netty.netty", "bugLineNum": 41, "bugNodeStartChar": 1378, "bugNodeLength": 33, "fixLineNum": 41, "fixNodeStartChar": 1378, "fixNodeLength": 29, "sourceBeforeFix": "new TelnetServerPipelineFactory()", "sourceAfterFix": "new TelnetServerInitializer()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "6c5c119f8cb1c5795b43ab73ccc54ad7ad5b37a3", "fixCommitParentSHA1": "dc6e2cd62537ce1b60ccf9e7ad09efb04f155d40", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultFileRegion.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultFileRegion.java b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java\nindex b3d47f8..9abb9be 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultFileRegion.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java\n@@ -49,7 +49,7 @@\n         if (position < 0) {\n             throw new IllegalArgumentException(\"position must be >= 0 but was \" + position);\n         }\n-        if (count <= 0) {\n+        if (count < 0) {\n             throw new IllegalArgumentException(\"count must be >= 0 but was \" + count);\n         }\n         this.file = file;\n", "projectName": "netty.netty", "bugLineNum": 52, "bugNodeStartChar": 1933, "bugNodeLength": 10, "fixLineNum": 52, "fixNodeStartChar": 1933, "fixNodeLength": 9, "sourceBeforeFix": "count <= 0", "sourceAfterFix": "count < 0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8edee3272a086a57c9ae2cdba7eba5bea436c64f", "fixCommitParentSHA1": "dc070a00b228a5a4356db0a79430a5cb035d6012", "bugFilePath": "transport/src/main/java/io/netty/channel/RecvByteBufAllocator.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/RecvByteBufAllocator.java b/transport/src/main/java/io/netty/channel/RecvByteBufAllocator.java\nindex 371207a..cbf3fb3 100644\n--- a/transport/src/main/java/io/netty/channel/RecvByteBufAllocator.java\n+++ b/transport/src/main/java/io/netty/channel/RecvByteBufAllocator.java\n@@ -30,7 +30,7 @@\n      */\n     Handle newHandle();\n \n-    public interface Handle {\n+    interface Handle {\n         /**\n          * Creates a new receive buffer whose capacity is probably large enough to read all inbound data and small\n          * enough not to waste its space.\n", "projectName": "netty.netty", "bugLineNum": 33, "bugNodeStartChar": 1148, "bugNodeLength": 803, "fixLineNum": 33, "fixNodeStartChar": 1148, "fixNodeLength": 796, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d9c700e9fed0ea964eeabc46809aeb76425c2a5f", "fixCommitParentSHA1": "aa96b4b2866bfd9faaa9f6e11c2750a4b1d2d606", "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/SslHandler.java b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java\nindex 63561a3..bfa5960 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/SslHandler.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java\n@@ -267,7 +267,7 @@\n     }\n \n     public long getCloseNotifyTimeoutMillis() {\n-        return handshakeTimeoutMillis;\n+        return closeNotifyTimeoutMillis;\n     }\n \n     public void setCloseNotifyTimeout(long closeNotifyTimeout, TimeUnit unit) {\n", "projectName": "netty.netty", "bugLineNum": 270, "bugNodeStartChar": 11088, "bugNodeLength": 30, "fixLineNum": 270, "fixNodeStartChar": 11088, "fixNodeLength": 32, "sourceBeforeFix": "return handshakeTimeoutMillis; ", "sourceAfterFix": "return closeNotifyTimeoutMillis; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6c0b2be41234c6593d1ca8283f1a766ecc861026", "fixCommitParentSHA1": "c07234ed7253bcc70e56db5c74cf34a649fa4568", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex eadb9ce..28fc992 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -788,7 +788,7 @@\n             if (currentAttribute == null) {\n                 try {\n                     currentAttribute = factory.createAttribute(request,\n-                            decodeAttribute(nameAttribute.getValue(), charset));\n+                            cleanString(nameAttribute.getValue()));\n                 } catch (NullPointerException e) {\n                     throw new ErrorDataDecoderException(e);\n                 } catch (IllegalArgumentException e) {\n@@ -963,8 +963,7 @@\n                         Attribute attribute;\n                         try {\n                             attribute = factory.createAttribute(request,\n-                                    decodeAttribute(values[0].trim(), charset),\n-                                    decodeAttribute(cleanString(values[1]), charset));\n+                                    cleanString(values[0]), values[1]);\n                         } catch (NullPointerException e) {\n                             throw new ErrorDataDecoderException(e);\n                         } catch (IllegalArgumentException e) {\n@@ -1024,8 +1023,7 @@\n                             Attribute attribute;\n                             try {\n                                 attribute = factory.createAttribute(request,\n-                                        decodeAttribute(contents[0].trim(), charset),\n-                                        decodeAttribute(cleanString(contents[i]), charset));\n+                                        cleanString(contents[0]), contents[i]);\n                             } catch (NullPointerException e) {\n                                 throw new ErrorDataDecoderException(e);\n                             } catch (IllegalArgumentException e) {\n@@ -1126,8 +1124,7 @@\n             }\n             try {\n                 currentFileUpload = factory.createFileUpload(request,\n-                        decodeAttribute(nameAttribute.getValue(), charset),\n-                        decodeAttribute(filenameAttribute.getValue(), charset),\n+                        cleanString(nameAttribute.getValue()), cleanString(filenameAttribute.getValue()),\n                         contentTypeAttribute.getValue(), mechanism.value(), localCharset,\n                         size);\n             } catch (NullPointerException e) {\n", "projectName": "netty.netty", "bugLineNum": 791, "bugNodeStartChar": 31295, "bugNodeLength": 50, "fixLineNum": 791, "fixNodeStartChar": 31295, "fixNodeLength": 37, "sourceBeforeFix": "decodeAttribute(nameAttribute.getValue(),charset)", "sourceAfterFix": "cleanString(nameAttribute.getValue())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "be1426a22096f6e95d36f389a5ea9b8a38482ebe", "fixCommitParentSHA1": "d292fdafddafb749f5b5f077f5cfb00d14ae536a", "bugFilePath": "common/src/main/java/io/netty/util/NetUtil.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/NetUtil.java b/common/src/main/java/io/netty/util/NetUtil.java\nindex 9962c92..dfd6b8b 100644\n--- a/common/src/main/java/io/netty/util/NetUtil.java\n+++ b/common/src/main/java/io/netty/util/NetUtil.java\n@@ -120,7 +120,7 @@\n                 }\n             } catch (SocketException e) {\n                 //Nope. Can't do anything else, sorry!\n-                logger.error(\"Failed to enumerate network interfaces\", e);\n+                logger.warn(\"Failed to enumerate network interfaces\", e);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 123, "bugNodeStartChar": 4726, "bugNodeLength": 57, "fixLineNum": 123, "fixNodeStartChar": 4726, "fixNodeLength": 56, "sourceBeforeFix": "logger.error(\"Failed to enumerate network interfaces\",e)", "sourceAfterFix": "logger.warn(\"Failed to enumerate network interfaces\",e)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "be1426a22096f6e95d36f389a5ea9b8a38482ebe", "fixCommitParentSHA1": "d292fdafddafb749f5b5f077f5cfb00d14ae536a", "bugFilePath": "common/src/main/java/io/netty/util/NetUtil.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/NetUtil.java b/common/src/main/java/io/netty/util/NetUtil.java\nindex 9962c92..dfd6b8b 100644\n--- a/common/src/main/java/io/netty/util/NetUtil.java\n+++ b/common/src/main/java/io/netty/util/NetUtil.java\n@@ -120,7 +120,7 @@\n                 }\n             } catch (SocketException e) {\n                 //Nope. Can't do anything else, sorry!\n-                logger.error(\"Failed to enumerate network interfaces\", e);\n+                logger.warn(\"Failed to enumerate network interfaces\", e);\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 123, "bugNodeStartChar": 4726, "bugNodeLength": 57, "fixLineNum": 123, "fixNodeStartChar": 4726, "fixNodeLength": 56, "sourceBeforeFix": "logger.error(\"Failed to enumerate network interfaces\",e)", "sourceAfterFix": "logger.warn(\"Failed to enumerate network interfaces\",e)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "8632d9011e03ed1280ca20defeb4711aa327bc28", "fixCommitParentSHA1": "d299eeb48576639ef8916fd78a7503fb453fcd79", "bugFilePath": "transport/src/main/java/io/netty/channel/AbstractChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/AbstractChannel.java b/transport/src/main/java/io/netty/channel/AbstractChannel.java\nindex e117ed6..9bed510 100644\n--- a/transport/src/main/java/io/netty/channel/AbstractChannel.java\n+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java\n@@ -698,7 +698,7 @@\n                         promise.setFailure(t);\n                     }\n \n-                    if (closedChannelException != null) {\n+                    if (closedChannelException == null) {\n                         closedChannelException = new ClosedChannelException();\n                     }\n \n", "projectName": "netty.netty", "bugLineNum": 701, "bugNodeStartChar": 22671, "bugNodeLength": 30, "fixLineNum": 701, "fixNodeStartChar": 22671, "fixNodeLength": 30, "sourceBeforeFix": "closedChannelException != null", "sourceAfterFix": "closedChannelException == null"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d19b575c312ff9db4ec0b53de2f588032f1cee58", "fixCommitParentSHA1": "9feb27d58c0434afc03f3de59ff8dd8beb324a69", "bugFilePath": "common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java\nindex e962296..ccb88a9 100644\n--- a/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java\n+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java\n@@ -282,7 +282,7 @@\n \n             // Check timeout every 64 tasks because System.nanoTime() is relatively expensive.\n             // XXX: Hard-coded value - will make it configurable if it is really a problem.\n-            if ((runTasks & 0x40) == 0) {\n+            if ((runTasks & 0x3F) == 0) {\n                 if (System.nanoTime() >= deadline) {\n                     break;\n                 }\n", "projectName": "netty.netty", "bugLineNum": 285, "bugNodeStartChar": 9801, "bugNodeLength": 15, "fixLineNum": 285, "fixNodeStartChar": 9801, "fixNodeLength": 15, "sourceBeforeFix": "runTasks & 0x40", "sourceAfterFix": "runTasks & 0x3F"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "fixCommitParentSHA1": "e1dd149ca6b686fbed3abc3054e87244505139d0", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\nindex a99efa5..bae6eee 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n@@ -37,7 +37,7 @@\n         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -64,7 +64,7 @@\n         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -97,7 +97,7 @@\n         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 40, "bugNodeStartChar": 1456, "bugNodeLength": 27, "fixLineNum": 40, "fixNodeStartChar": 1456, "fixNodeLength": 26, "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "fixCommitParentSHA1": "e1dd149ca6b686fbed3abc3054e87244505139d0", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\nindex a99efa5..bae6eee 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n@@ -37,7 +37,7 @@\n         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -64,7 +64,7 @@\n         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -97,7 +97,7 @@\n         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 40, "bugNodeStartChar": 1456, "bugNodeLength": 27, "fixLineNum": 40, "fixNodeStartChar": 1456, "fixNodeLength": 26, "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "fixCommitParentSHA1": "e1dd149ca6b686fbed3abc3054e87244505139d0", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\nindex a99efa5..bae6eee 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n@@ -37,7 +37,7 @@\n         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -64,7 +64,7 @@\n         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -97,7 +97,7 @@\n         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 67, "bugNodeStartChar": 2838, "bugNodeLength": 27, "fixLineNum": 67, "fixNodeStartChar": 2838, "fixNodeLength": 26, "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "fixCommitParentSHA1": "e1dd149ca6b686fbed3abc3054e87244505139d0", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\nindex a99efa5..bae6eee 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n@@ -37,7 +37,7 @@\n         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -64,7 +64,7 @@\n         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -97,7 +97,7 @@\n         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 67, "bugNodeStartChar": 2838, "bugNodeLength": 27, "fixLineNum": 67, "fixNodeStartChar": 2838, "fixNodeLength": 26, "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "fixCommitParentSHA1": "e1dd149ca6b686fbed3abc3054e87244505139d0", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\nindex a99efa5..bae6eee 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n@@ -37,7 +37,7 @@\n         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -64,7 +64,7 @@\n         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -97,7 +97,7 @@\n         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 100, "bugNodeStartChar": 4501, "bugNodeLength": 27, "fixLineNum": 100, "fixNodeStartChar": 4501, "fixNodeLength": 26, "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "fixCommitParentSHA1": "e1dd149ca6b686fbed3abc3054e87244505139d0", "bugFilePath": "codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java", "fixPatch": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\nindex a99efa5..bae6eee 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java\n@@ -37,7 +37,7 @@\n         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -64,7 +64,7 @@\n         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n@@ -97,7 +97,7 @@\n         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n-        assertFalse(dr.isFailure());\n+        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 100, "bugNodeStartChar": 4501, "bugNodeLength": 27, "fixLineNum": 100, "fixNodeStartChar": 4501, "fixNodeLength": 26, "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9599bfd5699ae2d525a016592eb5de3f7dd681b9", "fixCommitParentSHA1": "526dafca7505904f26460a46cbe0283e161a1e9a", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\nindex 3287e31..7d67ce7 100755\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n@@ -835,7 +835,7 @@\n     }\n \n     private void invokeExceptionCaught0(Throwable cause) {\n-        ChannelStateHandler handler = (ChannelStateHandler) handler();\n+        ChannelHandler handler = handler();\n         try {\n             handler.exceptionCaught(this, cause);\n         } catch (Throwable t) {\n", "projectName": "netty.netty", "bugLineNum": 838, "bugNodeStartChar": 30010, "bugNodeLength": 62, "fixLineNum": 838, "fixNodeStartChar": 30010, "fixNodeLength": 35, "sourceBeforeFix": "ChannelStateHandler handler=(ChannelStateHandler)handler(); ", "sourceAfterFix": "ChannelHandler handler=handler(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "60ee9460a931ceecf9fee8412d2b1955607c5838", "fixCommitParentSHA1": "ee58de0698bde35363368fba267d95ace35e150e", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\nindex a371edf..d9d3cc7 100755\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n@@ -1315,7 +1315,7 @@\n         }\n \n         ChannelOperationHandler handler = (ChannelOperationHandler) handler();\n-        if (handler instanceof ChannelInboundHandler) {\n+        if (handler instanceof ChannelOutboundHandler) {\n             flushOutboundBridge();\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 1318, "bugNodeStartChar": 45963, "bugNodeLength": 40, "fixLineNum": 1318, "fixNodeStartChar": 45963, "fixNodeLength": 41, "sourceBeforeFix": "handler instanceof ChannelInboundHandler", "sourceAfterFix": "handler instanceof ChannelOutboundHandler"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4eff91df99a5ab0f443a7beab2cf4b2f0e25d6ff", "fixCommitParentSHA1": "537057340067de07d445513cacb45613b414eef6", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\nindex 0e07fed..d63d4df 100755\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n@@ -1295,7 +1295,7 @@\n     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n-            promise.tryFailure(new ClosedChannelException());\n+            promise.setFailure(new ClosedChannelException());\n             return;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 1298, "bugNodeStartChar": 45255, "bugNodeLength": 48, "fixLineNum": 1298, "fixNodeStartChar": 45255, "fixNodeLength": 48, "sourceBeforeFix": "promise.tryFailure(new ClosedChannelException())", "sourceAfterFix": "promise.setFailure(new ClosedChannelException())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4eff91df99a5ab0f443a7beab2cf4b2f0e25d6ff", "fixCommitParentSHA1": "537057340067de07d445513cacb45613b414eef6", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\nindex 0e07fed..d63d4df 100755\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n@@ -1295,7 +1295,7 @@\n     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n-            promise.tryFailure(new ClosedChannelException());\n+            promise.setFailure(new ClosedChannelException());\n             return;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 1298, "bugNodeStartChar": 45255, "bugNodeLength": 48, "fixLineNum": 1298, "fixNodeStartChar": 45255, "fixNodeLength": 48, "sourceBeforeFix": "promise.tryFailure(new ClosedChannelException())", "sourceAfterFix": "promise.setFailure(new ClosedChannelException())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e2c948782b942d79911cec09c8862de0948b31e4", "fixCommitParentSHA1": "6fe6456f8d7520bf2818e3048514aad6accdd50b", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\nindex d63d4df..0e07fed 100755\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n@@ -1295,7 +1295,7 @@\n     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n-            promise.setFailure(new ClosedChannelException());\n+            promise.tryFailure(new ClosedChannelException());\n             return;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 1298, "bugNodeStartChar": 45255, "bugNodeLength": 48, "fixLineNum": 1298, "fixNodeStartChar": 45255, "fixNodeLength": 48, "sourceBeforeFix": "promise.setFailure(new ClosedChannelException())", "sourceAfterFix": "promise.tryFailure(new ClosedChannelException())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e2c948782b942d79911cec09c8862de0948b31e4", "fixCommitParentSHA1": "6fe6456f8d7520bf2818e3048514aad6accdd50b", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\nindex d63d4df..0e07fed 100755\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java\n@@ -1295,7 +1295,7 @@\n     private void invokeFlush0(ChannelPromise promise) {\n         Channel channel = channel();\n         if (!channel.isRegistered() && !channel.isActive()) {\n-            promise.setFailure(new ClosedChannelException());\n+            promise.tryFailure(new ClosedChannelException());\n             return;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 1298, "bugNodeStartChar": 45255, "bugNodeLength": 48, "fixLineNum": 1298, "fixNodeStartChar": 45255, "fixNodeLength": 48, "sourceBeforeFix": "promise.setFailure(new ClosedChannelException())", "sourceAfterFix": "promise.tryFailure(new ClosedChannelException())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "fixCommitParentSHA1": "801f563e80fa53e5db8a0a250571f1a0a3dd0d3a", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex c90252f..0c924a5 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -295,10 +295,10 @@\n \n                 cancelledKeys = 0;\n \n-                runAllTasks();\n+                processSelectedKeys();\n                 selector = this.selector;\n \n-                processSelectedKeys();\n+                runAllTasks();\n                 selector = this.selector;\n \n                 if (isShutdown()) {\n@@ -502,7 +502,7 @@\n \n     @Override\n     protected void wakeup(boolean inEventLoop) {\n-        if (wakenUp.compareAndSet(false, true)) {\n+        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 298, "bugNodeStartChar": 11317, "bugNodeLength": 13, "fixLineNum": 298, "fixNodeStartChar": 11317, "fixNodeLength": 21, "sourceBeforeFix": "runAllTasks()", "sourceAfterFix": "processSelectedKeys()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "fixCommitParentSHA1": "801f563e80fa53e5db8a0a250571f1a0a3dd0d3a", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex c90252f..0c924a5 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -295,10 +295,10 @@\n \n                 cancelledKeys = 0;\n \n-                runAllTasks();\n+                processSelectedKeys();\n                 selector = this.selector;\n \n-                processSelectedKeys();\n+                runAllTasks();\n                 selector = this.selector;\n \n                 if (isShutdown()) {\n@@ -502,7 +502,7 @@\n \n     @Override\n     protected void wakeup(boolean inEventLoop) {\n-        if (wakenUp.compareAndSet(false, true)) {\n+        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 298, "bugNodeStartChar": 11317, "bugNodeLength": 13, "fixLineNum": 298, "fixNodeStartChar": 11317, "fixNodeLength": 21, "sourceBeforeFix": "runAllTasks()", "sourceAfterFix": "processSelectedKeys()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "fixCommitParentSHA1": "801f563e80fa53e5db8a0a250571f1a0a3dd0d3a", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex c90252f..0c924a5 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -295,10 +295,10 @@\n \n                 cancelledKeys = 0;\n \n-                runAllTasks();\n+                processSelectedKeys();\n                 selector = this.selector;\n \n-                processSelectedKeys();\n+                runAllTasks();\n                 selector = this.selector;\n \n                 if (isShutdown()) {\n@@ -502,7 +502,7 @@\n \n     @Override\n     protected void wakeup(boolean inEventLoop) {\n-        if (wakenUp.compareAndSet(false, true)) {\n+        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 301, "bugNodeStartChar": 11391, "bugNodeLength": 21, "fixLineNum": 301, "fixNodeStartChar": 11391, "fixNodeLength": 13, "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "fixCommitParentSHA1": "801f563e80fa53e5db8a0a250571f1a0a3dd0d3a", "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex c90252f..0c924a5 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -295,10 +295,10 @@\n \n                 cancelledKeys = 0;\n \n-                runAllTasks();\n+                processSelectedKeys();\n                 selector = this.selector;\n \n-                processSelectedKeys();\n+                runAllTasks();\n                 selector = this.selector;\n \n                 if (isShutdown()) {\n@@ -502,7 +502,7 @@\n \n     @Override\n     protected void wakeup(boolean inEventLoop) {\n-        if (wakenUp.compareAndSet(false, true)) {\n+        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }\n", "projectName": "netty.netty", "bugLineNum": 301, "bugNodeStartChar": 11391, "bugNodeLength": 21, "fixLineNum": 301, "fixNodeStartChar": 11391, "fixNodeLength": 13, "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "d385cba41cd74f528443dd1425728d21ec151998", "fixCommitParentSHA1": "76eb40a4d2c8a651e6b58cdebd3773f84e79b754", "bugFilePath": "transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java\nindex a770988..f6a3ad1 100644\n--- a/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java\n+++ b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java\n@@ -40,14 +40,14 @@\n     }\n \n     @Override\n-    public boolean acceptInboundMessage(Object msg) throws Exception {\n+    public final boolean acceptInboundMessage(Object msg) throws Exception {\n         if (super.acceptInboundMessage(msg)) {\n-            return isDecodable((SctpMessage) msg);\n+            return acceptInboundMessage((SctpMessage) msg);\n         }\n         return false;\n     }\n \n-    protected boolean isDecodable(SctpMessage msg) {\n+    protected boolean acceptInboundMessage(SctpMessage msg) {\n         return msg.protocolIdentifier() == protocolIdentifier && msg.streamIdentifier() == streamIdentifier;\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 42, "bugNodeStartChar": 1658, "bugNodeLength": 216, "fixLineNum": 42, "fixNodeStartChar": 1658, "fixNodeLength": 222, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "30e80f8c5c7f0bb692dfd8efeadb24d1cf840be6", "fixCommitParentSHA1": "ec51b359c9d1ca36873b2de5251a7fbd8b4177f3", "bugFilePath": "transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java b/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java\nindex a5d3ab0..c1a6b3c 100644\n--- a/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java\n+++ b/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java\n@@ -82,7 +82,7 @@\n                 try {\n                     if (!isSupported(msg)) {\n                         if (out == null) {\n-                            out = ctx.nextOutboundMessageBuffer();\n+                            out = ctx.nextInboundMessageBuffer();\n                         }\n                         out.add(msg);\n                         unsupportedFound = true;\n", "projectName": "netty.netty", "bugLineNum": 85, "bugNodeStartChar": 2922, "bugNodeLength": 31, "fixLineNum": 85, "fixNodeStartChar": 2922, "fixNodeLength": 30, "sourceBeforeFix": "ctx.nextOutboundMessageBuffer()", "sourceAfterFix": "ctx.nextInboundMessageBuffer()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "30e80f8c5c7f0bb692dfd8efeadb24d1cf840be6", "fixCommitParentSHA1": "ec51b359c9d1ca36873b2de5251a7fbd8b4177f3", "bugFilePath": "transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java b/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java\nindex a5d3ab0..c1a6b3c 100644\n--- a/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java\n+++ b/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java\n@@ -82,7 +82,7 @@\n                 try {\n                     if (!isSupported(msg)) {\n                         if (out == null) {\n-                            out = ctx.nextOutboundMessageBuffer();\n+                            out = ctx.nextInboundMessageBuffer();\n                         }\n                         out.add(msg);\n                         unsupportedFound = true;\n", "projectName": "netty.netty", "bugLineNum": 85, "bugNodeStartChar": 2922, "bugNodeLength": 31, "fixLineNum": 85, "fixNodeStartChar": 2922, "fixNodeLength": 30, "sourceBeforeFix": "ctx.nextOutboundMessageBuffer()", "sourceAfterFix": "ctx.nextInboundMessageBuffer()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2e44a1ba91557d4d6231bd46c63697776208bc9e", "fixCommitParentSHA1": "5b81e1692dce59992c13c2ab8774ece1a8c48e52", "bugFilePath": "transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java b/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java\nindex d2f5109..7aa7904 100644\n--- a/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java\n+++ b/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java\n@@ -137,7 +137,7 @@\n                 timestamps.add(System.nanoTime());\n                 if (empty) {\n                     try {\n-                        Thread.sleep(400);\n+                        Thread.sleep(401);\n                     } catch (InterruptedException e) {\n                         // Ignore\n                     }\n@@ -176,7 +176,7 @@\n             public void run() {\n                 timestamps.add(System.nanoTime());\n                 try {\n-                    Thread.sleep(50);\n+                    Thread.sleep(51);\n                 } catch (InterruptedException e) {\n                     // Ignore\n                 }\n", "projectName": "netty.netty", "bugLineNum": 140, "bugNodeStartChar": 4376, "bugNodeLength": 17, "fixLineNum": 140, "fixNodeStartChar": 4376, "fixNodeLength": 17, "sourceBeforeFix": "Thread.sleep(400)", "sourceAfterFix": "Thread.sleep(401)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2e44a1ba91557d4d6231bd46c63697776208bc9e", "fixCommitParentSHA1": "5b81e1692dce59992c13c2ab8774ece1a8c48e52", "bugFilePath": "transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java b/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java\nindex d2f5109..7aa7904 100644\n--- a/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java\n+++ b/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java\n@@ -137,7 +137,7 @@\n                 timestamps.add(System.nanoTime());\n                 if (empty) {\n                     try {\n-                        Thread.sleep(400);\n+                        Thread.sleep(401);\n                     } catch (InterruptedException e) {\n                         // Ignore\n                     }\n@@ -176,7 +176,7 @@\n             public void run() {\n                 timestamps.add(System.nanoTime());\n                 try {\n-                    Thread.sleep(50);\n+                    Thread.sleep(51);\n                 } catch (InterruptedException e) {\n                     // Ignore\n                 }\n", "projectName": "netty.netty", "bugLineNum": 179, "bugNodeStartChar": 5670, "bugNodeLength": 16, "fixLineNum": 179, "fixNodeStartChar": 5670, "fixNodeLength": 16, "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(51)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "eeab6767db852d251bb86a7f4363fb31c9f07d03", "fixCommitParentSHA1": "82f876f7db96810e16648ca3afd3eaad4a0298ad", "bugFilePath": "transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\nindex 530e910..fd2ea13 100644\n--- a/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\n+++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\n@@ -43,7 +43,7 @@\n  * {@link Bootstrap} sub-class which allows easy bootstrap of {@link ServerChannel}\n  *\n  */\n-public final class ServerBootstrap extends AbstractBootstrap<ServerBootstrap, Channel> {\n+public final class ServerBootstrap extends AbstractBootstrap<ServerBootstrap, ServerChannel> {\n \n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(ServerBootstrap.class);\n \n", "projectName": "netty.netty", "bugLineNum": 46, "bugNodeStartChar": 1670, "bugNodeLength": 43, "fixLineNum": 46, "fixNodeStartChar": 1670, "fixNodeLength": 49, "sourceBeforeFix": "AbstractBootstrap<ServerBootstrap,Channel>", "sourceAfterFix": "AbstractBootstrap<ServerBootstrap,ServerChannel>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "33c9f3f1e5a6dd0e1f685b0ea168e90dec6ef3ec", "fixCommitParentSHA1": "05d16cd361c37de21426e6af053d1bc8a10054af", "bugFilePath": "transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\nindex fd2ea13..530e910 100644\n--- a/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\n+++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\n@@ -43,7 +43,7 @@\n  * {@link Bootstrap} sub-class which allows easy bootstrap of {@link ServerChannel}\n  *\n  */\n-public final class ServerBootstrap extends AbstractBootstrap<ServerBootstrap, ServerChannel> {\n+public final class ServerBootstrap extends AbstractBootstrap<ServerBootstrap, Channel> {\n \n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(ServerBootstrap.class);\n \n", "projectName": "netty.netty", "bugLineNum": 46, "bugNodeStartChar": 1670, "bugNodeLength": 49, "fixLineNum": 46, "fixNodeStartChar": 1670, "fixNodeLength": 43, "sourceBeforeFix": "AbstractBootstrap<ServerBootstrap,ServerChannel>", "sourceAfterFix": "AbstractBootstrap<ServerBootstrap,Channel>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "fixCommitParentSHA1": "a54217053f54e06a6f2f8f89709b1568e5d00827", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex a5f1705..32d981c 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -1186,18 +1186,19 @@\n     private String readLineStandard() throws NotEnoughDataDecoderException {\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (undecodedChunk.readable()) {\n                 byte nextByte = undecodedChunk.readByte();\n                 if (nextByte == HttpConstants.CR) {\n                     nextByte = undecodedChunk.readByte();\n                     if (nextByte == HttpConstants.LF) {\n-                        return sb.toString();\n+                        return line.toString(charset);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n@@ -1225,7 +1226,8 @@\n         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {\n@@ -1233,16 +1235,16 @@\n                         nextByte = sao.bytes[sao.pos++];\n                         if (nextByte == HttpConstants.LF) {\n                             sao.setReadPosition(0);\n-                            return sb.toString();\n+                            return line.toString(charset);\n                         }\n                     } else {\n-                        sb.append((char) nextByte);\n+                        line.writeByte(nextByte);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n                     sao.setReadPosition(0);\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n", "projectName": "netty.netty", "bugLineNum": 1189, "bugNodeStartChar": 48727, "bugNodeLength": 41, "fixLineNum": 1189, "fixNodeStartChar": 48727, "fixNodeLength": 26, "sourceBeforeFix": "StringBuilder sb=new StringBuilder(64); ", "sourceAfterFix": "ByteBuf line=buffer(64); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "fixCommitParentSHA1": "a54217053f54e06a6f2f8f89709b1568e5d00827", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex a5f1705..32d981c 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -1186,18 +1186,19 @@\n     private String readLineStandard() throws NotEnoughDataDecoderException {\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (undecodedChunk.readable()) {\n                 byte nextByte = undecodedChunk.readByte();\n                 if (nextByte == HttpConstants.CR) {\n                     nextByte = undecodedChunk.readByte();\n                     if (nextByte == HttpConstants.LF) {\n-                        return sb.toString();\n+                        return line.toString(charset);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n@@ -1225,7 +1226,8 @@\n         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {\n@@ -1233,16 +1235,16 @@\n                         nextByte = sao.bytes[sao.pos++];\n                         if (nextByte == HttpConstants.LF) {\n                             sao.setReadPosition(0);\n-                            return sb.toString();\n+                            return line.toString(charset);\n                         }\n                     } else {\n-                        sb.append((char) nextByte);\n+                        line.writeByte(nextByte);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n                     sao.setReadPosition(0);\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n", "projectName": "netty.netty", "bugLineNum": 1195, "bugNodeStartChar": 49073, "bugNodeLength": 13, "fixLineNum": 1195, "fixNodeStartChar": 49073, "fixNodeLength": 22, "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "fixCommitParentSHA1": "a54217053f54e06a6f2f8f89709b1568e5d00827", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex a5f1705..32d981c 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -1186,18 +1186,19 @@\n     private String readLineStandard() throws NotEnoughDataDecoderException {\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (undecodedChunk.readable()) {\n                 byte nextByte = undecodedChunk.readByte();\n                 if (nextByte == HttpConstants.CR) {\n                     nextByte = undecodedChunk.readByte();\n                     if (nextByte == HttpConstants.LF) {\n-                        return sb.toString();\n+                        return line.toString(charset);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n@@ -1225,7 +1226,8 @@\n         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {\n@@ -1233,16 +1235,16 @@\n                         nextByte = sao.bytes[sao.pos++];\n                         if (nextByte == HttpConstants.LF) {\n                             sao.setReadPosition(0);\n-                            return sb.toString();\n+                            return line.toString(charset);\n                         }\n                     } else {\n-                        sb.append((char) nextByte);\n+                        line.writeByte(nextByte);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n                     sao.setReadPosition(0);\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n", "projectName": "netty.netty", "bugLineNum": 1198, "bugNodeStartChar": 49196, "bugNodeLength": 13, "fixLineNum": 1198, "fixNodeStartChar": 49196, "fixNodeLength": 22, "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "fixCommitParentSHA1": "a54217053f54e06a6f2f8f89709b1568e5d00827", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex a5f1705..32d981c 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -1186,18 +1186,19 @@\n     private String readLineStandard() throws NotEnoughDataDecoderException {\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (undecodedChunk.readable()) {\n                 byte nextByte = undecodedChunk.readByte();\n                 if (nextByte == HttpConstants.CR) {\n                     nextByte = undecodedChunk.readByte();\n                     if (nextByte == HttpConstants.LF) {\n-                        return sb.toString();\n+                        return line.toString(charset);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n@@ -1225,7 +1226,8 @@\n         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {\n@@ -1233,16 +1235,16 @@\n                         nextByte = sao.bytes[sao.pos++];\n                         if (nextByte == HttpConstants.LF) {\n                             sao.setReadPosition(0);\n-                            return sb.toString();\n+                            return line.toString(charset);\n                         }\n                     } else {\n-                        sb.append((char) nextByte);\n+                        line.writeByte(nextByte);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n                     sao.setReadPosition(0);\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n", "projectName": "netty.netty", "bugLineNum": 1228, "bugNodeStartChar": 50198, "bugNodeLength": 41, "fixLineNum": 1228, "fixNodeStartChar": 50198, "fixNodeLength": 26, "sourceBeforeFix": "StringBuilder sb=new StringBuilder(64); ", "sourceAfterFix": "ByteBuf line=buffer(64); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "fixCommitParentSHA1": "a54217053f54e06a6f2f8f89709b1568e5d00827", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex a5f1705..32d981c 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -1186,18 +1186,19 @@\n     private String readLineStandard() throws NotEnoughDataDecoderException {\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (undecodedChunk.readable()) {\n                 byte nextByte = undecodedChunk.readByte();\n                 if (nextByte == HttpConstants.CR) {\n                     nextByte = undecodedChunk.readByte();\n                     if (nextByte == HttpConstants.LF) {\n-                        return sb.toString();\n+                        return line.toString(charset);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n@@ -1225,7 +1226,8 @@\n         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {\n@@ -1233,16 +1235,16 @@\n                         nextByte = sao.bytes[sao.pos++];\n                         if (nextByte == HttpConstants.LF) {\n                             sao.setReadPosition(0);\n-                            return sb.toString();\n+                            return line.toString(charset);\n                         }\n                     } else {\n-                        sb.append((char) nextByte);\n+                        line.writeByte(nextByte);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n                     sao.setReadPosition(0);\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n", "projectName": "netty.netty", "bugLineNum": 1236, "bugNodeStartChar": 50639, "bugNodeLength": 13, "fixLineNum": 1236, "fixNodeStartChar": 50639, "fixNodeLength": 22, "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "fixCommitParentSHA1": "a54217053f54e06a6f2f8f89709b1568e5d00827", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\nindex a5f1705..32d981c 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java\n@@ -1186,18 +1186,19 @@\n     private String readLineStandard() throws NotEnoughDataDecoderException {\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (undecodedChunk.readable()) {\n                 byte nextByte = undecodedChunk.readByte();\n                 if (nextByte == HttpConstants.CR) {\n                     nextByte = undecodedChunk.readByte();\n                     if (nextByte == HttpConstants.LF) {\n-                        return sb.toString();\n+                        return line.toString(charset);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n@@ -1225,7 +1226,8 @@\n         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n-            StringBuilder sb = new StringBuilder(64);\n+            ByteBuf line = buffer(64);\n+\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {\n@@ -1233,16 +1235,16 @@\n                         nextByte = sao.bytes[sao.pos++];\n                         if (nextByte == HttpConstants.LF) {\n                             sao.setReadPosition(0);\n-                            return sb.toString();\n+                            return line.toString(charset);\n                         }\n                     } else {\n-                        sb.append((char) nextByte);\n+                        line.writeByte(nextByte);\n                     }\n                 } else if (nextByte == HttpConstants.LF) {\n                     sao.setReadPosition(0);\n-                    return sb.toString();\n+                    return line.toString(charset);\n                 } else {\n-                    sb.append((char) nextByte);\n+                    line.writeByte(nextByte);\n                 }\n             }\n         } catch (IndexOutOfBoundsException e) {\n", "projectName": "netty.netty", "bugLineNum": 1243, "bugNodeStartChar": 50913, "bugNodeLength": 13, "fixLineNum": 1243, "fixNodeStartChar": 50913, "fixNodeLength": 22, "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "76d7829d38803f607329a987b6c8d31a7a528338", "fixCommitParentSHA1": "1295f6d3315c3d3d4152575ec9325b6d73ba0913", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java\nindex 8ce572c..ad647aa 100755\n--- a/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java\n+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java\n@@ -200,7 +200,7 @@\n             if (remoteAddress == null) {\n                 return 0;\n             }\n-            buf.add(new DatagramPacket(buffer.writerIndex(buffer.writerIndex() + data.remaining()), remoteAddress));\n+            buf.add(new DatagramPacket(buffer.writerIndex(buffer.writerIndex() + data.position()), remoteAddress));\n             free = false;\n             return 1;\n         } catch (Throwable cause) {\n", "projectName": "netty.netty", "bugLineNum": 203, "bugNodeStartChar": 6368, "bugNodeLength": 16, "fixLineNum": 203, "fixNodeStartChar": 6368, "fixNodeLength": 15, "sourceBeforeFix": "data.remaining()", "sourceAfterFix": "data.position()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "76d7829d38803f607329a987b6c8d31a7a528338", "fixCommitParentSHA1": "1295f6d3315c3d3d4152575ec9325b6d73ba0913", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java\nindex 8ce572c..ad647aa 100755\n--- a/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java\n+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java\n@@ -200,7 +200,7 @@\n             if (remoteAddress == null) {\n                 return 0;\n             }\n-            buf.add(new DatagramPacket(buffer.writerIndex(buffer.writerIndex() + data.remaining()), remoteAddress));\n+            buf.add(new DatagramPacket(buffer.writerIndex(buffer.writerIndex() + data.position()), remoteAddress));\n             free = false;\n             return 1;\n         } catch (Throwable cause) {\n", "projectName": "netty.netty", "bugLineNum": 203, "bugNodeStartChar": 6368, "bugNodeLength": 16, "fixLineNum": 203, "fixNodeStartChar": 6368, "fixNodeLength": 15, "sourceBeforeFix": "data.remaining()", "sourceAfterFix": "data.position()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "737a3508546a125e900be9d1bb123952c0a81f20", "fixCommitParentSHA1": "4472fe9795357d2f623df503c45a8005cb20a3d5", "bugFilePath": "transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java", "fixPatch": "diff --git a/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java\nindex 6def25b..d15f846 100644\n--- a/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java\n+++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java\n@@ -23,7 +23,7 @@\n /**\n  * Option for configuring a serial port connection\n  */\n-public class RxtxChannelOption<T> extends ChannelOption<T> {\n+public final class RxtxChannelOption<T> extends ChannelOption<T> {\n     public static final RxtxChannelOption<Integer> BAUD_RATE =\n             new RxtxChannelOption<Integer>(\"BAUD_RATE\");\n \n", "projectName": "netty.netty", "bugLineNum": 23, "bugNodeStartChar": 877, "bugNodeLength": 905, "fixLineNum": 23, "fixNodeStartChar": 877, "fixNodeLength": 911, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "737a3508546a125e900be9d1bb123952c0a81f20", "fixCommitParentSHA1": "4472fe9795357d2f623df503c45a8005cb20a3d5", "bugFilePath": "transport-udt/src/main/java/io/netty/channel/udt/UdtChannelOption.java", "fixPatch": "diff --git a/transport-udt/src/main/java/io/netty/channel/udt/UdtChannelOption.java b/transport-udt/src/main/java/io/netty/channel/udt/UdtChannelOption.java\nindex 8a663da..a45e072 100644\n--- a/transport-udt/src/main/java/io/netty/channel/udt/UdtChannelOption.java\n+++ b/transport-udt/src/main/java/io/netty/channel/udt/UdtChannelOption.java\n@@ -21,7 +21,7 @@\n /**\n  * Options for the UDT transport\n  */\n-public class UdtChannelOption<T> extends ChannelOption<T> {\n+public final class UdtChannelOption<T> extends ChannelOption<T> {\n \n     /**\n      * See {@link OptionUDT#Protocol_Receive_Buffer_Size}.\n", "projectName": "netty.netty", "bugLineNum": 21, "bugNodeStartChar": 741, "bugNodeLength": 1076, "fixLineNum": 21, "fixNodeStartChar": 741, "fixNodeLength": 1082, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "312810d415da381fc6cd53358a4e986e7bdc4f63", "fixCommitParentSHA1": "e5a8958ed6b4e33ef554ce6627e3e1cb5aeba4bd", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java\nindex f5ea2bb..1e52893 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java\n@@ -201,13 +201,13 @@\n         }\n \n         String upgrade = response.getHeader(Names.UPGRADE);\n-        if (Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n+        if (!Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \"\n                     + response.getHeader(Names.UPGRADE));\n         }\n \n         String connection = response.getHeader(Names.CONNECTION);\n-        if (Values.UPGRADE.equalsIgnoreCase(connection)) {\n+        if (!Values.UPGRADE.equalsIgnoreCase(connection)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n                     + response.getHeader(Names.CONNECTION));\n         }\n", "projectName": "netty.netty", "bugLineNum": 204, "bugNodeStartChar": 7725, "bugNodeLength": 42, "fixLineNum": 204, "fixNodeStartChar": 7725, "fixNodeLength": 43, "sourceBeforeFix": "Values.WEBSOCKET.equalsIgnoreCase(upgrade)", "sourceAfterFix": "!Values.WEBSOCKET.equalsIgnoreCase(upgrade)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "312810d415da381fc6cd53358a4e986e7bdc4f63", "fixCommitParentSHA1": "e5a8958ed6b4e33ef554ce6627e3e1cb5aeba4bd", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java\nindex f5ea2bb..1e52893 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java\n@@ -201,13 +201,13 @@\n         }\n \n         String upgrade = response.getHeader(Names.UPGRADE);\n-        if (Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n+        if (!Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \"\n                     + response.getHeader(Names.UPGRADE));\n         }\n \n         String connection = response.getHeader(Names.CONNECTION);\n-        if (Values.UPGRADE.equalsIgnoreCase(connection)) {\n+        if (!Values.UPGRADE.equalsIgnoreCase(connection)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n                     + response.getHeader(Names.CONNECTION));\n         }\n", "projectName": "netty.netty", "bugLineNum": 210, "bugNodeStartChar": 8007, "bugNodeLength": 43, "fixLineNum": 210, "fixNodeStartChar": 8007, "fixNodeLength": 44, "sourceBeforeFix": "Values.UPGRADE.equalsIgnoreCase(connection)", "sourceAfterFix": "!Values.UPGRADE.equalsIgnoreCase(connection)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "312810d415da381fc6cd53358a4e986e7bdc4f63", "fixCommitParentSHA1": "e5a8958ed6b4e33ef554ce6627e3e1cb5aeba4bd", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java\nindex 588cd43..474f5a9 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java\n@@ -200,13 +200,13 @@\n         }\n \n         String upgrade = response.getHeader(Names.UPGRADE);\n-        if (Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n+        if (!Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \"\n                     + response.getHeader(Names.UPGRADE));\n         }\n \n         String connection = response.getHeader(Names.CONNECTION);\n-        if (Values.UPGRADE.equalsIgnoreCase(connection)) {\n+        if (!Values.UPGRADE.equalsIgnoreCase(connection)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n                     + response.getHeader(Names.CONNECTION));\n         }\n", "projectName": "netty.netty", "bugLineNum": 203, "bugNodeStartChar": 7725, "bugNodeLength": 42, "fixLineNum": 203, "fixNodeStartChar": 7725, "fixNodeLength": 43, "sourceBeforeFix": "Values.WEBSOCKET.equalsIgnoreCase(upgrade)", "sourceAfterFix": "!Values.WEBSOCKET.equalsIgnoreCase(upgrade)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "312810d415da381fc6cd53358a4e986e7bdc4f63", "fixCommitParentSHA1": "e5a8958ed6b4e33ef554ce6627e3e1cb5aeba4bd", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java\nindex 588cd43..474f5a9 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java\n@@ -200,13 +200,13 @@\n         }\n \n         String upgrade = response.getHeader(Names.UPGRADE);\n-        if (Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n+        if (!Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \"\n                     + response.getHeader(Names.UPGRADE));\n         }\n \n         String connection = response.getHeader(Names.CONNECTION);\n-        if (Values.UPGRADE.equalsIgnoreCase(connection)) {\n+        if (!Values.UPGRADE.equalsIgnoreCase(connection)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n                     + response.getHeader(Names.CONNECTION));\n         }\n", "projectName": "netty.netty", "bugLineNum": 209, "bugNodeStartChar": 8007, "bugNodeLength": 43, "fixLineNum": 209, "fixNodeStartChar": 8007, "fixNodeLength": 44, "sourceBeforeFix": "Values.UPGRADE.equalsIgnoreCase(connection)", "sourceAfterFix": "!Values.UPGRADE.equalsIgnoreCase(connection)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "97d07253e2933dbca0d08cd19072503506bda863", "fixCommitParentSHA1": "a0da613e86e2fc2fa2a8bf1179d4492bc9cad7d9", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java\nindex d530be2..72ebffa 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java\n@@ -34,10 +34,10 @@\n         new SpdySessionStatus(1, \"PROTOCOL_ERROR\");\n \n     /**\n-     * 11 Internal Error\n+     * 2 Internal Error\n      */\n     public static final SpdySessionStatus INTERNAL_ERROR =\n-        new SpdySessionStatus(11, \"INTERNAL_ERROR\");\n+        new SpdySessionStatus(2, \"INTERNAL_ERROR\");\n \n     /**\n      * Returns the {@link SpdySessionStatus} represented by the specified code.\n@@ -50,7 +50,7 @@\n             return OK;\n         case 1:\n             return PROTOCOL_ERROR;\n-        case 11:\n+        case 2:\n             return INTERNAL_ERROR;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 40, "bugNodeStartChar": 1204, "bugNodeLength": 43, "fixLineNum": 40, "fixNodeStartChar": 1204, "fixNodeLength": 42, "sourceBeforeFix": "new SpdySessionStatus(11,\"INTERNAL_ERROR\")", "sourceAfterFix": "new SpdySessionStatus(2,\"INTERNAL_ERROR\")"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "97d07253e2933dbca0d08cd19072503506bda863", "fixCommitParentSHA1": "a0da613e86e2fc2fa2a8bf1179d4492bc9cad7d9", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java\nindex d530be2..72ebffa 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionStatus.java\n@@ -34,10 +34,10 @@\n         new SpdySessionStatus(1, \"PROTOCOL_ERROR\");\n \n     /**\n-     * 11 Internal Error\n+     * 2 Internal Error\n      */\n     public static final SpdySessionStatus INTERNAL_ERROR =\n-        new SpdySessionStatus(11, \"INTERNAL_ERROR\");\n+        new SpdySessionStatus(2, \"INTERNAL_ERROR\");\n \n     /**\n      * Returns the {@link SpdySessionStatus} represented by the specified code.\n@@ -50,7 +50,7 @@\n             return OK;\n         case 1:\n             return PROTOCOL_ERROR;\n-        case 11:\n+        case 2:\n             return INTERNAL_ERROR;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 53, "bugNodeStartChar": 1672, "bugNodeLength": 8, "fixLineNum": 53, "fixNodeStartChar": 1672, "fixNodeLength": 7, "sourceBeforeFix": "case 11: ", "sourceAfterFix": "case 2: "}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d28eca7138217389631a406f7cb116f34a8f2814", "fixCommitParentSHA1": "46d713970b624b01a4f4d4cfbbc8523e57e16c14", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java\nindex f3f5f02..fadf84f 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java\n@@ -228,15 +228,15 @@\n         }\n \n         String upgrade = response.getHeader(Names.UPGRADE);\n-        if (Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n+        if (!Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \"\n-                    + response.getHeader(Names.UPGRADE));\n+                    + upgrade);\n         }\n \n         String connection = response.getHeader(Names.CONNECTION);\n-        if (Values.UPGRADE.equalsIgnoreCase(connection)) {\n+        if (!Values.UPGRADE.equalsIgnoreCase(connection)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n-                    + response.getHeader(Names.CONNECTION));\n+                    + connection);\n         }\n \n         byte[] challenge = response.getContent().array();\n", "projectName": "netty.netty", "bugLineNum": 231, "bugNodeStartChar": 8432, "bugNodeLength": 42, "fixLineNum": 231, "fixNodeStartChar": 8432, "fixNodeLength": 43, "sourceBeforeFix": "Values.WEBSOCKET.equalsIgnoreCase(upgrade)", "sourceAfterFix": "!Values.WEBSOCKET.equalsIgnoreCase(upgrade)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d28eca7138217389631a406f7cb116f34a8f2814", "fixCommitParentSHA1": "46d713970b624b01a4f4d4cfbbc8523e57e16c14", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java\nindex f3f5f02..fadf84f 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java\n@@ -228,15 +228,15 @@\n         }\n \n         String upgrade = response.getHeader(Names.UPGRADE);\n-        if (Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n+        if (!Values.WEBSOCKET.equalsIgnoreCase(upgrade)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response upgrade: \"\n-                    + response.getHeader(Names.UPGRADE));\n+                    + upgrade);\n         }\n \n         String connection = response.getHeader(Names.CONNECTION);\n-        if (Values.UPGRADE.equalsIgnoreCase(connection)) {\n+        if (!Values.UPGRADE.equalsIgnoreCase(connection)) {\n             throw new WebSocketHandshakeException(\"Invalid handshake response connection: \"\n-                    + response.getHeader(Names.CONNECTION));\n+                    + connection);\n         }\n \n         byte[] challenge = response.getContent().array();\n", "projectName": "netty.netty", "bugLineNum": 237, "bugNodeStartChar": 8714, "bugNodeLength": 43, "fixLineNum": 237, "fixNodeStartChar": 8714, "fixNodeLength": 44, "sourceBeforeFix": "Values.UPGRADE.equalsIgnoreCase(connection)", "sourceAfterFix": "!Values.UPGRADE.equalsIgnoreCase(connection)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "f1e382c89dbbc36ae1b116052b1ed8f780c0178c", "fixCommitParentSHA1": "d78f5a4f766018def64ee01e9ebe610bddb1d12a", "bugFilePath": "testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java", "fixPatch": "diff --git a/testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java b/testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java\nindex ed097bf..0f41a51 100644\n--- a/testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java\n+++ b/testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java\n@@ -87,7 +87,7 @@\n                 // Try to open a SCTP Channel, by using reflection to make it compile also on\n                 // operation systems that not support SCTP like OSX and Windows\n                 Class<?> sctpChannelClass = Class.forName(\"com.sun.nio.sctp.SctpChannel\");\n-                Channel channel = (Channel) sctpChannelClass.getMethod(\"open\", null).invoke(null, null);\n+                Channel channel = (Channel) sctpChannelClass.getMethod(\"open\").invoke(null);\n                 try {\n                     channel.close();\n                 } catch (IOException e) {\n", "projectName": "netty.netty", "bugLineNum": 90, "bugNodeStartChar": 3090, "bugNodeLength": 40, "fixLineNum": 90, "fixNodeStartChar": 3090, "fixNodeLength": 34, "sourceBeforeFix": "sctpChannelClass.getMethod(\"open\",null)", "sourceAfterFix": "sctpChannelClass.getMethod(\"open\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d49d02ffe490f956126db37a1abf6f82858aeff5", "fixCommitParentSHA1": "a156f67804f5a55cc1673ed298cec4f8defd534c", "bugFilePath": "transport/src/main/java/com/sun/nio/sctp/SctpServerChannel.java", "fixPatch": "diff --git a/transport/src/main/java/com/sun/nio/sctp/SctpServerChannel.java b/transport/src/main/java/com/sun/nio/sctp/SctpServerChannel.java\nindex eaf617e..2b47d1d 100644\n--- a/transport/src/main/java/com/sun/nio/sctp/SctpServerChannel.java\n+++ b/transport/src/main/java/com/sun/nio/sctp/SctpServerChannel.java\n@@ -36,7 +36,7 @@\n     }\n \n     public abstract <T> T getOption(SctpSocketOption<T> name) throws IOException;\n-    public abstract <T> SctpChannel setOption(SctpSocketOption<T> name, T value) throws IOException;\n+    public abstract <T> SctpServerChannel setOption(SctpSocketOption<T> name, T value) throws IOException;\n \n     public abstract Set<SocketAddress> getAllLocalAddresses() throws IOException;\n \n", "projectName": "netty.netty", "bugLineNum": 39, "bugNodeStartChar": 1298, "bugNodeLength": 96, "fixLineNum": 39, "fixNodeStartChar": 1298, "fixNodeLength": 102, "sourceBeforeFix": "public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; ", "sourceAfterFix": "public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ebf33c6e3b3ec94965c07defe2e79f7edec7f64d", "fixCommitParentSHA1": "7b213d2c93eced9653915fe682685df0cf88457e", "bugFilePath": "transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java", "fixPatch": "diff --git a/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java b/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java\nindex 2dfa9e0..6e5c339 100644\n--- a/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java\n+++ b/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java\n@@ -204,7 +204,7 @@\n         }\n     }\n \n-    @Test(timeout = 120000)\n+    @Test(timeout = 30000)\n     public void testConcurrentMessageBufferAccess() throws Throwable {\n         EventLoopGroup l = new LocalEventLoopGroup(4, new PrefixThreadFactory(\"l\"));\n         EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new PrefixThreadFactory(\"e1\"));\n", "projectName": "netty.netty", "bugLineNum": 207, "bugNodeStartChar": 8382, "bugNodeLength": 16, "fixLineNum": 207, "fixNodeStartChar": 8382, "fixNodeLength": 15, "sourceBeforeFix": "timeout=120000", "sourceAfterFix": "timeout=30000"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "7b511d8200aae05bef86085f9b101d37b9fce4ef", "fixCommitParentSHA1": "b5412c956359200f66076c4f99da163fb1df6ed5", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\nindex 715123a..1d77385 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n@@ -166,7 +166,7 @@\n         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n-            header.writeBytes(mask);\n+            out.writeBytes(mask);\n \n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {\n", "projectName": "netty.netty", "bugLineNum": 169, "bugNodeStartChar": 6340, "bugNodeLength": 23, "fixLineNum": 169, "fixNodeStartChar": 6340, "fixNodeLength": 20, "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7b511d8200aae05bef86085f9b101d37b9fce4ef", "fixCommitParentSHA1": "b5412c956359200f66076c4f99da163fb1df6ed5", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\nindex 715123a..1d77385 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n@@ -166,7 +166,7 @@\n         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n-            header.writeBytes(mask);\n+            out.writeBytes(mask);\n \n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {\n", "projectName": "netty.netty", "bugLineNum": 169, "bugNodeStartChar": 6340, "bugNodeLength": 23, "fixLineNum": 169, "fixNodeStartChar": 6340, "fixNodeLength": 20, "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "e36c4c77bfbbf18ce8e46fa8efe2a809df891345", "fixCommitParentSHA1": "56a72c645695d50b2fedd5788a1d8ff2d81f5ef2", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\nindex 715123a..1d77385 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n@@ -166,7 +166,7 @@\n         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n-            header.writeBytes(mask);\n+            out.writeBytes(mask);\n \n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {\n", "projectName": "netty.netty", "bugLineNum": 169, "bugNodeStartChar": 6340, "bugNodeLength": 23, "fixLineNum": 169, "fixNodeStartChar": 6340, "fixNodeLength": 20, "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e36c4c77bfbbf18ce8e46fa8efe2a809df891345", "fixCommitParentSHA1": "56a72c645695d50b2fedd5788a1d8ff2d81f5ef2", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\nindex 715123a..1d77385 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java\n@@ -166,7 +166,7 @@\n         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n-            header.writeBytes(mask);\n+            out.writeBytes(mask);\n \n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {\n", "projectName": "netty.netty", "bugLineNum": 169, "bugNodeStartChar": 6340, "bugNodeLength": 23, "fixLineNum": 169, "fixNodeStartChar": 6340, "fixNodeLength": 20, "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "adb4b87fa8867e9511b47773c165f2b12fdc27ef", "fixCommitParentSHA1": "a58533fdad00bcffb3e9db41bd6fcd252aff1f61", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java b/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java\nindex 1833554..9424a48 100644\n--- a/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java\n@@ -59,7 +59,7 @@\n         AbstractAioChannel ch = null;\n         try {\n             ch = findChannel(command);\n-        } catch (Exception e) {\n+        } catch (Throwable t) {\n             // Ignore\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 62, "bugNodeStartChar": 1978, "bugNodeLength": 11, "fixLineNum": 62, "fixNodeStartChar": 1978, "fixNodeLength": 11, "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable t"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e7c6ca945fd2d85b1dd86483d699d7af2399d0fc", "fixCommitParentSHA1": "c77f107f5f37c40fff3567722c5d656f81b74c72", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java\nindex d31b753..ea6bc0c 100644\n--- a/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java\n+++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java\n@@ -190,7 +190,7 @@\n \n             if (empty) {\n                 // Reset reader/writerIndex to 0 if the buffer is empty.\n-                buf.clear();\n+                buf.discardReadBytes();\n             }\n \n             channel.notifyFlushFutures(writtenBytes);\n@@ -274,7 +274,6 @@\n                     channel.unsafe().close(channel.unsafe().voidFuture());\n                 } else {\n                     // start the next read\n-                    //channel.readTask.run();\n                     channel.eventLoop().execute(channel.readTask);\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 193, "bugNodeStartChar": 6070, "bugNodeLength": 11, "fixLineNum": 193, "fixNodeStartChar": 6070, "fixNodeLength": 22, "sourceBeforeFix": "buf.clear()", "sourceAfterFix": "buf.discardReadBytes()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e7c6ca945fd2d85b1dd86483d699d7af2399d0fc", "fixCommitParentSHA1": "c77f107f5f37c40fff3567722c5d656f81b74c72", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java\nindex d31b753..ea6bc0c 100644\n--- a/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java\n+++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java\n@@ -190,7 +190,7 @@\n \n             if (empty) {\n                 // Reset reader/writerIndex to 0 if the buffer is empty.\n-                buf.clear();\n+                buf.discardReadBytes();\n             }\n \n             channel.notifyFlushFutures(writtenBytes);\n@@ -274,7 +274,6 @@\n                     channel.unsafe().close(channel.unsafe().voidFuture());\n                 } else {\n                     // start the next read\n-                    //channel.readTask.run();\n                     channel.eventLoop().execute(channel.readTask);\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 193, "bugNodeStartChar": 6070, "bugNodeLength": 11, "fixLineNum": 193, "fixNodeStartChar": 6070, "fixNodeLength": 22, "sourceBeforeFix": "buf.clear()", "sourceAfterFix": "buf.discardReadBytes()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "dc300f2c812b2231b527c761f4c73d5155137516", "fixCommitParentSHA1": "0f6c3137f6b44ca2ca8a1017b6e9ede93c1744a5", "bugFilePath": "buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\nindex 18710d9..bf59be8 100644\n--- a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n@@ -592,7 +592,7 @@\n      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n-        if (index < 0 || index > capacity()) {\n+        if (index < 0 || index >= capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());\n", "projectName": "netty.netty", "bugLineNum": 595, "bugNodeStartChar": 20894, "bugNodeLength": 18, "fixLineNum": 595, "fixNodeStartChar": 20894, "fixNodeLength": 19, "sourceBeforeFix": "index > capacity()", "sourceAfterFix": "index >= capacity()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "580c6069fa37c0ad5ee45f04e7be83b2ee70ccbf", "fixCommitParentSHA1": "0d8ed47c3e66379f92025f9048bdcd2960c0ef96", "bugFilePath": "buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\nindex a703a8a..6752930 100644\n--- a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n@@ -575,7 +575,7 @@\n         dst.writerIndex(dst.capacity());\n     }\n     \n-    public ByteBuf getBufferFor(int index) throws IOException {\n+    public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n         if (index < 0 || index > capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + (index) + \", maximum is \"\n", "projectName": "netty.netty", "bugLineNum": 578, "bugNodeStartChar": 20038, "bugNodeLength": 461, "fixLineNum": 578, "fixNodeStartChar": 20038, "fixNodeLength": 475, "sourceBeforeFix": "public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(\"Invalid index: \" + index + \" - Bytes needed: \"+ (index)+ \", maximum is \"+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } ", "sourceAfterFix": "public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(\"Invalid index: \" + index + \" - Bytes needed: \"+ (index)+ \", maximum is \"+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } "}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c55e10c12aa851918dd727f12643d1a0d9ab839d", "fixCommitParentSHA1": "b11d4fa37adc59b409f64242221ad917efe6a1f1", "bugFilePath": "buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\nindex 18710d9..bf59be8 100644\n--- a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n@@ -592,7 +592,7 @@\n      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n-        if (index < 0 || index > capacity()) {\n+        if (index < 0 || index >= capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());\n", "projectName": "netty.netty", "bugLineNum": 595, "bugNodeStartChar": 20894, "bugNodeLength": 18, "fixLineNum": 595, "fixNodeStartChar": 20894, "fixNodeLength": 19, "sourceBeforeFix": "index > capacity()", "sourceAfterFix": "index >= capacity()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "49f0e32428aa634c1653a4b358d1e3393097f360", "fixCommitParentSHA1": "332a35f9ed00e1d5631085729f30c45c6ea42ea0", "bugFilePath": "buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\nindex a703a8a..6752930 100644\n--- a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n@@ -575,7 +575,7 @@\n         dst.writerIndex(dst.capacity());\n     }\n     \n-    public ByteBuf getBufferFor(int index) throws IOException {\n+    public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n         if (index < 0 || index > capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + (index) + \", maximum is \"\n", "projectName": "netty.netty", "bugLineNum": 578, "bugNodeStartChar": 20038, "bugNodeLength": 461, "fixLineNum": 578, "fixNodeStartChar": 20038, "fixNodeLength": 475, "sourceBeforeFix": "public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(\"Invalid index: \" + index + \" - Bytes needed: \"+ (index)+ \", maximum is \"+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } ", "sourceAfterFix": "public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException(\"Invalid index: \" + index + \" - Bytes needed: \"+ (index)+ \", maximum is \"+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } "}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b1a156d3f2c86c78f64da0def78727b0952018da", "fixCommitParentSHA1": "4831eb49da62df72335a337916eff789ac74c0ab", "bugFilePath": "handler/src/main/java/io/netty/handler/timeout/ReadTimeoutException.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutException.java b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutException.java\nindex afb597f..b0aaa95 100644\n--- a/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutException.java\n+++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutException.java\n@@ -19,7 +19,7 @@\n  * A {@link TimeoutException} raised by {@link ReadTimeoutHandler} when no data\n  * was read within a certain period of time.\n  */\n-public class ReadTimeoutException extends TimeoutException {\n+public final class ReadTimeoutException extends TimeoutException {\n \n     private static final long serialVersionUID = 169287984113283421L;\n \n", "projectName": "netty.netty", "bugLineNum": 18, "bugNodeStartChar": 670, "bugNodeLength": 390, "fixLineNum": 18, "fixNodeStartChar": 670, "fixNodeLength": 396, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b1a156d3f2c86c78f64da0def78727b0952018da", "fixCommitParentSHA1": "4831eb49da62df72335a337916eff789ac74c0ab", "bugFilePath": "handler/src/main/java/io/netty/handler/timeout/WriteTimeoutException.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutException.java b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutException.java\nindex 7ad039a..f728608 100644\n--- a/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutException.java\n+++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutException.java\n@@ -19,7 +19,7 @@\n  * A {@link TimeoutException} raised by {@link WriteTimeoutHandler} when no data\n  * was written within a certain period of time.\n  */\n-public class WriteTimeoutException extends TimeoutException {\n+public final class WriteTimeoutException extends TimeoutException {\n \n     private static final long serialVersionUID = -144786655770296065L;\n \n", "projectName": "netty.netty", "bugLineNum": 18, "bugNodeStartChar": 670, "bugNodeLength": 399, "fixLineNum": 18, "fixNodeStartChar": 670, "fixNodeLength": 405, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "fd7767ccda80823c077cdc3701166b319d0bd078", "fixCommitParentSHA1": "2aea5291bd0b8df30442105bacf77f5ba41a3500", "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServer.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServer.java b/example/src/main/java/io/netty/example/securechat/SecureChatServer.java\nindex 6dad108..19a9dac 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServer.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServer.java\n@@ -31,7 +31,7 @@\n         this.port = port;\n     }\n \n-    public void run() {\n+    public void run() throws InterruptedException {\n         ServerBootstrap b = new ServerBootstrap();\n         try {\n             b.eventLoop(new NioEventLoop(), new NioEventLoop())\n", "projectName": "netty.netty", "bugLineNum": 34, "bugNodeStartChar": 1079, "bugNodeLength": 419, "fixLineNum": 34, "fixNodeStartChar": 1079, "fixNodeLength": 447, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "35ba150db0c8486417f6cd4c757a03293a43677c", "fixCommitParentSHA1": "12069d3bf4512db9a87eb10c7bfe0349fbb1c240", "bugFilePath": "handler/src/main/java/io/netty/handler/queue/BlockingReadHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/queue/BlockingReadHandler.java b/handler/src/main/java/io/netty/handler/queue/BlockingReadHandler.java\nindex 88cdf0b..9167de7 100644\n--- a/handler/src/main/java/io/netty/handler/queue/BlockingReadHandler.java\n+++ b/handler/src/main/java/io/netty/handler/queue/BlockingReadHandler.java\n@@ -100,7 +100,7 @@\n     public ChannelBufferHolder<Object> newInboundBuffer(\n             ChannelInboundHandlerContext<Object> ctx) throws Exception {\n         this.ctx = ctx;\n-        return ChannelBufferHolders.catchAllBuffer();\n+        return ChannelBufferHolders.messageBuffer(queue);\n     }\n \n     /**\n", "projectName": "netty.netty", "bugLineNum": 103, "bugNodeStartChar": 3636, "bugNodeLength": 37, "fixLineNum": 103, "fixNodeStartChar": 3636, "fixNodeLength": 41, "sourceBeforeFix": "ChannelBufferHolders.catchAllBuffer()", "sourceAfterFix": "ChannelBufferHolders.messageBuffer(queue)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 276, "bugNodeStartChar": 7192, "bugNodeLength": 22, "fixLineNum": 276, "fixNodeStartChar": 7192, "fixNodeLength": 43, "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 285, "bugNodeStartChar": 7448, "bugNodeLength": 24, "fixLineNum": 285, "fixNodeStartChar": 7448, "fixNodeLength": 47, "sourceBeforeFix": "that.getDomain() == null", "sourceAfterFix": "that.getDomain() == null && getDomain() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 301, "bugNodeStartChar": 7857, "bugNodeLength": 19, "fixLineNum": 301, "fixNodeStartChar": 7857, "fixNodeLength": 40, "sourceBeforeFix": "c.getPath() == null", "sourceAfterFix": "c.getPath() == null && getPath() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 311, "bugNodeStartChar": 8115, "bugNodeLength": 21, "fixLineNum": 311, "fixNodeStartChar": 8115, "fixNodeLength": 44, "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 276, "bugNodeStartChar": 7192, "bugNodeLength": 22, "fixLineNum": 276, "fixNodeStartChar": 7192, "fixNodeLength": 43, "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 285, "bugNodeStartChar": 7448, "bugNodeLength": 24, "fixLineNum": 285, "fixNodeStartChar": 7448, "fixNodeLength": 47, "sourceBeforeFix": "that.getDomain() == null", "sourceAfterFix": "that.getDomain() == null && getDomain() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 301, "bugNodeStartChar": 7857, "bugNodeLength": 19, "fixLineNum": 301, "fixNodeStartChar": 7857, "fixNodeLength": 40, "sourceBeforeFix": "c.getPath() == null", "sourceAfterFix": "c.getPath() == null && getPath() != null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "fixCommitParentSHA1": "f34fc73e89e88da32c36786c8634afa9dc090207", "bugFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java", "fixPatch": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\nindex e94e5dc..cb5d3c6 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java\n@@ -273,7 +273,7 @@\n \n         if (getPath() == null && that.getPath() != null) {\n             return false;\n-        } else if (that.getPath() == null) {\n+        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {\n@@ -282,7 +282,7 @@\n \n         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n-        } else if (that.getDomain() == null) {\n+        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());\n@@ -298,7 +298,7 @@\n \n         if (getPath() == null && c.getPath() != null) {\n             return -1;\n-        } else if (c.getPath() == null) {\n+        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());\n@@ -308,7 +308,7 @@\n \n         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n-        } else if (c.getDomain() == null) {\n+        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());\n", "projectName": "netty.netty", "bugLineNum": 311, "bugNodeStartChar": 8115, "bugNodeLength": 21, "fixLineNum": 311, "fixNodeStartChar": 8115, "fixNodeLength": 44, "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "e2a617b07bf5c8f932554cf4e9597532fac66a39", "fixCommitParentSHA1": "141a05c8316f68bff6aa7e2b0bbf71443acf7408", "bugFilePath": "common/src/main/java/io/netty/util/internal/DetectionUtil.java", "fixPatch": "diff --git a/common/src/main/java/io/netty/util/internal/DetectionUtil.java b/common/src/main/java/io/netty/util/internal/DetectionUtil.java\nindex 9a77cb7..abe8de9 100644\n--- a/common/src/main/java/io/netty/util/internal/DetectionUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/DetectionUtil.java\n@@ -68,7 +68,7 @@\n         if (value == null) {\n             value = SystemPropertyUtil.get(\"org.jboss.netty.tryUnsafe\", \"true\");\n         }\n-        if (\"true\".equalsIgnoreCase(value)) {\n+        if (!\"true\".equalsIgnoreCase(value)) {\n             return false;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 71, "bugNodeStartChar": 2307, "bugNodeLength": 30, "fixLineNum": 71, "fixNodeStartChar": 2307, "fixNodeLength": 31, "sourceBeforeFix": "\"true\".equalsIgnoreCase(value)", "sourceAfterFix": "!\"true\".equalsIgnoreCase(value)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "49bda34a5d513797a66ae1cd94d38fba2249f080", "fixCommitParentSHA1": "0fd824c3bb2382df4ab9495810bab20150db3960", "bugFilePath": "transport/src/main/java/io/netty/channel/ChannelBufferHolder.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java\nindex 4efdb10..de603e9 100644\n--- a/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java\n+++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java\n@@ -184,7 +184,7 @@\n             if (msgBuf != null) {\n                 return msgBuf.isEmpty();\n             } else {\n-                return byteBuf.readable();\n+                return !byteBuf.readable();\n             }\n         case 1:\n         case 2:\n", "projectName": "netty.netty", "bugLineNum": 187, "bugNodeStartChar": 4933, "bugNodeLength": 18, "fixLineNum": 187, "fixNodeStartChar": 4933, "fixNodeLength": 19, "sourceBeforeFix": "byteBuf.readable()", "sourceAfterFix": "!byteBuf.readable()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "0fd824c3bb2382df4ab9495810bab20150db3960", "fixCommitParentSHA1": "633fada6ec37f8e8062c23ad8a632e018208687b", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\nindex a891893..d0425ac 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n@@ -742,7 +742,7 @@\n             notifyHandlerException(t);\n         } finally {\n             ChannelBufferHolder<Object> inbound = ctx.inbound();\n-            if (inbound.isEmpty() && inbound.hasByteBuffer()) {\n+            if (!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()) {\n                 inbound.byteBuffer().discardReadBytes();\n             }\n         }\n", "projectName": "netty.netty", "bugLineNum": 745, "bugNodeStartChar": 22938, "bugNodeLength": 44, "fixLineNum": 745, "fixNodeStartChar": 22938, "fixNodeLength": 67, "sourceBeforeFix": "inbound.isEmpty() && inbound.hasByteBuffer()", "sourceAfterFix": "!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "fixCommitParentSHA1": "7ac89ace4f51754906cbe37c29b1a871918e80bf", "bugFilePath": "buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\nindex f010618..76980e7 100644\n--- a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n+++ b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n@@ -145,7 +145,7 @@\n             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + length) + \", maximum is \" + data.limit());\n+                    + (index + length) + \", maximum is \" + buffer.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }\n@@ -157,7 +157,7 @@\n             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n+                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }\n", "projectName": "netty.netty", "bugLineNum": 148, "bugNodeStartChar": 4449, "bugNodeLength": 12, "fixLineNum": 148, "fixNodeStartChar": 4449, "fixNodeLength": 14, "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "fixCommitParentSHA1": "7ac89ace4f51754906cbe37c29b1a871918e80bf", "bugFilePath": "buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\nindex f010618..76980e7 100644\n--- a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n+++ b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n@@ -145,7 +145,7 @@\n             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + length) + \", maximum is \" + data.limit());\n+                    + (index + length) + \", maximum is \" + buffer.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }\n@@ -157,7 +157,7 @@\n             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n+                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }\n", "projectName": "netty.netty", "bugLineNum": 148, "bugNodeStartChar": 4449, "bugNodeLength": 12, "fixLineNum": 148, "fixNodeStartChar": 4449, "fixNodeLength": 14, "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "fixCommitParentSHA1": "7ac89ace4f51754906cbe37c29b1a871918e80bf", "bugFilePath": "buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\nindex f010618..76980e7 100644\n--- a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n+++ b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n@@ -145,7 +145,7 @@\n             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + length) + \", maximum is \" + data.limit());\n+                    + (index + length) + \", maximum is \" + buffer.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }\n@@ -157,7 +157,7 @@\n             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n+                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }\n", "projectName": "netty.netty", "bugLineNum": 160, "bugNodeStartChar": 4942, "bugNodeLength": 12, "fixLineNum": 160, "fixNodeStartChar": 4942, "fixNodeLength": 14, "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "fixCommitParentSHA1": "7ac89ace4f51754906cbe37c29b1a871918e80bf", "bugFilePath": "buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java", "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\nindex f010618..76980e7 100644\n--- a/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n+++ b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java\n@@ -145,7 +145,7 @@\n             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + length) + \", maximum is \" + data.limit());\n+                    + (index + length) + \", maximum is \" + buffer.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }\n@@ -157,7 +157,7 @@\n             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n-                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n+                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }\n", "projectName": "netty.netty", "bugLineNum": 160, "bugNodeStartChar": 4942, "bugNodeLength": 12, "fixLineNum": 160, "fixNodeStartChar": 4942, "fixNodeLength": 14, "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "957c04e597ba47ce301a5aab98ed57be4a967f95", "fixCommitParentSHA1": "e16c835780193bde31ca62fd491a4870a03f8d23", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\nindex 9fa4c8e..11e209a 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n@@ -143,7 +143,7 @@\n         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n-        if (handlers[0] == null) {\n+        if (handlers.length == 0 || handlers[0] == null) {\n             return this;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 146, "bugNodeStartChar": 4609, "bugNodeLength": 19, "fixLineNum": 146, "fixNodeStartChar": 4609, "fixNodeLength": 43, "sourceBeforeFix": "handlers[0] == null", "sourceAfterFix": "handlers.length == 0 || handlers[0] == null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "957c04e597ba47ce301a5aab98ed57be4a967f95", "fixCommitParentSHA1": "e16c835780193bde31ca62fd491a4870a03f8d23", "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\nindex 9fa4c8e..11e209a 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n@@ -143,7 +143,7 @@\n         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n-        if (handlers[0] == null) {\n+        if (handlers.length == 0 || handlers[0] == null) {\n             return this;\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 146, "bugNodeStartChar": 4609, "bugNodeLength": 19, "fixLineNum": 146, "fixNodeStartChar": 4609, "fixNodeLength": 43, "sourceBeforeFix": "handlers[0] == null", "sourceAfterFix": "handlers.length == 0 || handlers[0] == null"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4e528c10fae3abaa932e751c831aa48a23645744", "fixCommitParentSHA1": "62f5623d2af2a5bbbfcfc51cbde19929c35de81f", "bugFilePath": "handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java", "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\nindex 2e70697..aa4b948 100644\n--- a/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java\n@@ -77,7 +77,7 @@\n \n     private final Queue<MessageEvent> queue = QueueFactory.createQueue(MessageEvent.class);\n \n-    private ChannelHandlerContext ctx;\n+    private volatile ChannelHandlerContext ctx;\n     private MessageEvent currentEvent;\n \n     /**\n", "projectName": "netty.netty", "bugLineNum": 80, "bugNodeStartChar": 3337, "bugNodeLength": 34, "fixLineNum": 80, "fixNodeStartChar": 3337, "fixNodeLength": 43, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "fixCommitParentSHA1": "2b9df060dd916abb7774b65ce43e2d60fde0052e", "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\nindex 363407f..b72c4f5 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n@@ -262,7 +262,7 @@\n                 wakenUp.set(false);\n \n                 try {\n-                    int selectedKeyCount = selector.select(500);\n+                    int selectedKeyCount = selector.select(10);\n \n                     // 'wakenUp.compareAndSet(false, true)' is always evaluated\n                     // before calling 'selector.wakeup()' to reduce the wake-up\n@@ -302,9 +302,9 @@\n                         processSelectedKeys(selector.selectedKeys());\n                     }\n \n-                    // Handle connection timeout every 0.5 seconds approximately.\n+                    // Handle connection timeout every 10 milliseconds approximately.\n                     long currentTimeNanos = System.nanoTime();\n-                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n+                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }\n", "projectName": "netty.netty", "bugLineNum": 265, "bugNodeStartChar": 9763, "bugNodeLength": 20, "fixLineNum": 265, "fixNodeStartChar": 9763, "fixNodeLength": 19, "sourceBeforeFix": "selector.select(500)", "sourceAfterFix": "selector.select(10)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "fixCommitParentSHA1": "2b9df060dd916abb7774b65ce43e2d60fde0052e", "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\nindex 363407f..b72c4f5 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n@@ -262,7 +262,7 @@\n                 wakenUp.set(false);\n \n                 try {\n-                    int selectedKeyCount = selector.select(500);\n+                    int selectedKeyCount = selector.select(10);\n \n                     // 'wakenUp.compareAndSet(false, true)' is always evaluated\n                     // before calling 'selector.wakeup()' to reduce the wake-up\n@@ -302,9 +302,9 @@\n                         processSelectedKeys(selector.selectedKeys());\n                     }\n \n-                    // Handle connection timeout every 0.5 seconds approximately.\n+                    // Handle connection timeout every 10 milliseconds approximately.\n                     long currentTimeNanos = System.nanoTime();\n-                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n+                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }\n", "projectName": "netty.netty", "bugLineNum": 307, "bugNodeStartChar": 12066, "bugNodeLength": 14, "fixLineNum": 307, "fixNodeStartChar": 12066, "fixNodeLength": 13, "sourceBeforeFix": "500 * 1000000L", "sourceAfterFix": "10 * 1000000L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "fixCommitParentSHA1": "2b9df060dd916abb7774b65ce43e2d60fde0052e", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java\nindex ca23336..39b2a73 100644\n--- a/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java\n+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java\n@@ -242,7 +242,7 @@\n                 wakenUp.set(false);\n \n                 try {\n-                    int selectedKeyCount = selector.select(500);\n+                    int selectedKeyCount = selector.select(10);\n \n                     // 'wakenUp.compareAndSet(false, true)' is always evaluated\n                     // before calling 'selector.wakeup()' to reduce the wake-up\n@@ -282,9 +282,9 @@\n                         processSelectedKeys(selector.selectedKeys());\n                     }\n \n-                    // Handle connection timeout every 0.5 seconds approximately.\n+                    // Handle connection timeout every 10 milliseconds approximately.\n                     long currentTimeNanos = System.nanoTime();\n-                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n+                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }\n", "projectName": "netty.netty", "bugLineNum": 245, "bugNodeStartChar": 8926, "bugNodeLength": 20, "fixLineNum": 245, "fixNodeStartChar": 8926, "fixNodeLength": 19, "sourceBeforeFix": "selector.select(500)", "sourceAfterFix": "selector.select(10)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "fixCommitParentSHA1": "2b9df060dd916abb7774b65ce43e2d60fde0052e", "bugFilePath": "transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java\nindex ca23336..39b2a73 100644\n--- a/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java\n+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java\n@@ -242,7 +242,7 @@\n                 wakenUp.set(false);\n \n                 try {\n-                    int selectedKeyCount = selector.select(500);\n+                    int selectedKeyCount = selector.select(10);\n \n                     // 'wakenUp.compareAndSet(false, true)' is always evaluated\n                     // before calling 'selector.wakeup()' to reduce the wake-up\n@@ -282,9 +282,9 @@\n                         processSelectedKeys(selector.selectedKeys());\n                     }\n \n-                    // Handle connection timeout every 0.5 seconds approximately.\n+                    // Handle connection timeout every 10 milliseconds approximately.\n                     long currentTimeNanos = System.nanoTime();\n-                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n+                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }\n", "projectName": "netty.netty", "bugLineNum": 287, "bugNodeStartChar": 11229, "bugNodeLength": 14, "fixLineNum": 287, "fixNodeStartChar": 11229, "fixNodeLength": 13, "sourceBeforeFix": "500 * 1000000L", "sourceAfterFix": "10 * 1000000L"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b6700fbe58894c59f1caae1fe97cf962ac066016", "fixCommitParentSHA1": "0beaa107b4be5e68928349c4131d01a655003641", "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\nindex bd65b89..7005422 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n@@ -47,7 +47,7 @@\n \n /**\n  */\n-class SctpClientPipelineSink extends AbstractScptChannelSink {\n+class SctpClientPipelineSink extends AbstractSctpChannelSink {\n \n     static final InternalLogger logger =\n         InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);\n", "projectName": "netty.netty", "bugLineNum": 48, "bugNodeStartChar": 1720, "bugNodeLength": 16008, "fixLineNum": 48, "fixNodeStartChar": 1720, "fixNodeLength": 16008, "sourceBeforeFix": "/**   */ class SctpClientPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException(\"Failed to create a selector.\",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn(\"Failed to close a selector.\",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn(\"Failed to close a selector.\",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn(\"Unexpected exception in the selector loop.\",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException(\"connection timed out\"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } ", "sourceAfterFix": "/**   */ class SctpClientPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException(\"Failed to create a selector.\",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn(\"Failed to close a selector.\",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn(\"Failed to close a selector.\",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn(\"Unexpected exception in the selector loop.\",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException(\"connection timed out\"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b6700fbe58894c59f1caae1fe97cf962ac066016", "fixCommitParentSHA1": "0beaa107b4be5e68928349c4131d01a655003641", "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpServerPipelineSink.java", "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpServerPipelineSink.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpServerPipelineSink.java\nindex ce34643..c4001af 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpServerPipelineSink.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpServerPipelineSink.java\n@@ -44,7 +44,7 @@\n \n /**\n  */\n-class SctpServerPipelineSink extends AbstractScptChannelSink {\n+class SctpServerPipelineSink extends AbstractSctpChannelSink {\n \n     static final InternalLogger logger =\n         InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);\n", "projectName": "netty.netty", "bugLineNum": 45, "bugNodeStartChar": 1594, "bugNodeLength": 10442, "fixLineNum": 45, "fixNodeStartChar": 1594, "fixNodeLength": 10442, "sourceBeforeFix": "/**   */ class SctpServerPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to accept a connection.\",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to initialize an accepted socket.\",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to close a partially accepted socket.\",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to close a selector.\",e); } } } } } ", "sourceAfterFix": "/**   */ class SctpServerPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to accept a connection.\",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to initialize an accepted socket.\",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to close a partially accepted socket.\",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn(\"Failed to close a selector.\",e); } } } } } "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c4a437e16b42e88eb9947c65d3dd2413bd9ef5ac", "fixCommitParentSHA1": "04a6ff92afe2c590a465065135798c438d3f5511", "bugFilePath": "transport/src/main/java/io/netty/channel/Channels.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/Channels.java b/transport/src/main/java/io/netty/channel/Channels.java\nindex 879758c..c709789 100644\n--- a/transport/src/main/java/io/netty/channel/Channels.java\n+++ b/transport/src/main/java/io/netty/channel/Channels.java\n@@ -481,7 +481,7 @@\n      * the specified {@link Channel} once the io-thread runs again.\n      */\n     public static void fireExceptionCaughtLater(Channel channel, Throwable cause) {\n-        channel.getPipeline().sendUpstream(\n+        channel.getPipeline().sendUpstreamLater(\n                 new DefaultExceptionEvent(channel, cause));\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 484, "bugNodeStartChar": 18065, "bugNodeLength": 94, "fixLineNum": 484, "fixNodeStartChar": 18065, "fixNodeLength": 99, "sourceBeforeFix": "channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))", "sourceAfterFix": "channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c4a437e16b42e88eb9947c65d3dd2413bd9ef5ac", "fixCommitParentSHA1": "04a6ff92afe2c590a465065135798c438d3f5511", "bugFilePath": "transport/src/main/java/io/netty/channel/Channels.java", "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/Channels.java b/transport/src/main/java/io/netty/channel/Channels.java\nindex 879758c..c709789 100644\n--- a/transport/src/main/java/io/netty/channel/Channels.java\n+++ b/transport/src/main/java/io/netty/channel/Channels.java\n@@ -481,7 +481,7 @@\n      * the specified {@link Channel} once the io-thread runs again.\n      */\n     public static void fireExceptionCaughtLater(Channel channel, Throwable cause) {\n-        channel.getPipeline().sendUpstream(\n+        channel.getPipeline().sendUpstreamLater(\n                 new DefaultExceptionEvent(channel, cause));\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 484, "bugNodeStartChar": 18065, "bugNodeLength": 94, "fixLineNum": 484, "fixNodeStartChar": 18065, "fixNodeLength": 99, "sourceBeforeFix": "channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))", "sourceAfterFix": "channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "46363095970e1bd8f6046414fcf15b41a9c25452", "fixCommitParentSHA1": "9b563c8a2829a43de19734b92a7eedd764a750d2", "bugFilePath": "example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java\nindex 436da5b..a69feec 100644\n--- a/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java\n+++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java\n@@ -83,7 +83,7 @@\n \n         // Prepare the HTTP request.\n         HttpRequest request = new DefaultHttpRequest(\n-                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.toASCIIString());\n+                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n         request.setHeader(HttpHeaders.Names.HOST, host);\n         request.setHeader(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE);\n         request.setHeader(HttpHeaders.Names.ACCEPT_ENCODING, HttpHeaders.Values.GZIP);\n", "projectName": "netty.netty", "bugLineNum": 86, "bugNodeStartChar": 3126, "bugNodeLength": 19, "fixLineNum": 86, "fixNodeStartChar": 3126, "fixNodeLength": 16, "sourceBeforeFix": "uri.toASCIIString()", "sourceAfterFix": "uri.getRawPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "46363095970e1bd8f6046414fcf15b41a9c25452", "fixCommitParentSHA1": "9b563c8a2829a43de19734b92a7eedd764a750d2", "bugFilePath": "example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java", "fixPatch": "diff --git a/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java\nindex 436da5b..a69feec 100644\n--- a/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java\n+++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java\n@@ -83,7 +83,7 @@\n \n         // Prepare the HTTP request.\n         HttpRequest request = new DefaultHttpRequest(\n-                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.toASCIIString());\n+                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n         request.setHeader(HttpHeaders.Names.HOST, host);\n         request.setHeader(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE);\n         request.setHeader(HttpHeaders.Names.ACCEPT_ENCODING, HttpHeaders.Values.GZIP);\n", "projectName": "netty.netty", "bugLineNum": 86, "bugNodeStartChar": 3126, "bugNodeLength": 19, "fixLineNum": 86, "fixNodeStartChar": 3126, "fixNodeLength": 16, "sourceBeforeFix": "uri.toASCIIString()", "sourceAfterFix": "uri.getRawPath()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f779a4415cedcfa445777b186c8fe1d6341278df", "fixCommitParentSHA1": "f38bf74f3ecd3c2ba29c39240dce573fa5083429", "bugFilePath": "src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java", "fixPatch": "diff --git a/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java b/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java\nindex baa9f16..7bfc0bf 100644\n--- a/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java\n+++ b/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java\n@@ -55,7 +55,7 @@\n         case CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR:\n             String className = readUTF();\n             Class<?> clazz = classResolver.resolve(className);\n-            return ObjectStreamClass.lookupAny(clazz);\n+            return ObjectStreamClass.lookup(clazz);\n         default:\n             throw new StreamCorruptedException(\n                     \"Unexpected class descriptor type: \" + type);\n", "projectName": "netty.netty", "bugLineNum": 58, "bugNodeStartChar": 1977, "bugNodeLength": 34, "fixLineNum": 58, "fixNodeStartChar": 1977, "fixNodeLength": 31, "sourceBeforeFix": "ObjectStreamClass.lookupAny(clazz)", "sourceAfterFix": "ObjectStreamClass.lookup(clazz)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f779a4415cedcfa445777b186c8fe1d6341278df", "fixCommitParentSHA1": "f38bf74f3ecd3c2ba29c39240dce573fa5083429", "bugFilePath": "src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java", "fixPatch": "diff --git a/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java b/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java\nindex baa9f16..7bfc0bf 100644\n--- a/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java\n+++ b/src/main/java/io/netty/handler/codec/serialization/CompactObjectInputStream.java\n@@ -55,7 +55,7 @@\n         case CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR:\n             String className = readUTF();\n             Class<?> clazz = classResolver.resolve(className);\n-            return ObjectStreamClass.lookupAny(clazz);\n+            return ObjectStreamClass.lookup(clazz);\n         default:\n             throw new StreamCorruptedException(\n                     \"Unexpected class descriptor type: \" + type);\n", "projectName": "netty.netty", "bugLineNum": 58, "bugNodeStartChar": 1977, "bugNodeLength": 34, "fixLineNum": 58, "fixNodeStartChar": 1977, "fixNodeLength": 31, "sourceBeforeFix": "ObjectStreamClass.lookupAny(clazz)", "sourceAfterFix": "ObjectStreamClass.lookup(clazz)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "f779a4415cedcfa445777b186c8fe1d6341278df", "fixCommitParentSHA1": "f38bf74f3ecd3c2ba29c39240dce573fa5083429", "bugFilePath": "src/main/java/io/netty/handler/codec/serialization/CompactObjectOutputStream.java", "fixPatch": "diff --git a/src/main/java/io/netty/handler/codec/serialization/CompactObjectOutputStream.java b/src/main/java/io/netty/handler/codec/serialization/CompactObjectOutputStream.java\nindex d386ce3..2e88e7c 100644\n--- a/src/main/java/io/netty/handler/codec/serialization/CompactObjectOutputStream.java\n+++ b/src/main/java/io/netty/handler/codec/serialization/CompactObjectOutputStream.java\n@@ -39,7 +39,7 @@\n     @Override\n     protected void writeClassDescriptor(ObjectStreamClass desc) throws IOException {\n         Class<?> clazz = desc.forClass();\n-        if (clazz.isPrimitive() || clazz.isArray()) {\n+        if (clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0) {\n             write(TYPE_FAT_DESCRIPTOR);\n             super.writeClassDescriptor(desc);\n         } else {\n", "projectName": "netty.netty", "bugLineNum": 42, "bugNodeStartChar": 1336, "bugNodeLength": 38, "fixLineNum": 42, "fixNodeStartChar": 1336, "fixNodeLength": 73, "sourceBeforeFix": "clazz.isPrimitive() || clazz.isArray()", "sourceAfterFix": "clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9aa81cd08385702fd684e7bb1cc447617ff51247", "fixCommitParentSHA1": "942b746d730566001301f8edc774d571bcbbf175", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java b/src/main/java/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java\nindex 2733109..671a0f4 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/frame/LengthFieldBasedFrameDecoder.java\n@@ -239,7 +239,7 @@\n             int maxFrameLength,\n             int lengthFieldOffset, int lengthFieldLength,\n             int lengthAdjustment, int initialBytesToStrip) {\n-        this(maxFrameLength, lengthFieldOffset, lengthFieldOffset, lengthAdjustment,\n+        this(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment,\n                 initialBytesToStrip, false);\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 242, "bugNodeStartChar": 11134, "bugNodeLength": 121, "fixLineNum": 242, "fixNodeStartChar": 11134, "fixNodeLength": 121, "sourceBeforeFix": "this(maxFrameLength,lengthFieldOffset,lengthFieldOffset,lengthAdjustment,initialBytesToStrip,false); ", "sourceAfterFix": "this(maxFrameLength,lengthFieldOffset,lengthFieldLength,lengthAdjustment,initialBytesToStrip,false); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "47a3783d6cb0c09ee6c78c2e461bcb58fe879387", "fixCommitParentSHA1": "cc758aa3b638459272dc64031389bd02d60a2001", "bugFilePath": "src/main/java/org/jboss/netty/channel/local/LocalAddress.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/local/LocalAddress.java b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java\nindex 27c78ce..06cf91b 100644\n--- a/src/main/java/org/jboss/netty/channel/local/LocalAddress.java\n+++ b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java\n@@ -115,7 +115,7 @@\n                 }\n \n                 int a = System.identityHashCode(this);\n-                int b = System.identityHashCode(this);\n+                int b = System.identityHashCode(o);\n                 if (a < b) {\n                     return -1;\n                 } else if (a > b) {\n", "projectName": "netty.netty", "bugLineNum": 118, "bugNodeStartChar": 3455, "bugNodeLength": 4, "fixLineNum": 118, "fixNodeStartChar": 3455, "fixNodeLength": 1, "sourceBeforeFix": "System.identityHashCode(this)", "sourceAfterFix": "System.identityHashCode(o)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8df2524bb0661d3f99a5552af297e5e47ce5d715", "fixCommitParentSHA1": "cc758aa3b638459272dc64031389bd02d60a2001", "bugFilePath": "src/main/java/org/jboss/netty/channel/local/LocalAddress.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/local/LocalAddress.java b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java\nindex 27c78ce..06cf91b 100644\n--- a/src/main/java/org/jboss/netty/channel/local/LocalAddress.java\n+++ b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java\n@@ -115,7 +115,7 @@\n                 }\n \n                 int a = System.identityHashCode(this);\n-                int b = System.identityHashCode(this);\n+                int b = System.identityHashCode(o);\n                 if (a < b) {\n                     return -1;\n                 } else if (a > b) {\n", "projectName": "netty.netty", "bugLineNum": 118, "bugNodeStartChar": 3455, "bugNodeLength": 4, "fixLineNum": 118, "fixNodeStartChar": 3455, "fixNodeLength": 1, "sourceBeforeFix": "System.identityHashCode(this)", "sourceAfterFix": "System.identityHashCode(o)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6156922ad6d8d2c4965dbdd10f4f2b65b13b9e76", "fixCommitParentSHA1": "88d84c537c15c7e3e6154ac7ed18b792d0b4d3c8", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java\nindex 3a5f019..a322a71 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java\n@@ -62,7 +62,7 @@\n         Object msg = e.getMessage();\n         if (msg instanceof HttpResponse && ((HttpResponse) msg).getStatus().getCode() == 100) {\n             // 100-continue response must be passed through.\n-            ctx.sendDownstream(e);\n+            ctx.sendUpstream(e);\n         } else if (msg instanceof HttpMessage) {\n             HttpMessage m = (HttpMessage) msg;\n \n", "projectName": "netty.netty", "bugLineNum": 65, "bugNodeStartChar": 2939, "bugNodeLength": 21, "fixLineNum": 65, "fixNodeStartChar": 2939, "fixNodeLength": 19, "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6156922ad6d8d2c4965dbdd10f4f2b65b13b9e76", "fixCommitParentSHA1": "88d84c537c15c7e3e6154ac7ed18b792d0b4d3c8", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java\nindex 3a5f019..a322a71 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java\n@@ -62,7 +62,7 @@\n         Object msg = e.getMessage();\n         if (msg instanceof HttpResponse && ((HttpResponse) msg).getStatus().getCode() == 100) {\n             // 100-continue response must be passed through.\n-            ctx.sendDownstream(e);\n+            ctx.sendUpstream(e);\n         } else if (msg instanceof HttpMessage) {\n             HttpMessage m = (HttpMessage) msg;\n \n", "projectName": "netty.netty", "bugLineNum": 65, "bugNodeStartChar": 2939, "bugNodeLength": 21, "fixLineNum": 65, "fixNodeStartChar": 2939, "fixNodeLength": 19, "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "ffccf71fa53541f657bc48ff471a194a6d9300cb", "fixCommitParentSHA1": "e8fcbd4e75ce594042f393a5cf18db01ee512628", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java\nindex 7382eb8..7a80b91 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java\n@@ -164,7 +164,7 @@\n         if (maxHeaderSize <= 0) {\n             throw new IllegalArgumentException(\n                     \"maxHeaderSize must be a positive integer: \" +\n-                    maxChunkSize);\n+                    maxHeaderSize);\n         }\n         if (maxChunkSize < 0) {\n             throw new IllegalArgumentException(\n", "projectName": "netty.netty", "bugLineNum": 166, "bugNodeStartChar": 5983, "bugNodeLength": 79, "fixLineNum": 166, "fixNodeStartChar": 5983, "fixNodeLength": 80, "sourceBeforeFix": "\"maxHeaderSize must be a positive integer: \" + maxChunkSize", "sourceAfterFix": "\"maxHeaderSize must be a positive integer: \" + maxHeaderSize"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ffccf71fa53541f657bc48ff471a194a6d9300cb", "fixCommitParentSHA1": "e8fcbd4e75ce594042f393a5cf18db01ee512628", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java\nindex 7382eb8..7a80b91 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java\n@@ -164,7 +164,7 @@\n         if (maxHeaderSize <= 0) {\n             throw new IllegalArgumentException(\n                     \"maxHeaderSize must be a positive integer: \" +\n-                    maxChunkSize);\n+                    maxHeaderSize);\n         }\n         if (maxChunkSize < 0) {\n             throw new IllegalArgumentException(\n", "projectName": "netty.netty", "bugLineNum": 166, "bugNodeStartChar": 5983, "bugNodeLength": 79, "fixLineNum": 166, "fixNodeStartChar": 5983, "fixNodeLength": 80, "sourceBeforeFix": "\"maxHeaderSize must be a positive integer: \" + maxChunkSize", "sourceAfterFix": "\"maxHeaderSize must be a positive integer: \" + maxHeaderSize"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7df28adfe32361be1a4d69a3282f8c8f197ac278", "fixCommitParentSHA1": "e0545ba58359599a5beb7b69726530369412dda5", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java\nindex 27c81a0..777e5ab 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java\n@@ -631,14 +631,14 @@\n             if (HttpMethod.GET.equals(req.getMethod()) &&\n                 req.containsHeader(Names.SEC_WEBSOCKET_KEY1) &&\n                 req.containsHeader(Names.SEC_WEBSOCKET_KEY2)) {\n-                return 10;\n+                return 8;\n             }\n         } else if (message instanceof HttpResponse) {\n             HttpResponse res = (HttpResponse) message;\n             if (res.getStatus().getCode() == 101 &&\n                 res.containsHeader(Names.SEC_WEBSOCKET_ORIGIN) &&\n                 res.containsHeader(Names.SEC_WEBSOCKET_LOCATION)) {\n-                return 18;\n+                return 16;\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 634, "bugNodeStartChar": 20308, "bugNodeLength": 10, "fixLineNum": 634, "fixNodeStartChar": 20308, "fixNodeLength": 9, "sourceBeforeFix": "return 10; ", "sourceAfterFix": "return 8; "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7df28adfe32361be1a4d69a3282f8c8f197ac278", "fixCommitParentSHA1": "e0545ba58359599a5beb7b69726530369412dda5", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java\nindex 27c81a0..777e5ab 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java\n@@ -631,14 +631,14 @@\n             if (HttpMethod.GET.equals(req.getMethod()) &&\n                 req.containsHeader(Names.SEC_WEBSOCKET_KEY1) &&\n                 req.containsHeader(Names.SEC_WEBSOCKET_KEY2)) {\n-                return 10;\n+                return 8;\n             }\n         } else if (message instanceof HttpResponse) {\n             HttpResponse res = (HttpResponse) message;\n             if (res.getStatus().getCode() == 101 &&\n                 res.containsHeader(Names.SEC_WEBSOCKET_ORIGIN) &&\n                 res.containsHeader(Names.SEC_WEBSOCKET_LOCATION)) {\n-                return 18;\n+                return 16;\n             }\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 641, "bugNodeStartChar": 20644, "bugNodeLength": 10, "fixLineNum": 641, "fixNodeStartChar": 20644, "fixNodeLength": 10, "sourceBeforeFix": "return 18; ", "sourceAfterFix": "return 16; "}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "4b0219ee9bdb5c1a1e5c1809ce40b8d0031a773b", "fixCommitParentSHA1": "cbe26db0e46c8f6df28abb8319f777f0a02af1a1", "bugFilePath": "src/main/java/org/jboss/netty/handler/ssl/SslHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\nindex 3fccab9..633f68b 100644\n--- a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n@@ -935,7 +935,8 @@\n     }\n \n     private void handleRenegotiation(HandshakeStatus handshakeStatus) {\n-        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n+        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING ||\n+            handshakeStatus == HandshakeStatus.FINISHED) {\n             // Not handshaking\n             return;\n         }\n", "projectName": "netty.netty", "bugLineNum": 938, "bugNodeStartChar": 36356, "bugNodeLength": 50, "fixLineNum": 938, "fixNodeStartChar": 36356, "fixNodeLength": 109, "sourceBeforeFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING", "sourceAfterFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "4b0219ee9bdb5c1a1e5c1809ce40b8d0031a773b", "fixCommitParentSHA1": "cbe26db0e46c8f6df28abb8319f777f0a02af1a1", "bugFilePath": "src/main/java/org/jboss/netty/handler/ssl/SslHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\nindex 3fccab9..633f68b 100644\n--- a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n@@ -935,7 +935,8 @@\n     }\n \n     private void handleRenegotiation(HandshakeStatus handshakeStatus) {\n-        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n+        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING ||\n+            handshakeStatus == HandshakeStatus.FINISHED) {\n             // Not handshaking\n             return;\n         }\n", "projectName": "netty.netty", "bugLineNum": 938, "bugNodeStartChar": 36356, "bugNodeLength": 50, "fixLineNum": 938, "fixNodeStartChar": 36356, "fixNodeLength": 109, "sourceBeforeFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING", "sourceAfterFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "fixCommitParentSHA1": "cac77a47b265e4fd2e39fc469d0abb6d32704b72", "bugFilePath": "src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java b/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java\nindex de3598d..ba8d605 100644\n--- a/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java\n+++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java\n@@ -130,7 +130,7 @@\n     }\n \n     public boolean isEndOfInput() throws Exception {\n-        return hasNextChunk();\n+        return !hasNextChunk();\n     }\n \n     public void close() throws Exception {\n", "projectName": "netty.netty", "bugLineNum": 133, "bugNodeStartChar": 4251, "bugNodeLength": 14, "fixLineNum": 133, "fixNodeStartChar": 4251, "fixNodeLength": 15, "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "fixCommitParentSHA1": "cac77a47b265e4fd2e39fc469d0abb6d32704b72", "bugFilePath": "src/main/java/org/jboss/netty/handler/stream/ChunkedNioFile.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/stream/ChunkedNioFile.java b/src/main/java/org/jboss/netty/handler/stream/ChunkedNioFile.java\nindex 4235485..84a9507 100644\n--- a/src/main/java/org/jboss/netty/handler/stream/ChunkedNioFile.java\n+++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedNioFile.java\n@@ -136,7 +136,7 @@\n     }\n \n     public boolean isEndOfInput() throws Exception {\n-        return hasNextChunk();\n+        return !hasNextChunk();\n     }\n \n     public void close() throws Exception {\n", "projectName": "netty.netty", "bugLineNum": 139, "bugNodeStartChar": 4383, "bugNodeLength": 14, "fixLineNum": 139, "fixNodeStartChar": 4383, "fixNodeLength": 15, "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "fixCommitParentSHA1": "cac77a47b265e4fd2e39fc469d0abb6d32704b72", "bugFilePath": "src/main/java/org/jboss/netty/handler/stream/ChunkedNioStream.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/stream/ChunkedNioStream.java b/src/main/java/org/jboss/netty/handler/stream/ChunkedNioStream.java\nindex 5183b6d..b30ec47 100644\n--- a/src/main/java/org/jboss/netty/handler/stream/ChunkedNioStream.java\n+++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedNioStream.java\n@@ -97,7 +97,7 @@\n     }\n \n     public boolean isEndOfInput() throws Exception {\n-        return hasNextChunk();\n+        return !hasNextChunk();\n     }\n \n     public void close() throws Exception {\n", "projectName": "netty.netty", "bugLineNum": 100, "bugNodeStartChar": 3150, "bugNodeLength": 14, "fixLineNum": 100, "fixNodeStartChar": 3150, "fixNodeLength": 15, "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "fixCommitParentSHA1": "cac77a47b265e4fd2e39fc469d0abb6d32704b72", "bugFilePath": "src/main/java/org/jboss/netty/handler/stream/ChunkedStream.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/stream/ChunkedStream.java b/src/main/java/org/jboss/netty/handler/stream/ChunkedStream.java\nindex fb7a3c3..6946911 100644\n--- a/src/main/java/org/jboss/netty/handler/stream/ChunkedStream.java\n+++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedStream.java\n@@ -85,7 +85,7 @@\n     }\n \n     public boolean isEndOfInput() throws Exception {\n-        return hasNextChunk();\n+        return !hasNextChunk();\n     }\n \n     public void close() throws Exception {\n", "projectName": "netty.netty", "bugLineNum": 88, "bugNodeStartChar": 2615, "bugNodeLength": 14, "fixLineNum": 88, "fixNodeStartChar": 2615, "fixNodeLength": 15, "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cac77a47b265e4fd2e39fc469d0abb6d32704b72", "fixCommitParentSHA1": "8474026c922093d6b2bdc92d21366176c18dcbb9", "bugFilePath": "src/main/java/org/jboss/netty/example/local/LocalServerPipelineFactory.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/example/local/LocalServerPipelineFactory.java b/src/main/java/org/jboss/netty/example/local/LocalServerPipelineFactory.java\nindex d389884..9778024 100644\n--- a/src/main/java/org/jboss/netty/example/local/LocalServerPipelineFactory.java\n+++ b/src/main/java/org/jboss/netty/example/local/LocalServerPipelineFactory.java\n@@ -37,17 +37,17 @@\n  */\n public class LocalServerPipelineFactory implements ChannelPipelineFactory {\n \n-    private final Executor eventExecutor;\n+    private final ExecutionHandler executionHandler;\n \n     public LocalServerPipelineFactory(Executor eventExecutor) {\n-        this.eventExecutor = eventExecutor;\n+        executionHandler = new ExecutionHandler(eventExecutor);\n     }\n \n     public ChannelPipeline getPipeline() throws Exception {\n         final ChannelPipeline pipeline = Channels.pipeline();\n         pipeline.addLast(\"decoder\", new StringDecoder());\n         pipeline.addLast(\"encoder\", new StringEncoder());\n-        pipeline.addLast(\"executor\", new ExecutionHandler(eventExecutor));\n+        pipeline.addLast(\"executor\", executionHandler);\n         pipeline.addLast(\"handler\", new EchoCloseServerHandler());\n         return pipeline;\n     }\n", "projectName": "netty.netty", "bugLineNum": 40, "bugNodeStartChar": 1564, "bugNodeLength": 37, "fixLineNum": 40, "fixNodeStartChar": 1564, "fixNodeLength": 48, "sourceBeforeFix": "private final Executor eventExecutor; ", "sourceAfterFix": "private final ExecutionHandler executionHandler; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1142a1aa062ec85ca3d2f3465afdaee56fff586b", "fixCommitParentSHA1": "9f123980731de93b45edcbfce6a67ec616db8fad", "bugFilePath": "src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java\nindex 3725e0b..c676c39 100644\n--- a/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java\n+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java\n@@ -401,7 +401,7 @@\n             // the channel is ready to receive.\n             remoteAddress = nioChannel.receive(byteBuffer);\n             failure = false;\n-        } catch (AsynchronousCloseException e) {\n+        } catch (ClosedChannelException e) {\n             // Can happen, and does not need a user attention.\n         } catch (Throwable t) {\n             fireExceptionCaught(channel, t);\n", "projectName": "netty.netty", "bugLineNum": 404, "bugNodeStartChar": 15021, "bugNodeLength": 28, "fixLineNum": 404, "fixNodeStartChar": 15021, "fixNodeLength": 24, "sourceBeforeFix": "AsynchronousCloseException e", "sourceAfterFix": "ClosedChannelException e"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "05525065b2098f17217c31298a156d6ee44494fb", "fixCommitParentSHA1": "e10cc133f582eaa131b0319989094c9e48c3d024", "bugFilePath": "src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java b/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java\nindex d70567b..972cd76 100644\n--- a/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java\n+++ b/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java\n@@ -459,7 +459,7 @@\n                         r = f;\n                         z.avail_in --;\n                         z.total_in ++;\n-                    } while (z.next_in[z.next_in_index ++] == 0);\n+                    } while (z.next_in[z.next_in_index ++] != 0);\n                 }\n                 z.istate.mode = GZIP_FCOMMENT;\n             case GZIP_FCOMMENT:\n@@ -471,7 +471,7 @@\n                         r = f;\n                         z.avail_in --;\n                         z.total_in ++;\n-                    } while (z.next_in[z.next_in_index ++] == 0);\n+                    } while (z.next_in[z.next_in_index ++] != 0);\n                 }\n                 gzipBytesToRead = 2;\n                 z.istate.mode = GZIP_FHCRC;\n", "projectName": "netty.netty", "bugLineNum": 462, "bugNodeStartChar": 16566, "bugNodeLength": 34, "fixLineNum": 462, "fixNodeStartChar": 16566, "fixNodeLength": 34, "sourceBeforeFix": "z.next_in[z.next_in_index++] == 0", "sourceAfterFix": "z.next_in[z.next_in_index++] != 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "05525065b2098f17217c31298a156d6ee44494fb", "fixCommitParentSHA1": "e10cc133f582eaa131b0319989094c9e48c3d024", "bugFilePath": "src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java b/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java\nindex d70567b..972cd76 100644\n--- a/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java\n+++ b/src/main/java/org/jboss/netty/util/internal/jzlib/Inflate.java\n@@ -459,7 +459,7 @@\n                         r = f;\n                         z.avail_in --;\n                         z.total_in ++;\n-                    } while (z.next_in[z.next_in_index ++] == 0);\n+                    } while (z.next_in[z.next_in_index ++] != 0);\n                 }\n                 z.istate.mode = GZIP_FCOMMENT;\n             case GZIP_FCOMMENT:\n@@ -471,7 +471,7 @@\n                         r = f;\n                         z.avail_in --;\n                         z.total_in ++;\n-                    } while (z.next_in[z.next_in_index ++] == 0);\n+                    } while (z.next_in[z.next_in_index ++] != 0);\n                 }\n                 gzipBytesToRead = 2;\n                 z.istate.mode = GZIP_FHCRC;\n", "projectName": "netty.netty", "bugLineNum": 474, "bugNodeStartChar": 17018, "bugNodeLength": 34, "fixLineNum": 474, "fixNodeStartChar": 17018, "fixNodeLength": 34, "sourceBeforeFix": "z.next_in[z.next_in_index++] == 0", "sourceAfterFix": "z.next_in[z.next_in_index++] != 0"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "588cfa851896440f9d1208654e33ed480a33e7da", "fixCommitParentSHA1": "e67e99a8475aadaeecafbdf2a7a6508423102415", "bugFilePath": "src/main/java/org/jboss/netty/buffer/ChannelBuffers.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\nindex 9f3cf48..e7c8698 100644\n--- a/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\n+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\n@@ -293,7 +293,7 @@\n             return EMPTY_BUFFER;\n         }\n         if (!buffer.isReadOnly() && buffer.hasArray()) {\n-            return wrappedBuffer(buffer.array(), buffer.arrayOffset(),buffer.remaining());\n+            return wrappedBuffer(buffer.order(), buffer.array(), buffer.arrayOffset(),buffer.remaining());\n         } else {\n             return new ByteBufferBackedChannelBuffer(buffer);\n         }\n", "projectName": "netty.netty", "bugLineNum": 296, "bugNodeStartChar": 10984, "bugNodeLength": 70, "fixLineNum": 296, "fixNodeStartChar": 10984, "fixNodeLength": 86, "sourceBeforeFix": "wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())", "sourceAfterFix": "wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e67e99a8475aadaeecafbdf2a7a6508423102415", "fixCommitParentSHA1": "3179d8094ed773167efafeb955d9fb73a8b3d5d8", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java\nindex b810f75..62d9e30 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java\n@@ -81,8 +81,7 @@\n             // An exceptional case:\n             // 'Expires' attribute can contain a comma without surrounded with quotes.\n             if (name.equalsIgnoreCase(CookieHeaderNames.EXPIRES) &&\n-                value.length() <= 3) {\n-                // value contains comma, but not surrounded with quotes.\n+                value.length() <= 9) { // Longest day of week is 'Wednesday'.\n                 if (m.find(pos)) {\n                     value = value + \", \" + m.group(1);\n                     pos = m.end();\n", "projectName": "netty.netty", "bugLineNum": 84, "bugNodeStartChar": 2709, "bugNodeLength": 19, "fixLineNum": 84, "fixNodeStartChar": 2709, "fixNodeLength": 19, "sourceBeforeFix": "value.length() <= 3", "sourceAfterFix": "value.length() <= 9"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "219647385ab87ee13107a9f4e571964f5527ebf5", "fixCommitParentSHA1": "65e7a351bd87e14415c4135c399c5645df17f6b1", "bugFilePath": "src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java\nindex 8eb125a..4a0a10b 100644\n--- a/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java\n@@ -52,7 +52,7 @@\n     /**\n      * Invoked when a {@link Channel} has been idle for a while.\n      */\n-    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) {\n+    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {\n         ctx.sendUpstream(e);\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 52, "bugNodeStartChar": 1648, "bugNodeLength": 186, "fixLineNum": 52, "fixNodeStartChar": 1648, "fixNodeLength": 203, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "219647385ab87ee13107a9f4e571964f5527ebf5", "fixCommitParentSHA1": "65e7a351bd87e14415c4135c399c5645df17f6b1", "bugFilePath": "src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java\nindex de65509..83ec60f 100644\n--- a/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java\n@@ -52,7 +52,7 @@\n     /**\n      * Invoked when a {@link Channel} has been idle for a while.\n      */\n-    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) {\n+    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {\n         ctx.sendUpstream(e);\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 52, "bugNodeStartChar": 1688, "bugNodeLength": 186, "fixLineNum": 52, "fixNodeStartChar": 1688, "fixNodeLength": 203, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "edd056d3deb35b7f5b35ec3504ff0ce1e7863203", "fixCommitParentSHA1": "b9c8675cf1c5818985b7bec834bd8995de551527", "bugFilePath": "src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java b/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java\nindex c8ab351..812cf66 100644\n--- a/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java\n+++ b/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java\n@@ -134,7 +134,7 @@\n                 channelInterestChanged(ctx, evt);\n                 break;\n             default:\n-                ctx.sendDownstream(e);\n+                ctx.sendUpstream(e);\n             }\n         } else if (e instanceof ExceptionEvent) {\n             exceptionCaught(ctx, (ExceptionEvent) e);\n", "projectName": "netty.netty", "bugLineNum": 137, "bugNodeStartChar": 5366, "bugNodeLength": 21, "fixLineNum": 137, "fixNodeStartChar": 5366, "fixNodeLength": 19, "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "edd056d3deb35b7f5b35ec3504ff0ce1e7863203", "fixCommitParentSHA1": "b9c8675cf1c5818985b7bec834bd8995de551527", "bugFilePath": "src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java b/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java\nindex c8ab351..812cf66 100644\n--- a/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java\n+++ b/src/main/java/org/jboss/netty/channel/SimpleChannelHandler.java\n@@ -134,7 +134,7 @@\n                 channelInterestChanged(ctx, evt);\n                 break;\n             default:\n-                ctx.sendDownstream(e);\n+                ctx.sendUpstream(e);\n             }\n         } else if (e instanceof ExceptionEvent) {\n             exceptionCaught(ctx, (ExceptionEvent) e);\n", "projectName": "netty.netty", "bugLineNum": 137, "bugNodeStartChar": 5366, "bugNodeLength": 21, "fixLineNum": 137, "fixNodeStartChar": 5366, "fixNodeLength": 19, "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "edd056d3deb35b7f5b35ec3504ff0ce1e7863203", "fixCommitParentSHA1": "b9c8675cf1c5818985b7bec834bd8995de551527", "bugFilePath": "src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java b/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java\nindex b8eb72e..2ddd84f 100644\n--- a/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java\n+++ b/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java\n@@ -116,7 +116,7 @@\n                 channelInterestChanged(ctx, evt);\n                 break;\n             default:\n-                ctx.sendDownstream(e);\n+                ctx.sendUpstream(e);\n             }\n         } else if (e instanceof ExceptionEvent) {\n             exceptionCaught(ctx, (ExceptionEvent) e);\n", "projectName": "netty.netty", "bugLineNum": 119, "bugNodeStartChar": 4524, "bugNodeLength": 21, "fixLineNum": 119, "fixNodeStartChar": 4524, "fixNodeLength": 19, "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "edd056d3deb35b7f5b35ec3504ff0ce1e7863203", "fixCommitParentSHA1": "b9c8675cf1c5818985b7bec834bd8995de551527", "bugFilePath": "src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java b/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java\nindex b8eb72e..2ddd84f 100644\n--- a/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java\n+++ b/src/main/java/org/jboss/netty/channel/SimpleChannelUpstreamHandler.java\n@@ -116,7 +116,7 @@\n                 channelInterestChanged(ctx, evt);\n                 break;\n             default:\n-                ctx.sendDownstream(e);\n+                ctx.sendUpstream(e);\n             }\n         } else if (e instanceof ExceptionEvent) {\n             exceptionCaught(ctx, (ExceptionEvent) e);\n", "projectName": "netty.netty", "bugLineNum": 119, "bugNodeStartChar": 4524, "bugNodeLength": 21, "fixLineNum": 119, "fixNodeStartChar": 4524, "fixNodeLength": 19, "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "4497d9362a4347a82acc9d611df544eb64e2ca18", "fixCommitParentSHA1": "580a6e491a91fe4d53b43630440f952e376f7156", "bugFilePath": "src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java\nindex 94414d5..6b7fc38 100644\n--- a/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java\n+++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java\n@@ -114,7 +114,7 @@\n             fireChannelClosed(pairedChannel);\n         } finally {\n             future.setSuccess();\n-            if (localAddress != null) {\n+            if (localAddress != null && getParent() == null) {\n                 LocalChannelRegistry.unregister(localAddress);\n             }\n         }\n", "projectName": "netty.netty", "bugLineNum": 117, "bugNodeStartChar": 4185, "bugNodeLength": 20, "fixLineNum": 117, "fixNodeStartChar": 4185, "fixNodeLength": 43, "sourceBeforeFix": "localAddress != null", "sourceAfterFix": "localAddress != null && getParent() == null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d0ee16781a214f8470462334346519b762c5b72b", "fixCommitParentSHA1": "c55c25291a0ea045f6e6ddb63a03997b499e2ab4", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoder.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoder.java b/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoder.java\nindex 6b74bbb..3525769 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoder.java\n@@ -407,11 +407,12 @@\n             }\n \n             // A successful decode\n-            fireMessageReceived(context, remoteAddress, result);\n+            unfoldAndfireMessageReceived(context, result, remoteAddress);\n         }\n     }\n \n-    private void fireMessageReceived(ChannelHandlerContext context, SocketAddress remoteAddress, Object result) {\n+    private void unfoldAndfireMessageReceived(\n+            ChannelHandlerContext context, Object result, SocketAddress remoteAddress) {\n         if (unfold) {\n             if (result instanceof Object[]) {\n                 for (Object r: (Object[]) result) {\n@@ -443,9 +444,9 @@\n                 callDecode(ctx, e.getChannel(), cumulation, null);\n                 if (cumulation.readable()) {\n                     // and send the remainders too if necessary.\n-                    Object partiallyDecoded = decodeLast(ctx, e.getChannel(), cumulation, state);\n+                    Object partiallyDecoded = decodeLast(ctx, e.getChannel(), replayable, state);\n                     if (partiallyDecoded != null) {\n-                        fireMessageReceived(ctx, null, partiallyDecoded);\n+                        unfoldAndfireMessageReceived(ctx, partiallyDecoded, null);\n                     }\n                 }\n             }\n", "projectName": "netty.netty", "bugLineNum": 446, "bugNodeStartChar": 16018, "bugNodeLength": 50, "fixLineNum": 446, "fixNodeStartChar": 16018, "fixNodeLength": 50, "sourceBeforeFix": "decodeLast(ctx,e.getChannel(),cumulation,state)", "sourceAfterFix": "decodeLast(ctx,e.getChannel(),replayable,state)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "35ac9ef38e0ebf8c9abb718e66d0206a1c943260", "fixCommitParentSHA1": "cd3859b002aa743d0094e1d7b7fa682ee3084c73", "bugFilePath": "src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\nindex 1af020d..8d072f4 100644\n--- a/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\n+++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\n@@ -220,7 +220,7 @@\n             throws IOException {\n         // XXX Gathering write is not supported because of a known issue.\n         //     See http://bugs.sun.com/view_bug.do?bug_id=6210541\n-        return out.write(toByteBuffer());\n+        return out.write(toByteBuffer(index, length));\n     }\n \n     public void getBytes(int index, OutputStream out, int length)\n", "projectName": "netty.netty", "bugLineNum": 223, "bugNodeStartChar": 8110, "bugNodeLength": 14, "fixLineNum": 223, "fixNodeStartChar": 8110, "fixNodeLength": 27, "sourceBeforeFix": "toByteBuffer()", "sourceAfterFix": "toByteBuffer(index,length)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "9e623c9cb121353e3624042afde411b321e10999", "fixCommitParentSHA1": "7d00231a60e91b988ecea2a1d53a1d04c60f19c1", "bugFilePath": "src/main/java/org/jboss/netty/container/spring/NettyResourceFactory.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/container/spring/NettyResourceFactory.java b/src/main/java/org/jboss/netty/container/spring/NettyResourceFactory.java\nindex b601ba1..3441e2f 100644\n--- a/src/main/java/org/jboss/netty/container/spring/NettyResourceFactory.java\n+++ b/src/main/java/org/jboss/netty/container/spring/NettyResourceFactory.java\n@@ -60,7 +60,7 @@\n         unterminatableExecutor = null;\n     }\n \n-    public Executor getChannelFactoryExecutor() {\n+    public synchronized Executor getChannelFactoryExecutor() {\n         return unterminatableExecutor;\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 63, "bugNodeStartChar": 2271, "bugNodeLength": 90, "fixLineNum": 63, "fixNodeStartChar": 2271, "fixNodeLength": 103, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7d00231a60e91b988ecea2a1d53a1d04c60f19c1", "fixCommitParentSHA1": "39cc4bc3fb0b8ea78067028d377dad641e9adb38", "bugFilePath": "src/main/java/org/jboss/netty/container/microcontainer/NettyResourceFactory.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/container/microcontainer/NettyResourceFactory.java b/src/main/java/org/jboss/netty/container/microcontainer/NettyResourceFactory.java\nindex 1010455..5b99fe3 100644\n--- a/src/main/java/org/jboss/netty/container/microcontainer/NettyResourceFactory.java\n+++ b/src/main/java/org/jboss/netty/container/microcontainer/NettyResourceFactory.java\n@@ -63,7 +63,7 @@\n         unterminatableExecutor = null;\n     }\n \n-    public Executor getChannelFactoryExecutor() {\n+    public synchronized Executor getChannelFactoryExecutor() {\n         return unterminatableExecutor;\n     }\n }\n", "projectName": "netty.netty", "bugLineNum": 66, "bugNodeStartChar": 2180, "bugNodeLength": 90, "fixLineNum": 66, "fixNodeStartChar": 2180, "fixNodeLength": 103, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5f2f072d694275f750d1ee139386cc64a0670f4f", "fixCommitParentSHA1": "c153fd5bd099ed2490a9914b7379661fb24078b3", "bugFilePath": "src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java\nindex 42752a1..9cf8fe5 100644\n--- a/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java\n@@ -237,7 +237,7 @@\n                 writerIdleTimeout =\n                     timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n-                    channelIdle(ctx, IdleState.WRITER_IDLE, lastReadTime);\n+                    channelIdle(ctx, IdleState.WRITER_IDLE, lastWriteTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }\n@@ -271,7 +271,7 @@\n                 allIdleTimeout =\n                     timer.newTimeout(this, allIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n-                    channelIdle(ctx, IdleState.ALL_IDLE, lastReadTime);\n+                    channelIdle(ctx, IdleState.ALL_IDLE, lastIoTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }\n", "projectName": "netty.netty", "bugLineNum": 240, "bugNodeStartChar": 8441, "bugNodeLength": 53, "fixLineNum": 240, "fixNodeStartChar": 8441, "fixNodeLength": 54, "sourceBeforeFix": "channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)", "sourceAfterFix": "channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5f2f072d694275f750d1ee139386cc64a0670f4f", "fixCommitParentSHA1": "c153fd5bd099ed2490a9914b7379661fb24078b3", "bugFilePath": "src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java\nindex 42752a1..9cf8fe5 100644\n--- a/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java\n@@ -237,7 +237,7 @@\n                 writerIdleTimeout =\n                     timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n-                    channelIdle(ctx, IdleState.WRITER_IDLE, lastReadTime);\n+                    channelIdle(ctx, IdleState.WRITER_IDLE, lastWriteTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }\n@@ -271,7 +271,7 @@\n                 allIdleTimeout =\n                     timer.newTimeout(this, allIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n-                    channelIdle(ctx, IdleState.ALL_IDLE, lastReadTime);\n+                    channelIdle(ctx, IdleState.ALL_IDLE, lastIoTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }\n", "projectName": "netty.netty", "bugLineNum": 274, "bugNodeStartChar": 9759, "bugNodeLength": 50, "fixLineNum": 274, "fixNodeStartChar": 9759, "fixNodeLength": 48, "sourceBeforeFix": "channelIdle(ctx,IdleState.ALL_IDLE,lastReadTime)", "sourceAfterFix": "channelIdle(ctx,IdleState.ALL_IDLE,lastIoTime)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "2ac8d11a343bbfeade6ff19c4b11800e6c37ab62", "fixCommitParentSHA1": "44d56d2c1a002f98939ba73249bc4ae4e5bf4a35", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpChunk.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpChunk.java b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpChunk.java\nindex 5f71625..7011d06 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpChunk.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpChunk.java\n@@ -38,7 +38,7 @@\n         if (content == null) {\n             throw new NullPointerException(\"content\");\n         }\n-        last = content.readable();\n+        last = !content.readable();\n         this.content = content;\n     }\n \n", "projectName": "netty.netty", "bugLineNum": 41, "bugNodeStartChar": 1531, "bugNodeLength": 18, "fixLineNum": 41, "fixNodeStartChar": 1531, "fixNodeLength": 19, "sourceBeforeFix": "content.readable()", "sourceAfterFix": "!content.readable()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1924e30482861bbfd3c9a5d97b1be655777e9ed7", "fixCommitParentSHA1": "bcbd0f92387e4f07eb453aa68b2db8798e94b0fe", "bugFilePath": "src/main/java/org/jboss/netty/util/TimeBasedUuidGenerator.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/util/TimeBasedUuidGenerator.java b/src/main/java/org/jboss/netty/util/TimeBasedUuidGenerator.java\nindex ee8f3ec..9230ebf 100644\n--- a/src/main/java/org/jboss/netty/util/TimeBasedUuidGenerator.java\n+++ b/src/main/java/org/jboss/netty/util/TimeBasedUuidGenerator.java\n@@ -95,7 +95,7 @@\n \n             nodeKey.append(':');\n             nodeKey.append(vmId);\n-        } catch (Exception e) {\n+        } catch (Throwable t) {\n             // Perhaps running with a security manager (e.g. Applet) or on a\n             // platform without the java.lang.management package (e.g. Android.)\n             nodeKey.append(\":?\");\n", "projectName": "netty.netty", "bugLineNum": 98, "bugNodeStartChar": 4036, "bugNodeLength": 11, "fixLineNum": 98, "fixNodeStartChar": 4036, "fixNodeLength": 11, "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable t"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a865090d7a1c503590c4b5726cf9ee56b3cf20aa", "fixCommitParentSHA1": "a59862e8d182c113d6c37258dd8fc156bca4cbfe", "bugFilePath": "src/main/java/org/jboss/netty/example/localtime/LocalTimeServerHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/example/localtime/LocalTimeServerHandler.java b/src/main/java/org/jboss/netty/example/localtime/LocalTimeServerHandler.java\nindex df0264f..348dfe6 100644\n--- a/src/main/java/org/jboss/netty/example/localtime/LocalTimeServerHandler.java\n+++ b/src/main/java/org/jboss/netty/example/localtime/LocalTimeServerHandler.java\n@@ -83,7 +83,7 @@\n                     setMonth(calendar.get(MONTH) + 1).\n                     setDayOfMonth(calendar.get(DAY_OF_MONTH)).\n                     setDayOfWeek(DayOfWeek.valueOf(calendar.get(DAY_OF_WEEK))).\n-                    setHour(calendar.get(HOUR)).\n+                    setHour(calendar.get(HOUR_OF_DAY)).\n                     setMinute(calendar.get(MINUTE)).\n                     setSecond(calendar.get(SECOND)).build());\n         }\n", "projectName": "netty.netty", "bugLineNum": 86, "bugNodeStartChar": 3492, "bugNodeLength": 18, "fixLineNum": 86, "fixNodeStartChar": 3492, "fixNodeLength": 25, "sourceBeforeFix": "calendar.get(HOUR)", "sourceAfterFix": "calendar.get(HOUR_OF_DAY)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5eec9ac58cb4f2fe2518ef21b07845c7cf4c7b99", "fixCommitParentSHA1": "891821788a2e5626005bbf4588cc8ba7316c816f", "bugFilePath": "src/main/java/org/jboss/netty/channel/LifeCycleAwareChannelHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/LifeCycleAwareChannelHandler.java b/src/main/java/org/jboss/netty/channel/LifeCycleAwareChannelHandler.java\nindex 0b65380..90b9117 100644\n--- a/src/main/java/org/jboss/netty/channel/LifeCycleAwareChannelHandler.java\n+++ b/src/main/java/org/jboss/netty/channel/LifeCycleAwareChannelHandler.java\n@@ -32,7 +32,7 @@\n  * @author Trustin Lee (tlee@redhat.com)\n  * @version $Rev$, $Date$\n  */\n-public interface LifeCycleAwareChannelHandler extends ChannelHandlerContext {\n+public interface LifeCycleAwareChannelHandler extends ChannelHandler {\n     void beforeAdd(ChannelHandlerContext ctx) throws Exception;\n     void afterAdd(ChannelHandlerContext ctx) throws Exception;\n     void beforeRemove(ChannelHandlerContext ctx) throws Exception;\n", "projectName": "netty.netty", "bugLineNum": 25, "bugNodeStartChar": 1050, "bugNodeLength": 776, "fixLineNum": 25, "fixNodeStartChar": 1050, "fixNodeLength": 769, "sourceBeforeFix": "/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandlerContext {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } ", "sourceAfterFix": "/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandler {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } "}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "549145687e2d5f1b5a3e4f536849082cf85e274b", "fixCommitParentSHA1": "df2f9d9d50510eeffdc1e29fce74172edd2beef5", "bugFilePath": "src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java\nindex 9c9af64..1b326e5 100644\n--- a/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java\n+++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java\n@@ -267,7 +267,7 @@\n         if (length == 0) {\n             return ChannelBuffers.EMPTY_BUFFER;\n         }\n-        ChannelBuffer buf = ChannelBuffers.buffer(length);\n+        ChannelBuffer buf = ChannelBuffers.buffer(order(), length);\n         buf.writeBytes(this, readerIndex, length);\n         readerIndex += length;\n         return buf;\n", "projectName": "netty.netty", "bugLineNum": 270, "bugNodeStartChar": 7452, "bugNodeLength": 29, "fixLineNum": 270, "fixNodeStartChar": 7452, "fixNodeLength": 38, "sourceBeforeFix": "ChannelBuffers.buffer(length)", "sourceAfterFix": "ChannelBuffers.buffer(order(),length)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "d8cd49c1b725a5e0a9355a25d6fa7ce887774138", "fixCommitParentSHA1": "33187d0285e1c48f1fb4953f1199a53e123da6a6", "bugFilePath": "src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\nindex d1f8223..2e5f940 100644\n--- a/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\n+++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\n@@ -261,7 +261,7 @@\n         if (index + 3 <= indices[sliceId + 1]) {\n             slices[sliceId].setMedium(index - indices[sliceId], value);\n         } else if (order() == ByteOrder.BIG_ENDIAN) {\n-            setShort(index, (short) (value >>> 8));\n+            setShort(index, (short) (value >> 8));\n             setByte(index + 2, (byte) value);\n         } else {\n             setShort(index    , (short) value);\n", "projectName": "netty.netty", "bugLineNum": 264, "bugNodeStartChar": 9603, "bugNodeLength": 11, "fixLineNum": 264, "fixNodeStartChar": 9603, "fixNodeLength": 10, "sourceBeforeFix": "value >>> 8", "sourceAfterFix": "value >> 8"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "33187d0285e1c48f1fb4953f1199a53e123da6a6", "fixCommitParentSHA1": "3a2a7a3a3c3584c9bbd20f892e4ab666a29f4820", "bugFilePath": "src/main/java/org/jboss/netty/buffer/ChannelBuffers.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\nindex ebf23e0..23a0230 100644\n--- a/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\n+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\n@@ -104,7 +104,7 @@\n     /**\n      * A buffer whose capacity is {@code 0}.\n      */\n-    public static ChannelBuffer EMPTY_BUFFER = new BigEndianHeapChannelBuffer(0);\n+    public static final ChannelBuffer EMPTY_BUFFER = new BigEndianHeapChannelBuffer(0);\n \n     private static final char[] HEXDUMP_TABLE = new char[65536 * 4];\n \n", "projectName": "netty.netty", "bugLineNum": 104, "bugNodeStartChar": 3926, "bugNodeLength": 138, "fixLineNum": 104, "fixNodeStartChar": 3926, "fixNodeLength": 144, "sourceBeforeFix": "9", "sourceAfterFix": "25"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88833d9ded6949e03de3a98ccff67c67b2c6e551", "fixCommitParentSHA1": "a4edbd444e3cb1afb981eef3de5b96d7f74cff3d", "bugFilePath": "src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java b/src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java\nindex 980a594..10ec5d4 100644\n--- a/src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java\n+++ b/src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java\n@@ -232,7 +232,7 @@\n \n     private void checkAvailable(int fieldSize) throws IOException {\n         if (fieldSize < 0) {\n-            throw new IllegalArgumentException();\n+            throw new IndexOutOfBoundsException();\n         }\n         if (fieldSize > available()) {\n             throw new EOFException();\n", "projectName": "netty.netty", "bugLineNum": 235, "bugNodeStartChar": 6690, "bugNodeLength": 30, "fixLineNum": 235, "fixNodeStartChar": 6690, "fixNodeLength": 31, "sourceBeforeFix": "new IllegalArgumentException()", "sourceAfterFix": "new IndexOutOfBoundsException()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "07f17cfd4f51a397ebd058bd047ec330f8d4b572", "fixCommitParentSHA1": "66f7d5a800517dcb788c736c2ef482e669c7de15", "bugFilePath": "src/main/java/org/jboss/netty/handler/ssl/SslHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\nindex b210672..3b864b2 100644\n--- a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n@@ -503,7 +503,7 @@\n             handshaking = false;\n             handshaken = true;\n \n-            if (handshakeFuture != null) {\n+            if (handshakeFuture == null) {\n                 handshakeFuture = newHandshakeFuture(channel);\n             }\n         }\n@@ -515,7 +515,7 @@\n             handshaking = false;\n             handshaken = false;\n \n-            if (handshakeFuture != null) {\n+            if (handshakeFuture == null) {\n                 handshakeFuture = newHandshakeFuture(channel);\n             }\n         }\n", "projectName": "netty.netty", "bugLineNum": 506, "bugNodeStartChar": 18128, "bugNodeLength": 23, "fixLineNum": 506, "fixNodeStartChar": 18128, "fixNodeLength": 23, "sourceBeforeFix": "handshakeFuture != null", "sourceAfterFix": "handshakeFuture == null"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "07f17cfd4f51a397ebd058bd047ec330f8d4b572", "fixCommitParentSHA1": "66f7d5a800517dcb788c736c2ef482e669c7de15", "bugFilePath": "src/main/java/org/jboss/netty/handler/ssl/SslHandler.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\nindex b210672..3b864b2 100644\n--- a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n+++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java\n@@ -503,7 +503,7 @@\n             handshaking = false;\n             handshaken = true;\n \n-            if (handshakeFuture != null) {\n+            if (handshakeFuture == null) {\n                 handshakeFuture = newHandshakeFuture(channel);\n             }\n         }\n@@ -515,7 +515,7 @@\n             handshaking = false;\n             handshaken = false;\n \n-            if (handshakeFuture != null) {\n+            if (handshakeFuture == null) {\n                 handshakeFuture = newHandshakeFuture(channel);\n             }\n         }\n", "projectName": "netty.netty", "bugLineNum": 518, "bugNodeStartChar": 18484, "bugNodeLength": 23, "fixLineNum": 518, "fixNodeStartChar": 18484, "fixNodeLength": 23, "sourceBeforeFix": "handshakeFuture != null", "sourceAfterFix": "handshakeFuture == null"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "65eda0902d61438898fb15acc5828ff68fc2160e", "fixCommitParentSHA1": "c76451b874dcf22962b09c3d538d978a0ae2c723", "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/serialization/ObjectEncoderOutputStream.java", "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/serialization/ObjectEncoderOutputStream.java b/src/main/java/org/jboss/netty/handler/codec/serialization/ObjectEncoderOutputStream.java\nindex 1fcbd59..30c2904 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/serialization/ObjectEncoderOutputStream.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ObjectEncoderOutputStream.java\n@@ -49,7 +49,7 @@\n         if (out == null) {\n             throw new NullPointerException(\"out\");\n         }\n-        if (estimatedLength < 8) {\n+        if (estimatedLength < 0) {\n             throw new IllegalArgumentException(\"estimatedLength: \" + estimatedLength);\n         }\n \n", "projectName": "netty.netty", "bugLineNum": 52, "bugNodeStartChar": 1865, "bugNodeLength": 19, "fixLineNum": 52, "fixNodeStartChar": 1865, "fixNodeLength": 19, "sourceBeforeFix": "estimatedLength < 8", "sourceAfterFix": "estimatedLength < 0"}]