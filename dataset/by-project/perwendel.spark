[
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32",
    "fixCommitParentSHA1": "c2c976107dfcc44fbd6bc2af8435b2c440ca592d",
    "bugFilePath": "src/main/java/spark/ExceptionHandler.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandler.java b/src/main/java/spark/ExceptionHandler.java\nindex 4650688..f30004d 100644\n--- a/src/main/java/spark/ExceptionHandler.java\n+++ b/src/main/java/spark/ExceptionHandler.java\n@@ -4,7 +4,7 @@\n  * Created by Per Wendel on 2014-05-10.\n  */\n @FunctionalInterface\n-public interface ExceptionHandler {\n+public interface ExceptionHandler<T extends Exception> {\n \n     /**\n      * Invoked when an exception that is mapped to this handler occurs during routing\n@@ -13,5 +13,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    void handle(Exception exception, Request request, Response response);\n+    void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 16,
    "bugNodeStartChar": 499,
    "bugNodeLength": 19,
    "fixLineNum": 16,
    "fixNodeStartChar": 499,
    "fixNodeLength": 11,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "T exception"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32",
    "fixCommitParentSHA1": "c2c976107dfcc44fbd6bc2af8435b2c440ca592d",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 23,
    "bugNodeStartChar": 791,
    "bugNodeLength": 19,
    "fixLineNum": 23,
    "fixNodeStartChar": 791,
    "fixNodeLength": 11,
    "sourceBeforeFix": "? extends Exception",
    "sourceAfterFix": "? extends T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32",
    "fixCommitParentSHA1": "c2c976107dfcc44fbd6bc2af8435b2c440ca592d",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 39,
    "bugNodeStartChar": 1227,
    "bugNodeLength": 19,
    "fixLineNum": 39,
    "fixNodeStartChar": 1227,
    "fixNodeLength": 11,
    "sourceBeforeFix": "? extends Exception",
    "sourceAfterFix": "? extends T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32",
    "fixCommitParentSHA1": "c2c976107dfcc44fbd6bc2af8435b2c440ca592d",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 48,
    "bugNodeStartChar": 1480,
    "bugNodeLength": 19,
    "fixLineNum": 48,
    "fixNodeStartChar": 1480,
    "fixNodeLength": 11,
    "sourceBeforeFix": "? extends Exception",
    "sourceAfterFix": "? extends T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32",
    "fixCommitParentSHA1": "c2c976107dfcc44fbd6bc2af8435b2c440ca592d",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 59,
    "bugNodeStartChar": 1965,
    "bugNodeLength": 19,
    "fixLineNum": 59,
    "fixNodeStartChar": 1965,
    "fixNodeLength": 11,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "T exception"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32",
    "fixCommitParentSHA1": "c2c976107dfcc44fbd6bc2af8435b2c440ca592d",
    "bugFilePath": "src/main/java/spark/Service.java",
    "fixPatch": "diff --git a/src/main/java/spark/Service.java b/src/main/java/spark/Service.java\nindex 78f818f..5991dff 100644\n--- a/src/main/java/spark/Service.java\n+++ b/src/main/java/spark/Service.java\n@@ -542,11 +542,11 @@\n      * @param exceptionClass the exception class\n      * @param handler        The handler\n      */\n-    public synchronized void exception(Class<? extends Exception> exceptionClass, ExceptionHandler handler) {\n+    public synchronized <T extends Exception> void exception(Class<T> exceptionClass, ExceptionHandler<? super T> handler) {\n         // wrap\n-        ExceptionHandlerImpl wrapper = new ExceptionHandlerImpl(exceptionClass) {\n+        ExceptionHandlerImpl wrapper = new ExceptionHandlerImpl<T>(exceptionClass) {\n             @Override\n-            public void handle(Exception exception, Request request, Response response) {\n+            public void handle(T exception, Request request, Response response) {\n                 handler.handle(exception, request, response);\n             }\n         };\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 549,
    "bugNodeStartChar": 19368,
    "bugNodeLength": 19,
    "fixLineNum": 549,
    "fixNodeStartChar": 19368,
    "fixNodeLength": 11,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "T exception"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074",
    "fixCommitParentSHA1": "ddda7e5bae297e7f3c356a35d29134015262bb49",
    "bugFilePath": "src/main/java/spark/ExceptionHandler.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandler.java b/src/main/java/spark/ExceptionHandler.java\nindex 4650688..f30004d 100644\n--- a/src/main/java/spark/ExceptionHandler.java\n+++ b/src/main/java/spark/ExceptionHandler.java\n@@ -4,7 +4,7 @@\n  * Created by Per Wendel on 2014-05-10.\n  */\n @FunctionalInterface\n-public interface ExceptionHandler {\n+public interface ExceptionHandler<T extends Exception> {\n \n     /**\n      * Invoked when an exception that is mapped to this handler occurs during routing\n@@ -13,5 +13,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    void handle(Exception exception, Request request, Response response);\n+    void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 16,
    "bugNodeStartChar": 499,
    "bugNodeLength": 19,
    "fixLineNum": 16,
    "fixNodeStartChar": 499,
    "fixNodeLength": 11,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "T exception"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074",
    "fixCommitParentSHA1": "ddda7e5bae297e7f3c356a35d29134015262bb49",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 23,
    "bugNodeStartChar": 791,
    "bugNodeLength": 19,
    "fixLineNum": 23,
    "fixNodeStartChar": 791,
    "fixNodeLength": 11,
    "sourceBeforeFix": "? extends Exception",
    "sourceAfterFix": "? extends T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074",
    "fixCommitParentSHA1": "ddda7e5bae297e7f3c356a35d29134015262bb49",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 39,
    "bugNodeStartChar": 1227,
    "bugNodeLength": 19,
    "fixLineNum": 39,
    "fixNodeStartChar": 1227,
    "fixNodeLength": 11,
    "sourceBeforeFix": "? extends Exception",
    "sourceAfterFix": "? extends T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074",
    "fixCommitParentSHA1": "ddda7e5bae297e7f3c356a35d29134015262bb49",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 48,
    "bugNodeStartChar": 1480,
    "bugNodeLength": 19,
    "fixLineNum": 48,
    "fixNodeStartChar": 1480,
    "fixNodeLength": 11,
    "sourceBeforeFix": "? extends Exception",
    "sourceAfterFix": "? extends T"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074",
    "fixCommitParentSHA1": "ddda7e5bae297e7f3c356a35d29134015262bb49",
    "bugFilePath": "src/main/java/spark/ExceptionHandlerImpl.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionHandlerImpl.java b/src/main/java/spark/ExceptionHandlerImpl.java\nindex 30e1136..d50c68d 100644\n--- a/src/main/java/spark/ExceptionHandlerImpl.java\n+++ b/src/main/java/spark/ExceptionHandlerImpl.java\n@@ -16,18 +16,19 @@\n  */\n package spark;\n \n-public abstract class ExceptionHandlerImpl implements ExceptionHandler {\n+public abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n+\n     /**\n      * Holds the type of exception that this filter will handle\n      */\n-    protected Class<? extends Exception> exceptionClass;\n+    protected Class<? extends T> exceptionClass;\n \n     /**\n      * Initializes the filter with the provided exception type\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n+    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -36,7 +37,7 @@\n      *\n      * @return Type of exception\n      */\n-    public Class<? extends Exception> exceptionClass() {\n+    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }\n \n@@ -45,7 +46,7 @@\n      *\n      * @param exceptionClass Type of exception\n      */\n-    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n+    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }\n \n@@ -56,5 +57,5 @@\n      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n-    public abstract void handle(Exception exception, Request request, Response response);\n+    public abstract void handle(T exception, Request request, Response response);\n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 59,
    "bugNodeStartChar": 1965,
    "bugNodeLength": 19,
    "fixLineNum": 59,
    "fixNodeStartChar": 1965,
    "fixNodeLength": 11,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "T exception"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074",
    "fixCommitParentSHA1": "ddda7e5bae297e7f3c356a35d29134015262bb49",
    "bugFilePath": "src/main/java/spark/Service.java",
    "fixPatch": "diff --git a/src/main/java/spark/Service.java b/src/main/java/spark/Service.java\nindex eb29136..0b42b05 100644\n--- a/src/main/java/spark/Service.java\n+++ b/src/main/java/spark/Service.java\n@@ -540,11 +540,11 @@\n      * @param exceptionClass the exception class\n      * @param handler        The handler\n      */\n-    public synchronized void exception(Class<? extends Exception> exceptionClass, ExceptionHandler handler) {\n+    public synchronized <T extends Exception> void exception(Class<T> exceptionClass, ExceptionHandler<? super T> handler) {\n         // wrap\n-        ExceptionHandlerImpl wrapper = new ExceptionHandlerImpl(exceptionClass) {\n+        ExceptionHandlerImpl wrapper = new ExceptionHandlerImpl<T>(exceptionClass) {\n             @Override\n-            public void handle(Exception exception, Request request, Response response) {\n+            public void handle(T exception, Request request, Response response) {\n                 handler.handle(exception, request, response);\n             }\n         };\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 547,
    "bugNodeStartChar": 19248,
    "bugNodeLength": 19,
    "fixLineNum": 547,
    "fixNodeStartChar": 19248,
    "fixNodeLength": 11,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "T exception"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "14ac271dc3a6481600560da99341aba0c692e0ce",
    "fixCommitParentSHA1": "a6630fb527f3853aa94a4e8fbe16f693bcb49bbe",
    "bugFilePath": "src/main/java/spark/CustomErrorPages.java",
    "fixPatch": "diff --git a/src/main/java/spark/CustomErrorPages.java b/src/main/java/spark/CustomErrorPages.java\nindex 7450924..ff7b124 100644\n--- a/src/main/java/spark/CustomErrorPages.java\n+++ b/src/main/java/spark/CustomErrorPages.java\n@@ -35,7 +35,7 @@\n         Object customRenderer = CustomErrorPages.getInstance().customPages.get(status);\r\n         Object customPage;\r\n \r\n-        customPage = status == 400 ? NOT_FOUND : INTERNAL_ERROR;\r\n+        customPage = status == 404 ? NOT_FOUND : INTERNAL_ERROR;\r\n \r\n         if (customRenderer instanceof String) {\r\n             customPage = customRenderer;\r\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 38,
    "bugNodeStartChar": 1316,
    "bugNodeLength": 13,
    "fixLineNum": 38,
    "fixNodeStartChar": 1279,
    "fixNodeLength": 13,
    "sourceBeforeFix": "status == 400",
    "sourceAfterFix": "status == 404"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5f1632dd4a5274c4180b4b35b778e198b1ddd8ff",
    "fixCommitParentSHA1": "3fd18a93e0ca4dbe1e50aefb88d084c7ab28bb72",
    "bugFilePath": "src/main/java/spark/http/matching/MatcherFilter.java",
    "fixPatch": "diff --git a/src/main/java/spark/http/matching/MatcherFilter.java b/src/main/java/spark/http/matching/MatcherFilter.java\nindex c801a98..00042a6 100644\n--- a/src/main/java/spark/http/matching/MatcherFilter.java\n+++ b/src/main/java/spark/http/matching/MatcherFilter.java\n@@ -146,7 +146,13 @@\n             try {\n                 DoneFilters.execute(context);\n             } catch (Exception generalException) {\n-                GeneralError.modify(httpResponse, body, requestWrapper, responseWrapper, generalException);\n+                GeneralError.modify(\n+                        httpRequest,\n+                        httpResponse,\n+                        body,\n+                        requestWrapper,\n+                        responseWrapper,\n+                        generalException);\n             }\n         }\n \n",
    "projectName": "perwendel.spark",
    "bugLineNum": 149,
    "bugNodeStartChar": 5150,
    "bugNodeLength": 90,
    "fixLineNum": 149,
    "fixNodeStartChar": 5150,
    "fixNodeLength": 248,
    "sourceBeforeFix": "GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)",
    "sourceAfterFix": "GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "8659914038f88e67dc9bd80c4e0c57bb341e07c0",
    "fixCommitParentSHA1": "fe04aad00b3c3238b55791e5cbbfecfce7a3ec88",
    "bugFilePath": "src/main/java/spark/Service.java",
    "fixPatch": "diff --git a/src/main/java/spark/Service.java b/src/main/java/spark/Service.java\nindex 6715e04..4a08661 100644\n--- a/src/main/java/spark/Service.java\n+++ b/src/main/java/spark/Service.java\n@@ -336,7 +336,7 @@\n      *\n      * @param page the custom 500 internal server error page.\n      */\n-    public void internalServerError(String page) {\n+    public synchronized void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }\n \n@@ -350,7 +350,7 @@\n     /**\n      * Maps 500 internal server errors to the provided route.\n      */\n-    public void internalServerError(Route route) {\n+    public synchronized void internalServerError(Route route) {\n         CustomErrorPages.add(500, route);\n     }\n \n",
    "projectName": "perwendel.spark",
    "bugLineNum": 334,
    "bugNodeStartChar": 11741,
    "bugNodeLength": 245,
    "fixLineNum": 334,
    "fixNodeStartChar": 11741,
    "fixNodeLength": 258,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "8659914038f88e67dc9bd80c4e0c57bb341e07c0",
    "fixCommitParentSHA1": "fe04aad00b3c3238b55791e5cbbfecfce7a3ec88",
    "bugFilePath": "src/main/java/spark/Service.java",
    "fixPatch": "diff --git a/src/main/java/spark/Service.java b/src/main/java/spark/Service.java\nindex 6715e04..4a08661 100644\n--- a/src/main/java/spark/Service.java\n+++ b/src/main/java/spark/Service.java\n@@ -336,7 +336,7 @@\n      *\n      * @param page the custom 500 internal server error page.\n      */\n-    public void internalServerError(String page) {\n+    public synchronized void internalServerError(String page) {\n         CustomErrorPages.add(500, page);\n     }\n \n@@ -350,7 +350,7 @@\n     /**\n      * Maps 500 internal server errors to the provided route.\n      */\n-    public void internalServerError(Route route) {\n+    public synchronized void internalServerError(Route route) {\n         CustomErrorPages.add(500, route);\n     }\n \n",
    "projectName": "perwendel.spark",
    "bugLineNum": 350,
    "bugNodeStartChar": 12156,
    "bugNodeLength": 172,
    "fixLineNum": 350,
    "fixNodeStartChar": 12156,
    "fixNodeLength": 185,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "95e4c74b9add0a315b7611494f2557df966bb681",
    "fixCommitParentSHA1": "e13efa33a4e0c41cf8bfc19c16600c3b6327857d",
    "bugFilePath": "src/main/java/spark/ExceptionMapper.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionMapper.java b/src/main/java/spark/ExceptionMapper.java\nindex 0bab0c8..b92d3cf 100644\n--- a/src/main/java/spark/ExceptionMapper.java\n+++ b/src/main/java/spark/ExceptionMapper.java\n@@ -30,7 +30,7 @@\n      *\n      * @return Default instance\n      */\n-    public static ExceptionMapper getInstance() {\n+    public synchronized static ExceptionMapper getInstance() {\n         if (defaultInstance == null) {\n             defaultInstance = new ExceptionMapper();\n         }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 28,
    "bugNodeStartChar": 828,
    "bugNodeLength": 301,
    "fixLineNum": 28,
    "fixNodeStartChar": 828,
    "fixNodeLength": 314,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "95e4c74b9add0a315b7611494f2557df966bb681",
    "fixCommitParentSHA1": "e13efa33a4e0c41cf8bfc19c16600c3b6327857d",
    "bugFilePath": "src/main/java/spark/staticfiles/StaticFiles.java",
    "fixPatch": "diff --git a/src/main/java/spark/staticfiles/StaticFiles.java b/src/main/java/spark/staticfiles/StaticFiles.java\nindex 0bfd364..aca4ee2 100644\n--- a/src/main/java/spark/staticfiles/StaticFiles.java\n+++ b/src/main/java/spark/staticfiles/StaticFiles.java\n@@ -83,7 +83,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureStaticResources(String folder) {\n+    public synchronized static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!staticResourcesSet) {\n@@ -112,7 +112,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureExternalStaticResources(String folder) {\n+    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!externalStaticResourcesSet) {\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 81,
    "bugNodeStartChar": 2674,
    "bugNodeLength": 1037,
    "fixLineNum": 81,
    "fixNodeStartChar": 2674,
    "fixNodeLength": 1050,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "95e4c74b9add0a315b7611494f2557df966bb681",
    "fixCommitParentSHA1": "e13efa33a4e0c41cf8bfc19c16600c3b6327857d",
    "bugFilePath": "src/main/java/spark/staticfiles/StaticFiles.java",
    "fixPatch": "diff --git a/src/main/java/spark/staticfiles/StaticFiles.java b/src/main/java/spark/staticfiles/StaticFiles.java\nindex 0bfd364..aca4ee2 100644\n--- a/src/main/java/spark/staticfiles/StaticFiles.java\n+++ b/src/main/java/spark/staticfiles/StaticFiles.java\n@@ -83,7 +83,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureStaticResources(String folder) {\n+    public synchronized static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!staticResourcesSet) {\n@@ -112,7 +112,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureExternalStaticResources(String folder) {\n+    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!externalStaticResourcesSet) {\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 110,
    "bugNodeStartChar": 3717,
    "bugNodeLength": 1085,
    "fixLineNum": 110,
    "fixNodeStartChar": 3717,
    "fixNodeLength": 1098,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "95e4c74b9add0a315b7611494f2557df966bb681",
    "fixCommitParentSHA1": "e13efa33a4e0c41cf8bfc19c16600c3b6327857d",
    "bugFilePath": "src/test/java/spark/servlet/MyApp.java",
    "fixPatch": "diff --git a/src/test/java/spark/servlet/MyApp.java b/src/test/java/spark/servlet/MyApp.java\nindex 753933a..d5bb2d5 100644\n--- a/src/test/java/spark/servlet/MyApp.java\n+++ b/src/test/java/spark/servlet/MyApp.java\n@@ -18,7 +18,7 @@\n     static File tmpExternalFile;\n \n     @Override\n-    public void init() {\n+    public synchronized void init() {\n         try {\n             externalStaticFileLocation(System.getProperty(\"java.io.tmpdir\"));\n             staticFileLocation(\"/public\");\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 20,
    "bugNodeStartChar": 500,
    "bugNodeLength": 1305,
    "fixLineNum": 20,
    "fixNodeStartChar": 500,
    "fixNodeLength": 1318,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691",
    "fixCommitParentSHA1": "127eef4a87625944ae2138ab946c0adcb634e35b",
    "bugFilePath": "src/main/java/spark/ExceptionMapper.java",
    "fixPatch": "diff --git a/src/main/java/spark/ExceptionMapper.java b/src/main/java/spark/ExceptionMapper.java\nindex 0bab0c8..b92d3cf 100644\n--- a/src/main/java/spark/ExceptionMapper.java\n+++ b/src/main/java/spark/ExceptionMapper.java\n@@ -30,7 +30,7 @@\n      *\n      * @return Default instance\n      */\n-    public static ExceptionMapper getInstance() {\n+    public synchronized static ExceptionMapper getInstance() {\n         if (defaultInstance == null) {\n             defaultInstance = new ExceptionMapper();\n         }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 28,
    "bugNodeStartChar": 828,
    "bugNodeLength": 301,
    "fixLineNum": 28,
    "fixNodeStartChar": 828,
    "fixNodeLength": 314,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691",
    "fixCommitParentSHA1": "127eef4a87625944ae2138ab946c0adcb634e35b",
    "bugFilePath": "src/main/java/spark/staticfiles/StaticFiles.java",
    "fixPatch": "diff --git a/src/main/java/spark/staticfiles/StaticFiles.java b/src/main/java/spark/staticfiles/StaticFiles.java\nindex 0bfd364..aca4ee2 100644\n--- a/src/main/java/spark/staticfiles/StaticFiles.java\n+++ b/src/main/java/spark/staticfiles/StaticFiles.java\n@@ -83,7 +83,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureStaticResources(String folder) {\n+    public synchronized static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!staticResourcesSet) {\n@@ -112,7 +112,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureExternalStaticResources(String folder) {\n+    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!externalStaticResourcesSet) {\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 81,
    "bugNodeStartChar": 2674,
    "bugNodeLength": 1037,
    "fixLineNum": 81,
    "fixNodeStartChar": 2674,
    "fixNodeLength": 1050,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691",
    "fixCommitParentSHA1": "127eef4a87625944ae2138ab946c0adcb634e35b",
    "bugFilePath": "src/main/java/spark/staticfiles/StaticFiles.java",
    "fixPatch": "diff --git a/src/main/java/spark/staticfiles/StaticFiles.java b/src/main/java/spark/staticfiles/StaticFiles.java\nindex 0bfd364..aca4ee2 100644\n--- a/src/main/java/spark/staticfiles/StaticFiles.java\n+++ b/src/main/java/spark/staticfiles/StaticFiles.java\n@@ -83,7 +83,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureStaticResources(String folder) {\n+    public synchronized static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!staticResourcesSet) {\n@@ -112,7 +112,7 @@\n      *\n      * @param folder the location\n      */\n-    public static void configureExternalStaticResources(String folder) {\n+    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n \n         if (!externalStaticResourcesSet) {\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 110,
    "bugNodeStartChar": 3717,
    "bugNodeLength": 1085,
    "fixLineNum": 110,
    "fixNodeStartChar": 3717,
    "fixNodeLength": 1098,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691",
    "fixCommitParentSHA1": "127eef4a87625944ae2138ab946c0adcb634e35b",
    "bugFilePath": "src/test/java/spark/servlet/MyApp.java",
    "fixPatch": "diff --git a/src/test/java/spark/servlet/MyApp.java b/src/test/java/spark/servlet/MyApp.java\nindex 753933a..d5bb2d5 100644\n--- a/src/test/java/spark/servlet/MyApp.java\n+++ b/src/test/java/spark/servlet/MyApp.java\n@@ -18,7 +18,7 @@\n     static File tmpExternalFile;\n \n     @Override\n-    public void init() {\n+    public synchronized void init() {\n         try {\n             externalStaticFileLocation(System.getProperty(\"java.io.tmpdir\"));\n             staticFileLocation(\"/public\");\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 20,
    "bugNodeStartChar": 500,
    "bugNodeLength": 1305,
    "fixLineNum": 20,
    "fixNodeStartChar": 500,
    "fixNodeLength": 1318,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "25d3a4a8d1dd6ac70b7dd7d6579893900e6d8448",
    "fixCommitParentSHA1": "3a1742136a77d57c99b7adb6755e5e6743c518c3",
    "bugFilePath": "src/test/java/spark/BodyAvailabilityTest.java",
    "fixPatch": "diff --git a/src/test/java/spark/BodyAvailabilityTest.java b/src/test/java/spark/BodyAvailabilityTest.java\nindex 9dbf711..c240ff3 100644\n--- a/src/test/java/spark/BodyAvailabilityTest.java\n+++ b/src/test/java/spark/BodyAvailabilityTest.java\n@@ -15,7 +15,7 @@\n \n public class BodyAvailabilityTest {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(GenericIntegrationTest.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BodyAvailabilityTest.class);\n \n     private static final String BODY_CONTENT = \"the body content\";\n \n",
    "projectName": "perwendel.spark",
    "bugLineNum": 18,
    "bugNodeStartChar": 417,
    "bugNodeLength": 28,
    "fixLineNum": 18,
    "fixNodeStartChar": 417,
    "fixNodeLength": 26,
    "sourceBeforeFix": "GenericIntegrationTest.class",
    "sourceAfterFix": "BodyAvailabilityTest.class"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "c7600eb5aacdf011e31428a29dbc7e851bb52f84",
    "fixCommitParentSHA1": "a249882d50c124dd1d7e45d2226d6205fa93fa89",
    "bugFilePath": "src/main/java/spark/Route.java",
    "fixPatch": "diff --git a/src/main/java/spark/Route.java b/src/main/java/spark/Route.java\nindex 601efa3..0aa82fd 100644\n--- a/src/main/java/spark/Route.java\n+++ b/src/main/java/spark/Route.java\n@@ -12,6 +12,6 @@\n      * @param response The response object providing functionality for modifying the response\n      * @return The content to be set in the response\n      */\n-    Object handle(Request request, Response response);\n+    Object handle(Request request, Response response)  throws Exception;\n \n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 8,
    "bugNodeStartChar": 94,
    "bugNodeLength": 394,
    "fixLineNum": 8,
    "fixNodeStartChar": 94,
    "fixNodeLength": 412,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "804a4f6d215851ce262eb7f2c1aada5e573edeb5",
    "fixCommitParentSHA1": "895fb2d4ced38833493d64b6bf0e116d1f1d69d7",
    "bugFilePath": "src/main/java/spark/Route.java",
    "fixPatch": "diff --git a/src/main/java/spark/Route.java b/src/main/java/spark/Route.java\nindex 601efa3..0aa82fd 100644\n--- a/src/main/java/spark/Route.java\n+++ b/src/main/java/spark/Route.java\n@@ -12,6 +12,6 @@\n      * @param response The response object providing functionality for modifying the response\n      * @return The content to be set in the response\n      */\n-    Object handle(Request request, Response response);\n+    Object handle(Request request, Response response)  throws Exception;\n \n }\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 8,
    "bugNodeStartChar": 94,
    "bugNodeLength": 394,
    "fixLineNum": 8,
    "fixNodeStartChar": 94,
    "fixNodeLength": 412,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "27fd2f243c6ed593596d06ca42e1892059ae6ffc",
    "fixCommitParentSHA1": "8b901b146a139c8e59983d81c1d4574ac7bc9ca5",
    "bugFilePath": "src/test/java/spark/BooksIntegrationTest.java",
    "fixPatch": "diff --git a/src/test/java/spark/BooksIntegrationTest.java b/src/test/java/spark/BooksIntegrationTest.java\nindex 00284df..529b715 100644\n--- a/src/test/java/spark/BooksIntegrationTest.java\n+++ b/src/test/java/spark/BooksIntegrationTest.java\n@@ -167,7 +167,7 @@\n     @Test\n     public void wontFindBook() {\n         try {\n-            doMethod(\"GET\", \"/books/\" + bookId, null);\n+            getResponse(\"GET\", \"/books/\" + bookId, null);\n         } catch (Exception e) {\n             if (e instanceof FileNotFoundException) {\n                 assertTrue(true);\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 170,
    "bugNodeStartChar": 4642,
    "bugNodeLength": 41,
    "fixLineNum": 170,
    "fixNodeStartChar": 4642,
    "fixNodeLength": 44,
    "sourceBeforeFix": "doMethod(\"GET\",\"/books/\" + bookId,null)",
    "sourceAfterFix": "getResponse(\"GET\",\"/books/\" + bookId,null)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "27fd2f243c6ed593596d06ca42e1892059ae6ffc",
    "fixCommitParentSHA1": "8b901b146a139c8e59983d81c1d4574ac7bc9ca5",
    "bugFilePath": "src/test/java/spark/BooksIntegrationTest.java",
    "fixPatch": "diff --git a/src/test/java/spark/BooksIntegrationTest.java b/src/test/java/spark/BooksIntegrationTest.java\nindex 00284df..529b715 100644\n--- a/src/test/java/spark/BooksIntegrationTest.java\n+++ b/src/test/java/spark/BooksIntegrationTest.java\n@@ -167,7 +167,7 @@\n     @Test\n     public void wontFindBook() {\n         try {\n-            doMethod(\"GET\", \"/books/\" + bookId, null);\n+            getResponse(\"GET\", \"/books/\" + bookId, null);\n         } catch (Exception e) {\n             if (e instanceof FileNotFoundException) {\n                 assertTrue(true);\n",
    "projectName": "perwendel.spark",
    "bugLineNum": 170,
    "bugNodeStartChar": 4642,
    "bugNodeLength": 41,
    "fixLineNum": 170,
    "fixNodeStartChar": 4642,
    "fixNodeLength": 44,
    "sourceBeforeFix": "doMethod(\"GET\",\"/books/\" + bookId,null)",
    "sourceAfterFix": "getResponse(\"GET\",\"/books/\" + bookId,null)"
  }
]