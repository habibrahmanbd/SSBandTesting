[
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "475a02420b9e21a0cac760e46efb83489025311d",
    "fixCommitParentSHA1": "cc7e3c8e99402415b4fb72af3c2018e67acb918a",
    "bugFilePath": "okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java",
    "fixPatch": "diff --git a/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java\nindex 0b883ee..7bae3cc 100644\n--- a/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java\n+++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java\n@@ -24,7 +24,7 @@\n   public final List<String> calls = new ArrayList<>();\n \n   @Override\n-  public boolean verify(String hostname, SSLSession session) {\n+  public synchronized boolean verify(String hostname, SSLSession session) {\n     calls.add(\"verify \" + hostname);\n     return true;\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 26,
    "bugNodeStartChar": 895,
    "bugNodeLength": 130,
    "fixLineNum": 26,
    "fixNodeStartChar": 895,
    "fixNodeLength": 143,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "8deaef670285a39f95e3798ca0db66ca7988c4e9",
    "fixCommitParentSHA1": "cc7e3c8e99402415b4fb72af3c2018e67acb918a",
    "bugFilePath": "okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java",
    "fixPatch": "diff --git a/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java\nindex 0b883ee..7bae3cc 100644\n--- a/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java\n+++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java\n@@ -24,7 +24,7 @@\n   public final List<String> calls = new ArrayList<>();\n \n   @Override\n-  public boolean verify(String hostname, SSLSession session) {\n+  public synchronized boolean verify(String hostname, SSLSession session) {\n     calls.add(\"verify \" + hostname);\n     return true;\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 26,
    "bugNodeStartChar": 895,
    "bugNodeLength": 130,
    "fixLineNum": 26,
    "fixNodeStartChar": 895,
    "fixNodeLength": 143,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "787e87270e6cf8aca4728e3c938e6ee2f8c11fca",
    "fixCommitParentSHA1": "ae76962f9e754f6eaddec4c8dbf1a628ac282a4f",
    "bugFilePath": "okhttp-tests/src/test/java/okhttp3/CookiesTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\nindex dc655c3..be8d238 100644\n--- a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\n+++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\n@@ -99,7 +99,7 @@\n     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n     // Converting to a fixed date can cause rounding!\n-    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(1.0));\n+    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(5.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 102,
    "bugNodeStartChar": 3955,
    "bugNodeLength": 11,
    "fixLineNum": 102,
    "fixNodeStartChar": 3955,
    "fixNodeLength": 11,
    "sourceBeforeFix": "offset(1.0)",
    "sourceAfterFix": "offset(5.0)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "43f93d014c6cf42847ba88fe67dc2d7237bbfb4b",
    "fixCommitParentSHA1": "2a5b52956d925d1124cd65b0825ecb6e6e6ddf53",
    "bugFilePath": "okhttp-tests/src/test/java/okhttp3/CookiesTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\nindex dc655c3..be8d238 100644\n--- a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\n+++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\n@@ -99,7 +99,7 @@\n     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n     // Converting to a fixed date can cause rounding!\n-    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(1.0));\n+    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(5.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 102,
    "bugNodeStartChar": 3955,
    "bugNodeLength": 11,
    "fixLineNum": 102,
    "fixNodeStartChar": 3955,
    "fixNodeLength": 11,
    "sourceBeforeFix": "offset(1.0)",
    "sourceAfterFix": "offset(5.0)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "e8b752a7a95cef40b21e8ecb1e37f3577fa70441",
    "fixCommitParentSHA1": "c273b3be385383842e44d25d6b7ca137ff6b1076",
    "bugFilePath": "okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java",
    "fixPatch": "diff --git a/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java\nindex 8709dc1..c659f58 100644\n--- a/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java\n+++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java\n@@ -400,8 +400,7 @@\n       }\n \n       try {\n-        X509Certificate certificate = generator.generateX509Certificate(\n-            signedByKeyPair.getPrivate());\n+        X509Certificate certificate = generator.generate(signedByKeyPair.getPrivate());\n         return new HeldCertificate(heldKeyPair, certificate);\n       } catch (GeneralSecurityException e) {\n         throw new AssertionError(e);\n",
    "projectName": "square.okhttp",
    "bugLineNum": 403,
    "bugNodeStartChar": 16451,
    "bugNodeLength": 76,
    "fixLineNum": 403,
    "fixNodeStartChar": 16451,
    "fixNodeLength": 48,
    "sourceBeforeFix": "generator.generateX509Certificate(signedByKeyPair.getPrivate())",
    "sourceAfterFix": "generator.generate(signedByKeyPair.getPrivate())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e8b752a7a95cef40b21e8ecb1e37f3577fa70441",
    "fixCommitParentSHA1": "c273b3be385383842e44d25d6b7ca137ff6b1076",
    "bugFilePath": "okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java",
    "fixPatch": "diff --git a/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java\nindex 8709dc1..c659f58 100644\n--- a/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java\n+++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java\n@@ -400,8 +400,7 @@\n       }\n \n       try {\n-        X509Certificate certificate = generator.generateX509Certificate(\n-            signedByKeyPair.getPrivate());\n+        X509Certificate certificate = generator.generate(signedByKeyPair.getPrivate());\n         return new HeldCertificate(heldKeyPair, certificate);\n       } catch (GeneralSecurityException e) {\n         throw new AssertionError(e);\n",
    "projectName": "square.okhttp",
    "bugLineNum": 403,
    "bugNodeStartChar": 16451,
    "bugNodeLength": 76,
    "fixLineNum": 403,
    "fixNodeStartChar": 16451,
    "fixNodeLength": 48,
    "sourceBeforeFix": "generator.generateX509Certificate(signedByKeyPair.getPrivate())",
    "sourceAfterFix": "generator.generate(signedByKeyPair.getPrivate())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "563d2f15ec99d7aef66736c71980e940471593c1",
    "fixCommitParentSHA1": "cb26e1cb238dc35b61dc1a6bfa1ddaf19f553287",
    "bugFilePath": "mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java",
    "fixPatch": "diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java\nindex 93d956e..4a5e490 100644\n--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java\n+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java\n@@ -317,7 +317,7 @@\n         break;\n       }\n     }\n-    assertEquals(512f, i, 10f); // Halfway +/- 1%\n+    assertEquals(512f, i, 20f); // Halfway +/- 2%\n   }\n \n   @Test public void disconnectResponseHalfway() throws IOException {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 320,
    "bugNodeStartChar": 12143,
    "bugNodeLength": 26,
    "fixLineNum": 320,
    "fixNodeStartChar": 12143,
    "fixNodeLength": 26,
    "sourceBeforeFix": "assertEquals(512f,i,10f)",
    "sourceAfterFix": "assertEquals(512f,i,20f)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "327de18c95ab972963190945a8b72163417d7406",
    "fixCommitParentSHA1": "cb26e1cb238dc35b61dc1a6bfa1ddaf19f553287",
    "bugFilePath": "mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java",
    "fixPatch": "diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java\nindex 93d956e..4a5e490 100644\n--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java\n+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java\n@@ -317,7 +317,7 @@\n         break;\n       }\n     }\n-    assertEquals(512f, i, 10f); // Halfway +/- 1%\n+    assertEquals(512f, i, 20f); // Halfway +/- 2%\n   }\n \n   @Test public void disconnectResponseHalfway() throws IOException {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 320,
    "bugNodeStartChar": 12143,
    "bugNodeLength": 26,
    "fixLineNum": 320,
    "fixNodeStartChar": 12143,
    "fixNodeLength": 26,
    "sourceBeforeFix": "assertEquals(512f,i,10f)",
    "sourceAfterFix": "assertEquals(512f,i,20f)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "7e040c094576463ec6324d012cbad8768ce3d767",
    "fixCommitParentSHA1": "b926a030c628e9014ef2ab6b63515f2f3df0fa20",
    "bugFilePath": "samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java",
    "fixPatch": "diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java\nindex a1fdbd0..1366a82 100644\n--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java\n+++ b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java\n@@ -87,7 +87,7 @@\n     final long callId;\n     final long callStartNanos;\n \n-    public PrintingEventListener(long callId, long callStartNanos) {\n+    PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 90,
    "bugNodeStartChar": 2947,
    "bugNodeLength": 142,
    "fixLineNum": 90,
    "fixNodeStartChar": 2947,
    "fixNodeLength": 135,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "d6fd0d3832907ff36789b89450df09320081fc66",
    "fixCommitParentSHA1": "b926a030c628e9014ef2ab6b63515f2f3df0fa20",
    "bugFilePath": "samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java",
    "fixPatch": "diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java\nindex a1fdbd0..1366a82 100644\n--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java\n+++ b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java\n@@ -87,7 +87,7 @@\n     final long callId;\n     final long callStartNanos;\n \n-    public PrintingEventListener(long callId, long callStartNanos) {\n+    PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 90,
    "bugNodeStartChar": 2947,
    "bugNodeLength": 142,
    "fixLineNum": 90,
    "fixNodeStartChar": 2947,
    "fixNodeLength": 135,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java",
    "fixPatch": "diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java\nindex a5c632f..2fffd7c 100644\n--- a/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java\n+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java\n@@ -55,7 +55,7 @@\n   class ApacheHttpClientRequest implements Runnable {\n     private final HttpUrl url;\n \n-    public ApacheHttpClientRequest(HttpUrl url) {\n+    ApacheHttpClientRequest(HttpUrl url) {\n       this.url = url;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 58,
    "bugNodeStartChar": 2058,
    "bugNodeLength": 73,
    "fixLineNum": 58,
    "fixNodeStartChar": 2058,
    "fixNodeLength": 66,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java",
    "fixPatch": "diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java\nindex 01e6f6e..cd7286d 100644\n--- a/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java\n+++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java\n@@ -137,7 +137,7 @@\n     int total;\n     long start;\n \n-    public HttpChannel(SocketChannel channel) {\n+    HttpChannel(SocketChannel channel) {\n       this.channel = channel;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 140,
    "bugNodeStartChar": 5124,
    "bugNodeLength": 79,
    "fixLineNum": 140,
    "fixNodeStartChar": 5124,
    "fixNodeLength": 72,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java",
    "fixPatch": "diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java\nindex 7c90e5e..7460aa6 100644\n--- a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java\n+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java\n@@ -61,7 +61,7 @@\n   class OkHttpRequest implements Runnable {\n     private final Call call;\n \n-    public OkHttpRequest(Call call) {\n+    OkHttpRequest(Call call) {\n       this.call = call;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 64,
    "bugNodeStartChar": 2033,
    "bugNodeLength": 63,
    "fixLineNum": 64,
    "fixNodeStartChar": 2033,
    "fixNodeLength": 56,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java",
    "fixPatch": "diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java\nindex f75d160..560534c 100644\n--- a/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java\n+++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java\n@@ -52,7 +52,7 @@\n   static class UrlConnectionRequest implements Runnable {\n     private final HttpUrl url;\n \n-    public UrlConnectionRequest(HttpUrl url) {\n+    UrlConnectionRequest(HttpUrl url) {\n       this.url = url;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 55,
    "bugNodeStartChar": 1862,
    "bugNodeLength": 70,
    "fixLineNum": 55,
    "fixNodeStartChar": 1862,
    "fixNodeLength": 63,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java",
    "fixPatch": "diff --git a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java\nindex 350d549..1dec85c 100644\n--- a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java\n+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java\n@@ -568,7 +568,7 @@\n     private final Request request;\n     private final Response response;\n \n-    public CacheHttpURLConnection(Response response) {\n+    CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;\n@@ -835,7 +835,7 @@\n   private static final class CacheHttpsURLConnection extends DelegatingHttpsURLConnection {\n     private final CacheHttpURLConnection delegate;\n \n-    public CacheHttpsURLConnection(CacheHttpURLConnection delegate) {\n+    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {\n       super(delegate);\n       this.delegate = delegate;\n     }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 571,
    "bugNodeStartChar": 22024,
    "bugNodeLength": 451,
    "fixLineNum": 571,
    "fixNodeStartChar": 22024,
    "fixNodeLength": 444,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java",
    "fixPatch": "diff --git a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java\nindex 350d549..1dec85c 100644\n--- a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java\n+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java\n@@ -568,7 +568,7 @@\n     private final Request request;\n     private final Response response;\n \n-    public CacheHttpURLConnection(Response response) {\n+    CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;\n@@ -835,7 +835,7 @@\n   private static final class CacheHttpsURLConnection extends DelegatingHttpsURLConnection {\n     private final CacheHttpURLConnection delegate;\n \n-    public CacheHttpsURLConnection(CacheHttpURLConnection delegate) {\n+    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {\n       super(delegate);\n       this.delegate = delegate;\n     }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 838,
    "bugNodeStartChar": 29019,
    "bugNodeLength": 126,
    "fixLineNum": 838,
    "fixNodeStartChar": 29019,
    "fixNodeLength": 119,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java",
    "fixPatch": "diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java\nindex 9dd7cfd..a051bf2 100644\n--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java\n+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java\n@@ -41,7 +41,7 @@\n abstract class DelegatingHttpsURLConnection extends HttpsURLConnection {\n   private final HttpURLConnection delegate;\n \n-  public DelegatingHttpsURLConnection(HttpURLConnection delegate) {\n+  DelegatingHttpsURLConnection(HttpURLConnection delegate) {\n     super(delegate.getURL());\n     this.delegate = delegate;\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 44,
    "bugNodeStartChar": 1671,
    "bugNodeLength": 129,
    "fixLineNum": 44,
    "fixNodeStartChar": 1671,
    "fixNodeLength": 122,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java",
    "fixPatch": "diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java\nindex 461b1f1..344a61e 100644\n--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java\n+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java\n@@ -568,7 +568,7 @@\n       }\n     };\n \n-    public UnexpectedException(Throwable cause) {\n+    UnexpectedException(Throwable cause) {\n       super(cause);\n     }\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 571,
    "bugNodeStartChar": 19229,
    "bugNodeLength": 71,
    "fixLineNum": 571,
    "fixNodeStartChar": 19229,
    "fixNodeLength": 64,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/Cache.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java\nindex 8eb4fb0..a37bc91 100644\n--- a/okhttp/src/main/java/okhttp3/Cache.java\n+++ b/okhttp/src/main/java/okhttp3/Cache.java\n@@ -432,7 +432,7 @@\n     private Sink body;\n     boolean done;\n \n-    public CacheRequestImpl(final DiskLruCache.Editor editor) {\n+    CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {\n@@ -536,7 +536,7 @@\n      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n-    public Entry(Source in) throws IOException {\n+    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();\n@@ -590,7 +590,7 @@\n       }\n     }\n \n-    public Entry(Response response) {\n+    Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();\n@@ -735,7 +735,7 @@\n     private final String contentType;\n     private final String contentLength;\n \n-    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n+    CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 435,
    "bugNodeStartChar": 14104,
    "bugNodeLength": 490,
    "fixLineNum": 435,
    "fixNodeStartChar": 14104,
    "fixNodeLength": 483,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/Cache.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java\nindex 8eb4fb0..a37bc91 100644\n--- a/okhttp/src/main/java/okhttp3/Cache.java\n+++ b/okhttp/src/main/java/okhttp3/Cache.java\n@@ -432,7 +432,7 @@\n     private Sink body;\n     boolean done;\n \n-    public CacheRequestImpl(final DiskLruCache.Editor editor) {\n+    CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {\n@@ -536,7 +536,7 @@\n      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n-    public Entry(Source in) throws IOException {\n+    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();\n@@ -590,7 +590,7 @@\n       }\n     }\n \n-    public Entry(Response response) {\n+    Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();\n@@ -735,7 +735,7 @@\n     private final String contentType;\n     private final String contentLength;\n \n-    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n+    CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 491,
    "bugNodeStartChar": 15737,
    "bugNodeLength": 4235,
    "fixLineNum": 491,
    "fixNodeStartChar": 15737,
    "fixNodeLength": 4228,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/Cache.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java\nindex 8eb4fb0..a37bc91 100644\n--- a/okhttp/src/main/java/okhttp3/Cache.java\n+++ b/okhttp/src/main/java/okhttp3/Cache.java\n@@ -432,7 +432,7 @@\n     private Sink body;\n     boolean done;\n \n-    public CacheRequestImpl(final DiskLruCache.Editor editor) {\n+    CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {\n@@ -536,7 +536,7 @@\n      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n-    public Entry(Source in) throws IOException {\n+    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();\n@@ -590,7 +590,7 @@\n       }\n     }\n \n-    public Entry(Response response) {\n+    Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();\n@@ -735,7 +735,7 @@\n     private final String contentType;\n     private final String contentLength;\n \n-    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n+    CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 593,
    "bugNodeStartChar": 19978,
    "bugNodeLength": 558,
    "fixLineNum": 593,
    "fixNodeStartChar": 19978,
    "fixNodeLength": 551,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/Cache.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java\nindex 8eb4fb0..a37bc91 100644\n--- a/okhttp/src/main/java/okhttp3/Cache.java\n+++ b/okhttp/src/main/java/okhttp3/Cache.java\n@@ -432,7 +432,7 @@\n     private Sink body;\n     boolean done;\n \n-    public CacheRequestImpl(final DiskLruCache.Editor editor) {\n+    CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {\n@@ -536,7 +536,7 @@\n      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null\n      * array. The last line is optional. If present, it contains the TLS version.\n      */\n-    public Entry(Source in) throws IOException {\n+    Entry(Source in) throws IOException {\n       try {\n         BufferedSource source = Okio.buffer(in);\n         url = source.readUtf8LineStrict();\n@@ -590,7 +590,7 @@\n       }\n     }\n \n-    public Entry(Response response) {\n+    Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();\n@@ -735,7 +735,7 @@\n     private final String contentType;\n     private final String contentLength;\n \n-    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n+    CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 738,
    "bugNodeStartChar": 25348,
    "bugNodeLength": 481,
    "fixLineNum": 738,
    "fixNodeStartChar": 25348,
    "fixNodeLength": 474,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java b/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java\nindex b10fddb..561a305 100644\n--- a/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java\n+++ b/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java\n@@ -24,7 +24,7 @@\n class FaultHidingSink extends ForwardingSink {\n   private boolean hasErrors;\n \n-  public FaultHidingSink(Sink delegate) {\n+  FaultHidingSink(Sink delegate) {\n     super(delegate);\n   }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 27,
    "bugNodeStartChar": 888,
    "bugNodeLength": 64,
    "fixLineNum": 27,
    "fixNodeStartChar": 888,
    "fixNodeLength": 57,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java b/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java\nindex 7091422..b1326cd 100644\n--- a/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java\n+++ b/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java\n@@ -41,7 +41,7 @@\n   private final ByteBuffer byteBuffer = ByteBuffer.wrap(byteArray);\n   private final FileChannel fileChannel;\n \n-  public FileOperator(FileChannel fileChannel) {\n+  FileOperator(FileChannel fileChannel) {\n     this.fileChannel = fileChannel;\n   }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 44,
    "bugNodeStartChar": 1649,
    "bugNodeLength": 86,
    "fixLineNum": 44,
    "fixNodeStartChar": 1649,
    "fixNodeLength": 79,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java\nindex 625c173..4be3a32 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java\n@@ -369,7 +369,7 @@\n   private class FixedLengthSource extends AbstractSource {\n     private long bytesRemaining;\n \n-    public FixedLengthSource(long length) throws IOException {\n+    FixedLengthSource(long length) throws IOException {\n       bytesRemaining = length;\n       if (bytesRemaining == 0) {\n         endOfInput(true);\n",
    "projectName": "square.okhttp",
    "bugLineNum": 372,
    "bugNodeStartChar": 13530,
    "bugNodeLength": 162,
    "fixLineNum": 372,
    "fixNodeStartChar": 13530,
    "fixNodeLength": 155,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java\nindex 61680d5..0ed8be7 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java\n@@ -190,7 +190,7 @@\n   }\n \n   class StreamFinishingSource extends ForwardingSource {\n-    public StreamFinishingSource(Source delegate) {\n+    StreamFinishingSource(Source delegate) {\n       super(delegate);\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 193,
    "bugNodeStartChar": 7338,
    "bugNodeLength": 76,
    "fixLineNum": 193,
    "fixNodeStartChar": 7338,
    "fixNodeLength": 69,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java\nindex c6fd4cc..2b093b3 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java\n@@ -67,7 +67,7 @@\n   final Hpack.Reader hpackReader;\n \n   /** Creates a frame reader with max header table size of 4096. */\n-  public Http2Reader(BufferedSource source, boolean client) {\n+  Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);\n@@ -356,7 +356,7 @@\n     int left;\n     short padding;\n \n-    public ContinuationSource(BufferedSource source) {\n+    ContinuationSource(BufferedSource source) {\n       this.source = source;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 69,
    "bugNodeStartChar": 2746,
    "bugNodeLength": 305,
    "fixLineNum": 69,
    "fixNodeStartChar": 2746,
    "fixNodeLength": 298,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java\nindex c6fd4cc..2b093b3 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java\n@@ -67,7 +67,7 @@\n   final Hpack.Reader hpackReader;\n \n   /** Creates a frame reader with max header table size of 4096. */\n-  public Http2Reader(BufferedSource source, boolean client) {\n+  Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);\n@@ -356,7 +356,7 @@\n     int left;\n     short padding;\n \n-    public ContinuationSource(BufferedSource source) {\n+    ContinuationSource(BufferedSource source) {\n       this.source = source;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 359,
    "bugNodeStartChar": 13873,
    "bugNodeLength": 84,
    "fixLineNum": 359,
    "fixNodeStartChar": 13873,
    "fixNodeLength": 77,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java\nindex 7490b09..5ef6bb9 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java\n@@ -54,7 +54,7 @@\n \n   final Hpack.Writer hpackWriter;\n \n-  public Http2Writer(BufferedSink sink, boolean client) {\n+  Http2Writer(BufferedSink sink, boolean client) {\n     this.sink = sink;\n     this.client = client;\n     this.hpackBuffer = new Buffer();\n",
    "projectName": "square.okhttp",
    "bugLineNum": 57,
    "bugNodeStartChar": 2258,
    "bugNodeLength": 246,
    "fixLineNum": 57,
    "fixNodeStartChar": 2258,
    "fixNodeLength": 239,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java\nindex c2cce4b..3d7c2b3 100644\n--- a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java\n+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java\n@@ -47,7 +47,7 @@\n \n   private final CloseGuard closeGuard = CloseGuard.get();\n \n-  public AndroidPlatform(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,\n+  AndroidPlatform(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,\n       OptionalMethod<Socket> setHostname, OptionalMethod<Socket> getAlpnSelectedProtocol,\n       OptionalMethod<Socket> setAlpnProtocols) {\n     this.sslParametersClass = sslParametersClass;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 50,
    "bugNodeStartChar": 1740,
    "bugNodeLength": 485,
    "fixLineNum": 50,
    "fixNodeStartChar": 1740,
    "fixNodeLength": 478,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java\nindex 683e5c1..19f444d 100644\n--- a/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java\n+++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java\n@@ -31,7 +31,7 @@\n   final Method setProtocolMethod;\n   final Method getProtocolMethod;\n \n-  public Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {\n+  Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {\n     this.setProtocolMethod = setProtocolMethod;\n     this.getProtocolMethod = getProtocolMethod;\n   }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 34,
    "bugNodeStartChar": 1055,
    "bugNodeLength": 173,
    "fixLineNum": 34,
    "fixNodeStartChar": 1055,
    "fixNodeLength": 166,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java\nindex 6821bdf..5dd11ee 100644\n--- a/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java\n+++ b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java\n@@ -34,7 +34,7 @@\n   private final Class<?> clientProviderClass;\n   private final Class<?> serverProviderClass;\n \n-  public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,\n+  JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,\n       Class<?> clientProviderClass, Class<?> serverProviderClass) {\n     this.putMethod = putMethod;\n     this.getMethod = getMethod;\n@@ -110,7 +110,7 @@\n     /** The protocol the server selected. */\n     String selected;\n \n-    public JettyNegoProvider(List<String> protocols) {\n+    JettyNegoProvider(List<String> protocols) {\n       this.protocols = protocols;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 37,
    "bugNodeStartChar": 1263,
    "bugNodeLength": 366,
    "fixLineNum": 37,
    "fixNodeStartChar": 1263,
    "fixNodeLength": 359,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java\nindex 6821bdf..5dd11ee 100644\n--- a/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java\n+++ b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java\n@@ -34,7 +34,7 @@\n   private final Class<?> clientProviderClass;\n   private final Class<?> serverProviderClass;\n \n-  public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,\n+  JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,\n       Class<?> clientProviderClass, Class<?> serverProviderClass) {\n     this.putMethod = putMethod;\n     this.getMethod = getMethod;\n@@ -110,7 +110,7 @@\n     /** The protocol the server selected. */\n     String selected;\n \n-    public JettyNegoProvider(List<String> protocols) {\n+    JettyNegoProvider(List<String> protocols) {\n       this.protocols = protocols;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 113,
    "bugNodeStartChar": 4395,
    "bugNodeLength": 90,
    "fixLineNum": 113,
    "fixNodeStartChar": 4395,
    "fixNodeLength": 83,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java b/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java\nindex b7b1717..c26132f 100644\n--- a/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java\n+++ b/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java\n@@ -42,7 +42,7 @@\n    * @param methodName the name of the method\n    * @param methodParams the method parameter types\n    */\n-  public OptionalMethod(Class<?> returnType, String methodName, Class... methodParams) {\n+  OptionalMethod(Class<?> returnType, String methodName, Class... methodParams) {\n     this.returnType = returnType;\n     this.methodName = methodName;\n     this.methodParams = methodParams;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 38,
    "bugNodeStartChar": 1380,
    "bugNodeLength": 423,
    "fixLineNum": 38,
    "fixNodeStartChar": 1380,
    "fixNodeLength": 416,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java b/okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java\nindex 616bca5..cae8dfa 100644\n--- a/okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java\n+++ b/okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java\n@@ -35,7 +35,7 @@\n   /** Distinguished name characters. */\n   private char[] chars;\n \n-  public DistinguishedNameParser(X500Principal principal) {\n+  DistinguishedNameParser(X500Principal principal) {\n     // RFC2253 is used to ensure we get attributes in the reverse\n     // order of the underlying ASN.1 encoding, so that the most\n     // significant values of repeated attributes occur first.\n",
    "projectName": "square.okhttp",
    "bugLineNum": 38,
    "bugNodeStartChar": 1369,
    "bugNodeLength": 345,
    "fixLineNum": 38,
    "fixNodeStartChar": 1369,
    "fixNodeLength": 338,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/tls/TrustRootIndex.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/tls/TrustRootIndex.java b/okhttp/src/main/java/okhttp3/internal/tls/TrustRootIndex.java\nindex e42ad1b..b677203 100644\n--- a/okhttp/src/main/java/okhttp3/internal/tls/TrustRootIndex.java\n+++ b/okhttp/src/main/java/okhttp3/internal/tls/TrustRootIndex.java\n@@ -103,7 +103,7 @@\n   static final class BasicTrustRootIndex extends TrustRootIndex {\n     private final Map<X500Principal, Set<X509Certificate>> subjectToCaCerts;\n \n-    public BasicTrustRootIndex(X509Certificate... caCerts) {\n+    BasicTrustRootIndex(X509Certificate... caCerts) {\n       subjectToCaCerts = new LinkedHashMap<>();\n       for (X509Certificate caCert : caCerts) {\n         X500Principal subject = caCert.getSubjectX500Principal();\n",
    "projectName": "square.okhttp",
    "bugLineNum": 106,
    "bugNodeStartChar": 4147,
    "bugNodeLength": 500,
    "fixLineNum": 106,
    "fixNodeStartChar": 4147,
    "fixNodeLength": 493,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java",
    "fixPatch": "diff --git a/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java\nindex a3ea23c..b568bdf 100644\n--- a/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java\n+++ b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java\n@@ -109,7 +109,7 @@\n   static class DelegatingSSLSocketFactory extends SSLSocketFactory {\n     protected final SSLSocketFactory delegate;\n \n-    public DelegatingSSLSocketFactory(SSLSocketFactory delegate) {\n+    DelegatingSSLSocketFactory(SSLSocketFactory delegate) {\n       this.delegate = delegate;\n     }\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 112,
    "bugNodeStartChar": 4568,
    "bugNodeLength": 100,
    "fixLineNum": 112,
    "fixNodeStartChar": 4568,
    "fixNodeLength": 93,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427",
    "fixCommitParentSHA1": "537c7bc57c98711fdd41d30752e54af941d95538",
    "bugFilePath": "samples/guide/src/main/java/okhttp3/recipes/Progress.java",
    "fixPatch": "diff --git a/samples/guide/src/main/java/okhttp3/recipes/Progress.java b/samples/guide/src/main/java/okhttp3/recipes/Progress.java\nindex f04de79..3056690 100644\n--- a/samples/guide/src/main/java/okhttp3/recipes/Progress.java\n+++ b/samples/guide/src/main/java/okhttp3/recipes/Progress.java\n@@ -72,7 +72,7 @@\n     private final ProgressListener progressListener;\n     private BufferedSource bufferedSource;\n \n-    public ProgressResponseBody(ResponseBody responseBody, ProgressListener progressListener) {\n+    ProgressResponseBody(ResponseBody responseBody, ProgressListener progressListener) {\n       this.responseBody = responseBody;\n       this.progressListener = progressListener;\n     }\n",
    "projectName": "square.okhttp",
    "bugLineNum": 75,
    "bugNodeStartChar": 2479,
    "bugNodeLength": 185,
    "fixLineNum": 75,
    "fixNodeStartChar": 2479,
    "fixNodeLength": 178,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "da568d0604180e2144444c4ee348324f348bde75",
    "fixCommitParentSHA1": "8a1d95f451995de6fdeae1b6c760328884e27507",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java\nindex 7b7610d..c304398 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java\n@@ -301,7 +301,7 @@\n   }\n \n   void writeSynResetLater(final int streamId, final ErrorCode errorCode) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n       @Override public void execute() {\n         try {\n           writeSynReset(streamId, errorCode);\n",
    "projectName": "square.okhttp",
    "bugLineNum": 304,
    "bugNodeStartChar": 11214,
    "bugNodeLength": 243,
    "fixLineNum": 304,
    "fixNodeStartChar": 11214,
    "fixNodeLength": 244,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s stream %d\",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s stream %d\",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "da568d0604180e2144444c4ee348324f348bde75",
    "fixCommitParentSHA1": "8a1d95f451995de6fdeae1b6c760328884e27507",
    "bugFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java\nindex 7b7610d..c304398 100644\n--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java\n+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java\n@@ -301,7 +301,7 @@\n   }\n \n   void writeSynResetLater(final int streamId, final ErrorCode errorCode) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n       @Override public void execute() {\n         try {\n           writeSynReset(streamId, errorCode);\n",
    "projectName": "square.okhttp",
    "bugLineNum": 304,
    "bugNodeStartChar": 11214,
    "bugNodeLength": 243,
    "fixLineNum": 304,
    "fixNodeStartChar": 11214,
    "fixNodeLength": 244,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s stream %d\",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s stream %d\",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "60b577fecc32a7ee2eb252a69163e6f145e54c83",
    "fixCommitParentSHA1": "8510d646bdb97321dcc7206d8e42b8179810396d",
    "bugFilePath": "okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java\nindex 9fecda9..4a32ab7 100644\n--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java\n+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java\n@@ -2533,9 +2533,8 @@\n    * https://code.google.com/p/android/issues/detail?id=41576\n    */\n   @Test public void sameConnectionRedirectAndReuse() throws Exception {\n-    // TODO(jwilson): this behavior shouldn't rely on having another IP address to attempt.\n     urlFactory.setClient(urlFactory.client().newBuilder()\n-        .dns(new DoubleInetAddressDns())\n+        .dns(new SingleInetAddressDns())\n         .build());\n     server.enqueue(new MockResponse()\n         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)\n",
    "projectName": "square.okhttp",
    "bugLineNum": 2538,
    "bugNodeStartChar": 102679,
    "bugNodeLength": 26,
    "fixLineNum": 2538,
    "fixNodeStartChar": 102679,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new DoubleInetAddressDns()",
    "sourceAfterFix": "new SingleInetAddressDns()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bf40d52edbb88d5afaa35af24837e3b72ac84eab",
    "fixCommitParentSHA1": "8510d646bdb97321dcc7206d8e42b8179810396d",
    "bugFilePath": "okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java\nindex 9fecda9..4a32ab7 100644\n--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java\n+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java\n@@ -2533,9 +2533,8 @@\n    * https://code.google.com/p/android/issues/detail?id=41576\n    */\n   @Test public void sameConnectionRedirectAndReuse() throws Exception {\n-    // TODO(jwilson): this behavior shouldn't rely on having another IP address to attempt.\n     urlFactory.setClient(urlFactory.client().newBuilder()\n-        .dns(new DoubleInetAddressDns())\n+        .dns(new SingleInetAddressDns())\n         .build());\n     server.enqueue(new MockResponse()\n         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)\n",
    "projectName": "square.okhttp",
    "bugLineNum": 2538,
    "bugNodeStartChar": 102679,
    "bugNodeLength": 26,
    "fixLineNum": 2538,
    "fixNodeStartChar": 102679,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new DoubleInetAddressDns()",
    "sourceAfterFix": "new SingleInetAddressDns()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "df73a7e98e8450813325d28458b6bdd4b8b11791",
    "fixCommitParentSHA1": "5f40b814ea77a457f55bbe4a9c1c077b790c0916",
    "bugFilePath": "okhttp-tests/src/test/java/okhttp3/SocksProxy.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/SocksProxy.java b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java\nindex 9c1b5a8..69ce1fa 100644\n--- a/okhttp-tests/src/test/java/okhttp3/SocksProxy.java\n+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java\n@@ -160,7 +160,7 @@\n         String domainName = fromSource.readUtf8(domainNameLength);\n         // Resolve HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS to localhost.\n         toAddress = domainName.equalsIgnoreCase(HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS)\n-            ? InetAddress.getLoopbackAddress()\n+            ? InetAddress.getByName(\"localhost\")\n             : InetAddress.getByName(domainName);\n         break;\n \n",
    "projectName": "square.okhttp",
    "bugLineNum": 163,
    "bugNodeStartChar": 5833,
    "bugNodeLength": 32,
    "fixLineNum": 163,
    "fixNodeStartChar": 5833,
    "fixNodeLength": 34,
    "sourceBeforeFix": "InetAddress.getLoopbackAddress()",
    "sourceAfterFix": "InetAddress.getByName(\"localhost\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "45e44a390cd287a141dc0f446038169608294879",
    "fixCommitParentSHA1": "b27c5921c8543823651daed3d4bb1ca6d40028e7",
    "bugFilePath": "okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java\nindex 4c9275b..777f3bd 100644\n--- a/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java\n+++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java\n@@ -50,7 +50,7 @@\n \n public final class DiskLruCacheTest {\n   @Rule public final TemporaryFolder tempDir = new TemporaryFolder();\n-  @Rule public final Timeout timeout = new Timeout(30 * 1000);\n+  @Rule public final Timeout timeout = new Timeout(60 * 1000);\n \n   private final FaultyFileSystem fileSystem = new FaultyFileSystem(FileSystem.SYSTEM);\n   private final int appVersion = 100;\n",
    "projectName": "square.okhttp",
    "bugLineNum": 53,
    "bugNodeStartChar": 1874,
    "bugNodeLength": 9,
    "fixLineNum": 53,
    "fixNodeStartChar": 1874,
    "fixNodeLength": 9,
    "sourceBeforeFix": "30 * 1000",
    "sourceAfterFix": "60 * 1000"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6ebe652ffe047767ce3f42aa6dd15b2a6d4a6683",
    "fixCommitParentSHA1": "cc10ba1afe584c6ea8a825afd6da15499f9f43a0",
    "bugFilePath": "okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java",
    "fixPatch": "diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\nindex 602a2c8..d307a33 100644\n--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n@@ -49,7 +49,7 @@\n     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n-      if (\"Content-Type\".equals(name)) {\n+      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());\n",
    "projectName": "square.okhttp",
    "bugLineNum": 52,
    "bugNodeStartChar": 1970,
    "bugNodeLength": 27,
    "fixLineNum": 52,
    "fixNodeStartChar": 1970,
    "fixNodeLength": 37,
    "sourceBeforeFix": "\"Content-Type\".equals(name)",
    "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6ebe652ffe047767ce3f42aa6dd15b2a6d4a6683",
    "fixCommitParentSHA1": "cc10ba1afe584c6ea8a825afd6da15499f9f43a0",
    "bugFilePath": "okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java",
    "fixPatch": "diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\nindex 602a2c8..d307a33 100644\n--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n@@ -49,7 +49,7 @@\n     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n-      if (\"Content-Type\".equals(name)) {\n+      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());\n",
    "projectName": "square.okhttp",
    "bugLineNum": 52,
    "bugNodeStartChar": 1970,
    "bugNodeLength": 27,
    "fixLineNum": 52,
    "fixNodeStartChar": 1970,
    "fixNodeLength": 37,
    "sourceBeforeFix": "\"Content-Type\".equals(name)",
    "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "8bce6897f9f7e0b16508c462665e4f9d26d92e39",
    "fixCommitParentSHA1": "cc10ba1afe584c6ea8a825afd6da15499f9f43a0",
    "bugFilePath": "okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java",
    "fixPatch": "diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\nindex 602a2c8..d307a33 100644\n--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n@@ -49,7 +49,7 @@\n     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n-      if (\"Content-Type\".equals(name)) {\n+      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());\n",
    "projectName": "square.okhttp",
    "bugLineNum": 52,
    "bugNodeStartChar": 1970,
    "bugNodeLength": 27,
    "fixLineNum": 52,
    "fixNodeStartChar": 1970,
    "fixNodeLength": 37,
    "sourceBeforeFix": "\"Content-Type\".equals(name)",
    "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8bce6897f9f7e0b16508c462665e4f9d26d92e39",
    "fixCommitParentSHA1": "cc10ba1afe584c6ea8a825afd6da15499f9f43a0",
    "bugFilePath": "okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java",
    "fixPatch": "diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\nindex 602a2c8..d307a33 100644\n--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java\n@@ -49,7 +49,7 @@\n     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n-      if (\"Content-Type\".equals(name)) {\n+      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());\n",
    "projectName": "square.okhttp",
    "bugLineNum": 52,
    "bugNodeStartChar": 1970,
    "bugNodeLength": 27,
    "fixLineNum": 52,
    "fixNodeStartChar": 1970,
    "fixNodeLength": 37,
    "sourceBeforeFix": "\"Content-Type\".equals(name)",
    "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 355,
    "bugNodeStartChar": 12757,
    "bugNodeLength": 282,
    "fixLineNum": 355,
    "fixNodeStartChar": 12757,
    "fixNodeLength": 283,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 355,
    "bugNodeStartChar": 12757,
    "bugNodeLength": 282,
    "fixLineNum": 355,
    "fixNodeStartChar": 12757,
    "fixNodeLength": 283,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 387,
    "bugNodeStartChar": 13718,
    "bugNodeLength": 273,
    "fixLineNum": 387,
    "fixNodeStartChar": 13718,
    "fixNodeLength": 274,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 387,
    "bugNodeStartChar": 13718,
    "bugNodeLength": 273,
    "fixLineNum": 387,
    "fixNodeStartChar": 13718,
    "fixNodeLength": 274,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 639,
    "bugNodeStartChar": 21760,
    "bugNodeLength": 318,
    "fixLineNum": 639,
    "fixNodeStartChar": 21760,
    "fixNodeLength": 319,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 639,
    "bugNodeStartChar": 21760,
    "bugNodeLength": 318,
    "fixLineNum": 639,
    "fixNodeStartChar": 21760,
    "fixNodeLength": 319,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s stream %d\",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 707,
    "bugNodeStartChar": 24145,
    "bugNodeLength": 253,
    "fixLineNum": 707,
    "fixNodeStartChar": 24145,
    "fixNodeLength": 254,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 707,
    "bugNodeStartChar": 24145,
    "bugNodeLength": 253,
    "fixLineNum": 707,
    "fixNodeStartChar": 24145,
    "fixNodeLength": 254,
    "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 801,
    "bugNodeStartChar": 27324,
    "bugNodeLength": 497,
    "fixLineNum": 801,
    "fixNodeStartChar": 27324,
    "fixNodeLength": 498,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 801,
    "bugNodeStartChar": 27324,
    "bugNodeLength": 497,
    "fixLineNum": 801,
    "fixNodeStartChar": 27324,
    "fixNodeLength": 498,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 819,
    "bugNodeStartChar": 27953,
    "bugNodeLength": 533,
    "fixLineNum": 819,
    "fixNodeStartChar": 27953,
    "fixNodeLength": 534,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 819,
    "bugNodeStartChar": 27953,
    "bugNodeLength": 533,
    "fixLineNum": 819,
    "fixNodeStartChar": 27953,
    "fixNodeLength": 534,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 845,
    "bugNodeStartChar": 29074,
    "bugNodeLength": 532,
    "fixLineNum": 845,
    "fixNodeStartChar": 29074,
    "fixNodeLength": 533,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 845,
    "bugNodeStartChar": 29074,
    "bugNodeLength": 532,
    "fixLineNum": 845,
    "fixNodeStartChar": 29074,
    "fixNodeLength": 533,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 862,
    "bugNodeStartChar": 29696,
    "bugNodeLength": 296,
    "fixLineNum": 862,
    "fixNodeStartChar": 29696,
    "fixNodeLength": 297,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
    "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
    "projectName": "square.okhttp",
    "bugLineNum": 862,
    "bugNodeStartChar": 29696,
    "bugNodeLength": 296,
    "fixLineNum": 862,
    "fixNodeStartChar": 29696,
    "fixNodeLength": 297,
    "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )",
    "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0365cf723f8073528dc2c379b2c6f8fb9e6669d3",
    "fixCommitParentSHA1": "b9efb8bf887ddc2a43d9fa2c90c7462cca9a24bb",
    "bugFilePath": "okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java\nindex 16fe0f6..6a45924 100644\n--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java\n+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java\n@@ -2506,7 +2506,7 @@\n \n   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n-    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END));\n+    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();\n",
    "projectName": "square.okhttp",
    "bugLineNum": 2509,
    "bugNodeStartChar": 99048,
    "bugNodeLength": 70,
    "fixLineNum": 2509,
    "fixNodeStartChar": 99048,
    "fixNodeLength": 66,
    "sourceBeforeFix": "new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END)",
    "sourceAfterFix": "new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "af812cbe0fb290ac7b825b4203f2079b753cb085",
    "fixCommitParentSHA1": "853a579b1a4f09bc96b6252c00c944acbbe86911",
    "bugFilePath": "okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java",
    "fixPatch": "diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java\nindex cecbdb8..5095fd3 100644\n--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java\n+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java\n@@ -2503,7 +2503,7 @@\n \n   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n-    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END));\n+    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();\n",
    "projectName": "square.okhttp",
    "bugLineNum": 2506,
    "bugNodeStartChar": 99108,
    "bugNodeLength": 70,
    "fixLineNum": 2506,
    "fixNodeStartChar": 99108,
    "fixNodeLength": 66,
    "sourceBeforeFix": "new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END)",
    "sourceAfterFix": "new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "43c55e393b993027dbd23eecd9c20656c75a3d66",
    "fixCommitParentSHA1": "ffebb801bdac9eb9a50a43e0981e414dc3509ac7",
    "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java",
    "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java b/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java\nindex e111f22..0b10f2a 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java\n@@ -53,7 +53,7 @@\n   private static final int ALT_DNS_NAME = 2;\n   private static final int ALT_IPA_NAME = 7;\n \n-  public final boolean verify(String host, SSLSession session) {\n+  public boolean verify(String host, SSLSession session) {\n     try {\n       Certificate[] certificates = session.getPeerCertificates();\n       return verify(host, (X509Certificate) certificates[0]);\n",
    "projectName": "square.okhttp",
    "bugLineNum": 56,
    "bugNodeStartChar": 2288,
    "bugNodeLength": 261,
    "fixLineNum": 56,
    "fixNodeStartChar": 2288,
    "fixNodeLength": 255,
    "sourceBeforeFix": "17",
    "sourceAfterFix": "1"
  }
]