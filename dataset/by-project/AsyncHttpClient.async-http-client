[{"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java b/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java\nindex d2a8554..552a132 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java\n@@ -26,7 +26,7 @@\n   private final String secret;\n   private final String percentEncodedKey;\n \n-  ConsumerKey(String key, String secret) {\n+  public ConsumerKey(String key, String secret) {\n     this.key = key;\n     this.secret = secret;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);\n@@ -40,7 +40,7 @@\n     return secret;\n   }\n \n-  String getPercentEncodedKey() {\n+  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 29, "bugNodeStartChar": 886, "bugNodeLength": 166, "fixLineNum": 29, "fixNodeStartChar": 886, "fixNodeLength": 173, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java b/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java\nindex d2a8554..552a132 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java\n@@ -26,7 +26,7 @@\n   private final String secret;\n   private final String percentEncodedKey;\n \n-  ConsumerKey(String key, String secret) {\n+  public ConsumerKey(String key, String secret) {\n     this.key = key;\n     this.secret = secret;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);\n@@ -40,7 +40,7 @@\n     return secret;\n   }\n \n-  String getPercentEncodedKey() {\n+  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 43, "bugNodeStartChar": 1158, "bugNodeLength": 65, "fixLineNum": 43, "fixNodeStartChar": 1158, "fixNodeLength": 72, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java b/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java\nindex c0122c3..bc65919 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java\n@@ -41,7 +41,7 @@\n    * @param consumerAuth Consumer key to use for signature calculation\n    * @param userAuth     Request/access token to use for signature calculation\n    */\n-  OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {\n+  public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {\n     this.consumerAuth = consumerAuth;\n     this.userAuth = userAuth;\n   }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 40, "bugNodeStartChar": 1509, "bugNodeLength": 309, "fixLineNum": 40, "fixNodeStartChar": 1509, "fixNodeLength": 316, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/Parameter.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/Parameter.java b/client/src/main/java/org/asynchttpclient/oauth/Parameter.java\nindex c89eba8..bc4734e 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/Parameter.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/Parameter.java\n@@ -20,7 +20,7 @@\n \n   final String key, value;\n \n-  Parameter(String key, String value) {\n+  public Parameter(String key, String value) {\n     this.key = key;\n     this.value = value;\n   }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 23, "bugNodeStartChar": 907, "bugNodeLength": 85, "fixLineNum": 23, "fixNodeStartChar": 907, "fixNodeLength": 92, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/Parameters.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\nindex e82829f..b0c533a 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\n@@ -19,16 +19,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-class Parameters {\n+final class Parameters {\n \n   private List<Parameter> parameters = new ArrayList<>();\n \n-  Parameters add(String key, String value) {\n+  public Parameters add(String key, String value) {\n     parameters.add(new Parameter(key, value));\n     return this;\n   }\n \n-  void reset() {\n+  public void reset() {\n     parameters.clear();\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 22, "bugNodeStartChar": 878, "bugNodeLength": 773, "fixLineNum": 22, "fixNodeStartChar": 878, "fixNodeLength": 779, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/Parameters.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\nindex e82829f..b0c533a 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\n@@ -19,16 +19,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-class Parameters {\n+final class Parameters {\n \n   private List<Parameter> parameters = new ArrayList<>();\n \n-  Parameters add(String key, String value) {\n+  public Parameters add(String key, String value) {\n     parameters.add(new Parameter(key, value));\n     return this;\n   }\n \n-  void reset() {\n+  public void reset() {\n     parameters.clear();\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 26, "bugNodeStartChar": 959, "bugNodeLength": 110, "fixLineNum": 26, "fixNodeStartChar": 959, "fixNodeLength": 117, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/Parameters.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\nindex e82829f..b0c533a 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java\n@@ -19,16 +19,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-class Parameters {\n+final class Parameters {\n \n   private List<Parameter> parameters = new ArrayList<>();\n \n-  Parameters add(String key, String value) {\n+  public Parameters add(String key, String value) {\n     parameters.add(new Parameter(key, value));\n     return this;\n   }\n \n-  void reset() {\n+  public void reset() {\n     parameters.clear();\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 31, "bugNodeStartChar": 1073, "bugNodeLength": 42, "fixLineNum": 31, "fixNodeStartChar": 1073, "fixNodeLength": 49, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/RequestToken.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java b/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java\nindex 89a30d6..3dc5364 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java\n@@ -28,7 +28,7 @@\n   private final String secret;\n   private final String percentEncodedKey;\n \n-  RequestToken(String key, String token) {\n+  public RequestToken(String key, String token) {\n     this.key = key;\n     this.secret = token;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);\n@@ -42,7 +42,7 @@\n     return secret;\n   }\n \n-  String getPercentEncodedKey() {\n+  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 31, "bugNodeStartChar": 1013, "bugNodeLength": 165, "fixLineNum": 31, "fixNodeStartChar": 1013, "fixNodeLength": 172, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "fixCommitParentSHA1": "5b1f0f51e9667e09bb26fc6b609997bc30d96f37", "bugFilePath": "client/src/main/java/org/asynchttpclient/oauth/RequestToken.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java b/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java\nindex 89a30d6..3dc5364 100644\n--- a/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java\n+++ b/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java\n@@ -28,7 +28,7 @@\n   private final String secret;\n   private final String percentEncodedKey;\n \n-  RequestToken(String key, String token) {\n+  public RequestToken(String key, String token) {\n     this.key = key;\n     this.secret = token;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);\n@@ -42,7 +42,7 @@\n     return secret;\n   }\n \n-  String getPercentEncodedKey() {\n+  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 45, "bugNodeStartChar": 1284, "bugNodeLength": 65, "fixLineNum": 45, "fixNodeStartChar": 1284, "fixNodeLength": 72, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "14b91c00dca45c89cac63abe46f38955cdca7b86", "fixCommitParentSHA1": "d47c56e7ee80b76a4cffd4770237239cfea0ffd6", "bugFilePath": "client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java\nindex 1b189ac..531eaad 100755\n--- a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java\n+++ b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java\n@@ -99,7 +99,7 @@\n \n   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n-    return channel.writeAndFlush(new BinaryWebSocketFrame(payload));\n+    return channel.writeAndFlush(new BinaryWebSocketFrame(finalFragment, rsv, payload));\n   }\n \n   @Override\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 102, "bugNodeStartChar": 3600, "bugNodeLength": 33, "fixLineNum": 102, "fixNodeStartChar": 3600, "fixNodeLength": 53, "sourceBeforeFix": "new BinaryWebSocketFrame(payload)", "sourceAfterFix": "new BinaryWebSocketFrame(finalFragment,rsv,payload)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "14b91c00dca45c89cac63abe46f38955cdca7b86", "fixCommitParentSHA1": "d47c56e7ee80b76a4cffd4770237239cfea0ffd6", "bugFilePath": "client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java\nindex 1b189ac..531eaad 100755\n--- a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java\n+++ b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java\n@@ -99,7 +99,7 @@\n \n   @Override\n   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {\n-    return channel.writeAndFlush(new BinaryWebSocketFrame(payload));\n+    return channel.writeAndFlush(new BinaryWebSocketFrame(finalFragment, rsv, payload));\n   }\n \n   @Override\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 102, "bugNodeStartChar": 3600, "bugNodeLength": 33, "fixLineNum": 102, "fixNodeStartChar": 3600, "fixNodeLength": 53, "sourceBeforeFix": "new BinaryWebSocketFrame(payload)", "sourceAfterFix": "new BinaryWebSocketFrame(finalFragment,rsv,payload)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "256d2e40a6796283556618b87af4b5730f903f62", "fixCommitParentSHA1": "caec15542860ecf185364c2c7b0864fe9df0bae0", "bugFilePath": "extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java", "fixPatch": "diff --git a/extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java b/extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java\nindex b0d5a06..9412087 100644\n--- a/extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java\n+++ b/extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java\n@@ -63,7 +63,7 @@\n     public static AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {\n         if (attemptInstantiation()) {\n             try {\n-                Constructor<AsyncHttpClient> constructor = asyncHttpClientImplClass.getConstructor(DefaultAsyncHttpClientConfig.class);\n+                Constructor<AsyncHttpClient> constructor = asyncHttpClientImplClass.getConstructor(AsyncHttpClientConfig.class);\n                 return constructor.newInstance(config);\n             } catch (Exception e) {\n                 throw new AsyncHttpClientImplException(\"Unable to find the instantiate the class specified by system property : \"\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 66, "bugNodeStartChar": 3254, "bugNodeLength": 34, "fixLineNum": 66, "fixNodeStartChar": 3254, "fixNodeLength": 27, "sourceBeforeFix": "DefaultAsyncHttpClientConfig.class", "sourceAfterFix": "AsyncHttpClientConfig.class"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b641b46db4f01fdbbce2fe6d544cca4b4b27b3b5", "fixCommitParentSHA1": "a887e92c44393255ddc624425f5c248fdf35a68c", "bugFilePath": "client/src/test/java/org/asynchttpclient/RealmTest.java", "fixPatch": "diff --git a/client/src/test/java/org/asynchttpclient/RealmTest.java b/client/src/test/java/org/asynchttpclient/RealmTest.java\nindex 168410a..c72b661 100644\n--- a/client/src/test/java/org/asynchttpclient/RealmTest.java\n+++ b/client/src/test/java/org/asynchttpclient/RealmTest.java\n@@ -71,7 +71,7 @@\n         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + ha2);\n \n-        assertEquals(expectedResponse, orig.getResponse());\n+        assertEquals(orig.getResponse(), expectedResponse);\n     }\n \n     @Test(groups = \"standalone\")\n@@ -96,7 +96,7 @@\n         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2);\n \n-        assertEquals(expectedResponse, orig.getResponse());\n+        assertEquals(orig.getResponse(), expectedResponse);\n     }\n \n     private String getMd5(String what) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 74, "bugNodeStartChar": 2815, "bugNodeLength": 50, "fixLineNum": 74, "fixNodeStartChar": 2815, "fixNodeLength": 50, "sourceBeforeFix": "assertEquals(expectedResponse,orig.getResponse())", "sourceAfterFix": "assertEquals(orig.getResponse(),expectedResponse)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b641b46db4f01fdbbce2fe6d544cca4b4b27b3b5", "fixCommitParentSHA1": "a887e92c44393255ddc624425f5c248fdf35a68c", "bugFilePath": "client/src/test/java/org/asynchttpclient/RealmTest.java", "fixPatch": "diff --git a/client/src/test/java/org/asynchttpclient/RealmTest.java b/client/src/test/java/org/asynchttpclient/RealmTest.java\nindex 168410a..c72b661 100644\n--- a/client/src/test/java/org/asynchttpclient/RealmTest.java\n+++ b/client/src/test/java/org/asynchttpclient/RealmTest.java\n@@ -71,7 +71,7 @@\n         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + ha2);\n \n-        assertEquals(expectedResponse, orig.getResponse());\n+        assertEquals(orig.getResponse(), expectedResponse);\n     }\n \n     @Test(groups = \"standalone\")\n@@ -96,7 +96,7 @@\n         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2);\n \n-        assertEquals(expectedResponse, orig.getResponse());\n+        assertEquals(orig.getResponse(), expectedResponse);\n     }\n \n     private String getMd5(String what) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 99, "bugNodeStartChar": 3732, "bugNodeLength": 50, "fixLineNum": 99, "fixNodeStartChar": 3732, "fixNodeLength": 50, "sourceBeforeFix": "assertEquals(expectedResponse,orig.getResponse())", "sourceAfterFix": "assertEquals(orig.getResponse(),expectedResponse)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "464e20480e8c188d6dcae7dbce2b9c5098d3584f", "fixCommitParentSHA1": "e06fd50cb3556095f0aaf556c519f2c45e07da25", "bugFilePath": "client/src/test/java/org/asynchttpclient/ListenableFutureTest.java", "fixPatch": "diff --git a/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java b/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java\nindex 4095286..9721bbc 100644\n--- a/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java\n+++ b/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java\n@@ -60,7 +60,7 @@\n             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n-        assertEquals(0, counter.get());\n+        assertEquals(counter.get(), 0);\n     }\n \n     @Test(groups = \"standalone\")\n@@ -76,6 +76,6 @@\n             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n-        assertEquals(0, counter.get());\n+        assertEquals(counter.get(), 0);\n     }\n }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 63, "bugNodeStartChar": 2583, "bugNodeLength": 30, "fixLineNum": 63, "fixNodeStartChar": 2583, "fixNodeLength": 30, "sourceBeforeFix": "assertEquals(0,counter.get())", "sourceAfterFix": "assertEquals(counter.get(),0)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "464e20480e8c188d6dcae7dbce2b9c5098d3584f", "fixCommitParentSHA1": "e06fd50cb3556095f0aaf556c519f2c45e07da25", "bugFilePath": "client/src/test/java/org/asynchttpclient/ListenableFutureTest.java", "fixPatch": "diff --git a/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java b/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java\nindex 4095286..9721bbc 100644\n--- a/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java\n+++ b/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java\n@@ -60,7 +60,7 @@\n             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n-        assertEquals(0, counter.get());\n+        assertEquals(counter.get(), 0);\n     }\n \n     @Test(groups = \"standalone\")\n@@ -76,6 +76,6 @@\n             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n-        assertEquals(0, counter.get());\n+        assertEquals(counter.get(), 0);\n     }\n }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 79, "bugNodeStartChar": 3151, "bugNodeLength": 30, "fixLineNum": 79, "fixNodeStartChar": 3151, "fixNodeLength": 30, "sourceBeforeFix": "assertEquals(0,counter.get())", "sourceAfterFix": "assertEquals(counter.get(),0)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a272a2e165f9c1946bd8f97aab469e632312f832", "fixCommitParentSHA1": "6f549042d2b066edb42d77a4c54cd977af7dea65", "bugFilePath": "client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java\nindex eac683c..055e3ba 100644\n--- a/client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java\n+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java\n@@ -18,7 +18,7 @@\n import java.util.concurrent.BlockingQueue;\n \n public final class BlockingFeedableBodyGenerator extends QueueBasedFeedableBodyGenerator<BlockingQueue<BodyChunk>> {\n-    private final BlockingQueue<BodyChunk> queue;\n+    private final ArrayBlockingQueue<BodyChunk> queue;\n \n     public BlockingFeedableBodyGenerator(int capacity) {\n         queue = new ArrayBlockingQueue<>(capacity);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 21, "bugNodeStartChar": 1012, "bugNodeLength": 24, "fixLineNum": 21, "fixNodeStartChar": 1012, "fixNodeLength": 29, "sourceBeforeFix": "BlockingQueue<BodyChunk>", "sourceAfterFix": "ArrayBlockingQueue<BodyChunk>"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 797, "bugNodeStartChar": 34193, "bugNodeLength": 124, "fixLineNum": 797, "fixNodeStartChar": 34193, "fixNodeLength": 130, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 810, "bugNodeStartChar": 34679, "bugNodeLength": 419, "fixLineNum": 810, "fixNodeStartChar": 34679, "fixNodeLength": 425, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 823, "bugNodeStartChar": 35341, "bugNodeLength": 220, "fixLineNum": 823, "fixNodeStartChar": 35341, "fixNodeLength": 226, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 828, "bugNodeStartChar": 35571, "bugNodeLength": 251, "fixLineNum": 828, "fixNodeStartChar": 35571, "fixNodeLength": 257, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java\nindex 069e818..ea731a0 100644\n--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java\n+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java\n@@ -48,7 +48,7 @@\n                 transfertEncoding == null ? DEFAULT_TRANSFER_ENCODING : transfertEncoding);\n     }\n \n-    public void setFileName(String fileName) {\n+    public final void setFileName(String fileName) {\n         this.fileName = fileName;\n     }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 51, "bugNodeStartChar": 1995, "bugNodeLength": 82, "fixLineNum": 51, "fixNodeStartChar": 1995, "fixNodeLength": 88, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 797, "bugNodeStartChar": 34193, "bugNodeLength": 124, "fixLineNum": 797, "fixNodeStartChar": 34193, "fixNodeLength": 130, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 810, "bugNodeStartChar": 34679, "bugNodeLength": 419, "fixLineNum": 810, "fixNodeStartChar": 34679, "fixNodeLength": 425, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 823, "bugNodeStartChar": 35341, "bugNodeLength": 220, "fixLineNum": 823, "fixNodeStartChar": 35341, "fixNodeLength": 226, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\nindex 4d45f74..31e81f2 100644\n--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java\n@@ -795,7 +795,7 @@\n         }\n \n         /** Get the message length */\n-        protected int getMessageLength() {\n+        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }\n \n@@ -808,7 +808,7 @@\n         }\n \n         /** Read a bunch of bytes from a position in the message buffer */\n-        protected void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n+        protected final void readBytes(final byte[] buffer, final int position) throws NtlmEngineException {\n             if (messageContents.length < position + buffer.length) {\n                 throw new NtlmEngineException(\"NTLM: Message too short\");\n             }\n@@ -821,12 +821,12 @@\n         }\n \n         /** Read a ulong from a position within the message buffer */\n-        protected int readULong(final int position) throws NtlmEngineException {\n+        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n \n         /** Read a security buffer from a position within the message buffer */\n-        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n+        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 828, "bugNodeStartChar": 35571, "bugNodeLength": 251, "fixLineNum": 828, "fixNodeStartChar": 35571, "fixNodeLength": 257, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "fixCommitParentSHA1": "99e48186e0d2ec1fe344897595e958652ddccb1a", "bugFilePath": "client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java", "fixPatch": "diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java\nindex 069e818..ea731a0 100644\n--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java\n+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java\n@@ -48,7 +48,7 @@\n                 transfertEncoding == null ? DEFAULT_TRANSFER_ENCODING : transfertEncoding);\n     }\n \n-    public void setFileName(String fileName) {\n+    public final void setFileName(String fileName) {\n         this.fileName = fileName;\n     }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 51, "bugNodeStartChar": 1995, "bugNodeLength": 82, "fixLineNum": 51, "fixNodeStartChar": 1995, "fixNodeLength": 88, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "301497f8e774e00997067a461d81802623a25fae", "fixCommitParentSHA1": "b0c693838c2a8e655ea3c78c7aa149ac58a4b985", "bugFilePath": "client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java", "fixPatch": "diff --git a/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java b/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java\nindex 5b6d9f7..13a7100 100644\n--- a/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java\n+++ b/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java\n@@ -41,27 +41,27 @@\n \n     // ------------------------------------------------------------ Test Methods\n \n-    @Test(groups = { \"standalone\", \"post_redirect_get\" }, enabled = false)\n+    @Test(groups = { \"standalone\", \"post_redirect_get\" })\n     public void postRedirectGet302Test() throws Exception {\n         doTestPositive(302);\n     }\n \n-    @Test(groups = { \"standalone\", \"post_redirect_get\" }, enabled = false)\n+    @Test(groups = { \"standalone\", \"post_redirect_get\" })\n     public void postRedirectGet302StrictTest() throws Exception {\n         doTestNegative(302, true);\n     }\n \n-    @Test(groups = { \"standalone\", \"post_redirect_get\" }, enabled = false)\n+    @Test(groups = { \"standalone\", \"post_redirect_get\" })\n     public void postRedirectGet303Test() throws Exception {\n         doTestPositive(303);\n     }\n \n-    @Test(groups = { \"standalone\", \"post_redirect_get\" }, enabled = false)\n+    @Test(groups = { \"standalone\", \"post_redirect_get\" })\n     public void postRedirectGet301Test() throws Exception {\n-        doTestNegative(301, false);\n+        doTestPositive(301);\n     }\n \n-    @Test(groups = { \"standalone\", \"post_redirect_get\" }, enabled = false)\n+    @Test(groups = { \"standalone\", \"post_redirect_get\" })\n     public void postRedirectGet307Test() throws Exception {\n         doTestNegative(307, false);\n     }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 61, "bugNodeStartChar": 2316, "bugNodeLength": 26, "fixLineNum": 61, "fixNodeStartChar": 2316, "fixNodeLength": 19, "sourceBeforeFix": "doTestNegative(301,false)", "sourceAfterFix": "doTestPositive(301)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ce5f0a9ba85df298923dfdd4a493d30e4341ecfe", "fixCommitParentSHA1": "34ef0c29b4f557d03b3b17aeb97bde2026c74730", "bugFilePath": "api/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java b/api/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java\nindex abe7b82..ff1b240 100644\n--- a/api/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java\n+++ b/api/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java\n@@ -38,6 +38,7 @@\n \n public abstract class HttpToHttpsRedirectTest extends AbstractBasicTest {\n \n+    // FIXME super NOT threadsafe!!!\n     private final AtomicBoolean redirectDone = new AtomicBoolean(false);\n \n     private class Relative302Handler extends AbstractHandler {\n@@ -142,7 +143,7 @@\n         try (AsyncHttpClient c = getAsyncHttpClient(cg)) {\n             Response response = c.prepareGet(getTargetUrl()).setHeader(\"X-redirect\", \"/foo/test\").execute().get();\n             assertNotNull(response);\n-            assertEquals(response.getStatusCode(), 302);\n+            assertEquals(response.getStatusCode(), 200);\n             assertEquals(response.getUri().toString(), getTargetUrl());\n         }\n     }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 145, "bugNodeStartChar": 6065, "bugNodeLength": 43, "fixLineNum": 145, "fixNodeStartChar": 6065, "fixNodeLength": 43, "sourceBeforeFix": "assertEquals(response.getStatusCode(),302)", "sourceAfterFix": "assertEquals(response.getStatusCode(),200)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ce5f0a9ba85df298923dfdd4a493d30e4341ecfe", "fixCommitParentSHA1": "34ef0c29b4f557d03b3b17aeb97bde2026c74730", "bugFilePath": "api/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java b/api/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java\nindex 7de4bb3..500389d 100644\n--- a/api/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java\n+++ b/api/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java\n@@ -41,6 +41,7 @@\n \n public abstract class PerRequestRelative302Test extends AbstractBasicTest {\n \n+ // FIXME super NOT threadsafe!!!\n     private final AtomicBoolean isSet = new AtomicBoolean(false);\n \n     private class Relative302Handler extends AbstractHandler {\n@@ -152,7 +153,7 @@\n         try (AsyncHttpClient c = getAsyncHttpClient(null)) {\n             Response response = c.preparePost(getTargetUrl()).setFollowRedirect(true).setHeader(\"X-redirect\", \"/foo/test\").execute().get();\n             assertNotNull(response);\n-            assertEquals(response.getStatusCode(), 302);\n+            assertEquals(response.getStatusCode(), 200);\n             assertEquals(response.getUri().toString(), getTargetUrl());\n         }\n     }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 155, "bugNodeStartChar": 6374, "bugNodeLength": 43, "fixLineNum": 155, "fixNodeStartChar": 6374, "fixNodeLength": 43, "sourceBeforeFix": "assertEquals(response.getStatusCode(),302)", "sourceAfterFix": "assertEquals(response.getStatusCode(),200)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "94e439501e006705babd5bec6427a26fe60b4a19", "fixCommitParentSHA1": "fa2c4b62a1ede4fa9c1b9b39008ef88ed44842f5", "bugFilePath": "api/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java b/api/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java\nindex 9792329..182c778 100644\n--- a/api/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java\n+++ b/api/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java\n@@ -162,7 +162,7 @@\n         }\n     }\n \n-    @Test(timeOut = 60000, expectedExceptions = { IllegalArgumentException.class } )\n+    @Test(timeOut = 60000, expectedExceptions = { IllegalStateException.class } )\n     public void wrongProtocolCode() throws Throwable {\n         try (AsyncHttpClient c = getAsyncHttpClient(null)) {\n             final CountDownLatch latch = new CountDownLatch(1);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 165, "bugNodeStartChar": 5976, "bugNodeLength": 30, "fixLineNum": 165, "fixNodeStartChar": 5976, "fixNodeLength": 27, "sourceBeforeFix": "IllegalArgumentException.class", "sourceAfterFix": "IllegalStateException.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d194da897cf8b34641f4fe5634dcf5af3b2544ed", "fixCommitParentSHA1": "e5624980474994d10ba25a0f5c32072fd1abc2e9", "bugFilePath": "api/src/test/java/org/asynchttpclient/async/BasicHttpsTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/async/BasicHttpsTest.java b/api/src/test/java/org/asynchttpclient/async/BasicHttpsTest.java\nindex 40dc1b3..808e5e1 100644\n--- a/api/src/test/java/org/asynchttpclient/async/BasicHttpsTest.java\n+++ b/api/src/test/java/org/asynchttpclient/async/BasicHttpsTest.java\n@@ -94,7 +94,7 @@\n             } catch (final ExecutionException e) {\n                 cause = e.getCause();\n             }\n-            assertTrue(cause instanceof SSLHandshakeException, \"Expected an SSLHandshakeException, got a \" + cause);\n+            assertNotNull(cause);\n \n             // second request should succeed\n             trust.set(true);\n@@ -104,7 +104,7 @@\n         }\n     }\n \n-    @Test(timeOut = 2000, expectedExceptions = { SSLHandshakeException.class } )\n+    @Test(timeOut = 2000, expectedExceptions = { Exception.class } )\n     public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {\n \n         try (AsyncHttpClient client = getAsyncHttpClient(new Builder().setRequestTimeout(2000).build())) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 107, "bugNodeStartChar": 4864, "bugNodeLength": 27, "fixLineNum": 107, "fixNodeStartChar": 4864, "fixNodeLength": 15, "sourceBeforeFix": "SSLHandshakeException.class", "sourceAfterFix": "Exception.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "84921d1da74dec0999dda7aff2845d0642e16c11", "fixCommitParentSHA1": "036bc733ba8527d4700df048ba304f01241488ca", "bugFilePath": "api/src/main/java/org/asynchttpclient/Realm.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/Realm.java b/api/src/main/java/org/asynchttpclient/Realm.java\nindex 6fe0096..1d602b5 100644\n--- a/api/src/main/java/org/asynchttpclient/Realm.java\n+++ b/api/src/main/java/org/asynchttpclient/Realm.java\n@@ -32,7 +32,7 @@\n  */\n public class Realm {\n \n-    private static final String NC = \"00000001\";\n+    private static final String DEFAULT_NC = \"00000001\";\n \n     private final String principal;\n     private final String password;\n@@ -263,7 +263,7 @@\n         private String response = \"\";\n         private String opaque = \"\";\n         private String qop = \"auth\";\n-        private String nc = \"00000001\";\n+        private String nc = DEFAULT_NC;\n         private String cnonce = \"\";\n         private Uri uri;\n         private String methodName = \"GET\";\n@@ -565,7 +565,7 @@\n             \n             if (isNonEmpty(qop)) {\n                 //qop =\"auth\" or \"auth-int\"\n-                sb.append(NC)//\n+                sb.append(nc)//\n                         .append(':')//\n                         .append(cnonce)//\n                         .append(':')//\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 568, "bugNodeStartChar": 17390, "bugNodeLength": 13, "fixLineNum": 568, "fixNodeStartChar": 17390, "fixNodeLength": 13, "sourceBeforeFix": "sb.append(NC)", "sourceAfterFix": "sb.append(nc)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "f22ad62066cfd1bf3d7415251af2c2732db34acf", "fixCommitParentSHA1": "6fd6367156fc8f129e1c50395eb626a05131cf77", "bugFilePath": "providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java", "fixPatch": "diff --git a/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java b/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java\nindex 49fabee..010625f 100755\n--- a/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java\n+++ b/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java\n@@ -52,7 +52,7 @@\n \n     @Override\n     public long transferTo(WritableByteChannel target, long position) throws IOException {\n-        long written = body.transferTo(position, Long.MAX_VALUE, target);\n+        long written = body.transferTo(position, target);\n         if (written > 0) {\n             transfered += written;\n         }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 55, "bugNodeStartChar": 1729, "bugNodeLength": 49, "fixLineNum": 55, "fixNodeStartChar": 1729, "fixNodeLength": 33, "sourceBeforeFix": "body.transferTo(position,Long.MAX_VALUE,target)", "sourceAfterFix": "body.transferTo(position,target)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "713054c1359a0cb346fe966fc2ebd0999680f4f4", "fixCommitParentSHA1": "4e5b834a9524ac010c63e825be2c64f2aea1d464", "bugFilePath": "api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java\nindex 88593ba..3cb9ebd 100644\n--- a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java\n+++ b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java\n@@ -135,6 +135,6 @@\n     }\n     \n     public static boolean defaultAcceptAnyCertificate() {\n-        return getBooleanValue(ASYNC_CLIENT + \"acceptAnyCertificate\", false);\n+        return getBoolean(ASYNC_CLIENT + \"acceptAnyCertificate\", false);\n     }\n }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 138, "bugNodeStartChar": 4991, "bugNodeLength": 61, "fixLineNum": 138, "fixNodeStartChar": 4991, "fixNodeLength": 56, "sourceBeforeFix": "getBooleanValue(ASYNC_CLIENT + \"acceptAnyCertificate\",false)", "sourceAfterFix": "getBoolean(ASYNC_CLIENT + \"acceptAnyCertificate\",false)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "713054c1359a0cb346fe966fc2ebd0999680f4f4", "fixCommitParentSHA1": "4e5b834a9524ac010c63e825be2c64f2aea1d464", "bugFilePath": "api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java\nindex 88593ba..3cb9ebd 100644\n--- a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java\n+++ b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java\n@@ -135,6 +135,6 @@\n     }\n     \n     public static boolean defaultAcceptAnyCertificate() {\n-        return getBooleanValue(ASYNC_CLIENT + \"acceptAnyCertificate\", false);\n+        return getBoolean(ASYNC_CLIENT + \"acceptAnyCertificate\", false);\n     }\n }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 138, "bugNodeStartChar": 4991, "bugNodeLength": 61, "fixLineNum": 138, "fixNodeStartChar": 4991, "fixNodeLength": 56, "sourceBeforeFix": "getBooleanValue(ASYNC_CLIENT + \"acceptAnyCertificate\",false)", "sourceAfterFix": "getBoolean(ASYNC_CLIENT + \"acceptAnyCertificate\",false)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "186a9d090de21e19ff4e4f7d1eae1aeaa207c0ea", "fixCommitParentSHA1": "1d5392e9c11f54a8b06cd0f62a063fe0649c95d8", "bugFilePath": "api/src/main/java/org/asynchttpclient/RequestBuilderBase.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/RequestBuilderBase.java b/api/src/main/java/org/asynchttpclient/RequestBuilderBase.java\nindex 0d7dc1d..fa21337 100644\n--- a/api/src/main/java/org/asynchttpclient/RequestBuilderBase.java\n+++ b/api/src/main/java/org/asynchttpclient/RequestBuilderBase.java\n@@ -650,7 +650,7 @@\n     }\n \n     private void computeRequestCharset() {\n-        if (request.charset != null) {\n+        if (request.charset == null) {\n             try {\n                 final String contentType = request.headers.getFirstValue(\"Content-Type\");\n                 if (contentType != null) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 653, "bugNodeStartChar": 20437, "bugNodeLength": 23, "fixLineNum": 653, "fixNodeStartChar": 20437, "fixNodeLength": 23, "sourceBeforeFix": "request.charset != null", "sourceAfterFix": "request.charset == null"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1ec309268bbed966214ce1a4f3880f48d0ca25e3", "fixCommitParentSHA1": "64140b52a44ae7ea10721b22fe72c4eb32847a0e", "bugFilePath": "api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java b/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java\nindex 610f521..b38319e 100644\n--- a/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java\n+++ b/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java\n@@ -347,7 +347,7 @@\n             c.prepareGet(\"http://google.com/\").execute(new AsyncHandlerAdapter() {\n \n                 public STATE onStatusReceived(HttpResponseStatus status) throws Exception {\n-                    assertEquals(301, status.getStatusCode());\n+                    assertEquals(302, status.getStatusCode());\n                     return STATE.CONTINUE;\n                 }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 350, "bugNodeStartChar": 13511, "bugNodeLength": 41, "fixLineNum": 350, "fixNodeStartChar": 13511, "fixNodeLength": 41, "sourceBeforeFix": "assertEquals(301,status.getStatusCode())", "sourceAfterFix": "assertEquals(302,status.getStatusCode())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "64140b52a44ae7ea10721b22fe72c4eb32847a0e", "fixCommitParentSHA1": "ce46444e903a4b41906fa7224f0496a1c7a3ff25", "bugFilePath": "api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java b/api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java\nindex 521ce1d..a6e08a2 100644\n--- a/api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java\n+++ b/api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java\n@@ -119,7 +119,7 @@\n         try {\n             Response response = c.prepareGet(\"http://google.com/\").execute().get(10, TimeUnit.SECONDS);\n             assertNotNull(response);\n-            assertEquals(response.getStatusCode(), 301);\n+            assertEquals(response.getStatusCode(), 302);\n         } finally {\n             c.close();\n         }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 122, "bugNodeStartChar": 4862, "bugNodeLength": 43, "fixLineNum": 122, "fixNodeStartChar": 4862, "fixNodeLength": 43, "sourceBeforeFix": "assertEquals(response.getStatusCode(),301)", "sourceAfterFix": "assertEquals(response.getStatusCode(),302)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "0b740e7040786e668408aafbabe33f5fcbdda2a5", "fixCommitParentSHA1": "48bf6e2ca381bac80982a834fbc9d4a0157b149f", "bugFilePath": "providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/IdleConnectionTimeoutTimerTask.java", "fixPatch": "diff --git a/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/IdleConnectionTimeoutTimerTask.java b/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/IdleConnectionTimeoutTimerTask.java\nindex f547795..96cb9b9 100644\n--- a/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/IdleConnectionTimeoutTimerTask.java\n+++ b/providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/IdleConnectionTimeoutTimerTask.java\n@@ -46,7 +46,7 @@\n \n             long now = millisTime();\n \n-            long currentIdleConnectionTimeoutInstant = idleConnectionTimeout - nettyResponseFuture.getLastTouch();\n+            long currentIdleConnectionTimeoutInstant = idleConnectionTimeout + nettyResponseFuture.getLastTouch();\n             long durationBeforeCurrentIdleConnectionTimeout = currentIdleConnectionTimeoutInstant - now;\n \n             if (durationBeforeCurrentIdleConnectionTimeout <= 0L) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 49, "bugNodeStartChar": 1964, "bugNodeLength": 58, "fixLineNum": 49, "fixNodeStartChar": 1964, "fixNodeLength": 58, "sourceBeforeFix": "idleConnectionTimeout - nettyResponseFuture.getLastTouch()", "sourceAfterFix": "idleConnectionTimeout + nettyResponseFuture.getLastTouch()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "6373dd6c75eea278d3b3f05663640304ea570e08", "fixCommitParentSHA1": "e4c5c7793595ca58810100f90fe0596b227ff774", "bugFilePath": "api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java b/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\nindex 9cbccb9..1e8ba28 100644\n--- a/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\n+++ b/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\n@@ -91,7 +91,7 @@\n                 } catch (IOException ie) {\n                     Assert.fail(\"read failure\");\n                 }\n-                if (readBytes >= 0) {\n+                if (readBytes > 0) {\n                     totalBytes += readBytes;\n                 } else {\n                     last = true;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 94, "bugNodeStartChar": 3434, "bugNodeLength": 14, "fixLineNum": 94, "fixNodeStartChar": 3434, "fixNodeLength": 13, "sourceBeforeFix": "readBytes >= 0", "sourceAfterFix": "readBytes > 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "a4f00a057f9f71c496c26a87ca45cb2166f2bbdc", "fixCommitParentSHA1": "e4c5c7793595ca58810100f90fe0596b227ff774", "bugFilePath": "api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java", "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java b/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\nindex 9cbccb9..1e8ba28 100644\n--- a/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\n+++ b/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\n@@ -91,7 +91,7 @@\n                 } catch (IOException ie) {\n                     Assert.fail(\"read failure\");\n                 }\n-                if (readBytes >= 0) {\n+                if (readBytes > 0) {\n                     totalBytes += readBytes;\n                 } else {\n                     last = true;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 94, "bugNodeStartChar": 3434, "bugNodeLength": 14, "fixLineNum": 94, "fixNodeStartChar": 3434, "fixNodeLength": 13, "sourceBeforeFix": "readBytes >= 0", "sourceAfterFix": "readBytes > 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "b0249470340022918fcc2b412e2347c4ba4ac7c5", "fixCommitParentSHA1": "19cc544158cdb3f4c1fb98137ae40024f29939b6", "bugFilePath": "providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java", "fixPatch": "diff --git a/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java b/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java\nindex b8f3437..287f309 100644\n--- a/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java\n+++ b/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java\n@@ -44,7 +44,7 @@\n         final BodyGenerator generator = request.getBodyGenerator();\n         final Body bodyLocal = generator.createBody();\n         final long len = bodyLocal.getContentLength();\n-        if (len > 0) {\n+        if (len >= 0) {\n             requestPacket.setContentLengthLong(len);\n         } else {\n             requestPacket.setChunked(true);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 47, "bugNodeStartChar": 1947, "bugNodeLength": 7, "fixLineNum": 47, "fixNodeStartChar": 1947, "fixNodeLength": 8, "sourceBeforeFix": "len > 0", "sourceAfterFix": "len >= 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "b0249470340022918fcc2b412e2347c4ba4ac7c5", "fixCommitParentSHA1": "19cc544158cdb3f4c1fb98137ae40024f29939b6", "bugFilePath": "providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java", "fixPatch": "diff --git a/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java b/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java\nindex 4589f12..942dc42 100644\n--- a/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java\n+++ b/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java\n@@ -262,7 +262,7 @@\n \n         if (Utils.requestHasEntityBody(request)) {\n             final long contentLength = request.getContentLength();\n-            if (contentLength > 0) {\n+            if (contentLength >= 0) {\n                 requestPacket.setContentLengthLong(contentLength);\n                 requestPacket.setChunked(false);\n             } else {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 265, "bugNodeStartChar": 11400, "bugNodeLength": 17, "fixLineNum": 265, "fixNodeStartChar": 11400, "fixNodeLength": 18, "sourceBeforeFix": "contentLength > 0", "sourceAfterFix": "contentLength >= 0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "466bd55e92d40e7193aa1ffd28c823d66aeb0ab6", "fixCommitParentSHA1": "89410aa6c5cf375228fd85ab919d0d1497c99416", "bugFilePath": "api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java b/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java\nindex 4558844..a0599ee 100644\n--- a/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java\n+++ b/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java\n@@ -516,7 +516,7 @@\n     }\n \n     public static int convertExpireField(String timestring) {\n-        String trimmedTimeString = removeQuote(timestring.trim());\n+        String trimmedTimeString = removeQuotes(timestring.trim());\n \n         for (SimpleDateFormat sdf : simpleDateFormat.get()) {\n             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 519, "bugNodeStartChar": 18443, "bugNodeLength": 30, "fixLineNum": 519, "fixNodeStartChar": 18443, "fixNodeLength": 31, "sourceBeforeFix": "removeQuote(timestring.trim())", "sourceAfterFix": "removeQuotes(timestring.trim())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "466bd55e92d40e7193aa1ffd28c823d66aeb0ab6", "fixCommitParentSHA1": "89410aa6c5cf375228fd85ab919d0d1497c99416", "bugFilePath": "api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java b/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java\nindex 4558844..a0599ee 100644\n--- a/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java\n+++ b/api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java\n@@ -516,7 +516,7 @@\n     }\n \n     public static int convertExpireField(String timestring) {\n-        String trimmedTimeString = removeQuote(timestring.trim());\n+        String trimmedTimeString = removeQuotes(timestring.trim());\n \n         for (SimpleDateFormat sdf : simpleDateFormat.get()) {\n             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 519, "bugNodeStartChar": 18443, "bugNodeLength": 30, "fixLineNum": 519, "fixNodeStartChar": 18443, "fixNodeLength": 31, "sourceBeforeFix": "removeQuote(timestring.trim())", "sourceAfterFix": "removeQuotes(timestring.trim())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "93c745c53b03deda947da3358b8948c5d539e05e", "fixCommitParentSHA1": "8f7752d9102bff5f841fec13cd995806d2e92257", "bugFilePath": "api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java\nindex 93ae5b8..55717a0 100644\n--- a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java\n+++ b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java\n@@ -443,7 +443,7 @@\n      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n-        return !requestFilters.isEmpty();\n+        return !responseFilters.isEmpty();\n     }\n \n     /**\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 446, "bugNodeStartChar": 16700, "bugNodeLength": 24, "fixLineNum": 446, "fixNodeStartChar": 16700, "fixNodeLength": 25, "sourceBeforeFix": "requestFilters.isEmpty()", "sourceAfterFix": "responseFilters.isEmpty()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "93c745c53b03deda947da3358b8948c5d539e05e", "fixCommitParentSHA1": "8f7752d9102bff5f841fec13cd995806d2e92257", "bugFilePath": "api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java", "fixPatch": "diff --git a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java\nindex 93ae5b8..55717a0 100644\n--- a/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java\n+++ b/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java\n@@ -443,7 +443,7 @@\n      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n-        return !requestFilters.isEmpty();\n+        return !responseFilters.isEmpty();\n     }\n \n     /**\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 446, "bugNodeStartChar": 16700, "bugNodeLength": 24, "fixLineNum": 446, "fixNodeStartChar": 16700, "fixNodeLength": 25, "sourceBeforeFix": "requestFilters.isEmpty()", "sourceAfterFix": "responseFilters.isEmpty()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9908f3ec100099ff16b02aebfd3ee0137080006d", "fixCommitParentSHA1": "c71e0529883d73094e30ce2f9e864f6abb60eb2d", "bugFilePath": "providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\nindex 1291eb0..201a377 100644\n--- a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n+++ b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n@@ -345,7 +345,7 @@\n \n             if (proxyServer.getPrincipal() != null) {\n                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());\n-                client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n+                client.getState().setProxyCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n             }\n \n             ProxyHost proxyHost = proxyServer == null ? null : new ProxyHost(proxyServer.getHost(), proxyServer.getPort());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 348, "bugNodeStartChar": 16984, "bugNodeLength": 92, "fixLineNum": 348, "fixNodeStartChar": 16984, "fixNodeLength": 97, "sourceBeforeFix": "client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)", "sourceAfterFix": "client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9908f3ec100099ff16b02aebfd3ee0137080006d", "fixCommitParentSHA1": "c71e0529883d73094e30ce2f9e864f6abb60eb2d", "bugFilePath": "providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\nindex 1291eb0..201a377 100644\n--- a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n+++ b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n@@ -345,7 +345,7 @@\n \n             if (proxyServer.getPrincipal() != null) {\n                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());\n-                client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n+                client.getState().setProxyCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n             }\n \n             ProxyHost proxyHost = proxyServer == null ? null : new ProxyHost(proxyServer.getHost(), proxyServer.getPort());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 348, "bugNodeStartChar": 16984, "bugNodeLength": 92, "fixLineNum": 348, "fixNodeStartChar": 16984, "fixNodeLength": 97, "sourceBeforeFix": "client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)", "sourceAfterFix": "client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4a56d5ccf4363641fbe5b6e490a1eff24aa58470", "fixCommitParentSHA1": "c71e0529883d73094e30ce2f9e864f6abb60eb2d", "bugFilePath": "providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\nindex 1291eb0..201a377 100644\n--- a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n+++ b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n@@ -345,7 +345,7 @@\n \n             if (proxyServer.getPrincipal() != null) {\n                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());\n-                client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n+                client.getState().setProxyCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n             }\n \n             ProxyHost proxyHost = proxyServer == null ? null : new ProxyHost(proxyServer.getHost(), proxyServer.getPort());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 348, "bugNodeStartChar": 16984, "bugNodeLength": 92, "fixLineNum": 348, "fixNodeStartChar": 16984, "fixNodeLength": 97, "sourceBeforeFix": "client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)", "sourceAfterFix": "client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4a56d5ccf4363641fbe5b6e490a1eff24aa58470", "fixCommitParentSHA1": "c71e0529883d73094e30ce2f9e864f6abb60eb2d", "bugFilePath": "providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\nindex 1291eb0..201a377 100644\n--- a/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n+++ b/providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n@@ -345,7 +345,7 @@\n \n             if (proxyServer.getPrincipal() != null) {\n                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());\n-                client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n+                client.getState().setProxyCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);\n             }\n \n             ProxyHost proxyHost = proxyServer == null ? null : new ProxyHost(proxyServer.getHost(), proxyServer.getPort());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 348, "bugNodeStartChar": 16984, "bugNodeLength": 92, "fixLineNum": 348, "fixNodeStartChar": 16984, "fixNodeLength": 97, "sourceBeforeFix": "client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)", "sourceAfterFix": "client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "b5cecbf584222b33841355d8a01df154827b4194", "fixCommitParentSHA1": "7c4ab47fd5e7abacc1ccc1628ba11ab7261569e3", "bugFilePath": "providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex f59f0f3..fe3f05c 100644\n--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -594,7 +594,7 @@\n             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, AsyncHttpProviderUtils.getAuthority(uri));\n         } else {\n             String path = null;\n-            if (proxyServer != null)\n+            if (proxyServer != null && !isSecure(uri))\n                 path = uri.toString();\n             else if (uri.getRawQuery() != null)\n                 path = uri.getRawPath() + \"?\" + uri.getRawQuery();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 597, "bugNodeStartChar": 27425, "bugNodeLength": 19, "fixLineNum": 597, "fixNodeStartChar": 27425, "fixNodeLength": 37, "sourceBeforeFix": "proxyServer != null", "sourceAfterFix": "proxyServer != null && !isSecure(uri)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "9d75ba8916acfb46b27d05c1be7dfd7e54711741", "fixCommitParentSHA1": "8105e0f7612a92808c686d4f067919cba19f52e5", "bugFilePath": "api/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java", "fixPatch": "diff --git a/api/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java b/api/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java\nindex 297d1c3..512153b 100644\n--- a/api/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java\n+++ b/api/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java\n@@ -489,7 +489,7 @@\n                 Assert.assertNotNull(values);\n                 Assert.assertEquals(values.length, expected.length);\n                 Arrays.sort(values);\n-                Assert.assertEquals(expected, values);\n+                Assert.assertEquals(values, expected);\n                 return STATE.ABORT;\n             }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 492, "bugNodeStartChar": 18866, "bugNodeLength": 37, "fixLineNum": 492, "fixNodeStartChar": 18866, "fixNodeLength": 37, "sourceBeforeFix": "Assert.assertEquals(expected,values)", "sourceAfterFix": "Assert.assertEquals(values,expected)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "06318999148f2e755fc1df25a6786a862e194e1c", "fixCommitParentSHA1": "6faa1f818f588a6be8c4a1f11508bb7cdbd587af", "bugFilePath": "providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex c36bdc1..d63db0c 100644\n--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1988,7 +1988,7 @@\n                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n-                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n+                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1991, "bugNodeStartChar": 84520, "bugNodeLength": 59, "fixLineNum": 1991, "fixNodeStartChar": 84520, "fixNodeLength": 49, "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "06318999148f2e755fc1df25a6786a862e194e1c", "fixCommitParentSHA1": "6faa1f818f588a6be8c4a1f11508bb7cdbd587af", "bugFilePath": "providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex c36bdc1..d63db0c 100644\n--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1988,7 +1988,7 @@\n                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n-                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n+                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1991, "bugNodeStartChar": 84520, "bugNodeLength": 59, "fixLineNum": 1991, "fixNodeStartChar": 84520, "fixNodeLength": 49, "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3df88ef9460eb7a72aa9ed2b16ad3844ad5e786b", "fixCommitParentSHA1": "a96602ac35e1e0509fcc9e80521357fd275971ce", "bugFilePath": "providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 05d5479..5034263 100644\n--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1987,7 +1987,7 @@\n                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n-                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n+                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1990, "bugNodeStartChar": 84473, "bugNodeLength": 59, "fixLineNum": 1990, "fixNodeStartChar": 84473, "fixNodeLength": 49, "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3df88ef9460eb7a72aa9ed2b16ad3844ad5e786b", "fixCommitParentSHA1": "a96602ac35e1e0509fcc9e80521357fd275971ce", "bugFilePath": "providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 05d5479..5034263 100644\n--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1987,7 +1987,7 @@\n                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n-                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n+                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1990, "bugNodeStartChar": 84473, "bugNodeLength": 59, "fixLineNum": 1990, "fixNodeStartChar": 84473, "fixNodeLength": 49, "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "44fb6541bca9101e1144c25fc5561ebf8b06dfa0", "fixCommitParentSHA1": "9c3419568aac35228116cb63b1a5ae383a9fb53e", "bugFilePath": "src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java\nindex 908c1f8..289b3bc 100644\n--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java\n@@ -522,9 +522,9 @@\n         int port = p;\n         if (port == -1) {\n             final String protocol = uri.getScheme().toLowerCase();\n-            if (\"http\".equals(protocol)) {\n+            if (\"http\".equals(protocol) || \"ws\".equals(protocol)) {\n                 port = 80;\n-            } else if (\"https\".equals(protocol)) {\n+            } else if (\"https\".equals(protocol) || \"wss\".equals(protocol)) {\n                 port = 443;\n             } else {\n                 throw new IllegalArgumentException(\"Unknown protocol: \" + protocol);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 525, "bugNodeStartChar": 19877, "bugNodeLength": 23, "fixLineNum": 525, "fixNodeStartChar": 19877, "fixNodeLength": 48, "sourceBeforeFix": "\"http\".equals(protocol)", "sourceAfterFix": "\"http\".equals(protocol) || \"ws\".equals(protocol)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "44fb6541bca9101e1144c25fc5561ebf8b06dfa0", "fixCommitParentSHA1": "9c3419568aac35228116cb63b1a5ae383a9fb53e", "bugFilePath": "src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java\nindex 908c1f8..289b3bc 100644\n--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java\n@@ -522,9 +522,9 @@\n         int port = p;\n         if (port == -1) {\n             final String protocol = uri.getScheme().toLowerCase();\n-            if (\"http\".equals(protocol)) {\n+            if (\"http\".equals(protocol) || \"ws\".equals(protocol)) {\n                 port = 80;\n-            } else if (\"https\".equals(protocol)) {\n+            } else if (\"https\".equals(protocol) || \"wss\".equals(protocol)) {\n                 port = 443;\n             } else {\n                 throw new IllegalArgumentException(\"Unknown protocol: \" + protocol);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 527, "bugNodeStartChar": 19954, "bugNodeLength": 24, "fixLineNum": 527, "fixNodeStartChar": 19954, "fixNodeLength": 50, "sourceBeforeFix": "\"https\".equals(protocol)", "sourceAfterFix": "\"https\".equals(protocol) || \"wss\".equals(protocol)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "8264af051e753ff408e860607575178a2d892b7d", "fixCommitParentSHA1": "0963b7d8650e29b0b6f2d545f6a09ab930b92736", "bugFilePath": "src/main/java/com/ning/http/client/RequestBuilderBase.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/RequestBuilderBase.java b/src/main/java/com/ning/http/client/RequestBuilderBase.java\nindex 04c52cd..1e7efe1 100644\n--- a/src/main/java/com/ning/http/client/RequestBuilderBase.java\n+++ b/src/main/java/com/ning/http/client/RequestBuilderBase.java\n@@ -134,7 +134,7 @@\n                 throw new IllegalArgumentException(\"Illegal URL: \" + url, e);\n             }\n \n-            if (queryParams != null) {\n+            if (queryParams != null && !queryParams.isEmpty()) {\n \n                 StringBuilder builder = new StringBuilder();\n                 if (!url.substring(8).contains(\"/\")) { // no other \"/\" than http[s]:// -> http://localhost:1234\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 137, "bugNodeStartChar": 5168, "bugNodeLength": 19, "fixLineNum": 137, "fixNodeStartChar": 5168, "fixNodeLength": 45, "sourceBeforeFix": "queryParams != null", "sourceAfterFix": "queryParams != null && !queryParams.isEmpty()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "8264af051e753ff408e860607575178a2d892b7d", "fixCommitParentSHA1": "0963b7d8650e29b0b6f2d545f6a09ab930b92736", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 61c0a9f..0863718 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -712,7 +712,7 @@\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n-                } else if (request.getParams() != null) {\n+                } else if (request.getParams() != null && !request.getParams().isEmpty()) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n                         final String key = paramEntry.getKey();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 715, "bugNodeStartChar": 32765, "bugNodeLength": 27, "fixLineNum": 715, "fixNodeStartChar": 32765, "fixNodeLength": 61, "sourceBeforeFix": "request.getParams() != null", "sourceAfterFix": "request.getParams() != null && !request.getParams().isEmpty()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b8ce4659cfb5ebbd26566cf5eef5c3181ef9f1d9", "fixCommitParentSHA1": "98a45dddd7e55efcb1761c72842a0d46a801e81c", "bugFilePath": "src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java b/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java\nindex c978758..2672041 100644\n--- a/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java\n+++ b/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java\n@@ -67,7 +67,7 @@\n         public long read(ByteBuffer buffer) throws IOException {\n \n             // To be safe.\n-            chunk = new byte[buffer.capacity() - 10];\n+            chunk = new byte[buffer.remaining() - 10];\n \n \n             int read = -1;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 70, "bugNodeStartChar": 2512, "bugNodeLength": 17, "fixLineNum": 70, "fixNodeStartChar": 2512, "fixNodeLength": 18, "sourceBeforeFix": "buffer.capacity()", "sourceAfterFix": "buffer.remaining()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b8ce4659cfb5ebbd26566cf5eef5c3181ef9f1d9", "fixCommitParentSHA1": "98a45dddd7e55efcb1761c72842a0d46a801e81c", "bugFilePath": "src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java b/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java\nindex c978758..2672041 100644\n--- a/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java\n+++ b/src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java\n@@ -67,7 +67,7 @@\n         public long read(ByteBuffer buffer) throws IOException {\n \n             // To be safe.\n-            chunk = new byte[buffer.capacity() - 10];\n+            chunk = new byte[buffer.remaining() - 10];\n \n \n             int read = -1;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 70, "bugNodeStartChar": 2512, "bugNodeLength": 17, "fixLineNum": 70, "fixNodeStartChar": 2512, "fixNodeLength": 18, "sourceBeforeFix": "buffer.capacity()", "sourceAfterFix": "buffer.remaining()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "fixCommitParentSHA1": "5ad8256ab93eeeda2d40b9189720d03e013d08cf", "bugFilePath": "src/test/java/com/ning/http/client/async/ProxyTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/ProxyTest.java b/src/test/java/com/ning/http/client/async/ProxyTest.java\nindex ed4a7c5..941897c 100644\n--- a/src/test/java/com/ning/http/client/async/ProxyTest.java\n+++ b/src/test/java/com/ning/http/client/async/ProxyTest.java\n@@ -52,7 +52,7 @@\n                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n-                response.addHeader(\"target\", r.getUri().toString());\n+                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n             } else { // this handler is to handle POST request\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);\n@@ -77,7 +77,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -93,7 +93,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -110,7 +110,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -156,7 +156,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n@@ -226,7 +226,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 55, "bugNodeStartChar": 1993, "bugNodeLength": 21, "fixLineNum": 55, "fixNodeStartChar": 1993, "fixNodeLength": 20, "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "fixCommitParentSHA1": "5ad8256ab93eeeda2d40b9189720d03e013d08cf", "bugFilePath": "src/test/java/com/ning/http/client/async/ProxyTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/ProxyTest.java b/src/test/java/com/ning/http/client/async/ProxyTest.java\nindex ed4a7c5..941897c 100644\n--- a/src/test/java/com/ning/http/client/async/ProxyTest.java\n+++ b/src/test/java/com/ning/http/client/async/ProxyTest.java\n@@ -52,7 +52,7 @@\n                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n-                response.addHeader(\"target\", r.getUri().toString());\n+                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n             } else { // this handler is to handle POST request\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);\n@@ -77,7 +77,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -93,7 +93,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -110,7 +110,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -156,7 +156,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n@@ -226,7 +226,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 55, "bugNodeStartChar": 1993, "bugNodeLength": 21, "fixLineNum": 55, "fixNodeStartChar": 1993, "fixNodeLength": 20, "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "fixCommitParentSHA1": "a31de48df6567618777697cf1c8ad975de19bf81", "bugFilePath": "src/test/java/com/ning/http/client/async/ProxyTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/ProxyTest.java b/src/test/java/com/ning/http/client/async/ProxyTest.java\nindex ed4a7c5..941897c 100644\n--- a/src/test/java/com/ning/http/client/async/ProxyTest.java\n+++ b/src/test/java/com/ning/http/client/async/ProxyTest.java\n@@ -52,7 +52,7 @@\n                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n-                response.addHeader(\"target\", r.getUri().toString());\n+                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n             } else { // this handler is to handle POST request\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);\n@@ -77,7 +77,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -93,7 +93,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -110,7 +110,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -156,7 +156,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n@@ -226,7 +226,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 55, "bugNodeStartChar": 1993, "bugNodeLength": 21, "fixLineNum": 55, "fixNodeStartChar": 1993, "fixNodeLength": 20, "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "fixCommitParentSHA1": "a31de48df6567618777697cf1c8ad975de19bf81", "bugFilePath": "src/test/java/com/ning/http/client/async/ProxyTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/ProxyTest.java b/src/test/java/com/ning/http/client/async/ProxyTest.java\nindex ed4a7c5..941897c 100644\n--- a/src/test/java/com/ning/http/client/async/ProxyTest.java\n+++ b/src/test/java/com/ning/http/client/async/ProxyTest.java\n@@ -52,7 +52,7 @@\n                            HttpServletRequest request,\n                            HttpServletResponse response) throws IOException, ServletException {\n             if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n-                response.addHeader(\"target\", r.getUri().toString());\n+                response.addHeader(\"target\", r.getUri().getPath());\n                 response.setStatus(HttpServletResponse.SC_OK);\n             } else { // this handler is to handle POST request\n                 response.sendError(HttpServletResponse.SC_FORBIDDEN);\n@@ -77,7 +77,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -93,7 +93,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -110,7 +110,7 @@\n         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-        assertEquals(resp.getHeader(\"target\"), target);\n+        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }\n \n@@ -156,7 +156,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n@@ -226,7 +226,7 @@\n             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n-            assertEquals(resp.getHeader(\"target\"), target);\n+            assertEquals(resp.getHeader(\"target\"), \"/\");\n \n             target = \"http://localhost:1234/\";\n             f = client.prepareGet(target).execute();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 55, "bugNodeStartChar": 1993, "bugNodeLength": 21, "fixLineNum": 55, "fixNodeStartChar": 1993, "fixNodeLength": 20, "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "08299be15b3f8e2082af0b5f6cda284140a65e33", "fixCommitParentSHA1": "521d58baf17d92a707d6f46433aae17244bad771", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex b32a135..7852fdf 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -164,7 +164,7 @@\n \n     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;\n \n-    private boolean executeConnectAsync = false;\n+    private boolean executeConnectAsync = true;\n \n     public static final ThreadLocal<Boolean> IN_IO_THREAD = new ThreadLocalBoolean();\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 167, "bugNodeStartChar": 7107, "bugNodeLength": 27, "fixLineNum": 167, "fixNodeStartChar": 7107, "fixNodeLength": 26, "sourceBeforeFix": "executeConnectAsync=false", "sourceAfterFix": "executeConnectAsync=true"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae95d478d3a59cdfd39d7621309f9a00b4b1bfc8", "fixCommitParentSHA1": "f8e0767386d08929f289068f44c3336ea02e40ab", "bugFilePath": "src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\nindex d8106dc..a6a8ac7 100644\n--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n@@ -375,7 +375,7 @@\n         } else if (config.getUserAgent() != null) {\n             method.setRequestHeader(\"User-Agent\", config.getUserAgent());\n         } else {\n-            method.setRequestHeader(\"User-Agent\", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));\n+            method.setRequestHeader(\"User-Agent\", AsyncHttpProviderUtils.constructUserAgent(ApacheAsyncHttpProvider.class));\n         }\n \n         if (config.isCompressionEnabled()) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 378, "bugNodeStartChar": 18573, "bugNodeLength": 28, "fixLineNum": 378, "fixNodeStartChar": 18573, "fixNodeLength": 29, "sourceBeforeFix": "NettyAsyncHttpProvider.class", "sourceAfterFix": "ApacheAsyncHttpProvider.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae95d478d3a59cdfd39d7621309f9a00b4b1bfc8", "fixCommitParentSHA1": "f8e0767386d08929f289068f44c3336ea02e40ab", "bugFilePath": "src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java\nindex c341073..1a7bb97 100644\n--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java\n@@ -551,7 +551,7 @@\n             } else if (config.getUserAgent() != null) {\n                 urlConnection.setRequestProperty(\"User-Agent\", config.getUserAgent());\n             } else {\n-                urlConnection.setRequestProperty(\"User-Agent\", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));\n+                urlConnection.setRequestProperty(\"User-Agent\", AsyncHttpProviderUtils.constructUserAgent(JDKAsyncHttpProvider.class));\n             }\n \n             if (request.getCookies() != null && !request.getCookies().isEmpty()) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 554, "bugNodeStartChar": 24993, "bugNodeLength": 28, "fixLineNum": 554, "fixNodeStartChar": 24993, "fixNodeLength": 26, "sourceBeforeFix": "NettyAsyncHttpProvider.class", "sourceAfterFix": "JDKAsyncHttpProvider.class"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a2700252c45833de9ec344792e625b1ed81fcce5", "fixCommitParentSHA1": "a4cce3b4f01a46c403c230ef9569b3a347448964", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java\nindex 088b498..c9859e9 100755\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java\n@@ -68,7 +68,7 @@\n     private HttpResponse httpResponse;\n     private final AtomicReference<ExecutionException> exEx = new AtomicReference<ExecutionException>();\n     private final AtomicInteger redirectCount = new AtomicInteger();\n-    private Future<?> reaperFuture;\n+    private volatile Future<?> reaperFuture;\n     private final AtomicBoolean inAuth = new AtomicBoolean(false);\n     private final AtomicBoolean statusReceived = new AtomicBoolean(false);\n     private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 71, "bugNodeStartChar": 2770, "bugNodeLength": 31, "fixLineNum": 71, "fixNodeStartChar": 2770, "fixNodeLength": 40, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "238869eb9e3d7b02c8a7f0d13459819912ce88d7", "fixCommitParentSHA1": "c9507e98af9a904b046642629e027c9866dcc131", "bugFilePath": "src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java b/src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java\nindex 56a86de..3d79324 100644\n--- a/src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java\n+++ b/src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java\n@@ -157,7 +157,7 @@\n         client.close();\n     }\n \n-    @Test(groups = { \"standalone\", \"default_provider\" }, enabled = false)\n+    @Test(groups = { \"standalone\", \"default_provider\" }, enabled = true)\n     public void deferredSimpleWithFailure() throws IOException,\n             ExecutionException, TimeoutException, InterruptedException {\n         AsyncHttpClient client = getAsyncHttpClient(getAsyncHttpClientConfig());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 160, "bugNodeStartChar": 5979, "bugNodeLength": 15, "fixLineNum": 160, "fixNodeStartChar": 5979, "fixNodeLength": 14, "sourceBeforeFix": "enabled=false", "sourceAfterFix": "enabled=true"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e32d877630574bdb66d6bb1ca0405c93cff18b9a", "fixCommitParentSHA1": "853ec2b737224399310914132cbcda36302a2968", "bugFilePath": "src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java\nindex 7901e62..a8489e9 100644\n--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java\n@@ -474,7 +474,7 @@\n                 host = request.getVirtualHost();\n             }\n \n-            if (uri.getPort() == -1) {\n+            if (uri.getPort() == -1 && request.getVirtualHost() != null) {\n                 urlConnection.setRequestProperty(\"Host\", host);\n             } else {\n                 urlConnection.setRequestProperty(\"Host\", host + \":\" + uri.getPort());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 477, "bugNodeStartChar": 20976, "bugNodeLength": 19, "fixLineNum": 477, "fixNodeStartChar": 20976, "fixNodeLength": 55, "sourceBeforeFix": "uri.getPort() == -1", "sourceAfterFix": "uri.getPort() == -1 && request.getVirtualHost() != null"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "fixCommitParentSHA1": "e2fd8e10e39ae5e6e7b45538c929ca63551dae18", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 2256db9..1d229b8 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -631,16 +631,16 @@\n                     nettyRequest.setContent(buffer);\n                 } else if (request.getByteData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getByteData()));\n                 } else if (request.getStringData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getStringData().getBytes(bodyCharset).length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), bodyCharset));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getStringData().getBytes(bodyCharset)));\n                 } else if (request.getStreamData() != null) {\n                     int[] lengthWrapper = new int[1];\n                     byte[] bytes = AsyncHttpProviderUtils.readFully(request.getStreamData(), lengthWrapper);\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(bytes, 0, length));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                 } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n@@ -655,7 +655,7 @@\n                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n \n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 634, "bugNodeStartChar": 28649, "bugNodeLength": 50, "fixLineNum": 634, "fixNodeStartChar": 28649, "fixNodeLength": 51, "sourceBeforeFix": "ChannelBuffers.copiedBuffer(request.getByteData())", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(request.getByteData())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "fixCommitParentSHA1": "e2fd8e10e39ae5e6e7b45538c929ca63551dae18", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 2256db9..1d229b8 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -631,16 +631,16 @@\n                     nettyRequest.setContent(buffer);\n                 } else if (request.getByteData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getByteData()));\n                 } else if (request.getStringData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getStringData().getBytes(bodyCharset).length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), bodyCharset));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getStringData().getBytes(bodyCharset)));\n                 } else if (request.getStreamData() != null) {\n                     int[] lengthWrapper = new int[1];\n                     byte[] bytes = AsyncHttpProviderUtils.readFully(request.getStreamData(), lengthWrapper);\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(bytes, 0, length));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                 } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n@@ -655,7 +655,7 @@\n                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n \n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 634, "bugNodeStartChar": 28649, "bugNodeLength": 50, "fixLineNum": 634, "fixNodeStartChar": 28649, "fixNodeLength": 51, "sourceBeforeFix": "ChannelBuffers.copiedBuffer(request.getByteData())", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(request.getByteData())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "fixCommitParentSHA1": "e2fd8e10e39ae5e6e7b45538c929ca63551dae18", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 2256db9..1d229b8 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -631,16 +631,16 @@\n                     nettyRequest.setContent(buffer);\n                 } else if (request.getByteData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getByteData()));\n                 } else if (request.getStringData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getStringData().getBytes(bodyCharset).length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), bodyCharset));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getStringData().getBytes(bodyCharset)));\n                 } else if (request.getStreamData() != null) {\n                     int[] lengthWrapper = new int[1];\n                     byte[] bytes = AsyncHttpProviderUtils.readFully(request.getStreamData(), lengthWrapper);\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(bytes, 0, length));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                 } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n@@ -655,7 +655,7 @@\n                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n \n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 643, "bugNodeStartChar": 29446, "bugNodeLength": 45, "fixLineNum": 643, "fixNodeStartChar": 29446, "fixNodeLength": 46, "sourceBeforeFix": "ChannelBuffers.copiedBuffer(bytes,0,length)", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(bytes,0,length)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "fixCommitParentSHA1": "e2fd8e10e39ae5e6e7b45538c929ca63551dae18", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 2256db9..1d229b8 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -631,16 +631,16 @@\n                     nettyRequest.setContent(buffer);\n                 } else if (request.getByteData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getByteData()));\n                 } else if (request.getStringData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getStringData().getBytes(bodyCharset).length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), bodyCharset));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getStringData().getBytes(bodyCharset)));\n                 } else if (request.getStreamData() != null) {\n                     int[] lengthWrapper = new int[1];\n                     byte[] bytes = AsyncHttpProviderUtils.readFully(request.getStreamData(), lengthWrapper);\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(bytes, 0, length));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                 } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n@@ -655,7 +655,7 @@\n                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n \n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 643, "bugNodeStartChar": 29446, "bugNodeLength": 45, "fixLineNum": 643, "fixNodeStartChar": 29446, "fixNodeLength": 46, "sourceBeforeFix": "ChannelBuffers.copiedBuffer(bytes,0,length)", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(bytes,0,length)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "fixCommitParentSHA1": "e2fd8e10e39ae5e6e7b45538c929ca63551dae18", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 2256db9..1d229b8 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -631,16 +631,16 @@\n                     nettyRequest.setContent(buffer);\n                 } else if (request.getByteData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getByteData()));\n                 } else if (request.getStringData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getStringData().getBytes(bodyCharset).length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), bodyCharset));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getStringData().getBytes(bodyCharset)));\n                 } else if (request.getStreamData() != null) {\n                     int[] lengthWrapper = new int[1];\n                     byte[] bytes = AsyncHttpProviderUtils.readFully(request.getStreamData(), lengthWrapper);\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(bytes, 0, length));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                 } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n@@ -655,7 +655,7 @@\n                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n \n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 658, "bugNodeStartChar": 30354, "bugNodeLength": 64, "fixLineNum": 658, "fixNodeStartChar": 30354, "fixNodeLength": 65, "sourceBeforeFix": "ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset))", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "fixCommitParentSHA1": "e2fd8e10e39ae5e6e7b45538c929ca63551dae18", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 2256db9..1d229b8 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -631,16 +631,16 @@\n                     nettyRequest.setContent(buffer);\n                 } else if (request.getByteData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getByteData()));\n                 } else if (request.getStringData() != null) {\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getStringData().getBytes(bodyCharset).length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), bodyCharset));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(request.getStringData().getBytes(bodyCharset)));\n                 } else if (request.getStreamData() != null) {\n                     int[] lengthWrapper = new int[1];\n                     byte[] bytes = AsyncHttpProviderUtils.readFully(request.getStreamData(), lengthWrapper);\n                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(bytes, 0, length));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                 } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n@@ -655,7 +655,7 @@\n                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n-                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n+                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n \n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 658, "bugNodeStartChar": 30354, "bugNodeLength": 64, "fixLineNum": 658, "fixNodeStartChar": 30354, "fixNodeLength": 65, "sourceBeforeFix": "ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset))", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ab5a7ef672ad1268304a9f75e2d6a6e86b51f449", "fixCommitParentSHA1": "ce45f13b4dc0a178634b65ae45e0d393bf5ee697", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java\nindex 1321cf8..52a121c 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java\n@@ -30,7 +30,7 @@\n  */\n public class NettyConnectionsPool implements ConnectionsPool<String, Channel> {\n \n-    private final static Logger log = LoggerFactory.getLogger(NettyAsyncHttpProvider.class);\n+    private final static Logger log = LoggerFactory.getLogger(NettyConnectionsPool.class);\n     private final ConcurrentHashMap<String, ConcurrentLinkedQueue<IdleChannel>> connectionsPool = new ConcurrentHashMap<String, ConcurrentLinkedQueue<IdleChannel>>();\n     private final ConcurrentHashMap<Channel, IdleChannel> channel2IdleChannel = new ConcurrentHashMap<Channel, IdleChannel>();\n     private final AtomicBoolean isClosed = new AtomicBoolean(false);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 33, "bugNodeStartChar": 1422, "bugNodeLength": 28, "fixLineNum": 33, "fixNodeStartChar": 1422, "fixNodeLength": 26, "sourceBeforeFix": "NettyAsyncHttpProvider.class", "sourceAfterFix": "NettyConnectionsPool.class"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4038c28564a0b729932059be31b512fc38b8f184", "fixCommitParentSHA1": "26d4a37b1cbe6c1f5fda8f5d5b01bcc274f99142", "bugFilePath": "src/test/java/com/ning/http/client/async/RemoteSiteTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/RemoteSiteTest.java b/src/test/java/com/ning/http/client/async/RemoteSiteTest.java\nindex 148f839..ebf49b6 100644\n--- a/src/test/java/com/ning/http/client/async/RemoteSiteTest.java\n+++ b/src/test/java/com/ning/http/client/async/RemoteSiteTest.java\n@@ -254,7 +254,7 @@\n             }\n         }).get(10, TimeUnit.SECONDS);\n         assertNotNull(response);\n-        assertEquals(response.getResponseBody().length(), 3876);\n+        assertEquals(response.getResponseBody().length(), 3873);\n     }\n \n }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 257, "bugNodeStartChar": 10221, "bugNodeLength": 55, "fixLineNum": 257, "fixNodeStartChar": 10221, "fixNodeLength": 55, "sourceBeforeFix": "assertEquals(response.getResponseBody().length(),3876)", "sourceAfterFix": "assertEquals(response.getResponseBody().length(),3873)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "76063c69b78baee602935b2296eeac234030b5de", "fixCommitParentSHA1": "5e589785faada0d4d7bd69b2646294d5feaa9d2f", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 26847e2..70edc5c 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1754,7 +1754,7 @@\n                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n \n-                finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n+                markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n \n                 this.nettyResponseFuture = null;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1757, "bugNodeStartChar": 77241, "bugNodeLength": 77, "fixLineNum": 1757, "fixNodeStartChar": 77241, "fixNodeLength": 86, "sourceBeforeFix": "finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))", "sourceAfterFix": "markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "76063c69b78baee602935b2296eeac234030b5de", "fixCommitParentSHA1": "5e589785faada0d4d7bd69b2646294d5feaa9d2f", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 26847e2..70edc5c 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1754,7 +1754,7 @@\n                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n \n-                finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n+                markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n \n                 this.nettyResponseFuture = null;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1757, "bugNodeStartChar": 77241, "bugNodeLength": 77, "fixLineNum": 1757, "fixNodeStartChar": 77241, "fixNodeLength": 86, "sourceBeforeFix": "finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))", "sourceAfterFix": "markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "fixCommitParentSHA1": "874b3af952c5b37d35387428d51c549feb55457a", "bugFilePath": "src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java\nindex 083561b..e0890d2 100644\n--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java\n@@ -74,7 +74,7 @@\n \n     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n@@ -113,7 +113,7 @@\n     \n     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 77, "bugNodeStartChar": 2686, "bugNodeLength": 19, "fixLineNum": 77, "fixNodeStartChar": 2686, "fixNodeLength": 38, "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "fixCommitParentSHA1": "874b3af952c5b37d35387428d51c549feb55457a", "bugFilePath": "src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java\nindex 083561b..e0890d2 100644\n--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java\n@@ -74,7 +74,7 @@\n \n     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n@@ -113,7 +113,7 @@\n     \n     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 116, "bugNodeStartChar": 3925, "bugNodeLength": 19, "fixLineNum": 116, "fixNodeStartChar": 3925, "fixNodeLength": 38, "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "fixCommitParentSHA1": "874b3af952c5b37d35387428d51c549feb55457a", "bugFilePath": "src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java\nindex 98642a6..c14b1aa 100644\n--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java\n@@ -77,7 +77,7 @@\n \n     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n@@ -166,7 +166,7 @@\n \n     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 80, "bugNodeStartChar": 2823, "bugNodeLength": 19, "fixLineNum": 80, "fixNodeStartChar": 2823, "fixNodeLength": 38, "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "fixCommitParentSHA1": "874b3af952c5b37d35387428d51c549feb55457a", "bugFilePath": "src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java\nindex 98642a6..c14b1aa 100644\n--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java\n@@ -77,7 +77,7 @@\n \n     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n@@ -166,7 +166,7 @@\n \n     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 169, "bugNodeStartChar": 5523, "bugNodeLength": 19, "fixLineNum": 169, "fixNodeStartChar": 5523, "fixNodeLength": 38, "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "fixCommitParentSHA1": "874b3af952c5b37d35387428d51c549feb55457a", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java\nindex 3c84f91..2ab9966 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java\n@@ -80,7 +80,7 @@\n \n     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n@@ -124,7 +124,7 @@\n \n     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 83, "bugNodeStartChar": 2775, "bugNodeLength": 19, "fixLineNum": 83, "fixNodeStartChar": 2775, "fixNodeLength": 38, "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "fixCommitParentSHA1": "874b3af952c5b37d35387428d51c549feb55457a", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java\nindex 3c84f91..2ab9966 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java\n@@ -80,7 +80,7 @@\n \n     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n@@ -124,7 +124,7 @@\n \n     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n-        if (contentType != null) {\n+        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 127, "bugNodeStartChar": 4224, "bugNodeLength": 19, "fixLineNum": 127, "fixNodeStartChar": 4224, "fixNodeLength": 38, "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2fa859e14182dfe803e2699e0e187fe0f310beac", "fixCommitParentSHA1": "599ed39b55c600986c60055a48fe048999ffaa1a", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex c5226c5..410b24e 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -846,7 +846,7 @@\n                 }\n     \n                 abort(future, new TimeoutException(\"No response received. Connection timed out after \"\n-                        + config.getIdleConnectionTimeoutInMs()));\n+                        + config.getIdleConnectionInPoolTimeoutInMs()));\n             }\n         } else {\n           log.warn(\"null attachment on ChannelHandlerContext {}\", ctx);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 849, "bugNodeStartChar": 38663, "bugNodeLength": 37, "fixLineNum": 849, "fixNodeStartChar": 38663, "fixNodeLength": 43, "sourceBeforeFix": "config.getIdleConnectionTimeoutInMs()", "sourceAfterFix": "config.getIdleConnectionInPoolTimeoutInMs()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2fa859e14182dfe803e2699e0e187fe0f310beac", "fixCommitParentSHA1": "599ed39b55c600986c60055a48fe048999ffaa1a", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex c5226c5..410b24e 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -846,7 +846,7 @@\n                 }\n     \n                 abort(future, new TimeoutException(\"No response received. Connection timed out after \"\n-                        + config.getIdleConnectionTimeoutInMs()));\n+                        + config.getIdleConnectionInPoolTimeoutInMs()));\n             }\n         } else {\n           log.warn(\"null attachment on ChannelHandlerContext {}\", ctx);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 849, "bugNodeStartChar": 38663, "bugNodeLength": 37, "fixLineNum": 849, "fixNodeStartChar": 38663, "fixNodeLength": 43, "sourceBeforeFix": "config.getIdleConnectionTimeoutInMs()", "sourceAfterFix": "config.getIdleConnectionInPoolTimeoutInMs()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 410, "bugNodeStartChar": 15966, "bugNodeLength": 205, "fixLineNum": 410, "fixNodeStartChar": 15966, "fixNodeLength": 198, "sourceBeforeFix": "public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } ", "sourceAfterFix": "public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 415, "bugNodeStartChar": 16181, "bugNodeLength": 177, "fixLineNum": 415, "fixNodeStartChar": 16181, "fixNodeLength": 170, "sourceBeforeFix": "public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } ", "sourceAfterFix": "public Builder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 430, "bugNodeStartChar": 16800, "bugNodeLength": 187, "fixLineNum": 430, "fixNodeStartChar": 16800, "fixNodeLength": 180, "sourceBeforeFix": "public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } ", "sourceAfterFix": "public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 435, "bugNodeStartChar": 16997, "bugNodeLength": 177, "fixLineNum": 435, "fixNodeStartChar": 16997, "fixNodeLength": 170, "sourceBeforeFix": "public DerivedBuilder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } ", "sourceAfterFix": "public Builder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 440, "bugNodeStartChar": 17184, "bugNodeLength": 140, "fixLineNum": 440, "fixNodeStartChar": 17184, "fixNodeLength": 133, "sourceBeforeFix": "public DerivedBuilder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } ", "sourceAfterFix": "public Builder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 445, "bugNodeStartChar": 17334, "bugNodeLength": 193, "fixLineNum": 445, "fixNodeStartChar": 17334, "fixNodeLength": 186, "sourceBeforeFix": "public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } ", "sourceAfterFix": "public Builder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 450, "bugNodeStartChar": 17537, "bugNodeLength": 182, "fixLineNum": 450, "fixNodeStartChar": 17537, "fixNodeLength": 175, "sourceBeforeFix": "public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } ", "sourceAfterFix": "public Builder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 455, "bugNodeStartChar": 17729, "bugNodeLength": 185, "fixLineNum": 455, "fixNodeStartChar": 17729, "fixNodeLength": 178, "sourceBeforeFix": "public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } ", "sourceAfterFix": "public Builder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 460, "bugNodeStartChar": 17924, "bugNodeLength": 178, "fixLineNum": 460, "fixNodeStartChar": 17924, "fixNodeLength": 171, "sourceBeforeFix": "public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } ", "sourceAfterFix": "public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 465, "bugNodeStartChar": 18112, "bugNodeLength": 154, "fixLineNum": 465, "fixNodeStartChar": 18112, "fixNodeLength": 147, "sourceBeforeFix": "public DerivedBuilder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } ", "sourceAfterFix": "public Builder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 470, "bugNodeStartChar": 18276, "bugNodeLength": 193, "fixLineNum": 470, "fixNodeStartChar": 18276, "fixNodeLength": 186, "sourceBeforeFix": "public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } ", "sourceAfterFix": "public Builder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 475, "bugNodeStartChar": 18479, "bugNodeLength": 127, "fixLineNum": 475, "fixNodeStartChar": 18479, "fixNodeLength": 120, "sourceBeforeFix": "public DerivedBuilder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } ", "sourceAfterFix": "public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 485, "bugNodeStartChar": 18758, "bugNodeLength": 135, "fixLineNum": 485, "fixNodeStartChar": 18758, "fixNodeLength": 128, "sourceBeforeFix": "public DerivedBuilder setRealmPassword(String password){   realm().setPassword(password);   return this; } ", "sourceAfterFix": "public Builder setRealmPassword(String password){   realm().setPassword(password);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 490, "bugNodeStartChar": 18903, "bugNodeLength": 137, "fixLineNum": 490, "fixNodeStartChar": 18903, "fixNodeLength": 130, "sourceBeforeFix": "public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } ", "sourceAfterFix": "public Builder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 495, "bugNodeStartChar": 19050, "bugNodeLength": 134, "fixLineNum": 495, "fixNodeStartChar": 19050, "fixNodeLength": 127, "sourceBeforeFix": "public DerivedBuilder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } ", "sourceAfterFix": "public Builder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 500, "bugNodeStartChar": 19194, "bugNodeLength": 172, "fixLineNum": 500, "fixNodeStartChar": 19194, "fixNodeLength": 165, "sourceBeforeFix": "public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } ", "sourceAfterFix": "public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 505, "bugNodeStartChar": 19376, "bugNodeLength": 127, "fixLineNum": 505, "fixNodeStartChar": 19376, "fixNodeLength": 120, "sourceBeforeFix": "public DerivedBuilder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } ", "sourceAfterFix": "public Builder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 520, "bugNodeStartChar": 19787, "bugNodeLength": 139, "fixLineNum": 520, "fixNodeStartChar": 19787, "fixNodeLength": 132, "sourceBeforeFix": "public DerivedBuilder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } ", "sourceAfterFix": "public Builder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 525, "bugNodeStartChar": 19936, "bugNodeLength": 135, "fixLineNum": 525, "fixNodeStartChar": 19936, "fixNodeLength": 128, "sourceBeforeFix": "public DerivedBuilder setProxyPassword(String password){   this.proxyPassword=password;   return this; } ", "sourceAfterFix": "public Builder setProxyPassword(String password){   this.proxyPassword=password;   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 530, "bugNodeStartChar": 20081, "bugNodeLength": 116, "fixLineNum": 530, "fixNodeStartChar": 20081, "fixNodeLength": 109, "sourceBeforeFix": "public DerivedBuilder setProxyPort(int port){   this.proxyPort=port;   return this; } ", "sourceAfterFix": "public Builder setProxyPort(int port){   this.proxyPort=port;   return this; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb", "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4", "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 535, "bugNodeStartChar": 20215, "bugNodeLength": 189, "fixLineNum": 535, "fixNodeStartChar": 20215, "fixNodeLength": 182, "sourceBeforeFix": "public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } ", "sourceAfterFix": "public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0c587bb3062930d4ce05fbd5924efa1d3ff5aaa0", "fixCommitParentSHA1": "7a89149b232878751287fa05592eb1e33b38ef93", "bugFilePath": "src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java b/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java\nindex 1885344..99b1357 100644\n--- a/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java\n+++ b/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java\n@@ -120,7 +120,7 @@\n     /**\n      * See https://issues.sonatype.org/browse/AHC-5\n      */\n-    @Test(groups = {\"standalone\", \"default_provider\"}, enabled = false)\n+    @Test(groups = {\"standalone\", \"default_provider\"}, enabled = true)\n     public void testPutZeroBytesFileTest() throws Throwable {\n         System.err.println(\"setting up client\");\n         SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 123, "bugNodeStartChar": 4955, "bugNodeLength": 15, "fixLineNum": 123, "fixNodeStartChar": 4955, "fixNodeLength": 14, "sourceBeforeFix": "enabled=false", "sourceAfterFix": "enabled=true"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "367624a55c924ff484bbccfb2020a2cebb59c224", "fixCommitParentSHA1": "50fe65bde09d2d93077e1602cbc154a722aefc36", "bugFilePath": "src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\nindex 7826200..617b47e 100755\n--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\n+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\n@@ -1503,7 +1503,7 @@\n             Assert.fail();\n         } catch (Throwable ex) {\n             System.out.println(\"EXPIRED: \" + (System.currentTimeMillis() - t1));\n-            Assert.assertNull(ex.getCause());\n+            Assert.assertNotNull(ex.getCause());\n             Assert.assertEquals(ex.getCause().getMessage(), \"No response received after 10000\");\n         }\n         c.close();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1506, "bugNodeStartChar": 56212, "bugNodeLength": 32, "fixLineNum": 1506, "fixNodeStartChar": 56212, "fixNodeLength": 35, "sourceBeforeFix": "Assert.assertNull(ex.getCause())", "sourceAfterFix": "Assert.assertNotNull(ex.getCause())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "367624a55c924ff484bbccfb2020a2cebb59c224", "fixCommitParentSHA1": "50fe65bde09d2d93077e1602cbc154a722aefc36", "bugFilePath": "src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\nindex 7826200..617b47e 100755\n--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\n+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\n@@ -1503,7 +1503,7 @@\n             Assert.fail();\n         } catch (Throwable ex) {\n             System.out.println(\"EXPIRED: \" + (System.currentTimeMillis() - t1));\n-            Assert.assertNull(ex.getCause());\n+            Assert.assertNotNull(ex.getCause());\n             Assert.assertEquals(ex.getCause().getMessage(), \"No response received after 10000\");\n         }\n         c.close();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1506, "bugNodeStartChar": 56212, "bugNodeLength": 32, "fixLineNum": 1506, "fixNodeStartChar": 56212, "fixNodeLength": 35, "sourceBeforeFix": "Assert.assertNull(ex.getCause())", "sourceAfterFix": "Assert.assertNotNull(ex.getCause())"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e79d8d69828a8fb2bb5f069c9fddf67323bb1ef0", "fixCommitParentSHA1": "c0243c99a32bb986c3be3d3d2fd6c5977548456f", "bugFilePath": "src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\nindex 407f738..d6c3d02 100644\n--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java\n@@ -167,7 +167,7 @@\n         }\n \n         int requestTimeout = requestTimeout(config, request.getPerRequestConfig());\n-        if (config.getIdleConnectionTimeoutInMs() > 0) {\n+        if (config.getIdleConnectionTimeoutInMs() > 0 && requestTimeout != -1 && requestTimeout < config.getIdleConnectionTimeoutInMs()) {\n             idleConnectionTimeoutThread = new IdleConnectionTimeoutThread();\n             idleConnectionTimeoutThread.setConnectionTimeout(config.getIdleConnectionTimeoutInMs());\n             idleConnectionTimeoutThread.addConnectionManager(connectionManager);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 170, "bugNodeStartChar": 7697, "bugNodeLength": 41, "fixLineNum": 170, "fixNodeStartChar": 7697, "fixNodeLength": 123, "sourceBeforeFix": "config.getIdleConnectionTimeoutInMs() > 0", "sourceAfterFix": "config.getIdleConnectionTimeoutInMs() > 0 && requestTimeout != -1 && requestTimeout < config.getIdleConnectionTimeoutInMs()"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1f680192fefd2fde7f5e10fb1a34792a50e3246c", "fixCommitParentSHA1": "5112846b742d7bcb08310fdb02aaf449b3a00b2b", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java\nindex 2ed40bb..ebe3f03 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java\n@@ -230,7 +230,7 @@\n      */\n     /* @Override */\n     public boolean hasResponseStatus() {\n-        return (bodyParts != null ? true : false);\n+        return (status != null ? true : false);\n     }\n \n     /**\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 233, "bugNodeStartChar": 7922, "bugNodeLength": 17, "fixLineNum": 233, "fixNodeStartChar": 7922, "fixNodeLength": 14, "sourceBeforeFix": "bodyParts != null", "sourceAfterFix": "status != null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1f680192fefd2fde7f5e10fb1a34792a50e3246c", "fixCommitParentSHA1": "5112846b742d7bcb08310fdb02aaf449b3a00b2b", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java\nindex 2ed40bb..ebe3f03 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java\n@@ -230,7 +230,7 @@\n      */\n     /* @Override */\n     public boolean hasResponseStatus() {\n-        return (bodyParts != null ? true : false);\n+        return (status != null ? true : false);\n     }\n \n     /**\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 233, "bugNodeStartChar": 7922, "bugNodeLength": 17, "fixLineNum": 233, "fixNodeStartChar": 7922, "fixNodeLength": 14, "sourceBeforeFix": "bodyParts != null", "sourceAfterFix": "status != null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f6d744886d5c1da6df47a510efe629974e2a5715", "fixCommitParentSHA1": "bf42f20e1bdf48c14bb103c8100bf55c3992e1c3", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 481cd87..e56b874 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -908,7 +908,7 @@\n                             }\n                         });\n                     } else {\n-                        nextRequest(request, future);\n+                        nextRequest(newRequest, future);\n                     }\n                 }\n \n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 911, "bugNodeStartChar": 40658, "bugNodeLength": 28, "fixLineNum": 911, "fixNodeStartChar": 40658, "fixNodeLength": 31, "sourceBeforeFix": "nextRequest(request,future)", "sourceAfterFix": "nextRequest(newRequest,future)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "5c2c075b4b31b12c4970f6a77ab0cc6e3702421a", "fixCommitParentSHA1": "b4a6dbd103ec611f70879cfc78fc5cce5c63a4e6", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 421ad83..dfc12a3 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -208,7 +208,7 @@\n             if (asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.EXECUTE_ASYNC_CONNECT) != null) {\n                 executeConnectAsync = true;\n             } else if (asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.DISABLE_NESTED_REQUEST) != null) {\n-                DefaultChannelFuture.setUseDeadLockChecker(false);\n+                DefaultChannelFuture.setUseDeadLockChecker(true);\n             }\n         }\n     }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 211, "bugNodeStartChar": 9249, "bugNodeLength": 49, "fixLineNum": 211, "fixNodeStartChar": 9249, "fixNodeLength": 48, "sourceBeforeFix": "DefaultChannelFuture.setUseDeadLockChecker(false)", "sourceAfterFix": "DefaultChannelFuture.setUseDeadLockChecker(true)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "89f3f214bc93ff306602ed8945b30aaa92523137", "fixCommitParentSHA1": "1c01ad33d67824664e3a479abdbfeb0c2db0cdcf", "bugFilePath": "src/main/java/com/ning/http/client/AsyncHttpClient.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/AsyncHttpClient.java b/src/main/java/com/ning/http/client/AsyncHttpClient.java\nindex 3555bd3..467fd24 100755\n--- a/src/main/java/com/ning/http/client/AsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/AsyncHttpClient.java\n@@ -363,7 +363,7 @@\n \n     @Override\n     protected void finalize() throws Throwable {\n-        if (!isClosed.get()) {\n+        if (isClosed.get()) {\n             close();\n         }\n         super.finalize();\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 366, "bugNodeStartChar": 13916, "bugNodeLength": 15, "fixLineNum": 366, "fixNodeStartChar": 13916, "fixNodeLength": 14, "sourceBeforeFix": "!isClosed.get()", "sourceAfterFix": "isClosed.get()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "6b8aba0b3f75950016c50a2d45baa50f3ce34235", "fixCommitParentSHA1": "459431a1bc63aa140ca61ff67af89a7eacc387ca", "bugFilePath": "src/main/java/com/ning/http/util/SslUtils.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/util/SslUtils.java b/src/main/java/com/ning/http/util/SslUtils.java\nindex 90897b0..55cd47d 100644\n--- a/src/main/java/com/ning/http/util/SslUtils.java\n+++ b/src/main/java/com/ning/http/util/SslUtils.java\n@@ -51,7 +51,7 @@\n     public static SSLContext getSSLContext()\n             throws GeneralSecurityException, IOException {\n         SSLConfig config = new SSLConfig();\n-        if (config.keyStoreLocation == null || config.trustStoreLocation != null) {\n+        if (config.keyStoreLocation == null || config.trustStoreLocation == null) {\n             return getLooseSSLContext();\n         } else {\n             return getStrictSSLContext(config);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 54, "bugNodeStartChar": 1849, "bugNodeLength": 33, "fixLineNum": 54, "fixNodeStartChar": 1849, "fixNodeLength": 33, "sourceBeforeFix": "config.trustStoreLocation != null", "sourceAfterFix": "config.trustStoreLocation == null"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5e22e43ab5b4e6d43fc3ae7400f5860363428937", "fixCommitParentSHA1": "553d1db3e328802db1b40a53a357e25bb78351cc", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex c58d831..673a25b 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1004,7 +1004,7 @@\n \n             // Windows only.\n             if (abortOnRemoteCloseException(cause)){\n-                log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \", channel));\n+                log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \", channel));\n                 remotelyClosed(channel, null);\n                 return;\n             }\n@@ -1025,9 +1025,8 @@\n     }\n \n     /**\n-     * On windows, there is scenario where the connection get broken and the only way we can find it is by inspecting\n+     * On Windows, there is scenario where the connection get broken and the only way we can find it is by inspecting\n      * the stack trace in order to catch the following exception:\n-     *\n      *\n      * java.io.IOException: An established connection was aborted by the software in your host machine\n         at sun.nio.ch.SocketDispatcher.read0(Native Method)\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1007, "bugNodeStartChar": 44139, "bugNodeLength": 95, "fixLineNum": 1007, "fixNodeStartChar": 44139, "fixNodeLength": 95, "sourceBeforeFix": "log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))", "sourceAfterFix": "log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5e22e43ab5b4e6d43fc3ae7400f5860363428937", "fixCommitParentSHA1": "553d1db3e328802db1b40a53a357e25bb78351cc", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex c58d831..673a25b 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1004,7 +1004,7 @@\n \n             // Windows only.\n             if (abortOnRemoteCloseException(cause)){\n-                log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \", channel));\n+                log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \", channel));\n                 remotelyClosed(channel, null);\n                 return;\n             }\n@@ -1025,9 +1025,8 @@\n     }\n \n     /**\n-     * On windows, there is scenario where the connection get broken and the only way we can find it is by inspecting\n+     * On Windows, there is scenario where the connection get broken and the only way we can find it is by inspecting\n      * the stack trace in order to catch the following exception:\n-     *\n      *\n      * java.io.IOException: An established connection was aborted by the software in your host machine\n         at sun.nio.ch.SocketDispatcher.read0(Native Method)\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1007, "bugNodeStartChar": 44139, "bugNodeLength": 95, "fixLineNum": 1007, "fixNodeStartChar": 44139, "fixNodeLength": 95, "sourceBeforeFix": "log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))", "sourceAfterFix": "log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b1a720418caea7e28d6b325727f46f17818af95e", "fixCommitParentSHA1": "d52b846bec51a01ceee1a071b4cbf36706372f04", "bugFilePath": "src/main/java/com/ning/http/client/AsyncHttpClientConfig.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java\nindex 87f85bf..be78015 100644\n--- a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java\n+++ b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java\n@@ -42,7 +42,7 @@\n  */\n public class AsyncHttpClientConfig {\n \n-    private final static String ASYNC_CLIENT = AsyncHttpClient.class.getName() + \".\";\n+    private final static String ASYNC_CLIENT = AsyncHttpClientConfig.class.getName() + \".\";\n \n     private final int maxTotalConnections;\n     private final int maxConnectionPerHost;\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 45, "bugNodeStartChar": 1875, "bugNodeLength": 21, "fixLineNum": 45, "fixNodeStartChar": 1875, "fixNodeLength": 27, "sourceBeforeFix": "AsyncHttpClient.class", "sourceAfterFix": "AsyncHttpClientConfig.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "dfe3f3d12a21b271da997afe5ee408453630e034", "fixCommitParentSHA1": "8c62f3ea9c647ab057f3d9d4d1fef5d76b52e8e8", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 1883956..9d49865 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -377,7 +377,7 @@\n                     .append(getPort(uri)).toString());\n             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.toString());\n         } else if (config.getProxyServer() != null || request.getProxyServer() != null) {\n-            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.getPath());\n+            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());\n         } else {\n             StringBuilder path = new StringBuilder(uri.getRawPath());\n             if (uri.getQuery() != null) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 380, "bugNodeStartChar": 16602, "bugNodeLength": 13, "fixLineNum": 380, "fixNodeStartChar": 16602, "fixNodeLength": 14, "sourceBeforeFix": "uri.getPath()", "sourceAfterFix": "uri.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dfe3f3d12a21b271da997afe5ee408453630e034", "fixCommitParentSHA1": "8c62f3ea9c647ab057f3d9d4d1fef5d76b52e8e8", "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 1883956..9d49865 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -377,7 +377,7 @@\n                     .append(getPort(uri)).toString());\n             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.toString());\n         } else if (config.getProxyServer() != null || request.getProxyServer() != null) {\n-            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.getPath());\n+            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());\n         } else {\n             StringBuilder path = new StringBuilder(uri.getRawPath());\n             if (uri.getQuery() != null) {\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 380, "bugNodeStartChar": 16602, "bugNodeLength": 13, "fixLineNum": 380, "fixNodeStartChar": 16602, "fixNodeLength": 14, "sourceBeforeFix": "uri.getPath()", "sourceAfterFix": "uri.toString()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b74ada90bf9bd92d33c6bc75e3564388c7eddf57", "fixCommitParentSHA1": "81c6a68ac8c06202b3f67934a864f0fd40dadbb3", "bugFilePath": "src/main/java/com/ning/http/client/Realm.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/Realm.java b/src/main/java/com/ning/http/client/Realm.java\nindex 09b57b2..5a9c22d 100644\n--- a/src/main/java/com/ning/http/client/Realm.java\n+++ b/src/main/java/com/ning/http/client/Realm.java\n@@ -153,7 +153,7 @@\n         return result;\n     }\n \n-    public class Builder {\n+    public static class Builder {\n \n         private String principal = \"\";\n         private String password = \"\";\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 156, "bugNodeStartChar": 4856, "bugNodeLength": 2997, "fixLineNum": 156, "fixNodeStartChar": 4856, "fixNodeLength": 3004, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ffb96835136342d696294fc0b82d8088a92847f7", "fixCommitParentSHA1": "15ff2275cb90d0e8f8ee4ba1fbaccdd032a3a190", "bugFilePath": "src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\nindex 10afe1f..19b3243 100755\n--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\n+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java\n@@ -1373,7 +1373,7 @@\n     public void testAwsS3() throws Exception {\n         final AsyncHttpClient c = new AsyncHttpClient(new Builder().build());\n         Response response = c.prepareGet(\"http://test.s3.amazonaws.com/\").execute().get();\n-        if (response.getResponseBody() == null || response.getResponseBody().isEmpty()) {\n+        if (response.getResponseBody() == null || response.getResponseBody().equals(\"\")) {\n             fail(\"No response Body\");\n         } else {\n             assertEquals(response.getStatusCode(), 403);\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 1376, "bugNodeStartChar": 50504, "bugNodeLength": 36, "fixLineNum": 1376, "fixNodeStartChar": 50504, "fixNodeLength": 37, "sourceBeforeFix": "response.getResponseBody().isEmpty()", "sourceAfterFix": "response.getResponseBody().equals(\"\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d41544432198f27825f44e650aa0190cf280e8ff", "fixCommitParentSHA1": "559273d2e4e240b5792767f9f61b479ed3e9fe2b", "bugFilePath": "src/test/java/com/ning/http/client/async/PostWithQSTest.java", "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/PostWithQSTest.java b/src/test/java/com/ning/http/client/async/PostWithQSTest.java\nindex 9e16598..b40b132 100644\n--- a/src/test/java/com/ning/http/client/async/PostWithQSTest.java\n+++ b/src/test/java/com/ning/http/client/async/PostWithQSTest.java\n@@ -41,7 +41,7 @@\n             if (\"POST\".equalsIgnoreCase(request.getMethod())) {\n                 String qs = request.getQueryString();\n                 ServletInputStream is = request.getInputStream();\n-                if (qs != null && !qs.isEmpty() && is.available() == 3) {\n+                if (qs != null && !qs.equals(\"\") && is.available() == 3) {\n                     response.setStatus(HttpServletResponse.SC_OK);\n                     byte buf[] = new byte[is.available()];\n                     is.readLine(buf, 0, is.available());\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 44, "bugNodeStartChar": 1628, "bugNodeLength": 12, "fixLineNum": 44, "fixNodeStartChar": 1628, "fixNodeLength": 13, "sourceBeforeFix": "qs.isEmpty()", "sourceAfterFix": "qs.equals(\"\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "fixCommitParentSHA1": "141a7f69dc05054e1cb02b894f4b77f83a0a258d", "bugFilePath": "src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java\nindex c061ca1..e83ac10 100644\n--- a/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java\n@@ -106,7 +106,7 @@\n \n     private final AsyncHttpClientConfig config;\n \n-    private final ConcurrentHashMap<Url, Channel> connectionsPool = new ConcurrentHashMap<Url, Channel>();\n+    private final ConcurrentHashMap<String, Channel> connectionsPool = new ConcurrentHashMap<String, Channel>();\n \n     private volatile int maxConnectionsPerHost;\n     private final HashedWheelTimer timer = new HashedWheelTimer();\n@@ -162,7 +162,7 @@\n     }\n \n     private Channel lookupInCache(Url url) {\n-        Channel channel = connectionsPool.get(url);\n+        Channel channel = connectionsPool.get(url.getBaseUrl());\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.\n@@ -172,7 +172,7 @@\n             if (channel.isOpen()) {\n                 channel.setReadable(true);\n             } else {\n-                connectionsPool.remove(url);\n+                connectionsPool.remove(url.getBaseUrl());\n             }\n         }\n         return channel;\n@@ -461,7 +461,7 @@\n \n     public void close() {\n         isClose.set(true);\n-        Iterator<Entry<Url, Channel>> i = connectionsPool.entrySet().iterator();\n+        Iterator<Entry<String, Channel>> i = connectionsPool.entrySet().iterator();\n         while (i.hasNext()) {\n             i.next().getValue().close();\n         }\n@@ -640,7 +640,7 @@\n \n     private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {\n         if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {\n-            connectionsPool.put(future.getUrl(), channel);\n+            connectionsPool.put(future.getUrl().getBaseUrl(), channel);\n         } else {\n             connectionsPool.remove(future.getUrl());\n         }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 109, "bugNodeStartChar": 4744, "bugNodeLength": 31, "fixLineNum": 109, "fixNodeStartChar": 4744, "fixNodeLength": 34, "sourceBeforeFix": "ConcurrentHashMap<Url,Channel>", "sourceAfterFix": "ConcurrentHashMap<String,Channel>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "fixCommitParentSHA1": "141a7f69dc05054e1cb02b894f4b77f83a0a258d", "bugFilePath": "src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java", "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java\nindex c061ca1..e83ac10 100644\n--- a/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java\n@@ -106,7 +106,7 @@\n \n     private final AsyncHttpClientConfig config;\n \n-    private final ConcurrentHashMap<Url, Channel> connectionsPool = new ConcurrentHashMap<Url, Channel>();\n+    private final ConcurrentHashMap<String, Channel> connectionsPool = new ConcurrentHashMap<String, Channel>();\n \n     private volatile int maxConnectionsPerHost;\n     private final HashedWheelTimer timer = new HashedWheelTimer();\n@@ -162,7 +162,7 @@\n     }\n \n     private Channel lookupInCache(Url url) {\n-        Channel channel = connectionsPool.get(url);\n+        Channel channel = connectionsPool.get(url.getBaseUrl());\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.\n@@ -172,7 +172,7 @@\n             if (channel.isOpen()) {\n                 channel.setReadable(true);\n             } else {\n-                connectionsPool.remove(url);\n+                connectionsPool.remove(url.getBaseUrl());\n             }\n         }\n         return channel;\n@@ -461,7 +461,7 @@\n \n     public void close() {\n         isClose.set(true);\n-        Iterator<Entry<Url, Channel>> i = connectionsPool.entrySet().iterator();\n+        Iterator<Entry<String, Channel>> i = connectionsPool.entrySet().iterator();\n         while (i.hasNext()) {\n             i.next().getValue().close();\n         }\n@@ -640,7 +640,7 @@\n \n     private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {\n         if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {\n-            connectionsPool.put(future.getUrl(), channel);\n+            connectionsPool.put(future.getUrl().getBaseUrl(), channel);\n         } else {\n             connectionsPool.remove(future.getUrl());\n         }\n", "projectName": "AsyncHttpClient.async-http-client", "bugLineNum": 464, "bugNodeStartChar": 20103, "bugNodeLength": 19, "fixLineNum": 464, "fixNodeStartChar": 20103, "fixNodeLength": 22, "sourceBeforeFix": "Entry<Url,Channel>", "sourceAfterFix": "Entry<String,Channel>"}]