[
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "1bb9207c9bf3079bf64050aadd21ab4735511db3",
    "fixCommitParentSHA1": "ebf4efe3eabe4da73a3119e8e24b11d97ac5180f",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java\nindex 71597b6..d62aca3 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java\n@@ -111,7 +111,7 @@\n      * @return true if act as Restful index method, false otherwise\n      */\n     public boolean isRestfulIndex() {\n-        return \"GET\".equals(httpMethod) && \"\".equals(pathWithoutBaseName());\n+        return \"GET\".equalsIgnoreCase(httpMethod) && \"\".equals(pathWithoutBaseName());\n     }\n \n     /**\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 114,
    "bugNodeStartChar": 4117,
    "bugNodeLength": 24,
    "fixLineNum": 114,
    "fixNodeStartChar": 4117,
    "fixNodeLength": 34,
    "sourceBeforeFix": "\"GET\".equals(httpMethod)",
    "sourceAfterFix": "\"GET\".equalsIgnoreCase(httpMethod)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1bb9207c9bf3079bf64050aadd21ab4735511db3",
    "fixCommitParentSHA1": "ebf4efe3eabe4da73a3119e8e24b11d97ac5180f",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java\nindex 71597b6..d62aca3 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/CodegenOperation.java\n@@ -111,7 +111,7 @@\n      * @return true if act as Restful index method, false otherwise\n      */\n     public boolean isRestfulIndex() {\n-        return \"GET\".equals(httpMethod) && \"\".equals(pathWithoutBaseName());\n+        return \"GET\".equalsIgnoreCase(httpMethod) && \"\".equals(pathWithoutBaseName());\n     }\n \n     /**\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 114,
    "bugNodeStartChar": 4117,
    "bugNodeLength": 24,
    "fixLineNum": 114,
    "fixNodeStartChar": 4117,
    "fixNodeLength": 34,
    "sourceBeforeFix": "\"GET\".equals(httpMethod)",
    "sourceAfterFix": "\"GET\".equalsIgnoreCase(httpMethod)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "4bb6d8993ca8fd33e760347edc9134e99c05e0a1",
    "fixCommitParentSHA1": "a5009b592ec17d9f9f82c5a78ebf585e6ace9828",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 2593f85..9591a0b 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -152,7 +152,7 @@\n         }\n \n         if (additionalProperties.containsKey(CodegenConstants.REMOVE_OPERATION_ID_PREFIX)) {\n-            this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties\n+            this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties\n                     .get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()));\n         }\n     }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 155,
    "bugNodeStartChar": 7538,
    "bugNodeLength": 152,
    "fixLineNum": 155,
    "fixNodeStartChar": 7538,
    "fixNodeLength": 151,
    "sourceBeforeFix": "this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))",
    "sourceAfterFix": "this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4bb6d8993ca8fd33e760347edc9134e99c05e0a1",
    "fixCommitParentSHA1": "a5009b592ec17d9f9f82c5a78ebf585e6ace9828",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 2593f85..9591a0b 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -152,7 +152,7 @@\n         }\n \n         if (additionalProperties.containsKey(CodegenConstants.REMOVE_OPERATION_ID_PREFIX)) {\n-            this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties\n+            this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties\n                     .get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()));\n         }\n     }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 155,
    "bugNodeStartChar": 7538,
    "bugNodeLength": 152,
    "fixLineNum": 155,
    "fixNodeStartChar": 7538,
    "fixNodeLength": 151,
    "sourceBeforeFix": "this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))",
    "sourceAfterFix": "this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f472b623f05f7e3f570a2085d86a6c4579afe84c",
    "fixCommitParentSHA1": "54b670b7e0ee851d0e9b29c815111f5572d7da22",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/InlineModelResolver.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/InlineModelResolver.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/InlineModelResolver.java\nindex dfa5238..143fa95 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/InlineModelResolver.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/InlineModelResolver.java\n@@ -342,7 +342,7 @@\n                             refProperty.setRequired(op.getRequired());\n                             mp.setAdditionalProperties(refProperty);\n                         } else {\n-                            RefProperty refProperty = new RefProperty(existing);\n+                            RefProperty refProperty = new RefProperty(modelName);\n                             refProperty.setRequired(op.getRequired());\n                             mp.setAdditionalProperties(refProperty);\n                             addGenerated(modelName, innerModel);\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 345,
    "bugNodeStartChar": 18984,
    "bugNodeLength": 25,
    "fixLineNum": 345,
    "fixNodeStartChar": 18984,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new RefProperty(existing)",
    "sourceAfterFix": "new RefProperty(modelName)"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/AnotherFakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/AnotherFakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/AnotherFakeApi.java\nindex c035961..9cf02d6 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/AnotherFakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/AnotherFakeApi.java\n@@ -23,5 +23,5 @@\n     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testSpecialTags(@Valid Client body);\n+    Client testSpecialTags(@Valid Client body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 19,
    "bugNodeStartChar": 370,
    "bugNodeLength": 383,
    "fixLineNum": 19,
    "fixNodeStartChar": 370,
    "fixNodeLength": 400,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 23,
    "bugNodeStartChar": 471,
    "bugNodeLength": 314,
    "fixLineNum": 23,
    "fixNodeStartChar": 471,
    "fixNodeLength": 331,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 30,
    "bugNodeStartChar": 791,
    "bugNodeLength": 351,
    "fixLineNum": 30,
    "fixNodeStartChar": 791,
    "fixNodeLength": 368,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 37,
    "bugNodeStartChar": 1148,
    "bugNodeLength": 319,
    "fixLineNum": 37,
    "fixNodeStartChar": 1148,
    "fixNodeLength": 336,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 44,
    "bugNodeStartChar": 1473,
    "bugNodeLength": 307,
    "fixLineNum": 44,
    "fixNodeStartChar": 1473,
    "fixNodeLength": 324,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 51,
    "bugNodeStartChar": 1786,
    "bugNodeLength": 363,
    "fixLineNum": 51,
    "fixNodeStartChar": 1786,
    "fixNodeLength": 380,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 59,
    "bugNodeStartChar": 2155,
    "bugNodeLength": 1364,
    "fixLineNum": 59,
    "fixNodeStartChar": 2155,
    "fixNodeLength": 1381,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 70,
    "bugNodeStartChar": 3525,
    "bugNodeLength": 1227,
    "fixLineNum": 70,
    "fixNodeStartChar": 3525,
    "fixNodeLength": 1244,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\nindex cc205a1..e9c28d5 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeApi.java\n@@ -25,28 +25,28 @@\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer boolean types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output boolean\", response = Boolean.class) })\n-    Boolean fakeOuterBooleanSerialize(@Valid Boolean body);\n+    Boolean fakeOuterBooleanSerialize(@Valid Boolean body) throws Exception;\n \n     @POST\n     @Path(\"/outer/composite\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of object with outer number type\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output composite\", response = OuterComposite.class) })\n-    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body);\n+    OuterComposite fakeOuterCompositeSerialize(@Valid OuterComposite body) throws Exception;\n \n     @POST\n     @Path(\"/outer/number\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer number types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output number\", response = BigDecimal.class) })\n-    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body);\n+    BigDecimal fakeOuterNumberSerialize(@Valid BigDecimal body) throws Exception;\n \n     @POST\n     @Path(\"/outer/string\")\n     @ApiOperation(value = \"\", notes = \"Test serialization of outer string types\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Output string\", response = String.class) })\n-    String fakeOuterStringSerialize(@Valid String body);\n+    String fakeOuterStringSerialize(@Valid String body) throws Exception;\n \n     @PATCH\n     @Consumes({ \"application/json\" })\n@@ -54,7 +54,7 @@\n     @ApiOperation(value = \"To test \\\"client\\\" model\", notes = \"To test \\\"client\\\" model\", tags={ \"fake\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClientModel(@Valid Client body);\n+    Client testClientModel(@Valid Client body) throws Exception;\n \n     @POST\n     @Consumes({ \"application/xml; charset=utf-8\", \"application/json; charset=utf-8\" })\n@@ -65,7 +65,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n+    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n \n     @GET\n     @Consumes({ \"*/*\" })\n@@ -74,7 +74,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n-    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n+    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n \n     @GET\n     @Path(\"/jsonFormData\")\n@@ -82,5 +82,5 @@\n     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n+    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 79,
    "bugNodeStartChar": 4758,
    "bugNodeLength": 400,
    "fixLineNum": 79,
    "fixNodeStartChar": 4758,
    "fixNodeLength": 417,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeClassnameTestApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeClassnameTestApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeClassnameTestApi.java\nindex 710ea4c..7a1df7e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeClassnameTestApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/FakeClassnameTestApi.java\n@@ -24,5 +24,5 @@\n     }, tags={ \"fake_classname_tags 123#$%^\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n-    Client testClassname(@Valid Client body);\n+    Client testClassname(@Valid Client body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 19,
    "bugNodeStartChar": 390,
    "bugNodeLength": 440,
    "fixLineNum": 19,
    "fixNodeStartChar": 390,
    "fixNodeLength": 457,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\nindex bd166d6..271d68e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n@@ -29,7 +29,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void addPet(@Valid Pet body);\n+    void addPet(@Valid Pet body) throws Exception;\n \n     @DELETE\n     @Path(\"/{petId}\")\n@@ -42,7 +42,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n-    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n+    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n \n     @GET\n     @Path(\"/findByStatus\")\n@@ -56,7 +56,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n+    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n \n     @GET\n     @Path(\"/findByTags\")\n@@ -70,7 +70,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n+    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n \n     @GET\n     @Path(\"/{petId}\")\n@@ -82,7 +82,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n-    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n+    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n \n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })\n@@ -97,7 +97,7 @@\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n-    void updatePet(@Valid Pet body);\n+    void updatePet(@Valid Pet body) throws Exception;\n \n     @POST\n     @Path(\"/{petId}\")\n@@ -111,7 +111,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n+    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n \n     @POST\n     @Path(\"/{petId}/uploadImage\")\n@@ -126,5 +126,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n-   @FormParam(value = \"file\") Attachment fileDetail);\n+   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 21,
    "bugNodeStartChar": 404,
    "bugNodeLength": 635,
    "fixLineNum": 21,
    "fixNodeStartChar": 404,
    "fixNodeLength": 652,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\nindex bd166d6..271d68e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n@@ -29,7 +29,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void addPet(@Valid Pet body);\n+    void addPet(@Valid Pet body) throws Exception;\n \n     @DELETE\n     @Path(\"/{petId}\")\n@@ -42,7 +42,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n-    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n+    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n \n     @GET\n     @Path(\"/findByStatus\")\n@@ -56,7 +56,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n+    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n \n     @GET\n     @Path(\"/findByTags\")\n@@ -70,7 +70,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n+    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n \n     @GET\n     @Path(\"/{petId}\")\n@@ -82,7 +82,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n-    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n+    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n \n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })\n@@ -97,7 +97,7 @@\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n-    void updatePet(@Valid Pet body);\n+    void updatePet(@Valid Pet body) throws Exception;\n \n     @POST\n     @Path(\"/{petId}\")\n@@ -111,7 +111,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n+    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n \n     @POST\n     @Path(\"/{petId}/uploadImage\")\n@@ -126,5 +126,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n-   @FormParam(value = \"file\") Attachment fileDetail);\n+   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 34,
    "bugNodeStartChar": 1045,
    "bugNodeLength": 681,
    "fixLineNum": 34,
    "fixNodeStartChar": 1045,
    "fixNodeLength": 698,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\nindex bd166d6..271d68e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n@@ -29,7 +29,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void addPet(@Valid Pet body);\n+    void addPet(@Valid Pet body) throws Exception;\n \n     @DELETE\n     @Path(\"/{petId}\")\n@@ -42,7 +42,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n-    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n+    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n \n     @GET\n     @Path(\"/findByStatus\")\n@@ -56,7 +56,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n+    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n \n     @GET\n     @Path(\"/findByTags\")\n@@ -70,7 +70,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n+    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n \n     @GET\n     @Path(\"/{petId}\")\n@@ -82,7 +82,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n-    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n+    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n \n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })\n@@ -97,7 +97,7 @@\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n-    void updatePet(@Valid Pet body);\n+    void updatePet(@Valid Pet body) throws Exception;\n \n     @POST\n     @Path(\"/{petId}\")\n@@ -111,7 +111,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n+    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n \n     @POST\n     @Path(\"/{petId}/uploadImage\")\n@@ -126,5 +126,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n-   @FormParam(value = \"file\") Attachment fileDetail);\n+   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 75,
    "bugNodeStartChar": 3607,
    "bugNodeLength": 625,
    "fixLineNum": 75,
    "fixNodeStartChar": 3607,
    "fixNodeLength": 642,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\nindex bd166d6..271d68e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n@@ -29,7 +29,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void addPet(@Valid Pet body);\n+    void addPet(@Valid Pet body) throws Exception;\n \n     @DELETE\n     @Path(\"/{petId}\")\n@@ -42,7 +42,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n-    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n+    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n \n     @GET\n     @Path(\"/findByStatus\")\n@@ -56,7 +56,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n+    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n \n     @GET\n     @Path(\"/findByTags\")\n@@ -70,7 +70,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n+    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n \n     @GET\n     @Path(\"/{petId}\")\n@@ -82,7 +82,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n-    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n+    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n \n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })\n@@ -97,7 +97,7 @@\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n-    void updatePet(@Valid Pet body);\n+    void updatePet(@Valid Pet body) throws Exception;\n \n     @POST\n     @Path(\"/{petId}\")\n@@ -111,7 +111,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n+    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n \n     @POST\n     @Path(\"/{petId}/uploadImage\")\n@@ -126,5 +126,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n-   @FormParam(value = \"file\") Attachment fileDetail);\n+   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 87,
    "bugNodeStartChar": 4238,
    "bugNodeLength": 814,
    "fixLineNum": 87,
    "fixNodeStartChar": 4238,
    "fixNodeLength": 831,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\nindex bd166d6..271d68e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n@@ -29,7 +29,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void addPet(@Valid Pet body);\n+    void addPet(@Valid Pet body) throws Exception;\n \n     @DELETE\n     @Path(\"/{petId}\")\n@@ -42,7 +42,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n-    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n+    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n \n     @GET\n     @Path(\"/findByStatus\")\n@@ -56,7 +56,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n+    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n \n     @GET\n     @Path(\"/findByTags\")\n@@ -70,7 +70,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n+    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n \n     @GET\n     @Path(\"/{petId}\")\n@@ -82,7 +82,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n-    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n+    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n \n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })\n@@ -97,7 +97,7 @@\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n-    void updatePet(@Valid Pet body);\n+    void updatePet(@Valid Pet body) throws Exception;\n \n     @POST\n     @Path(\"/{petId}\")\n@@ -111,7 +111,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n+    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n \n     @POST\n     @Path(\"/{petId}/uploadImage\")\n@@ -126,5 +126,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n-   @FormParam(value = \"file\") Attachment fileDetail);\n+   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 102,
    "bugNodeStartChar": 5058,
    "bugNodeLength": 828,
    "fixLineNum": 102,
    "fixNodeStartChar": 5058,
    "fixNodeLength": 845,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\nindex bd166d6..271d68e 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/PetApi.java\n@@ -29,7 +29,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void addPet(@Valid Pet body);\n+    void addPet(@Valid Pet body) throws Exception;\n \n     @DELETE\n     @Path(\"/{petId}\")\n@@ -42,7 +42,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n-    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n+    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n \n     @GET\n     @Path(\"/findByStatus\")\n@@ -56,7 +56,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n+    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n \n     @GET\n     @Path(\"/findByTags\")\n@@ -70,7 +70,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n-    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n+    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n \n     @GET\n     @Path(\"/{petId}\")\n@@ -82,7 +82,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n-    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n+    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n \n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })\n@@ -97,7 +97,7 @@\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n-    void updatePet(@Valid Pet body);\n+    void updatePet(@Valid Pet body) throws Exception;\n \n     @POST\n     @Path(\"/{petId}\")\n@@ -111,7 +111,7 @@\n     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n-    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n+    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n \n     @POST\n     @Path(\"/{petId}/uploadImage\")\n@@ -126,5 +126,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = ModelApiResponse.class) })\n     ModelApiResponse uploadFile(@PathParam(\"petId\") @ApiParam(\"ID of pet to update\") Long petId,@FormParam(value = \"additionalMetadata\")  String additionalMetadata, @FormParam(value = \"file\") InputStream fileInputStream,\n-   @FormParam(value = \"file\") Attachment fileDetail);\n+   @FormParam(value = \"file\") Attachment fileDetail) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 116,
    "bugNodeStartChar": 5892,
    "bugNodeLength": 882,
    "fixLineNum": 116,
    "fixNodeStartChar": 5892,
    "fixNodeLength": 899,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\nindex ffa77a6..194e30d 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\n@@ -24,7 +24,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n-    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n+    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n \n     @GET\n     @Path(\"/inventory\")\n@@ -34,7 +34,7 @@\n     }, tags={ \"store\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Map.class, responseContainer = \"Map\") })\n-    Map<Map<String, Integer>> getInventory();\n+    Map<String, Integer> getInventory() throws Exception;\n \n     @GET\n     @Path(\"/order/{order_id}\")\n@@ -44,7 +44,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n-    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId);\n+    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId) throws Exception;\n \n     @POST\n     @Path(\"/order\")\n@@ -53,5 +53,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid Order\", response = Void.class) })\n-    Order placeOrder(@Valid Order body);\n+    Order placeOrder(@Valid Order body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 20,
    "bugNodeStartChar": 371,
    "bugNodeLength": 619,
    "fixLineNum": 20,
    "fixNodeStartChar": 371,
    "fixNodeLength": 636,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\nindex ffa77a6..194e30d 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\n@@ -24,7 +24,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n-    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n+    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n \n     @GET\n     @Path(\"/inventory\")\n@@ -34,7 +34,7 @@\n     }, tags={ \"store\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Map.class, responseContainer = \"Map\") })\n-    Map<Map<String, Integer>> getInventory();\n+    Map<String, Integer> getInventory() throws Exception;\n \n     @GET\n     @Path(\"/order/{order_id}\")\n@@ -44,7 +44,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n-    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId);\n+    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId) throws Exception;\n \n     @POST\n     @Path(\"/order\")\n@@ -53,5 +53,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid Order\", response = Void.class) })\n-    Order placeOrder(@Valid Order body);\n+    Order placeOrder(@Valid Order body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 39,
    "bugNodeStartChar": 1468,
    "bugNodeLength": 701,
    "fixLineNum": 39,
    "fixNodeStartChar": 1468,
    "fixNodeLength": 718,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\nindex ffa77a6..194e30d 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/StoreApi.java\n@@ -24,7 +24,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n-    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n+    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n \n     @GET\n     @Path(\"/inventory\")\n@@ -34,7 +34,7 @@\n     }, tags={ \"store\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Map.class, responseContainer = \"Map\") })\n-    Map<Map<String, Integer>> getInventory();\n+    Map<String, Integer> getInventory() throws Exception;\n \n     @GET\n     @Path(\"/order/{order_id}\")\n@@ -44,7 +44,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n-    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId);\n+    Order getOrderById(@PathParam(\"order_id\") @Min(1) @Max(5) @ApiParam(\"ID of pet that needs to be fetched\") Long orderId) throws Exception;\n \n     @POST\n     @Path(\"/order\")\n@@ -53,5 +53,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid Order\", response = Void.class) })\n-    Order placeOrder(@Valid Order body);\n+    Order placeOrder(@Valid Order body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 49,
    "bugNodeStartChar": 2175,
    "bugNodeLength": 414,
    "fixLineNum": 49,
    "fixNodeStartChar": 2175,
    "fixNodeLength": 431,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 20,
    "bugNodeStartChar": 368,
    "bugNodeLength": 339,
    "fixLineNum": 20,
    "fixNodeStartChar": 368,
    "fixNodeLength": 356,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 27,
    "bugNodeStartChar": 713,
    "bugNodeLength": 379,
    "fixLineNum": 27,
    "fixNodeStartChar": 713,
    "fixNodeLength": 396,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 35,
    "bugNodeStartChar": 1098,
    "bugNodeLength": 377,
    "fixLineNum": 35,
    "fixNodeStartChar": 1098,
    "fixNodeLength": 394,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 43,
    "bugNodeStartChar": 1481,
    "bugNodeLength": 525,
    "fixLineNum": 43,
    "fixNodeStartChar": 1481,
    "fixNodeLength": 542,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 52,
    "bugNodeStartChar": 2012,
    "bugNodeLength": 607,
    "fixLineNum": 52,
    "fixNodeStartChar": 2012,
    "fixNodeLength": 624,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 62,
    "bugNodeStartChar": 2625,
    "bugNodeLength": 610,
    "fixLineNum": 62,
    "fixNodeStartChar": 2625,
    "fixNodeLength": 627,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 71,
    "bugNodeStartChar": 3241,
    "bugNodeLength": 327,
    "fixLineNum": 71,
    "fixNodeStartChar": 3241,
    "fixNodeLength": 344,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e",
    "fixCommitParentSHA1": "5143fb58a4c854c9c3da3dd47a4d89f2473a13ca",
    "bugFilePath": "samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java",
    "fixPatch": "diff --git a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\nindex d6c30a1..0619dbc 100644\n--- a/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n+++ b/samples/server/petstore/jaxrs-spec-interface/src/gen/java/io/swagger/api/UserApi.java\n@@ -22,7 +22,7 @@\n     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUser(@Valid User body);\n+    void createUser(@Valid User body) throws Exception;\n \n     @POST\n     @Path(\"/createWithArray\")\n@@ -30,7 +30,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithArrayInput(@Valid List<User> body);\n+    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n \n     @POST\n     @Path(\"/createWithList\")\n@@ -38,7 +38,7 @@\n     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void createUsersWithListInput(@Valid List<User> body);\n+    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n \n     @DELETE\n     @Path(\"/{username}\")\n@@ -47,7 +47,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n+    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n \n     @GET\n     @Path(\"/{username}\")\n@@ -57,7 +57,7 @@\n         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n+    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n \n     @GET\n     @Path(\"/login\")\n@@ -66,7 +66,7 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n-    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n+    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n \n     @GET\n     @Path(\"/logout\")\n@@ -74,7 +74,7 @@\n     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n-    void logoutUser();\n+    void logoutUser() throws Exception;\n \n     @PUT\n     @Path(\"/{username}\")\n@@ -83,5 +83,5 @@\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n-    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n+    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 79,
    "bugNodeStartChar": 3574,
    "bugNodeLength": 529,
    "fixLineNum": 79,
    "fixNodeStartChar": 3574,
    "fixNodeLength": 546,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4310ea326c182e03ff66fdae5bed09e05132c0c5",
    "fixCommitParentSHA1": "3cd3b907f6e09ed0697bcc8f3c574f9224dd33d4",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/HaskellHttpClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/HaskellHttpClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/HaskellHttpClientCodegen.java\nindex cd60a22..5f57e10 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/HaskellHttpClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/HaskellHttpClientCodegen.java\n@@ -128,7 +128,7 @@\n         supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n         supportingFiles.add(new SupportingFile(\"stack.mustache\", \"\", \"stack.yaml\"));\n         supportingFiles.add(new SupportingFile(\"Setup.mustache\", \"\", \"Setup.hs\"));\n-        supportingFiles.add(new SupportingFile(\".gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore.mustache\", \"\", \".gitignore\"));\n         supportingFiles.add(new SupportingFile(\".travis.yml\", \"\", \".travis.yml\"));\n         supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n \n@@ -241,7 +241,7 @@\n \n     public void setDateFormat(String value) {\n         if (StringUtils.isBlank(value)) {\n-            additionalProperties.remove(DATE_FORMAT);\n+            additionalProperties.put(DATE_FORMAT, defaultDateFormat);\n         } else {\n             additionalProperties.put(DATE_FORMAT, value);\n         }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 244,
    "bugNodeStartChar": 10879,
    "bugNodeLength": 40,
    "fixLineNum": 244,
    "fixNodeStartChar": 10879,
    "fixNodeLength": 56,
    "sourceBeforeFix": "additionalProperties.remove(DATE_FORMAT)",
    "sourceAfterFix": "additionalProperties.put(DATE_FORMAT,defaultDateFormat)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca",
    "fixCommitParentSHA1": "187d9a29a5b1862534c0ae529b1f1b017f19aed9",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\nindex 15caa76..5ac6121 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n@@ -174,11 +174,11 @@\n \n     @Override\n     public String apiFileFolder() {\n-        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n \n     public String modelFileFolder() {\n-        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n \n     @Override\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 177,
    "bugNodeStartChar": 6872,
    "bugNodeLength": 75,
    "fixLineNum": 177,
    "fixNodeStartChar": 6872,
    "fixNodeLength": 72,
    "sourceBeforeFix": "(outputFolder + File.separator + apiFolder).replaceAll(\"/\",File.separator)",
    "sourceAfterFix": "(outputFolder + File.separator + apiFolder).replace(\"/\",File.separator)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca",
    "fixCommitParentSHA1": "187d9a29a5b1862534c0ae529b1f1b017f19aed9",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\nindex 15caa76..5ac6121 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n@@ -174,11 +174,11 @@\n \n     @Override\n     public String apiFileFolder() {\n-        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n \n     public String modelFileFolder() {\n-        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n \n     @Override\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 177,
    "bugNodeStartChar": 6872,
    "bugNodeLength": 75,
    "fixLineNum": 177,
    "fixNodeStartChar": 6872,
    "fixNodeLength": 72,
    "sourceBeforeFix": "(outputFolder + File.separator + apiFolder).replaceAll(\"/\",File.separator)",
    "sourceAfterFix": "(outputFolder + File.separator + apiFolder).replace(\"/\",File.separator)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca",
    "fixCommitParentSHA1": "187d9a29a5b1862534c0ae529b1f1b017f19aed9",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\nindex 15caa76..5ac6121 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n@@ -174,11 +174,11 @@\n \n     @Override\n     public String apiFileFolder() {\n-        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n \n     public String modelFileFolder() {\n-        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n \n     @Override\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 181,
    "bugNodeStartChar": 7009,
    "bugNodeLength": 77,
    "fixLineNum": 181,
    "fixNodeStartChar": 7009,
    "fixNodeLength": 74,
    "sourceBeforeFix": "(outputFolder + File.separator + modelFolder).replaceAll(\"/\",File.separator)",
    "sourceAfterFix": "(outputFolder + File.separator + modelFolder).replace(\"/\",File.separator)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca",
    "fixCommitParentSHA1": "187d9a29a5b1862534c0ae529b1f1b017f19aed9",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\nindex 15caa76..5ac6121 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RustClientCodegen.java\n@@ -174,11 +174,11 @@\n \n     @Override\n     public String apiFileFolder() {\n-        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n \n     public String modelFileFolder() {\n-        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n+        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n \n     @Override\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 181,
    "bugNodeStartChar": 7009,
    "bugNodeLength": 77,
    "fixLineNum": 181,
    "fixNodeStartChar": 7009,
    "fixNodeLength": 74,
    "sourceBeforeFix": "(outputFolder + File.separator + modelFolder).replaceAll(\"/\",File.separator)",
    "sourceAfterFix": "(outputFolder + File.separator + modelFolder).replace(\"/\",File.separator)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f5591232fcc809a1e40499cd21d6259c0abf45a4",
    "fixCommitParentSHA1": "827c8c38ed823e8d9f10b0108fe216e4a9f23e53",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Swift3Codegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Swift3Codegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Swift3Codegen.java\nindex 4461fc4..8bfd73c 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Swift3Codegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Swift3Codegen.java\n@@ -125,7 +125,7 @@\n                     \"true\", \"lazy\", \"operator\", \"in\", \"COLUMN\", \"left\", \"private\", \"return\", \"FILE\", \"mutating\", \"protocol\",\n                     \"switch\", \"FUNCTION\", \"none\", \"public\", \"where\", \"LINE\", \"nonmutating\", \"static\", \"while\", \"optional\",\n                     \"struct\", \"override\", \"subscript\", \"postfix\", \"typealias\", \"precedence\", \"var\", \"prefix\", \"Protocol\",\n-                    \"required\", \"right\", \"set\", \"Type\", \"unowned\", \"weak\")\n+                    \"required\", \"right\", \"set\", \"Type\", \"unowned\", \"weak\", \"Data\")\n         );\n \n         typeMapping = new HashMap<>();\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 116,
    "bugNodeStartChar": 4512,
    "bugNodeLength": 1135,
    "fixLineNum": 116,
    "fixNodeStartChar": 4512,
    "fixNodeLength": 1143,
    "sourceBeforeFix": "Arrays.asList(\"ErrorResponse\",\"Response\",\"Int\",\"Int32\",\"Int64\",\"Int64\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\",\"Any\",\"Error\",\"URL\",\"class\",\"Class\",\"break\",\"as\",\"associativity\",\"deinit\",\"case\",\"dynamicType\",\"convenience\",\"enum\",\"continue\",\"false\",\"dynamic\",\"extension\",\"default\",\"is\",\"didSet\",\"func\",\"do\",\"nil\",\"final\",\"import\",\"else\",\"self\",\"get\",\"init\",\"fallthrough\",\"Self\",\"infix\",\"internal\",\"for\",\"super\",\"inout\",\"let\",\"if\",\"true\",\"lazy\",\"operator\",\"in\",\"COLUMN\",\"left\",\"private\",\"return\",\"FILE\",\"mutating\",\"protocol\",\"switch\",\"FUNCTION\",\"none\",\"public\",\"where\",\"LINE\",\"nonmutating\",\"static\",\"while\",\"optional\",\"struct\",\"override\",\"subscript\",\"postfix\",\"typealias\",\"precedence\",\"var\",\"prefix\",\"Protocol\",\"required\",\"right\",\"set\",\"Type\",\"unowned\",\"weak\")",
    "sourceAfterFix": "Arrays.asList(\"ErrorResponse\",\"Response\",\"Int\",\"Int32\",\"Int64\",\"Int64\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\",\"Any\",\"Error\",\"URL\",\"class\",\"Class\",\"break\",\"as\",\"associativity\",\"deinit\",\"case\",\"dynamicType\",\"convenience\",\"enum\",\"continue\",\"false\",\"dynamic\",\"extension\",\"default\",\"is\",\"didSet\",\"func\",\"do\",\"nil\",\"final\",\"import\",\"else\",\"self\",\"get\",\"init\",\"fallthrough\",\"Self\",\"infix\",\"internal\",\"for\",\"super\",\"inout\",\"let\",\"if\",\"true\",\"lazy\",\"operator\",\"in\",\"COLUMN\",\"left\",\"private\",\"return\",\"FILE\",\"mutating\",\"protocol\",\"switch\",\"FUNCTION\",\"none\",\"public\",\"where\",\"LINE\",\"nonmutating\",\"static\",\"while\",\"optional\",\"struct\",\"override\",\"subscript\",\"postfix\",\"typealias\",\"precedence\",\"var\",\"prefix\",\"Protocol\",\"required\",\"right\",\"set\",\"Type\",\"unowned\",\"weak\",\"Data\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "78051257136d79f17c1dab7c814557f40e163c48",
    "fixCommitParentSHA1": "bf327519b8a87a8795d3ec995295b44e883a5a33",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java\nindex 10429ce..759a5bd 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java\n@@ -60,7 +60,7 @@\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n-        codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }\n \n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 63,
    "bugNodeStartChar": 3027,
    "bugNodeLength": 54,
    "fixLineNum": 63,
    "fixNodeStartChar": 3027,
    "fixNodeLength": 58,
    "sourceBeforeFix": "getSwaggerType(swaggerModel.getAdditionalProperties())",
    "sourceAfterFix": "getTypeDeclaration(swaggerModel.getAdditionalProperties())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "78051257136d79f17c1dab7c814557f40e163c48",
    "fixCommitParentSHA1": "bf327519b8a87a8795d3ec995295b44e883a5a33",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java\nindex 10429ce..759a5bd 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptAngular2ClientCodegen.java\n@@ -60,7 +60,7 @@\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n-        codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }\n \n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 63,
    "bugNodeStartChar": 3027,
    "bugNodeLength": 54,
    "fixLineNum": 63,
    "fixNodeStartChar": 3027,
    "fixNodeLength": 58,
    "sourceBeforeFix": "getSwaggerType(swaggerModel.getAdditionalProperties())",
    "sourceAfterFix": "getTypeDeclaration(swaggerModel.getAdditionalProperties())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6c922fdae1b08d7dcf2fac9f7b4dd1452a5e1fd4",
    "fixCommitParentSHA1": "e3a1e308c445aee433f8eacdcf8550e5258f8bf9",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptJqueryClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptJqueryClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptJqueryClientCodegen.java\nindex ab12f1a..9edb26a 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptJqueryClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/TypeScriptJqueryClientCodegen.java\n@@ -15,7 +15,7 @@\n import io.swagger.codegen.SupportingFile;\n \n public class TypeScriptJqueryClientCodegen extends AbstractTypeScriptClientCodegen {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNodeClientCodegen.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptJqueryClientCodegen.class);\n     private static final SimpleDateFormat SNAPSHOT_SUFFIX_FORMAT = new SimpleDateFormat(\"yyyyMMddHHmm\");\n \n     public static final String NPM_NAME = \"npmName\";\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 18,
    "bugNodeStartChar": 566,
    "bugNodeLength": 33,
    "fixLineNum": 18,
    "fixNodeStartChar": 566,
    "fixNodeLength": 35,
    "sourceBeforeFix": "TypeScriptNodeClientCodegen.class",
    "sourceAfterFix": "TypeScriptJqueryClientCodegen.class"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "af4319015e0c1ab6da03083d793e465b7ca58def",
    "fixCommitParentSHA1": "9bb58d204038c7bee8ed84aa4c1f55343d8529c8",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/AbstractGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/AbstractGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/AbstractGenerator.java\nindex 849651b..abf77b5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/AbstractGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/AbstractGenerator.java\n@@ -56,7 +56,7 @@\n             if (is == null) {\n                 is = new FileInputStream(new File(name)); // May throw but never return a null value\n             }\n-            return new InputStreamReader(is);\n+            return new InputStreamReader(is, \"UTF-8\");\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage());\n         }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 59,
    "bugNodeStartChar": 1993,
    "bugNodeLength": 25,
    "fixLineNum": 59,
    "fixNodeStartChar": 1993,
    "fixNodeLength": 34,
    "sourceBeforeFix": "new InputStreamReader(is)",
    "sourceAfterFix": "new InputStreamReader(is,\"UTF-8\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "bf50ea13662770de9f2a6546fa2cd40e83ba1aee",
    "fixCommitParentSHA1": "f4fb79822ff4d5a647cf5cf3eb310f96957f840f",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\nindex 667b634..5f11f99 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n@@ -113,7 +113,7 @@\n         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n-        config.additionalProperties().put(\"generatorClass\", config.getClass().toString());\n+        config.additionalProperties().put(\"generatorClass\", config.getClass().getName());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 116,
    "bugNodeStartChar": 5032,
    "bugNodeLength": 28,
    "fixLineNum": 116,
    "fixNodeStartChar": 5032,
    "fixNodeLength": 27,
    "sourceBeforeFix": "config.getClass().toString()",
    "sourceAfterFix": "config.getClass().getName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bf50ea13662770de9f2a6546fa2cd40e83ba1aee",
    "fixCommitParentSHA1": "f4fb79822ff4d5a647cf5cf3eb310f96957f840f",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\nindex 667b634..5f11f99 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n@@ -113,7 +113,7 @@\n         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n-        config.additionalProperties().put(\"generatorClass\", config.getClass().toString());\n+        config.additionalProperties().put(\"generatorClass\", config.getClass().getName());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 116,
    "bugNodeStartChar": 5032,
    "bugNodeLength": 28,
    "fixLineNum": 116,
    "fixNodeStartChar": 5032,
    "fixNodeLength": 27,
    "sourceBeforeFix": "config.getClass().toString()",
    "sourceAfterFix": "config.getClass().getName()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "113843bb8841e347efbd12b7fa32e972dc5e5c97",
    "fixCommitParentSHA1": "2425a35f457e8a4958e28cbd916cd85473d9bc01",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\nindex a2e7f59..c12d406 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n@@ -840,7 +840,7 @@\n         operations.put(\"package\", config.apiPackage());\n \n \n-        Set<String> allImports = new LinkedHashSet<String>();\n+        Set<String> allImports = new TreeSet<String>();\n         for (CodegenOperation op : ops) {\n             allImports.addAll(op.imports);\n         }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 843,
    "bugNodeStartChar": 40845,
    "bugNodeLength": 21,
    "fixLineNum": 843,
    "fixNodeStartChar": 40845,
    "fixNodeLength": 15,
    "sourceBeforeFix": "LinkedHashSet<String>",
    "sourceAfterFix": "TreeSet<String>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c386da6ded5df709d714f538656a44ceb39b8bad",
    "fixCommitParentSHA1": "97924c78a02629ff9b303a2aa171503feb701867",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\nindex a2e7f59..c12d406 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java\n@@ -840,7 +840,7 @@\n         operations.put(\"package\", config.apiPackage());\n \n \n-        Set<String> allImports = new LinkedHashSet<String>();\n+        Set<String> allImports = new TreeSet<String>();\n         for (CodegenOperation op : ops) {\n             allImports.addAll(op.imports);\n         }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 843,
    "bugNodeStartChar": 40845,
    "bugNodeLength": 21,
    "fixLineNum": 843,
    "fixNodeStartChar": 40845,
    "fixNodeLength": 15,
    "sourceBeforeFix": "LinkedHashSet<String>",
    "sourceAfterFix": "TreeSet<String>"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
    "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 863,
    "bugNodeStartChar": 34517,
    "bugNodeLength": 26,
    "fixLineNum": 863,
    "fixNodeStartChar": 34517,
    "fixNodeLength": 16,
    "sourceBeforeFix": "getJSDocTypeWithBraces(cp)",
    "sourceAfterFix": "getJSDocType(cp)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
    "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 863,
    "bugNodeStartChar": 34517,
    "bugNodeLength": 26,
    "fixLineNum": 863,
    "fixNodeStartChar": 34517,
    "fixNodeLength": 16,
    "sourceBeforeFix": "getJSDocTypeWithBraces(cp)",
    "sourceAfterFix": "getJSDocType(cp)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
    "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 866,
    "bugNodeStartChar": 34670,
    "bugNodeLength": 33,
    "fixLineNum": 866,
    "fixNodeStartChar": 34670,
    "fixNodeLength": 23,
    "sourceBeforeFix": "getJSDocTypeWithBraces(operation)",
    "sourceAfterFix": "getJSDocType(operation)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
    "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 866,
    "bugNodeStartChar": 34670,
    "bugNodeLength": 33,
    "fixLineNum": 866,
    "fixNodeStartChar": 34670,
    "fixNodeLength": 23,
    "sourceBeforeFix": "getJSDocTypeWithBraces(operation)",
    "sourceAfterFix": "getJSDocType(operation)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
    "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 892,
    "bugNodeStartChar": 35985,
    "bugNodeLength": 31,
    "fixLineNum": 892,
    "fixNodeStartChar": 35985,
    "fixNodeLength": 21,
    "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)",
    "sourceAfterFix": "getJSDocType(cm,var)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
    "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 892,
    "bugNodeStartChar": 35985,
    "bugNodeLength": 31,
    "fixLineNum": 892,
    "fixNodeStartChar": 35985,
    "fixNodeLength": 21,
    "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)",
    "sourceAfterFix": "getJSDocType(cm,var)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "dc8eb8e8adcc4ca9f809c62900348854537bd57b",
    "fixCommitParentSHA1": "3659767e0a54fe4d02ec96b110a521f6edb031c2",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java\nindex b148a4d..63f43df 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java\n@@ -42,7 +42,7 @@\n                         \"import\", \"public\", \"throws\", \"case\", \"enum\", \"instanceof\", \"return\", \"transient\",\n                         \"catch\", \"extends\", \"int\", \"short\", \"try\", \"char\", \"final\", \"interface\", \"static\",\n                         \"void\", \"class\", \"finally\", \"long\", \"strictfp\", \"volatile\", \"const\", \"float\",\n-                        \"native\", \"super\", \"while\")\n+                        \"native\", \"super\", \"while\", \"type\")\n         );\n \n         defaultIncludes = new HashSet<String>(\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 38,
    "bugNodeStartChar": 1389,
    "bugNodeLength": 671,
    "fixLineNum": 38,
    "fixNodeStartChar": 1389,
    "fixNodeLength": 679,
    "sourceBeforeFix": "Arrays.asList(\"abstract\",\"continue\",\"for\",\"new\",\"switch\",\"assert\",\"default\",\"if\",\"package\",\"synchronized\",\"boolean\",\"do\",\"goto\",\"private\",\"this\",\"break\",\"double\",\"implements\",\"protected\",\"throw\",\"byte\",\"else\",\"import\",\"public\",\"throws\",\"case\",\"enum\",\"instanceof\",\"return\",\"transient\",\"catch\",\"extends\",\"int\",\"short\",\"try\",\"char\",\"final\",\"interface\",\"static\",\"void\",\"class\",\"finally\",\"long\",\"strictfp\",\"volatile\",\"const\",\"float\",\"native\",\"super\",\"while\")",
    "sourceAfterFix": "Arrays.asList(\"abstract\",\"continue\",\"for\",\"new\",\"switch\",\"assert\",\"default\",\"if\",\"package\",\"synchronized\",\"boolean\",\"do\",\"goto\",\"private\",\"this\",\"break\",\"double\",\"implements\",\"protected\",\"throw\",\"byte\",\"else\",\"import\",\"public\",\"throws\",\"case\",\"enum\",\"instanceof\",\"return\",\"transient\",\"catch\",\"extends\",\"int\",\"short\",\"try\",\"char\",\"final\",\"interface\",\"static\",\"void\",\"class\",\"finally\",\"long\",\"strictfp\",\"volatile\",\"const\",\"float\",\"native\",\"super\",\"while\",\"type\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5e4e84ffe7642c2b15c6c3ffdadb03b766d3998d",
    "fixCommitParentSHA1": "e6f08df30ce904692069254889bbe240996b3e28",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java\nindex b148a4d..63f43df 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ScalatraServerCodegen.java\n@@ -42,7 +42,7 @@\n                         \"import\", \"public\", \"throws\", \"case\", \"enum\", \"instanceof\", \"return\", \"transient\",\n                         \"catch\", \"extends\", \"int\", \"short\", \"try\", \"char\", \"final\", \"interface\", \"static\",\n                         \"void\", \"class\", \"finally\", \"long\", \"strictfp\", \"volatile\", \"const\", \"float\",\n-                        \"native\", \"super\", \"while\")\n+                        \"native\", \"super\", \"while\", \"type\")\n         );\n \n         defaultIncludes = new HashSet<String>(\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 38,
    "bugNodeStartChar": 1389,
    "bugNodeLength": 671,
    "fixLineNum": 38,
    "fixNodeStartChar": 1389,
    "fixNodeLength": 679,
    "sourceBeforeFix": "Arrays.asList(\"abstract\",\"continue\",\"for\",\"new\",\"switch\",\"assert\",\"default\",\"if\",\"package\",\"synchronized\",\"boolean\",\"do\",\"goto\",\"private\",\"this\",\"break\",\"double\",\"implements\",\"protected\",\"throw\",\"byte\",\"else\",\"import\",\"public\",\"throws\",\"case\",\"enum\",\"instanceof\",\"return\",\"transient\",\"catch\",\"extends\",\"int\",\"short\",\"try\",\"char\",\"final\",\"interface\",\"static\",\"void\",\"class\",\"finally\",\"long\",\"strictfp\",\"volatile\",\"const\",\"float\",\"native\",\"super\",\"while\")",
    "sourceAfterFix": "Arrays.asList(\"abstract\",\"continue\",\"for\",\"new\",\"switch\",\"assert\",\"default\",\"if\",\"package\",\"synchronized\",\"boolean\",\"do\",\"goto\",\"private\",\"this\",\"break\",\"double\",\"implements\",\"protected\",\"throw\",\"byte\",\"else\",\"import\",\"public\",\"throws\",\"case\",\"enum\",\"instanceof\",\"return\",\"transient\",\"catch\",\"extends\",\"int\",\"short\",\"try\",\"char\",\"final\",\"interface\",\"static\",\"void\",\"class\",\"finally\",\"long\",\"strictfp\",\"volatile\",\"const\",\"float\",\"native\",\"super\",\"while\",\"type\")"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "62e3bf2543fe2bbde6a0e939c3f219e07b06c8cc",
    "fixCommitParentSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\nindex 7bad177..2d7a424 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n@@ -189,7 +189,7 @@\n \n   @Override\n   public String escapeReservedWord(String name) {\n-    return \"Swagger\" + name;  // add an underscore to the name\n+    return \"_\" + name;  // add an underscore to the name\n   }\n \n   @Override\n@@ -264,7 +264,11 @@\n       codegenProperty.allowableValues.put(\"values\", swiftEnums);\n       codegenProperty.datatypeWithEnum =\n               StringUtils.left(codegenProperty.datatypeWithEnum, codegenProperty.datatypeWithEnum.length() - \"Enum\".length());\n-      if (reservedWords.contains(codegenProperty.datatypeWithEnum)) {\n+      // Ensure that the enum type doesn't match a reserved word or\n+      // the variable name doesn't match the generated enum type or the\n+      // Swift compiler will generate an error\n+      if (reservedWords.contains(codegenProperty.datatypeWithEnum) ||\n+          name.equals(codegenProperty.datatypeWithEnum)) {\n         codegenProperty.datatypeWithEnum = escapeReservedWord(codegenProperty.datatypeWithEnum);\n       }\n     }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 267,
    "bugNodeStartChar": 11025,
    "bugNodeLength": 56,
    "fixLineNum": 270,
    "fixNodeStartChar": 11212,
    "fixNodeLength": 115,
    "sourceBeforeFix": "reservedWords.contains(codegenProperty.datatypeWithEnum)",
    "sourceAfterFix": "reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d",
    "fixCommitParentSHA1": "95c033c4ddd61803c45c8fa7cca65ac30bfa20b1",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\nindex 4359905..7bad177 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n@@ -77,7 +77,8 @@\n         \"Bool\",\n         \"Void\",\n         \"String\",\n-        \"Character\")\n+        \"Character\",\n+        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(\n@@ -118,7 +119,7 @@\n     typeMapping.put(\"float\", \"Float\");\n     typeMapping.put(\"number\", \"Double\");\n     typeMapping.put(\"double\", \"Double\");\n-    typeMapping.put(\"object\", \"String\");\n+    typeMapping.put(\"object\", \"AnyObject\");\n     typeMapping.put(\"file\", \"NSURL\");\n     //TODO binary should be mapped to byte array\n     // mapped to String as a workaround\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 73,
    "bugNodeStartChar": 2790,
    "bugNodeLength": 135,
    "fixLineNum": 73,
    "fixNodeStartChar": 2790,
    "fixNodeLength": 156,
    "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")",
    "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "33b5286ba3f80c1fda4651fa0ebe56fd17a3f91c",
    "fixCommitParentSHA1": "cc0d29f3ecb7b2cadf5de8cf047679630b8f6bec",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\nindex ddd72e4..c294c1c 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n@@ -185,7 +185,7 @@\n \n   @Override\n   public String escapeReservedWord(String name) {\n-    return \"Swagger\" + name;  // add an underscore to the name\n+    return \"_\" + name;  // add an underscore to the name\n   }\n \n   @Override\n@@ -260,7 +260,11 @@\n       codegenProperty.allowableValues.put(\"values\", swiftEnums);\n       codegenProperty.datatypeWithEnum =\n               StringUtils.left(codegenProperty.datatypeWithEnum, codegenProperty.datatypeWithEnum.length() - \"Enum\".length());\n-      if (reservedWords.contains(codegenProperty.datatypeWithEnum)) {\n+      // Ensure that the enum type doesn't match a reserved word or\n+      // the variable name doesn't match the generated enum type or the\n+      // Swift compiler will generate an error\n+      if (reservedWords.contains(codegenProperty.datatypeWithEnum) ||\n+          name.equals(codegenProperty.datatypeWithEnum)) {\n         codegenProperty.datatypeWithEnum = escapeReservedWord(codegenProperty.datatypeWithEnum);\n       }\n     }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 263,
    "bugNodeStartChar": 10871,
    "bugNodeLength": 56,
    "fixLineNum": 266,
    "fixNodeStartChar": 11058,
    "fixNodeLength": 115,
    "sourceBeforeFix": "reservedWords.contains(codegenProperty.datatypeWithEnum)",
    "sourceAfterFix": "reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f435cb65ce378d7ade3b7ac7ca249c94bdeb8f40",
    "fixCommitParentSHA1": "cc0d29f3ecb7b2cadf5de8cf047679630b8f6bec",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\nindex ddd72e4..7def2a6 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SwiftCodegen.java\n@@ -77,7 +77,8 @@\n         \"Bool\",\n         \"Void\",\n         \"String\",\n-        \"Character\")\n+        \"Character\",\n+        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(\n@@ -118,7 +119,7 @@\n     typeMapping.put(\"float\", \"Float\");\n     typeMapping.put(\"number\", \"Double\");\n     typeMapping.put(\"double\", \"Double\");\n-    typeMapping.put(\"object\", \"String\");\n+    typeMapping.put(\"object\", \"AnyObject\");\n     typeMapping.put(\"file\", \"NSURL\");\n \n     importMapping = new HashMap<String, String>();\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 73,
    "bugNodeStartChar": 2790,
    "bugNodeLength": 135,
    "fixLineNum": 73,
    "fixNodeStartChar": 2790,
    "fixNodeLength": 156,
    "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")",
    "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "460e5befec4e5f821e6f0808b5fc166844f578c9",
    "fixCommitParentSHA1": "05b0d8f1bf3229ebda5cb338362f56a5cce6096d",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java\nindex ae22656..1cf57b8 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java\n@@ -171,7 +171,7 @@\n         String port = \"8080\";\n         if(host != null) {\n             String[] parts = host.split(\":\");\n-            if(parts.length > 0) {\n+            if(parts.length > 1) {\n                 port = parts[1];\n             }\n         }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 174,
    "bugNodeStartChar": 7262,
    "bugNodeLength": 16,
    "fixLineNum": 174,
    "fixNodeStartChar": 7262,
    "fixNodeLength": 16,
    "sourceBeforeFix": "parts.length > 0",
    "sourceAfterFix": "parts.length > 1"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ab062b1386856b7666e3a207c191bcd4a15a9b33",
    "fixCommitParentSHA1": "2c52cc1d86010a9e8d67ee9e773e0317dc487172",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 8c2d0e7..219c5a5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -1496,15 +1496,15 @@\n             p.pattern = qp.getPattern();\n             \n             p.maximum = qp.getMaximum();\n-            p.exclusiveMaximum = qp.getExclusiveMaximum();\n+            p.exclusiveMaximum = qp.isExclusiveMaximum();\n             p.minimum = qp.getMinimum();\n-            p.exclusiveMinimum = qp.getExclusiveMinimum();\n+            p.exclusiveMinimum = qp.isExclusiveMinimum();\n             p.maxLength = qp.getMaxLength();\n             p.minLength = qp.getMinLength();\n             p.pattern = qp.getPattern();\n             p.maxItems = qp.getMaxItems();\n             p.minItems = qp.getMinItems();\n-            p.uniqueItems = qp.getUniqueItems();\n+            p.uniqueItems = qp.isUniqueItems();\n             p.multipleOf = qp.getMultipleOf();\n         } else {\n             if (!(param instanceof BodyParameter)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 1499,
    "bugNodeStartChar": 58711,
    "bugNodeLength": 24,
    "fixLineNum": 1499,
    "fixNodeStartChar": 58711,
    "fixNodeLength": 23,
    "sourceBeforeFix": "qp.getExclusiveMaximum()",
    "sourceAfterFix": "qp.isExclusiveMaximum()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ab062b1386856b7666e3a207c191bcd4a15a9b33",
    "fixCommitParentSHA1": "2c52cc1d86010a9e8d67ee9e773e0317dc487172",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 8c2d0e7..219c5a5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -1496,15 +1496,15 @@\n             p.pattern = qp.getPattern();\n             \n             p.maximum = qp.getMaximum();\n-            p.exclusiveMaximum = qp.getExclusiveMaximum();\n+            p.exclusiveMaximum = qp.isExclusiveMaximum();\n             p.minimum = qp.getMinimum();\n-            p.exclusiveMinimum = qp.getExclusiveMinimum();\n+            p.exclusiveMinimum = qp.isExclusiveMinimum();\n             p.maxLength = qp.getMaxLength();\n             p.minLength = qp.getMinLength();\n             p.pattern = qp.getPattern();\n             p.maxItems = qp.getMaxItems();\n             p.minItems = qp.getMinItems();\n-            p.uniqueItems = qp.getUniqueItems();\n+            p.uniqueItems = qp.isUniqueItems();\n             p.multipleOf = qp.getMultipleOf();\n         } else {\n             if (!(param instanceof BodyParameter)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 1499,
    "bugNodeStartChar": 58711,
    "bugNodeLength": 24,
    "fixLineNum": 1499,
    "fixNodeStartChar": 58711,
    "fixNodeLength": 23,
    "sourceBeforeFix": "qp.getExclusiveMaximum()",
    "sourceAfterFix": "qp.isExclusiveMaximum()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ab062b1386856b7666e3a207c191bcd4a15a9b33",
    "fixCommitParentSHA1": "2c52cc1d86010a9e8d67ee9e773e0317dc487172",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 8c2d0e7..219c5a5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -1496,15 +1496,15 @@\n             p.pattern = qp.getPattern();\n             \n             p.maximum = qp.getMaximum();\n-            p.exclusiveMaximum = qp.getExclusiveMaximum();\n+            p.exclusiveMaximum = qp.isExclusiveMaximum();\n             p.minimum = qp.getMinimum();\n-            p.exclusiveMinimum = qp.getExclusiveMinimum();\n+            p.exclusiveMinimum = qp.isExclusiveMinimum();\n             p.maxLength = qp.getMaxLength();\n             p.minLength = qp.getMinLength();\n             p.pattern = qp.getPattern();\n             p.maxItems = qp.getMaxItems();\n             p.minItems = qp.getMinItems();\n-            p.uniqueItems = qp.getUniqueItems();\n+            p.uniqueItems = qp.isUniqueItems();\n             p.multipleOf = qp.getMultipleOf();\n         } else {\n             if (!(param instanceof BodyParameter)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 1501,
    "bugNodeStartChar": 58811,
    "bugNodeLength": 24,
    "fixLineNum": 1501,
    "fixNodeStartChar": 58811,
    "fixNodeLength": 23,
    "sourceBeforeFix": "qp.getExclusiveMinimum()",
    "sourceAfterFix": "qp.isExclusiveMinimum()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ab062b1386856b7666e3a207c191bcd4a15a9b33",
    "fixCommitParentSHA1": "2c52cc1d86010a9e8d67ee9e773e0317dc487172",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 8c2d0e7..219c5a5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -1496,15 +1496,15 @@\n             p.pattern = qp.getPattern();\n             \n             p.maximum = qp.getMaximum();\n-            p.exclusiveMaximum = qp.getExclusiveMaximum();\n+            p.exclusiveMaximum = qp.isExclusiveMaximum();\n             p.minimum = qp.getMinimum();\n-            p.exclusiveMinimum = qp.getExclusiveMinimum();\n+            p.exclusiveMinimum = qp.isExclusiveMinimum();\n             p.maxLength = qp.getMaxLength();\n             p.minLength = qp.getMinLength();\n             p.pattern = qp.getPattern();\n             p.maxItems = qp.getMaxItems();\n             p.minItems = qp.getMinItems();\n-            p.uniqueItems = qp.getUniqueItems();\n+            p.uniqueItems = qp.isUniqueItems();\n             p.multipleOf = qp.getMultipleOf();\n         } else {\n             if (!(param instanceof BodyParameter)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 1501,
    "bugNodeStartChar": 58811,
    "bugNodeLength": 24,
    "fixLineNum": 1501,
    "fixNodeStartChar": 58811,
    "fixNodeLength": 23,
    "sourceBeforeFix": "qp.getExclusiveMinimum()",
    "sourceAfterFix": "qp.isExclusiveMinimum()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ab062b1386856b7666e3a207c191bcd4a15a9b33",
    "fixCommitParentSHA1": "2c52cc1d86010a9e8d67ee9e773e0317dc487172",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 8c2d0e7..219c5a5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -1496,15 +1496,15 @@\n             p.pattern = qp.getPattern();\n             \n             p.maximum = qp.getMaximum();\n-            p.exclusiveMaximum = qp.getExclusiveMaximum();\n+            p.exclusiveMaximum = qp.isExclusiveMaximum();\n             p.minimum = qp.getMinimum();\n-            p.exclusiveMinimum = qp.getExclusiveMinimum();\n+            p.exclusiveMinimum = qp.isExclusiveMinimum();\n             p.maxLength = qp.getMaxLength();\n             p.minLength = qp.getMinLength();\n             p.pattern = qp.getPattern();\n             p.maxItems = qp.getMaxItems();\n             p.minItems = qp.getMinItems();\n-            p.uniqueItems = qp.getUniqueItems();\n+            p.uniqueItems = qp.isUniqueItems();\n             p.multipleOf = qp.getMultipleOf();\n         } else {\n             if (!(param instanceof BodyParameter)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 1507,
    "bugNodeStartChar": 59082,
    "bugNodeLength": 19,
    "fixLineNum": 1507,
    "fixNodeStartChar": 59082,
    "fixNodeLength": 18,
    "sourceBeforeFix": "qp.getUniqueItems()",
    "sourceAfterFix": "qp.isUniqueItems()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ab062b1386856b7666e3a207c191bcd4a15a9b33",
    "fixCommitParentSHA1": "2c52cc1d86010a9e8d67ee9e773e0317dc487172",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex 8c2d0e7..219c5a5 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -1496,15 +1496,15 @@\n             p.pattern = qp.getPattern();\n             \n             p.maximum = qp.getMaximum();\n-            p.exclusiveMaximum = qp.getExclusiveMaximum();\n+            p.exclusiveMaximum = qp.isExclusiveMaximum();\n             p.minimum = qp.getMinimum();\n-            p.exclusiveMinimum = qp.getExclusiveMinimum();\n+            p.exclusiveMinimum = qp.isExclusiveMinimum();\n             p.maxLength = qp.getMaxLength();\n             p.minLength = qp.getMinLength();\n             p.pattern = qp.getPattern();\n             p.maxItems = qp.getMaxItems();\n             p.minItems = qp.getMinItems();\n-            p.uniqueItems = qp.getUniqueItems();\n+            p.uniqueItems = qp.isUniqueItems();\n             p.multipleOf = qp.getMultipleOf();\n         } else {\n             if (!(param instanceof BodyParameter)) {\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 1507,
    "bugNodeStartChar": 59082,
    "bugNodeLength": 19,
    "fixLineNum": 1507,
    "fixNodeStartChar": 59082,
    "fixNodeLength": 18,
    "sourceBeforeFix": "qp.getUniqueItems()",
    "sourceAfterFix": "qp.isUniqueItems()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "3d3fda9c794011bca067f217e90b00437a7b2ec8",
    "fixCommitParentSHA1": "837ffc89474c530232804c801bc3126c65fa71f2",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java\nindex ff58dbd..13efbc3 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java\n@@ -97,7 +97,9 @@\n                 Arrays.asList(\n                         \"bool\",\n                         \"qint32\",\n-                        \"qint64\")\n+                        \"qint64\",\n+                        \"float\",\n+                        \"double\")\n         );\n \n         supportingFiles.add(new SupportingFile(\"helpers-header.mustache\", sourceFolder, PREFIX + \"Helpers.h\"));\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 97,
    "bugNodeStartChar": 3714,
    "bugNodeLength": 114,
    "fixLineNum": 97,
    "fixNodeStartChar": 3714,
    "fixNodeLength": 181,
    "sourceBeforeFix": "Arrays.asList(\"bool\",\"qint32\",\"qint64\")",
    "sourceAfterFix": "Arrays.asList(\"bool\",\"qint32\",\"qint64\",\"float\",\"double\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4438c63f6b3b2e15431e50dd7d6d62b0baf3da38",
    "fixCommitParentSHA1": "837ffc89474c530232804c801bc3126c65fa71f2",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java\nindex ff58dbd..13efbc3 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Qt5CPPGenerator.java\n@@ -97,7 +97,9 @@\n                 Arrays.asList(\n                         \"bool\",\n                         \"qint32\",\n-                        \"qint64\")\n+                        \"qint64\",\n+                        \"float\",\n+                        \"double\")\n         );\n \n         supportingFiles.add(new SupportingFile(\"helpers-header.mustache\", sourceFolder, PREFIX + \"Helpers.h\"));\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 97,
    "bugNodeStartChar": 3714,
    "bugNodeLength": 114,
    "fixLineNum": 97,
    "fixNodeStartChar": 3714,
    "fixNodeLength": 181,
    "sourceBeforeFix": "Arrays.asList(\"bool\",\"qint32\",\"qint64\")",
    "sourceAfterFix": "Arrays.asList(\"bool\",\"qint32\",\"qint64\",\"float\",\"double\")"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "d451d4efb8af2fee8100493268e92727f0bc0324",
    "fixCommitParentSHA1": "733e19c113b3cf77be28489ae9bc07b425cdd053",
    "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
    "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\nindex efc0aa3..89cf238 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java\n@@ -584,7 +584,7 @@\n                 }\n             }\n             // interfaces (intermediate models)\n-            if (allDefinitions != null) {\n+            if (allDefinitions != null && composed.getInterfaces() != null) {\n                 for (RefModel _interface : composed.getInterfaces()) {\n                     final String interfaceRef = toModelName(_interface.getSimpleRef());\n                     final Model interfaceModel = allDefinitions.get(interfaceRef);\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 587,
    "bugNodeStartChar": 21357,
    "bugNodeLength": 22,
    "fixLineNum": 587,
    "fixNodeStartChar": 21357,
    "fixNodeLength": 58,
    "sourceBeforeFix": "allDefinitions != null",
    "sourceAfterFix": "allDefinitions != null && composed.getInterfaces() != null"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "f27eb7e0de226f6d6e91a9ff187b2ab68b70cf44",
    "fixCommitParentSHA1": "36b7fb20b2009d8ed467cde2f200752ee8c87b77",
    "bugFilePath": "samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java",
    "fixPatch": "diff --git a/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java b/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java\nindex 0ccc371..eabb47e 100644\n--- a/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java\n+++ b/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java\n@@ -216,7 +216,7 @@\n       }\n       else if(String.class.equals(cls)) {\n         if(json != null && json.startsWith(\"\\\"\") && json.endsWith(\"\\\"\") && json.length() > 1)\n-          return json.substring(1, json.length() - 2);\n+          return json.substring(1, json.length() - 1);\n         else\n           return json;\n       }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 219,
    "bugNodeStartChar": 6176,
    "bugNodeLength": 17,
    "fixLineNum": 219,
    "fixNodeStartChar": 6176,
    "fixNodeLength": 17,
    "sourceBeforeFix": "json.length() - 2",
    "sourceAfterFix": "json.length() - 1"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "c7f595fc915025236dad228bff9c4fdc3138c993",
    "fixCommitParentSHA1": "29e8a8f573e47719869287fafd3fd4c2db56a3b1",
    "bugFilePath": "samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java",
    "fixPatch": "diff --git a/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java b/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java\nindex 0ccc371..eabb47e 100644\n--- a/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java\n+++ b/samples/client/petstore/android-java/src/main/java/io/swagger/client/ApiInvoker.java\n@@ -216,7 +216,7 @@\n       }\n       else if(String.class.equals(cls)) {\n         if(json != null && json.startsWith(\"\\\"\") && json.endsWith(\"\\\"\") && json.length() > 1)\n-          return json.substring(1, json.length() - 2);\n+          return json.substring(1, json.length() - 1);\n         else\n           return json;\n       }\n",
    "projectName": "swagger-api.swagger-codegen",
    "bugLineNum": 219,
    "bugNodeStartChar": 6176,
    "bugNodeLength": 17,
    "fixLineNum": 219,
    "fixNodeStartChar": 6176,
    "fixNodeLength": 17,
    "sourceBeforeFix": "json.length() - 2",
    "sourceAfterFix": "json.length() - 1"
  }
]