[
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 76,
    "bugNodeStartChar": 2599,
    "bugNodeLength": 49,
    "fixLineNum": 76,
    "fixNodeStartChar": 2599,
    "fixNodeLength": 49,
    "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 79,
    "bugNodeStartChar": 2784,
    "bugNodeLength": 49,
    "fixLineNum": 79,
    "fixNodeStartChar": 2784,
    "fixNodeLength": 49,
    "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 89,
    "bugNodeStartChar": 3382,
    "bugNodeLength": 52,
    "fixLineNum": 89,
    "fixNodeStartChar": 3382,
    "fixNodeLength": 52,
    "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 92,
    "bugNodeStartChar": 3583,
    "bugNodeLength": 52,
    "fixLineNum": 92,
    "fixNodeStartChar": 3583,
    "fixNodeLength": 52,
    "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 102,
    "bugNodeStartChar": 4227,
    "bugNodeLength": 51,
    "fixLineNum": 102,
    "fixNodeStartChar": 4227,
    "fixNodeLength": 51,
    "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 105,
    "bugNodeStartChar": 4452,
    "bugNodeLength": 51,
    "fixLineNum": 105,
    "fixNodeStartChar": 4452,
    "fixNodeLength": 51,
    "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 115,
    "bugNodeStartChar": 5087,
    "bugNodeLength": 53,
    "fixLineNum": 115,
    "fixNodeStartChar": 5087,
    "fixNodeLength": 53,
    "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 118,
    "bugNodeStartChar": 5290,
    "bugNodeLength": 53,
    "fixLineNum": 118,
    "fixNodeStartChar": 5290,
    "fixNodeLength": 53,
    "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 128,
    "bugNodeStartChar": 5942,
    "bugNodeLength": 56,
    "fixLineNum": 128,
    "fixNodeStartChar": 5942,
    "fixNodeLength": 56,
    "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 131,
    "bugNodeStartChar": 6161,
    "bugNodeLength": 56,
    "fixLineNum": 131,
    "fixNodeStartChar": 6161,
    "fixNodeLength": 56,
    "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 141,
    "bugNodeStartChar": 6755,
    "bugNodeLength": 51,
    "fixLineNum": 141,
    "fixNodeStartChar": 6755,
    "fixNodeLength": 51,
    "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 144,
    "bugNodeStartChar": 6952,
    "bugNodeLength": 51,
    "fixLineNum": 144,
    "fixNodeStartChar": 6952,
    "fixNodeLength": 51,
    "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 154,
    "bugNodeStartChar": 7586,
    "bugNodeLength": 54,
    "fixLineNum": 154,
    "fixNodeStartChar": 7586,
    "fixNodeLength": 54,
    "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
    "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
    "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 157,
    "bugNodeStartChar": 7799,
    "bugNodeLength": 54,
    "fixLineNum": 157,
    "fixNodeStartChar": 7799,
    "fixNodeLength": 54,
    "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)",
    "sourceAfterFix": "factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5febe68b3c812a25f60d16e8faa74e39e87528a7",
    "fixCommitParentSHA1": "2b59c4b6fe289e1d293fea533c5a4de2fcce85f6",
    "bugFilePath": "retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java\nindex 8b5ed7d..7ad58b2 100644\n--- a/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java\n+++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java\n@@ -71,8 +71,9 @@\n     assertThat(body.getCount()).isEqualTo(10);\n \n     RecordedRequest request = server.takeRequest();\n-    assertThat(request.getBody().readUtf8()).isEqualTo(\n-        \"<my-object><message>hello world</message><count>10</count></my-object>\");\n+    assertThat(request.getBody().readUtf8()).isIn(\n+        \"<my-object><message>hello world</message><count>10</count></my-object>\",\n+        \"<my-object><count>10</count><message>hello world</message></my-object>\");\n     assertThat(request.getHeader(\"Content-Type\")).isEqualTo(\"application/xml; charset=UTF-8\");\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 74,
    "bugNodeStartChar": 2641,
    "bugNodeLength": 133,
    "fixLineNum": 74,
    "fixNodeStartChar": 2641,
    "fixNodeLength": 210,
    "sourceBeforeFix": "assertThat(request.getBody().readUtf8()).isEqualTo(\"<my-object><message>hello world</message><count>10</count></my-object>\")",
    "sourceAfterFix": "assertThat(request.getBody().readUtf8()).isIn(\"<my-object><message>hello world</message><count>10</count></my-object>\",\"<my-object><count>10</count><message>hello world</message></my-object>\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5aad2361927142656f4aec42204bec7b454ab084",
    "fixCommitParentSHA1": "49a87b383473c4492d99a71897460078ffd350e9",
    "bugFilePath": "retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java",
    "fixPatch": "diff --git a/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java\nindex 8b5ed7d..7ad58b2 100644\n--- a/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java\n+++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java\n@@ -71,8 +71,9 @@\n     assertThat(body.getCount()).isEqualTo(10);\n \n     RecordedRequest request = server.takeRequest();\n-    assertThat(request.getBody().readUtf8()).isEqualTo(\n-        \"<my-object><message>hello world</message><count>10</count></my-object>\");\n+    assertThat(request.getBody().readUtf8()).isIn(\n+        \"<my-object><message>hello world</message><count>10</count></my-object>\",\n+        \"<my-object><count>10</count><message>hello world</message></my-object>\");\n     assertThat(request.getHeader(\"Content-Type\")).isEqualTo(\"application/xml; charset=UTF-8\");\n   }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 74,
    "bugNodeStartChar": 2641,
    "bugNodeLength": 133,
    "fixLineNum": 74,
    "fixNodeStartChar": 2641,
    "fixNodeLength": 210,
    "sourceBeforeFix": "assertThat(request.getBody().readUtf8()).isEqualTo(\"<my-object><message>hello world</message><count>10</count></my-object>\")",
    "sourceAfterFix": "assertThat(request.getBody().readUtf8()).isIn(\"<my-object><message>hello world</message><count>10</count></my-object>\",\"<my-object><count>10</count><message>hello world</message></my-object>\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3ce5556c31e627cc5e47fddf0a639f9e1fa32a3b",
    "fixCommitParentSHA1": "b1e433081ffdaa614da574f58c340bca2e178289",
    "bugFilePath": "retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java",
    "fixPatch": "diff --git a/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java\nindex 0467696..3f5c7e8 100644\n--- a/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java\n+++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java\n@@ -37,7 +37,7 @@\n     }\n \n     if (!MIME_TYPE.equalsIgnoreCase(body.mimeType())) {\n-      throw new IllegalArgumentException(\"Expected a proto but was: \" + body.mimeType());\n+      throw new ConversionException(\"Expected a proto but was: \" + body.mimeType());\n     }\n \n     InputStream in = null;\n",
    "projectName": "square.retrofit",
    "bugLineNum": 40,
    "bugNodeStartChar": 1301,
    "bugNodeLength": 76,
    "fixLineNum": 40,
    "fixNodeStartChar": 1301,
    "fixNodeLength": 71,
    "sourceBeforeFix": "new IllegalArgumentException(\"Expected a proto but was: \" + body.mimeType())",
    "sourceAfterFix": "new ConversionException(\"Expected a proto but was: \" + body.mimeType())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3ce5556c31e627cc5e47fddf0a639f9e1fa32a3b",
    "fixCommitParentSHA1": "b1e433081ffdaa614da574f58c340bca2e178289",
    "bugFilePath": "retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java",
    "fixPatch": "diff --git a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java\nindex 6756dd8..fd30344 100644\n--- a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java\n+++ b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java\n@@ -64,7 +64,7 @@\n     try {\n       converter.fromBody(decodeBase64(\"////\", \"yummy/bytes\"), Person.class);\n       fail();\n-    } catch (IllegalArgumentException e) {\n+    } catch (ConversionException e) {\n       assertThat(e).hasMessage(\"Expected a proto but was: yummy/bytes\");\n     }\n   }\n",
    "projectName": "square.retrofit",
    "bugLineNum": 67,
    "bugNodeStartChar": 2327,
    "bugNodeLength": 26,
    "fixLineNum": 67,
    "fixNodeStartChar": 2327,
    "fixNodeLength": 21,
    "sourceBeforeFix": "IllegalArgumentException e",
    "sourceAfterFix": "ConversionException e"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "aa2e0a36d1bf926dade3a92cdca38f6d6ee834b3",
    "fixCommitParentSHA1": "b1e433081ffdaa614da574f58c340bca2e178289",
    "bugFilePath": "retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java",
    "fixPatch": "diff --git a/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java\nindex 0467696..3f5c7e8 100644\n--- a/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java\n+++ b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java\n@@ -37,7 +37,7 @@\n     }\n \n     if (!MIME_TYPE.equalsIgnoreCase(body.mimeType())) {\n-      throw new IllegalArgumentException(\"Expected a proto but was: \" + body.mimeType());\n+      throw new ConversionException(\"Expected a proto but was: \" + body.mimeType());\n     }\n \n     InputStream in = null;\n",
    "projectName": "square.retrofit",
    "bugLineNum": 40,
    "bugNodeStartChar": 1301,
    "bugNodeLength": 76,
    "fixLineNum": 40,
    "fixNodeStartChar": 1301,
    "fixNodeLength": 71,
    "sourceBeforeFix": "new IllegalArgumentException(\"Expected a proto but was: \" + body.mimeType())",
    "sourceAfterFix": "new ConversionException(\"Expected a proto but was: \" + body.mimeType())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "aa2e0a36d1bf926dade3a92cdca38f6d6ee834b3",
    "fixCommitParentSHA1": "b1e433081ffdaa614da574f58c340bca2e178289",
    "bugFilePath": "retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java",
    "fixPatch": "diff --git a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java\nindex 6756dd8..fd30344 100644\n--- a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java\n+++ b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java\n@@ -64,7 +64,7 @@\n     try {\n       converter.fromBody(decodeBase64(\"////\", \"yummy/bytes\"), Person.class);\n       fail();\n-    } catch (IllegalArgumentException e) {\n+    } catch (ConversionException e) {\n       assertThat(e).hasMessage(\"Expected a proto but was: yummy/bytes\");\n     }\n   }\n",
    "projectName": "square.retrofit",
    "bugLineNum": 67,
    "bugNodeStartChar": 2327,
    "bugNodeLength": 26,
    "fixLineNum": 67,
    "fixNodeStartChar": 2327,
    "fixNodeLength": 21,
    "sourceBeforeFix": "IllegalArgumentException e",
    "sourceAfterFix": "ConversionException e"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d7da1cdc2406b88aae75ebfeaca93bbf3c94d505",
    "fixCommitParentSHA1": "2a5da1f208e150602572db08c446654aff18f746",
    "bugFilePath": "retrofit/src/main/java/retrofit/RestAdapter.java",
    "fixPatch": "diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java\nindex 3d862a1..43186e4 100644\n--- a/retrofit/src/main/java/retrofit/RestAdapter.java\n+++ b/retrofit/src/main/java/retrofit/RestAdapter.java\n@@ -584,7 +584,7 @@\n      * @deprecated Use {@link #setEndpoint(String)} or {@link #setEndpoint(Endpoint)}.\n      */\n     @Deprecated\n-    public Builder setServer(Endpoint server) {\n+    public Builder setServer(Server server) {\n       return setEndpoint(server);\n     }\n \n",
    "projectName": "square.retrofit",
    "bugLineNum": 587,
    "bugNodeStartChar": 21812,
    "bugNodeLength": 15,
    "fixLineNum": 587,
    "fixNodeStartChar": 21812,
    "fixNodeLength": 13,
    "sourceBeforeFix": "Endpoint server",
    "sourceAfterFix": "Server server"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "0488684468895123c0a9784cb4660dd9b1df0144",
    "fixCommitParentSHA1": "ece261be29a18d979ccc3cafb4703e4505f8e66a",
    "bugFilePath": "samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java",
    "fixPatch": "diff --git a/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java\nindex 7a5cf2e..21085df 100644\n--- a/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java\n+++ b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java\n@@ -23,7 +23,7 @@\n public class GitHubClient {\n   private static final String API_URL = \"https://api.github.com\";\n \n-  class Contributor {\n+  static class Contributor {\n     String login;\n     int contributions;\n   }\n",
    "projectName": "square.retrofit",
    "bugLineNum": 26,
    "bugNodeStartChar": 835,
    "bugNodeLength": 64,
    "fixLineNum": 26,
    "fixNodeStartChar": 835,
    "fixNodeLength": 71,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "8"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "f520b68bb40e65bff13fca3102cf93421a5cf2dc",
    "fixCommitParentSHA1": "ece261be29a18d979ccc3cafb4703e4505f8e66a",
    "bugFilePath": "samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java",
    "fixPatch": "diff --git a/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java\nindex 7a5cf2e..21085df 100644\n--- a/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java\n+++ b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java\n@@ -23,7 +23,7 @@\n public class GitHubClient {\n   private static final String API_URL = \"https://api.github.com\";\n \n-  class Contributor {\n+  static class Contributor {\n     String login;\n     int contributions;\n   }\n",
    "projectName": "square.retrofit",
    "bugLineNum": 26,
    "bugNodeStartChar": 835,
    "bugNodeLength": 64,
    "fixLineNum": 26,
    "fixNodeStartChar": 835,
    "fixNodeLength": 71,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "8"
  }
]