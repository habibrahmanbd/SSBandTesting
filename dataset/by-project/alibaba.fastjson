[
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "69fb121cc09b8fdf6c4aa63fbb634c1e322641db",
    "fixCommitParentSHA1": "77315628fbe635ec417bc45c237527577092e742",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/DateCodec.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java b/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java\nindex f866cd5..d1a3a70 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java\n@@ -55,7 +55,7 @@\n             long millis = ((java.sql.Date) object).getTime();\r\n             TimeZone timeZone = serializer.timeZone;\r\n             int offset = timeZone.getOffset(millis);\r\n-            if (millis % offset == 0) {\r\n+            if (offset == 0 || millis % offset == 0) {\r\n                 out.writeString(object.toString());\r\n                 return;\r\n             }\r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 58,
    "bugNodeStartChar": 2184,
    "bugNodeLength": 20,
    "fixLineNum": 58,
    "fixNodeStartChar": 2127,
    "fixNodeLength": 35,
    "sourceBeforeFix": "millis % offset == 0",
    "sourceAfterFix": "offset == 0 || millis % offset == 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "69fb121cc09b8fdf6c4aa63fbb634c1e322641db",
    "fixCommitParentSHA1": "77315628fbe635ec417bc45c237527577092e742",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/DateCodec.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java b/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java\nindex f866cd5..d1a3a70 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/DateCodec.java\n@@ -55,7 +55,7 @@\n             long millis = ((java.sql.Date) object).getTime();\r\n             TimeZone timeZone = serializer.timeZone;\r\n             int offset = timeZone.getOffset(millis);\r\n-            if (millis % offset == 0) {\r\n+            if (offset == 0 || millis % offset == 0) {\r\n                 out.writeString(object.toString());\r\n                 return;\r\n             }\r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 58,
    "bugNodeStartChar": 2184,
    "bugNodeLength": 20,
    "fixLineNum": 58,
    "fixNodeStartChar": 2127,
    "fixNodeLength": 35,
    "sourceBeforeFix": "millis % offset == 0",
    "sourceAfterFix": "offset == 0 || millis % offset == 0"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "2be95491786ea3c3ef4d94a5d206b89cf4a76a1f",
    "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 15,
    "bugNodeStartChar": 641,
    "bugNodeLength": 18,
    "fixLineNum": 15,
    "fixNodeStartChar": 641,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new String(bytes2)",
    "sourceAfterFix": "new String(bytes2,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "2be95491786ea3c3ef4d94a5d206b89cf4a76a1f",
    "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 20,
    "bugNodeStartChar": 794,
    "bugNodeLength": 18,
    "fixLineNum": 20,
    "fixNodeStartChar": 794,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new String(bytes2)",
    "sourceAfterFix": "new String(bytes2,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "2be95491786ea3c3ef4d94a5d206b89cf4a76a1f",
    "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 25,
    "bugNodeStartChar": 961,
    "bugNodeLength": 18,
    "fixLineNum": 25,
    "fixNodeStartChar": 961,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new String(bytes2)",
    "sourceAfterFix": "new String(bytes2,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "18d518ab9bdccb9fb054141bd775326397c03f49",
    "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 15,
    "bugNodeStartChar": 641,
    "bugNodeLength": 18,
    "fixLineNum": 15,
    "fixNodeStartChar": 641,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new String(bytes2)",
    "sourceAfterFix": "new String(bytes2,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "18d518ab9bdccb9fb054141bd775326397c03f49",
    "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 20,
    "bugNodeStartChar": 794,
    "bugNodeLength": 18,
    "fixLineNum": 20,
    "fixNodeStartChar": 794,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new String(bytes2)",
    "sourceAfterFix": "new String(bytes2,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "18d518ab9bdccb9fb054141bd775326397c03f49",
    "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 25,
    "bugNodeStartChar": 961,
    "bugNodeLength": 18,
    "fixLineNum": 25,
    "fixNodeStartChar": 961,
    "fixNodeLength": 26,
    "sourceBeforeFix": "new String(bytes2)",
    "sourceAfterFix": "new String(bytes2,\"UTF8\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "92b9986bd0c48759694a83cac77858f293801a11",
    "fixCommitParentSHA1": "a8407fa310d85ed2a71b0075d2b5a948cd722d7e",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSON.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex c12f6b3..6eda084 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -1001,7 +1001,7 @@\n             for (Map.Entry<Object, Object> entry : map.entrySet()) {\n                 Object key = entry.getKey();\n                 String jsonKey = TypeUtils.castToString(key);\n-                Object jsonValue = toJSON(entry.getValue());\n+                Object jsonValue = toJSON(entry.getValue(), config);\n                 json.put(jsonKey, jsonValue);\n             }\n \n@@ -1014,7 +1014,7 @@\n             JSONArray array = new JSONArray(collection.size());\n \n             for (Object item : collection) {\n-                Object jsonValue = toJSON(item);\n+                Object jsonValue = toJSON(item, config);\n                 array.add(jsonValue);\n             }\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1004,
    "bugNodeStartChar": 37181,
    "bugNodeLength": 24,
    "fixLineNum": 1004,
    "fixNodeStartChar": 37181,
    "fixNodeLength": 32,
    "sourceBeforeFix": "toJSON(entry.getValue())",
    "sourceAfterFix": "toJSON(entry.getValue(),config)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "92b9986bd0c48759694a83cac77858f293801a11",
    "fixCommitParentSHA1": "a8407fa310d85ed2a71b0075d2b5a948cd722d7e",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSON.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex c12f6b3..6eda084 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -1001,7 +1001,7 @@\n             for (Map.Entry<Object, Object> entry : map.entrySet()) {\n                 Object key = entry.getKey();\n                 String jsonKey = TypeUtils.castToString(key);\n-                Object jsonValue = toJSON(entry.getValue());\n+                Object jsonValue = toJSON(entry.getValue(), config);\n                 json.put(jsonKey, jsonValue);\n             }\n \n@@ -1014,7 +1014,7 @@\n             JSONArray array = new JSONArray(collection.size());\n \n             for (Object item : collection) {\n-                Object jsonValue = toJSON(item);\n+                Object jsonValue = toJSON(item, config);\n                 array.add(jsonValue);\n             }\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1017,
    "bugNodeStartChar": 37575,
    "bugNodeLength": 12,
    "fixLineNum": 1017,
    "fixNodeStartChar": 37575,
    "fixNodeLength": 20,
    "sourceBeforeFix": "toJSON(item)",
    "sourceAfterFix": "toJSON(item,config)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "e3e1fea787147261448e30c1745d9157f442cb9f",
    "fixCommitParentSHA1": "17e56f9c6b1e650c1ea9190d479ad390111234f1",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java b/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java\nindex b27e6e0..f900ce2 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java\n@@ -2447,7 +2447,7 @@\n                 }\r\n             }\r\n \r\n-            int power = 1;\r\n+            long power = 1;\r\n             boolean small = (chLocal == '.');\r\n             if (small) {\r\n                 chLocal = charAt(bp + (offset++));\r\n@@ -2500,7 +2500,7 @@\n                 count = bp + offset - start - 1;\r\n             }\r\n \r\n-            if ((!exp) && count < 12) {\r\n+            if ((!exp) && count < 17) {\r\n                 value = (float) (((double) intVal) / power);\r\n                 if (negative) {\r\n                     value = -value;\r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 2503,
    "bugNodeStartChar": 77154,
    "bugNodeLength": 10,
    "fixLineNum": 2503,
    "fixNodeStartChar": 74652,
    "fixNodeLength": 10,
    "sourceBeforeFix": "count < 12",
    "sourceAfterFix": "count < 17"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "e3e1fea787147261448e30c1745d9157f442cb9f",
    "fixCommitParentSHA1": "17e56f9c6b1e650c1ea9190d479ad390111234f1",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/basicType/FloatTest3_random.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/basicType/FloatTest3_random.java b/src/test/java/com/alibaba/json/bvt/basicType/FloatTest3_random.java\nindex b2a70da..8eff86f 100644\n--- a/src/test/java/com/alibaba/json/bvt/basicType/FloatTest3_random.java\n+++ b/src/test/java/com/alibaba/json/bvt/basicType/FloatTest3_random.java\n@@ -26,7 +26,7 @@\n     public void test_ran_2() throws Exception {\n         Random rand = new Random();\n \n-        for (int i = 0; i < 1000 * 1000 * 10; ++i) {\n+        for (int i = 0; i < 1000 * 1000 * 1; ++i) {\n             float val = rand.nextFloat();\n \n             String str = JSON.toJSONString(new Model(val), SerializerFeature.BeanToArray);\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 29,
    "bugNodeStartChar": 810,
    "bugNodeLength": 16,
    "fixLineNum": 29,
    "fixNodeStartChar": 810,
    "fixNodeLength": 15,
    "sourceBeforeFix": "1000 * 1000 * 10",
    "sourceAfterFix": "1000 * 1000 * 1"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "fc97fa76f122c0288617975b047a7a813f6b2c88",
    "fixCommitParentSHA1": "1de68e447dd02d55c704c625058981192d58a5e3",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java b/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java\nindex cc75fd4..85d97e7 100644\n--- a/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java\n+++ b/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java\n@@ -8,7 +8,7 @@\n     public void test_for_joda_0() throws Exception {\n \n        Model m = new Model();\n-       m.zone = DateTimeZone.getDefault();\n+       m.zone = DateTimeZone.forID(\"Asia/Shanghai\");\n \n        String json = JSON.toJSONString(m);\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 11,
    "bugNodeStartChar": 295,
    "bugNodeLength": 25,
    "fixLineNum": 11,
    "fixNodeStartChar": 295,
    "fixNodeLength": 35,
    "sourceBeforeFix": "DateTimeZone.getDefault()",
    "sourceAfterFix": "DateTimeZone.forID(\"Asia/Shanghai\")"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "afc1ff8a41848817cb3b3be04bcb5c0a2df41293",
    "fixCommitParentSHA1": "504c611956a5c43c5ce643dbbf5cf53bfb59ffe5",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/BigDecimalCodec.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/BigDecimalCodec.java b/src/main/java/com/alibaba/fastjson/serializer/BigDecimalCodec.java\nindex 008ec8f..6b70096 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/BigDecimalCodec.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/BigDecimalCodec.java\n@@ -43,7 +43,7 @@\n             int scale = val.scale();\r\n \r\n             String outText;\r\n-            if (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain) && scale >= 100 && scale < 100) {\r\n+            if (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain) && scale >= -100 && scale < 100) {\r\n                 outText = val.toPlainString();\r\n             } else {\r\n                 outText = val.toString();\r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 46,
    "bugNodeStartChar": 1780,
    "bugNodeLength": 3,
    "fixLineNum": 46,
    "fixNodeStartChar": 1735,
    "fixNodeLength": 4,
    "sourceBeforeFix": "100",
    "sourceAfterFix": "-100"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "afc1ff8a41848817cb3b3be04bcb5c0a2df41293",
    "fixCommitParentSHA1": "504c611956a5c43c5ce643dbbf5cf53bfb59ffe5",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java b/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java\nindex 0f29540..e762371 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java\n@@ -2126,7 +2126,7 @@\n             writeNull();\r\n         } else {\r\n             int scale = value.scale();\r\n-            write(isEnabled(SerializerFeature.WriteBigDecimalAsPlain) && scale >= 100 && scale < 100\r\n+            write(isEnabled(SerializerFeature.WriteBigDecimalAsPlain) && scale >= -100 && scale < 100\r\n                     ? value.toPlainString()\r\n                     : value.toString()\r\n             );\r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 2129,
    "bugNodeStartChar": 76787,
    "bugNodeLength": 3,
    "fixLineNum": 2129,
    "fixNodeStartChar": 74659,
    "fixNodeLength": 4,
    "sourceBeforeFix": "100",
    "sourceAfterFix": "-100"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f7236ba0d5a866d31b194e22c2a0fccc6f238f9d",
    "fixCommitParentSHA1": "042f8be8fe517af0cb4636ebb10aab300edb5fd6",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/util/JavaBeanInfo.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/util/JavaBeanInfo.java b/src/main/java/com/alibaba/fastjson/util/JavaBeanInfo.java\nindex fe43086..9424f94 100644\n--- a/src/main/java/com/alibaba/fastjson/util/JavaBeanInfo.java\n+++ b/src/main/java/com/alibaba/fastjson/util/JavaBeanInfo.java\n@@ -355,7 +355,7 @@\n                 String[] paramNames = null;\n                 if (kotlin && constructors.length > 0) {\n                     paramNames = TypeUtils.getKoltinConstructorParameters(clazz);\n-                    creatorConstructor = TypeUtils.getKoltinConstructor(constructors);\n+                    creatorConstructor = TypeUtils.getKoltinConstructor(constructors, paramNames);\n                     TypeUtils.setAccessible(creatorConstructor);\n                 } else {\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 358,
    "bugNodeStartChar": 15112,
    "bugNodeLength": 44,
    "fixLineNum": 358,
    "fixNodeStartChar": 15112,
    "fixNodeLength": 56,
    "sourceBeforeFix": "TypeUtils.getKoltinConstructor(constructors)",
    "sourceAfterFix": "TypeUtils.getKoltinConstructor(constructors,paramNames)"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "6b3ba9232570ab991e2bbd3e52f98133544ac9bd",
    "fixCommitParentSHA1": "6d1716be90eb40aa4fb003555f183ca9bd7e5fcc",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/util/FieldInfo.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/util/FieldInfo.java b/src/main/java/com/alibaba/fastjson/util/FieldInfo.java\nindex 7e510be..66ee78b 100755\n--- a/src/main/java/com/alibaba/fastjson/util/FieldInfo.java\n+++ b/src/main/java/com/alibaba/fastjson/util/FieldInfo.java\n@@ -369,7 +369,7 @@\n             }\n         }\n \n-        if (arguments == null) {\n+        if (arguments == null || class_gd == null) {\n             return null;\n         }\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 372,
    "bugNodeStartChar": 13562,
    "bugNodeLength": 17,
    "fixLineNum": 372,
    "fixNodeStartChar": 13562,
    "fixNodeLength": 37,
    "sourceBeforeFix": "arguments == null",
    "sourceAfterFix": "arguments == null || class_gd == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "6b3ba9232570ab991e2bbd3e52f98133544ac9bd",
    "fixCommitParentSHA1": "6d1716be90eb40aa4fb003555f183ca9bd7e5fcc",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/util/FieldInfo.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/util/FieldInfo.java b/src/main/java/com/alibaba/fastjson/util/FieldInfo.java\nindex 7e510be..66ee78b 100755\n--- a/src/main/java/com/alibaba/fastjson/util/FieldInfo.java\n+++ b/src/main/java/com/alibaba/fastjson/util/FieldInfo.java\n@@ -369,7 +369,7 @@\n             }\n         }\n \n-        if (arguments == null) {\n+        if (arguments == null || class_gd == null) {\n             return null;\n         }\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 372,
    "bugNodeStartChar": 13562,
    "bugNodeLength": 17,
    "fixLineNum": 372,
    "fixNodeStartChar": 13562,
    "fixNodeLength": 37,
    "sourceBeforeFix": "arguments == null",
    "sourceAfterFix": "arguments == null || class_gd == null"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9c6deba08ff8df1859972ccfd205c274f2fa0583",
    "fixCommitParentSHA1": "7c21c3eba9676c10676c0dd1b6025ffea420dc10",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java b/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java\nindex df5b992..b57ac5e 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java\n@@ -473,7 +473,7 @@\n         if (writer != null && count > 0) {\r\n             flush();\r\n         }\r\n-        if (buf.length <= 1024 * 64) {\r\n+        if (buf.length <= 1024 * 128) {\r\n             bufLocal.set(buf);\r\n         }\r\n \r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 476,
    "bugNodeStartChar": 15591,
    "bugNodeLength": 9,
    "fixLineNum": 476,
    "fixNodeStartChar": 15116,
    "fixNodeLength": 10,
    "sourceBeforeFix": "1024 * 64",
    "sourceAfterFix": "1024 * 128"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "c50bf15e78dd1c752299ff126661cce2de24ff74",
    "fixCommitParentSHA1": "13af5173bb43b68183dae5009fd245490dcd866f",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java b/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java\nindex 118af9d..8a8d780 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java\n@@ -223,7 +223,7 @@\n     }\n     \n     public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n-        return deserialze(parser, type, fieldName, null, 0, null);\n+        return deserialze(parser, type, fieldName, 0);\n     }\n \n     public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName, int features) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 226,
    "bugNodeStartChar": 8610,
    "bugNodeLength": 50,
    "fixLineNum": 226,
    "fixNodeStartChar": 8610,
    "fixNodeLength": 38,
    "sourceBeforeFix": "deserialze(parser,type,fieldName,null,0,null)",
    "sourceAfterFix": "deserialze(parser,type,fieldName,0)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "b09304b10d474c17e6f5a04ffb45f119168a9cd4",
    "fixCommitParentSHA1": "b4cd506b76806f7a043efe8b6be83bf45f2e2425",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.java b/src/main/java/com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.java\nindex 4a6295b..930e7ba 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/deserializer/AbstractDateDeserializer.java\n@@ -34,7 +34,7 @@\n             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n-                    simpleDateFormat = new SimpleDateFormat(format);\n+                    simpleDateFormat = new SimpleDateFormat(format,JSON.defaultLocale);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 37,
    "bugNodeStartChar": 1423,
    "bugNodeLength": 28,
    "fixLineNum": 37,
    "fixNodeStartChar": 1423,
    "fixNodeLength": 47,
    "sourceBeforeFix": "new SimpleDateFormat(format)",
    "sourceAfterFix": "new SimpleDateFormat(format,JSON.defaultLocale)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9b86a4684080319a63970fbc4d8b49c4e8113df5",
    "fixCommitParentSHA1": "da2a7836c5cdf32a8ea95ef87c769744ae66d908",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSONPath.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSONPath.java b/src/main/java/com/alibaba/fastjson/JSONPath.java\nindex 2553e33..15e81d1 100644\n--- a/src/main/java/com/alibaba/fastjson/JSONPath.java\n+++ b/src/main/java/com/alibaba/fastjson/JSONPath.java\n@@ -2189,7 +2189,7 @@\n                 FieldSerializer fieldDeser = beanSerializer.getFieldSerializer(propertyName);\n                 if (fieldDeser != null) {\n                     try {\n-                        Object val = fieldDeser.getPropertyValue(currentObject);\n+                        Object val = fieldDeser.getPropertyValueDirect(currentObject);\n                         results.add(val);\n                     } catch (InvocationTargetException ex) {\n                         throw new JSONException(\"getFieldValue error.\" + propertyName, ex);\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 2192,
    "bugNodeStartChar": 71757,
    "bugNodeLength": 42,
    "fixLineNum": 2192,
    "fixNodeStartChar": 71757,
    "fixNodeLength": 48,
    "sourceBeforeFix": "fieldDeser.getPropertyValue(currentObject)",
    "sourceAfterFix": "fieldDeser.getPropertyValueDirect(currentObject)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9b86a4684080319a63970fbc4d8b49c4e8113df5",
    "fixCommitParentSHA1": "da2a7836c5cdf32a8ea95ef87c769744ae66d908",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSONPath.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSONPath.java b/src/main/java/com/alibaba/fastjson/JSONPath.java\nindex 2553e33..15e81d1 100644\n--- a/src/main/java/com/alibaba/fastjson/JSONPath.java\n+++ b/src/main/java/com/alibaba/fastjson/JSONPath.java\n@@ -2189,7 +2189,7 @@\n                 FieldSerializer fieldDeser = beanSerializer.getFieldSerializer(propertyName);\n                 if (fieldDeser != null) {\n                     try {\n-                        Object val = fieldDeser.getPropertyValue(currentObject);\n+                        Object val = fieldDeser.getPropertyValueDirect(currentObject);\n                         results.add(val);\n                     } catch (InvocationTargetException ex) {\n                         throw new JSONException(\"getFieldValue error.\" + propertyName, ex);\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 2192,
    "bugNodeStartChar": 71757,
    "bugNodeLength": 42,
    "fixLineNum": 2192,
    "fixNodeStartChar": 71757,
    "fixNodeLength": 48,
    "sourceBeforeFix": "fieldDeser.getPropertyValue(currentObject)",
    "sourceAfterFix": "fieldDeser.getPropertyValueDirect(currentObject)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "fbbd169b6e8ac15010ea51ba6debef36299fc696",
    "fixCommitParentSHA1": "c17b1acdfe66fb096cbd2a57fcd93f001bca66ab",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java b/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java\nindex ee68639..23a04cd 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java\n@@ -549,7 +549,7 @@\n \t}\n \n     public boolean put(Object type, Object value) {\n-        return put((Type)type, (ObjectDeserializer)value);\n+        return put((Type)type, (ObjectSerializer)value);\n     }\n \n \tpublic boolean put(Type type, ObjectSerializer value) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 552,
    "bugNodeStartChar": 21569,
    "bugNodeLength": 25,
    "fixLineNum": 552,
    "fixNodeStartChar": 21569,
    "fixNodeLength": 23,
    "sourceBeforeFix": "(ObjectDeserializer)value",
    "sourceAfterFix": "(ObjectSerializer)value"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 24,
    "bugNodeStartChar": 603,
    "bugNodeLength": 40,
    "fixLineNum": 24,
    "fixNodeStartChar": 603,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 38,
    "bugNodeStartChar": 1303,
    "bugNodeLength": 40,
    "fixLineNum": 38,
    "fixNodeStartChar": 1303,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 52,
    "bugNodeStartChar": 2004,
    "bugNodeLength": 40,
    "fixLineNum": 52,
    "fixNodeStartChar": 2004,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 66,
    "bugNodeStartChar": 2706,
    "bugNodeLength": 40,
    "fixLineNum": 66,
    "fixNodeStartChar": 2706,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 80,
    "bugNodeStartChar": 3408,
    "bugNodeLength": 40,
    "fixLineNum": 80,
    "fixNodeStartChar": 3408,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 94,
    "bugNodeStartChar": 4111,
    "bugNodeLength": 40,
    "fixLineNum": 94,
    "fixNodeStartChar": 4111,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 108,
    "bugNodeStartChar": 4812,
    "bugNodeLength": 40,
    "fixLineNum": 108,
    "fixNodeStartChar": 4812,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 122,
    "bugNodeStartChar": 5514,
    "bugNodeLength": 40,
    "fixLineNum": 122,
    "fixNodeStartChar": 5514,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 136,
    "bugNodeStartChar": 6216,
    "bugNodeLength": 40,
    "fixLineNum": 136,
    "fixNodeStartChar": 6216,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 150,
    "bugNodeStartChar": 6919,
    "bugNodeLength": 40,
    "fixLineNum": 150,
    "fixNodeStartChar": 6919,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 164,
    "bugNodeStartChar": 7619,
    "bugNodeLength": 40,
    "fixLineNum": 164,
    "fixNodeStartChar": 7619,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6",
    "fixCommitParentSHA1": "6dfab498859b7406ed85bf48b5c81a06be1d0fe0",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\nindex 358a2ed..9f775e3 100644\n--- a/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n+++ b/src/test/java/com/alibaba/json/bvt/date/DateFieldTest9.java\n@@ -21,7 +21,7 @@\n     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -35,7 +35,7 @@\n     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -49,7 +49,7 @@\n     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -63,7 +63,7 @@\n     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -77,7 +77,7 @@\n     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -91,7 +91,7 @@\n     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -105,7 +105,7 @@\n     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -119,7 +119,7 @@\n     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -133,7 +133,7 @@\n     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -147,7 +147,7 @@\n     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -161,7 +161,7 @@\n     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n@@ -175,7 +175,7 @@\n     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n \n-        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n+        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 178,
    "bugNodeStartChar": 8319,
    "bugNodeLength": 40,
    "fixLineNum": 178,
    "fixNodeStartChar": 8319,
    "fixNodeLength": 62,
    "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)",
    "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5a3d01d226ccd5e879fc301a9ca2706aa066e752",
    "fixCommitParentSHA1": "80ab94f8540d80dd24f444d3fbc58b791dc6baf7",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex db2a1e7..325b097 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -33,7 +33,7 @@\n \n public class ASMSerializerFactory implements Opcodes {\n \n-    protected final ASMClassLoader classLoader             = new ASMClassLoader();\n+    protected final ASMClassLoader classLoader             = new ASMClassLoader(ASMSerializerFactory.class.getClassLoader());\n \n     private final AtomicLong       seed                    = new AtomicLong();\n \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 36,
    "bugNodeStartChar": 1280,
    "bugNodeLength": 20,
    "fixLineNum": 36,
    "fixNodeStartChar": 1280,
    "fixNodeLength": 63,
    "sourceBeforeFix": "new ASMClassLoader()",
    "sourceAfterFix": "new ASMClassLoader(ASMSerializerFactory.class.getClassLoader())"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d",
    "fixCommitParentSHA1": "b58fc9ad713aa8ca68b0b38a87b235f4f8f96d6c",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 34d1c15..1dcf1e3 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -586,7 +586,7 @@\n                 mw.visitLabel(forItemNullElse_);\n \n                 Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n-                if (elementClass != null) {\n+                if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\n                     mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                     mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                     mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\n@@ -697,7 +697,7 @@\n                 mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\n \n                 Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\n-                if (context.writeDirect) {\n+                if (context.writeDirect && Modifier.isPublic(fieldClass.getModifiers())) {\n                     mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\n                     mw.visitTypeInsn(INSTANCEOF, type(JavaBeanSerializer.class));\n                     mw.visitJumpInsn(IFEQ, instanceOfElse_);\n@@ -1482,7 +1482,7 @@\n             mw.visitLabel(forItemNullElse_);\n \n             Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n-            if (elementClass != null) {\n+            if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\n                 mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                 mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                 mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\n@@ -1670,7 +1670,7 @@\n         mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldName\", \"(Ljava/lang/String;Z)V\");\n \n         Label classIfEnd_ = new Label(), classIfElse_ = new Label();\n-        if (!ParserConfig.isPrimitive(fieldClass)) {\n+        if (Modifier.isPublic(fieldClass.getModifiers()) && !ParserConfig.isPrimitive(fieldClass)) {\n             mw.visitVarInsn(ALOAD, context.var(\"object\"));\n             mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n             mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 589,
    "bugNodeStartChar": 25510,
    "bugNodeLength": 20,
    "fixLineNum": 589,
    "fixNodeStartChar": 25510,
    "fixNodeLength": 70,
    "sourceBeforeFix": "elementClass != null",
    "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d",
    "fixCommitParentSHA1": "b58fc9ad713aa8ca68b0b38a87b235f4f8f96d6c",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 34d1c15..1dcf1e3 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -586,7 +586,7 @@\n                 mw.visitLabel(forItemNullElse_);\n \n                 Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n-                if (elementClass != null) {\n+                if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\n                     mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                     mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                     mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\n@@ -697,7 +697,7 @@\n                 mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\n \n                 Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\n-                if (context.writeDirect) {\n+                if (context.writeDirect && Modifier.isPublic(fieldClass.getModifiers())) {\n                     mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\n                     mw.visitTypeInsn(INSTANCEOF, type(JavaBeanSerializer.class));\n                     mw.visitJumpInsn(IFEQ, instanceOfElse_);\n@@ -1482,7 +1482,7 @@\n             mw.visitLabel(forItemNullElse_);\n \n             Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n-            if (elementClass != null) {\n+            if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\n                 mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                 mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                 mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));\n@@ -1670,7 +1670,7 @@\n         mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, \"writeFieldName\", \"(Ljava/lang/String;Z)V\");\n \n         Label classIfEnd_ = new Label(), classIfElse_ = new Label();\n-        if (!ParserConfig.isPrimitive(fieldClass)) {\n+        if (Modifier.isPublic(fieldClass.getModifiers()) && !ParserConfig.isPrimitive(fieldClass)) {\n             mw.visitVarInsn(ALOAD, context.var(\"object\"));\n             mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n             mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldClass)));\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1485,
    "bugNodeStartChar": 63809,
    "bugNodeLength": 20,
    "fixLineNum": 1485,
    "fixNodeStartChar": 63809,
    "fixNodeLength": 70,
    "sourceBeforeFix": "elementClass != null",
    "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "f62228bca71db12271ded22df25f3502cdb87d66",
    "fixCommitParentSHA1": "00b5a024b67458f93e1a6cedbbac40e7f980eb98",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/support/spring/FastJsonHttpMessageConverterTest.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/support/spring/FastJsonHttpMessageConverterTest.java b/src/test/java/com/alibaba/json/bvt/support/spring/FastJsonHttpMessageConverterTest.java\nindex 54ca1da..7afd88a 100644\n--- a/src/test/java/com/alibaba/json/bvt/support/spring/FastJsonHttpMessageConverterTest.java\n+++ b/src/test/java/com/alibaba/json/bvt/support/spring/FastJsonHttpMessageConverterTest.java\n@@ -34,7 +34,7 @@\n         \n         Assert.assertEquals(Charset.forName(\"UTF-8\"), fastJsonConfig.getCharset());\n \n-        Assert.assertEquals(1, fastJsonConfig.getFeatures().length);\n+        Assert.assertEquals(0, fastJsonConfig.getFeatures().length);\n         \n         Method method = FastJsonHttpMessageConverter.class.getDeclaredMethod(\"supports\", Class.class);\n         method.setAccessible(true);\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 37,
    "bugNodeStartChar": 1299,
    "bugNodeLength": 59,
    "fixLineNum": 37,
    "fixNodeStartChar": 1299,
    "fixNodeLength": 59,
    "sourceBeforeFix": "Assert.assertEquals(1,fastJsonConfig.getFeatures().length)",
    "sourceAfterFix": "Assert.assertEquals(0,fastJsonConfig.getFeatures().length)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "cb7d7cafb8a6d90598de5b8254c27a5c821496b8",
    "fixCommitParentSHA1": "93f80c10b022461696cdd7ae2df0918be56719ba",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSON.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex b4ffff3..8b375a0 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -771,7 +771,7 @@\n             \n             JSONObject json = new JSONObject();\n             try {\n-                javaBeanSerializer.getFieldValues(json);\n+                javaBeanSerializer.getFieldValues(javaObject, json);\n             } catch (Exception e) {\n                 throw new JSONException(\"toJSON error\", e);\n             }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 774,
    "bugNodeStartChar": 26741,
    "bugNodeLength": 39,
    "fixLineNum": 774,
    "fixNodeStartChar": 26741,
    "fixNodeLength": 51,
    "sourceBeforeFix": "javaBeanSerializer.getFieldValues(json)",
    "sourceAfterFix": "javaBeanSerializer.getFieldValues(javaObject,json)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "cb7d7cafb8a6d90598de5b8254c27a5c821496b8",
    "fixCommitParentSHA1": "93f80c10b022461696cdd7ae2df0918be56719ba",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSON.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex b4ffff3..8b375a0 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -771,7 +771,7 @@\n             \n             JSONObject json = new JSONObject();\n             try {\n-                javaBeanSerializer.getFieldValues(json);\n+                javaBeanSerializer.getFieldValues(javaObject, json);\n             } catch (Exception e) {\n                 throw new JSONException(\"toJSON error\", e);\n             }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 774,
    "bugNodeStartChar": 26741,
    "bugNodeLength": 39,
    "fixLineNum": 774,
    "fixNodeStartChar": 26741,
    "fixNodeLength": 51,
    "sourceBeforeFix": "javaBeanSerializer.getFieldValues(json)",
    "sourceAfterFix": "javaBeanSerializer.getFieldValues(javaObject,json)"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "d7bdd87355d4c5b9d3145210eb25e7695decb9f9",
    "fixCommitParentSHA1": "8f667968ea80519a1a8bf974dd2cd486f9dbfdcd",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSONPath.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSONPath.java b/src/main/java/com/alibaba/fastjson/JSONPath.java\nindex 146dac4..d8912d4 100644\n--- a/src/main/java/com/alibaba/fastjson/JSONPath.java\n+++ b/src/main/java/com/alibaba/fastjson/JSONPath.java\n@@ -1703,7 +1703,7 @@\n         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n \n-        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {\n+        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }\n         \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1706,
    "bugNodeStartChar": 54818,
    "bugNodeLength": 19,
    "fixLineNum": 1706,
    "fixNodeStartChar": 54818,
    "fixNodeLength": 19,
    "sourceBeforeFix": "isDoubleA && isIntA",
    "sourceAfterFix": "isDoubleA && isIntB"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d7bdd87355d4c5b9d3145210eb25e7695decb9f9",
    "fixCommitParentSHA1": "8f667968ea80519a1a8bf974dd2cd486f9dbfdcd",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/JSONPath.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSONPath.java b/src/main/java/com/alibaba/fastjson/JSONPath.java\nindex 146dac4..d8912d4 100644\n--- a/src/main/java/com/alibaba/fastjson/JSONPath.java\n+++ b/src/main/java/com/alibaba/fastjson/JSONPath.java\n@@ -1703,7 +1703,7 @@\n         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n \n-        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {\n+        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }\n         \n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1706,
    "bugNodeStartChar": 54818,
    "bugNodeLength": 19,
    "fixLineNum": 1706,
    "fixNodeStartChar": 54818,
    "fixNodeLength": 19,
    "sourceBeforeFix": "isDoubleA && isIntA",
    "sourceAfterFix": "isDoubleA && isIntB"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "f669009481babd71c3f6440db080a78b7fccfd64",
    "fixCommitParentSHA1": "1c89d48b9d152b3e7caeff1f03fbe5f0e946732b",
    "bugFilePath": "src/test/java/com/alibaba/json/bvt/bug/Bug_127_for_qiuyan81.java",
    "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/bug/Bug_127_for_qiuyan81.java b/src/test/java/com/alibaba/json/bvt/bug/Bug_127_for_qiuyan81.java\nindex 26a1056..d2024e2 100644\n--- a/src/test/java/com/alibaba/json/bvt/bug/Bug_127_for_qiuyan81.java\n+++ b/src/test/java/com/alibaba/json/bvt/bug/Bug_127_for_qiuyan81.java\n@@ -26,7 +26,7 @@\n         JSONObject json = (JSONObject) JSON.parse(jsonString);\n         Assert.assertEquals(1001, json.get(\"ext\"));\n         Assert.assertEquals(0, json.get(\"PayStatus\"));\n-        Assert.assertEquals(2, json.size());\n+        Assert.assertEquals(3, json.size());\n     }\n     \n     public void test_parserUndefined_array() {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 29,
    "bugNodeStartChar": 987,
    "bugNodeLength": 35,
    "fixLineNum": 29,
    "fixNodeStartChar": 987,
    "fixNodeLength": 35,
    "sourceBeforeFix": "Assert.assertEquals(2,json.size())",
    "sourceAfterFix": "Assert.assertEquals(3,json.size())"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de",
    "fixCommitParentSHA1": "0644e45a490f71bca4688b858a6923bf9fc6ce83",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 1a15216..a49d01f 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -386,7 +386,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n@@ -467,7 +467,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 389,
    "bugNodeStartChar": 17450,
    "bugNodeLength": 26,
    "fixLineNum": 389,
    "fixNodeStartChar": 17450,
    "fixNodeLength": 48,
    "sourceBeforeFix": "superClass == Object.class",
    "sourceAfterFix": "superClass == Object.class || superClass == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de",
    "fixCommitParentSHA1": "0644e45a490f71bca4688b858a6923bf9fc6ce83",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 1a15216..a49d01f 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -386,7 +386,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n@@ -467,7 +467,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 389,
    "bugNodeStartChar": 17450,
    "bugNodeLength": 26,
    "fixLineNum": 389,
    "fixNodeStartChar": 17450,
    "fixNodeLength": 48,
    "sourceBeforeFix": "superClass == Object.class",
    "sourceAfterFix": "superClass == Object.class || superClass == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de",
    "fixCommitParentSHA1": "0644e45a490f71bca4688b858a6923bf9fc6ce83",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 1a15216..a49d01f 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -386,7 +386,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n@@ -467,7 +467,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 470,
    "bugNodeStartChar": 20137,
    "bugNodeLength": 26,
    "fixLineNum": 470,
    "fixNodeStartChar": 20137,
    "fixNodeLength": 48,
    "sourceBeforeFix": "superClass == Object.class",
    "sourceAfterFix": "superClass == Object.class || superClass == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de",
    "fixCommitParentSHA1": "0644e45a490f71bca4688b858a6923bf9fc6ce83",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 1a15216..a49d01f 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -386,7 +386,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n@@ -467,7 +467,7 @@\n                }\n                \n                superClass = superClass.getSuperclass();\n-               if (superClass == Object.class) {\n+               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 470,
    "bugNodeStartChar": 20137,
    "bugNodeLength": 26,
    "fixLineNum": 470,
    "fixNodeStartChar": 20137,
    "fixNodeLength": 48,
    "sourceBeforeFix": "superClass == Object.class",
    "sourceAfterFix": "superClass == Object.class || superClass == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "49d871ec1fc794b631f884482cbb69811514727e",
    "fixCommitParentSHA1": "db0c4a90ddc3c2e6ca69a531e2f81bdfbf872723",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 4226ed7..b4a4403 100644\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -311,7 +311,7 @@\n             return derializer;\r\n         }\r\n \r\n-        if (type instanceof WildcardType || type instanceof TypeVariable) {\r\n+        if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) {\r\n             derializer = derializers.get(clazz);\r\n         }\r\n \r\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 314,
    "bugNodeStartChar": 14792,
    "bugNodeLength": 60,
    "fixLineNum": 314,
    "fixNodeStartChar": 14479,
    "fixNodeLength": 97,
    "sourceBeforeFix": "type instanceof WildcardType || type instanceof TypeVariable",
    "sourceAfterFix": "type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 536,
    "bugNodeStartChar": 21334,
    "bugNodeLength": 19,
    "fixLineNum": 536,
    "fixNodeStartChar": 21334,
    "fixNodeLength": 22,
    "sourceBeforeFix": "context.var(\"long\")",
    "sourceAfterFix": "context.var(\"long\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 569,
    "bugNodeStartChar": 22530,
    "bugNodeLength": 21,
    "fixLineNum": 569,
    "fixNodeStartChar": 22530,
    "fixNodeLength": 24,
    "sourceBeforeFix": "context.var(\"double\")",
    "sourceAfterFix": "context.var(\"double\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 576,
    "bugNodeStartChar": 22797,
    "bugNodeLength": 21,
    "fixLineNum": 576,
    "fixNodeStartChar": 22797,
    "fixNodeLength": 24,
    "sourceBeforeFix": "context.var(\"double\")",
    "sourceAfterFix": "context.var(\"double\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1083,
    "bugNodeStartChar": 43914,
    "bugNodeLength": 19,
    "fixLineNum": 1083,
    "fixNodeStartChar": 43914,
    "fixNodeLength": 22,
    "sourceBeforeFix": "context.var(\"long\")",
    "sourceAfterFix": "context.var(\"long\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1091,
    "bugNodeStartChar": 44544,
    "bugNodeLength": 21,
    "fixLineNum": 1091,
    "fixNodeStartChar": 44544,
    "fixNodeLength": 24,
    "sourceBeforeFix": "context.var(\"double\")",
    "sourceAfterFix": "context.var(\"double\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1141,
    "bugNodeStartChar": 47983,
    "bugNodeLength": 19,
    "fixLineNum": 1141,
    "fixNodeStartChar": 47983,
    "fixNodeLength": 22,
    "sourceBeforeFix": "context.var(\"long\")",
    "sourceAfterFix": "context.var(\"long\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1147,
    "bugNodeStartChar": 48405,
    "bugNodeLength": 21,
    "fixLineNum": 1147,
    "fixNodeStartChar": 48405,
    "fixNodeLength": 24,
    "sourceBeforeFix": "context.var(\"double\")",
    "sourceAfterFix": "context.var(\"double\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1199,
    "bugNodeStartChar": 51475,
    "bugNodeLength": 19,
    "fixLineNum": 1199,
    "fixNodeStartChar": 51475,
    "fixNodeLength": 22,
    "sourceBeforeFix": "context.var(\"long\")",
    "sourceAfterFix": "context.var(\"long\",2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3",
    "fixCommitParentSHA1": "5bc5afe6ab16d53a0bbfbf022f4a5016d8782a91",
    "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
    "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex 44ab970..f11e267 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -533,7 +533,7 @@\n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n \n         _seperator(mw, context);\n@@ -566,14 +566,14 @@\n \n         _nameApply(mw, property, context, _end);\n         _get(mw, context, property);\n-        mw.visitVarInsn(DSTORE, context.var(\"double\"));\n+        mw.visitVarInsn(DSTORE, context.var(\"double\", 2));\n \n         _filters(mw, property, context, _end);\n \n         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n-        mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+        mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;D)V\");\n \n         _seperator(mw, context);\n@@ -1080,7 +1080,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {\n@@ -1088,7 +1088,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {\n@@ -1138,13 +1138,13 @@\n             mw.visitVarInsn(ILOAD, context.var(\"char\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Character.class), \"valueOf\", \"(C)Ljava/lang/Character;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Long.class), \"valueOf\", \"(J)Ljava/lang/Long;\");\n         } else if (propertyClass == float.class) {\n             mw.visitVarInsn(FLOAD, context.var(\"float\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Float.class), \"valueOf\", \"(F)Ljava/lang/Float;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(Double.class), \"valueOf\", \"(D)Ljava/lang/Double;\");\n         } else if (propertyClass == boolean.class) {\n             mw.visitVarInsn(ILOAD, context.var(\"boolean\"));\n@@ -1196,7 +1196,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n-            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n+            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {\n@@ -1204,7 +1204,7 @@\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n-            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n+            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {\n",
    "projectName": "alibaba.fastjson",
    "bugLineNum": 1207,
    "bugNodeStartChar": 52149,
    "bugNodeLength": 21,
    "fixLineNum": 1207,
    "fixNodeStartChar": 52149,
    "fixNodeLength": 24,
    "sourceBeforeFix": "context.var(\"double\")",
    "sourceAfterFix": "context.var(\"double\",2)"
  }
]