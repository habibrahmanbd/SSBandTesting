[
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "44e117dacf6f8922df8e593fafbd87437ebd99aa",
    "fixCommitParentSHA1": "a68dce2d22e5c7e2fc307a9e100829c736a45a43",
    "bugFilePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseKeyColumnValueStore.java",
    "fixPatch": "diff --git a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseKeyColumnValueStore.java b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseKeyColumnValueStore.java\nindex e25821b..8192fbd 100644\n--- a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseKeyColumnValueStore.java\n+++ b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseKeyColumnValueStore.java\n@@ -167,7 +167,7 @@\n     }\n \n     public void mutateMany(Map<StaticBuffer, KCVMutation> mutations, StoreTransaction txh) throws StorageException {\n-        storeManager.mutateMany(ImmutableMap.of(columnFamily, mutations), txh);\n+        storeManager.mutateMany(ImmutableMap.of(storeName, mutations), txh);\n     }\n \n     @Override\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 170,
    "bugNodeStartChar": 6484,
    "bugNodeLength": 40,
    "fixLineNum": 170,
    "fixNodeStartChar": 6484,
    "fixNodeLength": 37,
    "sourceBeforeFix": "ImmutableMap.of(columnFamily,mutations)",
    "sourceAfterFix": "ImmutableMap.of(storeName,mutations)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91",
    "fixCommitParentSHA1": "218a912f9d8b5a6fb103ab5f1d1559ae47c040d3",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\nindex 63a26f8..4cd6146 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n@@ -515,7 +515,7 @@\n                         Collection<StaticBuffer> actual = Sets.newHashSet(i);\n \n                         // Check\n-                        log.error(\"Checking bounds [{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",\n                                 new Object[]{startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n@@ -551,7 +551,7 @@\n                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n \n-                        log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 518,
    "bugNodeStartChar": 19964,
    "bugNodeLength": 135,
    "fixLineNum": 518,
    "fixNodeStartChar": 19964,
    "fixNodeLength": 135,
    "sourceBeforeFix": "log.error(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})",
    "sourceAfterFix": "log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91",
    "fixCommitParentSHA1": "218a912f9d8b5a6fb103ab5f1d1559ae47c040d3",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\nindex 63a26f8..4cd6146 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n@@ -515,7 +515,7 @@\n                         Collection<StaticBuffer> actual = Sets.newHashSet(i);\n \n                         // Check\n-                        log.error(\"Checking bounds [{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",\n                                 new Object[]{startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n@@ -551,7 +551,7 @@\n                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n \n-                        log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 518,
    "bugNodeStartChar": 19964,
    "bugNodeLength": 135,
    "fixLineNum": 518,
    "fixNodeStartChar": 19964,
    "fixNodeLength": 135,
    "sourceBeforeFix": "log.error(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})",
    "sourceAfterFix": "log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91",
    "fixCommitParentSHA1": "218a912f9d8b5a6fb103ab5f1d1559ae47c040d3",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\nindex 63a26f8..4cd6146 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n@@ -515,7 +515,7 @@\n                         Collection<StaticBuffer> actual = Sets.newHashSet(i);\n \n                         // Check\n-                        log.error(\"Checking bounds [{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",\n                                 new Object[]{startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n@@ -551,7 +551,7 @@\n                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n \n-                        log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 554,
    "bugNodeStartChar": 21753,
    "bugNodeLength": 172,
    "fixLineNum": 554,
    "fixNodeStartChar": 21753,
    "fixNodeLength": 172,
    "sourceBeforeFix": "log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})",
    "sourceAfterFix": "log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91",
    "fixCommitParentSHA1": "218a912f9d8b5a6fb103ab5f1d1559ae47c040d3",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\nindex 63a26f8..4cd6146 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n@@ -515,7 +515,7 @@\n                         Collection<StaticBuffer> actual = Sets.newHashSet(i);\n \n                         // Check\n-                        log.error(\"Checking bounds [{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",\n                                 new Object[]{startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n@@ -551,7 +551,7 @@\n                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n \n-                        log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n+                        log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 554,
    "bugNodeStartChar": 21753,
    "bugNodeLength": 172,
    "fixLineNum": 554,
    "fixNodeStartChar": 21753,
    "fixNodeLength": 172,
    "sourceBeforeFix": "log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})",
    "sourceAfterFix": "log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "149b8d85f0e5390ddcf03810279fbbe9d34f64f8",
    "fixCommitParentSHA1": "6b8c08187f96dd6730c5d5d318f1f2f52d5b2861",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\nindex fa8f555..63eee99 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\n@@ -165,7 +165,7 @@\n                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n-                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n+                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }\n@@ -182,7 +182,7 @@\n                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n-                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n+                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 168,
    "bugNodeStartChar": 7629,
    "bugNodeLength": 20,
    "fixLineNum": 168,
    "fixNodeStartChar": 7629,
    "fixNodeLength": 39,
    "sourceBeforeFix": "p + \".\" + M_ITERATOR",
    "sourceAfterFix": "p + \".\" + M_GET_KEYS+ \".\"+ M_ITERATOR"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "149b8d85f0e5390ddcf03810279fbbe9d34f64f8",
    "fixCommitParentSHA1": "6b8c08187f96dd6730c5d5d318f1f2f52d5b2861",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\nindex fa8f555..63eee99 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\n@@ -165,7 +165,7 @@\n                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n-                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n+                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }\n@@ -182,7 +182,7 @@\n                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n-                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n+                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 185,
    "bugNodeStartChar": 8327,
    "bugNodeLength": 20,
    "fixLineNum": 185,
    "fixNodeStartChar": 8327,
    "fixNodeLength": 39,
    "sourceBeforeFix": "p + \".\" + M_ITERATOR",
    "sourceAfterFix": "p + \".\" + M_GET_KEYS+ \".\"+ M_ITERATOR"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "682a496cdfd1e557785ded41efe3a49640f02b53",
    "fixCommitParentSHA1": "36b8d432d61fc1d3bb341ca5248112b135c210c0",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/vertices/StandardVertex.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/vertices/StandardVertex.java b/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/vertices/StandardVertex.java\nindex 0d4e0d4..931ba79 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/vertices/StandardVertex.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/vertices/StandardVertex.java\n@@ -22,7 +22,7 @@\n public class StandardVertex extends AbstractVertex {\n \n     private byte lifecycle;\n-    private AddedRelationsContainer addedRelations=AddedRelationsContainer.EMPTY;\n+    private volatile AddedRelationsContainer addedRelations=AddedRelationsContainer.EMPTY;\n \n     public StandardVertex(final StandardTitanTx tx, final long id, byte lifecycle) {\n         super(tx, id);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 25,
    "bugNodeStartChar": 1023,
    "bugNodeLength": 77,
    "fixLineNum": 25,
    "fixNodeStartChar": 1023,
    "fixNodeLength": 86,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "66"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a9609b959492ff428061f06faff767fa9cbe2263",
    "fixCommitParentSHA1": "4e9486f68e4f4ce329bf32924d125d6f3b9aa0fa",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java b/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java\nindex 0d50563..30e14f7 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java\n@@ -97,7 +97,7 @@\n \n         // allow scriptengines to be configured so that folks can drop in different gremlin flavors.\n         final List configuredScriptEngineNames = properties.getConfiguredScriptEngines();\n-        if (configuredScriptEngineNames == null) {\n+        if (configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()) {\n             // configure to default with gremlin-groovy\n             log.info(\"No configuration for <script-engines>.  Using gremlin-groovy by default.\");\n             EngineController.configure(scriptEngineThreshold, scriptEngineInitFile);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 100,
    "bugNodeStartChar": 4338,
    "bugNodeLength": 35,
    "fixLineNum": 100,
    "fixNodeStartChar": 4338,
    "fixNodeLength": 76,
    "sourceBeforeFix": "configuredScriptEngineNames == null",
    "sourceAfterFix": "configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a9609b959492ff428061f06faff767fa9cbe2263",
    "fixCommitParentSHA1": "4e9486f68e4f4ce329bf32924d125d6f3b9aa0fa",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java b/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java\nindex 0d50563..30e14f7 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/rexster/RexsterTitanServer.java\n@@ -97,7 +97,7 @@\n \n         // allow scriptengines to be configured so that folks can drop in different gremlin flavors.\n         final List configuredScriptEngineNames = properties.getConfiguredScriptEngines();\n-        if (configuredScriptEngineNames == null) {\n+        if (configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()) {\n             // configure to default with gremlin-groovy\n             log.info(\"No configuration for <script-engines>.  Using gremlin-groovy by default.\");\n             EngineController.configure(scriptEngineThreshold, scriptEngineInitFile);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 100,
    "bugNodeStartChar": 4338,
    "bugNodeLength": 35,
    "fixLineNum": 100,
    "fixNodeStartChar": 4338,
    "fixNodeLength": 76,
    "sourceBeforeFix": "configuredScriptEngineNames == null",
    "sourceAfterFix": "configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3f4a9ba669c165dbc21319854a13916f25644147",
    "fixCommitParentSHA1": "e3038c620b6253c54b80684ec415b101be870028",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\nindex 19f563e..075d0ef 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/KeyColumnValueStoreTest.java\n@@ -17,7 +17,7 @@\n \n public abstract class KeyColumnValueStoreTest {\n \n-    private Logger log = LoggerFactory.getLogger(KeyValueStoreTest.class);\n+    private Logger log = LoggerFactory.getLogger(KeyColumnValueStoreTest.class);\n \n     int numKeys = 500;\n     int numColumns = 50;\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 20,
    "bugNodeStartChar": 570,
    "bugNodeLength": 23,
    "fixLineNum": 20,
    "fixNodeStartChar": 570,
    "fixNodeLength": 29,
    "sourceBeforeFix": "KeyValueStoreTest.class",
    "sourceAfterFix": "KeyColumnValueStoreTest.class"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7",
    "fixCommitParentSHA1": "1621199028afbd27c03d9916adfa73905118811d",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\nindex 89b1d44..becb513 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\n@@ -80,7 +80,7 @@\n \n     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n-        if (!stores.contains(name)) {\n+        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 83,
    "bugNodeStartChar": 2538,
    "bugNodeLength": 21,
    "fixLineNum": 83,
    "fixNodeStartChar": 2538,
    "fixNodeLength": 24,
    "sourceBeforeFix": "stores.contains(name)",
    "sourceAfterFix": "stores.containsKey(name)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7",
    "fixCommitParentSHA1": "1621199028afbd27c03d9916adfa73905118811d",
    "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java",
    "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\nindex 89b1d44..becb513 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\n@@ -80,7 +80,7 @@\n \n     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n-        if (!stores.contains(name)) {\n+        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 83,
    "bugNodeStartChar": 2538,
    "bugNodeLength": 21,
    "fixLineNum": 83,
    "fixNodeStartChar": 2538,
    "fixNodeLength": 24,
    "sourceBeforeFix": "stores.contains(name)",
    "sourceAfterFix": "stores.containsKey(name)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "49203981ee544f1443c40991cc2adcf319345562",
    "fixCommitParentSHA1": "ad8efa0d85e71b86dabfb7c37614001d3d435255",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\nindex a1242ba..7b74333 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\n@@ -49,7 +49,7 @@\n \n     public void testGraphTestSuite() throws Exception {\n         this.stopWatch();                       //Excluded test case because toString representation is non-standard\n-        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\"));\n+        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 52,
    "bugNodeStartChar": 2013,
    "bugNodeLength": 43,
    "fixLineNum": 52,
    "fixNodeStartChar": 2013,
    "fixNodeLength": 80,
    "sourceBeforeFix": "ImmutableSet.of(\"testStringRepresentation\")",
    "sourceAfterFix": "ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "8a34e1589d4d35e5f00328e562922023d4e616fd",
    "fixCommitParentSHA1": "9fb28cb721600113962069a8b2dbe19a0cd4a844",
    "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java",
    "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\nindex 85961d9..16bbd6e 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\n@@ -49,7 +49,7 @@\n \n     public void testGraphTestSuite() throws Exception {\n         this.stopWatch();                       //Excluded test case because toString representation is non-standard\n-        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\"));\n+        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 52,
    "bugNodeStartChar": 2013,
    "bugNodeLength": 43,
    "fixLineNum": 52,
    "fixNodeStartChar": 2013,
    "fixNodeLength": 80,
    "sourceBeforeFix": "ImmutableSet.of(\"testStringRepresentation\")",
    "sourceAfterFix": "ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\")"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a18c3d7297c81147d0fdf619ba0d4a85fc408726",
    "fixCommitParentSHA1": "531f32882a439a7b98fd06b3b420b22f3d0cafd2",
    "bugFilePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java",
    "fixPatch": "diff --git a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\nindex 9217cbb..15087fd 100644\n--- a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n+++ b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n@@ -231,7 +231,7 @@\n                 throw new TemporaryStorageException(ee);\n             }\n         } else { // check if compression was enabled, if not - enable it\n-            if (cf.getCompressionType() == null) {\n+            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 234,
    "bugNodeStartChar": 8889,
    "bugNodeLength": 31,
    "fixLineNum": 234,
    "fixNodeStartChar": 8889,
    "fixNodeLength": 88,
    "sourceBeforeFix": "cf.getCompressionType() == null",
    "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a18c3d7297c81147d0fdf619ba0d4a85fc408726",
    "fixCommitParentSHA1": "531f32882a439a7b98fd06b3b420b22f3d0cafd2",
    "bugFilePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java",
    "fixPatch": "diff --git a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\nindex 9217cbb..15087fd 100644\n--- a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n+++ b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n@@ -231,7 +231,7 @@\n                 throw new TemporaryStorageException(ee);\n             }\n         } else { // check if compression was enabled, if not - enable it\n-            if (cf.getCompressionType() == null) {\n+            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 234,
    "bugNodeStartChar": 8889,
    "bugNodeLength": 31,
    "fixLineNum": 234,
    "fixNodeStartChar": 8889,
    "fixNodeLength": 88,
    "sourceBeforeFix": "cf.getCompressionType() == null",
    "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "7bd0482c801680bfd01ee0c3294d811e207a0fb8",
    "fixCommitParentSHA1": "cd988a337f929b7296e3557e037ac7372038eeab",
    "bugFilePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java",
    "fixPatch": "diff --git a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\nindex 521be6e..dc22823 100644\n--- a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n+++ b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n@@ -230,7 +230,7 @@\n                 throw new TemporaryStorageException(ee);\n             }\n         } else { // check if compression was enabled, if not - enable it\n-            if (cf.getCompressionType() == null) {\n+            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 233,
    "bugNodeStartChar": 8824,
    "bugNodeLength": 31,
    "fixLineNum": 233,
    "fixNodeStartChar": 8824,
    "fixNodeLength": 88,
    "sourceBeforeFix": "cf.getCompressionType() == null",
    "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "7bd0482c801680bfd01ee0c3294d811e207a0fb8",
    "fixCommitParentSHA1": "cd988a337f929b7296e3557e037ac7372038eeab",
    "bugFilePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java",
    "fixPatch": "diff --git a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\nindex 521be6e..dc22823 100644\n--- a/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n+++ b/titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n@@ -230,7 +230,7 @@\n                 throw new TemporaryStorageException(ee);\n             }\n         } else { // check if compression was enabled, if not - enable it\n-            if (cf.getCompressionType() == null) {\n+            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 233,
    "bugNodeStartChar": 8824,
    "bugNodeLength": 31,
    "fixLineNum": 233,
    "fixNodeStartChar": 8824,
    "fixNodeLength": 88,
    "sourceBeforeFix": "cf.getCompressionType() == null",
    "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "c7cee3c559bb91d3424213716d50e9bdf645c857",
    "fixCommitParentSHA1": "f9efe0b8549f04492c1dbeb24b3a6d91d4c4f09f",
    "bugFilePath": "src/test/java/com/thinkaurelius/titan/blueprints/LocalBlueprintsTest.java",
    "fixPatch": "diff --git a/src/test/java/com/thinkaurelius/titan/blueprints/LocalBlueprintsTest.java b/src/test/java/com/thinkaurelius/titan/blueprints/LocalBlueprintsTest.java\nindex 5b31c34..6d52d70 100644\n--- a/src/test/java/com/thinkaurelius/titan/blueprints/LocalBlueprintsTest.java\n+++ b/src/test/java/com/thinkaurelius/titan/blueprints/LocalBlueprintsTest.java\n@@ -54,7 +54,7 @@\n \n     public void testKeyIndexableGraphTestSuite() throws Exception {\n         this.stopWatch();                                   //Excluded test cases because Titan does not yet support dropping or modifying key indexes\n-        doTestSuite(new KeyIndexableGraphTestSuite(this), ImmutableSet.of(\"testAutoIndexKeyDroppingWithPersistence\",\"testReIndexingOfElements\",\"testGettingVerticesAndEdgesWithKeyValue\"));\n+        doTestSuite(new KeyIndexableGraphTestSuite(this), ImmutableSet.of(\"testAutoIndexKeyDroppingWithPersistence\",\"testReIndexingOfElements\"));\n         printTestPerformance(\"KeyIndexableGraphTestSuite\", this.stopWatch());\n     }\n \n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 57,
    "bugNodeStartChar": 2294,
    "bugNodeLength": 127,
    "fixLineNum": 57,
    "fixNodeStartChar": 2294,
    "fixNodeLength": 85,
    "sourceBeforeFix": "ImmutableSet.of(\"testAutoIndexKeyDroppingWithPersistence\",\"testReIndexingOfElements\",\"testGettingVerticesAndEdgesWithKeyValue\")",
    "sourceAfterFix": "ImmutableSet.of(\"testAutoIndexKeyDroppingWithPersistence\",\"testReIndexingOfElements\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "5bbc7807c15d0918a7d228998f5ad333649945f3",
    "fixCommitParentSHA1": "624a0e1c014b7b589db531167a9c5f171b2555a9",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java b/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java\nindex 1c0215c..b02efe1 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java\n@@ -154,7 +154,7 @@\n      * Number of times the system attempts to acquire a unique id block before giving up and throwing an exception.\n      */\n     public static final String IDAUTHORITY_RETRY_COUNT_KEY = \"idauthority-retries\";\n-    public static final int IDAUTHORITY_RETRY_COUNT_DEFAULT = 3;\n+    public static final int IDAUTHORITY_RETRY_COUNT_DEFAULT = 20;\n     /**\n      * Size of the block to be acquired. Larger block sizes require fewer block applications but also leave a larger\n      * fraction of the id pool occupied and potentially lost. For write heavy applications, larger block sizes should\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 157,
    "bugNodeStartChar": 6923,
    "bugNodeLength": 35,
    "fixLineNum": 157,
    "fixNodeStartChar": 6923,
    "fixNodeLength": 36,
    "sourceBeforeFix": "IDAUTHORITY_RETRY_COUNT_DEFAULT=3",
    "sourceAfterFix": "IDAUTHORITY_RETRY_COUNT_DEFAULT=20"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1",
    "fixCommitParentSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleProperty.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleProperty.java b/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleProperty.java\nindex a1189ff..93661b6 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleProperty.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleProperty.java\n@@ -79,7 +79,7 @@\n \t}\n \n \t@Override\n-\tpublic void forceDelete() {\n+\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tnode.removeRelation(this);\n \t}\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 81,
    "bugNodeStartChar": 2598,
    "bugNodeLength": 93,
    "fixLineNum": 81,
    "fixNodeStartChar": 2598,
    "fixNodeLength": 106,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1",
    "fixCommitParentSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleTitanEdge.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleTitanEdge.java b/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleTitanEdge.java\nindex af80b3a..6c66b48 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleTitanEdge.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleTitanEdge.java\n@@ -97,7 +97,7 @@\n \t}\n \n \t@Override\n-\tpublic void forceDelete() {\n+\tpublic synchronized void forceDelete() {\n \t\tstart.removeRelation(this);\n \t\tif (!isUnidirected())\n \t\t\tend.removeRelation(this);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 99,
    "bugNodeStartChar": 2832,
    "bugNodeLength": 147,
    "fixLineNum": 99,
    "fixNodeStartChar": 2832,
    "fixNodeLength": 160,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1",
    "fixCommitParentSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistLabeledTitanEdge.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistLabeledTitanEdge.java b/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistLabeledTitanEdge.java\nindex 6b019e9..f6365ff 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistLabeledTitanEdge.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistLabeledTitanEdge.java\n@@ -45,7 +45,7 @@\n \t */\n \t\n \t@Override\n-\tpublic void forceDelete() {\n+\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 47,
    "bugNodeStartChar": 1925,
    "bugNodeLength": 83,
    "fixLineNum": 47,
    "fixNodeStartChar": 1925,
    "fixNodeLength": 96,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1",
    "fixCommitParentSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleProperty.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleProperty.java b/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleProperty.java\nindex 6b14729..bfb2624 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleProperty.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleProperty.java\n@@ -40,7 +40,7 @@\n \t}\n \t\n \t@Override\n-\tpublic void forceDelete() {\n+\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 42,
    "bugNodeStartChar": 1342,
    "bugNodeLength": 83,
    "fixLineNum": 42,
    "fixNodeStartChar": 1342,
    "fixNodeLength": 96,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1",
    "fixCommitParentSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleTitanEdge.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleTitanEdge.java b/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleTitanEdge.java\nindex 9e2001d..0085a5e 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleTitanEdge.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/relations/persist/PersistSimpleTitanEdge.java\n@@ -42,7 +42,7 @@\n \t}\n \t\n \t@Override\n-\tpublic void forceDelete() {\n+\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 44,
    "bugNodeStartChar": 1426,
    "bugNodeLength": 83,
    "fixLineNum": 44,
    "fixNodeStartChar": 1426,
    "fixNodeLength": 96,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "fixCommitParentSHA1": "924872055980faf1f2c1545be81f247e722cc961",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/AbstractTypedRelation.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/relations/AbstractTypedRelation.java b/src/main/java/com/thinkaurelius/titan/graphdb/relations/AbstractTypedRelation.java\nindex 5f5912e..ea2abab 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/relations/AbstractTypedRelation.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/relations/AbstractTypedRelation.java\n@@ -47,7 +47,7 @@\n \t}\n \t\n \t@Override\n-\tpublic void forceDelete() {\n+\tpublic synchronized void forceDelete() {\n \t\tgetTransaction().deletedRelation(this);\n \t}\n \t\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 49,
    "bugNodeStartChar": 1370,
    "bugNodeLength": 83,
    "fixLineNum": 49,
    "fixNodeStartChar": 1370,
    "fixNodeLength": 96,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962",
    "fixCommitParentSHA1": "924872055980faf1f2c1545be81f247e722cc961",
    "bugFilePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/AbstractTitanVertex.java",
    "fixPatch": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/vertices/AbstractTitanVertex.java b/src/main/java/com/thinkaurelius/titan/graphdb/vertices/AbstractTitanVertex.java\nindex 8d05f56..162133e 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/vertices/AbstractTitanVertex.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/vertices/AbstractTitanVertex.java\n@@ -89,7 +89,7 @@\n \t}\n \n \t@Override\n-\tpublic void remove() {\n+\tpublic synchronized void remove() {\n \t\tVertexUtil.checkAvailability(this);\n         VertexUtil.prepareForRemoval(this);\n         tx.deleteVertex(this);\n",
    "projectName": "thinkaurelius.titan",
    "bugLineNum": 91,
    "bugNodeStartChar": 2519,
    "bugNodeLength": 149,
    "fixLineNum": 91,
    "fixNodeStartChar": 2519,
    "fixNodeLength": 162,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  }
]