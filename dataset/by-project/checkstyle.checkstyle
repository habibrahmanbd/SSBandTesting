[{"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7e0199edf41b5a70390ce922cc6a8d14f0fad482", "fixCommitParentSHA1": "3c9efede12cff4e4fdf5cf693d4f71c36cddbc4e", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java\nindex 2e4fc41..af62d4a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java\n@@ -78,7 +78,7 @@\n                 linesToPosition);\n         selector.findSelectionPositions();\n         Assert.assertEquals(\"Invalid selection start\", 94, selector.getSelectionStart());\n-        Assert.assertEquals(\"Invalid selection end\", 280, selector.getSelectionEnd());\n+        Assert.assertEquals(\"Invalid selection end\", 279, selector.getSelectionEnd());\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 81, "bugNodeStartChar": 3527, "bugNodeLength": 77, "fixLineNum": 81, "fixNodeStartChar": 3527, "fixNodeLength": 77, "sourceBeforeFix": "Assert.assertEquals(\"Invalid selection end\",280,selector.getSelectionEnd())", "sourceAfterFix": "Assert.assertEquals(\"Invalid selection end\",279,selector.getSelectionEnd())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "fixCommitParentSHA1": "a00931d4ac6f79ee15024c9d4083d12f55c294f2", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java\nindex 0afd396..52052bc 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java\n@@ -76,7 +76,7 @@\n         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n-                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n+                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n \n     @Test\n@@ -86,7 +86,7 @@\n         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n-                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n+                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 79, "bugNodeStartChar": 3333, "bugNodeLength": 11, "fixLineNum": 79, "fixNodeStartChar": 3333, "fixNodeLength": 17, "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "fixCommitParentSHA1": "a00931d4ac6f79ee15024c9d4083d12f55c294f2", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java\nindex 0afd396..52052bc 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java\n@@ -76,7 +76,7 @@\n         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n-                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n+                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n \n     @Test\n@@ -86,7 +86,7 @@\n         final Object child = parseTree.getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n-                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n+                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 89, "bugNodeStartChar": 3830, "bugNodeLength": 11, "fixLineNum": 89, "fixNodeStartChar": 3830, "fixNodeLength": 17, "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "86862ef5fb94d2262914a72eafedf40b42f23ed4", "fixCommitParentSHA1": "c0800687e9de391b990a664fd7df2bee892e40e3", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheck.java\nindex 73d83a3..a3a883f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheck.java\n@@ -240,7 +240,8 @@\n         try {\n             clazz = getClassResolver().resolve(resolvableClassName, className);\n         }\n-        catch (final ClassNotFoundException ignored) {\n+        // -@cs[IllegalCatch] Exception type is not predictable.\n+        catch (final Exception ignored) {\n             clazz = null;\n         }\n         return clazz;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 243, "bugNodeStartChar": 8595, "bugNodeLength": 36, "fixLineNum": 244, "fixNodeStartChar": 8660, "fixNodeLength": 23, "sourceBeforeFix": "final ClassNotFoundException ignored", "sourceAfterFix": "final Exception ignored"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "24611c974516590fd401228f86cf11be71f71fd6", "fixCommitParentSHA1": "1ad19a8e3009891afa2f1e34cd6c6632ea741f64", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\nindex 9bc728d..681af18 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n@@ -499,7 +499,7 @@\n                         CHECK_TEXT.get(\"Description\")\n                                 + CHECK_TEXT.computeIfAbsent(\"Rule Description\", unused -> \"\")\n                                 + CHECK_TEXT.computeIfAbsent(\"Notes\", unused -> \"\")\n-                                + CHECK_TEXT.get(\"Properties\")\n+                                + CHECK_TEXT.computeIfAbsent(\"Properties\", unused -> \"\")\n                                 + CHECK_TEXT.get(\"Examples\") + \" @since \"\n                                 + CHECK_TEXT.get(\"since\"), getJavaDocText(ast));\n             }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 502, "bugNodeStartChar": 17306, "bugNodeLength": 28, "fixLineNum": 502, "fixNodeStartChar": 17306, "fixNodeLength": 54, "sourceBeforeFix": "CHECK_TEXT.get(\"Properties\")", "sourceAfterFix": "CHECK_TEXT.computeIfAbsent(\"Properties\",unused -> \"\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "fixCommitParentSHA1": "adff4c86f5a74c13b6b26c7c2ee3db798c93e552", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\nindex eb9a09b..cbc1081 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n@@ -272,7 +272,7 @@\n     }\n \n     private static String getNodeText(Node node, boolean fixLinks) {\n-        final StringBuffer result = new StringBuffer(20);\n+        final StringBuilder result = new StringBuilder(20);\n \n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {\n@@ -297,7 +297,7 @@\n     }\n \n     // -@cs[CyclomaticComplexity] No simple way to split this apart.\n-    private static void appendNodeText(StringBuffer result, Node node, boolean fixLinks) {\n+    private static void appendNodeText(StringBuilder result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)\n@@ -351,7 +351,7 @@\n         }\n     }\n \n-    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n+    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n \n         if (text.length() == 0) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 275, "bugNodeStartChar": 9691, "bugNodeLength": 49, "fixLineNum": 275, "fixNodeStartChar": 9691, "fixNodeLength": 51, "sourceBeforeFix": "final StringBuffer result=new StringBuffer(20); ", "sourceAfterFix": "final StringBuilder result=new StringBuilder(20); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "fixCommitParentSHA1": "adff4c86f5a74c13b6b26c7c2ee3db798c93e552", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\nindex eb9a09b..cbc1081 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n@@ -272,7 +272,7 @@\n     }\n \n     private static String getNodeText(Node node, boolean fixLinks) {\n-        final StringBuffer result = new StringBuffer(20);\n+        final StringBuilder result = new StringBuilder(20);\n \n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {\n@@ -297,7 +297,7 @@\n     }\n \n     // -@cs[CyclomaticComplexity] No simple way to split this apart.\n-    private static void appendNodeText(StringBuffer result, Node node, boolean fixLinks) {\n+    private static void appendNodeText(StringBuilder result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)\n@@ -351,7 +351,7 @@\n         }\n     }\n \n-    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n+    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n \n         if (text.length() == 0) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 300, "bugNodeStartChar": 10563, "bugNodeLength": 19, "fixLineNum": 300, "fixNodeStartChar": 10563, "fixNodeLength": 20, "sourceBeforeFix": "StringBuffer result", "sourceAfterFix": "StringBuilder result"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "fixCommitParentSHA1": "adff4c86f5a74c13b6b26c7c2ee3db798c93e552", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\nindex eb9a09b..cbc1081 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java\n@@ -272,7 +272,7 @@\n     }\n \n     private static String getNodeText(Node node, boolean fixLinks) {\n-        final StringBuffer result = new StringBuffer(20);\n+        final StringBuilder result = new StringBuilder(20);\n \n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {\n@@ -297,7 +297,7 @@\n     }\n \n     // -@cs[CyclomaticComplexity] No simple way to split this apart.\n-    private static void appendNodeText(StringBuffer result, Node node, boolean fixLinks) {\n+    private static void appendNodeText(StringBuilder result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)\n@@ -351,7 +351,7 @@\n         }\n     }\n \n-    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n+    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n \n         if (text.length() == 0) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 354, "bugNodeStartChar": 12211, "bugNodeLength": 17, "fixLineNum": 354, "fixNodeStartChar": 12211, "fixNodeLength": 18, "sourceBeforeFix": "StringBuffer text", "sourceAfterFix": "StringBuilder text"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCyclomaticComplexityTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCyclomaticComplexityTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCyclomaticComplexityTest.java\nindex 4422123..57d7abb 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCyclomaticComplexityTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCyclomaticComplexityTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck;\n \n-public class XpathRegressionCyclomaticComplexityTest extends AbstractXpathTestSupport {\n+public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1318, "bugNodeLength": 2645, "fixLineNum": 31, "fixNodeStartChar": 1318, "fixNodeLength": 2637, "sourceBeforeFix": "public class XpathRegressionCyclomaticComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionCyclomaticOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionCyclomaticTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"6:5: \" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo2']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo2']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionCyclomaticOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionCyclomaticTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"6:5: \" + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo2']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo2']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDeclarationOrderTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDeclarationOrderTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDeclarationOrderTest.java\nindex 4db0455..81fe368 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDeclarationOrderTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDeclarationOrderTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck;\n \n-public class XpathRegressionDeclarationOrderTest extends AbstractXpathTestSupport {\n+public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1313, "bugNodeLength": 2570, "fixLineNum": 31, "fixNodeStartChar": 1313, "fixNodeLength": 2562, "sourceBeforeFix": "public class XpathRegressionDeclarationOrderTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDeclarationOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={\"5:5: \" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='name']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDeclarationTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={\"5:5: \" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='MAX']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDeclarationOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={\"5:5: \" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='name']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDeclarationTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={\"5:5: \" + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='MAX']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java\nindex 009914f..68c0512 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java\n@@ -29,7 +29,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.DefaultComesLastCheck;\n \n-public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSupport {\n+public class XpathRegressionDefaultComesLastTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 32, "bugNodeStartChar": 1343, "bugNodeLength": 2322, "fixLineNum": 32, "fixNodeStartChar": 1343, "fixNodeLength": 2314, "sourceBeforeFix": "public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDefaultComesLastOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={\"8:13: \" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP\" + \"/LITERAL_DEFAULT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDefaultComesLastTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute(\"skipIfLastAndSharedWithCase\",\"true\");     final String[] expectedViolation={\"15:13: \" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionDefaultComesLastTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDefaultComesLastOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={\"8:13: \" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP\",\"/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP\" + \"/LITERAL_DEFAULT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionDefaultComesLastTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute(\"skipIfLastAndSharedWithCase\",\"true\");     final String[] expectedViolation={\"15:13: \" + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java\nindex 6d56fa8..e1391f1 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.ExplicitInitializationCheck;\n \n-public class XpathRegressionExplicitInitializationTest extends AbstractXpathTestSupport {\n+public class XpathRegressionExplicitInitializationTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1324, "bugNodeLength": 2016, "fixLineNum": 31, "fixNodeStartChar": 1324, "fixNodeLength": 2008, "sourceBeforeFix": "public class XpathRegressionExplicitInitializationTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={\"4:17: \" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,\"a\",0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={\"6:20: \" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,\"bar\",\"null\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='bar']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionExplicitInitializationTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={\"4:17: \" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,\"a\",0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']\" + \"/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={\"6:20: \" + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,\"bar\",\"null\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='bar']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFallThroughTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFallThroughTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFallThroughTest.java\nindex b556cfe..6a2f799 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFallThroughTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFallThroughTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck;\n \n-public class XpathRegressionFallThroughTest extends AbstractXpathTestSupport {\n+public class XpathRegressionFallThroughTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1308, "bugNodeLength": 2461, "fixLineNum": 31, "fixNodeStartChar": 1308, "fixNodeLength": 2453, "sourceBeforeFix": "public class XpathRegressionFallThroughTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={\"11:13: \" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP\",\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute(\"checkLastCaseGroup\",\"true\");     final String[] expectedViolation={\"10:17: \" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST\" + \"/LITERAL_SWITCH/CASE_GROUP\",\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST\" + \"/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionFallThroughTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={\"11:13: \" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP\",\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute(\"checkLastCaseGroup\",\"true\");     final String[] expectedViolation={\"10:17: \" + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST\" + \"/LITERAL_SWITCH/CASE_GROUP\",\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST\" + \"/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java\nindex dc88696..9a26db1 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck;\n \n-public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {\n+public class XpathRegressionHiddenFieldTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1313, "bugNodeLength": 2017, "fixLineNum": 31, "fixNodeStartChar": 1313, "fixNodeLength": 2009, "sourceBeforeFix": "public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={\"10:34: \" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,\"value\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK\" + \"/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS\" + \"/PARAMETER_DEF[@text='value']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={\"8:45: \" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,\"other\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionHiddenFieldTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={\"10:34: \" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,\"value\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK\" + \"/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS\" + \"/PARAMETER_DEF[@text='value']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionExplicitTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={\"8:45: \" + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,\"other\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java\nindex e75f84d..4873a2e 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.IllegalThrowsCheck;\n \n-public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {\n+public class XpathRegressionIllegalThrowsTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1315, "bugNodeLength": 2025, "fixLineNum": 31, "fixNodeStartChar": 1315, "fixNodeLength": 2017, "sourceBeforeFix": "public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionIllegalThrowsOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={\"4:35: \" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,\"RuntimeException\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionIllegalThrowsTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={\"8:45: \" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,\"java.lang.Error\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionIllegalThrowsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionIllegalThrowsOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={\"4:35: \" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,\"RuntimeException\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionIllegalThrowsTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={\"8:45: \" + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,\"java.lang.Error\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java\nindex 9796851..4fb34a3 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck;\n \n-public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {\n+public class XpathRegressionImportControlTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1316, "bugNodeLength": 3767, "fixLineNum": 31, "fixNodeStartChar": 1316, "fixNodeLength": 3759, "sourceBeforeFix": "public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(\"file\",getPath(checkName,\"SuppressionXpathRegressionImportControlOne.xml\"));     final String[] expectedViolation={\"3:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,\"java.util.Scanner\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/IMPORT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(\"file\",getPath(checkName,\"SuppressionXpathRegressionImportControlTwo.xml\"));     final String[] expectedViolation={\"1:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/PACKAGE_DEF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={\"1:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/PACKAGE_DEF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlFour.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(\"file\",getPath(checkName,\"SuppressionXpathRegressionImportControlFour.xml\"));     final String[] expectedViolation={\"4:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,\"java.util.Scanner\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/IMPORT[./DOT[@text='Scanner']]\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionImportControlTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(\"file\",getPath(checkName,\"SuppressionXpathRegressionImportControlOne.xml\"));     final String[] expectedViolation={\"3:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,\"java.util.Scanner\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/IMPORT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(\"file\",getPath(checkName,\"SuppressionXpathRegressionImportControlTwo.xml\"));     final String[] expectedViolation={\"1:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/PACKAGE_DEF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={\"1:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/PACKAGE_DEF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionImportControlFour.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute(\"file\",getPath(checkName,\"SuppressionXpathRegressionImportControlFour.xml\"));     final String[] expectedViolation={\"4:1: \" + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,\"java.util.Scanner\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/IMPORT[./DOT[@text='Scanner']]\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocVariableTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocVariableTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocVariableTest.java\nindex e922a9e..549c53b 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocVariableTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocVariableTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck;\n \n-public class XpathRegressionJavadocVariableTest extends AbstractXpathTestSupport {\n+public class XpathRegressionJavadocVariableTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1313, "bugNodeLength": 2684, "fixLineNum": 31, "fixNodeStartChar": 1313, "fixNodeLength": 2676, "sourceBeforeFix": "public class XpathRegressionJavadocVariableTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionJavadocVariableOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={\"5:5: \" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='age']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='age']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionJavadocVariableTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={\"6:9: \" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK\" + \"/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK\" + \"/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK\" + \"/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS\" + \"/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionJavadocVariableTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionJavadocVariableOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={\"5:5: \" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='age']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='age']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionJavadocVariableTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={\"6:9: \" + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK\" + \"/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK\" + \"/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK\" + \"/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS\" + \"/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java\nindex cee0f04..d3f4166 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java\n@@ -30,7 +30,7 @@\n import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck;\n import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyOption;\n \n-public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {\n+public class XpathRegressionLeftCurlyTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 33, "bugNodeStartChar": 1406, "bugNodeLength": 2963, "fixLineNum": 33, "fixNodeStartChar": 1406, "fixNodeLength": 2955, "sourceBeforeFix": "public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionLeftCurlyOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={\"4:1: \" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,\"{\",1)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK\",\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionLeftCurlyTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute(\"option\",LeftCurlyOption.NL.toString());     final String[] expectedViolation={\"3:53: \" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,\"{\",53)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK\",\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionLeftCurlyThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={\"5:19: \" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,\"{\",19)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionLeftCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionLeftCurlyOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={\"4:1: \" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,\"{\",1)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK\",\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionLeftCurlyTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute(\"option\",LeftCurlyOption.NL.toString());     final String[] expectedViolation={\"3:53: \" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,\"{\",53)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK\",\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionLeftCurlyThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={\"5:19: \" + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,\"{\",19)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java\nindex 2cbfaa9..b2664d3 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck;\n \n-public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {\n+public class XpathRegressionMethodParamPadTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1320, "bugNodeLength": 2971, "fixLineNum": 31, "fixNodeStartChar": 1320, "fixNodeLength": 2963, "sourceBeforeFix": "public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"4:37: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='InputMethodParamPad']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"5:13: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute(\"option\",\"space\");     final String[] expectedViolation={\"4:25: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionMethodParamPadTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"4:37: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='InputMethodParamPad']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"5:13: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute(\"option\",\"space\");     final String[] expectedViolation={\"4:25: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleVariableDeclarationsTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleVariableDeclarationsTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleVariableDeclarationsTest.java\nindex 43ed91b..a9eae82 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleVariableDeclarationsTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleVariableDeclarationsTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck;\n \n-public class XpathRegressionMultipleVariableDeclarationsTest extends AbstractXpathTestSupport {\n+public class XpathRegressionMultipleVariableDeclarationsTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1325, "bugNodeLength": 3675, "fixLineNum": 31, "fixNodeStartChar": 1325, "fixNodeLength": 3667, "sourceBeforeFix": "public class XpathRegressionMultipleVariableDeclarationsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMultipleVariableDeclarationOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={\"4:5: \" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']/TYPE\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/TYPE\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMultipleVariableDeclarationTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={\"4:5: \" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']/TYPE\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionMultipleVariableDeclarationsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMultipleVariableDeclarationOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={\"4:5: \" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']/TYPE\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/TYPE\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMultipleVariableDeclarationTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={\"4:5: \" + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']/TYPE\",\"/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java\nindex 1eacb66..97b66cf 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java\n@@ -30,7 +30,7 @@\n import com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck;\n \n // -@cs[AbbreviationAsWordInName] Test should be named as its main class.\n-public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {\n+public class XpathRegressionNPathComplexityTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 33, "bugNodeStartChar": 1417, "bugNodeLength": 2285, "fixLineNum": 33, "fixNodeStartChar": 1417, "fixNodeLength": 2277, "sourceBeforeFix": "public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionNPathComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java\nindex dc2796d..aa64da5 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.NestedForDepthCheck;\n \n-public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport {\n+public class XpathRegressionNestedForDepthTest extends XpathTestSupport {\n \n     @Test\n     public void testCorrect() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1316, "bugNodeLength": 1054, "fixLineNum": 31, "fixNodeStartChar": 1316, "fixNodeLength": 1046, "sourceBeforeFix": "public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedForDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={\"7:17: \" + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionNestedForDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedForDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={\"7:17: \" + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java\nindex f93f4be..cdce4a7 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck;\n \n-public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {\n+public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {\n \n     @Test\n     public void testCorrect() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1315, "bugNodeLength": 1046, "fixLineNum": 31, "fixNodeStartChar": 1315, "fixNodeLength": 1038, "sourceBeforeFix": "public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedIfDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={\"10:17: \" + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedIfDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={\"10:17: \" + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java\nindex 65963dd..5a79a6a 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck;\n \n-public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport {\n+public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {\n \n     @Test\n     public void testCorrect() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1316, "bugNodeLength": 1054, "fixLineNum": 31, "fixNodeStartChar": 1316, "fixNodeLength": 1046, "sourceBeforeFix": "public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedTryDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={\"7:17: \" + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedTryDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={\"7:17: \" + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java\nindex d239767..501dbc1 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck;\n \n-public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSupport {\n+public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1321, "bugNodeLength": 2007, "fixLineNum": 31, "fixNodeStartChar": 1321, "fixNodeLength": 1999, "sourceBeforeFix": "public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionOneStatementPerLineOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={\"4:17: \" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/SEMI\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionOneStatementPerLineTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={\"9:39: \" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionOneStatementPerLineOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={\"4:17: \" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK\" + \"/VARIABLE_DEF[@text='j']/SEMI\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionOneStatementPerLineTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={\"9:39: \" + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOuterTypeNumberTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOuterTypeNumberTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOuterTypeNumberTest.java\nindex 794ed2d..dfe2a21 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOuterTypeNumberTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOuterTypeNumberTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.sizes.OuterTypeNumberCheck;\n \n-public class XpathRegressionOuterTypeNumberTest extends AbstractXpathTestSupport {\n+public class XpathRegressionOuterTypeNumberTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1316, "bugNodeLength": 945, "fixLineNum": 31, "fixNodeStartChar": 1316, "fixNodeLength": 937, "sourceBeforeFix": "public class XpathRegressionOuterTypeNumberTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionOuterTypeNumber.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"1:1: \" + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/PACKAGE_DEF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionOuterTypeNumberTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionOuterTypeNumber.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"1:1: \" + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/PACKAGE_DEF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java\nindex fb434a0..e03a2e2 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck;\n \n-public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {\n+public class XpathRegressionRequireThisTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 31, "bugNodeStartChar": 1313, "bugNodeLength": 2135, "fixLineNum": 31, "fixNodeStartChar": 1313, "fixNodeLength": 2127, "sourceBeforeFix": "public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRequireThisOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(\"validateOnlyOverlapping\",\"false\");     final String[] expectedViolation={\"7:9: \" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,\"age\",\"\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRequireThisTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(\"validateOnlyOverlapping\",\"false\");     final String[] expectedViolation={\"9:9: \" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,\"method1\",\"\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionRequireThisTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRequireThisOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(\"validateOnlyOverlapping\",\"false\");     final String[] expectedViolation={\"7:9: \" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,\"age\",\"\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRequireThisTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute(\"validateOnlyOverlapping\",\"false\");     final String[] expectedViolation={\"9:9: \" + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,\"method1\",\"\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe", "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234", "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java", "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java\nindex d38af95..79f4387 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java\n@@ -29,7 +29,7 @@\n import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;\n import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption;\n \n-public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {\n+public class XpathRegressionRightCurlyTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 32, "bugNodeStartChar": 1383, "bugNodeLength": 4095, "fixLineNum": 32, "fixNodeStartChar": 1383, "fixNodeLength": 4087, "sourceBeforeFix": "public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={\"8:9: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,\"}\",9)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(\"option\",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={\"9:15: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,\"}\",15)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(\"option\",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={\"5:72: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,\"}\",72)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyFour.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(\"option\",RightCurlyOption.SAME.toString());     final String[] expectedViolation={\"7:27: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,\"}\",27)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK\" + \"/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ", "sourceAfterFix": "public class XpathRegressionRightCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={\"8:9: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,\"}\",9)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(\"option\",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={\"9:15: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,\"}\",15)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(\"option\",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={\"5:72: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,\"}\",72)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionRightCurlyFour.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute(\"option\",RightCurlyOption.SAME.toString());     final String[] expectedViolation={\"7:27: \" + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,\"}\",27)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK\" + \"/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 79, "bugNodeStartChar": 3168, "bugNodeLength": 52, "fixLineNum": 80, "fixNodeStartChar": 3184, "fixNodeLength": 65, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 79, "bugNodeStartChar": 3168, "bugNodeLength": 52, "fixLineNum": 80, "fixNodeStartChar": 3184, "fixNodeLength": 65, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 90, "bugNodeStartChar": 3556, "bugNodeLength": 60, "fixLineNum": 91, "fixNodeStartChar": 3572, "fixNodeLength": 73, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 90, "bugNodeStartChar": 3556, "bugNodeLength": 60, "fixLineNum": 91, "fixNodeStartChar": 3572, "fixNodeLength": 73, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 102, "bugNodeStartChar": 3972, "bugNodeLength": 64, "fixLineNum": 102, "fixNodeStartChar": 3972, "fixNodeLength": 77, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 102, "bugNodeStartChar": 3972, "bugNodeLength": 64, "fixLineNum": 102, "fixNodeStartChar": 3972, "fixNodeLength": 77, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 111, "bugNodeStartChar": 4403, "bugNodeLength": 52, "fixLineNum": 111, "fixNodeStartChar": 4403, "fixNodeLength": 65, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 111, "bugNodeStartChar": 4403, "bugNodeLength": 52, "fixLineNum": 111, "fixNodeStartChar": 4403, "fixNodeLength": 65, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 120, "bugNodeStartChar": 4826, "bugNodeLength": 60, "fixLineNum": 121, "fixNodeStartChar": 4842, "fixNodeLength": 73, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 120, "bugNodeStartChar": 4826, "bugNodeLength": 60, "fixLineNum": 121, "fixNodeStartChar": 4842, "fixNodeLength": 73, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 130, "bugNodeStartChar": 5277, "bugNodeLength": 64, "fixLineNum": 130, "fixNodeStartChar": 5277, "fixNodeLength": 77, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "fixCommitParentSHA1": "840e7143a58542da18227e443df935e1ea429fc9", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\nindex a729bab..80827df 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java\n@@ -76,7 +76,8 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n \n     @Test\n@@ -87,7 +88,9 @@\n             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -99,7 +102,8 @@\n         };\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -108,7 +112,8 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n+        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -117,7 +122,9 @@\n         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n-        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n+        verify(checkConfig,\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n+                expected);\n     }\n \n     @Test\n@@ -127,7 +134,8 @@\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n \n         verify(checkConfig,\n-                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n+                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n+                expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 130, "bugNodeStartChar": 5277, "bugNodeLength": 64, "fixLineNum": 130, "fixNodeStartChar": 5277, "fixNodeLength": 77, "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "2c7577e7637389d62b63a31ec0c1f609acd54a6e", "fixCommitParentSHA1": "2230bf1938c6e91944e3b98055684b1dcddf36df", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java\nindex 6f08210..336dd0e 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java\n@@ -368,7 +368,8 @@\n \n             // can be in different orders, and completely optional\n             if (\"Notes\".equals(subSectionName)\n-                    || \"Rule Description\".equals(subSectionName)) {\n+                    || \"Rule Description\".equals(subSectionName)\n+                    || \"Metadata\".equals(subSectionName)) {\n                 continue;\n             }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 370, "bugNodeStartChar": 16155, "bugNodeLength": 95, "fixLineNum": 370, "fixNodeStartChar": 16155, "fixNodeLength": 152, "sourceBeforeFix": "\"Notes\".equals(subSectionName) || \"Rule Description\".equals(subSectionName)", "sourceAfterFix": "\"Notes\".equals(subSectionName) || \"Rule Description\".equals(subSectionName) || \"Metadata\".equals(subSectionName)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f94694c2231e5c1025b76bcfe0337304a76ec94a", "fixCommitParentSHA1": "6f37a6330b0ff7eb2dfae31900c7bee16fca678e", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\nindex 971c521..a35ea92 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n@@ -284,7 +284,7 @@\n                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n-                                mouseEvent.getWhen(), mouseEvent.getModifiers(),\n+                                mouseEvent.getWhen(), mouseEvent.getModifiersEx(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 287, "bugNodeStartChar": 10741, "bugNodeLength": 25, "fixLineNum": 287, "fixNodeStartChar": 10741, "fixNodeLength": 27, "sourceBeforeFix": "mouseEvent.getModifiers()", "sourceAfterFix": "mouseEvent.getModifiersEx()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f94694c2231e5c1025b76bcfe0337304a76ec94a", "fixCommitParentSHA1": "6f37a6330b0ff7eb2dfae31900c7bee16fca678e", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\nindex 971c521..a35ea92 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n@@ -284,7 +284,7 @@\n                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n-                                mouseEvent.getWhen(), mouseEvent.getModifiers(),\n+                                mouseEvent.getWhen(), mouseEvent.getModifiersEx(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 287, "bugNodeStartChar": 10741, "bugNodeLength": 25, "fixLineNum": 287, "fixNodeStartChar": 10741, "fixNodeLength": 27, "sourceBeforeFix": "mouseEvent.getModifiers()", "sourceAfterFix": "mouseEvent.getModifiersEx()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "fixCommitParentSHA1": "66f3283537038d8a35d5f0a6323df73ff8ac6a5b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\nindex e72d771..971c521 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n@@ -54,7 +54,7 @@\n  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\n-public class TreeTable extends JTable {\n+public final class TreeTable extends JTable {\n \n     private static final long serialVersionUID = -8493693409423365387L;\n     /** A subclass of JTree. */\n@@ -207,7 +207,7 @@\n      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n-    public final void setRowHeight(int newRowHeight) {\n+    public void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 43, "bugNodeStartChar": 1654, "bugNodeLength": 9530, "fixLineNum": 43, "fixNodeStartChar": 1654, "fixNodeLength": 9536, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "fixCommitParentSHA1": "66f3283537038d8a35d5f0a6323df73ff8ac6a5b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\nindex e72d771..971c521 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n@@ -54,7 +54,7 @@\n  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\n-public class TreeTable extends JTable {\n+public final class TreeTable extends JTable {\n \n     private static final long serialVersionUID = -8493693409423365387L;\n     /** A subclass of JTree. */\n@@ -207,7 +207,7 @@\n      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n-    public final void setRowHeight(int newRowHeight) {\n+    public void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 206, "bugNodeStartChar": 7666, "bugNodeLength": 309, "fixLineNum": 206, "fixNodeStartChar": 7666, "fixNodeLength": 303, "sourceBeforeFix": "17", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "fixCommitParentSHA1": "66f3283537038d8a35d5f0a6323df73ff8ac6a5b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java\nindex ea5ba11..d8a51a9 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java\n@@ -156,11 +156,9 @@\n     /**\n      * Using direct call to check here because there is no other way\n      * to reproduce exception with invalid canonical path.\n-     *\n-     * @throws Exception if error occurs\n      */\n     @Test\n-    public void testCheckstyleExceptionIfFailedToGetCanonicalPathToFile() throws Exception {\n+    public void testCheckstyleExceptionIfFailedToGetCanonicalPathToFile() {\n         final JavadocPackageCheck check = new JavadocPackageCheck();\n         final File fileWithInvalidPath = new File(\"\\u0000\\u0000\\u0000\");\n         final FileText mockFileText = new FileText(fileWithInvalidPath, Collections.emptyList());\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 156, "bugNodeStartChar": 6628, "bugNodeLength": 1048, "fixLineNum": 156, "fixNodeStartChar": 6628, "fixNodeLength": 1031, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2e3ff43a350b9f6d021c7154ba95c91ed1a04a97", "fixCommitParentSHA1": "2f00020063cbce94643fdc198dc69b7693382f58", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java\nindex be08981..ce0e81d 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java\n@@ -139,7 +139,7 @@\n                 .getContextClassLoader();\n         final String packageName = \"com.puppycrawl.tools.checkstyle\";\n         return getCheckstyleModulesRecursive(packageName, loader).stream()\n-                .filter(ModuleReflectionUtils::isCheckstyleCheck)\n+                .filter(ModuleReflectionUtils::isCheckstyleTreeWalkerCheck)\n                 .collect(Collectors.toSet());\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 142, "bugNodeStartChar": 5982, "bugNodeLength": 40, "fixLineNum": 142, "fixNodeStartChar": 5982, "fixNodeLength": 50, "sourceBeforeFix": "ModuleReflectionUtils::isCheckstyleCheck", "sourceAfterFix": "ModuleReflectionUtils::isCheckstyleTreeWalkerCheck"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\nindex ebc63bb..2a97a8f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n@@ -88,7 +88,7 @@\n      * @return Full tree\n      */\n     private static String printJavaAndJavadocTree(DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))\n@@ -140,7 +140,7 @@\n      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))\n@@ -172,7 +172,7 @@\n     private static String getIndentation(DetailAST ast) {\n         final boolean isLastChild = ast.getNextSibling() == null;\n         DetailAST node = ast;\n-        final StringBuilder indentation = new StringBuilder();\n+        final StringBuilder indentation = new StringBuilder(1024);\n         while (node.getParent() != null) {\n             node = node.getParent();\n             if (node.getParent() == null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 91, "bugNodeStartChar": 3574, "bugNodeLength": 19, "fixLineNum": 91, "fixNodeStartChar": 3574, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\nindex ebc63bb..2a97a8f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n@@ -88,7 +88,7 @@\n      * @return Full tree\n      */\n     private static String printJavaAndJavadocTree(DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))\n@@ -140,7 +140,7 @@\n      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))\n@@ -172,7 +172,7 @@\n     private static String getIndentation(DetailAST ast) {\n         final boolean isLastChild = ast.getNextSibling() == null;\n         DetailAST node = ast;\n-        final StringBuilder indentation = new StringBuilder();\n+        final StringBuilder indentation = new StringBuilder(1024);\n         while (node.getParent() != null) {\n             node = node.getParent();\n             if (node.getParent() == null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 143, "bugNodeStartChar": 5661, "bugNodeLength": 19, "fixLineNum": 143, "fixNodeStartChar": 5661, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\nindex ebc63bb..2a97a8f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n@@ -88,7 +88,7 @@\n      * @return Full tree\n      */\n     private static String printJavaAndJavadocTree(DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))\n@@ -140,7 +140,7 @@\n      * @return string AST.\n      */\n     private static String printTree(DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailAST node = ast;\n         while (node != null) {\n             messageBuilder.append(getIndentation(node))\n@@ -172,7 +172,7 @@\n     private static String getIndentation(DetailAST ast) {\n         final boolean isLastChild = ast.getNextSibling() == null;\n         DetailAST node = ast;\n-        final StringBuilder indentation = new StringBuilder();\n+        final StringBuilder indentation = new StringBuilder(1024);\n         while (node.getParent() != null) {\n             node = node.getParent();\n             if (node.getParent() == null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 175, "bugNodeStartChar": 6846, "bugNodeLength": 19, "fixLineNum": 175, "fixNodeStartChar": 6846, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\nindex c0fbf2f..64f4805 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n@@ -346,7 +346,7 @@\n         final List<String> propertyRefs = new ArrayList<>();\n         parsePropertyString(value, fragments, propertyRefs);\n \n-        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder(256);\n         final Iterator<String> fragmentsIterator = fragments.iterator();\n         final Iterator<String> propertyRefsIterator = propertyRefs.iterator();\n         while (fragmentsIterator.hasNext()) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 349, "bugNodeStartChar": 15460, "bugNodeLength": 19, "fixLineNum": 349, "fixNodeStartChar": 15460, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java\nindex 81d2a3d..515ed5c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java\n@@ -108,7 +108,7 @@\n      * @return string AST.\n      */\n     public static String printTree(DetailNode ast, String rootPrefix, String prefix) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailNode node = ast;\n         while (node != null) {\n             if (node.getType() == JavadocTokenTypes.JAVADOC) {\n@@ -136,7 +136,7 @@\n     private static String getIndentation(DetailNode node) {\n         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;\n         DetailNode currentNode = node;\n-        final StringBuilder indentation = new StringBuilder();\n+        final StringBuilder indentation = new StringBuilder(1024);\n         while (currentNode.getParent() != null) {\n             currentNode = currentNode.getParent();\n             if (currentNode.getParent() == null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 111, "bugNodeStartChar": 4531, "bugNodeLength": 19, "fixLineNum": 111, "fixNodeStartChar": 4531, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java\nindex 81d2a3d..515ed5c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java\n@@ -108,7 +108,7 @@\n      * @return string AST.\n      */\n     public static String printTree(DetailNode ast, String rootPrefix, String prefix) {\n-        final StringBuilder messageBuilder = new StringBuilder();\n+        final StringBuilder messageBuilder = new StringBuilder(1024);\n         DetailNode node = ast;\n         while (node != null) {\n             if (node.getType() == JavadocTokenTypes.JAVADOC) {\n@@ -136,7 +136,7 @@\n     private static String getIndentation(DetailNode node) {\n         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;\n         DetailNode currentNode = node;\n-        final StringBuilder indentation = new StringBuilder();\n+        final StringBuilder indentation = new StringBuilder(1024);\n         while (currentNode.getParent() != null) {\n             currentNode = currentNode.getParent();\n             if (currentNode.getParent() == null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 139, "bugNodeStartChar": 5795, "bugNodeLength": 19, "fixLineNum": 139, "fixNodeStartChar": 5795, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\nindex e2c9631..4c5cf4e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n@@ -97,7 +97,7 @@\n      * @return the full name of the current package.\n      */\n     private String getPackageName() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder buf = new StringBuilder(256);\n         final Iterator<String> iterator = packageStack.descendingIterator();\n         while (iterator.hasNext()) {\n             final String subPackage = iterator.next();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 100, "bugNodeStartChar": 3766, "bugNodeLength": 19, "fixLineNum": 100, "fixNodeStartChar": 3766, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java\nindex f3316f2..19818f5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java\n@@ -152,7 +152,7 @@\n      * @return the escaped value if necessary.\n      */\n     public static String encode(String value) {\n-        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder(256);\n         for (int i = 0; i < value.length(); i++) {\n             final char chr = value.charAt(i);\n             switch (chr) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 155, "bugNodeStartChar": 5596, "bugNodeLength": 19, "fixLineNum": 155, "fixNodeStartChar": 5596, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\nindex b550a76..d04c75b 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\n@@ -172,7 +172,7 @@\n      * @throws NullPointerException if the lines array is null\n      */\n     public FileText(File file, List<String> lines) {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder buf = new StringBuilder(1024);\n         for (final String line : lines) {\n             buf.append(line).append('\\n');\n         }\n@@ -195,7 +195,7 @@\n         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder buf = new StringBuilder(1024);\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 175, "bugNodeStartChar": 5935, "bugNodeLength": 19, "fixLineNum": 175, "fixNodeStartChar": 5935, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\nindex b550a76..d04c75b 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\n@@ -172,7 +172,7 @@\n      * @throws NullPointerException if the lines array is null\n      */\n     public FileText(File file, List<String> lines) {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder buf = new StringBuilder(1024);\n         for (final String line : lines) {\n             buf.append(line).append('\\n');\n         }\n@@ -195,7 +195,7 @@\n         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder buf = new StringBuilder(1024);\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 198, "bugNodeStartChar": 6763, "bugNodeLength": 19, "fixLineNum": 198, "fixNodeStartChar": 6763, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex fd0dd1e..a630b44 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n@@ -361,7 +361,7 @@\n      * @return Imported canonical type's name.\n      */\n     private static String getImportedTypeCanonicalName(DetailAST importAst) {\n-        final StringBuilder canonicalNameBuilder = new StringBuilder();\n+        final StringBuilder canonicalNameBuilder = new StringBuilder(256);\n         DetailAST toVisit = importAst;\n         while (toVisit != null) {\n             toVisit = getNextSubTreeNode(toVisit, importAst);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 364, "bugNodeStartChar": 12633, "bugNodeLength": 19, "fixLineNum": 364, "fixNodeStartChar": 12633, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java\nindex aab4941..57941b0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java\n@@ -777,7 +777,7 @@\n      * @return canonical type's name\n      */\n     private static String getCanonicalName(DetailAST type) {\n-        final StringBuilder canonicalNameBuilder = new StringBuilder();\n+        final StringBuilder canonicalNameBuilder = new StringBuilder(256);\n         DetailAST toVisit = type.getFirstChild();\n         while (toVisit != null) {\n             toVisit = getNextSubTreeNode(toVisit, type);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 780, "bugNodeStartChar": 28985, "bugNodeLength": 19, "fixLineNum": 780, "fixNodeStartChar": 28985, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 9b2992c..a7f5d23 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -789,7 +789,7 @@\n      */\n     private static String getFirstDomainsFromIdent(\n             final int firstPackageDomainsCount, final String packageFullPath) {\n-        final StringBuilder builder = new StringBuilder();\n+        final StringBuilder builder = new StringBuilder(256);\n         final StringTokenizer tokens = new StringTokenizer(packageFullPath, \".\");\n         int count = firstPackageDomainsCount;\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 792, "bugNodeStartChar": 30385, "bugNodeLength": 19, "fixLineNum": 792, "fixNodeStartChar": 30385, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java\nindex 09ea87c..35c11e6 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java\n@@ -119,7 +119,7 @@\n         if (levels.cardinality() == 1) {\n             return String.valueOf(levels.nextSetBit(0));\n         }\n-        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder(50);\n         for (int i = levels.nextSetBit(0); i >= 0;\n             i = levels.nextSetBit(i + 1)) {\n             if (sb.length() > 0) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 122, "bugNodeStartChar": 3874, "bugNodeLength": 19, "fixLineNum": 122, "fixNodeStartChar": 3874, "fixNodeLength": 21, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\nindex 890a2d5..58a6697 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n@@ -260,7 +260,7 @@\n      * @return a comment text String.\n      */\n     private static String getCommentText(String... comments) {\n-        final StringBuilder builder = new StringBuilder();\n+        final StringBuilder builder = new StringBuilder(1024);\n         for (final String line : comments) {\n             final int textStart = findTextStart(line);\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 263, "bugNodeStartChar": 10011, "bugNodeLength": 19, "fixLineNum": 263, "fixNodeStartChar": 10011, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\nindex 58de618..1e78b89 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n@@ -163,7 +163,7 @@\n      */\n     private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(256);\n         for (DetailNode child : ast.getChildren()) {\n             if (ALLOWED_TYPES.contains(child.getType())) {\n                 result.append(child.getText());\n@@ -193,7 +193,7 @@\n      * @return content of child nodes as string.\n      */\n     private static String getContentOfChild(DetailNode child) {\n-        final StringBuilder contents = new StringBuilder();\n+        final StringBuilder contents = new StringBuilder(256);\n         for (DetailNode node : child.getChildren()) {\n             contents.append(node.getText().trim());\n         }\n@@ -224,7 +224,7 @@\n      * @return first sentence.\n      */\n     private static String getFirstSentence(DetailNode ast) {\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(256);\n         final String periodSuffix = PERIOD + ' ';\n         for (DetailNode child : ast.getChildren()) {\n             final String text;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 166, "bugNodeStartChar": 5981, "bugNodeLength": 19, "fixLineNum": 166, "fixNodeStartChar": 5981, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\nindex 58de618..1e78b89 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n@@ -163,7 +163,7 @@\n      */\n     private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(256);\n         for (DetailNode child : ast.getChildren()) {\n             if (ALLOWED_TYPES.contains(child.getType())) {\n                 result.append(child.getText());\n@@ -193,7 +193,7 @@\n      * @return content of child nodes as string.\n      */\n     private static String getContentOfChild(DetailNode child) {\n-        final StringBuilder contents = new StringBuilder();\n+        final StringBuilder contents = new StringBuilder(256);\n         for (DetailNode node : child.getChildren()) {\n             contents.append(node.getText().trim());\n         }\n@@ -224,7 +224,7 @@\n      * @return first sentence.\n      */\n     private static String getFirstSentence(DetailNode ast) {\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(256);\n         final String periodSuffix = PERIOD + ' ';\n         for (DetailNode child : ast.getChildren()) {\n             final String text;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 196, "bugNodeStartChar": 7185, "bugNodeLength": 19, "fixLineNum": 196, "fixNodeStartChar": 7185, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\nindex 58de618..1e78b89 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n@@ -163,7 +163,7 @@\n      */\n     private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(256);\n         for (DetailNode child : ast.getChildren()) {\n             if (ALLOWED_TYPES.contains(child.getType())) {\n                 result.append(child.getText());\n@@ -193,7 +193,7 @@\n      * @return content of child nodes as string.\n      */\n     private static String getContentOfChild(DetailNode child) {\n-        final StringBuilder contents = new StringBuilder();\n+        final StringBuilder contents = new StringBuilder(256);\n         for (DetailNode node : child.getChildren()) {\n             contents.append(node.getText().trim());\n         }\n@@ -224,7 +224,7 @@\n      * @return first sentence.\n      */\n     private static String getFirstSentence(DetailNode ast) {\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(256);\n         final String periodSuffix = PERIOD + ' ';\n         for (DetailNode child : ast.getChildren()) {\n             final String text;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 227, "bugNodeStartChar": 8264, "bugNodeLength": 19, "fixLineNum": 227, "fixNodeStartChar": 8264, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java\nindex b8eeb85..5b3b11c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java\n@@ -104,7 +104,7 @@\n      * @return The lines, joined together with newlines, as a single string.\n      */\n     private static String convertLinesToString(String... lines) {\n-        final StringBuilder builder = new StringBuilder();\n+        final StringBuilder builder = new StringBuilder(1024);\n         for (String line : lines) {\n             builder.append(line);\n             builder.append(LINE_FEED);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 107, "bugNodeStartChar": 4075, "bugNodeLength": 19, "fixLineNum": 107, "fixNodeStartChar": 4075, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java\nindex 1bed022..e8f0ec0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java\n@@ -215,7 +215,7 @@\n                 // starts line counting at 1\n                 linesToPositionTemp.add(0);\n \n-                final StringBuilder sb = new StringBuilder();\n+                final StringBuilder sb = new StringBuilder(1024);\n                 // insert the contents of the file to the text area\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 218, "bugNodeStartChar": 6700, "bugNodeLength": 19, "fixLineNum": 218, "fixNodeStartChar": 6700, "fixNodeLength": 23, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java\nindex 728ba20..c053c89 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java\n@@ -249,7 +249,7 @@\n         final Map<String, MapDifference.ValueDifference<List<String>>> differingViolations =\n                 violationDifferences.entriesDiffering();\n \n-        final StringBuilder message = new StringBuilder();\n+        final StringBuilder message = new StringBuilder(256);\n         if (!missingViolations.isEmpty()) {\n             message.append(\"missing violations: \").append(missingViolations);\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 252, "bugNodeStartChar": 10674, "bugNodeLength": 19, "fixLineNum": 252, "fixNodeStartChar": 10674, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\nindex 5e89671..a1e40a6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\n@@ -343,7 +343,7 @@\n         final Map<String, ValueDifference<List<String>>> differingViolations =\n             violationDifferences.entriesDiffering();\n \n-        final StringBuilder message = new StringBuilder();\n+        final StringBuilder message = new StringBuilder(256);\n         if (!missingViolations.isEmpty()) {\n             message.append(\"missing violations: \").append(missingViolations);\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 346, "bugNodeStartChar": 15325, "bugNodeLength": 19, "fixLineNum": 346, "fixNodeStartChar": 15325, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java\nindex c8da4d7..6019a3e 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java\n@@ -250,7 +250,7 @@\n             tokenText = \"TokenTypes.\";\n         }\n         else {\n-            final StringBuilder result = new StringBuilder();\n+            final StringBuilder result = new StringBuilder(50);\n             boolean first = true;\n \n             for (int token : tokens) {\n@@ -300,7 +300,7 @@\n     }\n \n     public static String getJavadocTokenText(int[] tokens, int... subtractions) {\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(50);\n         boolean first = true;\n \n         for (int token : tokens) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 253, "bugNodeStartChar": 10608, "bugNodeLength": 19, "fixLineNum": 253, "fixNodeStartChar": 10608, "fixNodeLength": 21, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java\nindex c8da4d7..6019a3e 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java\n@@ -250,7 +250,7 @@\n             tokenText = \"TokenTypes.\";\n         }\n         else {\n-            final StringBuilder result = new StringBuilder();\n+            final StringBuilder result = new StringBuilder(50);\n             boolean first = true;\n \n             for (int token : tokens) {\n@@ -300,7 +300,7 @@\n     }\n \n     public static String getJavadocTokenText(int[] tokens, int... subtractions) {\n-        final StringBuilder result = new StringBuilder();\n+        final StringBuilder result = new StringBuilder(50);\n         boolean first = true;\n \n         for (int token : tokens) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 303, "bugNodeStartChar": 11894, "bugNodeLength": 19, "fixLineNum": 303, "fixNodeStartChar": 11894, "fixNodeLength": 21, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\nindex d63d573..9ff376a 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n@@ -219,7 +219,7 @@\n      * @param ast ast to test.\n      * @return true if current ast is default and it is part of annotation.\n      */\n-    private boolean isDefaultInAnnotation(DetailAST ast) {\n+    private static boolean isDefaultInAnnotation(DetailAST ast) {\n         boolean isDefaultInAnnotation = false;\n         if (ast.getType() == TokenTypes.LITERAL_DEFAULT\n                 && ast.getParent().getType() == TokenTypes.ANNOTATION_FIELD_DEF) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 217, "bugNodeStartChar": 6580, "bugNodeLength": 525, "fixLineNum": 217, "fixNodeStartChar": 6580, "fixNodeLength": 532, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java\nindex eab700d..4135916 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java\n@@ -521,7 +521,7 @@\n      * @param parameterDefAst parameter definition\n      * @return true if it is a multiple type catch, false otherwise\n      */\n-    private boolean isMultipleTypeCatch(DetailAST parameterDefAst) {\n+    private static boolean isMultipleTypeCatch(DetailAST parameterDefAst) {\n         final DetailAST typeAst = parameterDefAst.findFirstToken(TokenTypes.TYPE);\n         return typeAst.getFirstChild().getType() == TokenTypes.BOR;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 519, "bugNodeStartChar": 20274, "bugNodeLength": 425, "fixLineNum": 519, "fixNodeStartChar": 20274, "fixNodeLength": 432, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\nindex d02f1a8..c2c5fd7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\n@@ -157,7 +157,7 @@\n      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n-    private boolean hasJavadocComment(DetailAST methodDef) {\n+    private static boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }\n@@ -167,7 +167,7 @@\n      * @param ast method definition token.\n      * @return true if a methods is native.\n      */\n-    private boolean isNativeMethod(DetailAST ast) {\n+    private static boolean isNativeMethod(DetailAST ast) {\n         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);\n         return mods.branchContains(TokenTypes.LITERAL_NATIVE);\n     }\n@@ -201,7 +201,7 @@\n      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n-    private boolean canBeOverridden(DetailAST methodDef) {\n+    private static boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 155, "bugNodeStartChar": 6244, "bugNodeLength": 393, "fixLineNum": 155, "fixNodeStartChar": 6244, "fixNodeLength": 400, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\nindex d02f1a8..c2c5fd7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\n@@ -157,7 +157,7 @@\n      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n-    private boolean hasJavadocComment(DetailAST methodDef) {\n+    private static boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }\n@@ -167,7 +167,7 @@\n      * @param ast method definition token.\n      * @return true if a methods is native.\n      */\n-    private boolean isNativeMethod(DetailAST ast) {\n+    private static boolean isNativeMethod(DetailAST ast) {\n         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);\n         return mods.branchContains(TokenTypes.LITERAL_NATIVE);\n     }\n@@ -201,7 +201,7 @@\n      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n-    private boolean canBeOverridden(DetailAST methodDef) {\n+    private static boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 165, "bugNodeStartChar": 6643, "bugNodeLength": 335, "fixLineNum": 165, "fixNodeStartChar": 6643, "fixNodeLength": 342, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\nindex d02f1a8..c2c5fd7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java\n@@ -157,7 +157,7 @@\n      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n-    private boolean hasJavadocComment(DetailAST methodDef) {\n+    private static boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }\n@@ -167,7 +167,7 @@\n      * @param ast method definition token.\n      * @return true if a methods is native.\n      */\n-    private boolean isNativeMethod(DetailAST ast) {\n+    private static boolean isNativeMethod(DetailAST ast) {\n         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);\n         return mods.branchContains(TokenTypes.LITERAL_NATIVE);\n     }\n@@ -201,7 +201,7 @@\n      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n-    private boolean canBeOverridden(DetailAST methodDef) {\n+    private static boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 197, "bugNodeStartChar": 7967, "bugNodeLength": 873, "fixLineNum": 197, "fixNodeStartChar": 7967, "fixNodeLength": 880, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java\nindex c02fbb7..9ee72d8 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java\n@@ -251,7 +251,7 @@\n      * @return true if all the nodes up to the last annotation node are end of scope nodes\n      *         false otherwise\n      */\n-    private boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {\n+    private static boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {\n         DetailAST checkNode = node;\n         boolean endOfScope = true;\n         while (endOfScope && !checkNode.equals(lastAnnotationNode)) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 245, "bugNodeStartChar": 9650, "bugNodeLength": 1103, "fixLineNum": 245, "fixNodeStartChar": 9650, "fixNodeLength": 1110, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java\nindex 0763a29..4a895fa 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java\n@@ -79,7 +79,7 @@\n      *            The method definition ast.\n      * @return The start column position of the method.\n      */\n-    private int getMethodDefLineStart(DetailAST mainAst) {\n+    private static int getMethodDefLineStart(DetailAST mainAst) {\n         // get first type position\n         int lineStart = mainAst.findFirstToken(TokenTypes.IDENT).getLineNo();\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 73, "bugNodeStartChar": 2807, "bugNodeLength": 1348, "fixLineNum": 73, "fixNodeStartChar": 2807, "fixNodeLength": 1355, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\nindex 70dd95d..58de618 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n@@ -161,7 +161,7 @@\n      * @param ast Javadoc root node.\n      * @return error string\n      */\n-    private String getSummarySentence(DetailNode ast) {\n+    private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n         final StringBuilder result = new StringBuilder();\n         for (DetailNode child : ast.getChildren()) {\n@@ -206,7 +206,7 @@\n      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n-    private String getStringInsideTag(String result, DetailNode detailNode) {\n+    private static String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 159, "bugNodeStartChar": 5724, "bugNodeLength": 1178, "fixLineNum": 159, "fixNodeStartChar": 5724, "fixNodeLength": 1185, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\nindex 70dd95d..58de618 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java\n@@ -161,7 +161,7 @@\n      * @param ast Javadoc root node.\n      * @return error string\n      */\n-    private String getSummarySentence(DetailNode ast) {\n+    private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n         final StringBuilder result = new StringBuilder();\n         for (DetailNode child : ast.getChildren()) {\n@@ -206,7 +206,7 @@\n      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n-    private String getStringInsideTag(String result, DetailNode detailNode) {\n+    private static String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 203, "bugNodeStartChar": 7362, "bugNodeLength": 663, "fixLineNum": 203, "fixNodeStartChar": 7362, "fixNodeLength": 670, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java\nindex c94f6f1..bb3c87b 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java\n@@ -294,7 +294,7 @@\n      * @param column column index.\n      * @return value at specified column.\n      */\n-    private Object getValueAtDetailNode(DetailNode node, int column) {\n+    private static Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n \n         switch (column) {\n@@ -326,7 +326,7 @@\n      * @param column column index.\n      * @return value at specified column.\n      */\n-    private Object getValueAtDetailAST(DetailAST ast, int column) {\n+    private static Object getValueAtDetailAST(DetailAST ast, int column) {\n         final Object value;\n \n         switch (column) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 291, "bugNodeStartChar": 9235, "bugNodeLength": 939, "fixLineNum": 291, "fixNodeStartChar": 9235, "fixNodeLength": 946, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "fixCommitParentSHA1": "e39bcc27a441de8ccf8644a9aca1ab74f2b45d62", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java\nindex c94f6f1..bb3c87b 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentation.java\n@@ -294,7 +294,7 @@\n      * @param column column index.\n      * @return value at specified column.\n      */\n-    private Object getValueAtDetailNode(DetailNode node, int column) {\n+    private static Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n \n         switch (column) {\n@@ -326,7 +326,7 @@\n      * @param column column index.\n      * @return value at specified column.\n      */\n-    private Object getValueAtDetailAST(DetailAST ast, int column) {\n+    private static Object getValueAtDetailAST(DetailAST ast, int column) {\n         final Object value;\n \n         switch (column) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 323, "bugNodeStartChar": 10180, "bugNodeLength": 910, "fixLineNum": 323, "fixNodeStartChar": 10180, "fixNodeLength": 917, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "668cb3afd0ddec789ef7f3f81940f31e976d042b", "fixCommitParentSHA1": "94df4ad94faa1230f06521e9457472e0ebd2715a", "bugFilePath": "src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java\nindex a9eb52c..190c1f4 100644\n--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java\n+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java\n@@ -47,7 +47,7 @@\n     public static void setConfigurationBuilder() throws CheckstyleException {\n         final List<Configuration> configs = getCheckConfigs(\"ParameterName\");\n \n-        Assert.assertEquals(configs.size(), 1);\n+        Assert.assertEquals(1, configs.size());\n \n         config = configs.get(0);\n         format = config.getAttribute(\"format\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 50, "bugNodeStartChar": 2052, "bugNodeLength": 38, "fixLineNum": 50, "fixNodeStartChar": 2052, "fixNodeLength": 38, "sourceBeforeFix": "Assert.assertEquals(configs.size(),1)", "sourceAfterFix": "Assert.assertEquals(1,configs.size())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "dcb45a2aad0c25e059fec8893272d09a9c660987", "fixCommitParentSHA1": "749bd77b2b512d91a3b0348f517316cd68709804", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\nindex 0a7d9a8..2f83af7 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n@@ -517,7 +517,7 @@\n             @Override\n             public void checkAssertion() throws IOException {\n                 final String expectedPath = getFilePath(\"main/\") + File.separator;\n-                final StringBuilder sb = new StringBuilder();\n+                final StringBuilder sb = new StringBuilder(28);\n                 sb.append(\"Starting audit...\").append(System.getProperty(\"line.separator\"));\n                 final String format = \"[WARN] %s.java:%s: %s [FileLength]\";\n                 for (String[] outputValue : outputValues) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 520, "bugNodeStartChar": 21456, "bugNodeLength": 19, "fixLineNum": 520, "fixNodeStartChar": 21456, "fixNodeLength": 21, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(28)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "dcb45a2aad0c25e059fec8893272d09a9c660987", "fixCommitParentSHA1": "749bd77b2b512d91a3b0348f517316cd68709804", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java\nindex 1608ea3..72182a5 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java\n@@ -738,7 +738,7 @@\n             list.add(field.get(null).toString());\n         }\n \n-        final StringBuilder expectedText = new StringBuilder();\n+        final StringBuilder expectedText = new StringBuilder(120);\n \n         for (String s : list) {\n             expectedText.append(s);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 741, "bugNodeStartChar": 31096, "bugNodeLength": 19, "fixLineNum": 741, "fixNodeStartChar": 31096, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(120)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a0e4e546d91c4ba34fa27de81f9c1447abacb689", "fixCommitParentSHA1": "d7ba37e20b1f580a58b35cc2eaf59352339bb2fb", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java\nindex 63d4492..d3b5c76 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java\n@@ -24,7 +24,8 @@\n \n public class FullIdentTest {\n \n-    public static void testToString() {\n+    @Test\n+    public void testToString() {\n         final DetailAST ast = new DetailAST();\n         ast.setType(TokenTypes.LITERAL_NEW);\n         ast.setColumnNo(14);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 27, "bugNodeStartChar": 1162, "bugNodeLength": 351, "fixLineNum": 27, "fixNodeStartChar": 1162, "fixNodeLength": 354, "sourceBeforeFix": "9", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "cb64a0e40b4729c9a30160d8b43bff36ad0db114", "fixCommitParentSHA1": "c8043874022e66791dcca371ff504f246e4aa284", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java\nindex b6733bf..6d1cb44 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java\n@@ -255,7 +255,7 @@\n     private static class JavadocCatchCheck extends AbstractJavadocCheck {\n         private static int javadocsNumber;\n \n-        static void clearCounter() {\n+        public static void clearCounter() {\n             javadocsNumber = 0;\n         }\n \n@@ -329,7 +329,7 @@\n         private static int visitCount;\n         private static int leaveCount;\n \n-        static void clearCounter() {\n+        public static void clearCounter() {\n             visitCount = 0;\n             leaveCount = 0;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 258, "bugNodeStartChar": 11347, "bugNodeLength": 70, "fixLineNum": 258, "fixNodeStartChar": 11347, "fixNodeLength": 77, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "cb64a0e40b4729c9a30160d8b43bff36ad0db114", "fixCommitParentSHA1": "c8043874022e66791dcca371ff504f246e4aa284", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java\nindex b6733bf..6d1cb44 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java\n@@ -255,7 +255,7 @@\n     private static class JavadocCatchCheck extends AbstractJavadocCheck {\n         private static int javadocsNumber;\n \n-        static void clearCounter() {\n+        public static void clearCounter() {\n             javadocsNumber = 0;\n         }\n \n@@ -329,7 +329,7 @@\n         private static int visitCount;\n         private static int leaveCount;\n \n-        static void clearCounter() {\n+        public static void clearCounter() {\n             visitCount = 0;\n             leaveCount = 0;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 332, "bugNodeStartChar": 13475, "bugNodeLength": 94, "fixLineNum": 332, "fixNodeStartChar": 13475, "fixNodeLength": 101, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "cb64a0e40b4729c9a30160d8b43bff36ad0db114", "fixCommitParentSHA1": "c8043874022e66791dcca371ff504f246e4aa284", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java\nindex de02292..c415f7b 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java\n@@ -104,12 +104,12 @@\n \n     private static class Bar extends AbstractInvalidClass {\n         @Override\n-        void method() {\n+        public void method() {\n         }\n     }\n \n     private abstract static class AbstractInvalidClass extends AutomaticBean {\n-        abstract void method();\n+        public abstract void method();\n     }\n \n     private static class CheckClass extends AbstractCheck {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 106, "bugNodeStartChar": 4324, "bugNodeLength": 43, "fixLineNum": 106, "fixNodeStartChar": 4324, "fixNodeLength": 50, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "cb64a0e40b4729c9a30160d8b43bff36ad0db114", "fixCommitParentSHA1": "c8043874022e66791dcca371ff504f246e4aa284", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java\nindex de02292..c415f7b 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java\n@@ -104,12 +104,12 @@\n \n     private static class Bar extends AbstractInvalidClass {\n         @Override\n-        void method() {\n+        public void method() {\n         }\n     }\n \n     private abstract static class AbstractInvalidClass extends AutomaticBean {\n-        abstract void method();\n+        public abstract void method();\n     }\n \n     private static class CheckClass extends AbstractCheck {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 112, "bugNodeStartChar": 4462, "bugNodeLength": 23, "fixLineNum": 112, "fixNodeStartChar": 4462, "fixNodeLength": 30, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1f49f932d6b5b470a4de2b48483dd5b3097be642", "fixCommitParentSHA1": "6777b8fc02172d8aef2f9ddc68e654caa0728e0d", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\nindex 2d546ba..7038372 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @InputIntMethodAnnotation(42)\n+    @InputMagicNumberIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @InputIntMethodAnnotation(value=43)\n+    @InputMagicNumberIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @InputIntMethodAnnotation(-44)\n+    @InputMagicNumberIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @InputIntMethodAnnotation(value=-45)\n+    @InputMagicNumberIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 185, "bugNodeStartChar": 4160, "bugNodeLength": 29, "fixLineNum": 185, "fixNodeStartChar": 4160, "fixNodeLength": 40, "sourceBeforeFix": "@InputIntMethodAnnotation(42)", "sourceAfterFix": "@InputMagicNumberIntMethodAnnotation(42)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1f49f932d6b5b470a4de2b48483dd5b3097be642", "fixCommitParentSHA1": "6777b8fc02172d8aef2f9ddc68e654caa0728e0d", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\nindex 2d546ba..7038372 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @InputIntMethodAnnotation(42)\n+    @InputMagicNumberIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @InputIntMethodAnnotation(value=43)\n+    @InputMagicNumberIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @InputIntMethodAnnotation(-44)\n+    @InputMagicNumberIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @InputIntMethodAnnotation(value=-45)\n+    @InputMagicNumberIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 189, "bugNodeStartChar": 4229, "bugNodeLength": 35, "fixLineNum": 189, "fixNodeStartChar": 4229, "fixNodeLength": 46, "sourceBeforeFix": "@InputIntMethodAnnotation(value=43)", "sourceAfterFix": "@InputMagicNumberIntMethodAnnotation(value=43)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1f49f932d6b5b470a4de2b48483dd5b3097be642", "fixCommitParentSHA1": "6777b8fc02172d8aef2f9ddc68e654caa0728e0d", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\nindex 2d546ba..7038372 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @InputIntMethodAnnotation(42)\n+    @InputMagicNumberIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @InputIntMethodAnnotation(value=43)\n+    @InputMagicNumberIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @InputIntMethodAnnotation(-44)\n+    @InputMagicNumberIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @InputIntMethodAnnotation(value=-45)\n+    @InputMagicNumberIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 193, "bugNodeStartChar": 4309, "bugNodeLength": 30, "fixLineNum": 193, "fixNodeStartChar": 4309, "fixNodeLength": 41, "sourceBeforeFix": "@InputIntMethodAnnotation(-44)", "sourceAfterFix": "@InputMagicNumberIntMethodAnnotation(-44)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1f49f932d6b5b470a4de2b48483dd5b3097be642", "fixCommitParentSHA1": "6777b8fc02172d8aef2f9ddc68e654caa0728e0d", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\nindex 2d546ba..7038372 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @InputIntMethodAnnotation(42)\n+    @InputMagicNumberIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @InputIntMethodAnnotation(value=43)\n+    @InputMagicNumberIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @InputIntMethodAnnotation(-44)\n+    @InputMagicNumberIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @InputIntMethodAnnotation(value=-45)\n+    @InputMagicNumberIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 197, "bugNodeStartChar": 4387, "bugNodeLength": 36, "fixLineNum": 197, "fixNodeStartChar": 4387, "fixNodeLength": 47, "sourceBeforeFix": "@InputIntMethodAnnotation(value=-45)", "sourceAfterFix": "@InputMagicNumberIntMethodAnnotation(value=-45)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java\nindex 19bb591..86a77ce 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java\n@@ -76,7 +76,7 @@\n     private String fileLocation;\n \n     /** The root package controller. */\n-    private PkgControl root;\n+    private ImportControl root;\n     /** The package doing the import. */\n     private String inPkg;\n \n@@ -84,7 +84,7 @@\n      * The package controller for the current file. Used for performance\n      * optimisation.\n      */\n-    private PkgControl currentLeaf;\n+    private ImportControl currentLeaf;\n \n     @Override\n     public int[] getDefaultTokens() {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 78, "bugNodeStartChar": 2925, "bugNodeLength": 64, "fixLineNum": 78, "fixNodeStartChar": 2925, "fixNodeLength": 67, "sourceBeforeFix": "/**   * The root package controller.   */ private PkgControl root; ", "sourceAfterFix": "/**   * The root package controller.   */ private ImportControl root; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java\nindex 19bb591..86a77ce 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java\n@@ -76,7 +76,7 @@\n     private String fileLocation;\n \n     /** The root package controller. */\n-    private PkgControl root;\n+    private ImportControl root;\n     /** The package doing the import. */\n     private String inPkg;\n \n@@ -84,7 +84,7 @@\n      * The package controller for the current file. Used for performance\n      * optimisation.\n      */\n-    private PkgControl currentLeaf;\n+    private ImportControl currentLeaf;\n \n     @Override\n     public int[] getDefaultTokens() {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 83, "bugNodeStartChar": 3062, "bugNodeLength": 141, "fixLineNum": 83, "fixNodeStartChar": 3062, "fixNodeLength": 144, "sourceBeforeFix": "/**   * The package controller for the current file. Used for performance optimisation.  */ private PkgControl currentLeaf; ", "sourceAfterFix": "/**   * The package controller for the current file. Used for performance optimisation.  */ private ImportControl currentLeaf; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 6cbd4ac..c3fea74 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -70,8 +70,8 @@\n     /** Qualified name for element 'allow'. */\n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n \n-    /** Used to hold the {@link PkgControl} objects. */\n-    private final Deque<PkgControl> stack = new ArrayDeque<>();\n+    /** Used to hold the {@link ImportControl} objects. */\n+    private final Deque<ImportControl> stack = new ArrayDeque<>();\n \n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);\n@@ -97,12 +97,12 @@\n         if (\"import-control\".equals(qName)) {\n             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name = safeGet(attributes, \"name\");\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n@@ -148,10 +148,10 @@\n     /**\n      * Loads the import control file from a file.\n      * @param uri the uri of the file to load.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    public static PkgControl load(final URI uri) throws CheckstyleException {\n+    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n@@ -170,10 +170,10 @@\n      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    private static PkgControl load(final InputSource source,\n+    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();\n@@ -190,9 +190,9 @@\n     }\n \n     /**\n-     * @return the root {@link PkgControl} object loaded.\n+     * @return the root {@link ImportControl} object loaded.\n      */\n-    private PkgControl getRoot() {\n+    private ImportControl getRoot() {\n         return stack.peek();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 73, "bugNodeStartChar": 2950, "bugNodeLength": 18, "fixLineNum": 73, "fixNodeStartChar": 2950, "fixNodeLength": 21, "sourceBeforeFix": "{@link PkgControl}", "sourceAfterFix": "{@link ImportControl}"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 6cbd4ac..c3fea74 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -70,8 +70,8 @@\n     /** Qualified name for element 'allow'. */\n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n \n-    /** Used to hold the {@link PkgControl} objects. */\n-    private final Deque<PkgControl> stack = new ArrayDeque<>();\n+    /** Used to hold the {@link ImportControl} objects. */\n+    private final Deque<ImportControl> stack = new ArrayDeque<>();\n \n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);\n@@ -97,12 +97,12 @@\n         if (\"import-control\".equals(qName)) {\n             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name = safeGet(attributes, \"name\");\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n@@ -148,10 +148,10 @@\n     /**\n      * Loads the import control file from a file.\n      * @param uri the uri of the file to load.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    public static PkgControl load(final URI uri) throws CheckstyleException {\n+    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n@@ -170,10 +170,10 @@\n      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    private static PkgControl load(final InputSource source,\n+    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();\n@@ -190,9 +190,9 @@\n     }\n \n     /**\n-     * @return the root {@link PkgControl} object loaded.\n+     * @return the root {@link ImportControl} object loaded.\n      */\n-    private PkgControl getRoot() {\n+    private ImportControl getRoot() {\n         return stack.peek();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 100, "bugNodeStartChar": 3988, "bugNodeLength": 26, "fixLineNum": 100, "fixNodeStartChar": 3988, "fixNodeLength": 29, "sourceBeforeFix": "new PkgControl(pkg,regex)", "sourceAfterFix": "new ImportControl(pkg,regex)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 6cbd4ac..c3fea74 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -70,8 +70,8 @@\n     /** Qualified name for element 'allow'. */\n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n \n-    /** Used to hold the {@link PkgControl} objects. */\n-    private final Deque<PkgControl> stack = new ArrayDeque<>();\n+    /** Used to hold the {@link ImportControl} objects. */\n+    private final Deque<ImportControl> stack = new ArrayDeque<>();\n \n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);\n@@ -97,12 +97,12 @@\n         if (\"import-control\".equals(qName)) {\n             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name = safeGet(attributes, \"name\");\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n@@ -148,10 +148,10 @@\n     /**\n      * Loads the import control file from a file.\n      * @param uri the uri of the file to load.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    public static PkgControl load(final URI uri) throws CheckstyleException {\n+    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n@@ -170,10 +170,10 @@\n      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    private static PkgControl load(final InputSource source,\n+    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();\n@@ -190,9 +190,9 @@\n     }\n \n     /**\n-     * @return the root {@link PkgControl} object loaded.\n+     * @return the root {@link ImportControl} object loaded.\n      */\n-    private PkgControl getRoot() {\n+    private ImportControl getRoot() {\n         return stack.peek();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 105, "bugNodeStartChar": 4239, "bugNodeLength": 41, "fixLineNum": 105, "fixNodeStartChar": 4239, "fixNodeLength": 44, "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 6cbd4ac..c3fea74 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -70,8 +70,8 @@\n     /** Qualified name for element 'allow'. */\n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n \n-    /** Used to hold the {@link PkgControl} objects. */\n-    private final Deque<PkgControl> stack = new ArrayDeque<>();\n+    /** Used to hold the {@link ImportControl} objects. */\n+    private final Deque<ImportControl> stack = new ArrayDeque<>();\n \n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);\n@@ -97,12 +97,12 @@\n         if (\"import-control\".equals(qName)) {\n             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name = safeGet(attributes, \"name\");\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n@@ -148,10 +148,10 @@\n     /**\n      * Loads the import control file from a file.\n      * @param uri the uri of the file to load.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    public static PkgControl load(final URI uri) throws CheckstyleException {\n+    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n@@ -170,10 +170,10 @@\n      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    private static PkgControl load(final InputSource source,\n+    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();\n@@ -190,9 +190,9 @@\n     }\n \n     /**\n-     * @return the root {@link PkgControl} object loaded.\n+     * @return the root {@link ImportControl} object loaded.\n      */\n-    private PkgControl getRoot() {\n+    private ImportControl getRoot() {\n         return stack.peek();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 148, "bugNodeStartChar": 5998, "bugNodeLength": 769, "fixLineNum": 148, "fixNodeStartChar": 5998, "fixNodeLength": 772, "sourceBeforeFix": "/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static PkgControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException(\"syntax error in url \" + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException(\"unable to find \" + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } ", "sourceAfterFix": "/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static ImportControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException(\"syntax error in url \" + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException(\"unable to find \" + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 6cbd4ac..c3fea74 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -70,8 +70,8 @@\n     /** Qualified name for element 'allow'. */\n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n \n-    /** Used to hold the {@link PkgControl} objects. */\n-    private final Deque<PkgControl> stack = new ArrayDeque<>();\n+    /** Used to hold the {@link ImportControl} objects. */\n+    private final Deque<ImportControl> stack = new ArrayDeque<>();\n \n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);\n@@ -97,12 +97,12 @@\n         if (\"import-control\".equals(qName)) {\n             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name = safeGet(attributes, \"name\");\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n@@ -148,10 +148,10 @@\n     /**\n      * Loads the import control file from a file.\n      * @param uri the uri of the file to load.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    public static PkgControl load(final URI uri) throws CheckstyleException {\n+    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n@@ -170,10 +170,10 @@\n      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    private static PkgControl load(final InputSource source,\n+    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();\n@@ -190,9 +190,9 @@\n     }\n \n     /**\n-     * @return the root {@link PkgControl} object loaded.\n+     * @return the root {@link ImportControl} object loaded.\n      */\n-    private PkgControl getRoot() {\n+    private ImportControl getRoot() {\n         return stack.peek();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 169, "bugNodeStartChar": 6773, "bugNodeLength": 898, "fixLineNum": 169, "fixNodeStartChar": 6773, "fixNodeLength": 901, "sourceBeforeFix": "/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static PkgControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException(\"unable to parse \" + uri + \" - \"+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException(\"unable to read \" + uri,ex);   } } ", "sourceAfterFix": "/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static ImportControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException(\"unable to parse \" + uri + \" - \"+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException(\"unable to read \" + uri,ex);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 6cbd4ac..c3fea74 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -70,8 +70,8 @@\n     /** Qualified name for element 'allow'. */\n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n \n-    /** Used to hold the {@link PkgControl} objects. */\n-    private final Deque<PkgControl> stack = new ArrayDeque<>();\n+    /** Used to hold the {@link ImportControl} objects. */\n+    private final Deque<ImportControl> stack = new ArrayDeque<>();\n \n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);\n@@ -97,12 +97,12 @@\n         if (\"import-control\".equals(qName)) {\n             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name = safeGet(attributes, \"name\");\n             final boolean regex = containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n@@ -148,10 +148,10 @@\n     /**\n      * Loads the import control file from a file.\n      * @param uri the uri of the file to load.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    public static PkgControl load(final URI uri) throws CheckstyleException {\n+    public static ImportControl load(final URI uri) throws CheckstyleException {\n         final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n@@ -170,10 +170,10 @@\n      * Loads the import control file from a {@link InputSource}.\n      * @param source the source to load from.\n      * @param uri uri of the source being loaded.\n-     * @return the root {@link PkgControl} object.\n+     * @return the root {@link ImportControl} object.\n      * @throws CheckstyleException if an error occurs.\n      */\n-    private static PkgControl load(final InputSource source,\n+    private static ImportControl load(final InputSource source,\n         final URI uri) throws CheckstyleException {\n         try {\n             final ImportControlLoader loader = new ImportControlLoader();\n@@ -190,9 +190,9 @@\n     }\n \n     /**\n-     * @return the root {@link PkgControl} object loaded.\n+     * @return the root {@link ImportControl} object loaded.\n      */\n-    private PkgControl getRoot() {\n+    private ImportControl getRoot() {\n         return stack.peek();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 192, "bugNodeStartChar": 7677, "bugNodeLength": 139, "fixLineNum": 192, "fixNodeStartChar": 7677, "fixNodeLength": 142, "sourceBeforeFix": "/**   * @return the root {@link PkgControl} object loaded.  */ private PkgControl getRoot(){   return stack.peek(); } ", "sourceAfterFix": "/**   * @return the root {@link PkgControl} object loaded.  */ private ImportControl getRoot(){   return stack.peek(); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\nindex 1c35e12..cd108a1 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\n@@ -40,14 +40,14 @@\n \n     @Test\n     public void testLoad() throws CheckstyleException {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(new File(getPath(\"import-control_complete.xml\")).toURI());\n         assertNotNull(root);\n     }\n \n     @Test(expected = CheckstyleException.class)\n     public void testWrongFormatUri() throws Exception {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(new URI(\"aaa://\"\n                     + getPath(\"import-control_complete.xml\")));\n         assertNotNull(root);\n@@ -55,7 +55,7 @@\n \n     @Test\n     public void testExtraElementInConfig() throws Exception {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(\n                     new File(getPath(\"import-control_WithNewElement.xml\")).toURI());\n         assertNotNull(root);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 43, "bugNodeStartChar": 1729, "bugNodeLength": 123, "fixLineNum": 43, "fixNodeStartChar": 1729, "fixNodeLength": 126, "sourceBeforeFix": "final PkgControl root=ImportControlLoader.load(new File(getPath(\"import-control_complete.xml\")).toURI()); ", "sourceAfterFix": "final ImportControl root=ImportControlLoader.load(new File(getPath(\"import-control_complete.xml\")).toURI()); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\nindex 1c35e12..cd108a1 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\n@@ -40,14 +40,14 @@\n \n     @Test\n     public void testLoad() throws CheckstyleException {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(new File(getPath(\"import-control_complete.xml\")).toURI());\n         assertNotNull(root);\n     }\n \n     @Test(expected = CheckstyleException.class)\n     public void testWrongFormatUri() throws Exception {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(new URI(\"aaa://\"\n                     + getPath(\"import-control_complete.xml\")));\n         assertNotNull(root);\n@@ -55,7 +55,7 @@\n \n     @Test\n     public void testExtraElementInConfig() throws Exception {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(\n                     new File(getPath(\"import-control_WithNewElement.xml\")).toURI());\n         assertNotNull(root);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 50, "bugNodeStartChar": 2001, "bugNodeLength": 145, "fixLineNum": 50, "fixNodeStartChar": 2001, "fixNodeLength": 148, "sourceBeforeFix": "final PkgControl root=ImportControlLoader.load(new URI(\"aaa://\" + getPath(\"import-control_complete.xml\"))); ", "sourceAfterFix": "final ImportControl root=ImportControlLoader.load(new URI(\"aaa://\" + getPath(\"import-control_complete.xml\"))); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "fixCommitParentSHA1": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\nindex 1c35e12..cd108a1 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java\n@@ -40,14 +40,14 @@\n \n     @Test\n     public void testLoad() throws CheckstyleException {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(new File(getPath(\"import-control_complete.xml\")).toURI());\n         assertNotNull(root);\n     }\n \n     @Test(expected = CheckstyleException.class)\n     public void testWrongFormatUri() throws Exception {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(new URI(\"aaa://\"\n                     + getPath(\"import-control_complete.xml\")));\n         assertNotNull(root);\n@@ -55,7 +55,7 @@\n \n     @Test\n     public void testExtraElementInConfig() throws Exception {\n-        final PkgControl root =\n+        final ImportControl root =\n                 ImportControlLoader.load(\n                     new File(getPath(\"import-control_WithNewElement.xml\")).toURI());\n         assertNotNull(root);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 58, "bugNodeStartChar": 2263, "bugNodeLength": 150, "fixLineNum": 58, "fixNodeStartChar": 2263, "fixNodeLength": 153, "sourceBeforeFix": "final PkgControl root=ImportControlLoader.load(new File(getPath(\"import-control_WithNewElement.xml\")).toURI()); ", "sourceAfterFix": "final ImportControl root=ImportControlLoader.load(new File(getPath(\"import-control_WithNewElement.xml\")).toURI()); "}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "03fc9fb82c11eefd0508dab08dc8ebd1511dadd8", "fixCommitParentSHA1": "dc47a404ee52c4f39fb308945e4b612450c34dce", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\nindex 67f89b8..c3b3ebf 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\n@@ -100,7 +100,7 @@\n                 + filename).getCanonicalPath();\n     }\n \n-    protected void verifyAst(String expectedTextPrintFileName, String actualJavaFileName)\n+    protected static void verifyAst(String expectedTextPrintFileName, String actualJavaFileName)\n             throws Exception {\n         verifyAst(expectedTextPrintFileName, actualJavaFileName, false);\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 103, "bugNodeStartChar": 4251, "bugNodeLength": 195, "fixLineNum": 103, "fixNodeStartChar": 4251, "fixNodeLength": 202, "sourceBeforeFix": "4", "sourceAfterFix": "12"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "fixCommitParentSHA1": "5ac926b4cfaaa7af83b3595b05da236713a05d68", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\nindex 8f9ef7c..a89bb16 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\n@@ -61,7 +61,7 @@\n         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n \n     @Test\n@@ -120,7 +120,7 @@\n         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n \n     @Test\n@@ -272,6 +272,6 @@\n         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 64, "bugNodeStartChar": 2540, "bugNodeLength": 21, "fixLineNum": 64, "fixNodeStartChar": 2540, "fixNodeLength": 21, "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "fixCommitParentSHA1": "5ac926b4cfaaa7af83b3595b05da236713a05d68", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\nindex 8f9ef7c..a89bb16 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\n@@ -61,7 +61,7 @@\n         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n \n     @Test\n@@ -120,7 +120,7 @@\n         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n \n     @Test\n@@ -272,6 +272,6 @@\n         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 123, "bugNodeStartChar": 4754, "bugNodeLength": 21, "fixLineNum": 123, "fixNodeStartChar": 4754, "fixNodeLength": 21, "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "fixCommitParentSHA1": "5ac926b4cfaaa7af83b3595b05da236713a05d68", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\nindex 8f9ef7c..a89bb16 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java\n@@ -61,7 +61,7 @@\n         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n \n     @Test\n@@ -120,7 +120,7 @@\n         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n \n     @Test\n@@ -272,6 +272,6 @@\n         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n-        assertEquals(fc, fc2);\n+        assertEquals(fc2, fc);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 275, "bugNodeStartChar": 9949, "bugNodeLength": 21, "fixLineNum": 275, "fixNodeStartChar": 9949, "fixNodeLength": 21, "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "4b4fdda9bddbe6f352ebbe2d3b08c8fd3b0ed88b", "fixCommitParentSHA1": "6bba78fd4c1ff95667f79dfb672d226dfe1d6352", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\nindex c6cb9d9..bd754a6 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n@@ -80,7 +80,7 @@\n             \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\",\n             \"li\", \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n             \"style\", \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\",\n-            \"thead\", \"tr\", \"tt\", \"u\", \"ul\");\n+            \"thead\", \"tr\", \"tt\", \"u\", \"ul\", \"var\");\n \n     /** The scope to check. */\n     private Scope scope = Scope.PRIVATE;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 76, "bugNodeStartChar": 3221, "bugNodeLength": 518, "fixLineNum": 76, "fixNodeStartChar": 3221, "fixNodeLength": 525, "sourceBeforeFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"font\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"u\",\"ul\")", "sourceAfterFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"font\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"u\",\"ul\",\"var\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "70f209a2202f1bf5a560c510615d598a4d4d4cc0", "fixCommitParentSHA1": "8ad9441bbb78695a924be63444222ae80cfcf114", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java\nindex 8e3ce44..a6faedd 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java\n@@ -23,7 +23,7 @@\n  * Represents a suppressor for matches.\n  * @author oliver\n  */\n-interface MatchSuppressor {\n+public interface MatchSuppressor {\n     /**\n      * Checks if the specified selection should be suppressed.\n      * @param startLineNo the starting line number\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 22, "bugNodeStartChar": 1089, "bugNodeLength": 539, "fixLineNum": 22, "fixNodeStartChar": 1089, "fixNodeLength": 546, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "70f209a2202f1bf5a560c510615d598a4d4d4cc0", "fixCommitParentSHA1": "8ad9441bbb78695a924be63444222ae80cfcf114", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java\nindex cb26e1a..e8e78cb 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java\n@@ -26,7 +26,7 @@\n  */\n public final class NeverSuppress implements MatchSuppressor {\n     /** The shared instance. */\n-    static final MatchSuppressor INSTANCE = new NeverSuppress();\n+    public static final MatchSuppressor INSTANCE = new NeverSuppress();\n \n     /** Stop creation of instances. */\n     private NeverSuppress() {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 28, "bugNodeStartChar": 1263, "bugNodeLength": 92, "fixLineNum": 28, "fixNodeStartChar": 1263, "fixNodeLength": 99, "sourceBeforeFix": "24", "sourceAfterFix": "25"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "452a1df819f34313bb7dd7316d0586db2f8db83b", "fixCommitParentSHA1": "701282f2dff4ab6b3cbaafa9035b299b5e907634", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java\nindex a9eaa63..42bc180 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java\n@@ -162,7 +162,7 @@\n             return;\n         }\n \n-        logError(lcurly, \"lcurly\", lcurlyPos);\n+        logError(lcurly, \"lcurly\", lcurlyPos, curlyIndent());\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 165, "bugNodeStartChar": 5505, "bugNodeLength": 37, "fixLineNum": 165, "fixNodeStartChar": 5505, "fixNodeLength": 52, "sourceBeforeFix": "logError(lcurly,\"lcurly\",lcurlyPos)", "sourceAfterFix": "logError(lcurly,\"lcurly\",lcurlyPos,curlyIndent())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "fixCommitParentSHA1": "dea6dab124d3db9508da7c86bc331a9516cbb6e9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java\nindex e373174..cfbebbb 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java\n@@ -60,7 +60,7 @@\n      *\n      * @return the list selection model\n      */\n-    final ListSelectionModel getListSelectionModel() {\n+    protected final ListSelectionModel getListSelectionModel() {\n         return listSelectionModel;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 56, "bugNodeStartChar": 2352, "bugNodeLength": 319, "fixLineNum": 56, "fixNodeStartChar": 2352, "fixNodeLength": 329, "sourceBeforeFix": "16", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "fixCommitParentSHA1": "dea6dab124d3db9508da7c86bc331a9516cbb6e9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java\nindex 812243a..87867a9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java\n@@ -53,7 +53,7 @@\n      * Sets parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n-    final void setParseTree(DetailAST parseTree) {\n+    protected final void setParseTree(DetailAST parseTree) {\n         pModel.setParseTree(parseTree);\n         final Object[] path = {pModel.getRoot()};\n         // no need to setup remaining info, as the call results in a\n@@ -146,7 +146,7 @@\n      * @param children An array of Object containing the inserted, removed, or changed objects.\n      * @see EventListenerList\n      */\n-    final void fireTreeStructureChanged(Object source, Object[] path,\n+    private void fireTreeStructureChanged(Object source, Object[] path,\n                                   int[] childIndices,\n                                   Object... children) {\n         // Guaranteed to return a non-null array\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 52, "bugNodeStartChar": 1912, "bugNodeLength": 435, "fixLineNum": 52, "fixNodeStartChar": 1912, "fixNodeLength": 445, "sourceBeforeFix": "16", "sourceAfterFix": "20"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "fixCommitParentSHA1": "dea6dab124d3db9508da7c86bc331a9516cbb6e9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java\nindex cc181c5..feb0910 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java\n@@ -64,7 +64,7 @@\n      * Set parse tree.\n      * @param parseTree DetailAST parse tree.\n      */\n-    final void setParseTree(DetailAST parseTree) {\n+    protected final void setParseTree(DetailAST parseTree) {\n         ((AST) root).setFirstChild(parseTree);\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 63, "bugNodeStartChar": 2189, "bugNodeLength": 184, "fixLineNum": 63, "fixNodeStartChar": 2189, "fixNodeLength": 194, "sourceBeforeFix": "16", "sourceAfterFix": "20"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "fixCommitParentSHA1": "07d477a7107ce6a50f98f3f6cc57d46c106a21f0", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\nindex 8c2d48c..470134d 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\n@@ -139,8 +139,7 @@\n     @Test\n     public void testGenericEndsTheLine() throws Exception {\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n-        verify(checkConfig, getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\"),\n-                expected);\n+        verify(checkConfig, getPath(\"InputGenericWhitespaceEndsTheLine.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 142, "bugNodeStartChar": 6220, "bugNodeLength": 62, "fixLineNum": 142, "fixNodeStartChar": 6220, "fixNodeLength": 49, "sourceBeforeFix": "getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\")", "sourceAfterFix": "getPath(\"InputGenericWhitespaceEndsTheLine.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "fixCommitParentSHA1": "07d477a7107ce6a50f98f3f6cc57d46c106a21f0", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\nindex 8c2d48c..470134d 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\n@@ -139,8 +139,7 @@\n     @Test\n     public void testGenericEndsTheLine() throws Exception {\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n-        verify(checkConfig, getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\"),\n-                expected);\n+        verify(checkConfig, getPath(\"InputGenericWhitespaceEndsTheLine.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 142, "bugNodeStartChar": 6220, "bugNodeLength": 62, "fixLineNum": 142, "fixNodeStartChar": 6220, "fixNodeLength": 49, "sourceBeforeFix": "getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\")", "sourceAfterFix": "getPath(\"InputGenericWhitespaceEndsTheLine.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "fixCommitParentSHA1": "07d477a7107ce6a50f98f3f6cc57d46c106a21f0", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\nindex ea875cd..d26c96a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n@@ -40,7 +40,7 @@\n public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n-        final String inputFilePath = getNonCompilablePath(\"InputDefaultConfig.java\");\n+        final String inputFilePath = getPath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n \n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 43, "bugNodeStartChar": 1884, "bugNodeLength": 47, "fixLineNum": 43, "fixNodeStartChar": 1884, "fixNodeLength": 34, "sourceBeforeFix": "getNonCompilablePath(\"InputDefaultConfig.java\")", "sourceAfterFix": "getPath(\"InputDefaultConfig.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "fixCommitParentSHA1": "07d477a7107ce6a50f98f3f6cc57d46c106a21f0", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\nindex ea875cd..d26c96a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n@@ -40,7 +40,7 @@\n public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n-        final String inputFilePath = getNonCompilablePath(\"InputDefaultConfig.java\");\n+        final String inputFilePath = getPath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n \n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 43, "bugNodeStartChar": 1884, "bugNodeLength": 47, "fixLineNum": 43, "fixNodeStartChar": 1884, "fixNodeLength": 34, "sourceBeforeFix": "getNonCompilablePath(\"InputDefaultConfig.java\")", "sourceAfterFix": "getPath(\"InputDefaultConfig.java\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b199c033b750d5483d317279aa56988aac88f25e", "fixCommitParentSHA1": "6c66229190b570b56ef1bdea47b1de1716a06029", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java\nindex eae298b..10c5f25 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java\n@@ -34,7 +34,7 @@\n  * </p>\n  * @author Oliver Burn\n  */\n-abstract class AbstractParenPadCheck\n+public abstract class AbstractParenPadCheck\n     extends Check {\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 30, "bugNodeStartChar": 1340, "bugNodeLength": 3460, "fixLineNum": 30, "fixNodeStartChar": 1340, "fixNodeLength": 3467, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b65660848ab1570826c71671ad207b0d4d4b73ed", "fixCommitParentSHA1": "d10b2c45ffc6c390bade5218b4d315a128485bcf", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java\nindex fc8e67e..a3115d1 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrame.java\n@@ -52,7 +52,7 @@\n \n     private static final long serialVersionUID = 7970053543351871890L;\n     /** Checkstyle frame model. */\n-    private final transient CheckstyleFrameModel model = new CheckstyleFrameModel();\n+    private final transient MainFrameModel model = new MainFrameModel();\n     /** Reload action. */\n     private final ReloadAction reloadAction = new ReloadAction();\n     /** Parse tree model. */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 54, "bugNodeStartChar": 1967, "bugNodeLength": 115, "fixLineNum": 54, "fixNodeStartChar": 1967, "fixNodeLength": 103, "sourceBeforeFix": "/**   * Checkstyle frame model.   */ private final transient CheckstyleFrameModel model=new CheckstyleFrameModel(); ", "sourceAfterFix": "/**   * Checkstyle frame model.   */ private final transient MainFrameModel model=new MainFrameModel(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java b/src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java\nindex 2ef20b1..7c166d2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java\n@@ -29,7 +29,7 @@\n  * Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]\n  * @author Andrei Selkin\n  */\n-public class AuditEventDefaultFormatter implements AuditEvemtFormatter {\n+public class AuditEventDefaultFormatter implements AuditEventFormatter {\n \n     /** Length of all separators. */\n     private static final int LENGTH_OF_ALL_SEPARATORS = 10;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 27, "bugNodeStartChar": 1215, "bugNodeLength": 3427, "fixLineNum": 27, "fixNodeStartChar": 1215, "fixNodeLength": 3427, "sourceBeforeFix": "/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX=\"Check\";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName=\"WARN\";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append(\"] \").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(\": \").append(message);     final String checkShortName=getCheckShortName(event);     sb.append(\" [\").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } ", "sourceAfterFix": "/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX=\"Check\";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName=\"WARN\";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append(\"] \").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(\": \").append(message);     final String checkShortName=getCheckShortName(event);     sb.append(\" [\").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\nindex 8c3fbc4..70b5065 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n@@ -53,7 +53,7 @@\n     private final boolean closeError;\n \n     /** Formatter for the log message. */\n-    private final AuditEvemtFormatter formatter;\n+    private final AuditEventFormatter formatter;\n \n     /**\n      * Creates a new {@code DefaultLogger} instance.\n@@ -93,7 +93,7 @@\n                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n-                         AuditEvemtFormatter messageFormatter) {\n+                         AuditEventFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 55, "bugNodeStartChar": 2271, "bugNodeLength": 86, "fixLineNum": 55, "fixNodeStartChar": 2271, "fixNodeLength": 86, "sourceBeforeFix": "/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; ", "sourceAfterFix": "/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\nindex 8c3fbc4..70b5065 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n@@ -53,7 +53,7 @@\n     private final boolean closeError;\n \n     /** Formatter for the log message. */\n-    private final AuditEvemtFormatter formatter;\n+    private final AuditEventFormatter formatter;\n \n     /**\n      * Creates a new {@code DefaultLogger} instance.\n@@ -93,7 +93,7 @@\n                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n-                         AuditEvemtFormatter messageFormatter) {\n+                         AuditEventFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 96, "bugNodeStartChar": 4106, "bugNodeLength": 36, "fixLineNum": 96, "fixNodeStartChar": 4106, "fixNodeLength": 36, "sourceBeforeFix": "AuditEvemtFormatter messageFormatter", "sourceAfterFix": "AuditEventFormatter messageFormatter"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\nindex e22c977..e29f811 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n@@ -44,7 +44,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -60,7 +60,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -76,7 +76,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -92,7 +92,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 47, "bugNodeStartChar": 2148, "bugNodeLength": 71, "fixLineNum": 47, "fixNodeStartChar": 2148, "fixNodeLength": 71, "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\nindex e22c977..e29f811 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n@@ -44,7 +44,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -60,7 +60,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -76,7 +76,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -92,7 +92,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 63, "bugNodeStartChar": 2918, "bugNodeLength": 71, "fixLineNum": 63, "fixNodeStartChar": 2918, "fixNodeLength": 71, "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\nindex e22c977..e29f811 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n@@ -44,7 +44,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -60,7 +60,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -76,7 +76,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -92,7 +92,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 79, "bugNodeStartChar": 3656, "bugNodeLength": 71, "fixLineNum": 79, "fixNodeStartChar": 3656, "fixNodeLength": 71, "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\nindex e22c977..e29f811 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java\n@@ -44,7 +44,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -60,7 +60,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -76,7 +76,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n@@ -92,7 +92,7 @@\n         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n-        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n+        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n \n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 95, "bugNodeStartChar": 4395, "bugNodeLength": 71, "fixLineNum": 95, "fixNodeStartChar": 4395, "fixNodeLength": 71, "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/AuditEventUtFormatter.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventUtFormatter.java b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventUtFormatter.java\nindex a10a526..0219be9 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventUtFormatter.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventUtFormatter.java\n@@ -26,7 +26,7 @@\n  * Message format is: filePath:lineNo:columnNo: message.\n  * @author Andrei Selkin\n  */\n-public class AuditEventUtFormatter implements AuditEvemtFormatter {\n+public class AuditEventUtFormatter implements AuditEventFormatter {\n \n     /** Length of all separators. */\n     private static final int LENGTH_OF_ALL_SEPARATORS = 4;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 24, "bugNodeStartChar": 1131, "bugNodeLength": 963, "fixLineNum": 24, "fixNodeStartChar": 1131, "fixNodeLength": 963, "sourceBeforeFix": "/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(\": \").append(message);     return sb.toString();   } } ", "sourceAfterFix": "/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(\": \").append(message);     return sb.toString();   } } "}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8d5807a3dcbeb32b2289c7adea8ddd011588253f", "fixCommitParentSHA1": "f489ea2790058fd54ffae63ff8ed6227df22efd8", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java\nindex 523b1a2..47f4ae1 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java\n@@ -222,7 +222,7 @@\n      * @param children An array of Object containing the inserted, removed, or changed objects.\n      * @see EventListenerList\n      */\n-    void fireTreeStructureChanged(Object source, Object[] path,\n+    final void fireTreeStructureChanged(Object source, Object[] path,\n                                   int[] childIndices,\n                                   Object... children) {\n         // Guaranteed to return a non-null array\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 214, "bugNodeStartChar": 6354, "bugNodeLength": 1482, "fixLineNum": 214, "fixNodeStartChar": 6354, "fixNodeLength": 1488, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ef123bf60e8f4ba348f2e6399175dee62f016b2", "fixCommitParentSHA1": "e54822d5130bc6adf2fd3372daf5dfe7a80b515d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java\nindex fa2cf38..93082d7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java\n@@ -303,7 +303,7 @@\n      * @param ast the variable ast.\n      * @return true, if the variable should be removed.\n      */\n-    private boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {\n+    private static boolean shouldRemoveVariable(ScopeData scopeData, DetailAST ast) {\n         boolean shouldRemove = true;\n         for (DetailAST variable : scopeData.uninitializedVariables) {\n             if (variable.getText().equals(ast.getText())) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 299, "bugNodeStartChar": 9829, "bugNodeLength": 994, "fixLineNum": 299, "fixNodeStartChar": 9829, "fixNodeLength": 1001, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "22779281e6cd251dedda23c69b83b6509701ca31", "fixCommitParentSHA1": "89cee419943977af6e70264a10c669a4c29bf830", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java\nindex b87d296..36c7bb8 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java\n@@ -94,7 +94,7 @@\n             }\n \n             TokenUtils.getTokenName(id);\n-            fail();\n+            fail(\"IllegalArgumentException is expected\");\n         }\n         catch (IllegalArgumentException expected) {\n             // restoring original value, to let other tests pass\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 97, "bugNodeStartChar": 3838, "bugNodeLength": 6, "fixLineNum": 97, "fixNodeStartChar": 3838, "fixNodeLength": 44, "sourceBeforeFix": "fail()", "sourceAfterFix": "fail(\"IllegalArgumentException is expected\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0d843780fc3dbe96fa513166a18a192d969dc232", "fixCommitParentSHA1": "eae75a529f1c6c10f10e0806fd2a274bb630c9e3", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\nindex 5ef6007..a941a17 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\n@@ -36,7 +36,7 @@\n  * @author Rick Giles\n  * @author lkuehne\n  */\n-class PackageObjectFactory implements ModuleFactory {\n+public class PackageObjectFactory implements ModuleFactory {\n     /** Logger for PackageObjectFactory. */\n     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);\n \n@@ -59,7 +59,7 @@\n      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n-    PackageObjectFactory(Set<String> packageNames,\n+    public PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 34, "bugNodeStartChar": 1481, "bugNodeLength": 5756, "fixLineNum": 34, "fixNodeStartChar": 1481, "fixNodeLength": 5763, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0d843780fc3dbe96fa513166a18a192d969dc232", "fixCommitParentSHA1": "eae75a529f1c6c10f10e0806fd2a274bb630c9e3", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\nindex 5ef6007..a941a17 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\n@@ -36,7 +36,7 @@\n  * @author Rick Giles\n  * @author lkuehne\n  */\n-class PackageObjectFactory implements ModuleFactory {\n+public class PackageObjectFactory implements ModuleFactory {\n     /** Logger for PackageObjectFactory. */\n     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);\n \n@@ -59,7 +59,7 @@\n      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n-    PackageObjectFactory(Set<String> packageNames,\n+    public PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 56, "bugNodeStartChar": 2373, "bugNodeLength": 671, "fixLineNum": 56, "fixNodeStartChar": 2373, "fixNodeLength": 678, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "fixCommitParentSHA1": "3a55941f33dcd9111d6b61b0505217f47973a39d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\nindex 7c6cd90..b288cff 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n@@ -57,16 +57,16 @@\n     private String moduleId;\n \n     /** Line number filter. */\n-    private CSVFilter lineFilter;\n+    private CsvFilter lineFilter;\n \n     /** CSV for line number filter. */\n-    private String linesCSV;\n+    private String linesCsv;\n \n     /** Column number filter. */\n-    private CSVFilter columnFilter;\n+    private CsvFilter columnFilter;\n \n     /** CSV for column number filter. */\n-    private String columnsCSV;\n+    private String columnsCsv;\n \n     /**\n      * Constructs a {@code SuppressElement} for a\n@@ -102,12 +102,12 @@\n      * @param lines CSV values and ranges for line number filtering.\n      */\n     public void setLines(String lines) {\n-        linesCSV = lines;\n+        linesCsv = lines;\n         if (lines == null) {\n             lineFilter = null;\n         }\n         else {\n-            lineFilter = new CSVFilter(lines);\n+            lineFilter = new CsvFilter(lines);\n         }\n     }\n \n@@ -117,12 +117,12 @@\n      * @param columns CSV values and ranges for column number filtering.\n      */\n     public void setColumns(String columns) {\n-        columnsCSV = columns;\n+        columnsCsv = columns;\n         if (columns == null) {\n             columnFilter = null;\n         }\n         else {\n-            columnFilter = new CSVFilter(columns);\n+            columnFilter = new CsvFilter(columns);\n         }\n     }\n \n@@ -154,7 +154,7 @@\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);\n+        return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);\n     }\n \n     @Override\n@@ -169,7 +169,7 @@\n         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n-                && Objects.equals(linesCSV, suppressElement.linesCSV)\n-                && Objects.equals(columnsCSV, suppressElement.columnsCSV);\n+                && Objects.equals(linesCsv, suppressElement.linesCsv)\n+                && Objects.equals(columnsCsv, suppressElement.columnsCsv);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 59, "bugNodeStartChar": 2236, "bugNodeLength": 60, "fixLineNum": 59, "fixNodeStartChar": 2236, "fixNodeLength": 60, "sourceBeforeFix": "/**   * Line number filter.   */ private CSVFilter lineFilter; ", "sourceAfterFix": "/**   * Line number filter.   */ private CsvFilter lineFilter; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "fixCommitParentSHA1": "3a55941f33dcd9111d6b61b0505217f47973a39d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\nindex 7c6cd90..b288cff 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n@@ -57,16 +57,16 @@\n     private String moduleId;\n \n     /** Line number filter. */\n-    private CSVFilter lineFilter;\n+    private CsvFilter lineFilter;\n \n     /** CSV for line number filter. */\n-    private String linesCSV;\n+    private String linesCsv;\n \n     /** Column number filter. */\n-    private CSVFilter columnFilter;\n+    private CsvFilter columnFilter;\n \n     /** CSV for column number filter. */\n-    private String columnsCSV;\n+    private String columnsCsv;\n \n     /**\n      * Constructs a {@code SuppressElement} for a\n@@ -102,12 +102,12 @@\n      * @param lines CSV values and ranges for line number filtering.\n      */\n     public void setLines(String lines) {\n-        linesCSV = lines;\n+        linesCsv = lines;\n         if (lines == null) {\n             lineFilter = null;\n         }\n         else {\n-            lineFilter = new CSVFilter(lines);\n+            lineFilter = new CsvFilter(lines);\n         }\n     }\n \n@@ -117,12 +117,12 @@\n      * @param columns CSV values and ranges for column number filtering.\n      */\n     public void setColumns(String columns) {\n-        columnsCSV = columns;\n+        columnsCsv = columns;\n         if (columns == null) {\n             columnFilter = null;\n         }\n         else {\n-            columnFilter = new CSVFilter(columns);\n+            columnFilter = new CsvFilter(columns);\n         }\n     }\n \n@@ -154,7 +154,7 @@\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);\n+        return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);\n     }\n \n     @Override\n@@ -169,7 +169,7 @@\n         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n-                && Objects.equals(linesCSV, suppressElement.linesCSV)\n-                && Objects.equals(columnsCSV, suppressElement.columnsCSV);\n+                && Objects.equals(linesCsv, suppressElement.linesCsv)\n+                && Objects.equals(columnsCsv, suppressElement.columnsCsv);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 65, "bugNodeStartChar": 2371, "bugNodeLength": 64, "fixLineNum": 65, "fixNodeStartChar": 2371, "fixNodeLength": 64, "sourceBeforeFix": "/**   * Column number filter.   */ private CSVFilter columnFilter; ", "sourceAfterFix": "/**   * Column number filter.   */ private CsvFilter columnFilter; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "fixCommitParentSHA1": "3a55941f33dcd9111d6b61b0505217f47973a39d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\nindex 7c6cd90..b288cff 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n@@ -57,16 +57,16 @@\n     private String moduleId;\n \n     /** Line number filter. */\n-    private CSVFilter lineFilter;\n+    private CsvFilter lineFilter;\n \n     /** CSV for line number filter. */\n-    private String linesCSV;\n+    private String linesCsv;\n \n     /** Column number filter. */\n-    private CSVFilter columnFilter;\n+    private CsvFilter columnFilter;\n \n     /** CSV for column number filter. */\n-    private String columnsCSV;\n+    private String columnsCsv;\n \n     /**\n      * Constructs a {@code SuppressElement} for a\n@@ -102,12 +102,12 @@\n      * @param lines CSV values and ranges for line number filtering.\n      */\n     public void setLines(String lines) {\n-        linesCSV = lines;\n+        linesCsv = lines;\n         if (lines == null) {\n             lineFilter = null;\n         }\n         else {\n-            lineFilter = new CSVFilter(lines);\n+            lineFilter = new CsvFilter(lines);\n         }\n     }\n \n@@ -117,12 +117,12 @@\n      * @param columns CSV values and ranges for column number filtering.\n      */\n     public void setColumns(String columns) {\n-        columnsCSV = columns;\n+        columnsCsv = columns;\n         if (columns == null) {\n             columnFilter = null;\n         }\n         else {\n-            columnFilter = new CSVFilter(columns);\n+            columnFilter = new CsvFilter(columns);\n         }\n     }\n \n@@ -154,7 +154,7 @@\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);\n+        return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);\n     }\n \n     @Override\n@@ -169,7 +169,7 @@\n         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n-                && Objects.equals(linesCSV, suppressElement.linesCSV)\n-                && Objects.equals(columnsCSV, suppressElement.columnsCSV);\n+                && Objects.equals(linesCsv, suppressElement.linesCsv)\n+                && Objects.equals(columnsCsv, suppressElement.columnsCsv);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 110, "bugNodeStartChar": 3716, "bugNodeLength": 20, "fixLineNum": 110, "fixNodeStartChar": 3716, "fixNodeLength": 20, "sourceBeforeFix": "new CSVFilter(lines)", "sourceAfterFix": "new CsvFilter(lines)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "fixCommitParentSHA1": "3a55941f33dcd9111d6b61b0505217f47973a39d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\nindex 7c6cd90..b288cff 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java\n@@ -57,16 +57,16 @@\n     private String moduleId;\n \n     /** Line number filter. */\n-    private CSVFilter lineFilter;\n+    private CsvFilter lineFilter;\n \n     /** CSV for line number filter. */\n-    private String linesCSV;\n+    private String linesCsv;\n \n     /** Column number filter. */\n-    private CSVFilter columnFilter;\n+    private CsvFilter columnFilter;\n \n     /** CSV for column number filter. */\n-    private String columnsCSV;\n+    private String columnsCsv;\n \n     /**\n      * Constructs a {@code SuppressElement} for a\n@@ -102,12 +102,12 @@\n      * @param lines CSV values and ranges for line number filtering.\n      */\n     public void setLines(String lines) {\n-        linesCSV = lines;\n+        linesCsv = lines;\n         if (lines == null) {\n             lineFilter = null;\n         }\n         else {\n-            lineFilter = new CSVFilter(lines);\n+            lineFilter = new CsvFilter(lines);\n         }\n     }\n \n@@ -117,12 +117,12 @@\n      * @param columns CSV values and ranges for column number filtering.\n      */\n     public void setColumns(String columns) {\n-        columnsCSV = columns;\n+        columnsCsv = columns;\n         if (columns == null) {\n             columnFilter = null;\n         }\n         else {\n-            columnFilter = new CSVFilter(columns);\n+            columnFilter = new CsvFilter(columns);\n         }\n     }\n \n@@ -154,7 +154,7 @@\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);\n+        return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);\n     }\n \n     @Override\n@@ -169,7 +169,7 @@\n         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n-                && Objects.equals(linesCSV, suppressElement.linesCSV)\n-                && Objects.equals(columnsCSV, suppressElement.columnsCSV);\n+                && Objects.equals(linesCsv, suppressElement.linesCsv)\n+                && Objects.equals(columnsCsv, suppressElement.columnsCsv);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 125, "bugNodeStartChar": 4128, "bugNodeLength": 22, "fixLineNum": 125, "fixNodeStartChar": 4128, "fixNodeLength": 22, "sourceBeforeFix": "new CSVFilter(columns)", "sourceAfterFix": "new CsvFilter(columns)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "fixCommitParentSHA1": "3a55941f33dcd9111d6b61b0505217f47973a39d", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java\nindex 07c40e6..afebf11 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java\n@@ -32,11 +32,11 @@\n \n /** Tests SuppressElementFilter. */\n public class FilterSetTest {\n-    private CSVFilter filter;\n+    private CsvFilter filter;\n \n     @Before\n     public void setUp() {\n-        filter = new CSVFilter(\"\");\n+        filter = new CsvFilter(\"\");\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 35, "bugNodeStartChar": 1481, "bugNodeLength": 25, "fixLineNum": 35, "fixNodeStartChar": 1481, "fixNodeLength": 25, "sourceBeforeFix": "private CSVFilter filter; ", "sourceAfterFix": "private CsvFilter filter; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "fixCommitParentSHA1": "3a55941f33dcd9111d6b61b0505217f47973a39d", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java\nindex 07c40e6..afebf11 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java\n@@ -32,11 +32,11 @@\n \n /** Tests SuppressElementFilter. */\n public class FilterSetTest {\n-    private CSVFilter filter;\n+    private CsvFilter filter;\n \n     @Before\n     public void setUp() {\n-        filter = new CSVFilter(\"\");\n+        filter = new CsvFilter(\"\");\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 39, "bugNodeStartChar": 1563, "bugNodeLength": 17, "fixLineNum": 39, "fixNodeStartChar": 1563, "fixNodeLength": 17, "sourceBeforeFix": "new CSVFilter(\"\")", "sourceAfterFix": "new CsvFilter(\"\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4a97626c4fabfcbaa14648c6b5f8bc1bedf73f46", "fixCommitParentSHA1": "2959d83ed2a3b8217d9d3c8aefa748cdacdcd393", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java\nindex 89a4cc6..240f3ea 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java\n@@ -104,7 +104,7 @@\n      * @param value the value of the attribute.\n      */\n     public void addAttribute(String attributeName, String value) {\n-        final String current = attributeMap.put(attributeName, value);\n+        final String current = attributeMap.get(attributeName);\n         if (current == null) {\n             attributeMap.put(attributeName, value);\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 107, "bugNodeStartChar": 3716, "bugNodeLength": 38, "fixLineNum": 107, "fixNodeStartChar": 3716, "fixNodeLength": 31, "sourceBeforeFix": "attributeMap.put(attributeName,value)", "sourceAfterFix": "attributeMap.get(attributeName)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "1edb2ce5f71ca1d719e708f475ce0914b3d7597c", "fixCommitParentSHA1": "9eec8df60589da1069885cd56345fe1f3d609859", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java\nindex a7e7b16..a43655a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java\n@@ -112,11 +112,8 @@\n \n     private static final List<String> UNDOCUMENTED_PROPERTIES = Arrays.asList(\n             \"SuppressWithNearbyCommentFilter.fileContents\",\n-            \"SuppressionCommentFilter.fileContents\",\n-            \"MethodNameCheck.applyToPackage\",\n-            \"MethodNameCheck.applyToPrivate\",\n-            \"MethodNameCheck.applyToProtected\",\n-            \"MethodNameCheck.applyToPublic\");\n+            \"SuppressionCommentFilter.fileContents\"\n+    );\n \n     @Test\n     public void testAllChecksPresentOnAvailableChecksPage() throws IOException {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 113, "bugNodeStartChar": 4693, "bugNodeLength": 312, "fixLineNum": 113, "fixNodeStartChar": 4693, "fixNodeLength": 132, "sourceBeforeFix": "Arrays.asList(\"SuppressWithNearbyCommentFilter.fileContents\",\"SuppressionCommentFilter.fileContents\",\"MethodNameCheck.applyToPackage\",\"MethodNameCheck.applyToPrivate\",\"MethodNameCheck.applyToProtected\",\"MethodNameCheck.applyToPublic\")", "sourceAfterFix": "Arrays.asList(\"SuppressWithNearbyCommentFilter.fileContents\",\"SuppressionCommentFilter.fileContents\")"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "fb2ec00cc72fa6edc0894e337b8176adcc2eb974", "fixCommitParentSHA1": "b1f81810e73c2421f5ca6ecf766fd2577a5f20b0", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java\nindex cea7023..ae02c04 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java\n@@ -68,7 +68,7 @@\n                     Enum.valueOf(optionClass, optionStr.trim().toUpperCase(Locale.ENGLISH));\n         }\n         catch (IllegalArgumentException iae) {\n-            throw new ConversionException(\"unable to parse \" + abstractOption, iae);\n+            throw new ConversionException(\"unable to parse \" + optionStr, iae);\n         }\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 71, "bugNodeStartChar": 2810, "bugNodeLength": 35, "fixLineNum": 71, "fixNodeStartChar": 2810, "fixNodeLength": 30, "sourceBeforeFix": "\"unable to parse \" + abstractOption", "sourceAfterFix": "\"unable to parse \" + optionStr"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fb2ec00cc72fa6edc0894e337b8176adcc2eb974", "fixCommitParentSHA1": "b1f81810e73c2421f5ca6ecf766fd2577a5f20b0", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java\nindex cea7023..ae02c04 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java\n@@ -68,7 +68,7 @@\n                     Enum.valueOf(optionClass, optionStr.trim().toUpperCase(Locale.ENGLISH));\n         }\n         catch (IllegalArgumentException iae) {\n-            throw new ConversionException(\"unable to parse \" + abstractOption, iae);\n+            throw new ConversionException(\"unable to parse \" + optionStr, iae);\n         }\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 71, "bugNodeStartChar": 2810, "bugNodeLength": 35, "fixLineNum": 71, "fixNodeStartChar": 2810, "fixNodeLength": 30, "sourceBeforeFix": "\"unable to parse \" + abstractOption", "sourceAfterFix": "\"unable to parse \" + optionStr"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "992678f1baf3a7f6a1cf579232457bd97d408e4d", "fixCommitParentSHA1": "2a52c00d5de8a6b56df0b9678f831e5814170ca6", "bugFilePath": "src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java", "fixPatch": "diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java\nindex 5a7e34c..6b47b00 100644\n--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java\n+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java\n@@ -34,8 +34,8 @@\n         }; //indent:8 exp:8\n \n     /** Matches no characters. */ //indent:4 exp:4\n-    public static final FastMatcher NONE = //indent:4 exp:4\n-            new FastMatcher() { //indent:12 exp:>=8\n+    public static final InputFastMatcher NONE = //indent:4 exp:4\n+            new InputFastMatcher() { //indent:12 exp:>=8\n       @Override public boolean matches(char c) { //indent:6 exp:6\n         return false; //indent:8 exp:8\n       } //indent:6 exp:6\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 36, "bugNodeStartChar": 1103, "bugNodeLength": 1017, "fixLineNum": 36, "fixNodeStartChar": 1103, "fixNodeLength": 1027, "sourceBeforeFix": "/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; ", "sourceAfterFix": "/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "992678f1baf3a7f6a1cf579232457bd97d408e4d", "fixCommitParentSHA1": "2a52c00d5de8a6b56df0b9678f831e5814170ca6", "bugFilePath": "src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java", "fixPatch": "diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java\nindex 10118c6..591b41d 100644\n--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java\n+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java\n@@ -34,8 +34,8 @@\n         }; //indent:8 exp:8\n \n     /** Matches no characters. */ //indent:4 exp:4\n-    public static final FastMatcher NONE = //indent:4 exp:4\n-            new FastMatcher() { //indent:12 exp:>=8\n+    public static final InputFastMatcher NONE = //indent:4 exp:4\n+            new InputFastMatcher() { //indent:12 exp:>=8\n       @Override public boolean matches(char c) { //indent:6 exp:6\n         return false; //indent:8 exp:8\n       } //indent:6 exp:6\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 36, "bugNodeStartChar": 1112, "bugNodeLength": 1017, "fixLineNum": 36, "fixNodeStartChar": 1112, "fixNodeLength": 1027, "sourceBeforeFix": "/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; ", "sourceAfterFix": "/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "992678f1baf3a7f6a1cf579232457bd97d408e4d", "fixCommitParentSHA1": "2a52c00d5de8a6b56df0b9678f831e5814170ca6", "bugFilePath": "src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java", "fixPatch": "diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java\nindex 1cf911c..2b85303 100644\n--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java\n+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java\n@@ -34,8 +34,8 @@\n         }; //indent:8 exp:8\n \n     /** Matches no characters. */ //indent:4 exp:4\n-    public static final FastMatcher NONE = //indent:4 exp:4\n-            new FastMatcher() { //indent:12 exp:>=8\n+    public static final InputFastMatcher NONE = //indent:4 exp:4\n+            new InputFastMatcher() { //indent:12 exp:>=8\n       @Override public boolean matches(char c) { //indent:6 exp:6\n         return false; //indent:8 exp:8\n       } //indent:6 exp:6\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 36, "bugNodeStartChar": 1101, "bugNodeLength": 1017, "fixLineNum": 36, "fixNodeStartChar": 1101, "fixNodeLength": 1027, "sourceBeforeFix": "/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; ", "sourceAfterFix": "/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ceedf8077728da8d462bbdf607a89da82e9a5f2b", "fixCommitParentSHA1": "45379946e7cc7bcd45b5b587b7c1232400aea4f6", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\nindex 01e7c1e..214fad7 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @IntMethodAnnotation(42)\n+    @InputIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @IntMethodAnnotation(value=43)\n+    @InputIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @IntMethodAnnotation(-44)\n+    @InputIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @IntMethodAnnotation(value=-45)\n+    @InputIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 185, "bugNodeStartChar": 4148, "bugNodeLength": 24, "fixLineNum": 185, "fixNodeStartChar": 4148, "fixNodeLength": 29, "sourceBeforeFix": "@IntMethodAnnotation(42)", "sourceAfterFix": "@InputIntMethodAnnotation(42)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ceedf8077728da8d462bbdf607a89da82e9a5f2b", "fixCommitParentSHA1": "45379946e7cc7bcd45b5b587b7c1232400aea4f6", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\nindex 01e7c1e..214fad7 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @IntMethodAnnotation(42)\n+    @InputIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @IntMethodAnnotation(value=43)\n+    @InputIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @IntMethodAnnotation(-44)\n+    @InputIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @IntMethodAnnotation(value=-45)\n+    @InputIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 189, "bugNodeStartChar": 4212, "bugNodeLength": 30, "fixLineNum": 189, "fixNodeStartChar": 4212, "fixNodeLength": 35, "sourceBeforeFix": "@IntMethodAnnotation(value=43)", "sourceAfterFix": "@InputIntMethodAnnotation(value=43)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ceedf8077728da8d462bbdf607a89da82e9a5f2b", "fixCommitParentSHA1": "45379946e7cc7bcd45b5b587b7c1232400aea4f6", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\nindex 01e7c1e..214fad7 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @IntMethodAnnotation(42)\n+    @InputIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @IntMethodAnnotation(value=43)\n+    @InputIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @IntMethodAnnotation(-44)\n+    @InputIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @IntMethodAnnotation(value=-45)\n+    @InputIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 193, "bugNodeStartChar": 4287, "bugNodeLength": 25, "fixLineNum": 193, "fixNodeStartChar": 4287, "fixNodeLength": 30, "sourceBeforeFix": "@IntMethodAnnotation(-44)", "sourceAfterFix": "@InputIntMethodAnnotation(-44)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ceedf8077728da8d462bbdf607a89da82e9a5f2b", "fixCommitParentSHA1": "45379946e7cc7bcd45b5b587b7c1232400aea4f6", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\nindex 01e7c1e..214fad7 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @IntMethodAnnotation(42)\n+    @InputIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @IntMethodAnnotation(value=43)\n+    @InputIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @IntMethodAnnotation(-44)\n+    @InputIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @IntMethodAnnotation(value=-45)\n+    @InputIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 197, "bugNodeStartChar": 4360, "bugNodeLength": 31, "fixLineNum": 197, "fixNodeStartChar": 4360, "fixNodeLength": 36, "sourceBeforeFix": "@IntMethodAnnotation(value=-45)", "sourceAfterFix": "@InputIntMethodAnnotation(value=-45)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "fixCommitParentSHA1": "36b91a59d62c9505b835717f00f470c499cf9b30", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\nindex 7941730..414550b 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n@@ -132,7 +132,7 @@\n     public static Set<String> getPackageNames(ClassLoader classLoader)\n             throws CheckstyleException {\n \n-        Set<String> result;\n+        final Set<String> result;\n         try {\n             //create the loader outside the loop to prevent PackageObjectFactory\n             //being created anew for each file\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 135, "bugNodeStartChar": 4929, "bugNodeLength": 19, "fixLineNum": 135, "fixNodeStartChar": 4929, "fixNodeLength": 25, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "fixCommitParentSHA1": "36b91a59d62c9505b835717f00f470c499cf9b30", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\nindex 08ef8b9..fb5ee5e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n@@ -345,7 +345,7 @@\n                 + \" files\", Project.MSG_INFO);\n         log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n \n-        int numErrs;\n+        final int numErrs;\n \n         try {\n             final long processingStartTime = System.currentTimeMillis();\n@@ -380,7 +380,7 @@\n      * @return new instance of {@code Checker}\n      */\n     private Checker createChecker() {\n-        Checker checker;\n+        final Checker checker;\n         try {\n             final Properties props = createOverridingProperties();\n             final Configuration config =\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 348, "bugNodeStartChar": 11844, "bugNodeLength": 12, "fixLineNum": 348, "fixNodeStartChar": 11844, "fixNodeLength": 18, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "fixCommitParentSHA1": "36b91a59d62c9505b835717f00f470c499cf9b30", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\nindex 08ef8b9..fb5ee5e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n@@ -345,7 +345,7 @@\n                 + \" files\", Project.MSG_INFO);\n         log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n \n-        int numErrs;\n+        final int numErrs;\n \n         try {\n             final long processingStartTime = System.currentTimeMillis();\n@@ -380,7 +380,7 @@\n      * @return new instance of {@code Checker}\n      */\n     private Checker createChecker() {\n-        Checker checker;\n+        final Checker checker;\n         try {\n             final Properties props = createOverridingProperties();\n             final Configuration config =\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 383, "bugNodeStartChar": 13119, "bugNodeLength": 16, "fixLineNum": 383, "fixNodeStartChar": 13119, "fixNodeLength": 22, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "fixCommitParentSHA1": "36b91a59d62c9505b835717f00f470c499cf9b30", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\nindex cf423bb..50af412 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n@@ -306,7 +306,7 @@\n      * @return get target of annotation\n      */\n     private static DetailAST getAnnotationTarget(DetailAST ast) {\n-        DetailAST targetAST;\n+        final DetailAST targetAST;\n         final DetailAST parentAST = ast.getParent();\n         switch (parentAST.getType()) {\n             case TokenTypes.MODIFIERS:\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 309, "bugNodeStartChar": 11581, "bugNodeLength": 20, "fixLineNum": 309, "fixNodeStartChar": 11581, "fixNodeLength": 26, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "fixCommitParentSHA1": "36b91a59d62c9505b835717f00f470c499cf9b30", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex 878d587..95c09a3 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -143,7 +143,7 @@\n      * @throws CheckstyleException if an error occurs.\n      */\n     static PkgControl load(final URI uri) throws CheckstyleException {\n-        InputStream inputStream;\n+        final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 146, "bugNodeStartChar": 5843, "bugNodeLength": 24, "fixLineNum": 146, "fixNodeStartChar": 5843, "fixNodeLength": 30, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "fixCommitParentSHA1": "36b91a59d62c9505b835717f00f470c499cf9b30", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\nindex 70bdd86..dfcee3c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n@@ -333,7 +333,7 @@\n                 }\n                 format = CommonUtils.fillTemplateWithStringsByRegexp(\n                         filter.influenceFormat, text, filter.commentRegexp);\n-                int influence;\n+                final int influence;\n                 try {\n                     if (CommonUtils.startsWithChar(format, '+')) {\n                         format = format.substring(1);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 336, "bugNodeStartChar": 11638, "bugNodeLength": 14, "fixLineNum": 336, "fixNodeStartChar": 11638, "fixNodeLength": 20, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "fixCommitParentSHA1": "536bc20b48637fa85025b790736114d5dcb7a385", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\nindex da90b2f..cf423bb 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n@@ -52,8 +52,8 @@\n      * Optional prefix for warning suppressions that are only intended to be\n      * recognized by checkstyle. For instance, to suppress {@code\n      * FallThroughCheck} only in checkstyle (and not in javac), use the\n-     * suppression {@code \"checkstyle:fallthrough\"}. To suppress the warning in\n-     * both tools, just use {@code \"fallthrough\"}.\n+     * suppression {@code \"checkstyle:fallthrough\"} or {@code \"checkstyle:FallThrough\"}.\n+     * To suppress the warning in both tools, just use {@code \"fallthrough\"}.\n      */\n     public static final String CHECKSTYLE_PREFIX = \"checkstyle:\";\n \n@@ -163,7 +163,7 @@\n                         .getLastColumn() >= column;\n             final boolean nameMatches =\n                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())\n-                    || entry.getCheckName().equals(checkAlias);\n+                    || entry.getCheckName().equalsIgnoreCase(checkAlias);\n             if (afterStart && beforeEnd && nameMatches) {\n                 return true;\n             }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 166, "bugNodeStartChar": 6782, "bugNodeLength": 39, "fixLineNum": 166, "fixNodeStartChar": 6782, "fixNodeLength": 49, "sourceBeforeFix": "entry.getCheckName().equals(checkAlias)", "sourceAfterFix": "entry.getCheckName().equalsIgnoreCase(checkAlias)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "fixCommitParentSHA1": "536bc20b48637fa85025b790736114d5dcb7a385", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\nindex da90b2f..cf423bb 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n@@ -52,8 +52,8 @@\n      * Optional prefix for warning suppressions that are only intended to be\n      * recognized by checkstyle. For instance, to suppress {@code\n      * FallThroughCheck} only in checkstyle (and not in javac), use the\n-     * suppression {@code \"checkstyle:fallthrough\"}. To suppress the warning in\n-     * both tools, just use {@code \"fallthrough\"}.\n+     * suppression {@code \"checkstyle:fallthrough\"} or {@code \"checkstyle:FallThrough\"}.\n+     * To suppress the warning in both tools, just use {@code \"fallthrough\"}.\n      */\n     public static final String CHECKSTYLE_PREFIX = \"checkstyle:\";\n \n@@ -163,7 +163,7 @@\n                         .getLastColumn() >= column;\n             final boolean nameMatches =\n                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())\n-                    || entry.getCheckName().equals(checkAlias);\n+                    || entry.getCheckName().equalsIgnoreCase(checkAlias);\n             if (afterStart && beforeEnd && nameMatches) {\n                 return true;\n             }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 166, "bugNodeStartChar": 6782, "bugNodeLength": 39, "fixLineNum": 166, "fixNodeStartChar": 6782, "fixNodeLength": 49, "sourceBeforeFix": "entry.getCheckName().equals(checkAlias)", "sourceAfterFix": "entry.getCheckName().equalsIgnoreCase(checkAlias)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f14025ac008f8a2ef506b9e7cfcc820c637d28d5", "fixCommitParentSHA1": "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java\nindex df140be..b0d960c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java\n@@ -162,7 +162,7 @@\n      *\n      * @return new instance.\n      */\n-    AbstractExpressionHandler createMethodCallHandler(IndentationCheck indentCheck,\n+    private AbstractExpressionHandler createMethodCallHandler(IndentationCheck indentCheck,\n         DetailAST ast, AbstractExpressionHandler parent) {\n         AbstractExpressionHandler theParent = parent;\n         DetailAST astNode = ast.getFirstChild();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 156, "bugNodeStartChar": 6143, "bugNodeLength": 870, "fixLineNum": 156, "fixNodeStartChar": 6143, "fixNodeLength": 878, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\nindex e8ea3c7..372ad06 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\n@@ -246,7 +246,7 @@\n         /** Add a name to the frame.\n          * @param nameToAdd the name we're adding\n          */\n-        void addName(String nameToAdd) {\n+        private void addName(String nameToAdd) {\n             varNames.add(nameToAdd);\n         }\n \n@@ -262,7 +262,7 @@\n          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n-        LexicalFrame getIfContains(String nameToFind) {\n+        private LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n \n             if (contains(nameToFind)) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 246, "bugNodeStartChar": 8559, "bugNodeLength": 178, "fixLineNum": 246, "fixNodeStartChar": 8559, "fixNodeLength": 186, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\nindex e8ea3c7..372ad06 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\n@@ -246,7 +246,7 @@\n         /** Add a name to the frame.\n          * @param nameToAdd the name we're adding\n          */\n-        void addName(String nameToAdd) {\n+        private void addName(String nameToAdd) {\n             varNames.add(nameToAdd);\n         }\n \n@@ -262,7 +262,7 @@\n          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n-        LexicalFrame getIfContains(String nameToFind) {\n+        private LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n \n             if (contains(nameToFind)) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 261, "bugNodeStartChar": 9021, "bugNodeLength": 485, "fixLineNum": 261, "fixNodeStartChar": 9021, "fixNodeLength": 493, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\nindex aac168a..6826004 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n@@ -134,12 +134,12 @@\n         }\n \n         /** Adds private ctor. */\n-        void reportPrivateCtor() {\n+        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n \n         /** Adds non-private ctor. */\n-        void reportNonPrivateCtor() {\n+        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }\n \n@@ -147,7 +147,7 @@\n          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n-        boolean isWithPrivateCtor() {\n+        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }\n \n@@ -155,7 +155,7 @@\n          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n-        boolean isWithNonPrivateCtor() {\n+        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }\n \n@@ -163,7 +163,7 @@\n          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsFinal() {\n+        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }\n \n@@ -171,7 +171,7 @@\n          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsAbstract() {\n+        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 136, "bugNodeStartChar": 4703, "bugNodeLength": 106, "fixLineNum": 136, "fixNodeStartChar": 4703, "fixNodeLength": 114, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\nindex aac168a..6826004 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n@@ -134,12 +134,12 @@\n         }\n \n         /** Adds private ctor. */\n-        void reportPrivateCtor() {\n+        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n \n         /** Adds non-private ctor. */\n-        void reportNonPrivateCtor() {\n+        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }\n \n@@ -147,7 +147,7 @@\n          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n-        boolean isWithPrivateCtor() {\n+        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }\n \n@@ -155,7 +155,7 @@\n          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n-        boolean isWithNonPrivateCtor() {\n+        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }\n \n@@ -163,7 +163,7 @@\n          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsFinal() {\n+        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }\n \n@@ -171,7 +171,7 @@\n          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsAbstract() {\n+        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 141, "bugNodeStartChar": 4819, "bugNodeLength": 116, "fixLineNum": 141, "fixNodeStartChar": 4819, "fixNodeLength": 124, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\nindex aac168a..6826004 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n@@ -134,12 +134,12 @@\n         }\n \n         /** Adds private ctor. */\n-        void reportPrivateCtor() {\n+        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n \n         /** Adds non-private ctor. */\n-        void reportNonPrivateCtor() {\n+        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }\n \n@@ -147,7 +147,7 @@\n          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n-        boolean isWithPrivateCtor() {\n+        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }\n \n@@ -155,7 +155,7 @@\n          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n-        boolean isWithNonPrivateCtor() {\n+        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }\n \n@@ -163,7 +163,7 @@\n          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsFinal() {\n+        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }\n \n@@ -171,7 +171,7 @@\n          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsAbstract() {\n+        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 146, "bugNodeStartChar": 4945, "bugNodeLength": 194, "fixLineNum": 146, "fixNodeStartChar": 4945, "fixNodeLength": 202, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\nindex aac168a..6826004 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n@@ -134,12 +134,12 @@\n         }\n \n         /** Adds private ctor. */\n-        void reportPrivateCtor() {\n+        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n \n         /** Adds non-private ctor. */\n-        void reportNonPrivateCtor() {\n+        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }\n \n@@ -147,7 +147,7 @@\n          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n-        boolean isWithPrivateCtor() {\n+        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }\n \n@@ -155,7 +155,7 @@\n          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n-        boolean isWithNonPrivateCtor() {\n+        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }\n \n@@ -163,7 +163,7 @@\n          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsFinal() {\n+        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }\n \n@@ -171,7 +171,7 @@\n          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsAbstract() {\n+        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 154, "bugNodeStartChar": 5149, "bugNodeLength": 208, "fixLineNum": 154, "fixNodeStartChar": 5149, "fixNodeLength": 216, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\nindex aac168a..6826004 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n@@ -134,12 +134,12 @@\n         }\n \n         /** Adds private ctor. */\n-        void reportPrivateCtor() {\n+        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n \n         /** Adds non-private ctor. */\n-        void reportNonPrivateCtor() {\n+        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }\n \n@@ -147,7 +147,7 @@\n          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n-        boolean isWithPrivateCtor() {\n+        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }\n \n@@ -155,7 +155,7 @@\n          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n-        boolean isWithNonPrivateCtor() {\n+        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }\n \n@@ -163,7 +163,7 @@\n          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsFinal() {\n+        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }\n \n@@ -171,7 +171,7 @@\n          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsAbstract() {\n+        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 162, "bugNodeStartChar": 5367, "bugNodeLength": 194, "fixLineNum": 162, "fixNodeStartChar": 5367, "fixNodeLength": 202, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\nindex aac168a..6826004 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java\n@@ -134,12 +134,12 @@\n         }\n \n         /** Adds private ctor. */\n-        void reportPrivateCtor() {\n+        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n \n         /** Adds non-private ctor. */\n-        void reportNonPrivateCtor() {\n+        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }\n \n@@ -147,7 +147,7 @@\n          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n-        boolean isWithPrivateCtor() {\n+        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }\n \n@@ -155,7 +155,7 @@\n          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n-        boolean isWithNonPrivateCtor() {\n+        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }\n \n@@ -163,7 +163,7 @@\n          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsFinal() {\n+        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }\n \n@@ -171,7 +171,7 @@\n          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n-        boolean isDeclaredAsAbstract() {\n+        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 170, "bugNodeStartChar": 5571, "bugNodeLength": 203, "fixLineNum": 170, "fixNodeStartChar": 5571, "fixNodeLength": 211, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java\nindex caf4ca0..fd91341 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java\n@@ -138,7 +138,7 @@\n      * @return null if the order is correct, otherwise returns the offending\n      *     modifier AST.\n      */\n-    static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {\n+    private static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {\n         final Iterator<DetailAST> iterator = modifiers.iterator();\n \n         //Speed past all initial annotations\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 133, "bugNodeStartChar": 4506, "bugNodeLength": 1689, "fixLineNum": 133, "fixNodeStartChar": 4506, "fixNodeLength": 1697, "sourceBeforeFix": "8", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\nindex c7601e2..f453000 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n@@ -234,7 +234,7 @@\n          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n-        void increment(Scope scope) {\n+        private void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));\n@@ -249,7 +249,7 @@\n          * @param scope the scope counter to get the value of\n          * @return the value of a scope counter\n          */\n-        int value(Scope scope) {\n+        private int value(Scope scope) {\n             final Integer value = counts.get(scope);\n \n             if (value == null) {\n@@ -263,7 +263,7 @@\n         /**\n          * @return the total number of methods.\n          */\n-        int getTotal() {\n+        private int getTotal() {\n             return total;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 233, "bugNodeStartChar": 7999, "bugNodeLength": 402, "fixLineNum": 233, "fixNodeStartChar": 7999, "fixNodeLength": 410, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\nindex c7601e2..f453000 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n@@ -234,7 +234,7 @@\n          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n-        void increment(Scope scope) {\n+        private void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));\n@@ -249,7 +249,7 @@\n          * @param scope the scope counter to get the value of\n          * @return the value of a scope counter\n          */\n-        int value(Scope scope) {\n+        private int value(Scope scope) {\n             final Integer value = counts.get(scope);\n \n             if (value == null) {\n@@ -263,7 +263,7 @@\n         /**\n          * @return the total number of methods.\n          */\n-        int getTotal() {\n+        private int getTotal() {\n             return total;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 247, "bugNodeStartChar": 8411, "bugNodeLength": 404, "fixLineNum": 247, "fixNodeStartChar": 8411, "fixNodeLength": 412, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "fixCommitParentSHA1": "6f7799cb7252eb3e4ac20fe0cc939250605083b9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\nindex c7601e2..f453000 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n@@ -234,7 +234,7 @@\n          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n-        void increment(Scope scope) {\n+        private void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));\n@@ -249,7 +249,7 @@\n          * @param scope the scope counter to get the value of\n          * @return the value of a scope counter\n          */\n-        int value(Scope scope) {\n+        private int value(Scope scope) {\n             final Integer value = counts.get(scope);\n \n             if (value == null) {\n@@ -263,7 +263,7 @@\n         /**\n          * @return the total number of methods.\n          */\n-        int getTotal() {\n+        private int getTotal() {\n             return total;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 263, "bugNodeStartChar": 8825, "bugNodeLength": 124, "fixLineNum": 263, "fixNodeStartChar": 8825, "fixNodeLength": 132, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9fcb40a184ebe0dd1eea732b9a493e3e01ea53dc", "fixCommitParentSHA1": "bad81c81c2be3e67099c512e4e0aada291323566", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\nindex f608ed8..27574c0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n@@ -194,7 +194,7 @@\n      * TreeTableCellEditor implementation. Component returned is the\n      * JTree.\n      */\n-    private class TreeTableCellEditor extends AbstractCellEditor implements\n+    private class TreeTableCellEditor extends BaseCellEditor implements\n             TableCellEditor {\n         @Override\n         public Component getTableCellEditorComponent(JTable table,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 193, "bugNodeStartChar": 6800, "bugNodeLength": 2478, "fixLineNum": 193, "fixNodeStartChar": 6800, "fixNodeLength": 2474, "sourceBeforeFix": "/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends AbstractCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } ", "sourceAfterFix": "/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends BaseCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } "}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "9fcb40a184ebe0dd1eea732b9a493e3e01ea53dc", "fixCommitParentSHA1": "bad81c81c2be3e67099c512e4e0aada291323566", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\nindex 4e7c445..065d541 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java\n@@ -20,7 +20,7 @@\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import com.puppycrawl.tools.checkstyle.api.Configuration;\n \n-public abstract class BaseCheckTestSupport {\n+public class BaseCheckTestSupport {\n     /**\n      * A brief logger that only display info about errors.\n      */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 23, "bugNodeStartChar": 658, "bugNodeLength": 5804, "fixLineNum": 23, "fixNodeStartChar": 658, "fixNodeLength": 5795, "sourceBeforeFix": "1025", "sourceAfterFix": "1"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "fixCommitParentSHA1": "ee7d6e9df391945a64c23210cd0fdc1a58fb7d95", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\nindex 335d581..95cb6d0 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\n@@ -170,7 +170,7 @@\n         Set<LocalizedMessage> messages = check.process(impossibleFile, Lists.newArrayList(\"txt\"));\n         assertTrue(messages.size() == 1);\n         Iterator<LocalizedMessage> iter = messages.iterator();\n-        assertEquals(iter.next().getMessage(), \"Unable to open ''.\");\n+        assertEquals(\"Unable to open ''.\", iter.next().getMessage());\n     }\n \n     @Test\n@@ -190,10 +190,10 @@\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n-                assertEquals(ex.getCause().getMessage(), \"Unable to read 2 bytes, got 0\");\n+                assertEquals(\"Unable to read 2 bytes, got 0\", ex.getCause().getMessage());\n             }\n             else {\n-                assertEquals(ex.getCause().getMessage(), \"Unable to read 1 bytes, got 0\");\n+                assertEquals(\"Unable to read 1 bytes, got 0\", ex.getCause().getMessage());\n             }\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 173, "bugNodeStartChar": 6955, "bugNodeLength": 60, "fixLineNum": 173, "fixNodeStartChar": 6955, "fixNodeLength": 60, "sourceBeforeFix": "assertEquals(iter.next().getMessage(),\"Unable to open ''.\")", "sourceAfterFix": "assertEquals(\"Unable to open ''.\",iter.next().getMessage())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "fixCommitParentSHA1": "ee7d6e9df391945a64c23210cd0fdc1a58fb7d95", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\nindex 335d581..95cb6d0 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\n@@ -170,7 +170,7 @@\n         Set<LocalizedMessage> messages = check.process(impossibleFile, Lists.newArrayList(\"txt\"));\n         assertTrue(messages.size() == 1);\n         Iterator<LocalizedMessage> iter = messages.iterator();\n-        assertEquals(iter.next().getMessage(), \"Unable to open ''.\");\n+        assertEquals(\"Unable to open ''.\", iter.next().getMessage());\n     }\n \n     @Test\n@@ -190,10 +190,10 @@\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n-                assertEquals(ex.getCause().getMessage(), \"Unable to read 2 bytes, got 0\");\n+                assertEquals(\"Unable to read 2 bytes, got 0\", ex.getCause().getMessage());\n             }\n             else {\n-                assertEquals(ex.getCause().getMessage(), \"Unable to read 1 bytes, got 0\");\n+                assertEquals(\"Unable to read 1 bytes, got 0\", ex.getCause().getMessage());\n             }\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 193, "bugNodeStartChar": 7891, "bugNodeLength": 73, "fixLineNum": 193, "fixNodeStartChar": 7891, "fixNodeLength": 73, "sourceBeforeFix": "assertEquals(ex.getCause().getMessage(),\"Unable to read 2 bytes, got 0\")", "sourceAfterFix": "assertEquals(\"Unable to read 2 bytes, got 0\",ex.getCause().getMessage())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "fixCommitParentSHA1": "ee7d6e9df391945a64c23210cd0fdc1a58fb7d95", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\nindex 335d581..95cb6d0 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java\n@@ -170,7 +170,7 @@\n         Set<LocalizedMessage> messages = check.process(impossibleFile, Lists.newArrayList(\"txt\"));\n         assertTrue(messages.size() == 1);\n         Iterator<LocalizedMessage> iter = messages.iterator();\n-        assertEquals(iter.next().getMessage(), \"Unable to open ''.\");\n+        assertEquals(\"Unable to open ''.\", iter.next().getMessage());\n     }\n \n     @Test\n@@ -190,10 +190,10 @@\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n-                assertEquals(ex.getCause().getMessage(), \"Unable to read 2 bytes, got 0\");\n+                assertEquals(\"Unable to read 2 bytes, got 0\", ex.getCause().getMessage());\n             }\n             else {\n-                assertEquals(ex.getCause().getMessage(), \"Unable to read 1 bytes, got 0\");\n+                assertEquals(\"Unable to read 1 bytes, got 0\", ex.getCause().getMessage());\n             }\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 196, "bugNodeStartChar": 8015, "bugNodeLength": 73, "fixLineNum": 196, "fixNodeStartChar": 8015, "fixNodeLength": 73, "sourceBeforeFix": "assertEquals(ex.getCause().getMessage(),\"Unable to read 1 bytes, got 0\")", "sourceAfterFix": "assertEquals(\"Unable to read 1 bytes, got 0\",ex.getCause().getMessage())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "fixCommitParentSHA1": "ee7d6e9df391945a64c23210cd0fdc1a58fb7d95", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java\nindex 930cff3..3a23dad 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java\n@@ -81,7 +81,7 @@\n         }\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IllegalArgumentException);\n-            assertEquals(ex.getCause().getMessage(), \"ClassInfo's name should be non-null\");\n+            assertEquals(\"ClassInfo's name should be non-null\", ex.getCause().getMessage());\n         }\n \n         Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 84, "bugNodeStartChar": 3724, "bugNodeLength": 79, "fixLineNum": 84, "fixNodeStartChar": 3724, "fixNodeLength": 79, "sourceBeforeFix": "assertEquals(ex.getCause().getMessage(),\"ClassInfo's name should be non-null\")", "sourceAfterFix": "assertEquals(\"ClassInfo's name should be non-null\",ex.getCause().getMessage())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "9ce956473be0ec029ee6738fb284659c17698518", "fixCommitParentSHA1": "dd7935491a4d88781a8d95e642324f7c9c0ef7eb", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java\nindex 0493e7b..b77aa8f 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java\n@@ -123,7 +123,7 @@\n                 IOException.class,\n                 File.class);\n         logIOException.setAccessible(true);\n-        logIOException.invoke(check, new IOException(), new File(\"\"));\n+        logIOException.invoke(check, new IOException(\"test exception\"), new File(\"\"));\n     }\n \n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 126, "bugNodeStartChar": 5150, "bugNodeLength": 17, "fixLineNum": 126, "fixNodeStartChar": 5150, "fixNodeLength": 33, "sourceBeforeFix": "new IOException()", "sourceAfterFix": "new IOException(\"test exception\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e89837b42ece86ae3a0efc8ba272f550c98cd33c", "fixCommitParentSHA1": "e1a2e66b262be83708d65b7c5f2ba4014c97e384", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\nindex 08c0d77..bdb846a 100755\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\n@@ -266,7 +266,7 @@\n      * @param ast DetailAST node.\n      * @return Column number if non-comment node exists, -1 otherwise.\n      */\n-    private int findColumnNo(DetailAST ast) {\n+    private static int findColumnNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {\n@@ -288,7 +288,7 @@\n      * @param ast DetailAST node.\n      * @return Line number if non-comment node exists, -1 otherwise.\n      */\n-    private int findLineNo(DetailAST ast) {\n+    private static int findLineNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 263, "bugNodeStartChar": 7520, "bugNodeLength": 655, "fixLineNum": 263, "fixNodeStartChar": 7520, "fixNodeLength": 662, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e89837b42ece86ae3a0efc8ba272f550c98cd33c", "fixCommitParentSHA1": "e1a2e66b262be83708d65b7c5f2ba4014c97e384", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\nindex 08c0d77..bdb846a 100755\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\n@@ -266,7 +266,7 @@\n      * @param ast DetailAST node.\n      * @return Column number if non-comment node exists, -1 otherwise.\n      */\n-    private int findColumnNo(DetailAST ast) {\n+    private static int findColumnNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {\n@@ -288,7 +288,7 @@\n      * @param ast DetailAST node.\n      * @return Line number if non-comment node exists, -1 otherwise.\n      */\n-    private int findLineNo(DetailAST ast) {\n+    private static int findLineNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 285, "bugNodeStartChar": 8181, "bugNodeLength": 647, "fixLineNum": 285, "fixNodeStartChar": 8181, "fixNodeLength": 654, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "fixCommitParentSHA1": "b372cfa0a8632735da877de0f703c3b3c9ce5f63", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\nindex bb6aab9..f35f19e 100644\n--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\n+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\n@@ -126,10 +126,10 @@\n         final int errs = aC.process(theFiles);\n \n         // process each of the lines\n-        final ByteArrayInputStream bais =\n+        final ByteArrayInputStream localStream =\n             new ByteArrayInputStream(stream.toByteArray());\n         final LineNumberReader lnr =\n-            new LineNumberReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+            new LineNumberReader(new InputStreamReader(localStream, StandardCharsets.UTF_8));\n \n         for (int i = 0; i < aExpected.length; i++) {\n             final String expected = aMessageFileName + \":\" + aExpected[i];\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 132, "bugNodeStartChar": 4661, "bugNodeLength": 51, "fixLineNum": 132, "fixNodeStartChar": 4661, "fixNodeLength": 58, "sourceBeforeFix": "new InputStreamReader(bais,StandardCharsets.UTF_8)", "sourceAfterFix": "new InputStreamReader(localStream,StandardCharsets.UTF_8)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "fixCommitParentSHA1": "b372cfa0a8632735da877de0f703c3b3c9ce5f63", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java\nindex 54a6109..ae0ec1b 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java\n@@ -202,10 +202,10 @@\n         final int errs = checker.process(theFiles);\n \n         // process each of the lines\n-        final ByteArrayInputStream bais =\n+        final ByteArrayInputStream localStream =\n             new ByteArrayInputStream(stream.toByteArray());\n         try (final LineNumberReader lnr = new LineNumberReader(\n-                new InputStreamReader(bais, StandardCharsets.UTF_8))) {\n+                new InputStreamReader(localStream, StandardCharsets.UTF_8))) {\n \n             for (int i = 0; i < expected.length; i++) {\n                 final String expectedResult = messageFileName + \":\" + expected[i];\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 208, "bugNodeStartChar": 8362, "bugNodeLength": 51, "fixLineNum": 208, "fixNodeStartChar": 8362, "fixNodeLength": 58, "sourceBeforeFix": "new InputStreamReader(bais,StandardCharsets.UTF_8)", "sourceAfterFix": "new InputStreamReader(localStream,StandardCharsets.UTF_8)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1f54d3d6892c2c5561abe9e7ef5ef91650cc7288", "fixCommitParentSHA1": "f1cd01472d1a91313b98863bba1e90d933bc29d8", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java\nindex f1d1fac..da57e0d 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java\n@@ -121,7 +121,7 @@\n      * @param semicolonAst DetailAST of semicolon.\n      * @return true if semicolon is in empty for initializer.\n      */\n-    private boolean isInEmptyForInitializer(DetailAST semicolonAst) {\n+    private static boolean isInEmptyForInitializer(DetailAST semicolonAst) {\n         boolean result = false;\n         if (semicolonAst.getType() == TokenTypes.SEMI) {\n             final DetailAST sibling = semicolonAst.getPreviousSibling();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 119, "bugNodeStartChar": 3951, "bugNodeLength": 649, "fixLineNum": 119, "fixNodeStartChar": 3951, "fixNodeLength": 656, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1f54d3d6892c2c5561abe9e7ef5ef91650cc7288", "fixCommitParentSHA1": "f1cd01472d1a91313b98863bba1e90d933bc29d8", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java\nindex 6e5aaf2..5699273 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java\n@@ -431,7 +431,7 @@\n      * @param parentType parent\n      * @return true if current token in colon of case or default tokens\n      */\n-    private boolean isColonOfCaseOrDefault(int currentType, int parentType) {\n+    private static boolean isColonOfCaseOrDefault(int currentType, int parentType) {\n         return currentType == TokenTypes.COLON\n                 && (parentType == TokenTypes.LITERAL_DEFAULT\n                     || parentType == TokenTypes.LITERAL_CASE);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 428, "bugNodeStartChar": 14586, "bugNodeLength": 455, "fixLineNum": 428, "fixNodeStartChar": 14586, "fixNodeLength": 462, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3d9f726c2d5fcc152fbfbcdeaade390b36b5fba0", "fixCommitParentSHA1": "a95266d1a12510b5ffbb3674437ca0897ad610d7", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\nindex 5a1c98c..bb6aab9 100644\n--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\n+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\n@@ -34,7 +34,7 @@\n     static class BriefLogger\n         extends DefaultLogger\n     {\n-        public BriefLogger(OutputStream out) throws UnsupportedEncodingException\n+        BriefLogger(OutputStream out) throws UnsupportedEncodingException\n         {\n             super(out, true);\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 37, "bugNodeStartChar": 1214, "bugNodeLength": 122, "fixLineNum": 37, "fixNodeStartChar": 1214, "fixNodeLength": 115, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "94f9754acb5cc92a32bf36d2a789325fed384325", "fixCommitParentSHA1": "ef834b210cc5c7803ef930fcff96219b6b91922d", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\nindex eb4f454..2486b4f 100644\n--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\n+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java\n@@ -32,7 +32,7 @@\n public abstract class BaseCheckTestSupport\n {\n     /** A brief logger that only display info about errors */\n-    protected static class BriefLogger\n+    static class BriefLogger\n         extends DefaultLogger\n     {\n         public BriefLogger(OutputStream out) throws UnsupportedEncodingException\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 34, "bugNodeStartChar": 1111, "bugNodeLength": 339, "fixLineNum": 34, "fixNodeStartChar": 1111, "fixNodeLength": 329, "sourceBeforeFix": "12", "sourceAfterFix": "8"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "94f9754acb5cc92a32bf36d2a789325fed384325", "fixCommitParentSHA1": "ef834b210cc5c7803ef930fcff96219b6b91922d", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java\nindex c5e5f58..b26a635 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java\n@@ -49,7 +49,7 @@\n import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrTagOpenContext;\n \n //@formatter:off\n-public final class ParseTreeBuilder {\n+final class ParseTreeBuilder {\n     private static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n \n     private ParseTreeBuilder() {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 52, "bugNodeStartChar": 3377, "bugNodeLength": 125445, "fixLineNum": 52, "fixNodeStartChar": 3377, "fixNodeLength": 125438, "sourceBeforeFix": "17", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "94f9754acb5cc92a32bf36d2a789325fed384325", "fixCommitParentSHA1": "ef834b210cc5c7803ef930fcff96219b6b91922d", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java\nindex c2a977e..ecc656e 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java\n@@ -6,7 +6,7 @@\n import com.puppycrawl.tools.checkstyle.api.Check;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n-public class CompareTreesWithComments extends Check {\n+class CompareTreesWithComments extends Check {\n     static DetailAST expectedTree;\n \n     @Override\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 9, "bugNodeStartChar": 226, "bugNodeLength": 2037, "fixLineNum": 9, "fixNodeStartChar": 226, "fixNodeLength": 2030, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1e7ae5866daead0d81be2bfcf7febbd1ca0fcbd8", "fixCommitParentSHA1": "da6ebe6de41b7a5afc6f6746ff0c2382c2a4be0f", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java\nindex 32fd1cd..34d694a 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java\n@@ -486,7 +486,7 @@\n          * Creates new frame.\n          * @param parent parent frame.\n          */\n-        public FieldFrame(FieldFrame parent) {\n+        FieldFrame(FieldFrame parent) {\n             this.parent = parent;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 485, "bugNodeStartChar": 17124, "bugNodeLength": 175, "fixLineNum": 485, "fixNodeStartChar": 17124, "fixNodeLength": 168, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a384794adeebe9ee5d2f023e841823734bf2453b", "fixCommitParentSHA1": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java\nindex 5b7f386..c332e21 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java\n@@ -797,7 +797,7 @@\n      * @param paramName name of parameter\n      * @return true if parameter found and removed\n      */\n-    private boolean removeMatchingParam(List<DetailAST> params, String paramName) {\n+    private static boolean removeMatchingParam(List<DetailAST> params, String paramName) {\n         boolean found = false;\n         final Iterator<DetailAST> paramIt = params.iterator();\n         while (paramIt.hasNext()) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 794, "bugNodeStartChar": 28879, "bugNodeLength": 674, "fixLineNum": 794, "fixNodeStartChar": 28879, "fixNodeLength": 681, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1", "fixCommitParentSHA1": "4f5a400f1287161c958720eea79143466191833d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java\nindex 3d3b5f1..5e1bae9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -294,7 +294,7 @@\n     }\n \n     /** Notify all listeners about the audit start */\n-    protected void fireAuditStarted() {\n+    void fireAuditStarted() {\n         final AuditEvent evt = new AuditEvent(this);\n         for (final AuditListener listener : listeners) {\n             listener.auditStarted(evt);\n@@ -302,7 +302,7 @@\n     }\n \n     /** Notify all listeners about the audit end */\n-    protected void fireAuditFinished() {\n+    void fireAuditFinished() {\n         final AuditEvent evt = new AuditEvent(this);\n         for (final AuditListener listener : listeners) {\n             listener.auditFinished(evt);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 296, "bugNodeStartChar": 10697, "bugNodeLength": 255, "fixLineNum": 296, "fixNodeStartChar": 10697, "fixNodeLength": 245, "sourceBeforeFix": "4", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1", "fixCommitParentSHA1": "4f5a400f1287161c958720eea79143466191833d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java\nindex 3d3b5f1..5e1bae9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -294,7 +294,7 @@\n     }\n \n     /** Notify all listeners about the audit start */\n-    protected void fireAuditStarted() {\n+    void fireAuditStarted() {\n         final AuditEvent evt = new AuditEvent(this);\n         for (final AuditListener listener : listeners) {\n             listener.auditStarted(evt);\n@@ -302,7 +302,7 @@\n     }\n \n     /** Notify all listeners about the audit end */\n-    protected void fireAuditFinished() {\n+    void fireAuditFinished() {\n         final AuditEvent evt = new AuditEvent(this);\n         for (final AuditListener listener : listeners) {\n             listener.auditFinished(evt);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 304, "bugNodeStartChar": 10958, "bugNodeLength": 255, "fixLineNum": 304, "fixNodeStartChar": 10958, "fixNodeLength": 245, "sourceBeforeFix": "4", "sourceAfterFix": "0"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "4f5a400f1287161c958720eea79143466191833d", "fixCommitParentSHA1": "cc7aeaec906dc3c864477e3050510009b2a946ee", "bugFilePath": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java\nindex 2543c7f..365d382 100644\n--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java\n+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java\n@@ -17,7 +17,7 @@\n     private static ConfigurationBuilder builder;\n \n     @BeforeClass\n-    public static void setConfigurationBuilder() throws CheckstyleException {\n+    public static void setConfigurationBuilder() {\n         builder = new IndentationConfigurationBuilder(new File(\"src/it/\"));\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 19, "bugNodeStartChar": 627, "bugNodeLength": 172, "fixLineNum": 19, "fixNodeStartChar": 627, "fixNodeLength": 145, "sourceBeforeFix": "9", "sourceAfterFix": "9"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "8e168c23bde5fed98dea0141b0cdcf11a74a7454", "fixCommitParentSHA1": "55c92042eb6986e905529de841d3d1c9a7b2b6dd", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\nindex 2ad47a9..a3266ac 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n@@ -154,7 +154,7 @@\n                     || indentInComment < expectedMinimalIndent && isWarnComment;\n         }\n \n-        throw new IllegalStateException();\n+        throw new IllegalStateException(\"Comments are not consistent\");\n     }\n \n     private static int getLineStart(String line, final int tabWidth) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 157, "bugNodeStartChar": 7115, "bugNodeLength": 27, "fixLineNum": 157, "fixNodeStartChar": 7115, "fixNodeLength": 56, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Comments are not consistent\")"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "15d0f87f156190d739a1ef4903c82c4442923b8a", "fixCommitParentSHA1": "8b70948104e60fe1c6c0e5145fb33842d79342cd", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\nindex a7892a9..a194c0d 100644\n--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n@@ -31,8 +31,7 @@\n \n \tprivate URL url;\n \n-\tpublic ConfigurationBuilder(File aROOT)\n-\t\t\tthrows CheckstyleException {\n+\tpublic ConfigurationBuilder(File aROOT) {\n \t\troot = aROOT;\n \t\tconfiguration = getConfigurationFromXML(XML_NAME, System.getProperties());\n \t\tlistFiles(files, root, \"java\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 34, "bugNodeStartChar": 993, "bugNodeLength": 201, "fixLineNum": 34, "fixNodeStartChar": 993, "fixNodeLength": 171, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "13a49cc45b1527357934dd7802c24686d7bb7858", "fixCommitParentSHA1": "95bfc1ce4b5dcb8b5388e8ed766b0a980c34678b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\nindex 26c49fc..a9c91ae 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java\n@@ -190,7 +190,7 @@\n      * @return File's text\n      * @throws IOException Unable to open or read the file\n      */\n-    private String readFile(final File inputFile, final CharsetDecoder decoder)\n+    private static String readFile(final File inputFile, final CharsetDecoder decoder)\n             throws IOException {\n         final StringBuilder buf = new StringBuilder();\n         final FileInputStream stream = new FileInputStream(inputFile);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 186, "bugNodeStartChar": 6401, "bugNodeLength": 970, "fixLineNum": 186, "fixNodeStartChar": 6401, "fixNodeLength": 977, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0c297230338976247866124f16b86f6990687a2e", "fixCommitParentSHA1": "82ca98909b44120d6cc5c5519ee18b2253732b2a", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\nindex cdbd4dc..f16d241 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\n@@ -46,12 +46,12 @@\n     }\n \n     @Override\n-    public int hashCode() {\n+    public final int hashCode() {\n         return Integer.valueOf(matchValue).hashCode();\n     }\n \n     @Override\n-    public boolean equals(Object object) {\n+    public final boolean equals(Object object) {\n         if (object instanceof IntMatchFilter) {\n             final IntMatchFilter other = (IntMatchFilter) object;\n             return matchValue == other.matchValue;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 48, "bugNodeStartChar": 1663, "bugNodeLength": 98, "fixLineNum": 48, "fixNodeStartChar": 1663, "fixNodeLength": 104, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0c297230338976247866124f16b86f6990687a2e", "fixCommitParentSHA1": "82ca98909b44120d6cc5c5519ee18b2253732b2a", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\nindex cdbd4dc..f16d241 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\n@@ -46,12 +46,12 @@\n     }\n \n     @Override\n-    public int hashCode() {\n+    public final int hashCode() {\n         return Integer.valueOf(matchValue).hashCode();\n     }\n \n     @Override\n-    public boolean equals(Object object) {\n+    public final boolean equals(Object object) {\n         if (object instanceof IntMatchFilter) {\n             final IntMatchFilter other = (IntMatchFilter) object;\n             return matchValue == other.matchValue;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 53, "bugNodeStartChar": 1767, "bugNodeLength": 255, "fixLineNum": 53, "fixNodeStartChar": 1767, "fixNodeLength": 261, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "655a496c88fb075c62147484be2baa4e4c7e3f4d", "fixCommitParentSHA1": "841746e9c38976d2624204633bfead47efe7e714", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java\nindex 78271e9..fc165a7 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java\n@@ -253,7 +253,7 @@\n         assertEquals(\"last line.\", \"</checkstyle>\", lines[lines.length - 1]);\n     }\n \n-    private static class TestException extends Exception {\n+    private static class TestException extends RuntimeException {\n \n         private static final long serialVersionUID = 1L;\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 256, "bugNodeStartChar": 9269, "bugNodeLength": 255, "fixLineNum": 256, "fixNodeStartChar": 9269, "fixNodeLength": 262, "sourceBeforeFix": "private static class TestException extends Exception {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print(\"stackTrace\");   } } ", "sourceAfterFix": "private static class TestException extends RuntimeException {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print(\"stackTrace\");   } } "}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\nindex e872768..841ca74 100644\n--- a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n@@ -139,7 +139,7 @@\n                     || indentInComment < expectedMinimalIndent && isWarnComment;\n         }\n \n-        throw new IllegalArgumentException();\n+        throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");\n     }\n \n     private static int getLineStart(String line, final int tabWidth)\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 142, "bugNodeStartChar": 5755, "bugNodeLength": 30, "fixLineNum": 142, "fixNodeStartChar": 5755, "fixNodeLength": 72, "sourceBeforeFix": "new IllegalArgumentException()", "sourceAfterFix": "new IllegalArgumentException(\"Cannot determine if commit is consistent\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java\nindex 767ef08..07040d3 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java\n@@ -38,7 +38,7 @@\n      */\n     public SeverityLevelCounter(SeverityLevel level) {\n         if (level == null) {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"'level' cannot be null\");\n         }\n         this.level = level;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 41, "bugNodeStartChar": 1687, "bugNodeLength": 30, "fixLineNum": 41, "fixNodeStartChar": 1687, "fixNodeLength": 54, "sourceBeforeFix": "new IllegalArgumentException()", "sourceAfterFix": "new IllegalArgumentException(\"'level' cannot be null\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java\nindex f3c6677..e14f103 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java\n@@ -288,7 +288,7 @@\n \n             @Override\n             public void close() throws IOException {\n-                throw new IOException();\n+                throw new IOException(\"Test IOException\");\n             }\n         });\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 291, "bugNodeStartChar": 9892, "bugNodeLength": 17, "fixLineNum": 291, "fixNodeStartChar": 9892, "fixNodeLength": 35, "sourceBeforeFix": "new IOException()", "sourceAfterFix": "new IOException(\"Test IOException\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java\nindex 2628ea7..c1d7cc7 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java\n@@ -35,7 +35,7 @@\n         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n-        counter.addException(event, new IllegalStateException());\n+        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(1, counter.getCount());\n     }\n \n@@ -44,7 +44,7 @@\n         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.WARNING);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n-        counter.addException(event, new IllegalStateException());\n+        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(0, counter.getCount());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 38, "bugNodeStartChar": 1623, "bugNodeLength": 27, "fixLineNum": 38, "fixNodeStartChar": 1623, "fixNodeLength": 55, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Test IllegalStateException\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java\nindex 2628ea7..c1d7cc7 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java\n@@ -35,7 +35,7 @@\n         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n-        counter.addException(event, new IllegalStateException());\n+        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(1, counter.getCount());\n     }\n \n@@ -44,7 +44,7 @@\n         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.WARNING);\n         final AuditEvent event = new AuditEvent(this, \"ATest.java\", null);\n         assertEquals(0, counter.getCount());\n-        counter.addException(event, new IllegalStateException());\n+        counter.addException(event, new IllegalStateException(\"Test IllegalStateException\"));\n         assertEquals(0, counter.getCount());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 47, "bugNodeStartChar": 2009, "bugNodeLength": 27, "fixLineNum": 47, "fixNodeStartChar": 2009, "fixNodeLength": 55, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Test IllegalStateException\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\nindex cbbad88..c917a63 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n@@ -154,7 +154,7 @@\n                     || indentInComment < expectedMinimalIndent && isWarnComment;\n         }\n \n-        throw new IllegalArgumentException();\n+        throw new IllegalStateException();\n     }\n \n     private static int getLineStart(String line, final int tabWidth) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 157, "bugNodeStartChar": 7103, "bugNodeLength": 30, "fixLineNum": 157, "fixNodeStartChar": 7103, "fixNodeLength": 27, "sourceBeforeFix": "new IllegalArgumentException()", "sourceAfterFix": "new IllegalStateException()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4088948e247a69deb7f46f4ac75011b160d42f51", "fixCommitParentSHA1": "8d727a31ac7cd98323e8098d43ed3ef9b0168a75", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\nindex 0b23d6d..00aedb7 100644\n--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n@@ -25,7 +25,7 @@\n \n \tprivate final List<File> files = new ArrayList<>();\n \n-\tConfiguration config;\n+\tfinal Configuration config;\n \n \tURL url;\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 28, "bugNodeStartChar": 812, "bugNodeLength": 21, "fixLineNum": 28, "fixNodeStartChar": 812, "fixNodeLength": 27, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c75c9f00ac9e34031b88f097a9f436ec261e3b82", "fixCommitParentSHA1": "230cd73883c40bf535cfca2d745f1f98564753db", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\nindex 8cc2ab4..f0c69f2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n@@ -63,7 +63,7 @@\n     private final JTextArea textArea;\n     private File lastDirectory;\n     private File currentFile;\n-    private final Action reloadAction;\n+    private final ReloadAction reloadAction;\n     private final List<Integer>   linesToPosition  = new ArrayList<>();\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 66, "bugNodeStartChar": 2448, "bugNodeLength": 34, "fixLineNum": 66, "fixNodeStartChar": 2448, "fixNodeLength": 40, "sourceBeforeFix": "private final Action reloadAction; ", "sourceAfterFix": "private final ReloadAction reloadAction; "}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\nindex 263738a..cfc800e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n@@ -424,7 +424,7 @@\n          * @throws SAXException if an error occurs\n          * @throws ParserConfigurationException if an error occurs\n          */\n-        public InternalLoader()\n+        InternalLoader()\n             throws SAXException, ParserConfigurationException {\n             super(createIdToResourceNameMap());\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 422, "bugNodeStartChar": 17686, "bugNodeLength": 328, "fixLineNum": 422, "fixNodeStartChar": 17686, "fixNodeLength": 321, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\nindex 3bf5f81..1635a6e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java\n@@ -49,7 +49,7 @@\n      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n-    public PackageObjectFactory(Set<String> packageNames,\n+    PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 46, "bugNodeStartChar": 1853, "bugNodeLength": 678, "fixLineNum": 46, "fixNodeStartChar": 1853, "fixNodeLength": 671, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\nindex 792d889..98c5422 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java\n@@ -323,7 +323,7 @@\n          * Creates new instance of ClassFrame\n          * @param parent parent frame\n          */\n-        public ClassFrame(LexicalFrame parent) {\n+        ClassFrame(LexicalFrame parent) {\n             super(parent);\n             instanceMembers = Sets.newHashSet();\n             instanceMethods = Sets.newHashSet();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 322, "bugNodeStartChar": 10926, "bugNodeLength": 377, "fixLineNum": 322, "fixNodeStartChar": 10926, "fixNodeLength": 370, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\nindex f8487b3..0c665d9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\n@@ -429,7 +429,7 @@\n          * @param surroundingClass name of current surrounding class.\n          * @param check the check we use to load class.\n          */\n-        public RegularClass(final Token name,\n+        RegularClass(final Token name,\n                              final String surroundingClass,\n                              final AbstractTypeAwareCheck check) {\n             super(name);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 426, "bugNodeStartChar": 14842, "bugNodeLength": 568, "fixLineNum": 426, "fixNodeStartChar": 14842, "fixNodeLength": 561, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\nindex 73ef8f1..b8f6a0c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java\n@@ -449,7 +449,7 @@\n          * @param lastLine the last line of the suppression region\n          * @param lastColumn the last column of the suppression region\n          */\n-        public Entry(String checkName, int firstLine, int firstColumn,\n+        Entry(String checkName, int firstLine, int firstColumn,\n             int lastLine, int lastColumn) {\n             this.checkName = checkName;\n             this.firstLine = firstLine;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 444, "bugNodeStartChar": 17164, "bugNodeLength": 746, "fixLineNum": 444, "fixNodeStartChar": 17164, "fixNodeLength": 739, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\nindex db1511a..8d5fcda 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n@@ -204,7 +204,7 @@\n          * Constructs a stack node for a method definition.\n          * @param ast AST for the method definition.\n          */\n-        public MethodNode(DetailAST ast) {\n+        MethodNode(DetailAST ast) {\n             method = ast;\n             callingSuper = false;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 203, "bugNodeStartChar": 6771, "bugNodeLength": 241, "fixLineNum": 203, "fixNodeStartChar": 6771, "fixNodeLength": 234, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\nindex 5a4d380..b0598b1 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\n@@ -543,7 +543,7 @@\n          * @param staticType is this a static inner type (class or enum).\n          * @param frameName name associated with the frame, which can be a\n          */\n-        public FieldFrame(FieldFrame parent, boolean staticType, String frameName) {\n+        FieldFrame(FieldFrame parent, boolean staticType, String frameName) {\n             this.parent = parent;\n             this.staticType = staticType;\n             this.frameName = frameName;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 540, "bugNodeStartChar": 19318, "bugNodeLength": 444, "fixLineNum": 540, "fixNodeStartChar": 19318, "fixNodeLength": 437, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java\nindex 802fefc..60b75e9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java\n@@ -187,7 +187,7 @@\n          * Creates new method context.\n          * @param checking should we check this method or not.\n          */\n-        public Context(boolean checking) {\n+        Context(boolean checking) {\n             this.checking = checking;\n             count = 0;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 186, "bugNodeStartChar": 5753, "bugNodeLength": 231, "fixLineNum": 186, "fixNodeStartChar": 5753, "fixNodeLength": 224, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java\nindex d2429dc..bd45bc7 100755\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java\n@@ -646,7 +646,7 @@\n          * @param messageKey message key\n          * @param messageArguments message arguments\n          */\n-        public ParseErrorMessage(int lineNumber, String messageKey, Object ... messageArguments) {\n+        ParseErrorMessage(int lineNumber, String messageKey, Object ... messageArguments) {\n             this.lineNumber = lineNumber;\n             this.messageKey = messageKey;\n             this.messageArguments = messageArguments.clone();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 642, "bugNodeStartChar": 22092, "bugNodeLength": 460, "fixLineNum": 642, "fixNodeStartChar": 22092, "fixNodeLength": 453, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java\nindex 3f726ff..46e4e31 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java\n@@ -210,7 +210,7 @@\n          * @param lineNo line of class definition.\n          * @param columnNo column of class definition.\n          */\n-        public Context(String className, int lineNo, int columnNo) {\n+        Context(String className, int lineNo, int columnNo) {\n             this.className = className;\n             this.lineNo = lineNo;\n             this.columnNo = columnNo;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 207, "bugNodeStartChar": 7318, "bugNodeLength": 424, "fixLineNum": 207, "fixNodeStartChar": 7318, "fixNodeLength": 417, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java\nindex 17327c3..cc9a7a2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java\n@@ -229,7 +229,7 @@\n          * Creates new instance.\n          * @param checking should we check in current context or not.\n          */\n-        public Context(boolean checking) {\n+        Context(boolean checking) {\n             this.checking = checking;\n             count = 0;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 228, "bugNodeStartChar": 7321, "bugNodeLength": 232, "fixLineNum": 228, "fixNodeStartChar": 7321, "fixNodeLength": 225, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java\nindex 448f6ef..62e606b 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java\n@@ -203,7 +203,7 @@\n          * Creates new member context.\n          * @param ast member AST node.\n          */\n-        public Context(DetailAST ast) {\n+        Context(DetailAST ast) {\n             this.ast = ast;\n             count = 0;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 202, "bugNodeStartChar": 6037, "bugNodeLength": 194, "fixLineNum": 202, "fixNodeStartChar": 6037, "fixNodeLength": 187, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\nindex 8a36333..2f66e40 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\n@@ -47,7 +47,7 @@\n      * @throws NumberFormatException if a component substring does not\n      * contain a parsable integer.\n      */\n-    public CSVFilter(String pattern) {\n+    CSVFilter(String pattern) {\n         final StringTokenizer tokenizer = new StringTokenizer(pattern, \",\");\n         while (tokenizer.hasMoreTokens()) {\n             final String token = tokenizer.nextToken().trim();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 41, "bugNodeStartChar": 1552, "bugNodeLength": 1181, "fixLineNum": 41, "fixNodeStartChar": 1552, "fixNodeLength": 1174, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\nindex d0667b6..cdbd4dc 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java\n@@ -31,7 +31,7 @@\n      * Constructs a MatchFilter for an int.\n      * @param matchValue the matching int.\n      */\n-    public IntMatchFilter(int matchValue) {\n+    IntMatchFilter(int matchValue) {\n         this.matchValue = matchValue;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 30, "bugNodeStartChar": 1271, "bugNodeLength": 186, "fixLineNum": 30, "fixNodeStartChar": 1271, "fixNodeLength": 179, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java\nindex ee52398..d024171 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java\n@@ -38,7 +38,7 @@\n      * @param lowerBound the lower bound of the range.\n      * @param upperBound the upper bound of the range.\n      */\n-    public IntRangeFilter(int lowerBound, int upperBound) {\n+    IntRangeFilter(int lowerBound, int upperBound) {\n         this.lowerBound = lowerBound;\n         this.upperBound = upperBound;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 35, "bugNodeStartChar": 1384, "bugNodeLength": 366, "fixLineNum": 35, "fixNodeStartChar": 1384, "fixNodeLength": 359, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java\nindex 46173be..87c3768 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java\n@@ -245,7 +245,7 @@\n         private final Border dragBorder;\n         private final Listener listener;\n \n-        public FileDropTargetListener(Component component, Border dragBorder, Listener listener) {\n+        FileDropTargetListener(Component component, Border dragBorder, Listener listener) {\n             this.component = component;\n             this.dragBorder = dragBorder;\n             this.listener = listener;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 248, "bugNodeStartChar": 8967, "bugNodeLength": 220, "fixLineNum": 248, "fixNodeStartChar": 8967, "fixNodeLength": 213, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\nindex a7e14a0..8cf55f7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n@@ -195,7 +195,7 @@\n         private int visibleRow;\n \n         /** Creates a new instance */\n-        public TreeTableCellRenderer(TreeModel model) {\n+        TreeTableCellRenderer(TreeModel model) {\n             super(model);\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 197, "bugNodeStartChar": 7022, "bugNodeLength": 121, "fixLineNum": 197, "fixNodeStartChar": 7022, "fixNodeLength": 114, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java\nindex cba24db..75af5b4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java\n@@ -44,7 +44,7 @@\n     /**\n      * @param jTreeTable TreeTable to perform updates on.\n      */\n-    public ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {\n+    ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {\n         treeTable = jTreeTable;\n         getListSelectionModel().addListSelectionListener(createListSelectionListener());\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 44, "bugNodeStartChar": 1923, "bugNodeLength": 264, "fixLineNum": 44, "fixNodeStartChar": 1923, "fixNodeLength": 257, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java\nindex 153f177..1c00e1a 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java\n@@ -94,7 +94,7 @@\n         /**\n          * Contstructor\n          */\n-        public FrameShower(JFrame frame) {\n+        FrameShower(JFrame frame) {\n             this.frame = frame;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 94, "bugNodeStartChar": 2981, "bugNodeLength": 124, "fixLineNum": 94, "fixNodeStartChar": 2981, "fixNodeLength": 117, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\nindex cdd3f1f..8cc2ab4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n@@ -223,7 +223,7 @@\n         /**\n          * Contstructor\n          */\n-        public FrameShower(Component parent, final String msg) {\n+        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }\n@@ -258,7 +258,7 @@\n          */\n         private static final long serialVersionUID = -1926935338069418119L;\n \n-        public FileSelectionAction() {\n+        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }\n@@ -283,7 +283,7 @@\n          */\n         private static final long serialVersionUID = -1021880396046355863L;\n \n-        public ReloadAction() {\n+        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }\n@@ -299,7 +299,7 @@\n     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n \n-        public FileDropListener(JScrollPane scrollPane) {\n+        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 223, "bugNodeStartChar": 7753, "bugNodeLength": 176, "fixLineNum": 223, "fixNodeStartChar": 7753, "fixNodeLength": 169, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\nindex cdd3f1f..8cc2ab4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n@@ -223,7 +223,7 @@\n         /**\n          * Contstructor\n          */\n-        public FrameShower(Component parent, final String msg) {\n+        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }\n@@ -258,7 +258,7 @@\n          */\n         private static final long serialVersionUID = -1926935338069418119L;\n \n-        public FileSelectionAction() {\n+        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }\n@@ -283,7 +283,7 @@\n          */\n         private static final long serialVersionUID = -1021880396046355863L;\n \n-        public ReloadAction() {\n+        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }\n@@ -299,7 +299,7 @@\n     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n \n-        public FileDropListener(JScrollPane scrollPane) {\n+        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 261, "bugNodeStartChar": 8683, "bugNodeLength": 137, "fixLineNum": 261, "fixNodeStartChar": 8683, "fixNodeLength": 130, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\nindex cdd3f1f..8cc2ab4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n@@ -223,7 +223,7 @@\n         /**\n          * Contstructor\n          */\n-        public FrameShower(Component parent, final String msg) {\n+        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }\n@@ -258,7 +258,7 @@\n          */\n         private static final long serialVersionUID = -1926935338069418119L;\n \n-        public FileSelectionAction() {\n+        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }\n@@ -283,7 +283,7 @@\n          */\n         private static final long serialVersionUID = -1021880396046355863L;\n \n-        public ReloadAction() {\n+        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }\n@@ -299,7 +299,7 @@\n     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n \n-        public FileDropListener(JScrollPane scrollPane) {\n+        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 286, "bugNodeStartChar": 9487, "bugNodeLength": 130, "fixLineNum": 286, "fixNodeStartChar": 9487, "fixNodeLength": 123, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\nindex cdd3f1f..8cc2ab4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n@@ -223,7 +223,7 @@\n         /**\n          * Contstructor\n          */\n-        public FrameShower(Component parent, final String msg) {\n+        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }\n@@ -258,7 +258,7 @@\n          */\n         private static final long serialVersionUID = -1926935338069418119L;\n \n-        public FileSelectionAction() {\n+        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }\n@@ -283,7 +283,7 @@\n          */\n         private static final long serialVersionUID = -1021880396046355863L;\n \n-        public ReloadAction() {\n+        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }\n@@ -299,7 +299,7 @@\n     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n \n-        public FileDropListener(JScrollPane scrollPane) {\n+        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 302, "bugNodeStartChar": 9973, "bugNodeLength": 101, "fixLineNum": 302, "fixNodeStartChar": 9973, "fixNodeLength": 94, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "fixCommitParentSHA1": "3b452a2e88d0cb670be19818dbd8166335d65884", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java b/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java\nindex e90276c..a062b14 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java\n@@ -8,7 +8,7 @@\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n \n class DebugChecker extends Checker {\n-    public DebugChecker() {\n+    DebugChecker() {\n     }\n \n     @Override\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 11, "bugNodeStartChar": 249, "bugNodeLength": 29, "fixLineNum": 11, "fixNodeStartChar": 249, "fixNodeLength": 22, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "82e3e077f43be242bd67e07cb0f2298c99aded5c", "fixCommitParentSHA1": "56c745bef68fc2c78a9eb8f177275b5a05ddd73e", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java\nindex 927b2b7..653e460 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java\n@@ -37,7 +37,7 @@\n  *\n  * @author Philip Milne\n  */\n-public class AbstractCellEditor implements CellEditor {\n+public abstract class AbstractCellEditor implements CellEditor {\n \n     /**\n      * A list of event listeners for the cell editor.\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 29, "bugNodeStartChar": 1269, "bugNodeLength": 2834, "fixLineNum": 29, "fixNodeStartChar": 1269, "fixNodeLength": 2843, "sourceBeforeFix": "1", "sourceAfterFix": "1025"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "cea7f4acbe4f286cbb031efa816f9e881278fdc3", "fixCommitParentSHA1": "5e1cf30d49dbffa091f1aaf0167636edaab10673", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\nindex a36aee0..3f264de 100644\n--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n@@ -32,14 +32,14 @@\n \tfinal Pattern warnPattern = Utils.createPattern(\".*[ ]*//[ ]*warn[ ]*|/[*]warn[*]/\");\n \n \tpublic ConfigurationBuilder(File aROOT)\n-\t\t\tthrows CheckstyleException, IOException {\n+\t\t\tthrows CheckstyleException {\n \t\troot = aROOT;\n \t\tconfig = getConfigurationFromXML(XML_NAME, System.getProperties());\n \t\tlistFiles(files, root, \"java\");\n \t}\n \n \tprivate static Configuration getConfigurationFromXML(String aConfigName,\n-\t\t\tProperties aProps) throws CheckstyleException {\n+\t\t\tProperties aProps) {\n \t\ttry {\n \t\t\treturn ConfigurationLoader.loadConfiguration(aConfigName,\n \t\t\t\t\tnew PropertiesExpander(aProps));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 41, "bugNodeStartChar": 1145, "bugNodeLength": 407, "fixLineNum": 41, "fixNodeStartChar": 1145, "fixNodeLength": 380, "sourceBeforeFix": "10", "sourceAfterFix": "10"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "cea7f4acbe4f286cbb031efa816f9e881278fdc3", "fixCommitParentSHA1": "5e1cf30d49dbffa091f1aaf0167636edaab10673", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java b/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java\nindex 0cbb1b1..e90276c 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DebugChecker.java\n@@ -8,7 +8,7 @@\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n \n class DebugChecker extends Checker {\n-    public DebugChecker() throws CheckstyleException {\n+    public DebugChecker() {\n     }\n \n     @Override\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 11, "bugNodeStartChar": 249, "bugNodeLength": 56, "fixLineNum": 11, "fixNodeStartChar": 249, "fixNodeLength": 29, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "cea7f4acbe4f286cbb031efa816f9e881278fdc3", "fixCommitParentSHA1": "5e1cf30d49dbffa091f1aaf0167636edaab10673", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlRegExpTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlRegExpTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlRegExpTest.java\nindex c3148ca..6bd51d6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlRegExpTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlRegExpTest.java\n@@ -30,7 +30,7 @@\n     private final PkgControl pcCommon = new PkgControl(pcRoot, \"common\");\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         pcRoot.addGuard(new Guard(false, false, \".*\\\\.(spring|lui)framework\", false, true));\n         pcRoot.addGuard(new Guard(false, false, \"org\\\\.hibernate\", false, true));\n         pcRoot.addGuard(new Guard(true, false, \"org\\\\.(apache|lui)\\\\.commons\", false, true));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 32, "bugNodeStartChar": 1423, "bugNodeLength": 403, "fixLineNum": 32, "fixNodeStartChar": 1423, "fixNodeLength": 386, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "cea7f4acbe4f286cbb031efa816f9e881278fdc3", "fixCommitParentSHA1": "5e1cf30d49dbffa091f1aaf0167636edaab10673", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java\nindex f794a00..3dea603 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java\n@@ -30,7 +30,7 @@\n     private final PkgControl pcCommon = new PkgControl(pcRoot, \"common\");\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         pcRoot.addGuard(new Guard(false, false, \"org.springframework\", false, false));\n         pcRoot.addGuard(new Guard(false, false, \"org.hibernate\", false, false));\n         pcRoot.addGuard(new Guard(true, false, \"org.apache.commons\", false, false));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 32, "bugNodeStartChar": 1417, "bugNodeLength": 392, "fixLineNum": 32, "fixNodeStartChar": 1417, "fixNodeLength": 375, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\nindex 395f4ac..f20e030 100644\n--- a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n@@ -61,7 +61,7 @@\n                     final int actualIndent = getLineStart(line, tabWidth);\n \n                     if (actualIndent != indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n@@ -75,14 +75,14 @@\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 64, "bugNodeStartChar": 2471, "bugNodeLength": 443, "fixLineNum": 64, "fixNodeStartChar": 2471, "fixNodeLength": 448, "sourceBeforeFix": "new RuntimeException(String.format(\"File \\\"%1$s\\\" has incorrect indentation in comment.\" + \"Line %2$d: comment:%3$d, actual:%4$d.\",aFileName,lineNumber,indentInComment,actualIndent))", "sourceAfterFix": "new IllegalStateException(String.format(\"File \\\"%1$s\\\" has incorrect indentation in comment.\" + \"Line %2$d: comment:%3$d, actual:%4$d.\",aFileName,lineNumber,indentInComment,actualIndent))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\nindex 395f4ac..f20e030 100644\n--- a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n@@ -61,7 +61,7 @@\n                     final int actualIndent = getLineStart(line, tabWidth);\n \n                     if (actualIndent != indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n@@ -75,14 +75,14 @@\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 78, "bugNodeStartChar": 3147, "bugNodeLength": 234, "fixLineNum": 78, "fixNodeStartChar": 3147, "fixNodeLength": 239, "sourceBeforeFix": "new RuntimeException(String.format(\"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",aFileName,lineNumber))", "sourceAfterFix": "new IllegalStateException(String.format(\"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",aFileName,lineNumber))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\nindex 395f4ac..f20e030 100644\n--- a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java\n@@ -61,7 +61,7 @@\n                     final int actualIndent = getLineStart(line, tabWidth);\n \n                     if (actualIndent != indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n@@ -75,14 +75,14 @@\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d(%3$s)\",\n                                     aFileName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 85, "bugNodeStartChar": 3521, "bugNodeLength": 361, "fixLineNum": 85, "fixNodeStartChar": 3521, "fixNodeLength": 366, "sourceBeforeFix": "new RuntimeException(String.format(\"File \\\"%1$s\\\" has no indentation comment or its format \" + \"malformed. Error on line: %2$d(%3$s)\",aFileName,lineNumber,line))", "sourceAfterFix": "new IllegalStateException(String.format(\"File \\\"%1$s\\\" has no indentation comment or its format \" + \"malformed. Error on line: %2$d(%3$s)\",aFileName,lineNumber,line))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\nindex 732a450..436a17a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n@@ -131,7 +131,7 @@\n         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n-            throw new Exception(\"File \" + file.getPath() + \" should not exist\");\n+            throw new IllegalStateException(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 134, "bugNodeStartChar": 5328, "bugNodeLength": 61, "fixLineNum": 134, "fixNodeStartChar": 5328, "fixNodeLength": 73, "sourceBeforeFix": "new Exception(\"File \" + file.getPath() + \" should not exist\")", "sourceAfterFix": "new IllegalStateException(\"File \" + file.getPath() + \" should not exist\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\nindex cfc9454..1489b26 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n@@ -79,7 +79,7 @@\n                     final int actualIndent = getLineStart(line, tabWidth);\n \n                     if (actualIndent != indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n@@ -93,14 +93,14 @@\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d\",\n                                     aFileName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 82, "bugNodeStartChar": 3835, "bugNodeLength": 443, "fixLineNum": 82, "fixNodeStartChar": 3835, "fixNodeLength": 448, "sourceBeforeFix": "new RuntimeException(String.format(\"File \\\"%1$s\\\" has incorrect indentation in comment.\" + \"Line %2$d: comment:%3$d, actual:%4$d.\",aFileName,lineNumber,indentInComment,actualIndent))", "sourceAfterFix": "new IllegalStateException(String.format(\"File \\\"%1$s\\\" has incorrect indentation in comment.\" + \"Line %2$d: comment:%3$d, actual:%4$d.\",aFileName,lineNumber,indentInComment,actualIndent))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\nindex cfc9454..1489b26 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n@@ -79,7 +79,7 @@\n                     final int actualIndent = getLineStart(line, tabWidth);\n \n                     if (actualIndent != indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n@@ -93,14 +93,14 @@\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d\",\n                                     aFileName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 96, "bugNodeStartChar": 4511, "bugNodeLength": 234, "fixLineNum": 96, "fixNodeStartChar": 4511, "fixNodeLength": 239, "sourceBeforeFix": "new RuntimeException(String.format(\"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",aFileName,lineNumber))", "sourceAfterFix": "new IllegalStateException(String.format(\"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",aFileName,lineNumber))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "fixCommitParentSHA1": "083c9eb1dc214cfe6de4dc4f9f83ff163ff6b79e", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\nindex cfc9454..1489b26 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n@@ -79,7 +79,7 @@\n                     final int actualIndent = getLineStart(line, tabWidth);\n \n                     if (actualIndent != indentInComment) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has incorrect indentation in comment.\"\n                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                         aFileName,\n@@ -93,14 +93,14 @@\n                     }\n \n                     if (!isCommentConsistent(comment)) {\n-                        throw new RuntimeException(String.format(\n+                        throw new IllegalStateException(String.format(\n                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                         aFileName,\n                                         lineNumber));\n                     }\n                 }\n                 else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {\n-                    throw new RuntimeException(String.format(\n+                    throw new IllegalStateException(String.format(\n                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                     + \"malformed. Error on line: %2$d\",\n                                     aFileName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 103, "bugNodeStartChar": 4885, "bugNodeLength": 313, "fixLineNum": 103, "fixNodeStartChar": 4885, "fixNodeLength": 318, "sourceBeforeFix": "new RuntimeException(String.format(\"File \\\"%1$s\\\" has no indentation comment or its format \" + \"malformed. Error on line: %2$d\",aFileName,lineNumber))", "sourceAfterFix": "new IllegalStateException(String.format(\"File \\\"%1$s\\\" has no indentation comment or its format \" + \"malformed. Error on line: %2$d\",aFileName,lineNumber))"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "fixCommitParentSHA1": "9fbba0b3801e46ae45674ddfd720addc7e4ace92", "bugFilePath": "src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java\nindex 3ac4b49..214ee8f 100644\n--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java\n+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java\n@@ -56,7 +56,7 @@\n     /**\n      * Creates a configuration that is functionally close to that in the docs.\n      */\n-    private DefaultConfiguration createConfig(boolean verbose)\n+    private static DefaultConfiguration createConfig(boolean verbose)\n     {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 56, "bugNodeStartChar": 2298, "bugNodeLength": 375, "fixLineNum": 56, "fixNodeStartChar": 2298, "fixNodeLength": 382, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "fixCommitParentSHA1": "9fbba0b3801e46ae45674ddfd720addc7e4ace92", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\nindex f0b141c..cdab379 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\n@@ -110,7 +110,7 @@\n         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n \n-    private void checkDir(File dir) throws Exception {\n+    private static void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 113, "bugNodeStartChar": 3769, "bugNodeLength": 641, "fixLineNum": 113, "fixNodeStartChar": 3769, "fixNodeLength": 648, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b0620242299e0510aaca0606ddfe8b9812803ade", "fixCommitParentSHA1": "a3fdd52b45375939c18963e4363f44fe87bbe3cd", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java b/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java\nindex 62166bb..d82fb89 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java\n@@ -24,7 +24,7 @@\n \n import org.junit.Assert;\n \n-public class TestUtils {\n+public final class TestUtils {\n \n     private TestUtils() {\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 27, "bugNodeStartChar": 1175, "bugNodeLength": 600, "fixLineNum": 27, "fixNodeStartChar": 1175, "fixNodeLength": 606, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java\nindex ea72bb3..f5e341f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java\n@@ -202,7 +202,7 @@\n          * @param line int\n          * @param col int\n          */\n-        public StringInfo(int line, int col) {\n+        StringInfo(int line, int col) {\n             this.line = line;\n             this.col = col;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 200, "bugNodeStartChar": 6619, "bugNodeLength": 239, "fixLineNum": 200, "fixNodeStartChar": 6619, "fixNodeLength": 232, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java\nindex a610765..eb3dc09 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java\n@@ -127,7 +127,7 @@\n         /** c-tor\n          * @param ast class ast\n          * */\n-        public Details(DetailAST ast) {\n+        Details(DetailAST ast) {\n             this.ast = ast;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 127, "bugNodeStartChar": 4657, "bugNodeLength": 133, "fixLineNum": 127, "fixNodeStartChar": 4657, "fixNodeLength": 126, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex e9f76d6..194ba15 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -819,7 +819,7 @@\n          * @param staticImport\n          *        if import is static.\n          */\n-        public ImportDetails(String importFullPath,\n+        ImportDetails(String importFullPath,\n                 int lineNumber, String importGroup, boolean staticImport) {\n             this.importFullPath = importFullPath;\n             this.lineNumber = lineNumber;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 812, "bugNodeStartChar": 30275, "bugNodeLength": 603, "fixLineNum": 812, "fixNodeStartChar": 30275, "fixNodeLength": 596, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java\nindex 074a6bc..ce47892 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java\n@@ -54,7 +54,7 @@\n      * @param text the line of text to parse.\n      * @param lineNo the source line number.\n      */\n-    public TagParser(String[] text, int lineNo) {\n+    TagParser(String[] text, int lineNo) {\n         parseTags(text, lineNo);\n     }\n \n@@ -277,7 +277,7 @@\n          * @param lineNo line number\n          * @param columnNo column number\n          */\n-        public Point(int lineNo, int columnNo) {\n+        Point(int lineNo, int columnNo) {\n             line = lineNo;\n             column = columnNo;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 52, "bugNodeStartChar": 2278, "bugNodeLength": 253, "fixLineNum": 52, "fixNodeStartChar": 2278, "fixNodeLength": 246, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java\nindex 074a6bc..ce47892 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java\n@@ -54,7 +54,7 @@\n      * @param text the line of text to parse.\n      * @param lineNo the source line number.\n      */\n-    public TagParser(String[] text, int lineNo) {\n+    TagParser(String[] text, int lineNo) {\n         parseTags(text, lineNo);\n     }\n \n@@ -277,7 +277,7 @@\n          * @param lineNo line number\n          * @param columnNo column number\n          */\n-        public Point(int lineNo, int columnNo) {\n+        Point(int lineNo, int columnNo) {\n             line = lineNo;\n             column = columnNo;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 275, "bugNodeStartChar": 9878, "bugNodeLength": 257, "fixLineNum": 275, "fixNodeStartChar": 9878, "fixNodeLength": 250, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java\nindex bf8613c..d281836 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java\n@@ -36,7 +36,7 @@\n      * @param currentContents\n      *            content of checked file.\n      **/\n-    public CommentSuppressor(FileContents currentContents) {\n+    CommentSuppressor(FileContents currentContents) {\n         this.currentContents = currentContents;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 33, "bugNodeStartChar": 1429, "bugNodeLength": 247, "fixLineNum": 33, "fixNodeStartChar": 1429, "fixNodeLength": 240, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java\nindex 4077d9f..57592df 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java\n@@ -56,7 +56,7 @@\n      * @param compileFlags the flags to create the regular expression with.\n      * @param reporter used to report violations.\n      */\n-    public DetectorOptions(int compileFlags,\n+    DetectorOptions(int compileFlags,\n             AbstractViolationReporter reporter) {\n         this.compileFlags = compileFlags;\n         this.reporter = reporter;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 54, "bugNodeStartChar": 2212, "bugNodeLength": 342, "fixLineNum": 54, "fixNodeStartChar": 2212, "fixNodeLength": 335, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java\nindex d9993cb..480cebe 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java\n@@ -67,7 +67,7 @@\n      * Creates an instance.\n      * @param options the options to use.\n      */\n-    public MultilineDetector(DetectorOptions options) {\n+    MultilineDetector(DetectorOptions options) {\n         this.options = options;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 66, "bugNodeStartChar": 2343, "bugNodeLength": 175, "fixLineNum": 66, "fixNodeStartChar": 2343, "fixNodeLength": 168, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "fixCommitParentSHA1": "7b01fc489f853f248ee76bda312e5fae7044198b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java\nindex b586d38..0af4be5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java\n@@ -36,7 +36,7 @@\n      * Creates an instance.\n      * @param options the options to use.\n      */\n-    public SinglelineDetector(DetectorOptions options) {\n+    SinglelineDetector(DetectorOptions options) {\n         this.options = options;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 35, "bugNodeStartChar": 1405, "bugNodeLength": 176, "fixLineNum": 35, "fixNodeStartChar": 1405, "fixNodeLength": 169, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java\nindex c67d9aa..f1c1b3f 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java\n@@ -178,7 +178,7 @@\n         final String[] fileExtensions = {\"java\", \"xml\", \"properties\"};\n         c.setFileExtensions(fileExtensions);\n         final int counter = c.process(files);\n-        assertEquals(counter, 1); // comparing to 1 as there is only one legal file in input\n+        assertEquals(1, counter); // comparing to 1 as there is only one legal file in input\n     }\n \n     @SuppressWarnings(\"deprecation\")\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 181, "bugNodeStartChar": 7360, "bugNodeLength": 24, "fixLineNum": 181, "fixNodeStartChar": 7360, "fixNodeLength": 24, "sourceBeforeFix": "assertEquals(counter,1)", "sourceAfterFix": "assertEquals(1,counter)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java\nindex 7f23234..240dc6c 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java\n@@ -303,7 +303,7 @@\n \n     @Test\n     public void testCoverage() {\n-        assertEquals(JavadocTagInfo.VERSION.getType(), JavadocTagInfo.Type.BLOCK);\n+        assertEquals(JavadocTagInfo.Type.BLOCK, JavadocTagInfo.VERSION.getType());\n \n         assertEquals(\"text [@version] name [version] type [BLOCK]\", JavadocTagInfo.VERSION.toString());\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 306, "bugNodeStartChar": 9791, "bugNodeLength": 73, "fixLineNum": 306, "fixNodeStartChar": 9791, "fixNodeLength": 73, "sourceBeforeFix": "assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)", "sourceAfterFix": "assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\nindex c5ba375..89230f6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n@@ -81,7 +81,7 @@\n         final int stringNumber =\n                 UniquePropertiesCheck.getLineNumber(testStrings,\n                         \"some key\");\n-        Assert.assertEquals(stringNumber, 0);\n+        Assert.assertEquals(0, stringNumber);\n     }\n \n     /**\n@@ -97,12 +97,12 @@\n         final SortedSet<LocalizedMessage> messages =\n                 check.process(file, Collections.<String>emptyList());\n         Assert.assertEquals(\"Wrong messages count: \" + messages.size(),\n-                messages.size(), 1);\n+                1, messages.size());\n         final LocalizedMessage message = messages.iterator().next();\n         final String retrievedMessage = messages.iterator().next().getKey();\n         Assert.assertEquals(\"Message key '\" + retrievedMessage\n-                + \"' is not valid\", retrievedMessage,\n-                \"unable.open.cause\");\n+                + \"' is not valid\", \"unable.open.cause\",\n+                retrievedMessage);\n         Assert.assertEquals(\"Message '\" + message.getMessage()\n                 + \"' is not valid\", message.getMessage(),\n                 getCheckMessage(IO_EXCEPTION_KEY, fileName, getFileNotFoundDetail(file)));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 84, "bugNodeStartChar": 3208, "bugNodeLength": 36, "fixLineNum": 84, "fixNodeStartChar": 3208, "fixNodeLength": 36, "sourceBeforeFix": "Assert.assertEquals(stringNumber,0)", "sourceAfterFix": "Assert.assertEquals(0,stringNumber)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\nindex c5ba375..89230f6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n@@ -81,7 +81,7 @@\n         final int stringNumber =\n                 UniquePropertiesCheck.getLineNumber(testStrings,\n                         \"some key\");\n-        Assert.assertEquals(stringNumber, 0);\n+        Assert.assertEquals(0, stringNumber);\n     }\n \n     /**\n@@ -97,12 +97,12 @@\n         final SortedSet<LocalizedMessage> messages =\n                 check.process(file, Collections.<String>emptyList());\n         Assert.assertEquals(\"Wrong messages count: \" + messages.size(),\n-                messages.size(), 1);\n+                1, messages.size());\n         final LocalizedMessage message = messages.iterator().next();\n         final String retrievedMessage = messages.iterator().next().getKey();\n         Assert.assertEquals(\"Message key '\" + retrievedMessage\n-                + \"' is not valid\", retrievedMessage,\n-                \"unable.open.cause\");\n+                + \"' is not valid\", \"unable.open.cause\",\n+                retrievedMessage);\n         Assert.assertEquals(\"Message '\" + message.getMessage()\n                 + \"' is not valid\", message.getMessage(),\n                 getCheckMessage(IO_EXCEPTION_KEY, fileName, getFileNotFoundDetail(file)));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 99, "bugNodeStartChar": 3806, "bugNodeLength": 99, "fixLineNum": 99, "fixNodeStartChar": 3806, "fixNodeLength": 99, "sourceBeforeFix": "Assert.assertEquals(\"Wrong messages count: \" + messages.size(),messages.size(),1)", "sourceAfterFix": "Assert.assertEquals(\"Wrong messages count: \" + messages.size(),1,messages.size())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\nindex c5ba375..89230f6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n@@ -81,7 +81,7 @@\n         final int stringNumber =\n                 UniquePropertiesCheck.getLineNumber(testStrings,\n                         \"some key\");\n-        Assert.assertEquals(stringNumber, 0);\n+        Assert.assertEquals(0, stringNumber);\n     }\n \n     /**\n@@ -97,12 +97,12 @@\n         final SortedSet<LocalizedMessage> messages =\n                 check.process(file, Collections.<String>emptyList());\n         Assert.assertEquals(\"Wrong messages count: \" + messages.size(),\n-                messages.size(), 1);\n+                1, messages.size());\n         final LocalizedMessage message = messages.iterator().next();\n         final String retrievedMessage = messages.iterator().next().getKey();\n         Assert.assertEquals(\"Message key '\" + retrievedMessage\n-                + \"' is not valid\", retrievedMessage,\n-                \"unable.open.cause\");\n+                + \"' is not valid\", \"unable.open.cause\",\n+                retrievedMessage);\n         Assert.assertEquals(\"Message '\" + message.getMessage()\n                 + \"' is not valid\", message.getMessage(),\n                 getCheckMessage(IO_EXCEPTION_KEY, fileName, getFileNotFoundDetail(file)));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 103, "bugNodeStartChar": 4061, "bugNodeLength": 145, "fixLineNum": 103, "fixNodeStartChar": 4061, "fixNodeLength": 145, "sourceBeforeFix": "Assert.assertEquals(\"Message key '\" + retrievedMessage + \"' is not valid\",retrievedMessage,\"unable.open.cause\")", "sourceAfterFix": "Assert.assertEquals(\"Message key '\" + retrievedMessage + \"' is not valid\",\"unable.open.cause\",retrievedMessage)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java\nindex 22421ff..cb2c118 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java\n@@ -90,7 +90,7 @@\n         }\n         catch (IllegalArgumentException e) {\n             final String msg = e.getMessage();\n-            Assert.assertEquals(msg, \"Unexpected token type: methodStub\");\n+            Assert.assertEquals(\"Unexpected token type: methodStub\", msg);\n         }\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 93, "bugNodeStartChar": 3946, "bugNodeLength": 61, "fixLineNum": 93, "fixNodeStartChar": 3946, "fixNodeLength": 61, "sourceBeforeFix": "Assert.assertEquals(msg,\"Unexpected token type: methodStub\")", "sourceAfterFix": "Assert.assertEquals(\"Unexpected token type: methodStub\",msg)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b", "fixCommitParentSHA1": "f0c74333de00353b99ff1e9bfd1365ed4560794c", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java\nindex 11c83ae..3b986d3 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java\n@@ -98,7 +98,7 @@\n     }\n \n     @SuppressWarnings(\"unused\")\n-    public class TestBean extends AutomaticBean {\n+    public static class TestBean extends AutomaticBean {\n \n         private String privateField;\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 100, "bugNodeStartChar": 3719, "bugNodeLength": 806, "fixLineNum": 100, "fixNodeStartChar": 3719, "fixNodeLength": 813, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7e1d5d0a2d4eeebf14b406722a16cb43f6437f1a", "fixCommitParentSHA1": "77c3f223267aab46a071d93342580620c614e269", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java\nindex d632059..11c83ae 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java\n@@ -71,7 +71,7 @@\n     public void testContextualize_InvocationTargetException() {\n         final TestBean testBean = new TestBean();\n         DefaultContext context = new DefaultContext();\n-        context.add(\"exceptionalMethod\", 123f);\n+        context.add(\"exceptionalMethod\", 123.0f);\n         try {\n             testBean.contextualize(context);\n             fail();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 74, "bugNodeStartChar": 2871, "bugNodeLength": 38, "fixLineNum": 74, "fixNodeStartChar": 2871, "fixNodeLength": 40, "sourceBeforeFix": "context.add(\"exceptionalMethod\",123f)", "sourceAfterFix": "context.add(\"exceptionalMethod\",123.0f)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java", "fixPatch": "diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\nindex e2b68fd..3d7c4b5 100644\n--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java\n@@ -37,7 +37,7 @@\n \t\tlistFiles(files, ROOT, \"java\");\n \t}\n \n-\tprivate Configuration getConfigurationFromXML(String aConfigName,\n+\tprivate static Configuration getConfigurationFromXML(String aConfigName,\n \t\t\tProperties aProps) throws CheckstyleException {\n \t\ttry {\n \t\t\treturn ConfigurationLoader.loadConfiguration(aConfigName,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 40, "bugNodeStartChar": 1086, "bugNodeLength": 400, "fixLineNum": 40, "fixNodeStartChar": 1086, "fixNodeLength": 407, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\nindex 3795521..90d10ef 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n@@ -51,12 +51,12 @@\n @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n \n-    private Configuration loadConfiguration(String name)\n+    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n \n-    private Configuration loadConfiguration(\n+    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;\n@@ -213,7 +213,7 @@\n             .containsKey(\"name.invalidPattern\"));\n     }\n \n-    private void verifyConfigNode(\n+    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());\n@@ -298,7 +298,7 @@\n         }\n     }\n \n-    private Properties initProperties() {\n+    private static Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 54, "bugNodeStartChar": 2138, "bugNodeLength": 153, "fixLineNum": 54, "fixNodeStartChar": 2138, "fixNodeLength": 160, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\nindex 3795521..90d10ef 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n@@ -51,12 +51,12 @@\n @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n \n-    private Configuration loadConfiguration(String name)\n+    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n \n-    private Configuration loadConfiguration(\n+    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;\n@@ -213,7 +213,7 @@\n             .containsKey(\"name.invalidPattern\"));\n     }\n \n-    private void verifyConfigNode(\n+    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());\n@@ -298,7 +298,7 @@\n         }\n     }\n \n-    private Properties initProperties() {\n+    private static Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 59, "bugNodeStartChar": 2297, "bugNodeLength": 335, "fixLineNum": 59, "fixNodeStartChar": 2297, "fixNodeLength": 342, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\nindex 3795521..90d10ef 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n@@ -51,12 +51,12 @@\n @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n \n-    private Configuration loadConfiguration(String name)\n+    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n \n-    private Configuration loadConfiguration(\n+    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;\n@@ -213,7 +213,7 @@\n             .containsKey(\"name.invalidPattern\"));\n     }\n \n-    private void verifyConfigNode(\n+    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());\n@@ -298,7 +298,7 @@\n         }\n     }\n \n-    private Properties initProperties() {\n+    private static Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 216, "bugNodeStartChar": 7815, "bugNodeLength": 694, "fixLineNum": 216, "fixNodeStartChar": 7815, "fixNodeLength": 701, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\nindex 3795521..90d10ef 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n@@ -51,12 +51,12 @@\n @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n \n-    private Configuration loadConfiguration(String name)\n+    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n \n-    private Configuration loadConfiguration(\n+    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;\n@@ -213,7 +213,7 @@\n             .containsKey(\"name.invalidPattern\"));\n     }\n \n-    private void verifyConfigNode(\n+    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());\n@@ -298,7 +298,7 @@\n         }\n     }\n \n-    private Properties initProperties() {\n+    private static Properties initProperties() {\n         final Properties props = new Properties();\n         props.put(\"a\", \"A\");\n         props.put(\"b\", \"B\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 301, "bugNodeStartChar": 10925, "bugNodeLength": 174, "fixLineNum": 301, "fixNodeStartChar": 10925, "fixNodeLength": 181, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java\nindex fd20277..3afa734 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java\n@@ -61,7 +61,7 @@\n         validatePackageNames(packageNames);\n     }\n \n-    private void validatePackageNames(Set<String> pkgNames) {\n+    private static void validatePackageNames(Set<String> pkgNames) {\n         final String[] checkstylePackages = {\n             \"com.puppycrawl.tools.checkstyle.\",\n             \"com.puppycrawl.tools.checkstyle.checks.\",\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 64, "bugNodeStartChar": 2365, "bugNodeLength": 1447, "fixLineNum": 64, "fixNodeStartChar": 2365, "fixNodeLength": 1454, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\nindex 9192678..fd4c23e 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\n@@ -129,7 +129,7 @@\n         }\n     }\n \n-    private void checkFile(String filename) throws Exception {\n+    private static void checkFile(String filename) throws Exception {\n         final FileText text = new FileText(new File(filename),\n                            System.getProperty(\"file.encoding\", \"UTF-8\"));\n         final FileContents contents = new FileContents(text);\n@@ -139,7 +139,7 @@\n         }\n     }\n \n-    private void checkTree(final DetailAST node,\n+    private static void checkTree(final DetailAST node,\n                            final DetailAST parent,\n                            final DetailAST prev,\n                            final String filename,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 132, "bugNodeStartChar": 4447, "bugNodeLength": 429, "fixLineNum": 132, "fixNodeStartChar": 4447, "fixNodeLength": 436, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\nindex 9192678..fd4c23e 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java\n@@ -129,7 +129,7 @@\n         }\n     }\n \n-    private void checkFile(String filename) throws Exception {\n+    private static void checkFile(String filename) throws Exception {\n         final FileText text = new FileText(new File(filename),\n                            System.getProperty(\"file.encoding\", \"UTF-8\"));\n         final FileContents contents = new FileContents(text);\n@@ -139,7 +139,7 @@\n         }\n     }\n \n-    private void checkTree(final DetailAST node,\n+    private static void checkTree(final DetailAST node,\n                            final DetailAST parent,\n                            final DetailAST prev,\n                            final String filename,\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 142, "bugNodeStartChar": 4882, "bugNodeLength": 1031, "fixLineNum": 142, "fixNodeStartChar": 4882, "fixNodeLength": 1038, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java\nindex df00707..e700bb2 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java\n@@ -24,7 +24,7 @@\n \n public class FullIdentTest {\n \n-    public void testToString() {\n+    public static void testToString() {\n         DetailAST ast = new DetailAST();\n         ast.setType(TokenTypes.LITERAL_NEW);\n         ast.setColumnNo(14);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 27, "bugNodeStartChar": 1162, "bugNodeLength": 338, "fixLineNum": 27, "fixNodeStartChar": 1162, "fixNodeLength": 345, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\nindex 18daf6f..c5ba375 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java\n@@ -114,7 +114,7 @@\n      * @param file to be opened\n      * @return detail message of {@link FileNotFoundException}\n      */\n-    private String getFileNotFoundDetail(File file) throws Exception {\n+    private static String getFileNotFoundDetail(File file) throws Exception {\n         // Create exception to know detail message we should wait in\n         // LocalisedMessage\n         try {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 111, "bugNodeStartChar": 4431, "bugNodeLength": 684, "fixLineNum": 111, "fixNodeStartChar": 4431, "fixNodeLength": 691, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java\nindex f3b00a9..b8e607b 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java\n@@ -96,7 +96,7 @@\n      * Creates a configuration that is functionally close to that in the docs.\n      * @param verbose verbose mode\n      */\n-    private DefaultConfiguration createConfig(boolean verbose) {\n+    private static DefaultConfiguration createConfig(boolean verbose) {\n         final DefaultConfiguration checkConfig =\n             createCheckConfig(FileTabCharacterCheck.class);\n         checkConfig.addAttribute(\"eachLine\", Boolean.toString(verbose));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 95, "bugNodeStartChar": 3788, "bugNodeLength": 406, "fixLineNum": 95, "fixNodeStartChar": 3788, "fixNodeLength": 413, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java\nindex 7d72aef..30345e8 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java\n@@ -23,7 +23,7 @@\n         Assert.assertTrue(isAstEquals(expectedTree, aRootAST));\n     }\n \n-    private boolean isAstEquals(DetailAST expected, DetailAST actual) {\n+    private static boolean isAstEquals(DetailAST expected, DetailAST actual) {\n         boolean result = false;\n         if (expected == actual) {\n             result = true;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 26, "bugNodeStartChar": 594, "bugNodeLength": 1403, "fixLineNum": 26, "fixNodeStartChar": 594, "fixNodeLength": 1410, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java\nindex 64a1bda..0fcd681 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java\n@@ -116,7 +116,7 @@\n         return checker;\n     }\n \n-    private String[] removeSuppressed(String[] from, String[] remove) {\n+    private static String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 119, "bugNodeStartChar": 5425, "bugNodeLength": 267, "fixLineNum": 119, "fixNodeStartChar": 5425, "fixNodeLength": 274, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java\nindex b3ba9a6..59436f2 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java\n@@ -227,7 +227,7 @@\n         return checker;\n     }\n \n-    private String[] removeSuppressed(String[] from, String[] remove) {\n+    private static String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 230, "bugNodeStartChar": 10975, "bugNodeLength": 267, "fixLineNum": 230, "fixNodeStartChar": 10975, "fixNodeLength": 274, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "fixCommitParentSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java\nindex 030343e..f504635 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java\n@@ -227,7 +227,7 @@\n         return checker;\n     }\n \n-    private String[] removeSuppressed(String[] from, String[] remove) {\n+    private static String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 230, "bugNodeStartChar": 10556, "bugNodeLength": 267, "fixLineNum": 230, "fixNodeStartChar": 10556, "fixNodeLength": 274, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "fixCommitParentSHA1": "931af7ec1411aa04b3f0b5d94373a3da43ce7e27", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\nindex 48d28d0..b89e2cd 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n@@ -180,12 +180,10 @@\n                         ResourceBundle.getBundle(\"checkstylecompilation\");\n                 String version = compilationProperties.getString(\"checkstyle.compile.version\");\n                 assertEquals(String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\"\n-                        + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"\n-                        + \"<file name=\\\"\"\n-                        + expectedPath\n-                        + \"\\\">%n\"\n+                        + \"<checkstyle version=\\\"%s\\\">%n\"\n+                        + \"<file name=\\\"%s\\\">%n\"\n                         + \"</file>%n\"\n-                        + \"</checkstyle>%n\"), systemOut.getLog());\n+                        + \"</checkstyle>%n\", version, expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });\n@@ -219,11 +217,11 @@\n                     + \"/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java\"\n                     .replace(\"/\", File.separator);\n                 assertEquals(String.format(\"Starting audit...%n\"\n-                                + expectedPath + \":3:14: \"\n+                                + \"%1$s:3:14: \"\n                                 + \"warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"\n-                                + expectedPath + \":5:7: \"\n+                                + \"%1$s:5:7: \"\n                                 + \"warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"\n-                                + \"Audit done.%n\"),\n+                                + \"Audit done.%n\", expectedPath),\n                         systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n@@ -243,12 +241,12 @@\n                     + \"/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java\"\n                     .replace(\"/\", File.separator);\n                 assertEquals(String.format(\"Starting audit...%n\"\n-                        + expectedPath + \":3:14: \"\n+                        + \"%1$s:3:14: \"\n                         + \"Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"\n-                        + expectedPath + \":5:7: \"\n+                        + \"%1$s:5:7: \"\n                         + \"Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"\n                         + \"Audit done.%n\"\n-                        + \"Checkstyle ends with 2 errors.%n\"), systemOut.getLog());\n+                        + \"Checkstyle ends with 2 errors.%n\", expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 182, "bugNodeStartChar": 7640, "bugNodeLength": 329, "fixLineNum": 182, "fixNodeStartChar": 7640, "fixNodeLength": 352, "sourceBeforeFix": "String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\" + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"+ \"<file name=\\\"\"+ expectedPath+ \"\\\">%n\"+ \"</file>%n\"+ \"</checkstyle>%n\")", "sourceAfterFix": "String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\" + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"+ \"<file name=\\\"\"+ expectedPath+ \"\\\">%n\"+ \"</file>%n\"+ \"</checkstyle>%n\",version,expectedPath)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "fixCommitParentSHA1": "931af7ec1411aa04b3f0b5d94373a3da43ce7e27", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\nindex 48d28d0..b89e2cd 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n@@ -180,12 +180,10 @@\n                         ResourceBundle.getBundle(\"checkstylecompilation\");\n                 String version = compilationProperties.getString(\"checkstyle.compile.version\");\n                 assertEquals(String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\"\n-                        + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"\n-                        + \"<file name=\\\"\"\n-                        + expectedPath\n-                        + \"\\\">%n\"\n+                        + \"<checkstyle version=\\\"%s\\\">%n\"\n+                        + \"<file name=\\\"%s\\\">%n\"\n                         + \"</file>%n\"\n-                        + \"</checkstyle>%n\"), systemOut.getLog());\n+                        + \"</checkstyle>%n\", version, expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });\n@@ -219,11 +217,11 @@\n                     + \"/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java\"\n                     .replace(\"/\", File.separator);\n                 assertEquals(String.format(\"Starting audit...%n\"\n-                                + expectedPath + \":3:14: \"\n+                                + \"%1$s:3:14: \"\n                                 + \"warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"\n-                                + expectedPath + \":5:7: \"\n+                                + \"%1$s:5:7: \"\n                                 + \"warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"\n-                                + \"Audit done.%n\"),\n+                                + \"Audit done.%n\", expectedPath),\n                         systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n@@ -243,12 +241,12 @@\n                     + \"/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java\"\n                     .replace(\"/\", File.separator);\n                 assertEquals(String.format(\"Starting audit...%n\"\n-                        + expectedPath + \":3:14: \"\n+                        + \"%1$s:3:14: \"\n                         + \"Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"\n-                        + expectedPath + \":5:7: \"\n+                        + \"%1$s:5:7: \"\n                         + \"Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"\n                         + \"Audit done.%n\"\n-                        + \"Checkstyle ends with 2 errors.%n\"), systemOut.getLog());\n+                        + \"Checkstyle ends with 2 errors.%n\", expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 221, "bugNodeStartChar": 9402, "bugNodeLength": 404, "fixLineNum": 221, "fixNodeStartChar": 9402, "fixNodeLength": 418, "sourceBeforeFix": "String.format(\"Starting audit...%n\" + expectedPath + \":3:14: \"+ \"warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"+ expectedPath+ \":5:7: \"+ \"warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"+ \"Audit done.%n\")", "sourceAfterFix": "String.format(\"Starting audit...%n\" + expectedPath + \":3:14: \"+ \"warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"+ expectedPath+ \":5:7: \"+ \"warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"+ \"Audit done.%n\",expectedPath)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "fixCommitParentSHA1": "931af7ec1411aa04b3f0b5d94373a3da43ce7e27", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\nindex 48d28d0..b89e2cd 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java\n@@ -180,12 +180,10 @@\n                         ResourceBundle.getBundle(\"checkstylecompilation\");\n                 String version = compilationProperties.getString(\"checkstyle.compile.version\");\n                 assertEquals(String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\"\n-                        + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"\n-                        + \"<file name=\\\"\"\n-                        + expectedPath\n-                        + \"\\\">%n\"\n+                        + \"<checkstyle version=\\\"%s\\\">%n\"\n+                        + \"<file name=\\\"%s\\\">%n\"\n                         + \"</file>%n\"\n-                        + \"</checkstyle>%n\"), systemOut.getLog());\n+                        + \"</checkstyle>%n\", version, expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });\n@@ -219,11 +217,11 @@\n                     + \"/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java\"\n                     .replace(\"/\", File.separator);\n                 assertEquals(String.format(\"Starting audit...%n\"\n-                                + expectedPath + \":3:14: \"\n+                                + \"%1$s:3:14: \"\n                                 + \"warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"\n-                                + expectedPath + \":5:7: \"\n+                                + \"%1$s:5:7: \"\n                                 + \"warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"\n-                                + \"Audit done.%n\"),\n+                                + \"Audit done.%n\", expectedPath),\n                         systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n@@ -243,12 +241,12 @@\n                     + \"/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java\"\n                     .replace(\"/\", File.separator);\n                 assertEquals(String.format(\"Starting audit...%n\"\n-                        + expectedPath + \":3:14: \"\n+                        + \"%1$s:3:14: \"\n                         + \"Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"\n-                        + expectedPath + \":5:7: \"\n+                        + \"%1$s:5:7: \"\n                         + \"Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"\n                         + \"Audit done.%n\"\n-                        + \"Checkstyle ends with 2 errors.%n\"), systemOut.getLog());\n+                        + \"Checkstyle ends with 2 errors.%n\", expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 245, "bugNodeStartChar": 10671, "bugNodeLength": 407, "fixLineNum": 245, "fixNodeStartChar": 10671, "fixNodeLength": 421, "sourceBeforeFix": "String.format(\"Starting audit...%n\" + expectedPath + \":3:14: \"+ \"Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"+ expectedPath+ \":5:7: \"+ \"Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"+ \"Audit done.%n\"+ \"Checkstyle ends with 2 errors.%n\")", "sourceAfterFix": "String.format(\"Starting audit...%n\" + expectedPath + \":3:14: \"+ \"Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n\"+ expectedPath+ \":5:7: \"+ \"Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n\"+ \"Audit done.%n\"+ \"Checkstyle ends with 2 errors.%n\",expectedPath)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 475, "bugNodeStartChar": 24840, "bugNodeLength": 42, "fixLineNum": 475, "fixNodeStartChar": 24840, "fixNodeLength": 39, "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_01.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_01.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 475, "bugNodeStartChar": 24840, "bugNodeLength": 42, "fixLineNum": 475, "fixNodeStartChar": 24840, "fixNodeLength": 39, "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_01.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_01.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 481, "bugNodeStartChar": 25030, "bugNodeLength": 42, "fixLineNum": 481, "fixNodeStartChar": 25030, "fixNodeLength": 39, "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_02.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_02.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 481, "bugNodeStartChar": 25030, "bugNodeLength": 42, "fixLineNum": 481, "fixNodeStartChar": 25030, "fixNodeLength": 39, "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_02.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_02.java\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 489, "bugNodeStartChar": 25358, "bugNodeLength": 42, "fixLineNum": 489, "fixNodeStartChar": 25358, "fixNodeLength": 39, "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_03.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_03.java\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 489, "bugNodeStartChar": 25358, "bugNodeLength": 42, "fixLineNum": 489, "fixNodeStartChar": 25358, "fixNodeLength": 39, "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_03.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_03.java\")"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "9a582720939c1b4098430d1ab439b9ce045eaf06", "fixCommitParentSHA1": "331992aacd23576c72862ea75d83f15e09af958c", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\nindex 88a8b51..3f62994 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n@@ -505,8 +505,7 @@\n         @Override\n         public void endElement(String namespaceURI,\n                                String localName,\n-                               String qName)\n-            throws SAXException {\n+                               String qName) {\n             if (qName.equals(MODULE)) {\n \n                 final Configuration recentModule =\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 505, "bugNodeStartChar": 20731, "bugNodeLength": 1315, "fixLineNum": 505, "fixNodeStartChar": 20731, "fixNodeLength": 1283, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "9a582720939c1b4098430d1ab439b9ce045eaf06", "fixCommitParentSHA1": "331992aacd23576c72862ea75d83f15e09af958c", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\nindex afc6005..85f6835 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n@@ -89,8 +89,7 @@\n     public void startElement(String namespaceURI,\n                              String localName,\n                              String qName,\n-                             Attributes atts)\n-        throws SAXException {\n+                             Attributes atts) {\n         if (\"package\".equals(qName)) {\n             //push package name, name is mandatory attribute with not empty value by DTD\n             final String name = atts.getValue(\"name\");\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 88, "bugNodeStartChar": 3159, "bugNodeLength": 461, "fixLineNum": 88, "fixNodeStartChar": 3159, "fixNodeLength": 433, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ea06b2fb96f2120ceee04a998021c1dc752e25d3", "fixCommitParentSHA1": "c4928f486c67afa62e7e8fbd5d8f731be7186985", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java\nindex 9adaeee..1149e61 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java\n@@ -395,7 +395,7 @@\n     /**\n      * Structure that contains all details for validation.\n      */\n-    static class Details {\n+    private static class Details {\n         /** Right curly. */\n         private DetailAST rcurly;\n         /** Left curly. */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 395, "bugNodeStartChar": 14545, "bugNodeLength": 383, "fixLineNum": 395, "fixNodeStartChar": 14545, "fixNodeLength": 391, "sourceBeforeFix": "8", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ea06b2fb96f2120ceee04a998021c1dc752e25d3", "fixCommitParentSHA1": "c4928f486c67afa62e7e8fbd5d8f731be7186985", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 0d3a68a..63a3a52 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -780,7 +780,7 @@\n      * group.\n      * @author max\n      */\n-    static class ImportDetails {\n+    private static class ImportDetails {\n         /** Import full path */\n         private String importFullPath;\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 778, "bugNodeStartChar": 29105, "bugNodeLength": 2755, "fixLineNum": 778, "fixNodeStartChar": 29105, "fixNodeLength": 2763, "sourceBeforeFix": "8", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0da6b95ae7af2def88f785b72f886dd418a89d43", "fixCommitParentSHA1": "e13ff7caab177320a0ce2c58d7e6ec3263aaff32", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java\nindex 8d031fe..c76e9e3 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/NeverSuppress.java\n@@ -26,7 +26,7 @@\n  */\n public final class NeverSuppress implements MatchSuppressor {\n     /** The shared instance. */\n-    public static final MatchSuppressor INSTANCE = new NeverSuppress();\n+    static final MatchSuppressor INSTANCE = new NeverSuppress();\n \n     /** Stop creation of instances. */\n     private NeverSuppress() {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 28, "bugNodeStartChar": 1263, "bugNodeLength": 99, "fixLineNum": 28, "fixNodeStartChar": 1263, "fixNodeLength": 92, "sourceBeforeFix": "25", "sourceAfterFix": "24"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java\nindex 8ebe906..9328705 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java\n@@ -144,7 +144,7 @@\n      *\n      * @param basenameSeparator the basename separator\n      */\n-    public void setBasenameSeparator(String basenameSeparator) {\n+    public final void setBasenameSeparator(String basenameSeparator) {\n         this.basenameSeparator = basenameSeparator;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 141, "bugNodeStartChar": 4846, "bugNodeLength": 301, "fixLineNum": 141, "fixNodeStartChar": 4846, "fixNodeLength": 307, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java\nindex c72edc9..43ff2da 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java\n@@ -91,7 +91,7 @@\n      * @throws org.apache.commons.beanutils.ConversionException\n      *         if unable to create Pattern object\n      */\n-    public void setIgnoreStringsRegexp(String ignoreStringsRegexp) {\n+    public final void setIgnoreStringsRegexp(String ignoreStringsRegexp) {\n         if (ignoreStringsRegexp != null\n             && !ignoreStringsRegexp.isEmpty()) {\n             pattern = Utils.createPattern(ignoreStringsRegexp);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 87, "bugNodeStartChar": 2945, "bugNodeLength": 571, "fixLineNum": 87, "fixNodeStartChar": 2945, "fixNodeLength": 577, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 5683b43..70d4697 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -823,7 +823,7 @@\n          * @param importFullPath\n          *        import full path variable.\n          */\n-        public void setImportFullPath(String importFullPath) {\n+        public final void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }\n \n@@ -840,7 +840,7 @@\n          * @param lineNumber\n          *        import line number.\n          */\n-        public void setLineNumber(int lineNumber) {\n+        public final void setLineNumber(int lineNumber) {\n             this.lineNumber = lineNumber;\n         }\n \n@@ -857,7 +857,7 @@\n          * @param importGroup\n          *        import group.\n          */\n-        public void setImportGroup(String importGroup) {\n+        public final void setImportGroup(String importGroup) {\n             this.importGroup = importGroup;\n         }\n \n@@ -874,7 +874,7 @@\n          * @param isStatic\n          *        if import is static.\n          */\n-        public void setStaticImport(boolean isStatic) {\n+        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 821, "bugNodeStartChar": 30403, "bugNodeLength": 258, "fixLineNum": 821, "fixNodeStartChar": 30403, "fixNodeLength": 264, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 5683b43..70d4697 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -823,7 +823,7 @@\n          * @param importFullPath\n          *        import full path variable.\n          */\n-        public void setImportFullPath(String importFullPath) {\n+        public final void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }\n \n@@ -840,7 +840,7 @@\n          * @param lineNumber\n          *        import line number.\n          */\n-        public void setLineNumber(int lineNumber) {\n+        public final void setLineNumber(int lineNumber) {\n             this.lineNumber = lineNumber;\n         }\n \n@@ -857,7 +857,7 @@\n          * @param importGroup\n          *        import group.\n          */\n-        public void setImportGroup(String importGroup) {\n+        public final void setImportGroup(String importGroup) {\n             this.importGroup = importGroup;\n         }\n \n@@ -874,7 +874,7 @@\n          * @param isStatic\n          *        if import is static.\n          */\n-        public void setStaticImport(boolean isStatic) {\n+        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 838, "bugNodeStartChar": 30841, "bugNodeLength": 221, "fixLineNum": 838, "fixNodeStartChar": 30841, "fixNodeLength": 227, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 5683b43..70d4697 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -823,7 +823,7 @@\n          * @param importFullPath\n          *        import full path variable.\n          */\n-        public void setImportFullPath(String importFullPath) {\n+        public final void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }\n \n@@ -840,7 +840,7 @@\n          * @param lineNumber\n          *        import line number.\n          */\n-        public void setLineNumber(int lineNumber) {\n+        public final void setLineNumber(int lineNumber) {\n             this.lineNumber = lineNumber;\n         }\n \n@@ -857,7 +857,7 @@\n          * @param importGroup\n          *        import group.\n          */\n-        public void setImportGroup(String importGroup) {\n+        public final void setImportGroup(String importGroup) {\n             this.importGroup = importGroup;\n         }\n \n@@ -874,7 +874,7 @@\n          * @param isStatic\n          *        if import is static.\n          */\n-        public void setStaticImport(boolean isStatic) {\n+        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 855, "bugNodeStartChar": 31242, "bugNodeLength": 217, "fixLineNum": 855, "fixNodeStartChar": 31242, "fixNodeLength": 223, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 5683b43..70d4697 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -823,7 +823,7 @@\n          * @param importFullPath\n          *        import full path variable.\n          */\n-        public void setImportFullPath(String importFullPath) {\n+        public final void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }\n \n@@ -840,7 +840,7 @@\n          * @param lineNumber\n          *        import line number.\n          */\n-        public void setLineNumber(int lineNumber) {\n+        public final void setLineNumber(int lineNumber) {\n             this.lineNumber = lineNumber;\n         }\n \n@@ -857,7 +857,7 @@\n          * @param importGroup\n          *        import group.\n          */\n-        public void setImportGroup(String importGroup) {\n+        public final void setImportGroup(String importGroup) {\n             this.importGroup = importGroup;\n         }\n \n@@ -874,7 +874,7 @@\n          * @param isStatic\n          *        if import is static.\n          */\n-        public void setStaticImport(boolean isStatic) {\n+        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 872, "bugNodeStartChar": 31664, "bugNodeLength": 230, "fixLineNum": 872, "fixNodeStartChar": 31664, "fixNodeLength": 236, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java\nindex 8b5a17a..cb72825 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java\n@@ -80,7 +80,7 @@\n      * Set the list of illegal packages.\n      * @param from array of illegal packages\n      */\n-    public void setIllegalPkgs(String... from) {\n+    public final void setIllegalPkgs(String... from) {\n         illegalPkgs = from.clone();\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 79, "bugNodeStartChar": 2706, "bugNodeLength": 188, "fixLineNum": 79, "fixNodeStartChar": 2706, "fixNodeLength": 194, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java\nindex 50ebbef..4649414 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java\n@@ -129,7 +129,7 @@\n      * Set the ignore pattern.\n      * @param format a <code>String</code> value\n      */\n-    public void setIgnorePattern(String format) {\n+    public final void setIgnorePattern(String format) {\n         ignorePattern = Utils.createPattern(format);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 128, "bugNodeStartChar": 4059, "bugNodeLength": 200, "fixLineNum": 128, "fixNodeStartChar": 4059, "fixNodeLength": 206, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\nindex 78bf806..84e74db 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\n@@ -69,7 +69,7 @@\n      * Adds a IntFilter to the set.\n      * @param filter the IntFilter to add.\n      */\n-    public void addFilter(IntFilter filter) {\n+    public final void addFilter(IntFilter filter) {\n         filters.add(filter);\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 68, "bugNodeStartChar": 2714, "bugNodeLength": 171, "fixLineNum": 68, "fixNodeStartChar": 2714, "fixNodeLength": 177, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\nindex b6d4690..d8f380d 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n@@ -322,7 +322,7 @@\n      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setCommentFormat(String format) {\n+    public final void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }\n \n@@ -343,7 +343,7 @@\n      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n-    public void setCheckFormat(String format) {\n+    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }\n \n@@ -359,7 +359,7 @@\n      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n-    public void setInfluenceFormat(String format) {\n+    public final void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 320, "bugNodeStartChar": 11645, "bugNodeLength": 303, "fixLineNum": 320, "fixNodeStartChar": 11645, "fixNodeLength": 309, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\nindex b6d4690..d8f380d 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n@@ -322,7 +322,7 @@\n      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setCommentFormat(String format) {\n+    public final void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }\n \n@@ -343,7 +343,7 @@\n      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n-    public void setCheckFormat(String format) {\n+    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }\n \n@@ -359,7 +359,7 @@\n      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n-    public void setInfluenceFormat(String format) {\n+    public final void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 342, "bugNodeStartChar": 12359, "bugNodeLength": 179, "fixLineNum": 342, "fixNodeStartChar": 12359, "fixNodeLength": 185, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\nindex b6d4690..d8f380d 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n@@ -322,7 +322,7 @@\n      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setCommentFormat(String format) {\n+    public final void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }\n \n@@ -343,7 +343,7 @@\n      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n-    public void setCheckFormat(String format) {\n+    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }\n \n@@ -359,7 +359,7 @@\n      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n-    public void setInfluenceFormat(String format) {\n+    public final void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 358, "bugNodeStartChar": 12735, "bugNodeLength": 207, "fixLineNum": 358, "fixNodeStartChar": 12735, "fixNodeLength": 213, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\nindex 55d0ea0..4d4cc93 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n@@ -315,7 +315,7 @@\n      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setOffCommentFormat(String format) {\n+    public final void setOffCommentFormat(String format) {\n         offRegexp = Utils.createPattern(format);\n     }\n \n@@ -324,7 +324,7 @@\n      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setOnCommentFormat(String format) {\n+    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }\n \n@@ -345,7 +345,7 @@\n      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n-    public void setCheckFormat(String format) {\n+    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 313, "bugNodeStartChar": 11403, "bugNodeLength": 302, "fixLineNum": 313, "fixNodeStartChar": 11403, "fixNodeLength": 308, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\nindex 55d0ea0..4d4cc93 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n@@ -315,7 +315,7 @@\n      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setOffCommentFormat(String format) {\n+    public final void setOffCommentFormat(String format) {\n         offRegexp = Utils.createPattern(format);\n     }\n \n@@ -324,7 +324,7 @@\n      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setOnCommentFormat(String format) {\n+    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }\n \n@@ -345,7 +345,7 @@\n      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n-    public void setCheckFormat(String format) {\n+    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 322, "bugNodeStartChar": 11711, "bugNodeLength": 298, "fixLineNum": 322, "fixNodeStartChar": 11711, "fixNodeLength": 304, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\nindex 55d0ea0..4d4cc93 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n@@ -315,7 +315,7 @@\n      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setOffCommentFormat(String format) {\n+    public final void setOffCommentFormat(String format) {\n         offRegexp = Utils.createPattern(format);\n     }\n \n@@ -324,7 +324,7 @@\n      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n-    public void setOnCommentFormat(String format) {\n+    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }\n \n@@ -345,7 +345,7 @@\n      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n-    public void setCheckFormat(String format) {\n+    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 344, "bugNodeStartChar": 12420, "bugNodeLength": 179, "fixLineNum": 344, "fixNodeStartChar": 12420, "fixNodeLength": 185, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\nindex 2cac5f8..b472bd4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n@@ -202,7 +202,7 @@\n      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n-    public void setRowHeight(int newRowHeight) {\n+    public final void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());\n@@ -393,7 +393,7 @@\n          *\n          * @return the list selection model\n          */\n-        ListSelectionModel getListSelectionModel() {\n+        final ListSelectionModel getListSelectionModel() {\n             return listSelectionModel;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 201, "bugNodeStartChar": 7963, "bugNodeLength": 303, "fixLineNum": 201, "fixNodeStartChar": 7963, "fixNodeLength": 309, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\nindex 2cac5f8..b472bd4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n@@ -202,7 +202,7 @@\n      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n-    public void setRowHeight(int newRowHeight) {\n+    public final void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());\n@@ -393,7 +393,7 @@\n          *\n          * @return the list selection model\n          */\n-        ListSelectionModel getListSelectionModel() {\n+        final ListSelectionModel getListSelectionModel() {\n             return listSelectionModel;\n         }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 389, "bugNodeStartChar": 14834, "bugNodeLength": 349, "fixLineNum": 389, "fixNodeStartChar": 14834, "fixNodeLength": 355, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "fixCommitParentSHA1": "b5a5bbdb6de0ceb3f304b02d52205a0536b904df", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java\nindex b26781a..41c629f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java\n@@ -49,7 +49,7 @@\n         return (DetailAST) factory.create(TokenTypes.EOF, \"ROOT\");\n     }\n \n-    void setParseTree(DetailAST parseTree) {\n+    final void setParseTree(DetailAST parseTree) {\n         final DetailAST root = (DetailAST) getRoot();\n         root.setFirstChild(parseTree);\n         final Object[] path = {root};\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 52, "bugNodeStartChar": 1941, "bugNodeLength": 383, "fixLineNum": 52, "fixNodeStartChar": 1941, "fixNodeLength": 389, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2d246f764791db7d2b3fc654c8410b7d51dd83f2", "fixCommitParentSHA1": "8046febbdfef60b63a5f9e023963d70c853a8f09", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java\nindex af1eb07..8dfd37a 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java\n@@ -30,7 +30,7 @@\n /**\n  * Entry point for starting the checkstyle GUI.\n  */\n-public class Main {\n+public final class Main {\n     /**\n      * Main frame\n      */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 30, "bugNodeStartChar": 1229, "bugNodeLength": 1845, "fixLineNum": 30, "fixNodeStartChar": 1229, "fixNodeLength": 1851, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "261e9a2bab6ff12d200a5445425b7fbf3258529b", "fixCommitParentSHA1": "d9829fa230a380f1ef7c5c5e883d107ae694ae41", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\nindex 17b0614..2cac5f8 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java\n@@ -105,7 +105,7 @@\n     /** For Serialisation that will never happen. */\n     private static final long serialVersionUID = -8493693409423365387L;\n     /** A subclass of JTree. */\n-    protected TreeTableCellRenderer tree;\n+    protected final TreeTableCellRenderer tree;\n     private JTextArea editor;\n     private List<Integer> lines2position;\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 107, "bugNodeStartChar": 4434, "bugNodeLength": 69, "fixLineNum": 107, "fixNodeStartChar": 4434, "fixNodeLength": 75, "sourceBeforeFix": "4", "sourceAfterFix": "20"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f24916302751c0e48d107b68a1b0d61aa81d32a8", "fixCommitParentSHA1": "0c61e5d7a5a4c9f7e1a649559151b1fab98c3564", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\nindex c18a455..a4ac5cf 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\n@@ -268,7 +268,7 @@\n                                                     getId(),\n                                                     this.getClass(),\n                                                     null);\n-            throw new RuntimeException(msg.getMessage());\n+            throw new IllegalStateException(msg.getMessage());\n         }\n \n         if (!suppressLoadErrors) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 271, "bugNodeStartChar": 9750, "bugNodeLength": 38, "fixLineNum": 271, "fixNodeStartChar": 9750, "fixNodeLength": 43, "sourceBeforeFix": "new RuntimeException(msg.getMessage())", "sourceAfterFix": "new IllegalStateException(msg.getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f24916302751c0e48d107b68a1b0d61aa81d32a8", "fixCommitParentSHA1": "0c61e5d7a5a4c9f7e1a649559151b1fab98c3564", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java\nindex 88e0054..bfc5938 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java\n@@ -203,7 +203,7 @@\n         catch (final ClassNotFoundException ex) {\n             // we shouldn't get this exception here,\n             // so this is unexpected runtime exception\n-            throw new RuntimeException(ex);\n+            throw new IllegalStateException(ex);\n         }\n \n         return null;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 206, "bugNodeStartChar": 7305, "bugNodeLength": 24, "fixLineNum": 206, "fixNodeStartChar": 7305, "fixNodeLength": 29, "sourceBeforeFix": "new RuntimeException(ex)", "sourceAfterFix": "new IllegalStateException(ex)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f24916302751c0e48d107b68a1b0d61aa81d32a8", "fixCommitParentSHA1": "0c61e5d7a5a4c9f7e1a649559151b1fab98c3564", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 35aaa12..f953ce4 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -726,7 +726,7 @@\n \n         }\n         else {\n-            throw new RuntimeException(\"Unexpected rule: \" + ruleStr);\n+            throw new IllegalStateException(\"Unexpected rule: \" + ruleStr);\n         }\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 729, "bugNodeStartChar": 27095, "bugNodeLength": 51, "fixLineNum": 729, "fixNodeStartChar": 27095, "fixNodeLength": 56, "sourceBeforeFix": "new RuntimeException(\"Unexpected rule: \" + ruleStr)", "sourceAfterFix": "new IllegalStateException(\"Unexpected rule: \" + ruleStr)"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "0c61e5d7a5a4c9f7e1a649559151b1fab98c3564", "fixCommitParentSHA1": "4fd298b00126d60147dce7631c6e0d3e0921f82f", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\nindex bb3e3a8..78bf806 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java\n@@ -46,8 +46,7 @@\n      * @throws NumberFormatException if a component substring does not\n      * contain a parsable integer.\n      */\n-    public CSVFilter(String pattern)\n-        throws NumberFormatException {\n+    public CSVFilter(String pattern) {\n         final StringTokenizer tokenizer = new StringTokenizer(pattern, \",\");\n         while (tokenizer.hasMoreTokens()) {\n             final String token = tokenizer.nextToken().trim();\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 40, "bugNodeStartChar": 1522, "bugNodeLength": 1223, "fixLineNum": 40, "fixNodeStartChar": 1522, "fixNodeLength": 1186, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b550547318c087850b5f2c6d9d21a1bb0d45ed8d", "fixCommitParentSHA1": "084809c3b9e0d039c818cc4d8c5e640ea9e26525", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\nindex 5a0cfac..807bcc5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n@@ -173,7 +173,7 @@\n      * @param methodCallDotAst DOT DetailAST\n      * @return true if any parameters found\n      */\n-    private boolean hasArguments(DetailAST methodCallDotAst) {\n+    private static boolean hasArguments(DetailAST methodCallDotAst) {\n         final DetailAST argumentsList = methodCallDotAst.getNextSibling();\n         return argumentsList.getChildCount() > 0;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 171, "bugNodeStartChar": 5300, "bugNodeLength": 333, "fixLineNum": 171, "fixNodeStartChar": 5300, "fixNodeLength": 340, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c8430f2d0f4b4533b49bcf6f4304200d5adfc1d8", "fixCommitParentSHA1": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java\nindex c8530e7..d3f8f49 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java\n@@ -173,7 +173,7 @@\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 final String text = expr.getText();\n-                return 0 == CheckUtils.parseFloat(text, type);\n+                return 0.0 == CheckUtils.parseFloat(text, type);\n             default:\n                 return false;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 176, "bugNodeStartChar": 6554, "bugNodeLength": 38, "fixLineNum": 176, "fixNodeStartChar": 6554, "fixNodeLength": 40, "sourceBeforeFix": "0 == CheckUtils.parseFloat(text,type)", "sourceAfterFix": "0.0 == CheckUtils.parseFloat(text,type)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nindex fa6e7c8..d085d48 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n@@ -112,7 +112,7 @@\n                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     // Detected configuration change - clear cache\n                     details.clear();\n-                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {\n@@ -121,7 +121,7 @@\n         }\n         else {\n             // put the hash in the file if the file is going to be created\n-            details.put(CONFIG_HASH_KEY, currentConfigHash);\n+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }\n \n@@ -169,7 +169,7 @@\n      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n-        details.put(fileName, Long.toString(timestamp));\n+        details.setProperty(fileName, Long.toString(timestamp));\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 115, "bugNodeStartChar": 4322, "bugNodeLength": 47, "fixLineNum": 115, "fixNodeStartChar": 4322, "fixNodeLength": 55, "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nindex fa6e7c8..d085d48 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n@@ -112,7 +112,7 @@\n                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     // Detected configuration change - clear cache\n                     details.clear();\n-                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {\n@@ -121,7 +121,7 @@\n         }\n         else {\n             // put the hash in the file if the file is going to be created\n-            details.put(CONFIG_HASH_KEY, currentConfigHash);\n+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }\n \n@@ -169,7 +169,7 @@\n      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n-        details.put(fileName, Long.toString(timestamp));\n+        details.setProperty(fileName, Long.toString(timestamp));\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 115, "bugNodeStartChar": 4322, "bugNodeLength": 47, "fixLineNum": 115, "fixNodeStartChar": 4322, "fixNodeLength": 55, "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nindex fa6e7c8..d085d48 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n@@ -112,7 +112,7 @@\n                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     // Detected configuration change - clear cache\n                     details.clear();\n-                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {\n@@ -121,7 +121,7 @@\n         }\n         else {\n             // put the hash in the file if the file is going to be created\n-            details.put(CONFIG_HASH_KEY, currentConfigHash);\n+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }\n \n@@ -169,7 +169,7 @@\n      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n-        details.put(fileName, Long.toString(timestamp));\n+        details.setProperty(fileName, Long.toString(timestamp));\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 124, "bugNodeStartChar": 4602, "bugNodeLength": 47, "fixLineNum": 124, "fixNodeStartChar": 4602, "fixNodeLength": 55, "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nindex fa6e7c8..d085d48 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n@@ -112,7 +112,7 @@\n                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     // Detected configuration change - clear cache\n                     details.clear();\n-                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {\n@@ -121,7 +121,7 @@\n         }\n         else {\n             // put the hash in the file if the file is going to be created\n-            details.put(CONFIG_HASH_KEY, currentConfigHash);\n+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }\n \n@@ -169,7 +169,7 @@\n      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n-        details.put(fileName, Long.toString(timestamp));\n+        details.setProperty(fileName, Long.toString(timestamp));\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 124, "bugNodeStartChar": 4602, "bugNodeLength": 47, "fixLineNum": 124, "fixNodeStartChar": 4602, "fixNodeLength": 55, "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nindex fa6e7c8..d085d48 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n@@ -112,7 +112,7 @@\n                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     // Detected configuration change - clear cache\n                     details.clear();\n-                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {\n@@ -121,7 +121,7 @@\n         }\n         else {\n             // put the hash in the file if the file is going to be created\n-            details.put(CONFIG_HASH_KEY, currentConfigHash);\n+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }\n \n@@ -169,7 +169,7 @@\n      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n-        details.put(fileName, Long.toString(timestamp));\n+        details.setProperty(fileName, Long.toString(timestamp));\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 172, "bugNodeStartChar": 6097, "bugNodeLength": 47, "fixLineNum": 172, "fixNodeStartChar": 6097, "fixNodeLength": 55, "sourceBeforeFix": "details.put(fileName,Long.toString(timestamp))", "sourceAfterFix": "details.setProperty(fileName,Long.toString(timestamp))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nindex fa6e7c8..d085d48 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n@@ -112,7 +112,7 @@\n                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     // Detected configuration change - clear cache\n                     details.clear();\n-                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n+                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {\n@@ -121,7 +121,7 @@\n         }\n         else {\n             // put the hash in the file if the file is going to be created\n-            details.put(CONFIG_HASH_KEY, currentConfigHash);\n+            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }\n \n@@ -169,7 +169,7 @@\n      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n-        details.put(fileName, Long.toString(timestamp));\n+        details.setProperty(fileName, Long.toString(timestamp));\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 172, "bugNodeStartChar": 6097, "bugNodeLength": 47, "fixLineNum": 172, "fixNodeStartChar": 6097, "fixNodeLength": 55, "sourceBeforeFix": "details.put(fileName,Long.toString(timestamp))", "sourceAfterFix": "details.setProperty(fileName,Long.toString(timestamp))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\nindex 7a57d72..1309fd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n@@ -403,12 +403,12 @@\n         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n-            retVal.put(entry.getKey(), value);\n+            retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n-            retVal.put(p.getKey(), p.getValue());\n+            retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 406, "bugNodeStartChar": 14001, "bugNodeLength": 33, "fixLineNum": 406, "fixNodeStartChar": 14001, "fixNodeLength": 41, "sourceBeforeFix": "retVal.put(entry.getKey(),value)", "sourceAfterFix": "retVal.setProperty(entry.getKey(),value)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\nindex 7a57d72..1309fd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n@@ -403,12 +403,12 @@\n         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n-            retVal.put(entry.getKey(), value);\n+            retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n-            retVal.put(p.getKey(), p.getValue());\n+            retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 406, "bugNodeStartChar": 14001, "bugNodeLength": 33, "fixLineNum": 406, "fixNodeStartChar": 14001, "fixNodeLength": 41, "sourceBeforeFix": "retVal.put(entry.getKey(),value)", "sourceAfterFix": "retVal.setProperty(entry.getKey(),value)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\nindex 7a57d72..1309fd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n@@ -403,12 +403,12 @@\n         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n-            retVal.put(entry.getKey(), value);\n+            retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n-            retVal.put(p.getKey(), p.getValue());\n+            retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 411, "bugNodeStartChar": 14163, "bugNodeLength": 36, "fixLineNum": 411, "fixNodeStartChar": 14163, "fixNodeLength": 44, "sourceBeforeFix": "retVal.put(p.getKey(),p.getValue())", "sourceAfterFix": "retVal.setProperty(p.getKey(),p.getValue())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "fixCommitParentSHA1": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\nindex 7a57d72..1309fd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java\n@@ -403,12 +403,12 @@\n         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n-            retVal.put(entry.getKey(), value);\n+            retVal.setProperty(entry.getKey(), value);\n         }\n \n         // override with properties specified in subelements\n         for (Property p : overrideProps) {\n-            retVal.put(p.getKey(), p.getValue());\n+            retVal.setProperty(p.getKey(), p.getValue());\n         }\n \n         return retVal;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 411, "bugNodeStartChar": 14163, "bugNodeLength": 36, "fixLineNum": 411, "fixNodeStartChar": 14163, "fixNodeLength": 44, "sourceBeforeFix": "retVal.put(p.getKey(),p.getValue())", "sourceAfterFix": "retVal.setProperty(p.getKey(),p.getValue())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2e32ba7ab68e22bfc398362d4e3b85bb5ebfacac", "fixCommitParentSHA1": "8a3f5bf6d5389b9e175c9c769992faece6d76ada", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java\nindex 402f2b4..e1e48d0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java\n@@ -51,7 +51,7 @@\n      * @return the starting column for the first line.\n      */\n     public int firstLineCol() {\n-        final Object firstLineKey = lines.firstKey();\n+        final Integer firstLineKey = lines.firstKey();\n         return lines.get(firstLineKey);\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 54, "bugNodeStartChar": 1846, "bugNodeLength": 45, "fixLineNum": 54, "fixNodeStartChar": 1846, "fixNodeLength": 46, "sourceBeforeFix": "final Object firstLineKey=lines.firstKey(); ", "sourceAfterFix": "final Integer firstLineKey=lines.firstKey(); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "782da01103fc7ec8e69a3da7a5ef800dac866a8b", "fixCommitParentSHA1": "4d526a44a76f3a8022bdf59e6a396d568116ef64", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java\nindex 4a18774..6403f76 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java\n@@ -50,8 +50,8 @@\n             return new IndentLevel(getLineStart(parentAST));\n         }\n         else {\n-            // at this point getParent() is instance of ArrayInitHandler\n-            return ((ArrayInitHandler) getParent()).getChildrenExpectedLevel();\n+            // at this point getParent() is instance of BlockParentHandler\n+            return ((BlockParentHandler) getParent()).getChildrenExpectedLevel();\n         }\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 54, "bugNodeStartChar": 2314, "bugNodeLength": 30, "fixLineNum": 54, "fixNodeStartChar": 2316, "fixNodeLength": 32, "sourceBeforeFix": "(ArrayInitHandler)getParent()", "sourceAfterFix": "(BlockParentHandler)getParent()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "58473e4e73ef030566c584329acdefbe45a9b92c", "fixCommitParentSHA1": "24d8ecc0aeb8e55eee83a0eabe34c67027400680", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java\nindex 99e9cca..8468de9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java\n@@ -192,7 +192,7 @@\n      * @param ast AST node\n      * @return true if it is an enum member\n      */\n-    private boolean isEnumMember(DetailAST ast) {\n+    private static boolean isEnumMember(DetailAST ast) {\n         final DetailAST parentTypeDef = ast.getParent().getParent();\n         return parentTypeDef.getType() == TokenTypes.ENUM_DEF;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 190, "bugNodeStartChar": 6604, "bugNodeLength": 322, "fixLineNum": 190, "fixNodeStartChar": 6604, "fixNodeLength": 329, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "febbc986cb25ed460ea601c0a68c7d2597f89ee4", "fixCommitParentSHA1": "b6aabf42b90bfd9e53f00463098e1735602605ca", "bugFilePath": "src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java", "fixPatch": "diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java\nindex e336075..873e6fe 100644\n--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java\n+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java\n@@ -461,7 +461,7 @@\n     \n     public void testIssue32_7() {\n         String line = \"abc\";\n-        writer.write(line);\n+        otherWriter.write(line);\n         line.charAt(1);\n         builder.append(line);\n         test(line, line, line);\n@@ -777,7 +777,7 @@\n     \t\n     }\n     \n-    static class writer {\n+    static class otherWriter {\n \n \t\tpublic static void write(String line)\n \t\t{\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 464, "bugNodeStartChar": 10285, "bugNodeLength": 18, "fixLineNum": 464, "fixNodeStartChar": 10285, "fixNodeLength": 23, "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "febbc986cb25ed460ea601c0a68c7d2597f89ee4", "fixCommitParentSHA1": "b6aabf42b90bfd9e53f00463098e1735602605ca", "bugFilePath": "src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java", "fixPatch": "diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java\nindex e336075..873e6fe 100644\n--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java\n+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java\n@@ -461,7 +461,7 @@\n     \n     public void testIssue32_7() {\n         String line = \"abc\";\n-        writer.write(line);\n+        otherWriter.write(line);\n         line.charAt(1);\n         builder.append(line);\n         test(line, line, line);\n@@ -777,7 +777,7 @@\n     \t\n     }\n     \n-    static class writer {\n+    static class otherWriter {\n \n \t\tpublic static void write(String line)\n \t\t{\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 464, "bugNodeStartChar": 10285, "bugNodeLength": 18, "fixLineNum": 464, "fixNodeStartChar": 10285, "fixNodeLength": 23, "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "12fc9a2b54118418712e3817bed82d52b8701244", "fixCommitParentSHA1": "9470bb3a3985a82aabef94a013a00c2446f44955", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java\nindex 8c15042..4388952 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java\n@@ -461,7 +461,7 @@\n     \n     public void testIssue32_7() {\n         String line = \"abc\";\n-        writer.write(line);\n+        otherWriter.write(line);\n         line.charAt(1);\n         builder.append(line);\n         test(line, line, line);\n@@ -814,7 +814,7 @@\n     \t\n     }\n     \n-    static class writer {\n+    static class otherWriter {\n \n \t\tpublic static void write(String line)\n \t\t{\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 464, "bugNodeStartChar": 10249, "bugNodeLength": 18, "fixLineNum": 464, "fixNodeStartChar": 10249, "fixNodeLength": 23, "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "12fc9a2b54118418712e3817bed82d52b8701244", "fixCommitParentSHA1": "9470bb3a3985a82aabef94a013a00c2446f44955", "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java", "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java\nindex 8c15042..4388952 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java\n@@ -461,7 +461,7 @@\n     \n     public void testIssue32_7() {\n         String line = \"abc\";\n-        writer.write(line);\n+        otherWriter.write(line);\n         line.charAt(1);\n         builder.append(line);\n         test(line, line, line);\n@@ -814,7 +814,7 @@\n     \t\n     }\n     \n-    static class writer {\n+    static class otherWriter {\n \n \t\tpublic static void write(String line)\n \t\t{\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 464, "bugNodeStartChar": 10249, "bugNodeLength": 18, "fixLineNum": 464, "fixNodeStartChar": 10249, "fixNodeLength": 23, "sourceBeforeFix": "writer.write(line)", "sourceAfterFix": "otherWriter.write(line)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ec426aa0db5829cd799814d5e0e61b4cd2e42a46", "fixCommitParentSHA1": "7c1d239748c9a90112bf3a59b189dc31ffe41983", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java\nindex 8717f9b..dcf145c 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java\n@@ -105,7 +105,7 @@\n     /**\n      * Details of class that are required for validation\n      */\n-    private class Details {\n+    private static class Details {\n         /** class ast */\n         private DetailAST ast;\n         /** result of details gathering */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 105, "bugNodeStartChar": 3936, "bugNodeLength": 3590, "fixLineNum": 105, "fixNodeStartChar": 3936, "fixNodeLength": 3597, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "fixCommitParentSHA1": "2f1b20f220a0325b2ca5f0c84b691fabbbb94126", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java\nindex 6ee4c32..40fab2f 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java\n@@ -64,6 +64,6 @@\n     public void testGetRequiredTokens() {\n         InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();\n         int[] expected = {TokenTypes.INTERFACE_DEF};\n-        assertArrayEquals(expected, obj.getAcceptableTokens());\n+        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 67, "bugNodeStartChar": 2774, "bugNodeLength": 25, "fixLineNum": 67, "fixNodeStartChar": 2774, "fixNodeLength": 23, "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "fixCommitParentSHA1": "2f1b20f220a0325b2ca5f0c84b691fabbbb94126", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java\nindex 6ee4c32..40fab2f 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java\n@@ -64,6 +64,6 @@\n     public void testGetRequiredTokens() {\n         InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();\n         int[] expected = {TokenTypes.INTERFACE_DEF};\n-        assertArrayEquals(expected, obj.getAcceptableTokens());\n+        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 67, "bugNodeStartChar": 2774, "bugNodeLength": 25, "fixLineNum": 67, "fixNodeStartChar": 2774, "fixNodeLength": 23, "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "fixCommitParentSHA1": "2f1b20f220a0325b2ca5f0c84b691fabbbb94126", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java\nindex f7056ed..4cb1fdf 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java\n@@ -65,6 +65,6 @@\n     public void testGetRequiredTokens() {\n         MutableExceptionCheck obj = new MutableExceptionCheck();\n         int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.VARIABLE_DEF};\n-        assertArrayEquals(expected, obj.getAcceptableTokens());\n+        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 68, "bugNodeStartChar": 2950, "bugNodeLength": 25, "fixLineNum": 68, "fixNodeStartChar": 2950, "fixNodeLength": 23, "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "fixCommitParentSHA1": "2f1b20f220a0325b2ca5f0c84b691fabbbb94126", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java\nindex f7056ed..4cb1fdf 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java\n@@ -65,6 +65,6 @@\n     public void testGetRequiredTokens() {\n         MutableExceptionCheck obj = new MutableExceptionCheck();\n         int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.VARIABLE_DEF};\n-        assertArrayEquals(expected, obj.getAcceptableTokens());\n+        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 68, "bugNodeStartChar": 2950, "bugNodeLength": 25, "fixLineNum": 68, "fixNodeStartChar": 2950, "fixNodeLength": 23, "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "fixCommitParentSHA1": "2f1b20f220a0325b2ca5f0c84b691fabbbb94126", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java\nindex e7e8a4f..8934748 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java\n@@ -66,6 +66,6 @@\n     public void testGetRequiredTokens() {\n         ThrowsCountCheck obj = new ThrowsCountCheck();\n         int[] expected = {TokenTypes.LITERAL_THROWS};\n-        assertArrayEquals(expected, obj.getAcceptableTokens());\n+        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 69, "bugNodeStartChar": 2803, "bugNodeLength": 25, "fixLineNum": 69, "fixNodeStartChar": 2803, "fixNodeLength": 23, "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "fixCommitParentSHA1": "2f1b20f220a0325b2ca5f0c84b691fabbbb94126", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java\nindex e7e8a4f..8934748 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java\n@@ -66,6 +66,6 @@\n     public void testGetRequiredTokens() {\n         ThrowsCountCheck obj = new ThrowsCountCheck();\n         int[] expected = {TokenTypes.LITERAL_THROWS};\n-        assertArrayEquals(expected, obj.getAcceptableTokens());\n+        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 69, "bugNodeStartChar": 2803, "bugNodeLength": 25, "fixLineNum": 69, "fixNodeStartChar": 2803, "fixNodeLength": 23, "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "fixCommitParentSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\nindex b1020b0..1fe71ec 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n@@ -79,7 +79,7 @@\n     /**\n      * A Tag holds a suppression comment and its location.\n      */\n-    public class Tag implements Comparable<Tag>\n+    public static class Tag implements Comparable<Tag>\n     {\n         /** The text of the tag. */\n         private final String text;\n@@ -100,30 +100,31 @@\n          * Constructs a tag.\n          * @param text the text of the suppression.\n          * @param line the line number.\n+         * @param filter the {@code SuppressWithNearbyCommentFilter} with the context\n          * @throws ConversionException if unable to parse expanded text.\n          * on.\n          */\n-        public Tag(String text, int line)\n+        public Tag(String text, int line, SuppressWithNearbyCommentFilter filter)\n             throws ConversionException\n         {\n             this.text = text;\n \n-            tagCheckRegexp = checkRegexp;\n+            tagCheckRegexp = filter.checkRegexp;\n             //Expand regexp for check and message\n             //Does not intern Patterns with Utils.getPattern()\n             String format = \"\";\n             try {\n-                format = expandFrocomment(text, checkFormat, commentRegexp);\n+                format = expandFrocomment(text, filter.checkFormat, filter.commentRegexp);\n                 tagCheckRegexp = Pattern.compile(format);\n-                if (messageFormat != null) {\n+                if (filter.messageFormat != null) {\n                     format = expandFrocomment(\n-                         text, messageFormat, commentRegexp);\n+                         text, filter.messageFormat, filter.commentRegexp);\n                     tagMessageRegexp = Pattern.compile(format);\n                 }\n                 int influence = 0;\n-                if (influenceFormat != null) {\n+                if (filter.influenceFormat != null) {\n                     format = expandFrocomment(\n-                        text, influenceFormat, commentRegexp);\n+                        text, filter.influenceFormat, filter.commentRegexp);\n                     try {\n                         if (format.startsWith(\"+\")) {\n                             format = format.substring(1);\n@@ -133,7 +134,7 @@\n                     catch (final NumberFormatException e) {\n                         throw new ConversionException(\n                             \"unable to parse influence from '\" + text\n-                                + \"' using \" + influenceFormat, e);\n+                                + \"' using \" + filter.influenceFormat, e);\n                     }\n                 }\n                 if (influence >= 0) {\n@@ -482,7 +483,7 @@\n      */\n     private void addTag(String text, int line)\n     {\n-        final Tag tag = new Tag(text, line);\n+        final Tag tag = new Tag(text, line, this);\n         tags.add(tag);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 79, "bugNodeStartChar": 2963, "bugNodeLength": 5944, "fixLineNum": 79, "fixNodeStartChar": 2963, "fixNodeLength": 5951, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "fixCommitParentSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\nindex b1020b0..1fe71ec 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java\n@@ -79,7 +79,7 @@\n     /**\n      * A Tag holds a suppression comment and its location.\n      */\n-    public class Tag implements Comparable<Tag>\n+    public static class Tag implements Comparable<Tag>\n     {\n         /** The text of the tag. */\n         private final String text;\n@@ -100,30 +100,31 @@\n          * Constructs a tag.\n          * @param text the text of the suppression.\n          * @param line the line number.\n+         * @param filter the {@code SuppressWithNearbyCommentFilter} with the context\n          * @throws ConversionException if unable to parse expanded text.\n          * on.\n          */\n-        public Tag(String text, int line)\n+        public Tag(String text, int line, SuppressWithNearbyCommentFilter filter)\n             throws ConversionException\n         {\n             this.text = text;\n \n-            tagCheckRegexp = checkRegexp;\n+            tagCheckRegexp = filter.checkRegexp;\n             //Expand regexp for check and message\n             //Does not intern Patterns with Utils.getPattern()\n             String format = \"\";\n             try {\n-                format = expandFrocomment(text, checkFormat, commentRegexp);\n+                format = expandFrocomment(text, filter.checkFormat, filter.commentRegexp);\n                 tagCheckRegexp = Pattern.compile(format);\n-                if (messageFormat != null) {\n+                if (filter.messageFormat != null) {\n                     format = expandFrocomment(\n-                         text, messageFormat, commentRegexp);\n+                         text, filter.messageFormat, filter.commentRegexp);\n                     tagMessageRegexp = Pattern.compile(format);\n                 }\n                 int influence = 0;\n-                if (influenceFormat != null) {\n+                if (filter.influenceFormat != null) {\n                     format = expandFrocomment(\n-                        text, influenceFormat, commentRegexp);\n+                        text, filter.influenceFormat, filter.commentRegexp);\n                     try {\n                         if (format.startsWith(\"+\")) {\n                             format = format.substring(1);\n@@ -133,7 +134,7 @@\n                     catch (final NumberFormatException e) {\n                         throw new ConversionException(\n                             \"unable to parse influence from '\" + text\n-                                + \"' using \" + influenceFormat, e);\n+                                + \"' using \" + filter.influenceFormat, e);\n                     }\n                 }\n                 if (influence >= 0) {\n@@ -482,7 +483,7 @@\n      */\n     private void addTag(String text, int line)\n     {\n-        final Tag tag = new Tag(text, line);\n+        final Tag tag = new Tag(text, line, this);\n         tags.add(tag);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 485, "bugNodeStartChar": 16169, "bugNodeLength": 19, "fixLineNum": 485, "fixNodeStartChar": 16169, "fixNodeLength": 25, "sourceBeforeFix": "new Tag(text,line)", "sourceAfterFix": "new Tag(text,line,this)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "fixCommitParentSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\nindex 47938ab..5772972 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n@@ -67,7 +67,7 @@\n      * whether the supression turns checkstyle reporting on or off.\n      * @author Rick Giles\n      */\n-    public class Tag\n+    public static class Tag\n         implements Comparable<Tag>\n     {\n         /** The text of the tag. */\n@@ -94,10 +94,11 @@\n          * @param column the column number.\n          * @param text the text of the suppression.\n          * @param on <code>true</code> if the tag turns checkstyle reporting.\n+         * @param filter the {@code SuppressionCommentFilter} with the context\n          * @throws ConversionException if unable to parse expanded text.\n          * on.\n          */\n-        public Tag(int line, int column, String text, boolean on)\n+        public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)\n             throws ConversionException\n         {\n             this.line = line;\n@@ -105,31 +106,31 @@\n             this.text = text;\n             this.on = on;\n \n-            tagCheckRegexp = checkRegexp;\n+            tagCheckRegexp = filter.checkRegexp;\n             //Expand regexp for check and message\n             //Does not intern Patterns with Utils.getPattern()\n             String format = \"\";\n             try {\n                 if (on) {\n                     format =\n-                        expandFromCoont(text, checkFormat, onRegexp);\n+                        expandFromCoont(text, filter.checkFormat, filter.onRegexp);\n                     tagCheckRegexp = Pattern.compile(format);\n-                    if (messageFormat != null) {\n+                    if (filter.messageFormat != null) {\n                         format =\n-                            expandFromCoont(text, messageFormat, onRegexp);\n+                            expandFromCoont(text, filter.messageFormat, filter.onRegexp);\n                         tagMessageRegexp = Pattern.compile(format);\n                     }\n                 }\n                 else {\n                     format =\n-                        expandFromCoont(text, checkFormat, offRegexp);\n+                        expandFromCoont(text, filter.checkFormat, filter.offRegexp);\n                     tagCheckRegexp = Pattern.compile(format);\n-                    if (messageFormat != null) {\n+                    if (filter.messageFormat != null) {\n                         format =\n                             expandFromCoont(\n                                 text,\n-                                messageFormat,\n-                                offRegexp);\n+                                filter.messageFormat,\n+                                filter.offRegexp);\n                         tagMessageRegexp = Pattern.compile(format);\n                     }\n                 }\n@@ -501,7 +502,7 @@\n      */\n     private void addTag(String text, int line, int column, boolean on)\n     {\n-        final Tag tag = new Tag(line, column, text, on);\n+        final Tag tag = new Tag(line, column, text, on, this);\n         tags.add(tag);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 65, "bugNodeStartChar": 2668, "bugNodeLength": 6228, "fixLineNum": 65, "fixNodeStartChar": 2668, "fixNodeLength": 6235, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "fixCommitParentSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\nindex 47938ab..5772972 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java\n@@ -67,7 +67,7 @@\n      * whether the supression turns checkstyle reporting on or off.\n      * @author Rick Giles\n      */\n-    public class Tag\n+    public static class Tag\n         implements Comparable<Tag>\n     {\n         /** The text of the tag. */\n@@ -94,10 +94,11 @@\n          * @param column the column number.\n          * @param text the text of the suppression.\n          * @param on <code>true</code> if the tag turns checkstyle reporting.\n+         * @param filter the {@code SuppressionCommentFilter} with the context\n          * @throws ConversionException if unable to parse expanded text.\n          * on.\n          */\n-        public Tag(int line, int column, String text, boolean on)\n+        public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)\n             throws ConversionException\n         {\n             this.line = line;\n@@ -105,31 +106,31 @@\n             this.text = text;\n             this.on = on;\n \n-            tagCheckRegexp = checkRegexp;\n+            tagCheckRegexp = filter.checkRegexp;\n             //Expand regexp for check and message\n             //Does not intern Patterns with Utils.getPattern()\n             String format = \"\";\n             try {\n                 if (on) {\n                     format =\n-                        expandFromCoont(text, checkFormat, onRegexp);\n+                        expandFromCoont(text, filter.checkFormat, filter.onRegexp);\n                     tagCheckRegexp = Pattern.compile(format);\n-                    if (messageFormat != null) {\n+                    if (filter.messageFormat != null) {\n                         format =\n-                            expandFromCoont(text, messageFormat, onRegexp);\n+                            expandFromCoont(text, filter.messageFormat, filter.onRegexp);\n                         tagMessageRegexp = Pattern.compile(format);\n                     }\n                 }\n                 else {\n                     format =\n-                        expandFromCoont(text, checkFormat, offRegexp);\n+                        expandFromCoont(text, filter.checkFormat, filter.offRegexp);\n                     tagCheckRegexp = Pattern.compile(format);\n-                    if (messageFormat != null) {\n+                    if (filter.messageFormat != null) {\n                         format =\n                             expandFromCoont(\n                                 text,\n-                                messageFormat,\n-                                offRegexp);\n+                                filter.messageFormat,\n+                                filter.offRegexp);\n                         tagMessageRegexp = Pattern.compile(format);\n                     }\n                 }\n@@ -501,7 +502,7 @@\n      */\n     private void addTag(String text, int line, int column, boolean on)\n     {\n-        final Tag tag = new Tag(line, column, text, on);\n+        final Tag tag = new Tag(line, column, text, on, this);\n         tags.add(tag);\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 504, "bugNodeStartChar": 16911, "bugNodeLength": 31, "fixLineNum": 504, "fixNodeStartChar": 16911, "fixNodeLength": 37, "sourceBeforeFix": "new Tag(line,column,text,on)", "sourceAfterFix": "new Tag(line,column,text,on,this)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\nindex 3f85374..9676c4e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n@@ -91,7 +91,7 @@\n     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         final DetailAST annotationHolder;\n@@ -136,11 +136,11 @@\n         String annotation)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (annotation == null) {\n-            throw new NullPointerException(\"the annotation is null\");\n+            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n@@ -179,7 +179,7 @@\n     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (ast.getType() != TokenTypes.ANNOTATION) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 94, "bugNodeStartChar": 3308, "bugNodeLength": 43, "fixLineNum": 94, "fixNodeStartChar": 3308, "fixNodeLength": 47, "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\nindex 3f85374..9676c4e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n@@ -91,7 +91,7 @@\n     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         final DetailAST annotationHolder;\n@@ -136,11 +136,11 @@\n         String annotation)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (annotation == null) {\n-            throw new NullPointerException(\"the annotation is null\");\n+            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n@@ -179,7 +179,7 @@\n     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (ast.getType() != TokenTypes.ANNOTATION) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 139, "bugNodeStartChar": 4679, "bugNodeLength": 43, "fixLineNum": 139, "fixNodeStartChar": 4679, "fixNodeLength": 47, "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\nindex 3f85374..9676c4e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n@@ -91,7 +91,7 @@\n     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         final DetailAST annotationHolder;\n@@ -136,11 +136,11 @@\n         String annotation)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (annotation == null) {\n-            throw new NullPointerException(\"the annotation is null\");\n+            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n@@ -179,7 +179,7 @@\n     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (ast.getType() != TokenTypes.ANNOTATION) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 143, "bugNodeStartChar": 4787, "bugNodeLength": 50, "fixLineNum": 143, "fixNodeStartChar": 4787, "fixNodeLength": 54, "sourceBeforeFix": "new NullPointerException(\"the annotation is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the annotation is null\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\nindex 3f85374..9676c4e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java\n@@ -91,7 +91,7 @@\n     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         final DetailAST annotationHolder;\n@@ -136,11 +136,11 @@\n         String annotation)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (annotation == null) {\n-            throw new NullPointerException(\"the annotation is null\");\n+            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n@@ -179,7 +179,7 @@\n     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n-            throw new NullPointerException(\"the ast is null\");\n+            throw new IllegalArgumentException(\"the ast is null\");\n         }\n \n         if (ast.getType() != TokenTypes.ANNOTATION) {\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 182, "bugNodeStartChar": 6088, "bugNodeLength": 43, "fixLineNum": 182, "fixNodeStartChar": 6088, "fixNodeLength": 47, "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\nindex 93b2823..5f4f3f0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\n@@ -566,7 +566,7 @@\n     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n-            throw new NullPointerException(\"the text is null\");\n+            throw new IllegalArgumentException(\"the text is null\");\n         }\n \n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);\n@@ -590,7 +590,7 @@\n     public static JavadocTagInfo fromName(final String name)\n     {\n         if (name == null) {\n-            throw new NullPointerException(\"the name is null\");\n+            throw new IllegalArgumentException(\"the name is null\");\n         }\n \n         final JavadocTagInfo tag = NAME_TO_TAG.get(name);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 569, "bugNodeStartChar": 17792, "bugNodeLength": 44, "fixLineNum": 569, "fixNodeStartChar": 17792, "fixNodeLength": 48, "sourceBeforeFix": "new NullPointerException(\"the text is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the text is null\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\nindex 93b2823..5f4f3f0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\n@@ -566,7 +566,7 @@\n     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n-            throw new NullPointerException(\"the text is null\");\n+            throw new IllegalArgumentException(\"the text is null\");\n         }\n \n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);\n@@ -590,7 +590,7 @@\n     public static JavadocTagInfo fromName(final String name)\n     {\n         if (name == null) {\n-            throw new NullPointerException(\"the name is null\");\n+            throw new IllegalArgumentException(\"the name is null\");\n         }\n \n         final JavadocTagInfo tag = NAME_TO_TAG.get(name);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 593, "bugNodeStartChar": 18601, "bugNodeLength": 44, "fixLineNum": 593, "fixNodeStartChar": 18601, "fixNodeLength": 48, "sourceBeforeFix": "new NullPointerException(\"the name is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the name is null\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\nindex 8984d36..72ded6d 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java\n@@ -443,7 +443,7 @@\n         protected ClassInfo(final Token className)\n         {\n             if (className == null) {\n-                throw new NullPointerException(\n+                throw new IllegalArgumentException(\n                     \"ClassInfo's name should be non-null\");\n             }\n             name = className;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 446, "bugNodeStartChar": 14670, "bugNodeLength": 84, "fixLineNum": 446, "fixNodeStartChar": 14670, "fixNodeLength": 88, "sourceBeforeFix": "new NullPointerException(\"ClassInfo's name should be non-null\")", "sourceAfterFix": "new IllegalArgumentException(\"ClassInfo's name should be non-null\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3d3f3d5f9c1243bdc111bd463e2f3afc23384d13", "fixCommitParentSHA1": "b26b43a3315f0578aaaf4152703a28221c747d3b", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java\nindex df16452..20ac646 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java\n@@ -229,7 +229,7 @@\n      * @author Stephen Bloch\n      * June 19, 2003\n      */\n-    private abstract static class LexicalFrame\n+    private static class LexicalFrame\n     {\n         /** Set of name of variables declared in this frame. */\n         private final Set<String> varNames;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 227, "bugNodeStartChar": 7888, "bugNodeLength": 1614, "fixLineNum": 227, "fixNodeStartChar": 7888, "fixNodeLength": 1605, "sourceBeforeFix": "1034", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "22a5c6af715a60746ebfa6c6409dbc9fe3e0e255", "fixCommitParentSHA1": "660f94170a74b7ae5e3b6b31986d6a7baa37734d", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java\nindex 03766f4..776effc 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java\n@@ -725,8 +725,8 @@\n                         || child.getType() == TokenTypes.DOT)\n                 {\n                     final FullIdent fi = FullIdent.createFullIdent(child);\n-                    final ExceptionInfo ei = new ExceptionInfo(new Token(fi),\n-                            getCurrentClassName());\n+                    final ExceptionInfo ei = new ExceptionInfo(createClassInfo(new Token(fi),\n+                            getCurrentClassName()));\n                     retVal.add(ei);\n                 }\n                 child = child.getNextSibling();\n@@ -1076,7 +1076,7 @@\n     }\n \n     /** Stores useful information about declared exception. */\n-    private class ExceptionInfo\n+    private static class ExceptionInfo\n     {\n         /** does the exception have throws tag associated with. */\n         private boolean found;\n@@ -1086,12 +1086,11 @@\n         /**\n          * Creates new instance for <code>FullIdent</code>.\n          *\n-         * @param ident the exception\n-         * @param currentClass name of current class.\n+         * @param classInfo clas info\n          */\n-        ExceptionInfo(Token ident, String currentClass)\n+        ExceptionInfo(ClassInfo classInfo)\n         {\n-            classInfo = createClassInfo(ident, currentClass);\n+            this.classInfo = classInfo;\n         }\n \n         /** Mark that the exception has associated throws tag */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 1078, "bugNodeStartChar": 37425, "bugNodeLength": 1206, "fixLineNum": 1078, "fixNodeStartChar": 37425, "fixNodeLength": 1213, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "89b6af6a05d3c7820afac94137ae105cf800c457", "fixCommitParentSHA1": "04ceb4b91f4e66439479406834f42014c5be62ed", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\nindex b6afbc0..e2df937 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\n@@ -196,7 +196,7 @@\n     @Override\n     public void beginTree(DetailAST rootAST)\n     {\n-        currentFrame = new FieldFrame(null, true, null, null);\n+        currentFrame = new FieldFrame(null, true, null);\n     }\n \n     @Override\n@@ -234,7 +234,7 @@\n                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);\n \n         final FieldFrame frame =\n-            new FieldFrame(currentFrame, isStaticInnerType, type,\n+            new FieldFrame(currentFrame, isStaticInnerType,\n                 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF\n                     ? ast.findFirstToken(TokenTypes.IDENT).getText()\n                     : null\n@@ -558,14 +558,11 @@\n \n         /**\n          * Creates new frame.\n-         * @param staticType is this a static inner type (class or enum).\n          * @param parent parent frame.\n-         * @param frameType frameType derived from {@link TokenTypes}\n+         * @param staticType is this a static inner type (class or enum).\n          * @param frameName name associated with the frame, which can be a\n-         * class or enum name or null if no relevan information is available.\n          */\n-        public FieldFrame(FieldFrame parent, boolean staticType,\n-            Integer frameType, String frameName)\n+        public FieldFrame(FieldFrame parent, boolean staticType, String frameName)\n         {\n             this.parent = parent;\n             this.staticType = staticType;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 199, "bugNodeStartChar": 6490, "bugNodeLength": 38, "fixLineNum": 199, "fixNodeStartChar": 6490, "fixNodeLength": 32, "sourceBeforeFix": "new FieldFrame(null,true,null,null)", "sourceAfterFix": "new FieldFrame(null,true,null)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "89b6af6a05d3c7820afac94137ae105cf800c457", "fixCommitParentSHA1": "04ceb4b91f4e66439479406834f42014c5be62ed", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\nindex b6afbc0..e2df937 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java\n@@ -196,7 +196,7 @@\n     @Override\n     public void beginTree(DetailAST rootAST)\n     {\n-        currentFrame = new FieldFrame(null, true, null, null);\n+        currentFrame = new FieldFrame(null, true, null);\n     }\n \n     @Override\n@@ -234,7 +234,7 @@\n                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);\n \n         final FieldFrame frame =\n-            new FieldFrame(currentFrame, isStaticInnerType, type,\n+            new FieldFrame(currentFrame, isStaticInnerType,\n                 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF\n                     ? ast.findFirstToken(TokenTypes.IDENT).getText()\n                     : null\n@@ -558,14 +558,11 @@\n \n         /**\n          * Creates new frame.\n-         * @param staticType is this a static inner type (class or enum).\n          * @param parent parent frame.\n-         * @param frameType frameType derived from {@link TokenTypes}\n+         * @param staticType is this a static inner type (class or enum).\n          * @param frameName name associated with the frame, which can be a\n-         * class or enum name or null if no relevan information is available.\n          */\n-        public FieldFrame(FieldFrame parent, boolean staticType,\n-            Integer frameType, String frameName)\n+        public FieldFrame(FieldFrame parent, boolean staticType, String frameName)\n         {\n             this.parent = parent;\n             this.staticType = staticType;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 237, "bugNodeStartChar": 7724, "bugNodeLength": 239, "fixLineNum": 237, "fixNodeStartChar": 7724, "fixNodeLength": 233, "sourceBeforeFix": "new FieldFrame(currentFrame,isStaticInnerType,type,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)", "sourceAfterFix": "new FieldFrame(currentFrame,isStaticInnerType,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "95cb60790924d1df7e4e2f091a368c22c02852e3", "fixCommitParentSHA1": "5a96ddf4c995132b4e3e1afc5c94ef78a9124508", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\nindex 3b805aa..b6a1a2e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java\n@@ -700,7 +700,7 @@\n      * group.\n      * @author max\n      */\n-    class ImportDetails\n+    static class ImportDetails\n     {\n         /** Import full path */\n         private String importFullPath;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 698, "bugNodeStartChar": 23294, "bugNodeLength": 2763, "fixLineNum": 698, "fixNodeStartChar": 23294, "fixNodeLength": 2770, "sourceBeforeFix": "0", "sourceAfterFix": "8"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "95cb60790924d1df7e4e2f091a368c22c02852e3", "fixCommitParentSHA1": "5a96ddf4c995132b4e3e1afc5c94ef78a9124508", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java\nindex 2eae678..8a2b2e0 100755\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java\n@@ -561,7 +561,7 @@\n     /**\n      * Custom error listener for JavadocParser that prints user readable errors.\n      */\n-    class DescriptiveErrorListener extends BaseErrorListener\n+    static class DescriptiveErrorListener extends BaseErrorListener\n     {\n         /**\n          * Parse error while token recognition.\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 561, "bugNodeStartChar": 18360, "bugNodeLength": 4292, "fixLineNum": 561, "fixNodeStartChar": 18360, "fixNodeLength": 4299, "sourceBeforeFix": "0", "sourceAfterFix": "8"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "e508f61a11d9c30f9063b9d19dd9cd10bdfe9e7f", "fixCommitParentSHA1": "1e93e408645fb640c3f58405aa04a03ff23c846c", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex bfc5d55..282c562 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n@@ -464,9 +464,9 @@\n      */\n     public void setMemberModifiers(String modifiers)\n     {\n-        final List<Integer> modifiersList = new ArrayList<>(modifiers.length());\n+        final List<Integer> modifiersList = new ArrayList<>();\n         for (String modifier : modifiers.split(\", \")) {\n-            modifiersList.add(TokenTypes.getTokenId(modifier));\n+            modifiersList.add(TokenTypes.getTokenId(modifier.trim()));\n         }\n         this.memberModifiers = modifiersList;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 467, "bugNodeStartChar": 15659, "bugNodeLength": 35, "fixLineNum": 467, "fixNodeStartChar": 15659, "fixNodeLength": 17, "sourceBeforeFix": "new ArrayList<>(modifiers.length())", "sourceAfterFix": "new ArrayList<>()"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "351d79582d7a6cea56af9d61f45973d3cf73a484", "fixCommitParentSHA1": "dfc803a1cc442bafeb5aa375f0d9f0a31d655ff2", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\nindex 0f9d635..14bec5f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\n@@ -40,7 +40,7 @@\n  * <b>ignoredMethodNames</b> - names of methods to ignore.\n  * </p>\n  * <p>\n- * <b>ignoreOverridenMethods</b> - ignore checking overriden methods (marked with Override\n+ * <b>ignoreOverriddenMethods</b> - ignore checking overridden methods (marked with Override\n  *  or java.lang.Override annotation) default value is <b>true</b>.\n  * </p>\n  *\n@@ -56,8 +56,8 @@\n         \"finalize\",\n     };\n \n-    /** property for ignoring overriden methods. */\n-    private boolean ignoreOverridenMethods = true;\n+    /** property for ignoring overridden methods. */\n+    private boolean ignoreOverriddenMethods = true;\n \n     /** methods which should be ignored. */\n     private final Set<String> ignoredMethodNames = Sets.newHashSet();\n@@ -119,7 +119,7 @@\n     private boolean isIgnorableMethod(DetailAST methodDef)\n     {\n         return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n-            || ignoreOverridenMethods\n+            || ignoreOverriddenMethods\n                && (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                   || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n@@ -145,11 +145,11 @@\n     }\n \n     /**\n-     * Sets <b>ignoreOverridenMethods</b> property value.\n-     * @param ignoreOverridenMethods Check's property.\n+     * Sets <b>ignoreOverriddenMethods</b> property value.\n+     * @param ignoreOverriddenMethods Check's property.\n      */\n-    public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)\n+    public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)\n     {\n-        this.ignoreOverridenMethods = ignoreOverridenMethods;\n+        this.ignoreOverriddenMethods = ignoreOverriddenMethods;\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 122, "bugNodeStartChar": 4247, "bugNodeLength": 193, "fixLineNum": 122, "fixNodeStartChar": 4247, "fixNodeLength": 194, "sourceBeforeFix": "ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,\"Override\") || AnnotationUtility.containsAnnotation(methodDef,\"java.lang.Override\"))", "sourceAfterFix": "ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,\"Override\") || AnnotationUtility.containsAnnotation(methodDef,\"java.lang.Override\"))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "351d79582d7a6cea56af9d61f45973d3cf73a484", "fixCommitParentSHA1": "dfc803a1cc442bafeb5aa375f0d9f0a31d655ff2", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\nindex 0f9d635..14bec5f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\n@@ -40,7 +40,7 @@\n  * <b>ignoredMethodNames</b> - names of methods to ignore.\n  * </p>\n  * <p>\n- * <b>ignoreOverridenMethods</b> - ignore checking overriden methods (marked with Override\n+ * <b>ignoreOverriddenMethods</b> - ignore checking overridden methods (marked with Override\n  *  or java.lang.Override annotation) default value is <b>true</b>.\n  * </p>\n  *\n@@ -56,8 +56,8 @@\n         \"finalize\",\n     };\n \n-    /** property for ignoring overriden methods. */\n-    private boolean ignoreOverridenMethods = true;\n+    /** property for ignoring overridden methods. */\n+    private boolean ignoreOverriddenMethods = true;\n \n     /** methods which should be ignored. */\n     private final Set<String> ignoredMethodNames = Sets.newHashSet();\n@@ -119,7 +119,7 @@\n     private boolean isIgnorableMethod(DetailAST methodDef)\n     {\n         return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n-            || ignoreOverridenMethods\n+            || ignoreOverriddenMethods\n                && (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                   || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n@@ -145,11 +145,11 @@\n     }\n \n     /**\n-     * Sets <b>ignoreOverridenMethods</b> property value.\n-     * @param ignoreOverridenMethods Check's property.\n+     * Sets <b>ignoreOverriddenMethods</b> property value.\n+     * @param ignoreOverriddenMethods Check's property.\n      */\n-    public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)\n+    public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)\n     {\n-        this.ignoreOverridenMethods = ignoreOverridenMethods;\n+        this.ignoreOverriddenMethods = ignoreOverriddenMethods;\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 122, "bugNodeStartChar": 4247, "bugNodeLength": 193, "fixLineNum": 122, "fixNodeStartChar": 4247, "fixNodeLength": 194, "sourceBeforeFix": "ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,\"Override\") || AnnotationUtility.containsAnnotation(methodDef,\"java.lang.Override\"))", "sourceAfterFix": "ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,\"Override\") || AnnotationUtility.containsAnnotation(methodDef,\"java.lang.Override\"))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e1613910f30cc63de1393ed897aa766932e1d973", "fixCommitParentSHA1": "443b98cf24c6b6b7090b83603f40ec9c88ab189f", "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java", "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java\nindex 910b919..5a3d2bc 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java\n@@ -30,7 +30,7 @@\n     public void testFP() throws Exception\n     {\n         final DefaultConfiguration checkConfig =\n-                createCheckConfig(JavaDocTagContinuationIndentationCheck.class);\n+                createCheckConfig(JavadocTagContinuationIndentationCheck.class);\n         final String[] expected = {\n         };\n         verify(checkConfig, getPath(\"javadoc/GuavaFP.java\"), expected);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 33, "bugNodeStartChar": 1453, "bugNodeLength": 44, "fixLineNum": 33, "fixNodeStartChar": 1453, "fixNodeLength": 44, "sourceBeforeFix": "JavaDocTagContinuationIndentationCheck.class", "sourceAfterFix": "JavadocTagContinuationIndentationCheck.class"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "dfde8d0ffde5700201212b7e3d6219ed08c890a4", "fixCommitParentSHA1": "e82a3d217c8294859d8023fdbd17cb080eb3ff40", "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\nindex 5577904..44bf02d 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n@@ -65,7 +65,7 @@\n             \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\",\n             \"li\", \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n             \"style\", \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\",\n-            \"thead\", \"tr\", \"tt\", \"ul\");\n+            \"thead\", \"tr\", \"tt\", \"u\", \"ul\");\n \n     /** The scope to check. */\n     private Scope mScope = Scope.PRIVATE;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 61, "bugNodeStartChar": 2637, "bugNodeLength": 513, "fixLineNum": 61, "fixNodeStartChar": 2637, "fixNodeLength": 518, "sourceBeforeFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"font\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"ul\")", "sourceAfterFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"font\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"u\",\"ul\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "543b5347b10c30dcb7f3381a5ad887babd499a3e", "fixCommitParentSHA1": "48e77d65c60772ad50c7459401021bce60ae3629", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\nindex d90b4ea..6432f3c 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n@@ -61,9 +61,9 @@\n     private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(\n             \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \"bdo\", \"big\",\n             \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"dd\",\n-            \"del\", \"div\", \"dfn\", \"dl\", \"dt\", \"em\", \"fieldset\", \"h1\", \"h2\",\n-            \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\",\n-            \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n+            \"del\", \"div\", \"dfn\", \"dl\", \"dt\", \"em\", \"fieldset\", \"font\", \"h1\",\n+            \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\",\n+            \"li\", \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n             \"style\", \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\",\n             \"thead\", \"tr\", \"tt\", \"ul\");\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 61, "bugNodeStartChar": 2637, "bugNodeLength": 505, "fixLineNum": 61, "fixNodeStartChar": 2637, "fixNodeLength": 513, "sourceBeforeFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"ul\")", "sourceAfterFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"font\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"ul\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "48e77d65c60772ad50c7459401021bce60ae3629", "fixCommitParentSHA1": "a361d1704398f92f4a1b1071c5e82ee2283bcd6c", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\nindex c493279..d90b4ea 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n@@ -51,8 +51,8 @@\n     private static final String EXTRA_HTML = \"javadoc.extrahtml\";\n \n     /** HTML tags that do not require a close tag. */\n-    private static final Set<String> SINGLE_TAGS = ImmutableSortedSet.of(\"p\",\n-            \"br\", \"li\", \"dt\", \"dd\", \"td\", \"hr\", \"img\", \"tr\", \"th\", \"td\");\n+    private static final Set<String> SINGLE_TAGS = ImmutableSortedSet.of(\n+            \"br\", \"li\", \"dt\", \"dd\", \"hr\", \"img\", \"p\", \"td\", \"tr\", \"th\");\n \n     /** HTML tags that are allowed in java docs.\n      * From http://www.w3schools.com/tags/default.asp\n@@ -60,11 +60,12 @@\n      */\n     private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(\n             \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \"bdo\", \"big\",\n-            \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"del\",\n-            \"div\", \"dfn\", \"dl\", \"em\", \"fieldset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\",\n-            \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\", \"ol\", \"p\", \"pre\", \"q\",\n-            \"samp\", \"small\", \"span\", \"strong\", \"style\", \"sub\", \"sup\", \"table\",\n-            \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"tt\", \"ul\");\n+            \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"dd\",\n+            \"del\", \"div\", \"dfn\", \"dl\", \"dt\", \"em\", \"fieldset\", \"h1\", \"h2\",\n+            \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\",\n+            \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n+            \"style\", \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\",\n+            \"thead\", \"tr\", \"tt\", \"ul\");\n \n     /** The scope to check. */\n     private Scope mScope = Scope.PRIVATE;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 54, "bugNodeStartChar": 2325, "bugNodeLength": 99, "fixLineNum": 54, "fixNodeStartChar": 2325, "fixNodeLength": 94, "sourceBeforeFix": "ImmutableSortedSet.of(\"p\",\"br\",\"li\",\"dt\",\"dd\",\"td\",\"hr\",\"img\",\"tr\",\"th\",\"td\")", "sourceAfterFix": "ImmutableSortedSet.of(\"br\",\"li\",\"dt\",\"dd\",\"hr\",\"img\",\"p\",\"td\",\"tr\",\"th\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "48e77d65c60772ad50c7459401021bce60ae3629", "fixCommitParentSHA1": "a361d1704398f92f4a1b1071c5e82ee2283bcd6c", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\nindex c493279..d90b4ea 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java\n@@ -51,8 +51,8 @@\n     private static final String EXTRA_HTML = \"javadoc.extrahtml\";\n \n     /** HTML tags that do not require a close tag. */\n-    private static final Set<String> SINGLE_TAGS = ImmutableSortedSet.of(\"p\",\n-            \"br\", \"li\", \"dt\", \"dd\", \"td\", \"hr\", \"img\", \"tr\", \"th\", \"td\");\n+    private static final Set<String> SINGLE_TAGS = ImmutableSortedSet.of(\n+            \"br\", \"li\", \"dt\", \"dd\", \"hr\", \"img\", \"p\", \"td\", \"tr\", \"th\");\n \n     /** HTML tags that are allowed in java docs.\n      * From http://www.w3schools.com/tags/default.asp\n@@ -60,11 +60,12 @@\n      */\n     private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(\n             \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \"bdo\", \"big\",\n-            \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"del\",\n-            \"div\", \"dfn\", \"dl\", \"em\", \"fieldset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\",\n-            \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\", \"ol\", \"p\", \"pre\", \"q\",\n-            \"samp\", \"small\", \"span\", \"strong\", \"style\", \"sub\", \"sup\", \"table\",\n-            \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"tt\", \"ul\");\n+            \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"dd\",\n+            \"del\", \"div\", \"dfn\", \"dl\", \"dt\", \"em\", \"fieldset\", \"h1\", \"h2\",\n+            \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\",\n+            \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n+            \"style\", \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\",\n+            \"thead\", \"tr\", \"tt\", \"ul\");\n \n     /** The scope to check. */\n     private Scope mScope = Scope.PRIVATE;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 61, "bugNodeStartChar": 2642, "bugNodeLength": 481, "fixLineNum": 61, "fixNodeStartChar": 2642, "fixNodeLength": 505, "sourceBeforeFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"del\",\"div\",\"dfn\",\"dl\",\"em\",\"fieldset\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"ul\")", "sourceAfterFix": "ImmutableSortedSet.of(\"a\",\"abbr\",\"acronym\",\"address\",\"area\",\"b\",\"bdo\",\"big\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"colgroup\",\"dd\",\"del\",\"div\",\"dfn\",\"dl\",\"dt\",\"em\",\"fieldset\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"hr\",\"i\",\"img\",\"ins\",\"kbd\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"samp\",\"small\",\"span\",\"strong\",\"style\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"tt\",\"ul\")"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2a30b5aba207ce85e6cff7645a6d17f8dbda9521", "fixCommitParentSHA1": "764360d861e52e34997f63053a90f4ea869886cd", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\nindex 24a93d5..76adfb1 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java\n@@ -92,7 +92,7 @@\n     };\n \n     /** default maximum number of methods */\n-    private static final int DEFAULT_MAX_METHODS = 999;\n+    private static final int DEFAULT_MAX_METHODS = 100;\n     /** Maximum private methods. */\n     private int mMaxPrivate = DEFAULT_MAX_METHODS;\n     /** Maximum package methods. */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 95, "bugNodeStartChar": 3439, "bugNodeLength": 25, "fixLineNum": 95, "fixNodeStartChar": 3439, "fixNodeLength": 25, "sourceBeforeFix": "DEFAULT_MAX_METHODS=999", "sourceAfterFix": "DEFAULT_MAX_METHODS=100"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "756e47a05af9db14879e349f7bde1dfa64b83af8", "fixCommitParentSHA1": "3edefc87b4631853abce921427983c655063eae7", "bugFilePath": "src/tests/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java", "fixPatch": "diff --git a/src/tests/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java b/src/tests/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java\nindex ef8be99..9afa9ed 100644\n--- a/src/tests/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java\n+++ b/src/tests/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java\n@@ -47,7 +47,7 @@\n         LocalizedMessages collector = new LocalizedMessages();\n         emptyCheck.setMessages(collector);\n \n-        emptyCheck.log(0, \"msgKey\", null);\n+        emptyCheck.log(0, \"msgKey\");\n \n         LocalizedMessage[] messages = collector.getMessages();\n         Assert.assertTrue(messages.length == 1);\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 50, "bugNodeStartChar": 1360, "bugNodeLength": 33, "fixLineNum": 50, "fixNodeStartChar": 1360, "fixNodeLength": 27, "sourceBeforeFix": "emptyCheck.log(0,\"msgKey\",null)", "sourceAfterFix": "emptyCheck.log(0,\"msgKey\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "19fded26397f0c6ea1f26c6faa9a4c72aea7ccc6", "fixCommitParentSHA1": "83e498f01c49e916178c03e08a04c51dbd5a8c1d", "bugFilePath": "src/testinputs/com/puppycrawl/tools/checkstyle/InputPublicOnly.java", "fixPatch": "diff --git a/src/testinputs/com/puppycrawl/tools/checkstyle/InputPublicOnly.java b/src/testinputs/com/puppycrawl/tools/checkstyle/InputPublicOnly.java\nindex 8d7ebb5..5f2002e 100644\n--- a/src/testinputs/com/puppycrawl/tools/checkstyle/InputPublicOnly.java\n+++ b/src/testinputs/com/puppycrawl/tools/checkstyle/InputPublicOnly.java\n@@ -110,8 +110,8 @@\n     }\n \n     @Deprecated @Override\n-    public Class getClass()\n+    public int hashCode()\n     {\n-        return super.getClass();\n+        return super.hashCode();\n     }\n }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 115, "bugNodeStartChar": 2736, "bugNodeLength": 16, "fixLineNum": 115, "fixNodeStartChar": 2736, "fixNodeLength": 16, "sourceBeforeFix": "super.getClass()", "sourceAfterFix": "super.hashCode()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d17dc3ab287922b3a9930a7fc90cb4996d1b33f0", "fixCommitParentSHA1": "d9f789a649da036865f9bf0c6d48f35753881abe", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nindex d316277..fef63fe 100755\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\n@@ -102,7 +102,7 @@\n         final String aQName)\n     {\n         if (aQName.equals(\"subpackage\")) {\n-            assert mStack.size() > 2;\n+            assert mStack.size() > 1;\n             mStack.pop();\n         }\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 105, "bugNodeStartChar": 4205, "bugNodeLength": 17, "fixLineNum": 105, "fixNodeStartChar": 4205, "fixNodeLength": 17, "sourceBeforeFix": "mStack.size() > 2", "sourceAfterFix": "mStack.size() > 1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3", "fixCommitParentSHA1": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "bugFilePath": "src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java", "fixPatch": "diff --git a/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java b/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java\nindex eafae96..2cd0cd7 100755\n--- a/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java\n+++ b/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java\n@@ -248,16 +248,16 @@\n \n     /**\n     * A test class.\n-    * @param <T> this is NOT an unclosed T tag\n+    * @param <T1> this is NOT an unclosed T1 tag\n     * @author <a href=\"mailto:foo@nomail.com\">Foo Bar</a>\n     */\n-    public class TestClass<T>\n+    public class TestClass<T1>\n     {\n         /**\n         * Retrieves X.\n         * @return a value\n         */\n-        public T getX()\n+        public T1 getX()\n         {\n             return null;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 254, "bugNodeStartChar": 5593, "bugNodeLength": 1, "fixLineNum": 254, "fixNodeStartChar": 5593, "fixNodeLength": 2, "sourceBeforeFix": "T", "sourceAfterFix": "T1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3", "fixCommitParentSHA1": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "bugFilePath": "src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java", "fixPatch": "diff --git a/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java b/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java\nindex eafae96..2cd0cd7 100755\n--- a/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java\n+++ b/src/testinputs/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java\n@@ -248,16 +248,16 @@\n \n     /**\n     * A test class.\n-    * @param <T> this is NOT an unclosed T tag\n+    * @param <T1> this is NOT an unclosed T1 tag\n     * @author <a href=\"mailto:foo@nomail.com\">Foo Bar</a>\n     */\n-    public class TestClass<T>\n+    public class TestClass<T1>\n     {\n         /**\n         * Retrieves X.\n         * @return a value\n         */\n-        public T getX()\n+        public T1 getX()\n         {\n             return null;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 256, "bugNodeStartChar": 5610, "bugNodeLength": 132, "fixLineNum": 256, "fixNodeStartChar": 5610, "fixNodeLength": 133, "sourceBeforeFix": "/**   * Retrieves X.  * @return a value  */ public T getX(){   return null; } ", "sourceAfterFix": "/**   * Retrieves X.  * @return a value  */ public T1 getX(){   return null; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3", "fixCommitParentSHA1": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "bugFilePath": "src/testinputs/com/puppycrawl/tools/checkstyle/InputTypeParamsTags.java", "fixPatch": "diff --git a/src/testinputs/com/puppycrawl/tools/checkstyle/InputTypeParamsTags.java b/src/testinputs/com/puppycrawl/tools/checkstyle/InputTypeParamsTags.java\nindex c057ba0..acabdec 100644\n--- a/src/testinputs/com/puppycrawl/tools/checkstyle/InputTypeParamsTags.java\n+++ b/src/testinputs/com/puppycrawl/tools/checkstyle/InputTypeParamsTags.java\n@@ -3,20 +3,20 @@\n /**\n  * Some explanation.\n  * @param <A> A type param\n- * @param <B> Another type param\n- * @param <D> The wrong type param\n+ * @param <B1> Another type param\n+ * @param <D123> The wrong type param\n  * @author Nobody\n  * @version 1.0\n  */\n-public class InputTypeParamsTags<A,B,C extends Comparable>\n+public class InputTypeParamsTags<A,B1,C456 extends Comparable>\n {\n     /**\n      * Some explanation.\n      * @param <X> A type param\n-     * @param <Y> Another type param\n+     * @param <Y1> Another type param\n      * @return a string\n      */\n-    public <X, Y> String doSomething()\n+    public <X, Y1> String doSomething()\n     {\n         return null;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 19, "bugNodeStartChar": 409, "bugNodeLength": 1, "fixLineNum": 19, "fixNodeStartChar": 409, "fixNodeLength": 2, "sourceBeforeFix": "Y", "sourceAfterFix": "Y1"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "fixCommitParentSHA1": "e6c56a62d63ebe5ad5687fe8c2d820da80c2054d", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\nindex e409996..491983c 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n@@ -115,8 +115,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.ANNOTATION_DEF)\n+            {\n+                break; // in a class, enum or annotation\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n@@ -147,8 +150,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.INTERFACE_DEF)\n+            {\n+                break; // in a class, enum or interface\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 118, "bugNodeStartChar": 3973, "bugNodeLength": 28, "fixLineNum": 118, "fixNodeStartChar": 3973, "fixNodeLength": 128, "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "fixCommitParentSHA1": "e6c56a62d63ebe5ad5687fe8c2d820da80c2054d", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\nindex e409996..491983c 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n@@ -115,8 +115,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.ANNOTATION_DEF)\n+            {\n+                break; // in a class, enum or annotation\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n@@ -147,8 +150,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.INTERFACE_DEF)\n+            {\n+                break; // in a class, enum or interface\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 118, "bugNodeStartChar": 3973, "bugNodeLength": 28, "fixLineNum": 118, "fixNodeStartChar": 3973, "fixNodeLength": 128, "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "fixCommitParentSHA1": "e6c56a62d63ebe5ad5687fe8c2d820da80c2054d", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\nindex e409996..491983c 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n@@ -115,8 +115,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.ANNOTATION_DEF)\n+            {\n+                break; // in a class, enum or annotation\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n@@ -147,8 +150,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.INTERFACE_DEF)\n+            {\n+                break; // in a class, enum or interface\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 150, "bugNodeStartChar": 4926, "bugNodeLength": 28, "fixLineNum": 150, "fixNodeStartChar": 4926, "fixNodeLength": 127, "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "fixCommitParentSHA1": "e6c56a62d63ebe5ad5687fe8c2d820da80c2054d", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\nindex e409996..491983c 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n@@ -115,8 +115,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.ANNOTATION_DEF)\n+            {\n+                break; // in a class, enum or annotation\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n@@ -147,8 +150,11 @@\n              token = token.getParent())\n         {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF) {\n-                break; // in a class\n+            if (type == TokenTypes.CLASS_DEF\n+                || type == TokenTypes.ENUM_DEF\n+                || type == TokenTypes.INTERFACE_DEF)\n+            {\n+                break; // in a class, enum or interface\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\n                 break; // inner implementation\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 150, "bugNodeStartChar": 4926, "bugNodeLength": 28, "fixLineNum": 150, "fixNodeStartChar": 4926, "fixNodeLength": 127, "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "4f892fe43aed58fb447078fb3988c5263a71d60d", "fixCommitParentSHA1": "0ddd77847de682709b2163f4b2253ef54188d888", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java\nindex 3f6b8a6..69d7b77 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java\n@@ -204,7 +204,7 @@\n         {\n             return;\n         }\n-        logError(rcurly, \"rcurly\", expandedTabsColumnNo(rcurly));\n+        logError(rcurly, \"rcurly\", expandedTabsColumnNo(rcurly), curlyLevel());\n     }\n \n     /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 207, "bugNodeStartChar": 6120, "bugNodeLength": 56, "fixLineNum": 207, "fixNodeStartChar": 6120, "fixNodeLength": 70, "sourceBeforeFix": "logError(rcurly,\"rcurly\",expandedTabsColumnNo(rcurly))", "sourceAfterFix": "logError(rcurly,\"rcurly\",expandedTabsColumnNo(rcurly),curlyLevel())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "fixCommitParentSHA1": "308d5b029474c35ccc39ae764c3e8ec916baa66b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\nindex 5e37d7a..7ff8f81 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\n@@ -60,7 +60,8 @@\n      * Implements the SAX document handler interfaces, so they do not\n      * appear in the public API of the ConfigurationLoader.\n      */\n-    private class InternalLoader extends AbstractLoader\n+    private final class InternalLoader\n+        extends AbstractLoader\n     {\n         /** module elements */\n         private static final String MODULE = \"module\";\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 59, "bugNodeStartChar": 2285, "bugNodeLength": 2974, "fixLineNum": 59, "fixNodeStartChar": 2285, "fixNodeLength": 2988, "sourceBeforeFix": "2", "sourceAfterFix": "18"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "fixCommitParentSHA1": "308d5b029474c35ccc39ae764c3e8ec916baa66b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\nindex 22d8cda..62938e5 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java\n@@ -36,7 +36,7 @@\n  * @author Rick Giles\n  * @version 4-Dec-2002\n  */\n-public class PackageNamesLoader\n+public final class PackageNamesLoader\n     extends AbstractLoader\n {\n     /** the public ID for the configuration dtd */\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 34, "bugNodeStartChar": 1444, "bugNodeLength": 5662, "fixLineNum": 34, "fixNodeStartChar": 1444, "fixNodeLength": 5668, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "fixCommitParentSHA1": "308d5b029474c35ccc39ae764c3e8ec916baa66b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java\nindex 5b698fc..6c8ac9c 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java\n@@ -62,7 +62,7 @@\n      * parsing fails because with the next grammar it might succeed\n      * and the user will be confused.\n      */\n-    private static class SilentJava14Recognizer\n+    private static final class SilentJava14Recognizer\n         extends GeneratedJava14Recognizer\n     {\n         /**\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 57, "bugNodeStartChar": 2282, "bugNodeLength": 1379, "fixLineNum": 57, "fixNodeStartChar": 2282, "fixNodeLength": 1385, "sourceBeforeFix": "10", "sourceAfterFix": "26"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "fixCommitParentSHA1": "308d5b029474c35ccc39ae764c3e8ec916baa66b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\nindex 60a9125..49722cf 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/ScopeUtils.java\n@@ -26,7 +26,7 @@\n  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\n-public class ScopeUtils\n+public final class ScopeUtils\n {\n     /** prevent instantiation */\n     private ScopeUtils()\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 23, "bugNodeStartChar": 1090, "bugNodeLength": 4590, "fixLineNum": 23, "fixNodeStartChar": 1090, "fixNodeLength": 4596, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "fixCommitParentSHA1": "308d5b029474c35ccc39ae764c3e8ec916baa66b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 94e3c18..a21d1bc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n@@ -33,7 +33,7 @@\n  * @author <a href=\"mailto:dobratzp@ele.uri.edu\">Peter Dobratz</a>\n  * @version 1.0\n  */\n-public class TokenTypes\n+public final class TokenTypes\n {\n     /** prevent instantiation */\n     private TokenTypes()\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 25, "bugNodeStartChar": 1140, "bugNodeLength": 72720, "fixLineNum": 25, "fixNodeStartChar": 1140, "fixNodeLength": 72726, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "d0f2c7d53f76cdee498224fb9ca31477b0534181", "fixCommitParentSHA1": "1cc0a79b7794f909979e1933bcce4d73447b1c67", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java\nindex 5ff2ae1..88fe07e 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java\n@@ -53,7 +53,7 @@\n  * </p>\n  *\n  * @author lkuehne\n- * @version $Revision: 1.3 $\n+ * @version $Revision: 1.4 $\n  */\n public class DesignForInheritanceCheck extends Check\n {\n@@ -75,7 +75,8 @@\n         DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n-            || modifiers.branchContains(TokenTypes.FINAL))\n+            || modifiers.branchContains(TokenTypes.FINAL)\n+            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 76, "bugNodeStartChar": 2638, "bugNodeLength": 171, "fixLineNum": 76, "fixNodeStartChar": 2638, "fixNodeLength": 238, "sourceBeforeFix": "modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)", "sourceAfterFix": "modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)|| modifiers.branchContains(TokenTypes.LITERAL_STATIC)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "fixCommitParentSHA1": "b8c558e473c0a9a75c41312e31df34b8572a271b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\nindex 469e3f1..91e69a2 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n@@ -39,7 +39,8 @@\n  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n- * To check for unused throws, set property checkUnusedThrows to true.\n+ * To allow documented <code>java.lang.RuntimeException</code>s\n+ * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n  * defaults to {@link Scope#PRIVATE}. To verify another scope,\n  * set property scope to one of the {@link Scope} constants.\n@@ -50,13 +51,14 @@\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"/&gt;\n  * </pre>\n- * <p> An example of how to configure the check to check for unused imports\n+ * <p> An example of how to configure the check to check to allow\n+ * documentation of undeclared RuntimeExceptions\n  * and for the {@link Scope#PUBLIC} scope is:\n  *</p>\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"&gt;\n  *    &lt;property name=\"scope\" value=\"public\"/&gt;\n- *    &lt;property name=\"checkUnusedThrows\" value=\"true\"/&gt;\n+ *    &lt;property name=\"allowUndeclaredRTE\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  *\n@@ -121,8 +123,12 @@\n     /** the visibility scope where Javadoc comments are checked **/\n     private Scope mScope = Scope.PRIVATE;\n \n-    /** check for unused throws **/\n-    private boolean mCheckUnusedThrows = false;\n+    /**\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n+     **/\n+    private boolean mAllowUndeclaredRTE = false;\n \n     /**\n      * Set the scope.\n@@ -134,12 +140,14 @@\n     }\n \n     /**\n-     * Set whether to check for unused throws.\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n      * @param aFlag a <code>Boolean</code> value\n      */\n-    public void setCheckUnusedThrows(boolean aFlag)\n+    public void setAllowUndeclaredRTE(boolean aFlag)\n     {\n-        mCheckUnusedThrows = aFlag;\n+        mAllowUndeclaredRTE = aFlag;\n     }\n \n     /** @see com.puppycrawl.tools.checkstyle.api.Check */\n@@ -179,12 +187,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processPackage(aAST);\n             }\n         }\n         else if (aAST.getType() == TokenTypes.IMPORT) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processImport(aAST);\n             }\n         }\n@@ -510,7 +518,7 @@\n             // Handle extra JavadocTag.\n             if (!found) {\n                 boolean reqd = true;\n-                if (mCheckUnusedThrows) {\n+                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 142, "bugNodeStartChar": 5477, "bugNodeLength": 26, "fixLineNum": 142, "fixNodeStartChar": 5477, "fixNodeLength": 27, "sourceBeforeFix": "mCheckUnusedThrows=aFlag", "sourceAfterFix": "mAllowUndeclaredRTE=aFlag"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "fixCommitParentSHA1": "b8c558e473c0a9a75c41312e31df34b8572a271b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\nindex 469e3f1..91e69a2 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n@@ -39,7 +39,8 @@\n  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n- * To check for unused throws, set property checkUnusedThrows to true.\n+ * To allow documented <code>java.lang.RuntimeException</code>s\n+ * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n  * defaults to {@link Scope#PRIVATE}. To verify another scope,\n  * set property scope to one of the {@link Scope} constants.\n@@ -50,13 +51,14 @@\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"/&gt;\n  * </pre>\n- * <p> An example of how to configure the check to check for unused imports\n+ * <p> An example of how to configure the check to check to allow\n+ * documentation of undeclared RuntimeExceptions\n  * and for the {@link Scope#PUBLIC} scope is:\n  *</p>\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"&gt;\n  *    &lt;property name=\"scope\" value=\"public\"/&gt;\n- *    &lt;property name=\"checkUnusedThrows\" value=\"true\"/&gt;\n+ *    &lt;property name=\"allowUndeclaredRTE\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  *\n@@ -121,8 +123,12 @@\n     /** the visibility scope where Javadoc comments are checked **/\n     private Scope mScope = Scope.PRIVATE;\n \n-    /** check for unused throws **/\n-    private boolean mCheckUnusedThrows = false;\n+    /**\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n+     **/\n+    private boolean mAllowUndeclaredRTE = false;\n \n     /**\n      * Set the scope.\n@@ -134,12 +140,14 @@\n     }\n \n     /**\n-     * Set whether to check for unused throws.\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n      * @param aFlag a <code>Boolean</code> value\n      */\n-    public void setCheckUnusedThrows(boolean aFlag)\n+    public void setAllowUndeclaredRTE(boolean aFlag)\n     {\n-        mCheckUnusedThrows = aFlag;\n+        mAllowUndeclaredRTE = aFlag;\n     }\n \n     /** @see com.puppycrawl.tools.checkstyle.api.Check */\n@@ -179,12 +187,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processPackage(aAST);\n             }\n         }\n         else if (aAST.getType() == TokenTypes.IMPORT) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processImport(aAST);\n             }\n         }\n@@ -510,7 +518,7 @@\n             // Handle extra JavadocTag.\n             if (!found) {\n                 boolean reqd = true;\n-                if (mCheckUnusedThrows) {\n+                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 182, "bugNodeStartChar": 6560, "bugNodeLength": 77, "fixLineNum": 182, "fixNodeStartChar": 6560, "fixNodeLength": 78, "sourceBeforeFix": "if (mCheckUnusedThrows) {   processPackage(aAST); } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   processPackage(aAST); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "fixCommitParentSHA1": "b8c558e473c0a9a75c41312e31df34b8572a271b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\nindex 469e3f1..91e69a2 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n@@ -39,7 +39,8 @@\n  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n- * To check for unused throws, set property checkUnusedThrows to true.\n+ * To allow documented <code>java.lang.RuntimeException</code>s\n+ * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n  * defaults to {@link Scope#PRIVATE}. To verify another scope,\n  * set property scope to one of the {@link Scope} constants.\n@@ -50,13 +51,14 @@\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"/&gt;\n  * </pre>\n- * <p> An example of how to configure the check to check for unused imports\n+ * <p> An example of how to configure the check to check to allow\n+ * documentation of undeclared RuntimeExceptions\n  * and for the {@link Scope#PUBLIC} scope is:\n  *</p>\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"&gt;\n  *    &lt;property name=\"scope\" value=\"public\"/&gt;\n- *    &lt;property name=\"checkUnusedThrows\" value=\"true\"/&gt;\n+ *    &lt;property name=\"allowUndeclaredRTE\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  *\n@@ -121,8 +123,12 @@\n     /** the visibility scope where Javadoc comments are checked **/\n     private Scope mScope = Scope.PRIVATE;\n \n-    /** check for unused throws **/\n-    private boolean mCheckUnusedThrows = false;\n+    /**\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n+     **/\n+    private boolean mAllowUndeclaredRTE = false;\n \n     /**\n      * Set the scope.\n@@ -134,12 +140,14 @@\n     }\n \n     /**\n-     * Set whether to check for unused throws.\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n      * @param aFlag a <code>Boolean</code> value\n      */\n-    public void setCheckUnusedThrows(boolean aFlag)\n+    public void setAllowUndeclaredRTE(boolean aFlag)\n     {\n-        mCheckUnusedThrows = aFlag;\n+        mAllowUndeclaredRTE = aFlag;\n     }\n \n     /** @see com.puppycrawl.tools.checkstyle.api.Check */\n@@ -179,12 +187,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processPackage(aAST);\n             }\n         }\n         else if (aAST.getType() == TokenTypes.IMPORT) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processImport(aAST);\n             }\n         }\n@@ -510,7 +518,7 @@\n             // Handle extra JavadocTag.\n             if (!found) {\n                 boolean reqd = true;\n-                if (mCheckUnusedThrows) {\n+                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 187, "bugNodeStartChar": 6716, "bugNodeLength": 76, "fixLineNum": 187, "fixNodeStartChar": 6716, "fixNodeLength": 77, "sourceBeforeFix": "if (mCheckUnusedThrows) {   processImport(aAST); } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   processImport(aAST); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "fixCommitParentSHA1": "b8c558e473c0a9a75c41312e31df34b8572a271b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\nindex 469e3f1..91e69a2 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n@@ -39,7 +39,8 @@\n  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n- * To check for unused throws, set property checkUnusedThrows to true.\n+ * To allow documented <code>java.lang.RuntimeException</code>s\n+ * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n  * defaults to {@link Scope#PRIVATE}. To verify another scope,\n  * set property scope to one of the {@link Scope} constants.\n@@ -50,13 +51,14 @@\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"/&gt;\n  * </pre>\n- * <p> An example of how to configure the check to check for unused imports\n+ * <p> An example of how to configure the check to check to allow\n+ * documentation of undeclared RuntimeExceptions\n  * and for the {@link Scope#PUBLIC} scope is:\n  *</p>\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"&gt;\n  *    &lt;property name=\"scope\" value=\"public\"/&gt;\n- *    &lt;property name=\"checkUnusedThrows\" value=\"true\"/&gt;\n+ *    &lt;property name=\"allowUndeclaredRTE\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  *\n@@ -121,8 +123,12 @@\n     /** the visibility scope where Javadoc comments are checked **/\n     private Scope mScope = Scope.PRIVATE;\n \n-    /** check for unused throws **/\n-    private boolean mCheckUnusedThrows = false;\n+    /**\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n+     **/\n+    private boolean mAllowUndeclaredRTE = false;\n \n     /**\n      * Set the scope.\n@@ -134,12 +140,14 @@\n     }\n \n     /**\n-     * Set whether to check for unused throws.\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n      * @param aFlag a <code>Boolean</code> value\n      */\n-    public void setCheckUnusedThrows(boolean aFlag)\n+    public void setAllowUndeclaredRTE(boolean aFlag)\n     {\n-        mCheckUnusedThrows = aFlag;\n+        mAllowUndeclaredRTE = aFlag;\n     }\n \n     /** @see com.puppycrawl.tools.checkstyle.api.Check */\n@@ -179,12 +187,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processPackage(aAST);\n             }\n         }\n         else if (aAST.getType() == TokenTypes.IMPORT) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processImport(aAST);\n             }\n         }\n@@ -510,7 +518,7 @@\n             // Handle extra JavadocTag.\n             if (!found) {\n                 boolean reqd = true;\n-                if (mCheckUnusedThrows) {\n+                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 513, "bugNodeStartChar": 17960, "bugNodeLength": 780, "fixLineNum": 513, "fixNodeStartChar": 17960, "fixNodeLength": 781, "sourceBeforeFix": "if (mCheckUnusedThrows) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),\"javadoc.classInfo\",\"@throws\",tag.getArg1());   } } ", "sourceAfterFix": "if (mAllowUndeclaredRTE) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),\"javadoc.classInfo\",\"@throws\",tag.getArg1());   } } "}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "e70cb13b07f5b2c17dec74a42c05e7e32bb33ffb", "fixCommitParentSHA1": "642d9c5035df84b563f702263306c11a68d350d1", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java\nindex 1da77ef..d3748e3 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java\n@@ -172,7 +172,7 @@\n     public DetailAST getLastChild()\n     {\n         AST ast = getFirstChild();\n-        while (ast.getNextSibling() != null) {\n+        while (ast != null && ast.getNextSibling() != null) {\n             ast = ast.getNextSibling();\n         }\n         return (DetailAST) ast;\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 175, "bugNodeStartChar": 5226, "bugNodeLength": 28, "fixLineNum": 175, "fixNodeStartChar": 5226, "fixNodeLength": 43, "sourceBeforeFix": "ast.getNextSibling() != null", "sourceAfterFix": "ast != null && ast.getNextSibling() != null"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "031bc6f277b7b3f7160b2877db8005a79d5a3371", "fixCommitParentSHA1": "18d65a1993ddb57b7de36092614413d2eb6bc69b", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileLengthCheck.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileLengthCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileLengthCheck.java\nindex 4c2ad55..fe2196b 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileLengthCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileLengthCheck.java\n@@ -37,7 +37,7 @@\n public class FileLengthCheck extends Check\n {\n     /** the maximum number of lines */\n-    int mMaxFileLength = 2000;\n+    private int mMaxFileLength = 2000;\n \n     /** @see com.puppycrawl.tools.checkstyle.api.Check */\n     public int[] getDefaultTokens()\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 39, "bugNodeStartChar": 1460, "bugNodeLength": 65, "fixLineNum": 39, "fixNodeStartChar": 1460, "fixNodeLength": 73, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "fixCommitParentSHA1": "f7e86cdf5fc7c68d420f2f279b482ac9d1b5e3ac", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\nindex 723b069..5601884 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n@@ -30,7 +30,7 @@\n  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\n-class LocalizedMessage\n+public class LocalizedMessage\n     implements Comparable\n {\n     /** name of the resource bundle to get messages from **/\n@@ -84,7 +84,7 @@\n     }\n \n     /** @return the translated message **/\n-    String getMessage()\n+    public String getMessage()\n     {\n         // Very simple approach - wait for performance problems\n         final ResourceBundle bundle =\n@@ -94,13 +94,13 @@\n     }\n \n     /** @return the line number **/\n-    int getLineNo()\n+    public int getLineNo()\n     {\n         return mLineNo;\n     }\n \n     /** @return the column number **/\n-    int getColumnNo()\n+    public int getColumnNo()\n     {\n         return mColNo;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 25, "bugNodeStartChar": 1146, "bugNodeLength": 3344, "fixLineNum": 25, "fixNodeStartChar": 1146, "fixNodeLength": 3351, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "fixCommitParentSHA1": "f7e86cdf5fc7c68d420f2f279b482ac9d1b5e3ac", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\nindex 723b069..5601884 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n@@ -30,7 +30,7 @@\n  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\n-class LocalizedMessage\n+public class LocalizedMessage\n     implements Comparable\n {\n     /** name of the resource bundle to get messages from **/\n@@ -84,7 +84,7 @@\n     }\n \n     /** @return the translated message **/\n-    String getMessage()\n+    public String getMessage()\n     {\n         // Very simple approach - wait for performance problems\n         final ResourceBundle bundle =\n@@ -94,13 +94,13 @@\n     }\n \n     /** @return the line number **/\n-    int getLineNo()\n+    public int getLineNo()\n     {\n         return mLineNo;\n     }\n \n     /** @return the column number **/\n-    int getColumnNo()\n+    public int getColumnNo()\n     {\n         return mColNo;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 86, "bugNodeStartChar": 2998, "bugNodeLength": 356, "fixLineNum": 86, "fixNodeStartChar": 2998, "fixNodeLength": 363, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "fixCommitParentSHA1": "f7e86cdf5fc7c68d420f2f279b482ac9d1b5e3ac", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\nindex 723b069..5601884 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n@@ -30,7 +30,7 @@\n  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\n-class LocalizedMessage\n+public class LocalizedMessage\n     implements Comparable\n {\n     /** name of the resource bundle to get messages from **/\n@@ -84,7 +84,7 @@\n     }\n \n     /** @return the translated message **/\n-    String getMessage()\n+    public String getMessage()\n     {\n         // Very simple approach - wait for performance problems\n         final ResourceBundle bundle =\n@@ -94,13 +94,13 @@\n     }\n \n     /** @return the line number **/\n-    int getLineNo()\n+    public int getLineNo()\n     {\n         return mLineNo;\n     }\n \n     /** @return the column number **/\n-    int getColumnNo()\n+    public int getColumnNo()\n     {\n         return mColNo;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 96, "bugNodeStartChar": 3360, "bugNodeLength": 87, "fixLineNum": 96, "fixNodeStartChar": 3360, "fixNodeLength": 94, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "fixCommitParentSHA1": "f7e86cdf5fc7c68d420f2f279b482ac9d1b5e3ac", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\nindex 723b069..5601884 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java\n@@ -30,7 +30,7 @@\n  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\n-class LocalizedMessage\n+public class LocalizedMessage\n     implements Comparable\n {\n     /** name of the resource bundle to get messages from **/\n@@ -84,7 +84,7 @@\n     }\n \n     /** @return the translated message **/\n-    String getMessage()\n+    public String getMessage()\n     {\n         // Very simple approach - wait for performance problems\n         final ResourceBundle bundle =\n@@ -94,13 +94,13 @@\n     }\n \n     /** @return the line number **/\n-    int getLineNo()\n+    public int getLineNo()\n     {\n         return mLineNo;\n     }\n \n     /** @return the column number **/\n-    int getColumnNo()\n+    public int getColumnNo()\n     {\n         return mColNo;\n     }\n", "projectName": "checkstyle.checkstyle", "bugLineNum": 102, "bugNodeStartChar": 3453, "bugNodeLength": 90, "fixLineNum": 102, "fixNodeStartChar": 3453, "fixNodeLength": 97, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2d315277b6e1c152fd78da9fb91f214c43b31996", "fixCommitParentSHA1": "62ca98db3434596d34c28134576b3eca549319b3", "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java\nindex 065da61..530ed0e 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java\n@@ -76,18 +76,18 @@\n     /**\n      * Sets a properties file for use instead\n      * of individually setting them\n-     * @param props the properties File to use\n+     * @param aProps the properties File to use\n      */\n-    public void setProperties(File props)\n+    public void setProperties(File aProps)\n     {\n         Properties mProperties = new Properties();\n         try {\n-            mProperties.load(new FileInputStream(props));\n+            mProperties.load(new FileInputStream(aProps));\n             mConfig = new Configuration(mProperties, System.out);\n         }\n         catch (Exception e) {\n             throw new BuildException(\n-                \"Could not find Properties file '\" + props + \"'\", location);\n+                \"Could not find Properties file '\" + aProps + \"'\", location);\n         }\n     }\n \n", "projectName": "checkstyle.checkstyle", "bugLineNum": 85, "bugNodeStartChar": 3171, "bugNodeLength": 26, "fixLineNum": 85, "fixNodeStartChar": 3171, "fixNodeLength": 27, "sourceBeforeFix": "new FileInputStream(props)", "sourceAfterFix": "new FileInputStream(aProps)"}]