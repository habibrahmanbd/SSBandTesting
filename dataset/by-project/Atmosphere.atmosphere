[{"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "80fa3080b958523cf754f0523150acbf09e4bb78", "fixCommitParentSHA1": "2e8f3e90628539b61732f881e20f6e9389ef28a5", "bugFilePath": "modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java b/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java\nindex 58810e4..a71850b 100644\n--- a/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java\n+++ b/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java\n@@ -336,7 +336,7 @@\n         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n-                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {\n+                && req.getSession().getMaxInactiveInterval() * 1000L < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 339, "bugNodeStartChar": 12483, "bugNodeLength": 48, "fixLineNum": 339, "fixNodeStartChar": 12483, "fixNodeLength": 49, "sourceBeforeFix": "req.getSession().getMaxInactiveInterval() * 1000", "sourceAfterFix": "req.getSession().getMaxInactiveInterval() * 1000L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1a6d1e4fffd6724334143354a1abfcf6719f0cf4", "fixCommitParentSHA1": "2e8f3e90628539b61732f881e20f6e9389ef28a5", "bugFilePath": "modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java b/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java\nindex 58810e4..a71850b 100644\n--- a/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java\n+++ b/modules/runtime/src/main/java/org/atmosphere/runtime/AtmosphereResourceImpl.java\n@@ -336,7 +336,7 @@\n         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n-                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {\n+                && req.getSession().getMaxInactiveInterval() * 1000L < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 339, "bugNodeStartChar": 12483, "bugNodeLength": 48, "fixLineNum": 339, "fixNodeStartChar": 12483, "fixNodeLength": 49, "sourceBeforeFix": "req.getSession().getMaxInactiveInterval() * 1000", "sourceAfterFix": "req.getSession().getMaxInactiveInterval() * 1000L"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "deabd5b0187c1825c686c7f6a593db918bd043dc", "fixCommitParentSHA1": "773f6cef58630ce1ef99105030ceaffb40330c33", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java\nindex e78b257..1b5e9fa 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java\n@@ -87,7 +87,7 @@\n             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n-                    logger.error(\"Invalid state {}\", r);\n+                    logger.warn(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 90, "bugNodeStartChar": 3271, "bugNodeLength": 35, "fixLineNum": 90, "fixNodeStartChar": 3271, "fixNodeLength": 34, "sourceBeforeFix": "logger.error(\"Invalid state {}\",r)", "sourceAfterFix": "logger.warn(\"Invalid state {}\",r)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "deabd5b0187c1825c686c7f6a593db918bd043dc", "fixCommitParentSHA1": "773f6cef58630ce1ef99105030ceaffb40330c33", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java\nindex e78b257..1b5e9fa 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java\n@@ -87,7 +87,7 @@\n             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n             try {\n                 if (req.getAttribute(MAX_INACTIVE) == null) {\n-                    logger.error(\"Invalid state {}\", r);\n+                    logger.warn(\"Invalid state {}\", r);\n                     r.removeFromAllBroadcasters();\n                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);\n                     continue;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 90, "bugNodeStartChar": 3271, "bugNodeLength": 35, "fixLineNum": 90, "fixNodeStartChar": 3271, "fixNodeLength": 34, "sourceBeforeFix": "logger.error(\"Invalid state {}\",r)", "sourceAfterFix": "logger.warn(\"Invalid state {}\",r)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "70ceda9740cbc5504d5ebaf2191dd706925760c8", "fixCommitParentSHA1": "ee76d0103577400cb0a40da5c1ebffddfe972e5f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 861f6ba..7e0be64 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1792,7 +1792,7 @@\n         for (AtmosphereResource r : config.resourcesFactory().findAll()) {\n             try {\n                 r.resume().close();\n-            } catch (IOException e) {\n+            } catch (Exception e) {\n                 logger.trace(\"\", e);\n             }\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1795, "bugNodeStartChar": 75200, "bugNodeLength": 13, "fixLineNum": 1795, "fixNodeStartChar": 75200, "fixNodeLength": 11, "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "77e17fdb6dabe786f970f44602e297a5e0089e8c", "fixCommitParentSHA1": "3431fa353d63b056c490367f465fa0a091d3a717", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java b/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java\nindex 04fa89c..24b41b8 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java\n@@ -365,7 +365,7 @@\n         } catch (Throwable t) {\n             try {\n                 return Class.forName(className);\n-            } catch (Throwable t2) {\n+            } catch (Exception t2) {\n                 if (thisClass != null) {\n                     return thisClass.getClassLoader().loadClass(className);\n                 }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 368, "bugNodeStartChar": 14422, "bugNodeLength": 12, "fixLineNum": 368, "fixNodeStartChar": 14422, "fixNodeLength": 12, "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "2355977a614aa8bc281c7384e9e15f86d33cacec", "fixCommitParentSHA1": "fe7460124f310f51a1dd18e51eec5723d44a03a1", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 71b08fa..2e9c1de 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1334,7 +1334,7 @@\n                 broadcasterClassName = lookupDefaultBroadcasterType(broadcasterClassName);\n             }\n \n-            if (broadcasterFactoryClassName != null) {\n+            if (broadcasterFactoryClassName != null && broadcasterFactory == null) {\n                 broadcasterFactory = newClassInstance(BroadcasterFactory.class,\n                         (Class<BroadcasterFactory>) IOUtils.loadClass(getClass(), broadcasterFactoryClassName));\n                 Class<? extends Broadcaster> bc =\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1337, "bugNodeStartChar": 56927, "bugNodeLength": 35, "fixLineNum": 1337, "fixNodeStartChar": 56927, "fixNodeLength": 65, "sourceBeforeFix": "broadcasterFactoryClassName != null", "sourceAfterFix": "broadcasterFactoryClassName != null && broadcasterFactory == null"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c3cfa5cf9d6a549117a3e84d5ae941ae15d2d92c", "fixCommitParentSHA1": "cbbbcabbf15f0e227396fc04bd5ff632235e3b7e", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex f79b782..38017eb 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -654,7 +654,7 @@\n \n     // Highly bogus based on which I/O layer we are using.\n     private boolean allowedCloseCode(int closeCode) {\n-        return closeCode < 1001 || closeCode > 1004 ? true : false;\n+        return closeCode <= 1001 || closeCode > 1004 ? true : false;\n     }\n \n     private void finish(WebSocket webSocket, AtmosphereResource resource, AtmosphereRequest r, AtmosphereResponse s, boolean closeWebSocket) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 657, "bugNodeStartChar": 30978, "bugNodeLength": 16, "fixLineNum": 657, "fixNodeStartChar": 30978, "fixNodeLength": 17, "sourceBeforeFix": "closeCode < 1001", "sourceAfterFix": "closeCode <= 1001"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a625b796f26de1f9b6201abe28c5571835e5f3a2", "fixCommitParentSHA1": "2d04bbc0fc9cef4dfe61895a32c235e40acd746a", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\nindex 2aabc48..7fdacdd 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\n@@ -613,19 +613,19 @@\n                 .append(status)\n                 .append(\" \")\n                 .append(statusMessage)\n-                .append(\"\\n\");\n+                .append(\"\\r\\n\");\n \n-        b.append(\"Content-Type\").append(\":\").append(headers.get(\"Content-Type\") == null ? contentType : headers.get(\"Content-Type\")).append(\"\\n\");\n+        b.append(\"Content-Type\").append(\":\").append(headers.get(\"Content-Type\") == null ? contentType : headers.get(\"Content-Type\")).append(\"\\r\\n\");\n         if (contentLength != -1) {\n-            b.append(\"Content-Length\").append(\":\").append(contentLength).append(\"\\n\");\n+            b.append(\"Content-Length\").append(\":\").append(contentLength).append(\"\\r\\n\");\n         }\n \n         for (String s : headers().keySet()) {\n             if (!s.equalsIgnoreCase(\"Content-Type\")) {\n-                b.append(s).append(\":\").append(headers.get(s)).append(\"\\n\");\n+                b.append(s).append(\":\").append(headers.get(s)).append(\"\\r\\n\");\n             }\n         }\n-        b.deleteCharAt(b.length() - 1);\n+        b.deleteCharAt(b.length() - 2);\n         b.append(\"\\r\\n\\r\\n\");\n         return b.toString();\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 628, "bugNodeStartChar": 20014, "bugNodeLength": 14, "fixLineNum": 628, "fixNodeStartChar": 20014, "fixNodeLength": 14, "sourceBeforeFix": "b.length() - 1", "sourceAfterFix": "b.length() - 2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "42fa2f2fa4a95d30263d4f69a7d8f792c3591368", "fixCommitParentSHA1": "3eeed40b05cdf9c804056ac246500a56f7d43bd0", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 68011cf..9ba341e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1771,9 +1771,9 @@\n \n     protected void loadMetaService() {\n         try {\n-            final Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());\n+            Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());\n             if (config == null) {\n-                IOUtils.readServiceFile(AtmosphereFramework.class.getName());\n+                config = IOUtils.readServiceFile(AtmosphereFramework.class.getName());\n             }\n \n             for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1774, "bugNodeStartChar": 73550, "bugNodeLength": 181, "fixLineNum": 1774, "fixNodeStartChar": 73550, "fixNodeLength": 175, "sourceBeforeFix": "16", "sourceAfterFix": "0"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "fixCommitParentSHA1": "82ae50ebe6e86c845a93ed7b6eead3409beed643", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 470fde8..aa25d23 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1224,7 +1224,7 @@\n                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1232,10 +1232,10 @@\n                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1244,7 +1244,7 @@\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                         case BEFORE_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                     }\n                     break;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1227, "bugNodeStartChar": 52336, "bugNodeLength": 2, "fixLineNum": 1227, "fixNodeStartChar": 52336, "fixNodeLength": 1, "sourceBeforeFix": "-1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "fixCommitParentSHA1": "82ae50ebe6e86c845a93ed7b6eead3409beed643", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 470fde8..aa25d23 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1224,7 +1224,7 @@\n                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1232,10 +1232,10 @@\n                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1244,7 +1244,7 @@\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                         case BEFORE_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                     }\n                     break;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1235, "bugNodeStartChar": 52582, "bugNodeLength": 1, "fixLineNum": 1235, "fixNodeStartChar": 52582, "fixNodeLength": 2, "sourceBeforeFix": "1", "sourceAfterFix": "-1"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "fixCommitParentSHA1": "82ae50ebe6e86c845a93ed7b6eead3409beed643", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 470fde8..aa25d23 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1224,7 +1224,7 @@\n                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1232,10 +1232,10 @@\n                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1244,7 +1244,7 @@\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                         case BEFORE_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                     }\n                     break;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1238, "bugNodeStartChar": 52713, "bugNodeLength": 2, "fixLineNum": 1238, "fixNodeStartChar": 52713, "fixNodeLength": 1, "sourceBeforeFix": "-1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "fixCommitParentSHA1": "82ae50ebe6e86c845a93ed7b6eead3409beed643", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 470fde8..aa25d23 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1224,7 +1224,7 @@\n                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1232,10 +1232,10 @@\n                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n-                            orderResult = -1;\n+                            orderResult = 1;\n                             break;\n                     }\n                     break;\n@@ -1244,7 +1244,7 @@\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                         case BEFORE_DEFAULT:\n-                            orderResult = 1;\n+                            orderResult = -1;\n                             break;\n                     }\n                     break;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1247, "bugNodeStartChar": 53010, "bugNodeLength": 1, "fixLineNum": 1247, "fixNodeStartChar": 53010, "fixNodeLength": 2, "sourceBeforeFix": "1", "sourceAfterFix": "-1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "fixCommitParentSHA1": "3221de4a6c7376b085a2078ee32e6437f1303259", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\nindex ce17f15..713aac4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n@@ -66,7 +66,7 @@\n \n     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n-        logger.info(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n+        logger.trace(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {\n@@ -79,7 +79,7 @@\n \n         @Override\n         public Broadcaster create() {\n-            logger.info(\"Creating Object {}\", count.getAndIncrement());\n+            logger.trace(\"Creating Object {}\", count.getAndIncrement());\n             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();\n         }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 69, "bugNodeStartChar": 2603, "bugNodeLength": 74, "fixLineNum": 69, "fixNodeStartChar": 2603, "fixNodeLength": 75, "sourceBeforeFix": "logger.info(\"Return Object {} now at size {}\",b,count.getAndDecrement())", "sourceAfterFix": "logger.trace(\"Return Object {} now at size {}\",b,count.getAndDecrement())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "fixCommitParentSHA1": "3221de4a6c7376b085a2078ee32e6437f1303259", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\nindex ce17f15..713aac4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n@@ -66,7 +66,7 @@\n \n     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n-        logger.info(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n+        logger.trace(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {\n@@ -79,7 +79,7 @@\n \n         @Override\n         public Broadcaster create() {\n-            logger.info(\"Creating Object {}\", count.getAndIncrement());\n+            logger.trace(\"Creating Object {}\", count.getAndIncrement());\n             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();\n         }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 69, "bugNodeStartChar": 2603, "bugNodeLength": 74, "fixLineNum": 69, "fixNodeStartChar": 2603, "fixNodeLength": 75, "sourceBeforeFix": "logger.info(\"Return Object {} now at size {}\",b,count.getAndDecrement())", "sourceAfterFix": "logger.trace(\"Return Object {} now at size {}\",b,count.getAndDecrement())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "fixCommitParentSHA1": "3221de4a6c7376b085a2078ee32e6437f1303259", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\nindex ce17f15..713aac4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n@@ -66,7 +66,7 @@\n \n     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n-        logger.info(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n+        logger.trace(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {\n@@ -79,7 +79,7 @@\n \n         @Override\n         public Broadcaster create() {\n-            logger.info(\"Creating Object {}\", count.getAndIncrement());\n+            logger.trace(\"Creating Object {}\", count.getAndIncrement());\n             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();\n         }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 82, "bugNodeStartChar": 3016, "bugNodeLength": 58, "fixLineNum": 82, "fixNodeStartChar": 3016, "fixNodeLength": 59, "sourceBeforeFix": "logger.info(\"Creating Object {}\",count.getAndIncrement())", "sourceAfterFix": "logger.trace(\"Creating Object {}\",count.getAndIncrement())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "fixCommitParentSHA1": "3221de4a6c7376b085a2078ee32e6437f1303259", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\nindex ce17f15..713aac4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java\n@@ -66,7 +66,7 @@\n \n     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n-        logger.info(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n+        logger.trace(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {\n@@ -79,7 +79,7 @@\n \n         @Override\n         public Broadcaster create() {\n-            logger.info(\"Creating Object {}\", count.getAndIncrement());\n+            logger.trace(\"Creating Object {}\", count.getAndIncrement());\n             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();\n         }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 82, "bugNodeStartChar": 3016, "bugNodeLength": 58, "fixLineNum": 82, "fixNodeStartChar": 3016, "fixNodeLength": 59, "sourceBeforeFix": "logger.info(\"Creating Object {}\",count.getAndIncrement())", "sourceAfterFix": "logger.trace(\"Creating Object {}\",count.getAndIncrement())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d2a86ac39f8a01f40dad23801e4f98c4ed772100", "fixCommitParentSHA1": "961b3c7b2880eca1c46fa91aeb03ef6881d6a4f3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java b/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java\nindex eee7ba8..6fb40b8 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java\n@@ -160,7 +160,7 @@\n             }\n             return action;\n         } catch (Exception ex) {\n-            logger.error(\"\", ex);\n+            logger.warn(\"\", ex);\n         }\n         return Action.CANCELLED;\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 163, "bugNodeStartChar": 6887, "bugNodeLength": 20, "fixLineNum": 163, "fixNodeStartChar": 6887, "fixNodeLength": 19, "sourceBeforeFix": "logger.error(\"\",ex)", "sourceAfterFix": "logger.warn(\"\",ex)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d2a86ac39f8a01f40dad23801e4f98c4ed772100", "fixCommitParentSHA1": "961b3c7b2880eca1c46fa91aeb03ef6881d6a4f3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java b/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java\nindex eee7ba8..6fb40b8 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java\n@@ -160,7 +160,7 @@\n             }\n             return action;\n         } catch (Exception ex) {\n-            logger.error(\"\", ex);\n+            logger.warn(\"\", ex);\n         }\n         return Action.CANCELLED;\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 163, "bugNodeStartChar": 6887, "bugNodeLength": 20, "fixLineNum": 163, "fixNodeStartChar": 6887, "fixNodeLength": 19, "sourceBeforeFix": "logger.error(\"\",ex)", "sourceAfterFix": "logger.warn(\"\",ex)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "1e757414b3767a8e91c21d4ede5c40baa94550fd", "fixCommitParentSHA1": "684e06cee45b84cb6cbce9f05146119f9998df37", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java\nindex 898484d..fc3b389 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java\n@@ -40,7 +40,7 @@\n     public void configure(AtmosphereConfig config) {\n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n         if (ac != null) {\n-            enableAccessControl = Boolean.parseBoolean(ac);\n+            enableAccessControl = !Boolean.parseBoolean(ac);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 43, "bugNodeStartChar": 1540, "bugNodeLength": 24, "fixLineNum": 43, "fixNodeStartChar": 1540, "fixNodeLength": 25, "sourceBeforeFix": "Boolean.parseBoolean(ac)", "sourceAfterFix": "!Boolean.parseBoolean(ac)"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "43835eac144a13881b45d63bed0bfcd0147fc506", "fixCommitParentSHA1": "0b91f4a60b28e234b805a748ddcb2be06b3f9c4e", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex f71fbb6..0070991 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -277,7 +277,7 @@\n     @Override\n     public void locate(String uuid, Async async) {\n         AtmosphereResource r = find(uuid);\n-        if (uuid != null) {\n+        if (r != null) {\n             async.available(r);\n         }\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 280, "bugNodeStartChar": 11318, "bugNodeLength": 12, "fixLineNum": 280, "fixNodeStartChar": 11318, "fixNodeLength": 9, "sourceBeforeFix": "uuid != null", "sourceAfterFix": "r != null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "43835eac144a13881b45d63bed0bfcd0147fc506", "fixCommitParentSHA1": "0b91f4a60b28e234b805a748ddcb2be06b3f9c4e", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex f71fbb6..0070991 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -277,7 +277,7 @@\n     @Override\n     public void locate(String uuid, Async async) {\n         AtmosphereResource r = find(uuid);\n-        if (uuid != null) {\n+        if (r != null) {\n             async.available(r);\n         }\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 280, "bugNodeStartChar": 11318, "bugNodeLength": 12, "fixLineNum": 280, "fixNodeStartChar": 11318, "fixNodeLength": 9, "sourceBeforeFix": "uuid != null", "sourceAfterFix": "r != null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "fixCommitParentSHA1": "20f724d2f2fab6996c7588e6d0115f35bfde8d32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex fe2b6df..994fe7d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -87,7 +87,7 @@\n      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;\n@@ -114,7 +114,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {\n@@ -135,7 +135,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,\n@@ -220,7 +220,7 @@\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n-                DefaultAtmosphereRequest.newInstance(),\n+                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);\n@@ -231,11 +231,11 @@\n      *\n      * @param config an {@link AtmosphereConfig}\n      * @param uuid   a String representing a UUID\n-     * @param request a {@link DefaultAtmosphereRequest}\n+     * @param request a {@link AtmosphereRequest}\n      * @return\n      */\n     @Override\n-    public final AtmosphereResource create(AtmosphereConfig config, String uuid, DefaultAtmosphereRequest request) {\n+    public final AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n         AtmosphereResponse response = AtmosphereResponse.newInstance();\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 90, "bugNodeStartChar": 3596, "bugNodeLength": 32, "fixLineNum": 90, "fixNodeStartChar": 3596, "fixNodeLength": 25, "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "fixCommitParentSHA1": "20f724d2f2fab6996c7588e6d0115f35bfde8d32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex fe2b6df..994fe7d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -87,7 +87,7 @@\n      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;\n@@ -114,7 +114,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {\n@@ -135,7 +135,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,\n@@ -220,7 +220,7 @@\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n-                DefaultAtmosphereRequest.newInstance(),\n+                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);\n@@ -231,11 +231,11 @@\n      *\n      * @param config an {@link AtmosphereConfig}\n      * @param uuid   a String representing a UUID\n-     * @param request a {@link DefaultAtmosphereRequest}\n+     * @param request a {@link AtmosphereRequest}\n      * @return\n      */\n     @Override\n-    public final AtmosphereResource create(AtmosphereConfig config, String uuid, DefaultAtmosphereRequest request) {\n+    public final AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n         AtmosphereResponse response = AtmosphereResponse.newInstance();\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 117, "bugNodeStartChar": 4730, "bugNodeLength": 32, "fixLineNum": 117, "fixNodeStartChar": 4730, "fixNodeLength": 25, "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "fixCommitParentSHA1": "20f724d2f2fab6996c7588e6d0115f35bfde8d32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex fe2b6df..994fe7d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -87,7 +87,7 @@\n      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;\n@@ -114,7 +114,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {\n@@ -135,7 +135,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,\n@@ -220,7 +220,7 @@\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n-                DefaultAtmosphereRequest.newInstance(),\n+                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);\n@@ -231,11 +231,11 @@\n      *\n      * @param config an {@link AtmosphereConfig}\n      * @param uuid   a String representing a UUID\n-     * @param request a {@link DefaultAtmosphereRequest}\n+     * @param request a {@link AtmosphereRequest}\n      * @return\n      */\n     @Override\n-    public final AtmosphereResource create(AtmosphereConfig config, String uuid, DefaultAtmosphereRequest request) {\n+    public final AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n         AtmosphereResponse response = AtmosphereResponse.newInstance();\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 138, "bugNodeStartChar": 5751, "bugNodeLength": 32, "fixLineNum": 138, "fixNodeStartChar": 5751, "fixNodeLength": 25, "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "fixCommitParentSHA1": "20f724d2f2fab6996c7588e6d0115f35bfde8d32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex fe2b6df..994fe7d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -87,7 +87,7 @@\n      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;\n@@ -114,7 +114,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {\n@@ -135,7 +135,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,\n@@ -220,7 +220,7 @@\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n-                DefaultAtmosphereRequest.newInstance(),\n+                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);\n@@ -231,11 +231,11 @@\n      *\n      * @param config an {@link AtmosphereConfig}\n      * @param uuid   a String representing a UUID\n-     * @param request a {@link DefaultAtmosphereRequest}\n+     * @param request a {@link AtmosphereRequest}\n      * @return\n      */\n     @Override\n-    public final AtmosphereResource create(AtmosphereConfig config, String uuid, DefaultAtmosphereRequest request) {\n+    public final AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n         AtmosphereResponse response = AtmosphereResponse.newInstance();\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 223, "bugNodeStartChar": 9362, "bugNodeLength": 38, "fixLineNum": 223, "fixNodeStartChar": 9362, "fixNodeLength": 31, "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "fixCommitParentSHA1": "20f724d2f2fab6996c7588e6d0115f35bfde8d32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex fe2b6df..994fe7d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -87,7 +87,7 @@\n      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;\n@@ -114,7 +114,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {\n@@ -135,7 +135,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,\n@@ -220,7 +220,7 @@\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n-                DefaultAtmosphereRequest.newInstance(),\n+                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);\n@@ -231,11 +231,11 @@\n      *\n      * @param config an {@link AtmosphereConfig}\n      * @param uuid   a String representing a UUID\n-     * @param request a {@link DefaultAtmosphereRequest}\n+     * @param request a {@link AtmosphereRequest}\n      * @return\n      */\n     @Override\n-    public final AtmosphereResource create(AtmosphereConfig config, String uuid, DefaultAtmosphereRequest request) {\n+    public final AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n         AtmosphereResponse response = AtmosphereResponse.newInstance();\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 223, "bugNodeStartChar": 9362, "bugNodeLength": 38, "fixLineNum": 223, "fixNodeStartChar": 9362, "fixNodeLength": 31, "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "fixCommitParentSHA1": "20f724d2f2fab6996c7588e6d0115f35bfde8d32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex fe2b6df..994fe7d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -87,7 +87,7 @@\n      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;\n@@ -114,7 +114,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {\n@@ -135,7 +135,7 @@\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n-                                           DefaultAtmosphereRequest request,\n+                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,\n@@ -220,7 +220,7 @@\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n-                DefaultAtmosphereRequest.newInstance(),\n+                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);\n@@ -231,11 +231,11 @@\n      *\n      * @param config an {@link AtmosphereConfig}\n      * @param uuid   a String representing a UUID\n-     * @param request a {@link DefaultAtmosphereRequest}\n+     * @param request a {@link AtmosphereRequest}\n      * @return\n      */\n     @Override\n-    public final AtmosphereResource create(AtmosphereConfig config, String uuid, DefaultAtmosphereRequest request) {\n+    public final AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n         AtmosphereResponse response = AtmosphereResponse.newInstance();\n         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 238, "bugNodeStartChar": 9879, "bugNodeLength": 32, "fixLineNum": 238, "fixNodeStartChar": 9879, "fixNodeLength": 25, "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "74b38bfaf709d46b78f4e30849eba950666a1684", "fixCommitParentSHA1": "d95c0dcd1ce5f6f761c28beaed08ce54616ad66f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex 53192f3..8731442 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -589,7 +589,7 @@\n     @Override\n     public void close(final WebSocket webSocket, int closeCode) {\n \n-        if (webSocket.isOpen()) {\n+        if (!webSocket.isOpen()) {\n             logger.trace(\"Already closed {}\", webSocket);\n             return;\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 592, "bugNodeStartChar": 27298, "bugNodeLength": 18, "fixLineNum": 592, "fixNodeStartChar": 27298, "fixNodeLength": 19, "sourceBeforeFix": "webSocket.isOpen()", "sourceAfterFix": "!webSocket.isOpen()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "69f4d46a6b7d8134c5f0b0c238658d00be40c2b3", "fixCommitParentSHA1": "5fa26feeb4ecdafcc2e20fc49507fa6d139603de", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java b/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java\nindex 97dc4b1..950f95e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java\n@@ -188,7 +188,7 @@\n \n     // Only used during development. If set to \"true\" debug messages are displayed.\n     private static final boolean DEBUG = false;\n-    private final Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);\n+    private final static Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);\n \n     // Constant Pool type tags\n     private static final int CP_UTF8 = 1;\n@@ -795,7 +795,7 @@\n                 }\n                 logMessage = String.format(message, args);\n             }\n-            System.out.println(logMessage); // SUPPRESS CHECKSTYLE RegexpSinglelineJavaCheck\n+            logger.debug(logMessage); // SUPPRESS CHECKSTYLE RegexpSinglelineJavaCheck\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 191, "bugNodeStartChar": 7136, "bugNodeLength": 80, "fixLineNum": 191, "fixNodeStartChar": 7136, "fixNodeLength": 87, "sourceBeforeFix": "18", "sourceAfterFix": "26"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c6a6bbddaed161c8637a155ea655be2702492a84", "fixCommitParentSHA1": "aa464cf122ab9114a8a05acb7ce5fe119a337109", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java b/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java\nindex 8b7f569..699bb88 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java\n@@ -165,7 +165,7 @@\n      * @param event\n      */\n     protected final void postStateChange(AtmosphereResourceEvent event) {\n-        if (event.isResuming() || event.isCancelled()) return;\n+        if (event.isCancelled() || event.isResuming()) return;\n \n         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(event.getResource());\n         // Between event.isCancelled and resource, the connection has been remotly closed.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 168, "bugNodeStartChar": 6725, "bugNodeLength": 18, "fixLineNum": 168, "fixNodeStartChar": 6725, "fixNodeLength": 19, "sourceBeforeFix": "event.isResuming()", "sourceAfterFix": "event.isCancelled()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c6a6bbddaed161c8637a155ea655be2702492a84", "fixCommitParentSHA1": "aa464cf122ab9114a8a05acb7ce5fe119a337109", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java b/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java\nindex 8b7f569..699bb88 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java\n@@ -165,7 +165,7 @@\n      * @param event\n      */\n     protected final void postStateChange(AtmosphereResourceEvent event) {\n-        if (event.isResuming() || event.isCancelled()) return;\n+        if (event.isCancelled() || event.isResuming()) return;\n \n         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(event.getResource());\n         // Between event.isCancelled and resource, the connection has been remotly closed.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 168, "bugNodeStartChar": 6725, "bugNodeLength": 18, "fixLineNum": 168, "fixNodeStartChar": 6725, "fixNodeLength": 19, "sourceBeforeFix": "event.isResuming()", "sourceAfterFix": "event.isCancelled()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "144599323abb2666d2226773d46a2cc26faa83ec", "fixCommitParentSHA1": "0931db176963ca3f16886b64edd3d6579fdfe046", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java\nindex 68a5383..f7b81ed 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java\n@@ -152,7 +152,7 @@\n     @Override\n     public AsyncSupport complete(AtmosphereResourceImpl r) {\n         try {\n-            HttpEvent event = (HttpEvent) r.getRequest().getAttribute(HTTP_EVENT);\n+            HttpEvent event = (HttpEvent) r.getRequest(false).getAttribute(HTTP_EVENT);\n             // Resume without closing the underlying suspended connection.\n             if (event != null) {\n                 event.close();\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 155, "bugNodeStartChar": 5952, "bugNodeLength": 14, "fixLineNum": 155, "fixNodeStartChar": 5952, "fixNodeLength": 19, "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "r.getRequest(false)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "28ba4cee88e6eb983244cb85dcd91e5f150f7e32", "fixCommitParentSHA1": "afdea2f442589013487b23008f40d7c05a0ba150", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex 8e558ed..eb868a4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -118,9 +118,9 @@\n         String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n         if (s == null) {\n             s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n-            if (s == null) {\n+            if (s == null && req != null) {\n                 String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n-                s = !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n+                s = tmp != null && !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n             }\n         }\n         uuid = s == null ? UUID.randomUUID().toString() : s;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 121, "bugNodeStartChar": 5340, "bugNodeLength": 9, "fixLineNum": 121, "fixNodeStartChar": 5340, "fixNodeLength": 24, "sourceBeforeFix": "s == null", "sourceAfterFix": "s == null && req != null"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "72f919246228950fb80eee5c119292bed331633e", "fixCommitParentSHA1": "440ac60d2c8128b9142258c864ec8d780260caf6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex ca8925e..131ee08 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -244,7 +244,7 @@\n         try {\n             if (!isResumed.getAndSet(true) && isInScope.get()) {\n                 suspended.set(false);\n-                logger.debug(\"AtmosphereResource {} is resuming\", uuid());\n+                logger.trace(\"AtmosphereResource {} is resuming\", uuid());\n \n                 action.type(Action.TYPE.RESUME);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 247, "bugNodeStartChar": 8970, "bugNodeLength": 57, "fixLineNum": 247, "fixNodeStartChar": 8970, "fixNodeLength": 57, "sourceBeforeFix": "logger.debug(\"AtmosphereResource {} is resuming\",uuid())", "sourceAfterFix": "logger.trace(\"AtmosphereResource {} is resuming\",uuid())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "72f919246228950fb80eee5c119292bed331633e", "fixCommitParentSHA1": "440ac60d2c8128b9142258c864ec8d780260caf6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex ca8925e..131ee08 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -244,7 +244,7 @@\n         try {\n             if (!isResumed.getAndSet(true) && isInScope.get()) {\n                 suspended.set(false);\n-                logger.debug(\"AtmosphereResource {} is resuming\", uuid());\n+                logger.trace(\"AtmosphereResource {} is resuming\", uuid());\n \n                 action.type(Action.TYPE.RESUME);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 247, "bugNodeStartChar": 8970, "bugNodeLength": 57, "fixLineNum": 247, "fixNodeStartChar": 8970, "fixNodeLength": 57, "sourceBeforeFix": "logger.debug(\"AtmosphereResource {} is resuming\",uuid())", "sourceAfterFix": "logger.trace(\"AtmosphereResource {} is resuming\",uuid())"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "854af53a74b461754392f0b9e854e8fefe8c0ade", "fixCommitParentSHA1": "d038f3abff680835cd2d9d4d9e68428dee0e15dd", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex 7db4ad9..9148579 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -609,7 +609,7 @@\n                 }\n \n                 logger.trace(\"About to close AtmosphereResource for {} with code {}\", resource, closeCode);\n-                if (!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {\n+                if (!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {\n                     // See https://github.com/Atmosphere/atmosphere/issues/1590\n                     // Better to call onDisconnect that onResume.\n                     if (allowedToClose) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 612, "bugNodeStartChar": 28512, "bugNodeLength": 89, "fixLineNum": 612, "fixNodeStartChar": 28512, "fixNodeLength": 150, "sourceBeforeFix": "!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()", "sourceAfterFix": "!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "0bf18ee3843b60bbd95b5d4dac20a1ab505a2f41", "fixCommitParentSHA1": "8c07e2d1a96ec1adea9bc06bc86df366368cffa2", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex b54c5b7..7db4ad9 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -643,8 +643,9 @@\n         }\n     }\n \n+    // Highly bogus nased on which I/O layer we are using.\n     private boolean allowedCloseCode(int closeCode) {\n-        return closeCode < 1002 || closeCode > 1004 ? true : false;\n+        return closeCode < 1001 || closeCode > 1004 ? true : false;\n     }\n \n     private void finish(WebSocket webSocket, AtmosphereResource resource, AtmosphereRequest r, AtmosphereResponse s, boolean closeWebSocket) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 647, "bugNodeStartChar": 30433, "bugNodeLength": 16, "fixLineNum": 647, "fixNodeStartChar": 30433, "fixNodeLength": 16, "sourceBeforeFix": "closeCode < 1002", "sourceAfterFix": "closeCode < 1001"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "50418466a40024d626e2fce8e87693305be3958e", "fixCommitParentSHA1": "ce24d9cd009fbb0ae661075567427d04cd169882", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java\nindex c0ec4e4..57a7f08 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java\n@@ -91,7 +91,7 @@\n                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);\n                 int version = Integer.valueOf(javascriptVersion.split(\"-\")[0].replace(\".\", \"\"));\n                 if (version < 221) {\n-                    logger.debug(\"Invalid Atmosphere Version {}\", javascriptVersion);\n+                    logger.error(\"Invalid Atmosphere Version {}\", javascriptVersion);\n                     response.setStatus(501);\n                     response.addHeader(X_ATMOSPHERE_ERROR, \"Atmosphere Protocol version not supported.\");\n                     try {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 94, "bugNodeStartChar": 3861, "bugNodeLength": 64, "fixLineNum": 94, "fixNodeStartChar": 3861, "fixNodeLength": 64, "sourceBeforeFix": "logger.debug(\"Invalid Atmosphere Version {}\",javascriptVersion)", "sourceAfterFix": "logger.error(\"Invalid Atmosphere Version {}\",javascriptVersion)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "50418466a40024d626e2fce8e87693305be3958e", "fixCommitParentSHA1": "ce24d9cd009fbb0ae661075567427d04cd169882", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java\nindex c0ec4e4..57a7f08 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java\n@@ -91,7 +91,7 @@\n                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);\n                 int version = Integer.valueOf(javascriptVersion.split(\"-\")[0].replace(\".\", \"\"));\n                 if (version < 221) {\n-                    logger.debug(\"Invalid Atmosphere Version {}\", javascriptVersion);\n+                    logger.error(\"Invalid Atmosphere Version {}\", javascriptVersion);\n                     response.setStatus(501);\n                     response.addHeader(X_ATMOSPHERE_ERROR, \"Atmosphere Protocol version not supported.\");\n                     try {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 94, "bugNodeStartChar": 3861, "bugNodeLength": 64, "fixLineNum": 94, "fixNodeStartChar": 3861, "fixNodeLength": 64, "sourceBeforeFix": "logger.debug(\"Invalid Atmosphere Version {}\",javascriptVersion)", "sourceAfterFix": "logger.error(\"Invalid Atmosphere Version {}\",javascriptVersion)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6254d02c9aabf3da676b4073158f3b2a12e0ef41", "fixCommitParentSHA1": "5eeb10aa130010234e1bf7b37f860a74abcd4a78", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java\nindex 1d612ca..010f09b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java\n@@ -87,7 +87,8 @@\n                 try {\n                     framework = (AtmosphereFramework) sc.getServletContext()\n                             .getAttribute(sc.getServletContext().getServletRegistration(sc.getServletName()).getName());\n-                } catch (UnsupportedOperationException ex) {\n+                } catch (Exception ex) {\n+                    // Equinox throw an exception (NPE)\n                     // WebLogic Crap => https://github.com/Atmosphere/atmosphere/issues/1569\n                     logger.trace(\"\", ex);\n                 }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 90, "bugNodeStartChar": 3055, "bugNodeLength": 32, "fixLineNum": 90, "fixNodeStartChar": 3055, "fixNodeLength": 12, "sourceBeforeFix": "UnsupportedOperationException ex", "sourceAfterFix": "Exception ex"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7d8950aebe5801a466e215cfcc023b10c818e3ca", "fixCommitParentSHA1": "752b4638c65750d542fc85c2b223573400f29963", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\nindex dc809ff..03b97e0 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n@@ -417,7 +417,7 @@\n             synchronized (impl) {\n                 try {\n                     if (impl.isCancelled()) {\n-                        logger.trace(\"{} is already cancelled\", impl.uuid());\n+                        logger.error(\"{} is already cancelled\", impl.uuid());\n                         return false;\n                     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 420, "bugNodeStartChar": 17097, "bugNodeLength": 52, "fixLineNum": 420, "fixNodeStartChar": 17097, "fixNodeLength": 52, "sourceBeforeFix": "logger.trace(\"{} is already cancelled\",impl.uuid())", "sourceAfterFix": "logger.error(\"{} is already cancelled\",impl.uuid())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7d8950aebe5801a466e215cfcc023b10c818e3ca", "fixCommitParentSHA1": "752b4638c65750d542fc85c2b223573400f29963", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\nindex dc809ff..03b97e0 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n@@ -417,7 +417,7 @@\n             synchronized (impl) {\n                 try {\n                     if (impl.isCancelled()) {\n-                        logger.trace(\"{} is already cancelled\", impl.uuid());\n+                        logger.error(\"{} is already cancelled\", impl.uuid());\n                         return false;\n                     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 420, "bugNodeStartChar": 17097, "bugNodeLength": 52, "fixLineNum": 420, "fixNodeStartChar": 17097, "fixNodeLength": 52, "sourceBeforeFix": "logger.trace(\"{} is already cancelled\",impl.uuid())", "sourceAfterFix": "logger.error(\"{} is already cancelled\",impl.uuid())"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "e87c925a50c793e04e8791259fddcf218ae704c8", "fixCommitParentSHA1": "80f5b90a358a3aa89b58d59554ddeb5aef28c014", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java\nindex 6d2c0ce..b7a1aa2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java\n@@ -53,7 +53,7 @@\n         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);\n         if (servletPath == null) {\n             servletPath = IOUtils.guestServletPath(config);\n-            if (servletPath.equals(\"/\")) {\n+            if (servletPath.equals(\"/\") || servletPath.equals(\"/*\")) {\n                 servletPath = PATH +\"}\";\n             }\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 56, "bugNodeStartChar": 2206, "bugNodeLength": 23, "fixLineNum": 56, "fixNodeStartChar": 2206, "fixNodeLength": 51, "sourceBeforeFix": "servletPath.equals(\"/\")", "sourceAfterFix": "servletPath.equals(\"/\") || servletPath.equals(\"/*\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "42e0782a5258626a58177d154ca0cf3da87cdf7a", "fixCommitParentSHA1": "bb5632018ea2adeac29e0e5fa2397e04edc21b71", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java\nindex a8ec9ea..f3d0f84 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java\n@@ -239,7 +239,7 @@\n      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n-        logger.debug(\"Removing: {}\", r);\n+        logger.trace(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 242, "bugNodeStartChar": 9820, "bugNodeLength": 31, "fixLineNum": 242, "fixNodeStartChar": 9820, "fixNodeLength": 31, "sourceBeforeFix": "logger.debug(\"Removing: {}\",r)", "sourceAfterFix": "logger.trace(\"Removing: {}\",r)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "42e0782a5258626a58177d154ca0cf3da87cdf7a", "fixCommitParentSHA1": "bb5632018ea2adeac29e0e5fa2397e04edc21b71", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java\nindex a8ec9ea..f3d0f84 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java\n@@ -239,7 +239,7 @@\n      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n-        logger.debug(\"Removing: {}\", r);\n+        logger.trace(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 242, "bugNodeStartChar": 9820, "bugNodeLength": 31, "fixLineNum": 242, "fixNodeStartChar": 9820, "fixNodeLength": 31, "sourceBeforeFix": "logger.debug(\"Removing: {}\",r)", "sourceAfterFix": "logger.trace(\"Removing: {}\",r)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "94e4b5926b4c263f4cf5e6ad545a4bb03077b9a5", "fixCommitParentSHA1": "488c6746c5b88270f92193128cfe7be6f19ab874", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\nindex d94b04b..1831378 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n@@ -42,7 +42,7 @@\n         long now = System.nanoTime();\n         CacheMessage cacheMessage = put(e, now, uuid);\n \n-        if (uuid.equals(NULL)) {\n+        if (!uuid.equals(NULL)) {\n             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));\n         }\n         return cacheMessage;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 45, "bugNodeStartChar": 1545, "bugNodeLength": 17, "fixLineNum": 45, "fixNodeStartChar": 1545, "fixNodeLength": 18, "sourceBeforeFix": "uuid.equals(NULL)", "sourceAfterFix": "!uuid.equals(NULL)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "fixCommitParentSHA1": "50035429f8123e8be3c7068c4899e95c13b8bac3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\nindex 1b9c05f..cd9c216 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n@@ -38,13 +38,13 @@\n \n     @Override\n     public WebSocket write(String s) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n+        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n \n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n+        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 41, "bugNodeStartChar": 1278, "bugNodeLength": 45, "fixLineNum": 41, "fixNodeStartChar": 1278, "fixNodeLength": 53, "sourceBeforeFix": "webSocketConnection.getRemote().sendString(s)", "sourceAfterFix": "webSocketConnection.getRemote().sendStringByFuture(s)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "fixCommitParentSHA1": "50035429f8123e8be3c7068c4899e95c13b8bac3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\nindex 1b9c05f..cd9c216 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n@@ -38,13 +38,13 @@\n \n     @Override\n     public WebSocket write(String s) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n+        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n \n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n+        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 41, "bugNodeStartChar": 1278, "bugNodeLength": 45, "fixLineNum": 41, "fixNodeStartChar": 1278, "fixNodeLength": 53, "sourceBeforeFix": "webSocketConnection.getRemote().sendString(s)", "sourceAfterFix": "webSocketConnection.getRemote().sendStringByFuture(s)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "fixCommitParentSHA1": "50035429f8123e8be3c7068c4899e95c13b8bac3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\nindex 1b9c05f..cd9c216 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n@@ -38,13 +38,13 @@\n \n     @Override\n     public WebSocket write(String s) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n+        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n \n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n+        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 47, "bugNodeStartChar": 1471, "bugNodeLength": 77, "fixLineNum": 47, "fixNodeStartChar": 1471, "fixNodeLength": 85, "sourceBeforeFix": "webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))", "sourceAfterFix": "webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "fixCommitParentSHA1": "50035429f8123e8be3c7068c4899e95c13b8bac3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\nindex 1b9c05f..cd9c216 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java\n@@ -38,13 +38,13 @@\n \n     @Override\n     public WebSocket write(String s) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n+        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n \n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n-        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n+        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 47, "bugNodeStartChar": 1471, "bugNodeLength": 77, "fixLineNum": 47, "fixNodeStartChar": 1471, "fixNodeLength": 85, "sourceBeforeFix": "webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))", "sourceAfterFix": "webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d637cd2180f38f02f806773debf614feba7e5a1f", "fixCommitParentSHA1": "d2714e9a1a74b51b5177ce9f72e3aa4bc977dfd2", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\nindex f9ff11c..b02b0e3 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\n@@ -691,7 +691,7 @@\n     /**\n      * {@inheritDoc}\n      */\n-    @Overridee\n+    @Override\n     public void removeAttribute(String name) {\n         b.localAttributes.remove(name);\n         if (isNotNoOps()) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 694, "bugNodeStartChar": 19969, "bugNodeLength": 10, "fixLineNum": 694, "fixNodeStartChar": 19969, "fixNodeLength": 9, "sourceBeforeFix": "@Overridee", "sourceAfterFix": "@Override"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b2b03c23b19619735d114bb2fdd52c69831d776e", "fixCommitParentSHA1": "e53e773ef7131b9a7cd1cbdf319c2599109965fe", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\nindex 097aa4c..2ad9710 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n@@ -159,7 +159,6 @@\n \n     private <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) throws BroadcasterCreationException {\n         try {\n-            //T b = c.getConstructor(String.class, AtmosphereConfig.class).newInstance(id.toString(), config);\n             T b = config.framework().newClassInstance(c, c);\n             b.initialize(id.toString(), legacyBroadcasterURI, config);\n             b.setSuspendPolicy(defaultPolicyInteger, defaultPolicy);\n@@ -220,7 +219,7 @@\n     }\n \n     public <T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfNull, boolean unique) {\n-        synchronized (id) {\n+        synchronized (c) {\n             logger.trace(\"About to create {}\", id);\n             if (unique && store.get(id) != null) {\n                 throw new IllegalStateException(\"Broadcaster already exists \" + id + \". Use BroadcasterFactory.lookup instead\");\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 223, "bugNodeStartChar": 9514, "bugNodeLength": 1371, "fixLineNum": 223, "fixNodeStartChar": 9514, "fixNodeLength": 1370, "sourceBeforeFix": "synchronized (id) {   logger.trace(\"About to create {}\",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException(\"Broadcaster already exists \" + id + \". Use BroadcasterFactory.lookup instead\");   }   T b=(T)store.get(id);   logger.trace(\"Looking in the store using {} returned {}\",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg=\"Invalid lookup class \" + c.getName() + \". Cached class is: \"+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace(\"Removing destroyed Broadcaster {}\",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace(\"Added Broadcaster {} . Factory size: {}\",id,store.size());     }     b=(T)nb;   }   return b; } ", "sourceAfterFix": "synchronized (c) {   logger.trace(\"About to create {}\",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException(\"Broadcaster already exists \" + id + \". Use BroadcasterFactory.lookup instead\");   }   T b=(T)store.get(id);   logger.trace(\"Looking in the store using {} returned {}\",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg=\"Invalid lookup class \" + c.getName() + \". Cached class is: \"+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace(\"Removing destroyed Broadcaster {}\",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace(\"Added Broadcaster {} . Factory size: {}\",id,store.size());     }     b=(T)nb;   }   return b; } "}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0aaa94462bb08336d43b9c8becbbd538108fa318", "fixCommitParentSHA1": "1cf1eede8056f6676abe5e60c365a32672a1a43b", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex b78a635..9f2f554 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,7 +995,7 @@\n             // Must make sure execute only one thread\n             synchronized (r) {\n                 try {\n-                    r.getRequest().setAttribute(CACHED, \"true\");\n+                    rImpl.getRequest().setAttribute(CACHED, \"true\");\n                     prepareInvokeOnStateChange(r, e);\n                 } catch (Throwable t) {\n                     // An exception occurred\n@@ -1408,7 +1408,7 @@\n         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n \n-            String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n+            String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 998, "bugNodeStartChar": 41731, "bugNodeLength": 14, "fixLineNum": 998, "fixNodeStartChar": 41731, "fixNodeLength": 18, "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "rImpl.getRequest()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0aaa94462bb08336d43b9c8becbbd538108fa318", "fixCommitParentSHA1": "1cf1eede8056f6676abe5e60c365a32672a1a43b", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex b78a635..9f2f554 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,7 +995,7 @@\n             // Must make sure execute only one thread\n             synchronized (r) {\n                 try {\n-                    r.getRequest().setAttribute(CACHED, \"true\");\n+                    rImpl.getRequest().setAttribute(CACHED, \"true\");\n                     prepareInvokeOnStateChange(r, e);\n                 } catch (Throwable t) {\n                     // An exception occurred\n@@ -1408,7 +1408,7 @@\n         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n \n-            String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n+            String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 998, "bugNodeStartChar": 41731, "bugNodeLength": 14, "fixLineNum": 998, "fixNodeStartChar": 41731, "fixNodeLength": 18, "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "rImpl.getRequest()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "9a846bb164140f14f649f29becc71919bbbd3ca4", "fixCommitParentSHA1": "1c8f40558c1d7d39d69f22fa55ec047e2dd4328d", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex e1420f9..935f9e7 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -878,7 +878,7 @@\n             }\n \n             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {\n-                if (!s.contains(a.getName())) {\n+                if (!disables.contains(a.getName())) {\n                     interceptors.addFirst(newAInterceptor(a));\n                 } else {\n                     logger.info(\"Dropping Interceptor {}\", a.getName());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 881, "bugNodeStartChar": 38248, "bugNodeLength": 23, "fixLineNum": 881, "fixNodeStartChar": 38248, "fixNodeLength": 30, "sourceBeforeFix": "s.contains(a.getName())", "sourceAfterFix": "disables.contains(a.getName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9a846bb164140f14f649f29becc71919bbbd3ca4", "fixCommitParentSHA1": "1c8f40558c1d7d39d69f22fa55ec047e2dd4328d", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex e1420f9..935f9e7 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -878,7 +878,7 @@\n             }\n \n             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {\n-                if (!s.contains(a.getName())) {\n+                if (!disables.contains(a.getName())) {\n                     interceptors.addFirst(newAInterceptor(a));\n                 } else {\n                     logger.info(\"Dropping Interceptor {}\", a.getName());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 881, "bugNodeStartChar": 38248, "bugNodeLength": 23, "fixLineNum": 881, "fixNodeStartChar": 38248, "fixNodeLength": 30, "sourceBeforeFix": "s.contains(a.getName())", "sourceAfterFix": "disables.contains(a.getName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "45b12e33e61bbddc5973995f9fcbbdff9d87ccdb", "fixCommitParentSHA1": "d1a6e92bd22fd191aab0530e4fc2d2e751a5e6bd", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListenerAdapter.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListenerAdapter.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListenerAdapter.java\nindex e40cb32..71c73f4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListenerAdapter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListenerAdapter.java\n@@ -25,7 +25,7 @@\n  */\n public class AtmosphereResourceEventListenerAdapter implements AtmosphereResourceEventListener {\n \n-    private final static Logger logger = LoggerFactory.getLogger(AtmosphereResourceEventListener.class);\n+    private final static Logger logger = LoggerFactory.getLogger(AtmosphereResourceEventListenerAdapter.class);\n \n     @Override\n     public void onPreSuspend(AtmosphereResourceEvent event) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 28, "bugNodeStartChar": 999, "bugNodeLength": 37, "fixLineNum": 28, "fixNodeStartChar": 999, "fixNodeLength": 44, "sourceBeforeFix": "AtmosphereResourceEventListener.class", "sourceAfterFix": "AtmosphereResourceEventListenerAdapter.class"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "fixCommitParentSHA1": "f725659d763ba849234e0d3621b18b1463ef9fd9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java b/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java\nindex f03face..5d23bac 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java\n@@ -76,7 +76,7 @@\n     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n-        webSocketProcessor.close(webSocket, 0);\n+        webSocketProcessor.close(webSocket, 1000);\n     }\n \n     @Override\n@@ -95,7 +95,7 @@\n             } else if (frame instanceof CloseFrame) {\n                 // TODO shall we call this here?\n                 logger.trace(\"WebSocket.onReceivedFrame (CloseFrame)\");\n-                webSocketProcessor.close(webSocket, 0);\n+                webSocketProcessor.close(webSocket, 1000);\n             } else {\n                 logger.trace(\"WebSocket.onReceivedFrame skipping: \" + frame);\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 79, "bugNodeStartChar": 3148, "bugNodeLength": 38, "fixLineNum": 79, "fixNodeStartChar": 3148, "fixNodeLength": 41, "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "fixCommitParentSHA1": "f725659d763ba849234e0d3621b18b1463ef9fd9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java b/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java\nindex f03face..5d23bac 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java\n@@ -76,7 +76,7 @@\n     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n-        webSocketProcessor.close(webSocket, 0);\n+        webSocketProcessor.close(webSocket, 1000);\n     }\n \n     @Override\n@@ -95,7 +95,7 @@\n             } else if (frame instanceof CloseFrame) {\n                 // TODO shall we call this here?\n                 logger.trace(\"WebSocket.onReceivedFrame (CloseFrame)\");\n-                webSocketProcessor.close(webSocket, 0);\n+                webSocketProcessor.close(webSocket, 1000);\n             } else {\n                 logger.trace(\"WebSocket.onReceivedFrame skipping: \" + frame);\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 98, "bugNodeStartChar": 4130, "bugNodeLength": 38, "fixLineNum": 98, "fixNodeStartChar": 4130, "fixNodeLength": 41, "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "24cf9587db23679d74680f32beade181791bf88c", "fixCommitParentSHA1": "3f19a85501d65a47de8d21e40d1296c0b8fd57bb", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex e5b87c1..197c0d9 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -600,7 +600,7 @@\n             asyncWriteFuture = new Future<?>[threads];\n             for (int i = 0; i < threads; i++) {\n                 notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());\n-                asyncWriteFuture[i] = bc.getExecutorService().submit(getAsyncWriteHandler(uniqueWriteQueue));\n+                asyncWriteFuture[i] = bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue));\n             }\n         } else {\n             notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 603, "bugNodeStartChar": 25483, "bugNodeLength": 23, "fixLineNum": 603, "fixNodeStartChar": 25483, "fixNodeLength": 25, "sourceBeforeFix": "bc.getExecutorService()", "sourceAfterFix": "bc.getAsyncWriteService()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "24cf9587db23679d74680f32beade181791bf88c", "fixCommitParentSHA1": "3f19a85501d65a47de8d21e40d1296c0b8fd57bb", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex e5b87c1..197c0d9 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -600,7 +600,7 @@\n             asyncWriteFuture = new Future<?>[threads];\n             for (int i = 0; i < threads; i++) {\n                 notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());\n-                asyncWriteFuture[i] = bc.getExecutorService().submit(getAsyncWriteHandler(uniqueWriteQueue));\n+                asyncWriteFuture[i] = bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue));\n             }\n         } else {\n             notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 603, "bugNodeStartChar": 25483, "bugNodeLength": 23, "fixLineNum": 603, "fixNodeStartChar": 25483, "fixNodeLength": 25, "sourceBeforeFix": "bc.getExecutorService()", "sourceAfterFix": "bc.getAsyncWriteService()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java b/modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java\nindex a763738..207973e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java\n@@ -74,7 +74,7 @@\n                 IntrospectionUtils.addProperty(handler, nv[0], nv[1]);\n             }\n \n-            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), true), l);\n+            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), a.path(), true), l);\n             framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());\n         } catch (Throwable e) {\n             logger.warn(\"\", e);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 77, "bugNodeStartChar": 3106, "bugNodeLength": 63, "fixLineNum": 77, "fixNodeStartChar": 3106, "fixNodeLength": 73, "sourceBeforeFix": "framework.getBroadcasterFactory().lookup(a.broadcaster(),true)", "sourceAfterFix": "framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java b/modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java\nindex 58602ac..a7021d3 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java\n@@ -65,7 +65,7 @@\n                     logger.warn(\"\", e);\n                 }\n             }\n-            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), true), l);\n+            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), a.path(), true), l);\n         } catch (Throwable e) {\n             logger.warn(\"\", e);\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 68, "bugNodeStartChar": 2756, "bugNodeLength": 63, "fixLineNum": 68, "fixNodeStartChar": 2756, "fixNodeLength": 73, "sourceBeforeFix": "framework.getBroadcasterFactory().lookup(a.broadcaster(),true)", "sourceAfterFix": "framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java b/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java\nindex 6a788d9..d672b3e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java\n@@ -70,7 +70,7 @@\n             if (m.path().contains(\"{\")) {\n                 framework.interceptors().add(new MeteorServiceInterceptor());\n             }\n-            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), true), l);\n+            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), m.path(), true), l);\n             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());\n         } catch (Throwable e) {\n             logger.warn(\"\", e);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 73, "bugNodeStartChar": 2823, "bugNodeLength": 63, "fixLineNum": 73, "fixNodeStartChar": 2823, "fixNodeLength": 73, "sourceBeforeFix": "framework.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java\nindex 3386405..aeddd34 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java\n@@ -97,10 +97,10 @@\n                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;\n                         if (!singleton) {\n                             config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()),\n-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                         } else {\n                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                         }\n                         request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                     } catch (Throwable e) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 100, "bugNodeStartChar": 3789, "bugNodeLength": 60, "fixLineNum": 100, "fixNodeStartChar": 3789, "fixNodeLength": 66, "sourceBeforeFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java\nindex 3386405..aeddd34 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java\n@@ -97,10 +97,10 @@\n                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;\n                         if (!singleton) {\n                             config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()),\n-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                         } else {\n                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                         }\n                         request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                     } catch (Throwable e) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 103, "bugNodeStartChar": 4032, "bugNodeLength": 60, "fixLineNum": 103, "fixNodeStartChar": 4032, "fixNodeLength": 66, "sourceBeforeFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java\nindex d4f45af..d56bb5d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java\n@@ -119,10 +119,10 @@\n                                     ManagedAtmosphereHandler h = new ManagedAtmosphereHandler();\n                                     h.configure(config, config.framework().newClassInstance(ap.target().getClass()));\n                                     config.framework().addAtmosphereHandler(path, h,\n-                                            config.getBroadcasterFactory().lookup(a.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);\n                                 } else {\n                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n-                                            config.getBroadcasterFactory().lookup(a.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);\n                                 }\n                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                             } catch (Throwable e) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 122, "bugNodeStartChar": 4635, "bugNodeLength": 60, "fixLineNum": 122, "fixNodeStartChar": 4635, "fixNodeLength": 66, "sourceBeforeFix": "config.getBroadcasterFactory().lookup(a.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java\nindex d4f45af..d56bb5d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java\n@@ -119,10 +119,10 @@\n                                     ManagedAtmosphereHandler h = new ManagedAtmosphereHandler();\n                                     h.configure(config, config.framework().newClassInstance(ap.target().getClass()));\n                                     config.framework().addAtmosphereHandler(path, h,\n-                                            config.getBroadcasterFactory().lookup(a.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);\n                                 } else {\n                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n-                                            config.getBroadcasterFactory().lookup(a.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);\n                                 }\n                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                             } catch (Throwable e) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 125, "bugNodeStartChar": 4902, "bugNodeLength": 60, "fixLineNum": 125, "fixNodeStartChar": 4902, "fixNodeLength": 66, "sourceBeforeFix": "config.getBroadcasterFactory().lookup(a.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java\nindex eb11b0b..4a6f8f2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java\n@@ -119,10 +119,10 @@\n                                     r.setServlet(config.framework().newClassInstance(s.getClass()));\n                                     r.init(config);\n                                     config.framework().addAtmosphereHandler(path, r,\n-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                                 } else {\n                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                                 }\n                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                             } catch (Throwable e) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 122, "bugNodeStartChar": 4717, "bugNodeLength": 60, "fixLineNum": 122, "fixNodeStartChar": 4717, "fixNodeLength": 66, "sourceBeforeFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713", "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java\nindex eb11b0b..4a6f8f2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java\n@@ -119,10 +119,10 @@\n                                     r.setServlet(config.framework().newClassInstance(s.getClass()));\n                                     r.init(config);\n                                     config.framework().addAtmosphereHandler(path, r,\n-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                                 } else {\n                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,\n-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);\n+                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);\n                                 }\n                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, \"true\");\n                             } catch (Throwable e) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 125, "bugNodeStartChar": 4984, "bugNodeLength": 60, "fixLineNum": 125, "fixNodeStartChar": 4984, "fixNodeLength": 66, "sourceBeforeFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),true)", "sourceAfterFix": "config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d27dee43cab04016bd811fff8c7938488b424ea1", "fixCommitParentSHA1": "647fbbf72c776f8da3fc0858a7baa2e08da8a597", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\nindex ac22130..23ff78b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\n@@ -253,7 +253,7 @@\n                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n \n-                t = b.getBroadcasterConfig().applyFilters(r, t);\n+                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 256, "bugNodeStartChar": 10866, "bugNodeLength": 47, "fixLineNum": 256, "fixNodeStartChar": 10866, "fixNodeLength": 60, "sourceBeforeFix": "t=b.getBroadcasterConfig().applyFilters(r,t)", "sourceAfterFix": "cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6d760c0089645e220355f70b258dbfadb86a055e", "fixCommitParentSHA1": "3eee191e453a4f3373fce7fe96a6dadd4669da8d", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\nindex 23ff78b..ac22130 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\n@@ -253,7 +253,7 @@\n                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n \n-                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n+                t = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 256, "bugNodeStartChar": 10866, "bugNodeLength": 60, "fixLineNum": 256, "fixNodeStartChar": 10866, "fixNodeLength": 47, "sourceBeforeFix": "cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)", "sourceAfterFix": "t=b.getBroadcasterConfig().applyFilters(r,t)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3eee191e453a4f3373fce7fe96a6dadd4669da8d", "fixCommitParentSHA1": "2e0350681b80e64066677976606c4537d9a197ed", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\nindex f05a924..23ff78b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java\n@@ -253,7 +253,7 @@\n                 cache = b.getBroadcasterConfig().getBroadcasterCache();\n                 List<Object> t = cache.retrieveFromCache(b.getID(), r);\n \n-                cachedMessages = b.getBroadcasterConfig().applyFilters(r, cachedMessages);\n+                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);\n                 if (t.size() > 0) {\n                     logger.trace(\"Found Cached Messages For AtmosphereResource {} with Broadcaster {}\", r.uuid(), broadcasterID);\n                     cachedMessages.addAll(t);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 256, "bugNodeStartChar": 10883, "bugNodeLength": 56, "fixLineNum": 256, "fixNodeStartChar": 10883, "fixNodeLength": 43, "sourceBeforeFix": "b.getBroadcasterConfig().applyFilters(r,cachedMessages)", "sourceAfterFix": "b.getBroadcasterConfig().applyFilters(r,t)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "5363d74be7745e476f75c6175628dc85fe6168e8", "fixCommitParentSHA1": "7eb5370be35890a364cc38607d6467c5281cdd6f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\nindex abb4f9b..9056a33 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\n@@ -426,7 +426,7 @@\n             for (Cookie c : cookies) {\n                 headers.put(\"Set-Cookie\", c.toString());\n             }\n-            headerHandled = false;\n+            headerHandled = true;\n         }\n         return headers;\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 429, "bugNodeStartChar": 12684, "bugNodeLength": 21, "fixLineNum": 429, "fixNodeStartChar": 12684, "fixNodeLength": 20, "sourceBeforeFix": "headerHandled=false", "sourceAfterFix": "headerHandled=true"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9ad66ccebc3547d555ec747fa3b3939ca1a9f876", "fixCommitParentSHA1": "5eb9868689e9a4c3edd2cb0fe5117a961d0e893e", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 6b8488e..58b426e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -201,19 +201,20 @@\n     protected boolean executeFirstSet = false;\n \n     protected final Class<? extends AtmosphereInterceptor>[] defaultInterceptors = new Class[]{\n-            OnDisconnectInterceptor.class,\n-            // ADD Tracking ID Handshake\n-            JavaScriptProtocol.class,\n-            // ADD JSONP support\n-            JSONPAtmosphereInterceptor.class,\n-            // Add SSE support\n-            SSEAtmosphereInterceptor.class,\n-            // Android 2.3.x streaming support\n-            AndroidAtmosphereInterceptor.class,\n+            // Default Interceptor\n+            DefaultHeadersInterceptor.class,\n             // WebKit & IE Padding\n             PaddingAtmosphereInterceptor.class,\n-            // Default Interceptor\n-            DefaultHeadersInterceptor.class\n+            // Android 2.3.x streaming support\n+            AndroidAtmosphereInterceptor.class,\n+            // Add SSE support\n+            SSEAtmosphereInterceptor.class,\n+            // ADD JSONP support\n+            JSONPAtmosphereInterceptor.class,\n+            // ADD Tracking ID Handshake\n+            JavaScriptProtocol.class,\n+            // OnDisconnect\n+            OnDisconnectInterceptor.class\n     };\n \n     /**\n@@ -786,7 +787,7 @@\n         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);\n         if (s == null) {\n             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {\n-                interceptors.addFirst(newAInterceptor(a));\n+                interceptors.addLast(newAInterceptor(a));\n             }\n             logger.info(\"Set {} to disable them.\", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR, interceptors);\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 789, "bugNodeStartChar": 33961, "bugNodeLength": 41, "fixLineNum": 789, "fixNodeStartChar": 33961, "fixNodeLength": 40, "sourceBeforeFix": "interceptors.addFirst(newAInterceptor(a))", "sourceAfterFix": "interceptors.addLast(newAInterceptor(a))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9ad66ccebc3547d555ec747fa3b3939ca1a9f876", "fixCommitParentSHA1": "5eb9868689e9a4c3edd2cb0fe5117a961d0e893e", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 6b8488e..58b426e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -201,19 +201,20 @@\n     protected boolean executeFirstSet = false;\n \n     protected final Class<? extends AtmosphereInterceptor>[] defaultInterceptors = new Class[]{\n-            OnDisconnectInterceptor.class,\n-            // ADD Tracking ID Handshake\n-            JavaScriptProtocol.class,\n-            // ADD JSONP support\n-            JSONPAtmosphereInterceptor.class,\n-            // Add SSE support\n-            SSEAtmosphereInterceptor.class,\n-            // Android 2.3.x streaming support\n-            AndroidAtmosphereInterceptor.class,\n+            // Default Interceptor\n+            DefaultHeadersInterceptor.class,\n             // WebKit & IE Padding\n             PaddingAtmosphereInterceptor.class,\n-            // Default Interceptor\n-            DefaultHeadersInterceptor.class\n+            // Android 2.3.x streaming support\n+            AndroidAtmosphereInterceptor.class,\n+            // Add SSE support\n+            SSEAtmosphereInterceptor.class,\n+            // ADD JSONP support\n+            JSONPAtmosphereInterceptor.class,\n+            // ADD Tracking ID Handshake\n+            JavaScriptProtocol.class,\n+            // OnDisconnect\n+            OnDisconnectInterceptor.class\n     };\n \n     /**\n@@ -786,7 +787,7 @@\n         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);\n         if (s == null) {\n             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {\n-                interceptors.addFirst(newAInterceptor(a));\n+                interceptors.addLast(newAInterceptor(a));\n             }\n             logger.info(\"Set {} to disable them.\", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR, interceptors);\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 789, "bugNodeStartChar": 33961, "bugNodeLength": 41, "fixLineNum": 789, "fixNodeStartChar": 33961, "fixNodeLength": 40, "sourceBeforeFix": "interceptors.addFirst(newAInterceptor(a))", "sourceAfterFix": "interceptors.addLast(newAInterceptor(a))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3db7e7672933dee660e38300f9d66330909e7c09", "fixCommitParentSHA1": "45d9f85c54a169d144286d72ec1eb2c2c572f6a8", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java\nindex e8799c3..e31b884 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java\n@@ -297,7 +297,7 @@\n \n         if (cs == null) {\n             AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());\n-            return nativeSupport == null ? defaultCometSupport(useServlet30Async) : nativeSupport;\n+            return nativeSupport == null ? defaultCometSupport(defaultToBlocking) : nativeSupport;\n         } else {\n             return cs;\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 300, "bugNodeStartChar": 13223, "bugNodeLength": 38, "fixLineNum": 300, "fixNodeStartChar": 13223, "fixNodeLength": 38, "sourceBeforeFix": "defaultCometSupport(useServlet30Async)", "sourceAfterFix": "defaultCometSupport(defaultToBlocking)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e978b63812235df130f7598de0a9a22b85589c32", "fixCommitParentSHA1": "45d9f85c54a169d144286d72ec1eb2c2c572f6a8", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java\nindex e8799c3..e31b884 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java\n@@ -297,7 +297,7 @@\n \n         if (cs == null) {\n             AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());\n-            return nativeSupport == null ? defaultCometSupport(useServlet30Async) : nativeSupport;\n+            return nativeSupport == null ? defaultCometSupport(defaultToBlocking) : nativeSupport;\n         } else {\n             return cs;\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 300, "bugNodeStartChar": 13223, "bugNodeLength": 38, "fixLineNum": 300, "fixNodeStartChar": 13223, "fixNodeLength": 38, "sourceBeforeFix": "defaultCometSupport(useServlet30Async)", "sourceAfterFix": "defaultCometSupport(defaultToBlocking)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f0fa093ebc7f7d1b0b9beb254f6531bb77310853", "fixCommitParentSHA1": "eed3b6cbdb9424e3a999118acb3f6eb4e49dac9c", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 666395c..9695e3c 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -581,10 +581,10 @@\n             initEndpointMapper();\n \n             autoDetectContainer();\n-            configureWebDotXmlAtmosphereHandler(sc);\n+            configureWebDotXmlAtmosphereHandler(scFacade);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n-            configureAtmosphereInterceptor(sc);\n+            configureAtmosphereInterceptor(scFacade);\n             analytics();\n \n             if (broadcasterCacheClassName == null) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 584, "bugNodeStartChar": 25102, "bugNodeLength": 39, "fixLineNum": 584, "fixNodeStartChar": 25102, "fixNodeLength": 45, "sourceBeforeFix": "configureWebDotXmlAtmosphereHandler(sc)", "sourceAfterFix": "configureWebDotXmlAtmosphereHandler(scFacade)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f0fa093ebc7f7d1b0b9beb254f6531bb77310853", "fixCommitParentSHA1": "eed3b6cbdb9424e3a999118acb3f6eb4e49dac9c", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 666395c..9695e3c 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -581,10 +581,10 @@\n             initEndpointMapper();\n \n             autoDetectContainer();\n-            configureWebDotXmlAtmosphereHandler(sc);\n+            configureWebDotXmlAtmosphereHandler(scFacade);\n             asyncSupport.init(scFacade);\n             initAtmosphereHandler(scFacade);\n-            configureAtmosphereInterceptor(sc);\n+            configureAtmosphereInterceptor(scFacade);\n             analytics();\n \n             if (broadcasterCacheClassName == null) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 587, "bugNodeStartChar": 25241, "bugNodeLength": 34, "fixLineNum": 587, "fixNodeStartChar": 25241, "fixNodeLength": 40, "sourceBeforeFix": "configureAtmosphereInterceptor(sc)", "sourceAfterFix": "configureAtmosphereInterceptor(scFacade)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "5bb9d3bf8f6ca67da43de8cc4aa7ea0a5b382a29", "fixCommitParentSHA1": "00aafbb84e1e1613cdecfb4b0026bb8afed64719", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java\nindex 41e2135..e105a63 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java\n@@ -67,7 +67,7 @@\n \n         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);\n \n-        if (annotations == null) {\n+        if (annotations == null || annotations.isEmpty()) {\n             delegate = new BytecodeBasedAnnotationProcessor();\n         } else {\n             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 70, "bugNodeStartChar": 2888, "bugNodeLength": 19, "fixLineNum": 70, "fixNodeStartChar": 2888, "fixNodeLength": 44, "sourceBeforeFix": "annotations == null", "sourceAfterFix": "annotations == null || annotations.isEmpty()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "5bb9d3bf8f6ca67da43de8cc4aa7ea0a5b382a29", "fixCommitParentSHA1": "00aafbb84e1e1613cdecfb4b0026bb8afed64719", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java\nindex 41e2135..e105a63 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java\n@@ -67,7 +67,7 @@\n \n         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);\n \n-        if (annotations == null) {\n+        if (annotations == null || annotations.isEmpty()) {\n             delegate = new BytecodeBasedAnnotationProcessor();\n         } else {\n             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 70, "bugNodeStartChar": 2888, "bugNodeLength": 19, "fixLineNum": 70, "fixNodeStartChar": 2888, "fixNodeLength": 44, "sourceBeforeFix": "annotations == null", "sourceAfterFix": "annotations == null || annotations.isEmpty()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c232dcecf1f1512e4d3c5fbe9246f7825dd42f54", "fixCommitParentSHA1": "fc836787c99ace0d49affba5b38b38eec03ed8d0", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex 310e1df..664f6cf 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -88,7 +88,7 @@\n \n                 // (4) try without a path\n                 if (handler == null) {\n-                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n+                    String p = path.lastIndexOf(\"/\") <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0) {\n                         handler = map(p, handlers);\n \n@@ -131,7 +131,7 @@\n \n                 // (4) try without a path\n                 if (handler == null) {\n-                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n+                    String p = path.lastIndexOf(\"/\")  <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0 && p.indexOf(\"/\") != -1) {\n                         handler = match(p, handlers);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 91, "bugNodeStartChar": 2920, "bugNodeLength": 26, "fixLineNum": 91, "fixNodeStartChar": 2920, "fixNodeLength": 26, "sourceBeforeFix": "path.lastIndexOf(\"/\") == 0", "sourceAfterFix": "path.lastIndexOf(\"/\") <= 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c232dcecf1f1512e4d3c5fbe9246f7825dd42f54", "fixCommitParentSHA1": "fc836787c99ace0d49affba5b38b38eec03ed8d0", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex 310e1df..664f6cf 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -88,7 +88,7 @@\n \n                 // (4) try without a path\n                 if (handler == null) {\n-                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n+                    String p = path.lastIndexOf(\"/\") <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0) {\n                         handler = map(p, handlers);\n \n@@ -131,7 +131,7 @@\n \n                 // (4) try without a path\n                 if (handler == null) {\n-                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n+                    String p = path.lastIndexOf(\"/\")  <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0 && p.indexOf(\"/\") != -1) {\n                         handler = match(p, handlers);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 134, "bugNodeStartChar": 4335, "bugNodeLength": 26, "fixLineNum": 134, "fixNodeStartChar": 4335, "fixNodeLength": 27, "sourceBeforeFix": "path.lastIndexOf(\"/\") == 0", "sourceAfterFix": "path.lastIndexOf(\"/\") <= 0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5cf710f1b72db6a8413d42668b0e878243217165", "fixCommitParentSHA1": "a74b79c7802f088f73d1f126fba378791a5e14c5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 113d7d2..5dd358f 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -2078,7 +2078,7 @@\n                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n-                        l.onSuspend(request, response);\n+                        l.onResume(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 2081, "bugNodeStartChar": 83036, "bugNodeLength": 30, "fixLineNum": 2081, "fixNodeStartChar": 83036, "fixNodeLength": 29, "sourceBeforeFix": "l.onSuspend(request,response)", "sourceAfterFix": "l.onResume(request,response)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5cf710f1b72db6a8413d42668b0e878243217165", "fixCommitParentSHA1": "a74b79c7802f088f73d1f126fba378791a5e14c5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 113d7d2..5dd358f 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -2078,7 +2078,7 @@\n                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n-                        l.onSuspend(request, response);\n+                        l.onResume(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 2081, "bugNodeStartChar": 83036, "bugNodeLength": 30, "fixLineNum": 2081, "fixNodeStartChar": 83036, "fixNodeLength": 29, "sourceBeforeFix": "l.onSuspend(request,response)", "sourceAfterFix": "l.onResume(request,response)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "68e8a46f67e0d42bc3ae4ca828be1ba3c079c786", "fixCommitParentSHA1": "41b768d0380e29250aa44de006dd7c2ece310a04", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex 5c660c9..5560f22 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -363,7 +363,7 @@\n         WebSocketHandler webSocketHandler = webSocket.webSocketHandler();\n         try {\n             if (webSocketHandler == null) {\n-                if (!WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())) {\n+                if (WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())) {\n                     List<AtmosphereRequest> list = WebSocketProtocolStream.class.cast(webSocketProtocol).onBinaryStream(webSocket, stream);\n                     dispatch(webSocket, list);\n                 } else {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 366, "bugNodeStartChar": 15603, "bugNodeLength": 77, "fixLineNum": 366, "fixNodeStartChar": 15603, "fixNodeLength": 76, "sourceBeforeFix": "!WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())", "sourceAfterFix": "WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "638215c325d78574eb156bd455cea3280118b1a0", "fixCommitParentSHA1": "40b5250fd463eb6d4b0dc232feb3b3868c7dc7a6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\nindex 8c69493..76e0c1b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n@@ -31,12 +31,12 @@\n \n     @Override\n     public void sessionCreated(HttpSessionEvent se) {\n-        logger.info(\"Session created\");\n+        logger.trace(\"Session created\");\n     }\n \n     @Override\n     public void sessionDestroyed(HttpSessionEvent se) {\n-        logger.info(\"Session destroyed\");\n+        logger.trace(\"Session destroyed\");\n         try {\n             HttpSession s = se.getSession();\n             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 34, "bugNodeStartChar": 1073, "bugNodeLength": 30, "fixLineNum": 34, "fixNodeStartChar": 1073, "fixNodeLength": 31, "sourceBeforeFix": "logger.info(\"Session created\")", "sourceAfterFix": "logger.trace(\"Session created\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "638215c325d78574eb156bd455cea3280118b1a0", "fixCommitParentSHA1": "40b5250fd463eb6d4b0dc232feb3b3868c7dc7a6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\nindex 8c69493..76e0c1b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n@@ -31,12 +31,12 @@\n \n     @Override\n     public void sessionCreated(HttpSessionEvent se) {\n-        logger.info(\"Session created\");\n+        logger.trace(\"Session created\");\n     }\n \n     @Override\n     public void sessionDestroyed(HttpSessionEvent se) {\n-        logger.info(\"Session destroyed\");\n+        logger.trace(\"Session destroyed\");\n         try {\n             HttpSession s = se.getSession();\n             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 34, "bugNodeStartChar": 1073, "bugNodeLength": 30, "fixLineNum": 34, "fixNodeStartChar": 1073, "fixNodeLength": 31, "sourceBeforeFix": "logger.info(\"Session created\")", "sourceAfterFix": "logger.trace(\"Session created\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "638215c325d78574eb156bd455cea3280118b1a0", "fixCommitParentSHA1": "40b5250fd463eb6d4b0dc232feb3b3868c7dc7a6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\nindex 8c69493..76e0c1b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n@@ -31,12 +31,12 @@\n \n     @Override\n     public void sessionCreated(HttpSessionEvent se) {\n-        logger.info(\"Session created\");\n+        logger.trace(\"Session created\");\n     }\n \n     @Override\n     public void sessionDestroyed(HttpSessionEvent se) {\n-        logger.info(\"Session destroyed\");\n+        logger.trace(\"Session destroyed\");\n         try {\n             HttpSession s = se.getSession();\n             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 39, "bugNodeStartChar": 1190, "bugNodeLength": 32, "fixLineNum": 39, "fixNodeStartChar": 1190, "fixNodeLength": 33, "sourceBeforeFix": "logger.info(\"Session destroyed\")", "sourceAfterFix": "logger.trace(\"Session destroyed\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "638215c325d78574eb156bd455cea3280118b1a0", "fixCommitParentSHA1": "40b5250fd463eb6d4b0dc232feb3b3868c7dc7a6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\nindex 8c69493..76e0c1b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java\n@@ -31,12 +31,12 @@\n \n     @Override\n     public void sessionCreated(HttpSessionEvent se) {\n-        logger.info(\"Session created\");\n+        logger.trace(\"Session created\");\n     }\n \n     @Override\n     public void sessionDestroyed(HttpSessionEvent se) {\n-        logger.info(\"Session destroyed\");\n+        logger.trace(\"Session destroyed\");\n         try {\n             HttpSession s = se.getSession();\n             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 39, "bugNodeStartChar": 1190, "bugNodeLength": 32, "fixLineNum": 39, "fixNodeStartChar": 1190, "fixNodeLength": 33, "sourceBeforeFix": "logger.info(\"Session destroyed\")", "sourceAfterFix": "logger.trace(\"Session destroyed\")"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0bd6dc9caaba2f2fe512f670fa3d04aef9db8eed", "fixCommitParentSHA1": "5f4b718bda5ec66e2ab1d93e73a70ce1c5bdb1d0", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java b/modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java\nindex 5e3645b..f6677a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java\n@@ -44,7 +44,7 @@\n \n     public static Object invokeMethod(Method method, Object objectToInvoke, Object decodedObject) {\n         Object objectToEncode = null;\n-        boolean hasMatch = true;\n+        boolean hasMatch = false;\n         try {\n             objectToEncode = method.invoke(objectToInvoke, new Object[]{decodedObject});\n             hasMatch = true;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 47, "bugNodeStartChar": 1501, "bugNodeLength": 15, "fixLineNum": 47, "fixNodeStartChar": 1501, "fixNodeLength": 16, "sourceBeforeFix": "hasMatch=true", "sourceAfterFix": "hasMatch=false"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "70fd3ee0bcb1f42ecbdacb5164990becbc43d99a", "fixCommitParentSHA1": "c4a20abf032decffe74ade4d7df3787528e4edf3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\nindex f2bad23..9e77f83 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n@@ -51,7 +51,7 @@\n \n     @Override\n     public AsyncIOWriter write(AtmosphereResponse response, String data) throws IOException {\n-        return write(response, data.getBytes());\n+        return write(response, data.getBytes(response.getCharacterEncoding()));\n     }\n \n     @Override\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1888, "bugNodeLength": 15, "fixLineNum": 54, "fixNodeStartChar": 1888, "fixNodeLength": 46, "sourceBeforeFix": "data.getBytes()", "sourceAfterFix": "data.getBytes(response.getCharacterEncoding())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "70fd3ee0bcb1f42ecbdacb5164990becbc43d99a", "fixCommitParentSHA1": "c4a20abf032decffe74ade4d7df3787528e4edf3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex 19e868b..fbf1508 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -574,7 +574,7 @@\n         if (serializer != null) {\n             serializer.write(os, o);\n         } else {\n-            response.getOutputStream().write(o.toString().getBytes());\n+            response.getOutputStream().write(o.toString().getBytes(response.getCharacterEncoding()));\n         }\n         return this;\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 577, "bugNodeStartChar": 20517, "bugNodeLength": 23, "fixLineNum": 577, "fixNodeStartChar": 20517, "fixNodeLength": 54, "sourceBeforeFix": "o.toString().getBytes()", "sourceAfterFix": "o.toString().getBytes(response.getCharacterEncoding())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7bec6383ee34cbc5be55698f9a8d2b480e76d3cb", "fixCommitParentSHA1": "da0424c2840e5028a14cb8a0f69c3fb435cde6cc", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex 5a74c30..88eaaf9 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -431,7 +431,7 @@\n                     } catch (IOException e) {\n                         logger.trace(\"\", e);\n                     }\n-                    AtmosphereResourceImpl.class.cast(r)._destroy();\n+                    AtmosphereResourceImpl.class.cast(resource)._destroy();\n                 }\n             } finally {\n                 if (r != null) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 434, "bugNodeStartChar": 19296, "bugNodeLength": 36, "fixLineNum": 434, "fixNodeStartChar": 19296, "fixNodeLength": 43, "sourceBeforeFix": "AtmosphereResourceImpl.class.cast(r)", "sourceAfterFix": "AtmosphereResourceImpl.class.cast(resource)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d4fe31429eb894cbd99c8872bfafe3135c3b1dc8", "fixCommitParentSHA1": "82ed4c5a5d749c1657dee6ffdbf82c47d9aa4581", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java\nindex 5ba8531..2331890 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java\n@@ -190,7 +190,7 @@\n     @Override\n     protected void queueWriteIO(AtmosphereResource r, Object finalMsg, Entry entry) throws InterruptedException {\n         synchronized (r) {\n-            executeAsyncWrite(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage));\n+            executeAsyncWrite(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage, entry.cache));\n         }\n     }\n }\n\\ No newline at end of file\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 193, "bugNodeStartChar": 6707, "bugNodeLength": 69, "fixLineNum": 193, "fixNodeStartChar": 6707, "fixNodeLength": 82, "sourceBeforeFix": "new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage)", "sourceAfterFix": "new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage,entry.cache)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "fixCommitParentSHA1": "383f6c69b3add555b7d38ef8603cb769ecb26721", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\nindex 4e7f3ea..59541d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n@@ -60,7 +60,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n@@ -85,7 +85,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 63, "bugNodeStartChar": 2356, "bugNodeLength": 27, "fixLineNum": 63, "fixNodeStartChar": 2356, "fixNodeLength": 32, "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "fixCommitParentSHA1": "383f6c69b3add555b7d38ef8603cb769ecb26721", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\nindex 4e7f3ea..59541d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n@@ -60,7 +60,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n@@ -85,7 +85,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 63, "bugNodeStartChar": 2356, "bugNodeLength": 27, "fixLineNum": 63, "fixNodeStartChar": 2356, "fixNodeLength": 32, "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "fixCommitParentSHA1": "383f6c69b3add555b7d38ef8603cb769ecb26721", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\nindex 4e7f3ea..59541d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n@@ -60,7 +60,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n@@ -85,7 +85,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 88, "bugNodeStartChar": 3328, "bugNodeLength": 27, "fixLineNum": 88, "fixNodeStartChar": 3328, "fixNodeLength": 32, "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "fixCommitParentSHA1": "383f6c69b3add555b7d38ef8603cb769ecb26721", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\nindex 4e7f3ea..59541d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java\n@@ -60,7 +60,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n@@ -85,7 +85,7 @@\n         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n-                AtmosphereResponse.create(),\n+                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 88, "bugNodeStartChar": 3328, "bugNodeLength": 27, "fixLineNum": 88, "fixNodeStartChar": 3328, "fixNodeLength": 32, "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "4e0b719c48f4e0d635ec36f54375c071bf6878ee", "fixCommitParentSHA1": "218782fbb2100d2aececf3701501bf1753f75103", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 4ff7ed9..0027c31 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -1089,7 +1089,7 @@\n         // https://github.com/Atmosphere/atmosphere/issues/864\n         // FIX ME IN 1.1 -- For legacy, we need to leave the logic here\n         BroadcasterCache broadcasterCache = bc.getBroadcasterCache();\n-        if (!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())) {\n+        if (!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())) {\n             return;\n         }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1092, "bugNodeStartChar": 43466, "bugNodeLength": 88, "fixLineNum": 1092, "fixNodeStartChar": 43466, "fixNodeLength": 88, "sourceBeforeFix": "!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())", "sourceAfterFix": "!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 133, "bugNodeStartChar": 4049, "bugNodeLength": 17, "fixLineNum": 133, "fixNodeStartChar": 4049, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 133, "bugNodeStartChar": 4049, "bugNodeLength": 17, "fixLineNum": 133, "fixNodeStartChar": 4049, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 180, "bugNodeStartChar": 5493, "bugNodeLength": 17, "fixLineNum": 180, "fixNodeStartChar": 5493, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 180, "bugNodeStartChar": 5493, "bugNodeLength": 17, "fixLineNum": 180, "fixNodeStartChar": 5493, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 275, "bugNodeStartChar": 9941, "bugNodeLength": 17, "fixLineNum": 275, "fixNodeStartChar": 9941, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 275, "bugNodeStartChar": 9941, "bugNodeLength": 17, "fixLineNum": 275, "fixNodeStartChar": 9941, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4831c0257971d6dd9a7cda4a8d9e1ded8c2a77a7", "fixCommitParentSHA1": "827f5063d532cbbaa4b7df2eff2fa5de90fd7499", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex d8003b5..e4a7653 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -892,9 +892,9 @@\n \n         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n \n-            List<Object> filteredMessage = new ArrayList<Object>();\n+            LinkedList<Object> filteredMessage = new LinkedList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n-                filteredMessage.add(perRequestFilter(r, new Entry(o, r, f, o), false));\n+                filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n \n             e.setMessage(filteredMessage);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 895, "bugNodeStartChar": 34522, "bugNodeLength": 12, "fixLineNum": 895, "fixNodeStartChar": 34522, "fixNodeLength": 18, "sourceBeforeFix": "List<Object>", "sourceAfterFix": "LinkedList<Object>"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4831c0257971d6dd9a7cda4a8d9e1ded8c2a77a7", "fixCommitParentSHA1": "827f5063d532cbbaa4b7df2eff2fa5de90fd7499", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex d8003b5..e4a7653 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -892,9 +892,9 @@\n \n         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n \n-            List<Object> filteredMessage = new ArrayList<Object>();\n+            LinkedList<Object> filteredMessage = new LinkedList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n-                filteredMessage.add(perRequestFilter(r, new Entry(o, r, f, o), false));\n+                filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n \n             e.setMessage(filteredMessage);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 897, "bugNodeStartChar": 34649, "bugNodeLength": 70, "fixLineNum": 897, "fixNodeStartChar": 34649, "fixNodeLength": 74, "sourceBeforeFix": "filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))", "sourceAfterFix": "filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4831c0257971d6dd9a7cda4a8d9e1ded8c2a77a7", "fixCommitParentSHA1": "827f5063d532cbbaa4b7df2eff2fa5de90fd7499", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex d8003b5..e4a7653 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -892,9 +892,9 @@\n \n         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n \n-            List<Object> filteredMessage = new ArrayList<Object>();\n+            LinkedList<Object> filteredMessage = new LinkedList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n-                filteredMessage.add(perRequestFilter(r, new Entry(o, r, f, o), false));\n+                filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n \n             e.setMessage(filteredMessage);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 897, "bugNodeStartChar": 34649, "bugNodeLength": 70, "fixLineNum": 897, "fixNodeStartChar": 34649, "fixNodeLength": 74, "sourceBeforeFix": "filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))", "sourceAfterFix": "filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "ccdf17d83f4457b5dfb4011aea62956ab517d8bf", "fixCommitParentSHA1": "817dbaeb90b05278f983d1c56454491df1c16d68", "bugFilePath": "integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java", "fixPatch": "diff --git a/integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java b/integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java\nindex 40d9a95..d6fe5b7 100644\n--- a/integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java\n+++ b/integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java\n@@ -1277,7 +1277,7 @@\n             }\n \n             public void onStateChange(AtmosphereResourceEvent event) throws IOException {\n-                if (event.isResuming()) {\n+                if (event.isResuming() || event.isCancelled()) {\n                     return;\n                 }\n                 PrintWriter writer = event.getResource().getResponse().getWriter();\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1280, "bugNodeStartChar": 47974, "bugNodeLength": 18, "fixLineNum": 1280, "fixNodeStartChar": 47974, "fixNodeLength": 41, "sourceBeforeFix": "event.isResuming()", "sourceAfterFix": "event.isResuming() || event.isCancelled()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f61d37c0735911586cd6d9ec1586b3598c32aeda", "fixCommitParentSHA1": "f6ae04cfb6899da108cd869de304df318be9493b", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\nindex ac889f5..5db0309 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n@@ -525,10 +525,10 @@\n      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.\n      */\n     protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n-        BroadcastAction transformed = new BroadcastAction(originalMessage);\n+        BroadcastAction transformed = new BroadcastAction(message);\n         for (PerRequestBroadcastFilter mf : perRequestFilters) {\n             synchronized (mf) {\n-                transformed = mf.filter(r, message, transformed.message());\n+                transformed = mf.filter(r, originalMessage, transformed.message());\n                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {\n                     return transformed;\n                 }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 528, "bugNodeStartChar": 20563, "bugNodeLength": 36, "fixLineNum": 528, "fixNodeStartChar": 20563, "fixNodeLength": 28, "sourceBeforeFix": "new BroadcastAction(originalMessage)", "sourceAfterFix": "new BroadcastAction(message)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f61d37c0735911586cd6d9ec1586b3598c32aeda", "fixCommitParentSHA1": "f6ae04cfb6899da108cd869de304df318be9493b", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\nindex ac889f5..5db0309 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n@@ -525,10 +525,10 @@\n      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.\n      */\n     protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n-        BroadcastAction transformed = new BroadcastAction(originalMessage);\n+        BroadcastAction transformed = new BroadcastAction(message);\n         for (PerRequestBroadcastFilter mf : perRequestFilters) {\n             synchronized (mf) {\n-                transformed = mf.filter(r, message, transformed.message());\n+                transformed = mf.filter(r, originalMessage, transformed.message());\n                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {\n                     return transformed;\n                 }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 531, "bugNodeStartChar": 20728, "bugNodeLength": 44, "fixLineNum": 531, "fixNodeStartChar": 20728, "fixNodeLength": 52, "sourceBeforeFix": "mf.filter(r,message,transformed.message())", "sourceAfterFix": "mf.filter(r,originalMessage,transformed.message())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "343d969d3fbc831f0cbfe0e4b39fef02cd424c96", "fixCommitParentSHA1": "bcdda57692078e235166399185cd5fc3900dd7af", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex 910defa..d21f9d0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -1318,7 +1318,7 @@\n                  key = e.nextElement();\n                  name = key.toLowerCase().trim();\n                  if (!name.startsWith(\"x-atmosphere\") && !name.equalsIgnoreCase(\"x-cache-date\") ) {\n-                     queryStrings.append(name).append(\"=\").append(req.getParameter(key));\n+                     queryStrings.append(key).append(\"=\").append(req.getParameter(key));\n                  }\n              }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1321, "bugNodeStartChar": 54383, "bugNodeLength": 25, "fixLineNum": 1321, "fixNodeStartChar": 54383, "fixNodeLength": 24, "sourceBeforeFix": "queryStrings.append(name)", "sourceAfterFix": "queryStrings.append(key)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "8a586e948e5de2ebd7bc09203c904e579f052c06", "fixCommitParentSHA1": "26934f6c6e8dab17e73d90c129c555454b730bc8", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\nindex cb71799..fb06219 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java\n@@ -827,7 +827,7 @@\n      * Close the associated {@link PrintWriter} or {@link java.io.OutputStream}\n      */\n     public void closeStreamOrWriter() {\n-        if (resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {\n+        if (resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {\n             try {\n                 boolean isUsingStream = (Boolean) request().getAttribute(PROPERTY_USE_STREAM);\n                 if (isUsingStream) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 830, "bugNodeStartChar": 23875, "bugNodeLength": 64, "fixLineNum": 830, "fixNodeStartChar": 23875, "fixNodeLength": 86, "sourceBeforeFix": "resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET", "sourceAfterFix": "resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "d594ce352220674c8834eebb48adbe1a29921f1e", "fixCommitParentSHA1": "244548c9b56410b4f53cc9166bc2208d2b1b9181", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\nindex 6fa4002..9d21db5 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n@@ -223,7 +223,7 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {\n+    public synchronized Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {\n         Broadcaster b = store.get(id);\n         if (b != null && !c.isAssignableFrom(b.getClass())) {\n             String msg = \"Invalid lookup class \" + c.getName() + \". Cached class is: \" + b.getClass().getName();\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 222, "bugNodeStartChar": 8739, "bugNodeLength": 1054, "fixLineNum": 222, "fixNodeStartChar": 8739, "fixNodeLength": 1067, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0a7300b42629c2eb700d2c4b5e39caa76f4d5305", "fixCommitParentSHA1": "5494af37be57a54ca5c1858ddfde6dd7d085e6e5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex b504800..e8b67ac 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -188,11 +188,11 @@\n \n             releaseExternalResources();\n             if (notifierFuture != null) {\n-                notifierFuture.cancel(true);\n+                notifierFuture.cancel(false);\n             }\n \n             if (asyncWriteFuture != null) {\n-                asyncWriteFuture.cancel(true);\n+                asyncWriteFuture.cancel(false);\n             }\n \n             if (bc != null) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 191, "bugNodeStartChar": 8686, "bugNodeLength": 27, "fixLineNum": 191, "fixNodeStartChar": 8686, "fixNodeLength": 28, "sourceBeforeFix": "notifierFuture.cancel(true)", "sourceAfterFix": "notifierFuture.cancel(false)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0a7300b42629c2eb700d2c4b5e39caa76f4d5305", "fixCommitParentSHA1": "5494af37be57a54ca5c1858ddfde6dd7d085e6e5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex b504800..e8b67ac 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -188,11 +188,11 @@\n \n             releaseExternalResources();\n             if (notifierFuture != null) {\n-                notifierFuture.cancel(true);\n+                notifierFuture.cancel(false);\n             }\n \n             if (asyncWriteFuture != null) {\n-                asyncWriteFuture.cancel(true);\n+                asyncWriteFuture.cancel(false);\n             }\n \n             if (bc != null) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 195, "bugNodeStartChar": 8790, "bugNodeLength": 29, "fixLineNum": 195, "fixNodeStartChar": 8790, "fixNodeLength": 30, "sourceBeforeFix": "asyncWriteFuture.cancel(true)", "sourceAfterFix": "asyncWriteFuture.cancel(false)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88e52c09c7f51122b38779f543abe6daa71e30eb", "fixCommitParentSHA1": "98e08c5e7b8468008452e68bef0e82337b4bbf3b", "bugFilePath": "integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java", "fixPatch": "diff --git a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java\nindex 6065e87..70a6243 100644\n--- a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java\n+++ b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java\n@@ -180,14 +180,14 @@\n \n     @POST\n     @Path(\"filter\")\n-    @Broadcast(resumeOnBroadcast = true, value = {XSSHtmlFilter.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {XSSHtmlFilter.class})\n     public Broadcastable filter(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n \n     @POST\n     @Path(\"aggregate\")\n-    @Broadcast(resumeOnBroadcast = true, value = {StringFilterAggregator.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {StringFilterAggregator.class})\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 183, "bugNodeStartChar": 5772, "bugNodeLength": 29, "fixLineNum": 183, "fixNodeStartChar": 5772, "fixNodeLength": 31, "sourceBeforeFix": "value={XSSHtmlFilter.class}", "sourceAfterFix": "filters={XSSHtmlFilter.class}"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88e52c09c7f51122b38779f543abe6daa71e30eb", "fixCommitParentSHA1": "98e08c5e7b8468008452e68bef0e82337b4bbf3b", "bugFilePath": "integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java", "fixPatch": "diff --git a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java\nindex 6065e87..70a6243 100644\n--- a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java\n+++ b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java\n@@ -180,14 +180,14 @@\n \n     @POST\n     @Path(\"filter\")\n-    @Broadcast(resumeOnBroadcast = true, value = {XSSHtmlFilter.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {XSSHtmlFilter.class})\n     public Broadcastable filter(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n \n     @POST\n     @Path(\"aggregate\")\n-    @Broadcast(resumeOnBroadcast = true, value = {StringFilterAggregator.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {StringFilterAggregator.class})\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 190, "bugNodeStartChar": 5991, "bugNodeLength": 38, "fixLineNum": 190, "fixNodeStartChar": 5991, "fixNodeLength": 40, "sourceBeforeFix": "value={StringFilterAggregator.class}", "sourceAfterFix": "filters={StringFilterAggregator.class}"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88e52c09c7f51122b38779f543abe6daa71e30eb", "fixCommitParentSHA1": "98e08c5e7b8468008452e68bef0e82337b4bbf3b", "bugFilePath": "integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java", "fixPatch": "diff --git a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java\nindex ec08640..007cbb2 100644\n--- a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java\n+++ b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java\n@@ -166,14 +166,14 @@\n \n     @POST\n     @Path(\"filter\")\n-    @Broadcast(resumeOnBroadcast = true, value = {XSSHtmlFilter.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {XSSHtmlFilter.class})\n     public Broadcastable filter(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n \n     @POST\n     @Path(\"aggregate\")\n-    @Broadcast(resumeOnBroadcast = true, value = {StringFilterAggregator.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {StringFilterAggregator.class})\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 169, "bugNodeStartChar": 5427, "bugNodeLength": 29, "fixLineNum": 169, "fixNodeStartChar": 5427, "fixNodeLength": 31, "sourceBeforeFix": "value={XSSHtmlFilter.class}", "sourceAfterFix": "filters={XSSHtmlFilter.class}"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88e52c09c7f51122b38779f543abe6daa71e30eb", "fixCommitParentSHA1": "98e08c5e7b8468008452e68bef0e82337b4bbf3b", "bugFilePath": "integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java", "fixPatch": "diff --git a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java\nindex ec08640..007cbb2 100644\n--- a/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java\n+++ b/integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java\n@@ -166,14 +166,14 @@\n \n     @POST\n     @Path(\"filter\")\n-    @Broadcast(resumeOnBroadcast = true, value = {XSSHtmlFilter.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {XSSHtmlFilter.class})\n     public Broadcastable filter(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n \n     @POST\n     @Path(\"aggregate\")\n-    @Broadcast(resumeOnBroadcast = true, value = {StringFilterAggregator.class})\n+    @Broadcast(resumeOnBroadcast = true, filters = {StringFilterAggregator.class})\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 176, "bugNodeStartChar": 5646, "bugNodeLength": 38, "fixLineNum": 176, "fixNodeStartChar": 5646, "fixNodeLength": 40, "sourceBeforeFix": "value={StringFilterAggregator.class}", "sourceAfterFix": "filters={StringFilterAggregator.class}"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88e52c09c7f51122b38779f543abe6daa71e30eb", "fixCommitParentSHA1": "98e08c5e7b8468008452e68bef0e82337b4bbf3b", "bugFilePath": "samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java", "fixPatch": "diff --git a/samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java b/samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java\nindex a511506..a11d476 100755\n--- a/samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java\n+++ b/samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java\n@@ -186,7 +186,7 @@\n      * @return A {@link Broadcastable} used to broadcast events.\n      */\n     @POST\n-    @Broadcast(value = {StringFilterAggregator.class})\n+    @Broadcast(filters = {StringFilterAggregator.class})\n     @Path(\"aggregate\")\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 189, "bugNodeStartChar": 6934, "bugNodeLength": 38, "fixLineNum": 189, "fixNodeStartChar": 6934, "fixNodeLength": 40, "sourceBeforeFix": "value={StringFilterAggregator.class}", "sourceAfterFix": "filters={StringFilterAggregator.class}"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 95, "bugNodeStartChar": 3556, "bugNodeLength": 26, "fixLineNum": 95, "fixNodeStartChar": 3556, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 111, "bugNodeStartChar": 4311, "bugNodeLength": 26, "fixLineNum": 111, "fixNodeStartChar": 4311, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 129, "bugNodeStartChar": 5140, "bugNodeLength": 26, "fixLineNum": 129, "fixNodeStartChar": 5140, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 135, "bugNodeStartChar": 5373, "bugNodeLength": 26, "fixLineNum": 135, "fixNodeStartChar": 5373, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 158, "bugNodeStartChar": 6390, "bugNodeLength": 26, "fixLineNum": 158, "fixNodeStartChar": 6390, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 165, "bugNodeStartChar": 6743, "bugNodeLength": 27, "fixLineNum": 165, "fixNodeStartChar": 6743, "fixNodeLength": 104, "sourceBeforeFix": "processor.open(w2,request)", "sourceAfterFix": "processor.open(w2,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\nindex 5c16b7e..12241d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n@@ -107,7 +107,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();\n \n@@ -146,7 +146,7 @@\n         c.add(new Cookie(\"yo\", \"man\"));\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n \n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());\n@@ -186,7 +186,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));\n \n@@ -224,7 +224,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Close\", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 110, "bugNodeStartChar": 4044, "bugNodeLength": 26, "fixLineNum": 110, "fixNodeStartChar": 4044, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\nindex 5c16b7e..12241d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n@@ -107,7 +107,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();\n \n@@ -146,7 +146,7 @@\n         c.add(new Cookie(\"yo\", \"man\"));\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n \n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());\n@@ -186,7 +186,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));\n \n@@ -224,7 +224,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Close\", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 149, "bugNodeStartChar": 5685, "bugNodeLength": 26, "fixLineNum": 149, "fixNodeStartChar": 5685, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\nindex 5c16b7e..12241d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n@@ -107,7 +107,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();\n \n@@ -146,7 +146,7 @@\n         c.add(new Cookie(\"yo\", \"man\"));\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n \n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());\n@@ -186,7 +186,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));\n \n@@ -224,7 +224,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Close\", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 189, "bugNodeStartChar": 7349, "bugNodeLength": 26, "fixLineNum": 189, "fixNodeStartChar": 7349, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\nindex 5c16b7e..12241d2 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java\n@@ -107,7 +107,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();\n \n@@ -146,7 +146,7 @@\n         c.add(new Cookie(\"yo\", \"man\"));\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n \n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());\n@@ -186,7 +186,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));\n \n@@ -224,7 +224,7 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Close\", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 227, "bugNodeStartChar": 9046, "bugNodeLength": 26, "fixLineNum": 227, "fixNodeStartChar": 9046, "fixNodeLength": 103, "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "fixCommitParentSHA1": "310c9fa03d4cc95941fff7812e5c0c05bd7b76bc", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex c50c442..2fb979d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -44,10 +44,10 @@\n             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n-                logger.debug(\"Trying to map {} to {}\", t, path);\n+                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n-                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n+                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 47, "bugNodeStartChar": 1658, "bugNodeLength": 47, "fixLineNum": 47, "fixNodeStartChar": 1658, "fixNodeLength": 47, "sourceBeforeFix": "logger.debug(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.trace(\"Trying to map {} to {}\",t,path)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "fixCommitParentSHA1": "310c9fa03d4cc95941fff7812e5c0c05bd7b76bc", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex c50c442..2fb979d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -44,10 +44,10 @@\n             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n-                logger.debug(\"Trying to map {} to {}\", t, path);\n+                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n-                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n+                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 47, "bugNodeStartChar": 1658, "bugNodeLength": 47, "fixLineNum": 47, "fixNodeStartChar": 1658, "fixNodeLength": 47, "sourceBeforeFix": "logger.debug(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.trace(\"Trying to map {} to {}\",t,path)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "fixCommitParentSHA1": "310c9fa03d4cc95941fff7812e5c0c05bd7b76bc", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex c50c442..2fb979d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -44,10 +44,10 @@\n             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n-                logger.debug(\"Trying to map {} to {}\", t, path);\n+                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n-                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n+                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 50, "bugNodeStartChar": 1811, "bugNodeLength": 48, "fixLineNum": 50, "fixNodeStartChar": 1811, "fixNodeLength": 48, "sourceBeforeFix": "logger.debug(\"Mapped {} to {}\",t,e.getValue())", "sourceAfterFix": "logger.trace(\"Mapped {} to {}\",t,e.getValue())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "fixCommitParentSHA1": "310c9fa03d4cc95941fff7812e5c0c05bd7b76bc", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex c50c442..2fb979d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -44,10 +44,10 @@\n             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n-                logger.debug(\"Trying to map {} to {}\", t, path);\n+                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n-                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n+                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 50, "bugNodeStartChar": 1811, "bugNodeLength": 48, "fixLineNum": 50, "fixNodeStartChar": 1811, "fixNodeLength": 48, "sourceBeforeFix": "logger.debug(\"Mapped {} to {}\",t,e.getValue())", "sourceAfterFix": "logger.trace(\"Mapped {} to {}\",t,e.getValue())"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "013de00c9f21f6a2bde45dc20428be65c4db332f", "fixCommitParentSHA1": "bd1360cf48307ef1a7329978df71ab09ee637798", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex f37bbf5..a210f30 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -625,7 +625,7 @@\n \n         try {\n             // Check auto supported one\n-            if (broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())) {\n+            if (!broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())) {\n                 broadcasterClassName = lookupDefaultBroadcasterType(broadcasterClassName);\n             }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 628, "bugNodeStartChar": 26357, "bugNodeLength": 73, "fixLineNum": 628, "fixNodeStartChar": 26357, "fixNodeLength": 74, "sourceBeforeFix": "broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())", "sourceAfterFix": "!broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "02f92e681b223c753cca7d9d81fe2308c632a3fb", "fixCommitParentSHA1": "fe34140b16ddb59602c952aa865cd206406ca189", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\nindex 4231d29..062111f 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n@@ -238,7 +238,7 @@\n             }\n \n             Broadcaster existingOne = store.putIfAbsent(id, createBroadcaster(c, id));\n-            if (existingOne == null) {\n+            if (existingOne != null) {\n                 logger.debug(\"Added Broadcaster {} . Factory size: {}\", id, store.size());\n             } else {\n                 logger.warn(\"Duplicate Broadcaster's name {}. You must invoke Broadcaster.destroy() on that instance to prevent memory leak.\", existingOne);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 241, "bugNodeStartChar": 9520, "bugNodeLength": 19, "fixLineNum": 241, "fixNodeStartChar": 9520, "fixNodeLength": 19, "sourceBeforeFix": "existingOne == null", "sourceAfterFix": "existingOne != null"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "fixCommitParentSHA1": "132e6e375ef8aa4fdc9afb232b8d103d1b5566ea", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java\nindex 34f9989..b8ea5cc 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java\n@@ -57,7 +57,7 @@\n             public void run() {\n                 readWriteLock.writeLock().lock();\n                 try {\n-                    long now = System.currentTimeMillis();\n+                    long now = System.nanoTime();\n                     List<CacheMessage> expiredMessages = new ArrayList<CacheMessage>();\n \n                     for (CacheMessage message : messages) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 60, "bugNodeStartChar": 2324, "bugNodeLength": 26, "fixLineNum": 60, "fixNodeStartChar": 2324, "fixNodeLength": 17, "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "fixCommitParentSHA1": "132e6e375ef8aa4fdc9afb232b8d103d1b5566ea", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java\nindex 34f9989..b8ea5cc 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java\n@@ -57,7 +57,7 @@\n             public void run() {\n                 readWriteLock.writeLock().lock();\n                 try {\n-                    long now = System.currentTimeMillis();\n+                    long now = System.nanoTime();\n                     List<CacheMessage> expiredMessages = new ArrayList<CacheMessage>();\n \n                     for (CacheMessage message : messages) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 60, "bugNodeStartChar": 2324, "bugNodeLength": 26, "fixLineNum": 60, "fixNodeStartChar": 2324, "fixNodeLength": 17, "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "fixCommitParentSHA1": "132e6e375ef8aa4fdc9afb232b8d103d1b5566ea", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\nindex 2902587..0f0f656 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n@@ -39,7 +39,7 @@\n     @Override\n     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {\n \n-        long now = System.currentTimeMillis();\n+        long now = System.nanoTime();\n         put(e, now);\n \n         if (r != null) {\n@@ -55,7 +55,7 @@\n \n         AtmosphereRequest request = r.getRequest();\n         String cacheHeader = request.getHeader(X_CACHE_DATE);\n-        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));\n+        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));\n         if (cacheHeader == null || cacheHeader.isEmpty()) {\n             return Collections.emptyList();\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 42, "bugNodeStartChar": 1385, "bugNodeLength": 26, "fixLineNum": 42, "fixNodeStartChar": 1385, "fixNodeLength": 17, "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "fixCommitParentSHA1": "132e6e375ef8aa4fdc9afb232b8d103d1b5566ea", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\nindex 2902587..0f0f656 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n@@ -39,7 +39,7 @@\n     @Override\n     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {\n \n-        long now = System.currentTimeMillis();\n+        long now = System.nanoTime();\n         put(e, now);\n \n         if (r != null) {\n@@ -55,7 +55,7 @@\n \n         AtmosphereRequest request = r.getRequest();\n         String cacheHeader = request.getHeader(X_CACHE_DATE);\n-        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));\n+        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));\n         if (cacheHeader == null || cacheHeader.isEmpty()) {\n             return Collections.emptyList();\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 42, "bugNodeStartChar": 1385, "bugNodeLength": 26, "fixLineNum": 42, "fixNodeStartChar": 1385, "fixNodeLength": 17, "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "fixCommitParentSHA1": "132e6e375ef8aa4fdc9afb232b8d103d1b5566ea", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\nindex 2902587..0f0f656 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n@@ -39,7 +39,7 @@\n     @Override\n     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {\n \n-        long now = System.currentTimeMillis();\n+        long now = System.nanoTime();\n         put(e, now);\n \n         if (r != null) {\n@@ -55,7 +55,7 @@\n \n         AtmosphereRequest request = r.getRequest();\n         String cacheHeader = request.getHeader(X_CACHE_DATE);\n-        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));\n+        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));\n         if (cacheHeader == null || cacheHeader.isEmpty()) {\n             return Collections.emptyList();\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 58, "bugNodeStartChar": 1939, "bugNodeLength": 26, "fixLineNum": 58, "fixNodeStartChar": 1939, "fixNodeLength": 17, "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "fixCommitParentSHA1": "132e6e375ef8aa4fdc9afb232b8d103d1b5566ea", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\nindex 2902587..0f0f656 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java\n@@ -39,7 +39,7 @@\n     @Override\n     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {\n \n-        long now = System.currentTimeMillis();\n+        long now = System.nanoTime();\n         put(e, now);\n \n         if (r != null) {\n@@ -55,7 +55,7 @@\n \n         AtmosphereRequest request = r.getRequest();\n         String cacheHeader = request.getHeader(X_CACHE_DATE);\n-        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));\n+        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));\n         if (cacheHeader == null || cacheHeader.isEmpty()) {\n             return Collections.emptyList();\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 58, "bugNodeStartChar": 1939, "bugNodeLength": 26, "fixLineNum": 58, "fixNodeStartChar": 1939, "fixNodeLength": 17, "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b715b5c1376b13452ef810bd5e8dedc9982e19ac", "fixCommitParentSHA1": "6f9263f62b3435d829c95becfb6a06ec85df80c3", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java\nindex d37ba55..bfe703f 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java\n@@ -57,7 +57,7 @@\n public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {\n \n     private String method = \"GET\";\n-    private static final Logger logger = LoggerFactory.getLogger(SSEAtmosphereInterceptor.class);\n+    private static final Logger logger = LoggerFactory.getLogger(AtmosphereResourceLifecycleInterceptor.class);\n \n     @Override\n     public void configure(AtmosphereConfig config) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 60, "bugNodeStartChar": 2956, "bugNodeLength": 30, "fixLineNum": 60, "fixNodeStartChar": 2956, "fixNodeLength": 44, "sourceBeforeFix": "SSEAtmosphereInterceptor.class", "sourceAfterFix": "AtmosphereResourceLifecycleInterceptor.class"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "1b65b9c021feaab009ed5bf597d9e791c4c16727", "fixCommitParentSHA1": "705c9e9c32976ba7fe8ead91d6ab43331e8560e6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java b/modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java\nindex d9b826b..0c6a439 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java\n@@ -101,7 +101,7 @@\n         }\n \n         // The annotation was used.\n-        if (servletClass != null && filterClass != null) {\n+        if (servletClass != null || filterClass != null) {\n             ReflectorServletProcessor r = new ReflectorServletProcessor();\n             r.setServletClassName(servletClass);\n             r.setFilterClassName(filterClass);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 104, "bugNodeStartChar": 4547, "bugNodeLength": 43, "fixLineNum": 104, "fixNodeStartChar": 4547, "fixNodeLength": 43, "sourceBeforeFix": "servletClass != null && filterClass != null", "sourceAfterFix": "servletClass != null || filterClass != null"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6e70cda72792dc8d65870b2d50a66cef6408e8fd", "fixCommitParentSHA1": "ba769488f69f9132d900a4683e95cdb3164614ae", "bugFilePath": "extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java", "fixPatch": "diff --git a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\nindex b810fe7..dd8351a 100755\n--- a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n+++ b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n@@ -104,7 +104,7 @@\n                                 AtmosphereResourceImpl resource = session.getAtmosphereResourceImpl();\n                                 // if BroadcastCache is available, add the message to the cache\n                                 if (resource != null && DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n-                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource, msg);\n+                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(), resource, msg);\n                                 }\n                             }\n                             break;\n@@ -198,7 +198,7 @@\n                                 if (DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n \n                                     List<Object> cachedMessages = DefaultBroadcaster.class.cast(resource.getBroadcaster())\n-                                            .broadcasterCache.retrieveFromCache(resource);\n+                                            .broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(), resource);\n \n                                     if (cachedMessages != null) {\n                                         if (cachedMessages.size() > 1) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 107, "bugNodeStartChar": 4207, "bugNodeLength": 99, "fixLineNum": 107, "fixNodeStartChar": 4207, "fixNodeLength": 134, "sourceBeforeFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)", "sourceAfterFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6e70cda72792dc8d65870b2d50a66cef6408e8fd", "fixCommitParentSHA1": "ba769488f69f9132d900a4683e95cdb3164614ae", "bugFilePath": "extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java", "fixPatch": "diff --git a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\nindex b810fe7..dd8351a 100755\n--- a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n+++ b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n@@ -104,7 +104,7 @@\n                                 AtmosphereResourceImpl resource = session.getAtmosphereResourceImpl();\n                                 // if BroadcastCache is available, add the message to the cache\n                                 if (resource != null && DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n-                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource, msg);\n+                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(), resource, msg);\n                                 }\n                             }\n                             break;\n@@ -198,7 +198,7 @@\n                                 if (DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n \n                                     List<Object> cachedMessages = DefaultBroadcaster.class.cast(resource.getBroadcaster())\n-                                            .broadcasterCache.retrieveFromCache(resource);\n+                                            .broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(), resource);\n \n                                     if (cachedMessages != null) {\n                                         if (cachedMessages.size() > 1) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 200, "bugNodeStartChar": 9056, "bugNodeLength": 146, "fixLineNum": 200, "fixNodeStartChar": 9056, "fixNodeLength": 181, "sourceBeforeFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource)", "sourceAfterFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "289fec327e830d8a5252f831ae07d57e1bdeead3", "fixCommitParentSHA1": "6bdd329602efa763ef9ad4ff4aab49ca24b8c8a9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java\nindex 7b49748..0f36cb2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java\n@@ -75,7 +75,7 @@\n                 logger.trace(\"\", e);\n             }\n \n-            w.println(padding);\n+            w.println(paddingText);\n             w.flush();\n         }\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 78, "bugNodeStartChar": 2521, "bugNodeLength": 18, "fixLineNum": 78, "fixNodeStartChar": 2521, "fixNodeLength": 22, "sourceBeforeFix": "w.println(padding)", "sourceAfterFix": "w.println(paddingText)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae434b1f61ef3cf1fffeaa482b5ed2fd9462e2cd", "fixCommitParentSHA1": "2733d503c1d68068237588b4a1b876fd7af34c55", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java\nindex 7fcaf08..1833276 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java\n@@ -386,7 +386,7 @@\n      */\n     public void destroy() {\n         isDestroyed.set(true);\n-        cache.remove(this);\n+        cache.remove(r);\n     }\n \n     private boolean destroyed(){\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 389, "bugNodeStartChar": 13616, "bugNodeLength": 4, "fixLineNum": 389, "fixNodeStartChar": 13616, "fixNodeLength": 1, "sourceBeforeFix": "cache.remove(this)", "sourceAfterFix": "cache.remove(r)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "791a96c298315519065469d1d25fd7c2740aebb6", "fixCommitParentSHA1": "67d04a22dc4d780fade1d4c7a59adcbc7bb499e9", "bugFilePath": "extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java", "fixPatch": "diff --git a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\nindex b810fe7..dd8351a 100755\n--- a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n+++ b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n@@ -104,7 +104,7 @@\n                                 AtmosphereResourceImpl resource = session.getAtmosphereResourceImpl();\n                                 // if BroadcastCache is available, add the message to the cache\n                                 if (resource != null && DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n-                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource, msg);\n+                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(), resource, msg);\n                                 }\n                             }\n                             break;\n@@ -198,7 +198,7 @@\n                                 if (DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n \n                                     List<Object> cachedMessages = DefaultBroadcaster.class.cast(resource.getBroadcaster())\n-                                            .broadcasterCache.retrieveFromCache(resource);\n+                                            .broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(), resource);\n \n                                     if (cachedMessages != null) {\n                                         if (cachedMessages.size() > 1) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 107, "bugNodeStartChar": 4207, "bugNodeLength": 99, "fixLineNum": 107, "fixNodeStartChar": 4207, "fixNodeLength": 134, "sourceBeforeFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)", "sourceAfterFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "791a96c298315519065469d1d25fd7c2740aebb6", "fixCommitParentSHA1": "67d04a22dc4d780fade1d4c7a59adcbc7bb499e9", "bugFilePath": "extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java", "fixPatch": "diff --git a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\nindex b810fe7..dd8351a 100755\n--- a/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n+++ b/extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java\n@@ -104,7 +104,7 @@\n                                 AtmosphereResourceImpl resource = session.getAtmosphereResourceImpl();\n                                 // if BroadcastCache is available, add the message to the cache\n                                 if (resource != null && DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n-                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource, msg);\n+                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(), resource, msg);\n                                 }\n                             }\n                             break;\n@@ -198,7 +198,7 @@\n                                 if (DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {\n \n                                     List<Object> cachedMessages = DefaultBroadcaster.class.cast(resource.getBroadcaster())\n-                                            .broadcasterCache.retrieveFromCache(resource);\n+                                            .broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(), resource);\n \n                                     if (cachedMessages != null) {\n                                         if (cachedMessages.size() > 1) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 200, "bugNodeStartChar": 9056, "bugNodeLength": 146, "fixLineNum": 200, "fixNodeStartChar": 9056, "fixNodeLength": 181, "sourceBeforeFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource)", "sourceAfterFix": "DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "424f447dc3a71d21a7ea937ac12da6a2252a23a4", "fixCommitParentSHA1": "424c40ebf231f815d65e9b1dc1b0fa35ca50752c", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java\nindex 6d34275..c404418 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java\n@@ -88,7 +88,7 @@\n                 logger.trace(\"\", e);\n             }\n \n-            w.println(padding);\n+            w.println(paddingText);\n             w.flush();\n         }\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 91, "bugNodeStartChar": 3157, "bugNodeLength": 18, "fixLineNum": 91, "fixNodeStartChar": 3157, "fixNodeLength": 22, "sourceBeforeFix": "w.println(padding)", "sourceAfterFix": "w.println(paddingText)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8aab1afc88021a77f7f180e6cf8fd09989dcb9f6", "fixCommitParentSHA1": "869fa55fb1acc93a5523e51021ad43895d15ed9f", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java\nindex 7fcaf08..1833276 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java\n@@ -386,7 +386,7 @@\n      */\n     public void destroy() {\n         isDestroyed.set(true);\n-        cache.remove(this);\n+        cache.remove(r);\n     }\n \n     private boolean destroyed(){\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 389, "bugNodeStartChar": 13616, "bugNodeLength": 4, "fixLineNum": 389, "fixNodeStartChar": 13616, "fixNodeLength": 1, "sourceBeforeFix": "cache.remove(this)", "sourceAfterFix": "cache.remove(r)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "be9816e087e65c306879308f425ce4b024640e4c", "fixCommitParentSHA1": "bcfc87cd8c6076ecc5606ee7c249d93455492760", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\nindex 47cf31a..8150d3b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n@@ -29,7 +29,7 @@\n  */\n public class AtmosphereInterceptorWriter extends AsyncIOWriterAdapter {\n \n-    private static final Logger logger = LoggerFactory.getLogger(AsyncIOWriterAdapter.class);\n+    private static final Logger logger = LoggerFactory.getLogger(AtmosphereInterceptorWriter.class);\n     private final AtmosphereResponse response;\n \n     private final ArrayList<AsyncIOInterceptor> filters = new ArrayList<AsyncIOInterceptor>();\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 32, "bugNodeStartChar": 1132, "bugNodeLength": 26, "fixLineNum": 32, "fixNodeStartChar": 1132, "fixNodeLength": 33, "sourceBeforeFix": "AsyncIOWriterAdapter.class", "sourceAfterFix": "AtmosphereInterceptorWriter.class"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "dba9594514deefe356db062b4e32918f465a19ff", "fixCommitParentSHA1": "07ee029f6a4347a4514daab06e8c3ff1cdba1be6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java\nindex 946eab5..e21ed61 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java\n@@ -22,7 +22,7 @@\n \n     public WebSocketProcessor newWebSocketProcessor(WebSocket webSocket) {\n         WebSocketProcessor wp = null;\n-        if (webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())) {\n+        if (!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())) {\n             try {\n                 wp = (WebSocketProcessor) Thread.currentThread().getContextClassLoader()\n                         .loadClass(webSocketProcessorName).newInstance();\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 25, "bugNodeStartChar": 808, "bugNodeLength": 75, "fixLineNum": 25, "fixNodeStartChar": 808, "fixNodeLength": 76, "sourceBeforeFix": "webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())", "sourceAfterFix": "!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "96a66b27711d68c934bb2a6cd094f2be3039600b", "fixCommitParentSHA1": "ef58199fd626d3b7ffd1ffe9a6bf297b1a0556d6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\nindex f4d2dbb..00cf6ea 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java\n@@ -175,7 +175,7 @@\n             this.atmosphereHandler = atmosphereHandler;\n             try {\n                 if (BroadcasterFactory.getDefault() != null) {\n-                    this.broadcaster = BroadcasterFactory.getDefault().get(mapping);\n+                    this.broadcaster = BroadcasterFactory.getDefault().lookup(mapping, true);\n                 } else {\n                     this.mapping = mapping;\n                 }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 178, "bugNodeStartChar": 8810, "bugNodeLength": 44, "fixLineNum": 178, "fixNodeStartChar": 8810, "fixNodeLength": 53, "sourceBeforeFix": "BroadcasterFactory.getDefault().get(mapping)", "sourceAfterFix": "BroadcasterFactory.getDefault().lookup(mapping,true)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "a091e3c4af00b17456e583298e4bcba6ac9b13e9", "fixCommitParentSHA1": "03bce485409d1f8e9ae8aca881a3da0ead07def9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java\nindex 20cda57..a2c4087 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java\n@@ -61,7 +61,7 @@\n     public WebSocket resource(AtmosphereResource r) {\n \n         // Make sure we carry what was set at the onOpen stage.\n-        if (this.r != null) {\n+        if (this.r != null && r != null) {\n             // TODO: This is all over the place and quite ugly (the cast). Need to fix this in 1.1\n             AtmosphereResourceImpl.class.cast(r).cloneState(this.r);\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 64, "bugNodeStartChar": 2356, "bugNodeLength": 14, "fixLineNum": 64, "fixNodeStartChar": 2356, "fixNodeLength": 27, "sourceBeforeFix": "this.r != null", "sourceAfterFix": "this.r != null && r != null"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "1731ae83aa04c2713196b23e92ec137537964033", "fixCommitParentSHA1": "bde9325dcceac800df5ffff9b23ff8fc11e5ac1e", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java\nindex df61bdb..52a9305 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java\n@@ -34,7 +34,7 @@\n \r\n     private final List<AtmosphereHandlerConfig> atmosphereHandlerConfig = new ArrayList<AtmosphereHandlerConfig>();\r\n \r\n-    private boolean supportSession = true;\r\n+    private boolean supportSession = false;\r\n     private String dispatcherName = DEFAULT_NAMED_DISPATCHER;\r\n     private final AtmosphereFramework framework;\r\n     private final Map<String, Object> properties = new HashMap<String, Object>();\r\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 37, "bugNodeStartChar": 1235, "bugNodeLength": 21, "fixLineNum": 37, "fixNodeStartChar": 1199, "fixNodeLength": 22, "sourceBeforeFix": "supportSession=true", "sourceAfterFix": "supportSession=false"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "fixCommitParentSHA1": "64525d894e66b14de6a4ccaca0299755d45a6ccf", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\nindex 4315f5e..97626a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n@@ -71,7 +71,7 @@\n \n                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n-                        response.write(data + END);\n+                        response.write(data + end);\n                         return this;\n                     }\n \n@@ -103,7 +103,7 @@\n \n                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n-                     return message + END;\n+                     return message + end;\n                  }\n \n                  @Override\n@@ -136,6 +136,6 @@\n \n     @Override\n     public String toString() {\n-        return END + \" End Message Interceptor\";\n+        return end + \" End Message Interceptor\";\n     }\n }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 74, "bugNodeStartChar": 2736, "bugNodeLength": 10, "fixLineNum": 74, "fixNodeStartChar": 2736, "fixNodeLength": 10, "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "fixCommitParentSHA1": "64525d894e66b14de6a4ccaca0299755d45a6ccf", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\nindex 4315f5e..97626a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n@@ -71,7 +71,7 @@\n \n                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n-                        response.write(data + END);\n+                        response.write(data + end);\n                         return this;\n                     }\n \n@@ -103,7 +103,7 @@\n \n                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n-                     return message + END;\n+                     return message + end;\n                  }\n \n                  @Override\n@@ -136,6 +136,6 @@\n \n     @Override\n     public String toString() {\n-        return END + \" End Message Interceptor\";\n+        return end + \" End Message Interceptor\";\n     }\n }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 74, "bugNodeStartChar": 2736, "bugNodeLength": 10, "fixLineNum": 74, "fixNodeStartChar": 2736, "fixNodeLength": 10, "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "fixCommitParentSHA1": "64525d894e66b14de6a4ccaca0299755d45a6ccf", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\nindex 4315f5e..97626a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n@@ -71,7 +71,7 @@\n \n                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n-                        response.write(data + END);\n+                        response.write(data + end);\n                         return this;\n                     }\n \n@@ -103,7 +103,7 @@\n \n                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n-                     return message + END;\n+                     return message + end;\n                  }\n \n                  @Override\n@@ -136,6 +136,6 @@\n \n     @Override\n     public String toString() {\n-        return END + \" End Message Interceptor\";\n+        return end + \" End Message Interceptor\";\n     }\n }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 106, "bugNodeStartChar": 3964, "bugNodeLength": 13, "fixLineNum": 106, "fixNodeStartChar": 3964, "fixNodeLength": 13, "sourceBeforeFix": "message + END", "sourceAfterFix": "message + end"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "fixCommitParentSHA1": "64525d894e66b14de6a4ccaca0299755d45a6ccf", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\nindex 4315f5e..97626a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n@@ -71,7 +71,7 @@\n \n                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n-                        response.write(data + END);\n+                        response.write(data + end);\n                         return this;\n                     }\n \n@@ -103,7 +103,7 @@\n \n                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n-                     return message + END;\n+                     return message + end;\n                  }\n \n                  @Override\n@@ -136,6 +136,6 @@\n \n     @Override\n     public String toString() {\n-        return END + \" End Message Interceptor\";\n+        return end + \" End Message Interceptor\";\n     }\n }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 106, "bugNodeStartChar": 3964, "bugNodeLength": 13, "fixLineNum": 106, "fixNodeStartChar": 3964, "fixNodeLength": 13, "sourceBeforeFix": "message + END", "sourceAfterFix": "message + end"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "fixCommitParentSHA1": "64525d894e66b14de6a4ccaca0299755d45a6ccf", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\nindex 4315f5e..97626a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n@@ -71,7 +71,7 @@\n \n                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n-                        response.write(data + END);\n+                        response.write(data + end);\n                         return this;\n                     }\n \n@@ -103,7 +103,7 @@\n \n                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n-                     return message + END;\n+                     return message + end;\n                  }\n \n                  @Override\n@@ -136,6 +136,6 @@\n \n     @Override\n     public String toString() {\n-        return END + \" End Message Interceptor\";\n+        return end + \" End Message Interceptor\";\n     }\n }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 139, "bugNodeStartChar": 4968, "bugNodeLength": 32, "fixLineNum": 139, "fixNodeStartChar": 4968, "fixNodeLength": 32, "sourceBeforeFix": "END + \" End Message Interceptor\"", "sourceAfterFix": "end + \" End Message Interceptor\""}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "fixCommitParentSHA1": "64525d894e66b14de6a4ccaca0299755d45a6ccf", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\nindex 4315f5e..97626a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java\n@@ -71,7 +71,7 @@\n \n                     @Override\n                     public AsyncIOWriter write(String data) throws IOException {\n-                        response.write(data + END);\n+                        response.write(data + end);\n                         return this;\n                     }\n \n@@ -103,7 +103,7 @@\n \n                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n-                     return message + END;\n+                     return message + end;\n                  }\n \n                  @Override\n@@ -136,6 +136,6 @@\n \n     @Override\n     public String toString() {\n-        return END + \" End Message Interceptor\";\n+        return end + \" End Message Interceptor\";\n     }\n }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 139, "bugNodeStartChar": 4968, "bugNodeLength": 32, "fixLineNum": 139, "fixNodeStartChar": 4968, "fixNodeLength": 32, "sourceBeforeFix": "END + \" End Message Interceptor\"", "sourceAfterFix": "end + \" End Message Interceptor\""}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "7f399ac4673dcba0509481d185e68b33fbaa2c92", "fixCommitParentSHA1": "6337bcf1c7de37751e937c7a80f90f5cd2ead8b5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\nindex b3babaf..624df74 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\n@@ -583,7 +583,7 @@\n      */\n     @Override\n     public HttpSession getSession() {\n-        return getSession(false);\n+        return getSession(true);\n     }\n \n     /**\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 586, "bugNodeStartChar": 15454, "bugNodeLength": 17, "fixLineNum": 586, "fixNodeStartChar": 15454, "fixNodeLength": 16, "sourceBeforeFix": "getSession(false)", "sourceAfterFix": "getSession(true)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "6aff6baea9a815da5528f09bf1dac322a002fdc5", "fixCommitParentSHA1": "d49cd70632f03d68a19e9329308af4d89813b836", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java\nindex ccf4183..0cb3d71 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java\n@@ -55,7 +55,7 @@\n                 InputStream inputStream = r.getRequest().getInputStream();\n                 if (inputStream != null) {\n                     bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n-                    char[] charBuffer = new char[128];\n+                    char[] charBuffer = new char[8192];\n                     int bytesRead = -1;\n                     while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {\n                         stringBuilder.append(charBuffer, 0, bytesRead);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 58, "bugNodeStartChar": 2171, "bugNodeLength": 13, "fixLineNum": 58, "fixNodeStartChar": 2171, "fixNodeLength": 14, "sourceBeforeFix": "new char[128]", "sourceAfterFix": "new char[8192]"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "2b5950d074b4b9e9c3d46ef08899d9629b2af104", "fixCommitParentSHA1": "9d762ed06973f839a53c16910b73b7170f13d4dc", "bugFilePath": "extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java", "fixPatch": "diff --git a/extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java b/extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java\nindex e14d6c3..765e3a4 100644\n--- a/extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java\n+++ b/extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java\n@@ -55,7 +55,7 @@\n     }\n \n     public void startServer() throws Exception {\n-        server = new Server(port);\n+        server = new Server();\n         root = new Context(server, \"/\", Context.SESSIONS);\n         root.addServlet(new ServletHolder(atmoServlet), ROOT);\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 58, "bugNodeStartChar": 1985, "bugNodeLength": 16, "fixLineNum": 58, "fixNodeStartChar": 1985, "fixNodeLength": 12, "sourceBeforeFix": "new Server(port)", "sourceAfterFix": "new Server()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "c50fb0490aaf8595274ac9cc33c0af6dc70f9d12", "fixCommitParentSHA1": "cde6fd13963e660507aa8d5776324db251db48dd", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\nindex 1df0d6b..38eb72d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\n@@ -137,7 +137,7 @@\n             throws IOException, ServletException {\n \n         if (!req.isAsyncStarted()) {\n-            AsyncContext asyncContext = req.startAsync();\n+            AsyncContext asyncContext = req.startAsync(req, res);\n             asyncContext.addListener(new CometListener(this));\n             // Do nothing except setting the times out\n             if (action.timeout() != -1) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 140, "bugNodeStartChar": 5469, "bugNodeLength": 16, "fixLineNum": 140, "fixNodeStartChar": 5469, "fixNodeLength": 24, "sourceBeforeFix": "req.startAsync()", "sourceAfterFix": "req.startAsync(req,res)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "475938ec477d1d0d357fb0f586a57650d9ee78c0", "fixCommitParentSHA1": "ba1ff6fb0144042e71efce9b8633b1379d329ce8", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\nindex 1df0d6b..38eb72d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\n@@ -137,7 +137,7 @@\n             throws IOException, ServletException {\n \n         if (!req.isAsyncStarted()) {\n-            AsyncContext asyncContext = req.startAsync();\n+            AsyncContext asyncContext = req.startAsync(req, res);\n             asyncContext.addListener(new CometListener(this));\n             // Do nothing except setting the times out\n             if (action.timeout() != -1) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 140, "bugNodeStartChar": 5469, "bugNodeLength": 16, "fixLineNum": 140, "fixNodeStartChar": 5469, "fixNodeLength": 24, "sourceBeforeFix": "req.startAsync()", "sourceAfterFix": "req.startAsync(req,res)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "71b5386e09c6f6e781220b1d781ce3aaf0bce816", "fixCommitParentSHA1": "ca7e81174fbd4899584d2032c9acf850136f1e32", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java b/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java\nindex 70714b9..b9c6672 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java\n@@ -176,7 +176,7 @@\n         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, r);\n         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, this);\n         try {\n-            if (wrapRequest) {\n+            if (!wrapRequest) {\n                 wrapper.service(r.getRequest(), r.getResponse());\n             } else {\n                 wrapper.service(new AtmosphereRequestWrapper(r.getRequest()), new AtmosphereResponseWrapper(r.getResponse()));\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 179, "bugNodeStartChar": 7756, "bugNodeLength": 11, "fixLineNum": 179, "fixNodeStartChar": 7756, "fixNodeLength": 12, "sourceBeforeFix": "wrapRequest", "sourceAfterFix": "!wrapRequest"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "544b0ed025cdea88bec8a5dd4ff5462242442eca", "fixCommitParentSHA1": "64d880881c08f70758a9bbe6b14a12c4004423e8", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java\nindex 5fedf8a..fe577c2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java\n@@ -96,7 +96,7 @@\n \n             if (!headerContainsToken(req, \"sec-websocket-version\", \"13\")) {\n                 logger.debug(\"WebSocket version not supported. Downgrading to Comet\");\n-                res.sendError(202, \"Websocket protocol not supported\");\n+                res.sendError(501, \"Websocket protocol not supported\");\n                 return new AtmosphereFramework.Action(AtmosphereFramework.Action.TYPE.CANCELLED);\n             }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 99, "bugNodeStartChar": 4001, "bugNodeLength": 54, "fixLineNum": 99, "fixNodeStartChar": 4001, "fixNodeLength": 54, "sourceBeforeFix": "res.sendError(202,\"Websocket protocol not supported\")", "sourceAfterFix": "res.sendError(501,\"Websocket protocol not supported\")"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "544b0ed025cdea88bec8a5dd4ff5462242442eca", "fixCommitParentSHA1": "64d880881c08f70758a9bbe6b14a12c4004423e8", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java\nindex 49bd0b0..bbaabcb 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java\n@@ -68,7 +68,7 @@\n                         logger.error(\"Invalid WebSocket Specification {} with {} \",\n                                 r.getHeader(\"Connection\"), r.getIntHeader(\"Sec-WebSocket-Version\"));\n                         HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, \"Websocket protocol not supported\");\n-                        HttpServletResponse.class.cast(response).sendError(202, \"Websocket protocol not supported\");\n+                        HttpServletResponse.class.cast(response).sendError(501, \"Websocket protocol not supported\");\n                         return;\n                     }\n                 }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 71, "bugNodeStartChar": 2793, "bugNodeLength": 91, "fixLineNum": 71, "fixNodeStartChar": 2793, "fixNodeLength": 91, "sourceBeforeFix": "HttpServletResponse.class.cast(response).sendError(202,\"Websocket protocol not supported\")", "sourceAfterFix": "HttpServletResponse.class.cast(response).sendError(501,\"Websocket protocol not supported\")"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "48a785f7125cd0b3338f6f9feb14ab22a020a313", "fixCommitParentSHA1": "4eac8cf2c4fe82b33baaa228d9a8571fd81ce076", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\nindex 3f5b4fd..2c7ed0d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\n@@ -583,7 +583,7 @@\n         if (create) {\n             return getSession();\n         }\n-        return session != null && isNotNoOps() ? b.request.getSession(false) : session;\n+        return session == null && isNotNoOps() ? b.request.getSession(false) : session;\n     }\n \n     /**\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 586, "bugNodeStartChar": 15282, "bugNodeLength": 15, "fixLineNum": 586, "fixNodeStartChar": 15282, "fixNodeLength": 15, "sourceBeforeFix": "session != null", "sourceAfterFix": "session == null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java\nindex 10da1e6..ec433fb 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java\n@@ -201,7 +201,7 @@\n      * @param resource an {@link AtmosphereResource}\n      * @return {@link AtmosphereResource} if added, or null if it was already there.\n      */\n-    AtmosphereResource addAtmosphereResource(AtmosphereResource resource);\n+    Broadcaster addAtmosphereResource(AtmosphereResource resource);\n \n     /**\n      * Remove a {@link AtmosphereResource} from the list of item to be notified when\n@@ -210,7 +210,7 @@\n      * @param resource an {@link AtmosphereResource}\n      * @return {@link AtmosphereResource} if removed, or null if it was not.\n      */\n-    AtmosphereResource removeAtmosphereResource(AtmosphereResource resource);\n+    Broadcaster removeAtmosphereResource(AtmosphereResource resource);\n \n     /**\n      * Set the {@link BroadcasterConfig} instance.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 197, "bugNodeStartChar": 9234, "bugNodeLength": 364, "fixLineNum": 197, "fixNodeStartChar": 9234, "fixNodeLength": 357, "sourceBeforeFix": "/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ AtmosphereResource addAtmosphereResource(AtmosphereResource resource); ", "sourceAfterFix": "/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ Broadcaster addAtmosphereResource(AtmosphereResource resource); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java\nindex 10da1e6..ec433fb 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java\n@@ -201,7 +201,7 @@\n      * @param resource an {@link AtmosphereResource}\n      * @return {@link AtmosphereResource} if added, or null if it was already there.\n      */\n-    AtmosphereResource addAtmosphereResource(AtmosphereResource resource);\n+    Broadcaster addAtmosphereResource(AtmosphereResource resource);\n \n     /**\n      * Remove a {@link AtmosphereResource} from the list of item to be notified when\n@@ -210,7 +210,7 @@\n      * @param resource an {@link AtmosphereResource}\n      * @return {@link AtmosphereResource} if removed, or null if it was not.\n      */\n-    AtmosphereResource removeAtmosphereResource(AtmosphereResource resource);\n+    Broadcaster removeAtmosphereResource(AtmosphereResource resource);\n \n     /**\n      * Set the {@link BroadcasterConfig} instance.\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 206, "bugNodeStartChar": 9604, "bugNodeLength": 364, "fixLineNum": 206, "fixNodeStartChar": 9604, "fixNodeLength": 357, "sourceBeforeFix": "/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ AtmosphereResource removeAtmosphereResource(AtmosphereResource resource); ", "sourceAfterFix": "/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ Broadcaster removeAtmosphereResource(AtmosphereResource resource); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 994, "bugNodeStartChar": 37483, "bugNodeLength": 2416, "fixLineNum": 994, "fixNodeStartChar": 37483, "fixNodeLength": 2409, "sourceBeforeFix": "/**   * {@inheritDoc}  */ @Override public AtmosphereResource addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),\"addAtmosphereResource(AtmosphereResource<?, ?> r\");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException(\"Broadcaster \" + this + \" cannot be used as its scope is set to REQUEST\");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn(\"Too many resource. Forcing resume of {} \",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn(\"failed to resume resource {} \",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format(\"Maximum suspended AtmosphereResources %s\",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } ", "sourceAfterFix": "/**   * {@inheritDoc}  */ @Override public Broadcaster addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),\"addAtmosphereResource(AtmosphereResource<?, ?> r\");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException(\"Broadcaster \" + this + \" cannot be used as its scope is set to REQUEST\");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn(\"Too many resource. Forcing resume of {} \",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn(\"failed to resume resource {} \",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format(\"Maximum suspended AtmosphereResources %s\",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1003, "bugNodeStartChar": 37781, "bugNodeLength": 1, "fixLineNum": 1003, "fixNodeStartChar": 37781, "fixNodeLength": 4, "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1030, "bugNodeStartChar": 39077, "bugNodeLength": 1, "fixLineNum": 1030, "fixNodeStartChar": 39077, "fixNodeLength": 4, "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1054, "bugNodeStartChar": 39891, "bugNodeLength": 1, "fixLineNum": 1054, "fixNodeStartChar": 39891, "fixNodeLength": 4, "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1063, "bugNodeStartChar": 40187, "bugNodeLength": 1018, "fixLineNum": 1063, "fixNodeStartChar": 40187, "fixNodeLength": 1011, "sourceBeforeFix": "/**   * {@inheritDoc}  */ @Override public AtmosphereResource removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),\"removeAtmosphereResource(AtmosphereResource r)\");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } ", "sourceAfterFix": "/**   * {@inheritDoc}  */ @Override public Broadcaster removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),\"removeAtmosphereResource(AtmosphereResource r)\");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1071, "bugNodeStartChar": 40460, "bugNodeLength": 1, "fixLineNum": 1071, "fixNodeStartChar": 40460, "fixNodeLength": 4, "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "fixCommitParentSHA1": "aa7627455539a95dd6bd4e8e20b2b98ea9ffb1ab", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 6e25f77..05169f6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -995,12 +995,12 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n \n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n-                return r;\n+                return this;\n             }\n \n             start();\n@@ -1027,7 +1027,7 @@\n             }\n \n             if (resources.contains(r)) {\n-                return r;\n+                return this;\n             }\n \n             // We need to synchronize here to let the push method cache message.\n@@ -1051,7 +1051,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {\n@@ -1064,15 +1064,15 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {\n+    public Broadcaster removeAtmosphereResource(AtmosphereResource r) {\n \n         if (destroyed.get()) {\n             logger.debug(DESTROYED, getID(), \"removeAtmosphereResource(AtmosphereResource r)\");\n-            return r;\n+            return this;\n         }\n \n         if (!resources.contains(r)) {\n-            return null;\n+            return this;\n         }\n         // Prevent two thread to mix operation\n         boolean removed = resources.remove(r);\n@@ -1089,7 +1089,7 @@\n                 }\n             }\n         }\n-        return r;\n+        return this;\n     }\n \n     private void notifyIdleListener() {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 1092, "bugNodeStartChar": 41197, "bugNodeLength": 1, "fixLineNum": 1092, "fixNodeStartChar": 41197, "fixNodeLength": 4, "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "fixCommitParentSHA1": "8be519a39737a6a65e801bdc8a4a7f510953c28c", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\nindex 8182996..fce20a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n@@ -51,7 +51,7 @@\n             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n-            logger.warn(\"{} {}\", errorCode, message);\n+            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1905, "bugNodeLength": 40, "fixLineNum": 54, "fixNodeStartChar": 1905, "fixNodeLength": 41, "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "fixCommitParentSHA1": "8be519a39737a6a65e801bdc8a4a7f510953c28c", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\nindex 8182996..fce20a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n@@ -51,7 +51,7 @@\n             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n-            logger.warn(\"{} {}\", errorCode, message);\n+            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1905, "bugNodeLength": 40, "fixLineNum": 54, "fixNodeStartChar": 1905, "fixNodeLength": 41, "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "fixCommitParentSHA1": "8be519a39737a6a65e801bdc8a4a7f510953c28c", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\nindex 16e20f3..7714a73 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n@@ -490,7 +490,7 @@\n                     invokeAtmosphereHandler(r);\n \n                     try {\n-                        r.getResponse().sendError(503);\n+                        r.getResponse().sendError(503, \"Remotely closed\");\n                         r.getResponse().getOutputStream().close();\n                     } catch (Throwable t) {\n                         try {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 493, "bugNodeStartChar": 19766, "bugNodeLength": 30, "fixLineNum": 493, "fixNodeStartChar": 19766, "fixNodeLength": 49, "sourceBeforeFix": "r.getResponse().sendError(503)", "sourceAfterFix": "r.getResponse().sendError(503,\"Remotely closed\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "19558f8d98358fece627fda336050054a1fce211", "fixCommitParentSHA1": "fcc6ad1ae89a377ff91d93c61d3cdc4932fdacb9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\nindex fce20a0..8182996 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n@@ -51,7 +51,7 @@\n             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n-            logger.debug(\"{} {}\", errorCode, message);\n+            logger.warn(\"{} {}\", errorCode, message);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1905, "bugNodeLength": 41, "fixLineNum": 54, "fixNodeStartChar": 1905, "fixNodeLength": 40, "sourceBeforeFix": "logger.debug(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.warn(\"{} {}\",errorCode,message)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "19558f8d98358fece627fda336050054a1fce211", "fixCommitParentSHA1": "fcc6ad1ae89a377ff91d93c61d3cdc4932fdacb9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\nindex fce20a0..8182996 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n@@ -51,7 +51,7 @@\n             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n-            logger.debug(\"{} {}\", errorCode, message);\n+            logger.warn(\"{} {}\", errorCode, message);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1905, "bugNodeLength": 41, "fixLineNum": 54, "fixNodeStartChar": 1905, "fixNodeLength": 40, "sourceBeforeFix": "logger.debug(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.warn(\"{} {}\",errorCode,message)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "fcc6ad1ae89a377ff91d93c61d3cdc4932fdacb9", "fixCommitParentSHA1": "f0606b3a118bfc03ac8d8d5dc66e21b0555e87b9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\nindex 8182996..fce20a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n@@ -51,7 +51,7 @@\n             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n-            logger.warn(\"{} {}\", errorCode, message);\n+            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1905, "bugNodeLength": 40, "fixLineNum": 54, "fixNodeStartChar": 1905, "fixNodeLength": 41, "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fcc6ad1ae89a377ff91d93c61d3cdc4932fdacb9", "fixCommitParentSHA1": "f0606b3a118bfc03ac8d8d5dc66e21b0555e87b9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\nindex 8182996..fce20a0 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java\n@@ -51,7 +51,7 @@\n             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n-            logger.warn(\"{} {}\", errorCode, message);\n+            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 54, "bugNodeStartChar": 1905, "bugNodeLength": 40, "fixLineNum": 54, "fixNodeStartChar": 1905, "fixNodeLength": 41, "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e2ac6f8c326490b85b9ad9e0a67d53ffb7fc2842", "fixCommitParentSHA1": "0873f7f92aae8118cd7ff16eaa1c4340629c8b77", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java\nindex 1f85702..42df182 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java\n@@ -34,7 +34,7 @@\n     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n \n-    private static final Logger logger = LoggerFactory.getLogger(BlockingIOCometSupport.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);\n \n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 37, "bugNodeStartChar": 1366, "bugNodeLength": 28, "fixLineNum": 37, "fixNodeStartChar": 1366, "fixNodeLength": 23, "sourceBeforeFix": "BlockingIOCometSupport.class", "sourceAfterFix": "NettyCometSupport.class"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "ea0f1f726181ba1a06ea0ca0735d090884e1baf9", "fixCommitParentSHA1": "690cc7f03efcee1d1b62180f3d8e871a820db9b9", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java\nindex 2cf969d..21f1b0b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java\n@@ -175,7 +175,7 @@\n     public void action(AtmosphereResourceImpl r) {\n         super.action(r);\n \n-        ServletRequest request = r.getRequest(false);\n+        ServletRequest request = r.getRequest(true);\n         while (request != null) {\n             try {\n                 Continuation c = (Continuation) request.getAttribute(Continuation.class.getName());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 178, "bugNodeStartChar": 7631, "bugNodeLength": 19, "fixLineNum": 178, "fixNodeStartChar": 7631, "fixNodeLength": 18, "sourceBeforeFix": "r.getRequest(false)", "sourceAfterFix": "r.getRequest(true)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "a1118becb60227f7437c663b8747ab9fbee6fac2", "fixCommitParentSHA1": "9d3cc402ae8902edfbcae9ac16965e5ba128b3b5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java\nindex 7563d1a..c04c157 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java\n@@ -179,7 +179,7 @@\n         super.action(r);\n \n         ServletRequest request = r.getRequest();\n-        while (AtmosphereRequest.class.isAssignableFrom(request.getClass())) {\n+        while (!AtmosphereRequest.class.isAssignableFrom(request.getClass())) {\n             request = AtmosphereRequest.class.cast(request).getRequest();\n         }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 182, "bugNodeStartChar": 7813, "bugNodeLength": 60, "fixLineNum": 182, "fixNodeStartChar": 7813, "fixNodeLength": 61, "sourceBeforeFix": "AtmosphereRequest.class.isAssignableFrom(request.getClass())", "sourceAfterFix": "!AtmosphereRequest.class.isAssignableFrom(request.getClass())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "3d6efb058ba58e1d2dbd47c9af4a52d33ff9c470", "fixCommitParentSHA1": "6d591977f5ec5f2f33d3dbcfdd4c842e9c13d4fd", "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java", "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java\nindex dacb3c7..153b86a 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java\n@@ -88,7 +88,7 @@\n     public void testLookup_Class_Object() {\n         String id = \"id\";\n         String id2 = \"foo\";\n-        assert factory.lookup(DefaultBroadcaster.class, id) != null;\n+        assert factory.lookup(DefaultBroadcaster.class, id, true) != null;\n         assert factory.lookup(DefaultBroadcaster.class, id2) == null;\n     }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 91, "bugNodeStartChar": 2703, "bugNodeLength": 44, "fixLineNum": 91, "fixNodeStartChar": 2703, "fixNodeLength": 50, "sourceBeforeFix": "factory.lookup(DefaultBroadcaster.class,id)", "sourceAfterFix": "factory.lookup(DefaultBroadcaster.class,id,true)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "2c2d74610fec585556af21e02f3d8bfde051ad46", "fixCommitParentSHA1": "e51e7faf7d746dedbaeabdbeabedee2bbf37d23a", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java\nindex 6b39359..b9340dc 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java\n@@ -116,7 +116,7 @@\n \n         webSocketProtocol.onOpen(webSocket);\n \n-        if (webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {\n+        if (!webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {\n             webSocketProtocol.onError(webSocket, new WebSocketException(\"No AtmosphereResource has been suspended. The WebSocket will be closed.\", wsr));\n         }\n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 119, "bugNodeStartChar": 5249, "bugNodeLength": 63, "fixLineNum": 119, "fixNodeStartChar": 5249, "fixNodeLength": 64, "sourceBeforeFix": "webSocket.resource().getAtmosphereResourceEvent().isSuspended()", "sourceAfterFix": "!webSocket.resource().getAtmosphereResourceEvent().isSuspended()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "03788e9f214e2300993bd523517fe0e55e8a8587", "fixCommitParentSHA1": "93bd4e9a1c86b52cab859e0ef696efb1fc55993d", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\nindex ba642cc..345aa22 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n@@ -87,7 +87,7 @@\n \n     private void configure(String broadcasterLifeCyclePolicy) {\n \n-        int maxIdleTime = 5 * 60 * 100;\n+        int maxIdleTime = 5 * 60 * 1000;\n         String idleTime = config.getInitParameter(ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY_IDLETIME);\n         if (idleTime != null) {\n             maxIdleTime = Integer.parseInt(idleTime);\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 90, "bugNodeStartChar": 4085, "bugNodeLength": 12, "fixLineNum": 90, "fixNodeStartChar": 4085, "fixNodeLength": 13, "sourceBeforeFix": "5 * 60 * 100", "sourceAfterFix": "5 * 60 * 1000"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "fixCommitParentSHA1": "38c360dd4f610f9a37b150246b2d92081c8d3135", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\nindex eaaf479..58f9ee7 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n@@ -232,7 +232,7 @@\n      * @throws javax.servlet.ServletException\n      */\n     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {\n-        String path = req.getRequestURI();\n+        String path = req.getServletPath() + req.getPathInfo();\n         if (path == null || path.length() == 0) {\n             path = \"/*\";\n         }\n@@ -242,7 +242,7 @@\n             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n-                logger.trace(\"Trying to map {} to {}\", t, path);\n+                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 245, "bugNodeStartChar": 10117, "bugNodeLength": 47, "fixLineNum": 245, "fixNodeStartChar": 10117, "fixNodeLength": 47, "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "fixCommitParentSHA1": "38c360dd4f610f9a37b150246b2d92081c8d3135", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\nindex eaaf479..58f9ee7 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java\n@@ -232,7 +232,7 @@\n      * @throws javax.servlet.ServletException\n      */\n     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {\n-        String path = req.getRequestURI();\n+        String path = req.getServletPath() + req.getPathInfo();\n         if (path == null || path.length() == 0) {\n             path = \"/*\";\n         }\n@@ -242,7 +242,7 @@\n             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n-                logger.trace(\"Trying to map {} to {}\", t, path);\n+                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 245, "bugNodeStartChar": 10117, "bugNodeLength": 47, "fixLineNum": 245, "fixNodeStartChar": 10117, "fixNodeLength": 47, "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "f4f938dac9799366e2aed67dea151b07a8434eef", "fixCommitParentSHA1": "2fe79efdff1b38de1dd077af7b7f03af8b88cfa5", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\nindex d93d883..50f34d5 100755\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java\n@@ -234,7 +234,7 @@\n                 for (Broadcaster b : lookupAll()) {\n                     try {\n                         // Prevent deadlock\n-                        if (!b.getAtmosphereResources().contains(r)) {\n+                        if (b.getAtmosphereResources().contains(r)) {\n                             b.removeAtmosphereResource(r);\n                         }\n                     } catch (IllegalStateException ex) {\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 237, "bugNodeStartChar": 9189, "bugNodeLength": 39, "fixLineNum": 237, "fixNodeStartChar": 9189, "fixNodeLength": 38, "sourceBeforeFix": "!b.getAtmosphereResources().contains(r)", "sourceAfterFix": "b.getAtmosphereResources().contains(r)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "b89ef69f126ecaa45d91e1b75e58acdd6d0f3625", "fixCommitParentSHA1": "2ec3c4ca2d8a1a0f08701009b2304b09a8b7b120", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java\nindex c7cc558..39dd695 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java\n@@ -637,7 +637,7 @@\n \n     protected void doInitParamsForWebSocket(ServletConfig sc) {\n         String s = sc.getInitParameter(WEBSOCKET_SUPPORT);\n-        if (s != null) {\n+        if (s != null && Boolean.parseBoolean(s)) {\n             webSocketEnabled = true;\n             sessionSupport(false);\n         }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 640, "bugNodeStartChar": 25733, "bugNodeLength": 9, "fixLineNum": 640, "fixNodeStartChar": 25733, "fixNodeLength": 36, "sourceBeforeFix": "s != null", "sourceAfterFix": "s != null && Boolean.parseBoolean(s)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "b23347c8d0fae222109b2c7e0252533cebb30d85", "fixCommitParentSHA1": "1376fa5c4f2b277f057f50f5236e99598ad1fcc4", "bugFilePath": "extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java", "fixPatch": "diff --git a/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java b/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java\nindex 275ea7e..4ecd3b5 100644\n--- a/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java\n+++ b/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java\n@@ -99,7 +99,7 @@\n         logger.info(\"{} shared connection pool {}\", getClass().getName(), sharedPool);\n \n         if (sharedPool) {\n-            if (config.properties().get(REDIS_SHARED_POOL) == null) {\n+            if (config.properties().get(REDIS_SHARED_POOL) != null) {\n                 jedisPool = (JedisPool) config.properties().get(REDIS_SHARED_POOL);\n             }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 102, "bugNodeStartChar": 3262, "bugNodeLength": 50, "fixLineNum": 102, "fixNodeStartChar": 3262, "fixNodeLength": 50, "sourceBeforeFix": "config.properties().get(REDIS_SHARED_POOL) == null", "sourceAfterFix": "config.properties().get(REDIS_SHARED_POOL) != null"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "dd287e0057702c15b34db99de389a1c51023c2f3", "fixCommitParentSHA1": "26241383028eb6fe5a097bdfe3fde9c72d86ad45", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex a19e12a..6750354 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -124,7 +124,7 @@\n         injectCacheHeaders = nocache != null ? false : true;\n \n         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);\n-        enableAccessControl = ac != null ? Boolean.parseBoolean(ac) : true;\n+        enableAccessControl = ac != null ? !Boolean.parseBoolean(ac) : true;\n \n         String wh = config.getInitParameter(FrameworkConfig.WRITE_HEADERS);\n         writeHeaders = wh != null ? Boolean.parseBoolean(wh) : true;\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 127, "bugNodeStartChar": 5951, "bugNodeLength": 24, "fixLineNum": 127, "fixNodeStartChar": 5951, "fixNodeLength": 25, "sourceBeforeFix": "Boolean.parseBoolean(ac)", "sourceAfterFix": "!Boolean.parseBoolean(ac)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c56426eaa91e72179cc742b570e08a66f52936be", "fixCommitParentSHA1": "096501aa179d772a3a6044dd92c7a5712bf9a442", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 4d04b05..54089e2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -725,7 +725,7 @@\n         }\n \n         // To avoid excessive synchronization, we allow resources.size() to get larger that maxSuspendResource\n-        if (maxSuspendResource.get() > 0 && resources.size() <= maxSuspendResource.get()) {\n+        if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {\n             // Resume the first in.\n             if (policy == POLICY.FIFO) {\n                 // TODO handle null return from poll()\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 728, "bugNodeStartChar": 26289, "bugNodeLength": 44, "fixLineNum": 728, "fixNodeStartChar": 26289, "fixNodeLength": 44, "sourceBeforeFix": "resources.size() <= maxSuspendResource.get()", "sourceAfterFix": "resources.size() >= maxSuspendResource.get()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "fixCommitParentSHA1": "53dc2b0294ec0686359e5267ae9f6b58f580bf46", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\nindex f9070e5..5153419 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n@@ -161,10 +161,10 @@\n                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 164, "bugNodeStartChar": 6791, "bugNodeLength": 53, "fixLineNum": 164, "fixNodeStartChar": 6791, "fixNodeLength": 55, "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onHandshake(event)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "fixCommitParentSHA1": "53dc2b0294ec0686359e5267ae9f6b58f580bf46", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\nindex f9070e5..5153419 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n@@ -161,10 +161,10 @@\n                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 164, "bugNodeStartChar": 6791, "bugNodeLength": 53, "fixLineNum": 164, "fixNodeStartChar": 6791, "fixNodeLength": 55, "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onHandshake(event)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "fixCommitParentSHA1": "53dc2b0294ec0686359e5267ae9f6b58f580bf46", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\nindex f9070e5..5153419 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n@@ -161,10 +161,10 @@\n                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 167, "bugNodeStartChar": 6933, "bugNodeLength": 53, "fixLineNum": 167, "fixNodeStartChar": 6933, "fixNodeLength": 51, "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onClose(event)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f5a277900f4bc700a17d349aa9f30af3ddca94fe", "fixCommitParentSHA1": "53dc2b0294ec0686359e5267ae9f6b58f580bf46", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\nindex f9070e5..5153419 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java\n@@ -161,10 +161,10 @@\n                         WebSocketEventListener.class.cast(l).onMessage(event);\n                         break;\n                     case HANDSHAKE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onHandshake(event);\n                         break;\n                     case CLOSE:\n-                        WebSocketEventListener.class.cast(l).onMessage(event);\n+                        WebSocketEventListener.class.cast(l).onClose(event);\n                         break;\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 167, "bugNodeStartChar": 6933, "bugNodeLength": 53, "fixLineNum": 167, "fixNodeStartChar": 6933, "fixNodeLength": 51, "sourceBeforeFix": "WebSocketEventListener.class.cast(l).onMessage(event)", "sourceAfterFix": "WebSocketEventListener.class.cast(l).onClose(event)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2111905af362bab4ac7c786787f79764aac90c9d", "fixCommitParentSHA1": "6583f6459050f3ce5ada603a355f85e6377059c9", "bugFilePath": "plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java", "fixPatch": "diff --git a/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java b/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\nindex d749493..7db2927 100644\n--- a/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\n+++ b/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\n@@ -110,7 +110,7 @@\n                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n-                        bc.broadcast(b.getTopicId());\n+                        bc.broadcast(b.getMessage());\n                     }\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 113, "bugNodeStartChar": 4529, "bugNodeLength": 14, "fixLineNum": 113, "fixNodeStartChar": 4529, "fixNodeLength": 14, "sourceBeforeFix": "b.getTopicId()", "sourceAfterFix": "b.getMessage()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2111905af362bab4ac7c786787f79764aac90c9d", "fixCommitParentSHA1": "6583f6459050f3ce5ada603a355f85e6377059c9", "bugFilePath": "plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java", "fixPatch": "diff --git a/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java b/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\nindex d749493..7db2927 100644\n--- a/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\n+++ b/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\n@@ -110,7 +110,7 @@\n                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n-                        bc.broadcast(b.getTopicId());\n+                        bc.broadcast(b.getMessage());\n                     }\n                 }\n             }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 113, "bugNodeStartChar": 4529, "bugNodeLength": 14, "fixLineNum": 113, "fixNodeStartChar": 4529, "fixNodeLength": 14, "sourceBeforeFix": "b.getTopicId()", "sourceAfterFix": "b.getMessage()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "34c2a9bfd05bed467b523b0be9a311fa37d34d21", "fixCommitParentSHA1": "b283d1f7ad801492c5a2fe584e2e60979d5ef575", "bugFilePath": "samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java", "fixPatch": "diff --git a/samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java b/samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java\nindex 3498112..d355f77 100644\n--- a/samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java\n+++ b/samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java\n@@ -102,7 +102,7 @@\n                 if (clusterType.equals(\"jgroups\")){\n                     event.getAtmosphereConfig().getServletContext().log(\"JGroupsFilter enabled\");\n                     bc.getBroadcasterConfig().addFilter(\n-                            new JGroupsFilter(bc, event.getAtmosphereConfig().getWebServerName()));\n+                            new JGroupsFilter(bc));\n                 }\n             }\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 105, "bugNodeStartChar": 4771, "bugNodeLength": 69, "fixLineNum": 105, "fixNodeStartChar": 4771, "fixNodeLength": 21, "sourceBeforeFix": "new JGroupsFilter(bc,event.getAtmosphereConfig().getWebServerName())", "sourceAfterFix": "new JGroupsFilter(bc)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9f941db913334b4b5ed48833522200710e30bb84", "fixCommitParentSHA1": "75283481bdcb4d300fbba168187b00793756edd6", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java b/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java\nindex a47d327..5f51c49 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java\n@@ -130,7 +130,7 @@\n \n             fc.setFilterName(filterName);\n             filterChain.addFilter(fc);\n-            logger.info(\"Installing Filter {}\", servletClassName);\n+            logger.info(\"Installing Filter {}\", filterName);\n         }\n \n     }\n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 133, "bugNodeStartChar": 5977, "bugNodeLength": 53, "fixLineNum": 133, "fixNodeStartChar": 5977, "fixNodeLength": 47, "sourceBeforeFix": "logger.info(\"Installing Filter {}\",servletClassName)", "sourceAfterFix": "logger.info(\"Installing Filter {}\",filterName)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "854a2a00a42f9cb61b934f04db5e6fc912787151", "fixCommitParentSHA1": "5e7ca0f8110b0aeb180d8f1e43165ff4b7a6d502", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\nindex d1e9f5b..ec3aece 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n@@ -81,7 +81,7 @@\n     }\n \n     protected void configExecutors() {\n-        executorService = Executors.newCachedThreadPool(new ThreadFactory(){\n+        executorService = Executors.newSingleThreadExecutor(new ThreadFactory(){\n \n             private AtomicInteger count = new AtomicInteger();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 84, "bugNodeStartChar": 3323, "bugNodeLength": 327, "fixLineNum": 84, "fixNodeStartChar": 3323, "fixNodeLength": 331, "sourceBeforeFix": "Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,\"Atmosphere-BroadcasterConfig-\" + count.getAndIncrement());   } } )", "sourceAfterFix": "Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,\"Atmosphere-BroadcasterConfig-\" + count.getAndIncrement());   } } )"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "854a2a00a42f9cb61b934f04db5e6fc912787151", "fixCommitParentSHA1": "5e7ca0f8110b0aeb180d8f1e43165ff4b7a6d502", "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\nindex d1e9f5b..ec3aece 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java\n@@ -81,7 +81,7 @@\n     }\n \n     protected void configExecutors() {\n-        executorService = Executors.newCachedThreadPool(new ThreadFactory(){\n+        executorService = Executors.newSingleThreadExecutor(new ThreadFactory(){\n \n             private AtomicInteger count = new AtomicInteger();\n \n", "projectName": "Atmosphere.atmosphere", "bugLineNum": 84, "bugNodeStartChar": 3323, "bugNodeLength": 327, "fixLineNum": 84, "fixNodeStartChar": 3323, "fixNodeLength": 331, "sourceBeforeFix": "Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,\"Atmosphere-BroadcasterConfig-\" + count.getAndIncrement());   } } )", "sourceAfterFix": "Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,\"Atmosphere-BroadcasterConfig-\" + count.getAndIncrement());   } } )"}]