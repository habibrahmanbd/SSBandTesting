[
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b081c601989d65c3c26727bc6d31268815516a21",
    "fixCommitParentSHA1": "1a10cf28ea05f678029a81ef5fa056eb93f180c8",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java\nindex 69aae57..9a14390 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java\n@@ -155,7 +155,7 @@\n \t\t\t\tscope = Collections.singleton(String.class.cast(scopeObj));\n \t\t\t} else if (Collection.class.<String>isAssignableFrom(scopeObj.getClass())) {\n \t\t\t\tCollection scopeColl = Collection.class.<String>cast(scopeObj);\n-\t\t\t\tscope = new HashSet<String>(scopeColl);\n+\t\t\t\tscope = new LinkedHashSet<String>(scopeColl);\t// Preserve ordering\n \t\t\t}\n \t\t}\n \t\treturn scope;\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 158,
    "bugNodeStartChar": 5878,
    "bugNodeLength": 15,
    "fixLineNum": 158,
    "fixNodeStartChar": 5878,
    "fixNodeLength": 21,
    "sourceBeforeFix": "HashSet<String>",
    "sourceAfterFix": "LinkedHashSet<String>"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "22298e1958a648d627ae3cbc3fe7bf0f2613286f",
    "fixCommitParentSHA1": "e30aefd030c59f0d67a449e6fbc808c76580bbe8",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java\nindex fd86a3a..ed12a5b 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java\n@@ -118,7 +118,7 @@\n \n \tpublic FrameworkEndpointHandlerMapping() {\n \t\t// Make sure user-supplied mappings take precedence by default (except the resource mapping)\n-\t\tsetOrder(Ordered.LOWEST_PRECEDENCE - 1);\n+\t\tsetOrder(Ordered.LOWEST_PRECEDENCE - 2);\n \t}\n \n \t/**\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 121,
    "bugNodeStartChar": 4097,
    "bugNodeLength": 29,
    "fixLineNum": 121,
    "fixNodeStartChar": 4097,
    "fixNodeLength": 29,
    "sourceBeforeFix": "Ordered.LOWEST_PRECEDENCE - 1",
    "sourceAfterFix": "Ordered.LOWEST_PRECEDENCE - 2"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "4a0574fde141d2e3eda0e95258db19b709ec6783",
    "fixCommitParentSHA1": "5df63d4036a8d7528f491160ab263ea59168152e",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java\nindex c8bcd95..39bb4cf 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java\n@@ -63,7 +63,7 @@\n \t\tase = (HttpRequestMethodNotSupportedException) throwableAnalyzer\n \t\t\t\t.getFirstThrowableOfType(HttpRequestMethodNotSupportedException.class, causeChain);\n \t\tif (ase instanceof HttpRequestMethodNotSupportedException) {\n-\t\t\treturn handleOAuth2Exception(new BadRequest(ase.getMessage(), ase));\n+\t\t\treturn handleOAuth2Exception(new MethodNotAllowed(ase.getMessage(), ase));\n \t\t}\n \n \t\treturn handleOAuth2Exception(new ServerErrorException(e.getMessage(), e));\n@@ -143,18 +143,18 @@\n \t}\n \n \t@SuppressWarnings(\"serial\")\n-\tprivate static class BadRequest extends OAuth2Exception {\n+\tprivate static class MethodNotAllowed extends OAuth2Exception {\n \n-\t\tpublic BadRequest(String msg, Throwable t) {\n+\t\tpublic MethodNotAllowed(String msg, Throwable t) {\n \t\t\tsuper(msg, t);\n \t\t}\n \n \t\tpublic String getOAuth2ErrorCode() {\n-\t\t\treturn \"bad_request\";\n+\t\t\treturn \"method_not_allowed\";\n \t\t}\n \n \t\tpublic int getHttpErrorCode() {\n-\t\t\treturn 400;\n+\t\t\treturn 405;\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 157,
    "bugNodeStartChar": 4847,
    "bugNodeLength": 11,
    "fixLineNum": 157,
    "fixNodeStartChar": 4847,
    "fixNodeLength": 11,
    "sourceBeforeFix": "return 400; ",
    "sourceAfterFix": "return 405; "
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "82ca381dbccdb8bb12df1d31d53105c88ff3dbd8",
    "fixCommitParentSHA1": "d2097aaebf96fce13ecac03a3fc8218f791955c2",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java\nindex 163edd9..89ffb22 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java\n@@ -198,7 +198,7 @@\n \t\t@Override\n \t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n \t\t\tString[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,\n-\t\t\t\t\tJwtAccessTokenConverter.class);\n+\t\t\t\t\tJwtAccessTokenConverter.class, false, false);\n \t\t\tif (names.length > 0) {\n \t\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(TokenKeyEndpoint.class);\n \t\t\t\tbuilder.addConstructorArgReference(names[0]);\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 200,
    "bugNodeStartChar": 8545,
    "bugNodeLength": 100,
    "fixLineNum": 200,
    "fixNodeStartChar": 8545,
    "fixNodeLength": 114,
    "sourceBeforeFix": "BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class)",
    "sourceAfterFix": "BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class,false,false)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "effa7e1eacca5cfb89064e4ed7f430d71307bea4",
    "fixCommitParentSHA1": "4e6db697ec68f7d345dccd1de18cda6006345c05",
    "bugFilePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java\nindex 346fd49..d5e1701 100644\n--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java\n+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java\n@@ -147,7 +147,7 @@\n \t\t            .authorities(\"ROLE_CLIENT\", \"ROLE_TRUSTED_CLIENT\")\n \t\t            .scopes(\"read\", \"write\", \"trust\")\n \t\t            .accessTokenValiditySeconds(60)\n-\t\t            .additionalInformation(\"foo:bar\", \"spam:bucket\");\n+\t\t            .additionalInformation(\"foo:bar\", \"spam:bucket\", \"crap\");\n \t\t \t// @formatter:on\n \t\t}\n \n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 144,
    "bugNodeStartChar": 6313,
    "bugNodeLength": 382,
    "fixLineNum": 144,
    "fixNodeStartChar": 6313,
    "fixNodeLength": 390,
    "sourceBeforeFix": "clients.inMemory().withClient(\"my-trusted-client\").authorizedGrantTypes(\"password\",\"authorization_code\",\"refresh_token\",\"implicit\").authorities(\"ROLE_CLIENT\",\"ROLE_TRUSTED_CLIENT\").scopes(\"read\",\"write\",\"trust\").accessTokenValiditySeconds(60).additionalInformation(\"foo:bar\",\"spam:bucket\")",
    "sourceAfterFix": "clients.inMemory().withClient(\"my-trusted-client\").authorizedGrantTypes(\"password\",\"authorization_code\",\"refresh_token\",\"implicit\").authorities(\"ROLE_CLIENT\",\"ROLE_TRUSTED_CLIENT\").scopes(\"read\",\"write\",\"trust\").accessTokenValiditySeconds(60).additionalInformation(\"foo:bar\",\"spam:bucket\",\"crap\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b847c8f134aa71f74efe3098fff6d4c095d63c3c",
    "fixCommitParentSHA1": "75d63559aedf5ce0dd3794d6fb66d228fa7ec630",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java\nindex f3af1b2..65bf03d 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java\n@@ -113,7 +113,7 @@\n \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n-\t\t\tif (LOG.isInfoEnabled()) {\n+\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 116,
    "bugNodeStartChar": 5647,
    "bugNodeLength": 19,
    "fixLineNum": 116,
    "fixNodeStartChar": 5647,
    "fixNodeLength": 20,
    "sourceBeforeFix": "LOG.isInfoEnabled()",
    "sourceAfterFix": "LOG.isDebugEnabled()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b847c8f134aa71f74efe3098fff6d4c095d63c3c",
    "fixCommitParentSHA1": "75d63559aedf5ce0dd3794d6fb66d228fa7ec630",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java\nindex f3af1b2..65bf03d 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java\n@@ -113,7 +113,7 @@\n \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n-\t\t\tif (LOG.isInfoEnabled()) {\n+\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 116,
    "bugNodeStartChar": 5647,
    "bugNodeLength": 19,
    "fixLineNum": 116,
    "fixNodeStartChar": 5647,
    "fixNodeLength": 20,
    "sourceBeforeFix": "LOG.isInfoEnabled()",
    "sourceAfterFix": "LOG.isDebugEnabled()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "ed338de3ff3e843322201ec8a736daa32756649a",
    "fixCommitParentSHA1": "71e21dc77bb0d7d3c73157eb724076cc100b4d58",
    "bugFilePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java\nindex 582d336..9f019b1 100644\n--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java\n+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java\n@@ -82,7 +82,7 @@\n \t@Test\n \tpublic void testScopesRegex() throws Exception {\n \n-\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null);\n+\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null, null);\n \n \t\tAuthentication userAuthentication = null;\n \t\tOAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);\n@@ -98,7 +98,7 @@\n \t@Test(expected = AccessDeniedException.class)\n \tpublic void testScopesRegexThrowsException() throws Exception {\n \n-\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null);\n+\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null, null);\n \n \t\tAuthentication userAuthentication = null;\n \t\tOAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 85,
    "bugNodeStartChar": 3940,
    "bugNodeLength": 123,
    "fixLineNum": 85,
    "fixNodeStartChar": 3940,
    "fixNodeLength": 129,
    "sourceBeforeFix": "RequestTokenFactory.createOAuth2Request(null,\"foo\",null,false,Collections.singleton(\"ns_admin:read\"),null,null,null)",
    "sourceAfterFix": "RequestTokenFactory.createOAuth2Request(null,\"foo\",null,false,Collections.singleton(\"ns_admin:read\"),null,null,null,null)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "ed338de3ff3e843322201ec8a736daa32756649a",
    "fixCommitParentSHA1": "71e21dc77bb0d7d3c73157eb724076cc100b4d58",
    "bugFilePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java\nindex 582d336..9f019b1 100644\n--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java\n+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java\n@@ -82,7 +82,7 @@\n \t@Test\n \tpublic void testScopesRegex() throws Exception {\n \n-\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null);\n+\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null, null);\n \n \t\tAuthentication userAuthentication = null;\n \t\tOAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);\n@@ -98,7 +98,7 @@\n \t@Test(expected = AccessDeniedException.class)\n \tpublic void testScopesRegexThrowsException() throws Exception {\n \n-\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null);\n+\t\tOAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, \"foo\", null, false, Collections.singleton(\"ns_admin:read\"), null, null, null, null);\n \n \t\tAuthentication userAuthentication = null;\n \t\tOAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 101,
    "bugNodeStartChar": 4958,
    "bugNodeLength": 123,
    "fixLineNum": 101,
    "fixNodeStartChar": 4958,
    "fixNodeLength": 129,
    "sourceBeforeFix": "RequestTokenFactory.createOAuth2Request(null,\"foo\",null,false,Collections.singleton(\"ns_admin:read\"),null,null,null)",
    "sourceAfterFix": "RequestTokenFactory.createOAuth2Request(null,\"foo\",null,false,Collections.singleton(\"ns_admin:read\"),null,null,null,null)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "7f05a320d91958af7f10f6a5a0adbcfcd2176c89",
    "fixCommitParentSHA1": "53491e832847c2cd0b13655debaec75b443c50a9",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java\nindex 26f3a7a..14633f2 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java\n@@ -103,7 +103,7 @@\n \t}\n \n \tpublic OAuth2Request createOAuth2Request() {\n-\t\treturn new OAuth2Request(getApprovalParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());\n+\t\treturn new OAuth2Request(getRequestParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());\n \t}\n \n \t/**\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 106,
    "bugNodeStartChar": 3862,
    "bugNodeLength": 23,
    "fixLineNum": 106,
    "fixNodeStartChar": 3862,
    "fixNodeLength": 22,
    "sourceBeforeFix": "getApprovalParameters()",
    "sourceAfterFix": "getRequestParameters()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7f05a320d91958af7f10f6a5a0adbcfcd2176c89",
    "fixCommitParentSHA1": "53491e832847c2cd0b13655debaec75b443c50a9",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java\nindex 26f3a7a..14633f2 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java\n@@ -103,7 +103,7 @@\n \t}\n \n \tpublic OAuth2Request createOAuth2Request() {\n-\t\treturn new OAuth2Request(getApprovalParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());\n+\t\treturn new OAuth2Request(getRequestParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());\n \t}\n \n \t/**\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 106,
    "bugNodeStartChar": 3862,
    "bugNodeLength": 23,
    "fixLineNum": 106,
    "fixNodeStartChar": 3862,
    "fixNodeLength": 22,
    "sourceBeforeFix": "getApprovalParameters()",
    "sourceAfterFix": "getRequestParameters()"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "6bb73b52e050c6fcb98478e632c7ed54df8c451e",
    "fixCommitParentSHA1": "e1a3bc6cf016085ef6880e906da9c07f4d84b2ed",
    "bugFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/code/AuthorizationCodeAccessTokenProvider.java",
    "fixPatch": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/code/AuthorizationCodeAccessTokenProvider.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/code/AuthorizationCodeAccessTokenProvider.java\nindex 2b37092..e384ace 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/code/AuthorizationCodeAccessTokenProvider.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/code/AuthorizationCodeAccessTokenProvider.java\n@@ -56,10 +56,10 @@\n \t\tform.add(\"code\", context.getAuthorizationCode());\n \n \t\tString redirectUri = resource.getPreEstablishedRedirectUri();\n-\t\tif (redirectUri == null) {\n+\t\tif (context!=null && redirectUri == null) {\n \t\t\t// no pre-established redirect uri: use the preserved state\n \t\t\t// TODO: treat redirect URI as a special kind of state (this is a historical mini hack)\n-\t\t\tredirectUri = String.valueOf(context==null ? null : context.getPreservedState());\n+\t\t\tredirectUri = String.valueOf(context.getPreservedState());\n \t\t} else {\n \t\t\t// TODO: the state key is what should be sent, not the value\n \t\t\tform.add(\"state\", String.valueOf(context.getPreservedState()));\n",
    "projectName": "spring-projects.spring-security-oauth",
    "bugLineNum": 59,
    "bugNodeStartChar": 2191,
    "bugNodeLength": 19,
    "fixLineNum": 59,
    "fixNodeStartChar": 2191,
    "fixNodeLength": 36,
    "sourceBeforeFix": "redirectUri == null",
    "sourceAfterFix": "context != null && redirectUri == null"
  }
]