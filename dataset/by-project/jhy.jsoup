[{"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "45c54996c4e8d74cf84304e767934ff584c24702", "fixCommitParentSHA1": "02668f757c59f0c1a7ad8f3169faf061b4b787c1", "bugFilePath": "src/main/java/org/jsoup/helper/DataUtil.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java\nindex 3ac0edb..b9462dc 100644\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n@@ -99,8 +99,8 @@\n         boolean fullyRead = false;\n \n         // read the start of the stream and look for a BOM or meta charset\n-        input.mark(firstReadBufferSize);\n-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed\n+        input.mark(bufferSize);\n+        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.\n         fullyRead = input.read() == -1;\n         input.reset();\n \n", "projectName": "jhy.jsoup", "bugLineNum": 102, "bugNodeStartChar": 3876, "bugNodeLength": 31, "fixLineNum": 102, "fixNodeStartChar": 3876, "fixNodeLength": 22, "sourceBeforeFix": "input.mark(firstReadBufferSize)", "sourceAfterFix": "input.mark(bufferSize)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "333a6469ffec02354a56d1a5eb5867dc16da58a0", "fixCommitParentSHA1": "f50042980dda4e8521f05d789654f43dbc2bd602", "bugFilePath": "src/main/java/org/jsoup/helper/HttpConnection.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex 17459f7..5502106 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -286,7 +286,7 @@\n         }\n \n         public String cookie(String name) {\n-            Validate.notNull(name, \"Cookie name must not be null\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }\n \n@@ -298,12 +298,12 @@\n         }\n \n         public boolean hasCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n \n         public T removeCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }\n", "projectName": "jhy.jsoup", "bugLineNum": 301, "bugNodeStartChar": 8967, "bugNodeLength": 50, "fixLineNum": 301, "fixNodeStartChar": 8967, "fixNodeLength": 56, "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "333a6469ffec02354a56d1a5eb5867dc16da58a0", "fixCommitParentSHA1": "f50042980dda4e8521f05d789654f43dbc2bd602", "bugFilePath": "src/main/java/org/jsoup/helper/HttpConnection.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex 17459f7..5502106 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -286,7 +286,7 @@\n         }\n \n         public String cookie(String name) {\n-            Validate.notNull(name, \"Cookie name must not be null\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }\n \n@@ -298,12 +298,12 @@\n         }\n \n         public boolean hasCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n \n         public T removeCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }\n", "projectName": "jhy.jsoup", "bugLineNum": 306, "bugNodeStartChar": 9133, "bugNodeLength": 50, "fixLineNum": 306, "fixNodeStartChar": 9133, "fixNodeLength": 56, "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "627efb94e9ec8bcf09829fb8be5cbc4f4334fceb", "fixCommitParentSHA1": "bb16e0693819afb821bce6943d8cbd178266a63e", "bugFilePath": "src/main/java/org/jsoup/safety/Whitelist.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/safety/Whitelist.java b/src/main/java/org/jsoup/safety/Whitelist.java\nindex 6340c10..a0ff66b 100644\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n@@ -77,7 +77,7 @@\n \n     /**\n      This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,\n-     ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n+     ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n      <p/>\n      Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced\n      <code>rel=nofollow</code> attribute.\n@@ -90,7 +90,7 @@\n         return new Whitelist()\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n-                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n+                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\", \"sub\",\n                         \"sup\", \"u\", \"ul\")\n \n                 .addAttributes(\"a\", \"href\")\n@@ -122,7 +122,7 @@\n \n     /**\n      This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,\n-     code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,\n+     code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,\n      sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>\n      <p/>\n      Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.\n@@ -134,7 +134,7 @@\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                         \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n-                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n+                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\",\n                         \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                         \"ul\")\n \n", "projectName": "jhy.jsoup", "bugLineNum": 90, "bugNodeStartChar": 3220, "bugNodeLength": 271, "fixLineNum": 90, "fixNodeStartChar": 3220, "fixNodeLength": 279, "sourceBeforeFix": "new Whitelist().addTags(\"a\",\"b\",\"blockquote\",\"br\",\"cite\",\"code\",\"dd\",\"dl\",\"dt\",\"em\",\"i\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"small\",\"strike\",\"strong\",\"sub\",\"sup\",\"u\",\"ul\")", "sourceAfterFix": "new Whitelist().addTags(\"a\",\"b\",\"blockquote\",\"br\",\"cite\",\"code\",\"dd\",\"dl\",\"dt\",\"em\",\"i\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"small\",\"span\",\"strike\",\"strong\",\"sub\",\"sup\",\"u\",\"ul\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "627efb94e9ec8bcf09829fb8be5cbc4f4334fceb", "fixCommitParentSHA1": "bb16e0693819afb821bce6943d8cbd178266a63e", "bugFilePath": "src/main/java/org/jsoup/safety/Whitelist.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/safety/Whitelist.java b/src/main/java/org/jsoup/safety/Whitelist.java\nindex 6340c10..a0ff66b 100644\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n@@ -77,7 +77,7 @@\n \n     /**\n      This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,\n-     ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n+     ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n      <p/>\n      Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced\n      <code>rel=nofollow</code> attribute.\n@@ -90,7 +90,7 @@\n         return new Whitelist()\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n-                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n+                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\", \"sub\",\n                         \"sup\", \"u\", \"ul\")\n \n                 .addAttributes(\"a\", \"href\")\n@@ -122,7 +122,7 @@\n \n     /**\n      This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,\n-     code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,\n+     code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,\n      sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>\n      <p/>\n      Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.\n@@ -134,7 +134,7 @@\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                         \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n-                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n+                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\",\n                         \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                         \"ul\")\n \n", "projectName": "jhy.jsoup", "bugLineNum": 133, "bugNodeStartChar": 4975, "bugNodeLength": 453, "fixLineNum": 133, "fixNodeStartChar": 4975, "fixNodeLength": 461, "sourceBeforeFix": "new Whitelist().addTags(\"a\",\"b\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"col\",\"colgroup\",\"dd\",\"div\",\"dl\",\"dt\",\"em\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"i\",\"img\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"small\",\"strike\",\"strong\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"u\",\"ul\")", "sourceAfterFix": "new Whitelist().addTags(\"a\",\"b\",\"blockquote\",\"br\",\"caption\",\"cite\",\"code\",\"col\",\"colgroup\",\"dd\",\"div\",\"dl\",\"dt\",\"em\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"i\",\"img\",\"li\",\"ol\",\"p\",\"pre\",\"q\",\"small\",\"span\",\"strike\",\"strong\",\"sub\",\"sup\",\"table\",\"tbody\",\"td\",\"tfoot\",\"th\",\"thead\",\"tr\",\"u\",\"ul\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "311d2e7e7123814364907b65143117efc3ddf92d", "fixCommitParentSHA1": "80158d6fa7445506eaaafdeadb1f4dc291ca10a5", "bugFilePath": "src/main/java/org/jsoup/helper/HttpConnection.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex 4940470..d756338 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -283,7 +283,7 @@\n         }\n \n         public String cookie(String name) {\n-            Validate.notNull(name, \"Cookie name must not be null\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }\n \n@@ -295,12 +295,12 @@\n         }\n \n         public boolean hasCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n \n         public T removeCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }\n", "projectName": "jhy.jsoup", "bugLineNum": 298, "bugNodeStartChar": 8832, "bugNodeLength": 50, "fixLineNum": 298, "fixNodeStartChar": 8832, "fixNodeLength": 56, "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "311d2e7e7123814364907b65143117efc3ddf92d", "fixCommitParentSHA1": "80158d6fa7445506eaaafdeadb1f4dc291ca10a5", "bugFilePath": "src/main/java/org/jsoup/helper/HttpConnection.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java\nindex 4940470..d756338 100644\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n@@ -283,7 +283,7 @@\n         }\n \n         public String cookie(String name) {\n-            Validate.notNull(name, \"Cookie name must not be null\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }\n \n@@ -295,12 +295,12 @@\n         }\n \n         public boolean hasCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n \n         public T removeCookie(String name) {\n-            Validate.notEmpty(\"Cookie name must not be empty\");\n+            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }\n", "projectName": "jhy.jsoup", "bugLineNum": 303, "bugNodeStartChar": 8998, "bugNodeLength": 50, "fixLineNum": 303, "fixNodeStartChar": 8998, "fixNodeLength": 56, "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3cb4cee19e3cb6830735a0f89d890576c7413f2c", "fixCommitParentSHA1": "caf61a4a0778a72ab713f72e9ef749bf373c98ac", "bugFilePath": "src/main/java/org/jsoup/safety/Whitelist.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/safety/Whitelist.java b/src/main/java/org/jsoup/safety/Whitelist.java\nindex 2c1150c..7908c2c 100644\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n@@ -319,10 +319,22 @@\n         return this;\n     }\n \n-    boolean isSafeTag(String tag) {\n+    /**\n+     * Test if the supplied tag is allowed by this whitelist\n+     * @param tag test tag\n+     * @return true if allowed\n+     */\n+    protected boolean isSafeTag(String tag) {\n         return tagNames.contains(TagName.valueOf(tag));\n     }\n \n+    /**\n+     * Test if the supplied attribute is allowed by this whitelist for this tag\n+     * @param tagName tag to consider allowing the attribute in\n+     * @param el element under test, to confirm protocol\n+     * @param attr attribute under test\n+     * @return true if allowed\n+     */\n     boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n         TagName tag = TagName.valueOf(tagName);\n         AttributeKey key = AttributeKey.valueOf(attr.getKey());\n", "projectName": "jhy.jsoup", "bugLineNum": 322, "bugNodeStartChar": 12753, "bugNodeLength": 93, "fixLineNum": 322, "fixNodeStartChar": 12753, "fixNodeLength": 238, "sourceBeforeFix": "0", "sourceAfterFix": "4"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "398f9cf93414253c216585efdfca3b9f73f90d74", "fixCommitParentSHA1": "c75e9cc85d596ff08ae858da3c61d55e717607d1", "bugFilePath": "src/main/java/org/jsoup/helper/DataUtil.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java\nindex a4d4f51..94d3ab1 100644\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n@@ -96,7 +96,7 @@\n             // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n             // into head mode\n-            if (docData.charAt(0) == 65279)\n+            if (docData.length() > 0 && docData.charAt(0) == 65279)\n                 docData = docData.substring(1);\n \n             doc = parser.parseInput(docData, baseUri);\n", "projectName": "jhy.jsoup", "bugLineNum": 99, "bugNodeStartChar": 4642, "bugNodeLength": 26, "fixLineNum": 99, "fixNodeStartChar": 4642, "fixNodeLength": 50, "sourceBeforeFix": "docData.charAt(0) == 65279", "sourceAfterFix": "docData.length() > 0 && docData.charAt(0) == 65279"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "7fe868089855c33d6345e740bfdbe6f140794598", "fixCommitParentSHA1": "7b47828bc2cf749edfb0f75e370f168c6b1be210", "bugFilePath": "src/main/java/org/jsoup/parser/TreeBuilderState.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/parser/TreeBuilderState.java b/src/main/java/org/jsoup/parser/TreeBuilderState.java\nindex e82eed5..4ae01e1 100644\n--- a/src/main/java/org/jsoup/parser/TreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilderState.java\n@@ -280,7 +280,7 @@\n                             if (!html.hasAttr(attribute.getKey()))\n                                 html.attributes().put(attribute);\n                         }\n-                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n+                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                         return tb.process(t, InHead);\n                     } else if (name.equals(\"body\")) {\n                         tb.error(this);\n", "projectName": "jhy.jsoup", "bugLineNum": 283, "bugNodeStartChar": 11633, "bugNodeLength": 107, "fixLineNum": 283, "fixNodeStartChar": 11633, "fixNodeLength": 117, "sourceBeforeFix": "StringUtil.in(name,\"base\",\"basefont\",\"bgsound\",\"command\",\"link\",\"meta\",\"noframes\",\"style\",\"title\")", "sourceAfterFix": "StringUtil.in(name,\"base\",\"basefont\",\"bgsound\",\"command\",\"link\",\"meta\",\"noframes\",\"script\",\"style\",\"title\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "170c25f964066982cc0ce7cb5d9084d4b0dc4227", "fixCommitParentSHA1": "073d9734451738985650074bee2ab45cb395fbb7", "bugFilePath": "src/main/java/org/jsoup/select/ng/ElementSelector.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/select/ng/ElementSelector.java b/src/main/java/org/jsoup/select/ng/ElementSelector.java\nindex 5b2f016..c56be7b 100644\n--- a/src/main/java/org/jsoup/select/ng/ElementSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/ElementSelector.java\n@@ -28,7 +28,8 @@\n \t\t\tif(tag != null && !el.tagName().equals(tag))\n \t\t\t\treturn false;\n \t\t\t\n-\t\t\tif(cls != null && !el.className().equals(cls))\n+\t\t\t\n+\t\t\tif(cls != null && !el.classNames().contains(cls))\n \t\t\t\treturn false;\n \t\t\t\n \t\t\tif(id != null && !el.id().equals(id))\n", "projectName": "jhy.jsoup", "bugLineNum": 31, "bugNodeStartChar": 551, "bugNodeLength": 14, "fixLineNum": 32, "fixNodeStartChar": 555, "fixNodeLength": 15, "sourceBeforeFix": "el.className()", "sourceAfterFix": "el.classNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "170c25f964066982cc0ce7cb5d9084d4b0dc4227", "fixCommitParentSHA1": "073d9734451738985650074bee2ab45cb395fbb7", "bugFilePath": "src/main/java/org/jsoup/select/ng/ElementSelector.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/select/ng/ElementSelector.java b/src/main/java/org/jsoup/select/ng/ElementSelector.java\nindex 5b2f016..c56be7b 100644\n--- a/src/main/java/org/jsoup/select/ng/ElementSelector.java\n+++ b/src/main/java/org/jsoup/select/ng/ElementSelector.java\n@@ -28,7 +28,8 @@\n \t\t\tif(tag != null && !el.tagName().equals(tag))\n \t\t\t\treturn false;\n \t\t\t\n-\t\t\tif(cls != null && !el.className().equals(cls))\n+\t\t\t\n+\t\t\tif(cls != null && !el.classNames().contains(cls))\n \t\t\t\treturn false;\n \t\t\t\n \t\t\tif(id != null && !el.id().equals(id))\n", "projectName": "jhy.jsoup", "bugLineNum": 31, "bugNodeStartChar": 551, "bugNodeLength": 14, "fixLineNum": 32, "fixNodeStartChar": 555, "fixNodeLength": 15, "sourceBeforeFix": "el.className()", "sourceAfterFix": "el.classNames()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "b8b73080085bed3b2062e1a90ed940056997a0ff", "fixCommitParentSHA1": "ce691239d40e469b75fa22b0bb6a065202c475a7", "bugFilePath": "src/main/java/org/jsoup/parser/Tag.java", "fixPatch": "diff --git a/src/main/java/org/jsoup/parser/Tag.java b/src/main/java/org/jsoup/parser/Tag.java\nindex 28e3213..43d6c49 100644\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n@@ -83,11 +83,10 @@\n             return false;\n \n         // head can only contain a few. if more than head in here, modify to have a list of valids\n-        // TODO[must] - lookup what head can contain\n-        // from memory: base, script, link, meta, title\n+        // (could solve this with walk for ancestor)\n         if (this.tagName.equals(\"head\")) {\n             if (child.tagName.equals(\"base\") || child.tagName.equals(\"script\") || child.tagName.equals(\"link\") ||\n-                    child.tagName.equals(\"meta\") || child.tagName.equals(\"title\")) {\n+                    child.tagName.equals(\"meta\") || child.tagName.equals(\"title\") || child.tagName.equals(\"style\") || child.tagName.equals(\"object\")) {\n                 return true;\n             }\n             return false;\n", "projectName": "jhy.jsoup", "bugLineNum": 89, "bugNodeStartChar": 3174, "bugNodeLength": 179, "fixLineNum": 89, "fixNodeStartChar": 3174, "fixNodeLength": 246, "sourceBeforeFix": "child.tagName.equals(\"base\") || child.tagName.equals(\"script\") || child.tagName.equals(\"link\")|| child.tagName.equals(\"meta\")|| child.tagName.equals(\"title\")", "sourceAfterFix": "child.tagName.equals(\"base\") || child.tagName.equals(\"script\") || child.tagName.equals(\"link\")|| child.tagName.equals(\"meta\")|| child.tagName.equals(\"title\")|| child.tagName.equals(\"style\")|| child.tagName.equals(\"object\")"}]