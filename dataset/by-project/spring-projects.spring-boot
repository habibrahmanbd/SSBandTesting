[
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 74,
    "bugNodeStartChar": 3665,
    "bugNodeLength": 32,
    "fixLineNum": 74,
    "fixNodeStartChar": 3665,
    "fixNodeLength": 26,
    "sourceBeforeFix": "messageHandler.serverResponder()",
    "sourceAfterFix": "messageHandler.responder()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 74,
    "bugNodeStartChar": 3665,
    "bugNodeLength": 32,
    "fixLineNum": 74,
    "fixNodeStartChar": 3665,
    "fixNodeLength": 26,
    "sourceBeforeFix": "messageHandler.serverResponder()",
    "sourceAfterFix": "messageHandler.responder()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 107,
    "bugNodeStartChar": 4974,
    "bugNodeLength": 39,
    "fixLineNum": 107,
    "fixNodeStartChar": 4974,
    "fixNodeLength": 33,
    "sourceBeforeFix": "rSocketMessageHandler.serverResponder()",
    "sourceAfterFix": "rSocketMessageHandler.responder()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 107,
    "bugNodeStartChar": 4974,
    "bugNodeLength": 39,
    "fixLineNum": 107,
    "fixNodeStartChar": 4974,
    "fixNodeLength": 33,
    "sourceBeforeFix": "rSocketMessageHandler.serverResponder()",
    "sourceAfterFix": "rSocketMessageHandler.responder()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 74,
    "bugNodeStartChar": 3665,
    "bugNodeLength": 32,
    "fixLineNum": 74,
    "fixNodeStartChar": 3665,
    "fixNodeLength": 26,
    "sourceBeforeFix": "messageHandler.serverResponder()",
    "sourceAfterFix": "messageHandler.responder()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 74,
    "bugNodeStartChar": 3665,
    "bugNodeLength": 32,
    "fixLineNum": 74,
    "fixNodeStartChar": 3665,
    "fixNodeLength": 26,
    "sourceBeforeFix": "messageHandler.serverResponder()",
    "sourceAfterFix": "messageHandler.responder()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 107,
    "bugNodeStartChar": 4974,
    "bugNodeLength": 39,
    "fixLineNum": 107,
    "fixNodeStartChar": 4974,
    "fixNodeLength": 33,
    "sourceBeforeFix": "rSocketMessageHandler.serverResponder()",
    "sourceAfterFix": "rSocketMessageHandler.responder()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8",
    "fixCommitParentSHA1": "c44a6dee3d0bf523339972715f752e878e2b346a",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex 3df1e33..34bf6b6 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -71,7 +71,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverResponder());\n+\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \n \t}\n@@ -104,7 +104,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.responder());\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 107,
    "bugNodeStartChar": 4974,
    "bugNodeLength": 39,
    "fixLineNum": 107,
    "fixNodeStartChar": 4974,
    "fixNodeLength": 33,
    "sourceBeforeFix": "rSocketMessageHandler.serverResponder()",
    "sourceAfterFix": "rSocketMessageHandler.responder()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3",
    "fixCommitParentSHA1": "b69f9e9fdf52d231cc7b4a2438fca667af383bdb",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\nindex 5cf9afd..d3c819c 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n@@ -63,6 +63,7 @@\n  * @author Stephane Nicoll\n  * @author Dominic Gunn\n  * @author Andr\u00e1s De\u00e1k\n+ * @author Andrii Hrytsiuk\n  */\n public class LiquibaseAutoConfigurationTests {\n \n@@ -303,7 +304,7 @@\n \t}\n \n \t@Test\n-\tvoid userConfigurationBeans() {\n+\tpublic void userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {\n@@ -313,7 +314,7 @@\n \t}\n \n \t@Test\n-\tvoid userConfigurationJdbcTemplateDependency() {\n+\tpublic void userConfigurationJdbcTemplateDependency() {\n \t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class))\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 305,
    "bugNodeStartChar": 13090,
    "bugNodeLength": 302,
    "fixLineNum": 305,
    "fixNodeStartChar": 13090,
    "fixNodeLength": 309,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3",
    "fixCommitParentSHA1": "b69f9e9fdf52d231cc7b4a2438fca667af383bdb",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\nindex 5cf9afd..d3c819c 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n@@ -63,6 +63,7 @@\n  * @author Stephane Nicoll\n  * @author Dominic Gunn\n  * @author Andr\u00e1s De\u00e1k\n+ * @author Andrii Hrytsiuk\n  */\n public class LiquibaseAutoConfigurationTests {\n \n@@ -303,7 +304,7 @@\n \t}\n \n \t@Test\n-\tvoid userConfigurationBeans() {\n+\tpublic void userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {\n@@ -313,7 +314,7 @@\n \t}\n \n \t@Test\n-\tvoid userConfigurationJdbcTemplateDependency() {\n+\tpublic void userConfigurationJdbcTemplateDependency() {\n \t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class))\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 315,
    "bugNodeStartChar": 13395,
    "bugNodeLength": 469,
    "fixLineNum": 315,
    "fixNodeStartChar": 13395,
    "fixNodeLength": 476,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1ec8e822a17c37826b0a5df3b79ca03b4b528f1c",
    "fixCommitParentSHA1": "a76aaabc0773106e73d25574922888a42c9aa5dc",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\nindex 735f27b..dd75a65 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n@@ -46,7 +46,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n+\t\tpublic RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n \t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n \t\t\tRestClientBuilder builder = RestClient.builder(hosts);\n@@ -71,13 +71,13 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n+\t\tpublic RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n \t\t\treturn new RestHighLevelClient(restClientBuilder);\n \t\t}\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n \t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n \t\t\tif (client != null) {\n \t\t\t\treturn client.getLowLevelClient();\n@@ -92,7 +92,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder) {\n \t\t\treturn builder.build();\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 47,
    "bugNodeStartChar": 1740,
    "bugNodeLength": 980,
    "fixLineNum": 47,
    "fixNodeStartChar": 1740,
    "fixNodeLength": 987,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1ec8e822a17c37826b0a5df3b79ca03b4b528f1c",
    "fixCommitParentSHA1": "a76aaabc0773106e73d25574922888a42c9aa5dc",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\nindex 735f27b..dd75a65 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n@@ -46,7 +46,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n+\t\tpublic RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n \t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n \t\t\tRestClientBuilder builder = RestClient.builder(hosts);\n@@ -71,13 +71,13 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n+\t\tpublic RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n \t\t\treturn new RestHighLevelClient(restClientBuilder);\n \t\t}\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n \t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n \t\t\tif (client != null) {\n \t\t\t\treturn client.getLowLevelClient();\n@@ -92,7 +92,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder) {\n \t\t\treturn builder.build();\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 72,
    "bugNodeStartChar": 2842,
    "bugNodeLength": 172,
    "fixLineNum": 72,
    "fixNodeStartChar": 2842,
    "fixNodeLength": 179,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1ec8e822a17c37826b0a5df3b79ca03b4b528f1c",
    "fixCommitParentSHA1": "a76aaabc0773106e73d25574922888a42c9aa5dc",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\nindex 735f27b..dd75a65 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n@@ -46,7 +46,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n+\t\tpublic RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n \t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n \t\t\tRestClientBuilder builder = RestClient.builder(hosts);\n@@ -71,13 +71,13 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n+\t\tpublic RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n \t\t\treturn new RestHighLevelClient(restClientBuilder);\n \t\t}\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n \t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n \t\t\tif (client != null) {\n \t\t\t\treturn client.getLowLevelClient();\n@@ -92,7 +92,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder) {\n \t\t\treturn builder.build();\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 3018,
    "bugNodeLength": 310,
    "fixLineNum": 78,
    "fixNodeStartChar": 3018,
    "fixNodeLength": 317,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1ec8e822a17c37826b0a5df3b79ca03b4b528f1c",
    "fixCommitParentSHA1": "a76aaabc0773106e73d25574922888a42c9aa5dc",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\nindex 735f27b..dd75a65 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientConfigurations.java\n@@ -46,7 +46,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClientBuilder restClientBuilder(RestClientProperties properties,\n+\t\tpublic RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t\t\tObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {\n \t\t\tHttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new);\n \t\t\tRestClientBuilder builder = RestClient.builder(hosts);\n@@ -71,13 +71,13 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n+\t\tpublic RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {\n \t\t\treturn new RestHighLevelClient(restClientBuilder);\n \t\t}\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder, ObjectProvider<RestHighLevelClient> restHighLevelClient) {\n \t\t\tRestHighLevelClient client = restHighLevelClient.getIfUnique();\n \t\t\tif (client != null) {\n \t\t\t\treturn client.getLowLevelClient();\n@@ -92,7 +92,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tRestClient restClient(RestClientBuilder builder) {\n+\t\tpublic RestClient restClient(RestClientBuilder builder) {\n \t\t\treturn builder.build();\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 93,
    "bugNodeStartChar": 3401,
    "bugNodeLength": 117,
    "fixLineNum": 93,
    "fixNodeStartChar": 3401,
    "fixNodeLength": 124,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "b6754f6f20ef786da0ecb542fe8b14bc01b88d62",
    "fixCommitParentSHA1": "805264a13c85bce225c67367fbec51bd64565e65",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java\nindex dc8ea64..1efdbdf 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveUserDetailsServiceAutoConfigurationTests.java\n@@ -78,8 +78,7 @@\n \n \t@Test\n \tvoid doesNotConfigureDefaultUserIfResourceServerWithJWTIsUsed() {\n-\t\tthis.contextRunner.withUserConfiguration(TestSecurityConfiguration.class, JwtDecoderConfiguration.class)\n-\t\t\t\t.run((context) -> {\n+\t\tthis.contextRunner.withUserConfiguration(JwtDecoderConfiguration.class).run((context) -> {\n \t\t\t\t\tassertThat(context).hasSingleBean(ReactiveJwtDecoder.class);\n \t\t\t\t\tassertThat(context).doesNotHaveBean(ReactiveUserDetailsService.class);\n \t\t\t\t});\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 81,
    "bugNodeStartChar": 3828,
    "bugNodeLength": 104,
    "fixLineNum": 81,
    "fixNodeStartChar": 3828,
    "fixNodeLength": 71,
    "sourceBeforeFix": "this.contextRunner.withUserConfiguration(TestSecurityConfiguration.class,JwtDecoderConfiguration.class)",
    "sourceAfterFix": "this.contextRunner.withUserConfiguration(JwtDecoderConfiguration.class)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b7ceb6548fc986277173ca79065914877f1cc007",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\nindex 5fba037..548d8fe 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -78,8 +78,9 @@\n \n \t@Override\n \tpublic Mono<Health> health() {\n-\t\treturn Flux.fromIterable(this.registry.getAll().entrySet()).flatMap(\n-\t\t\t\t(entry) -> Mono.zip(Mono.just(entry.getKey()), entry.getValue().health().compose(this.timeoutCompose)))\n+\t\treturn Flux.fromIterable(this.registry.getAll().entrySet())\n+\t\t\t\t.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),\n+\t\t\t\t\t\tentry.getValue().health().transformDeferred(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 82,
    "bugNodeStartChar": 2860,
    "bugNodeLength": 54,
    "fixLineNum": 83,
    "fixNodeStartChar": 2866,
    "fixNodeLength": 64,
    "sourceBeforeFix": "entry.getValue().health().compose(this.timeoutCompose)",
    "sourceAfterFix": "entry.getValue().health().transformDeferred(this.timeoutCompose)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b7ceb6548fc986277173ca79065914877f1cc007",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\nindex 5fba037..548d8fe 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -78,8 +78,9 @@\n \n \t@Override\n \tpublic Mono<Health> health() {\n-\t\treturn Flux.fromIterable(this.registry.getAll().entrySet()).flatMap(\n-\t\t\t\t(entry) -> Mono.zip(Mono.just(entry.getKey()), entry.getValue().health().compose(this.timeoutCompose)))\n+\t\treturn Flux.fromIterable(this.registry.getAll().entrySet())\n+\t\t\t\t.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),\n+\t\t\t\t\t\tentry.getValue().health().transformDeferred(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 82,
    "bugNodeStartChar": 2860,
    "bugNodeLength": 54,
    "fixLineNum": 83,
    "fixNodeStartChar": 2866,
    "fixNodeLength": 64,
    "sourceBeforeFix": "entry.getValue().health().compose(this.timeoutCompose)",
    "sourceAfterFix": "entry.getValue().health().transformDeferred(this.timeoutCompose)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b7ceb6548fc986277173ca79065914877f1cc007",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\nindex b70d337..faf21eb 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n@@ -85,7 +85,7 @@\n \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n-\t\treturn chain.filter(exchange).compose((call) -> filter(exchange, call));\n+\t\treturn chain.filter(exchange).transformDeferred((call) -> filter(exchange, call));\n \t}\n \n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 88,
    "bugNodeStartChar": 3103,
    "bugNodeLength": 64,
    "fixLineNum": 88,
    "fixNodeStartChar": 3103,
    "fixNodeLength": 74,
    "sourceBeforeFix": "chain.filter(exchange).compose((call) -> filter(exchange,call))",
    "sourceAfterFix": "chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b7ceb6548fc986277173ca79065914877f1cc007",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\nindex b70d337..faf21eb 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n@@ -85,7 +85,7 @@\n \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n-\t\treturn chain.filter(exchange).compose((call) -> filter(exchange, call));\n+\t\treturn chain.filter(exchange).transformDeferred((call) -> filter(exchange, call));\n \t}\n \n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 88,
    "bugNodeStartChar": 3103,
    "bugNodeLength": 64,
    "fixLineNum": 88,
    "fixNodeStartChar": 3103,
    "fixNodeLength": 74,
    "sourceBeforeFix": "chain.filter(exchange).compose((call) -> filter(exchange,call))",
    "sourceAfterFix": "chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "eb9527a17038c6a44b4e1afa1fd82eb195baacb8",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\nindex 5fba037..548d8fe 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -78,8 +78,9 @@\n \n \t@Override\n \tpublic Mono<Health> health() {\n-\t\treturn Flux.fromIterable(this.registry.getAll().entrySet()).flatMap(\n-\t\t\t\t(entry) -> Mono.zip(Mono.just(entry.getKey()), entry.getValue().health().compose(this.timeoutCompose)))\n+\t\treturn Flux.fromIterable(this.registry.getAll().entrySet())\n+\t\t\t\t.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),\n+\t\t\t\t\t\tentry.getValue().health().transformDeferred(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 82,
    "bugNodeStartChar": 2860,
    "bugNodeLength": 54,
    "fixLineNum": 83,
    "fixNodeStartChar": 2866,
    "fixNodeLength": 64,
    "sourceBeforeFix": "entry.getValue().health().compose(this.timeoutCompose)",
    "sourceAfterFix": "entry.getValue().health().transformDeferred(this.timeoutCompose)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "eb9527a17038c6a44b4e1afa1fd82eb195baacb8",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\nindex 5fba037..548d8fe 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -78,8 +78,9 @@\n \n \t@Override\n \tpublic Mono<Health> health() {\n-\t\treturn Flux.fromIterable(this.registry.getAll().entrySet()).flatMap(\n-\t\t\t\t(entry) -> Mono.zip(Mono.just(entry.getKey()), entry.getValue().health().compose(this.timeoutCompose)))\n+\t\treturn Flux.fromIterable(this.registry.getAll().entrySet())\n+\t\t\t\t.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),\n+\t\t\t\t\t\tentry.getValue().health().transformDeferred(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 82,
    "bugNodeStartChar": 2860,
    "bugNodeLength": 54,
    "fixLineNum": 83,
    "fixNodeStartChar": 2866,
    "fixNodeLength": 64,
    "sourceBeforeFix": "entry.getValue().health().compose(this.timeoutCompose)",
    "sourceAfterFix": "entry.getValue().health().transformDeferred(this.timeoutCompose)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "eb9527a17038c6a44b4e1afa1fd82eb195baacb8",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\nindex b70d337..faf21eb 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n@@ -85,7 +85,7 @@\n \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n-\t\treturn chain.filter(exchange).compose((call) -> filter(exchange, call));\n+\t\treturn chain.filter(exchange).transformDeferred((call) -> filter(exchange, call));\n \t}\n \n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 88,
    "bugNodeStartChar": 3103,
    "bugNodeLength": 64,
    "fixLineNum": 88,
    "fixNodeStartChar": 3103,
    "fixNodeLength": 74,
    "sourceBeforeFix": "chain.filter(exchange).compose((call) -> filter(exchange,call))",
    "sourceAfterFix": "chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "eb9527a17038c6a44b4e1afa1fd82eb195baacb8",
    "fixCommitParentSHA1": "858199a2fa14f835369ede30deb3de7fdfcc98c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\nindex b70d337..faf21eb 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n@@ -85,7 +85,7 @@\n \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n-\t\treturn chain.filter(exchange).compose((call) -> filter(exchange, call));\n+\t\treturn chain.filter(exchange).transformDeferred((call) -> filter(exchange, call));\n \t}\n \n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 88,
    "bugNodeStartChar": 3103,
    "bugNodeLength": 64,
    "fixLineNum": 88,
    "fixNodeStartChar": 3103,
    "fixNodeLength": 74,
    "sourceBeforeFix": "chain.filter(exchange).compose((call) -> filter(exchange,call))",
    "sourceAfterFix": "chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8",
    "fixCommitParentSHA1": "73cd1c9c772a4618c64160f6df24b96c74f51d9d",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex ad8a11f..27aaa43 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -69,7 +69,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverAcceptor());\n+\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \n \t}\n@@ -101,7 +101,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 72,
    "bugNodeStartChar": 3551,
    "bugNodeLength": 31,
    "fixLineNum": 72,
    "fixNodeStartChar": 3551,
    "fixNodeLength": 32,
    "sourceBeforeFix": "messageHandler.serverAcceptor()",
    "sourceAfterFix": "messageHandler.serverResponder()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8",
    "fixCommitParentSHA1": "73cd1c9c772a4618c64160f6df24b96c74f51d9d",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex ad8a11f..27aaa43 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -69,7 +69,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverAcceptor());\n+\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \n \t}\n@@ -101,7 +101,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 72,
    "bugNodeStartChar": 3551,
    "bugNodeLength": 31,
    "fixLineNum": 72,
    "fixNodeStartChar": 3551,
    "fixNodeLength": 32,
    "sourceBeforeFix": "messageHandler.serverAcceptor()",
    "sourceAfterFix": "messageHandler.serverResponder()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8",
    "fixCommitParentSHA1": "73cd1c9c772a4618c64160f6df24b96c74f51d9d",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex ad8a11f..27aaa43 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -69,7 +69,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverAcceptor());\n+\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \n \t}\n@@ -101,7 +101,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 104,
    "bugNodeStartChar": 4795,
    "bugNodeLength": 38,
    "fixLineNum": 104,
    "fixNodeStartChar": 4795,
    "fixNodeLength": 39,
    "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()",
    "sourceAfterFix": "rSocketMessageHandler.serverResponder()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8",
    "fixCommitParentSHA1": "73cd1c9c772a4618c64160f6df24b96c74f51d9d",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\nindex ad8a11f..27aaa43 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -69,7 +69,7 @@\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverAcceptor());\n+\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \n \t}\n@@ -101,7 +101,7 @@\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 104,
    "bugNodeStartChar": 4795,
    "bugNodeLength": 38,
    "fixLineNum": 104,
    "fixNodeStartChar": 4795,
    "fixNodeLength": 39,
    "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()",
    "sourceAfterFix": "rSocketMessageHandler.serverResponder()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4083c721f2ee2ce54c624488a49ed08f7c3b3c39",
    "fixCommitParentSHA1": "3bbe723718fc82528d5d7ac5154ca90ddd7989a3",
    "bugFilePath": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\nindex e6a7b59..6829eca 100644\n--- a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n@@ -51,7 +51,7 @@\n \n \tprivate static final String CURRENT_DIR = \"/./\";\n \n-\tprivate static final Pattern CURRENT_DIR_PATTERN = Pattern.compile(CURRENT_DIR);\n+\tprivate static final Pattern CURRENT_DIR_PATTERN = Pattern.compile(CURRENT_DIR, Pattern.LITERAL);\n \n \tprivate static final String PARENT_DIR = \"/../\";\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 54,
    "bugNodeStartChar": 1717,
    "bugNodeLength": 28,
    "fixLineNum": 54,
    "fixNodeStartChar": 1717,
    "fixNodeLength": 45,
    "sourceBeforeFix": "Pattern.compile(CURRENT_DIR)",
    "sourceAfterFix": "Pattern.compile(CURRENT_DIR,Pattern.LITERAL)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "f4d9e1c650ee6988bcd1807aaf02b74e3779358b",
    "fixCommitParentSHA1": "69fbd8f20c7c7650faf8656acf0857baeb45b8fc",
    "bugFilePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\nindex 2ef680e..b96c581 100644\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n@@ -197,12 +197,12 @@\n \t}\n \n \t@Test\n-\tpublic void whenWhenValueNotMatchesShouldSupportChainedCalls() {\n+\tvoid whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \n \t@Test\n-\tpublic void whenWhenValueMatchesShouldSupportChainedCalls() {\n+\tvoid whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 199,
    "bugNodeStartChar": 5926,
    "bugNodeLength": 163,
    "fixLineNum": 199,
    "fixNodeStartChar": 5926,
    "fixNodeLength": 156,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "f4d9e1c650ee6988bcd1807aaf02b74e3779358b",
    "fixCommitParentSHA1": "69fbd8f20c7c7650faf8656acf0857baeb45b8fc",
    "bugFilePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\nindex 2ef680e..b96c581 100644\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n@@ -197,12 +197,12 @@\n \t}\n \n \t@Test\n-\tpublic void whenWhenValueNotMatchesShouldSupportChainedCalls() {\n+\tvoid whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \n \t@Test\n-\tpublic void whenWhenValueMatchesShouldSupportChainedCalls() {\n+\tvoid whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 204,
    "bugNodeStartChar": 6092,
    "bugNodeLength": 223,
    "fixLineNum": 204,
    "fixNodeStartChar": 6092,
    "fixNodeLength": 216,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\nindex ed2949f..491b5d5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -41,7 +41,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1087,
    "bugNodeLength": 350,
    "fixLineNum": 34,
    "fixNodeStartChar": 1087,
    "fixNodeLength": 343,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\nindex ed2949f..491b5d5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -41,7 +41,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 43,
    "bugNodeStartChar": 1440,
    "bugNodeLength": 375,
    "fixLineNum": 43,
    "fixNodeStartChar": 1440,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 40,
    "bugNodeStartChar": 1257,
    "bugNodeLength": 310,
    "fixLineNum": 40,
    "fixNodeStartChar": 1257,
    "fixNodeLength": 303,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 48,
    "bugNodeStartChar": 1570,
    "bugNodeLength": 375,
    "fixLineNum": 48,
    "fixNodeStartChar": 1570,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 57,
    "bugNodeStartChar": 1948,
    "bugNodeLength": 216,
    "fixLineNum": 57,
    "fixNodeStartChar": 1948,
    "fixNodeLength": 209,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 62,
    "bugNodeStartChar": 2167,
    "bugNodeLength": 229,
    "fixLineNum": 62,
    "fixNodeStartChar": 2167,
    "fixNodeLength": 222,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 68,
    "bugNodeStartChar": 2399,
    "bugNodeLength": 212,
    "fixLineNum": 68,
    "fixNodeStartChar": 2399,
    "fixNodeLength": 205,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2614,
    "bugNodeLength": 208,
    "fixLineNum": 73,
    "fixNodeStartChar": 2614,
    "fixNodeLength": 201,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 2825,
    "bugNodeLength": 221,
    "fixLineNum": 78,
    "fixNodeStartChar": 2825,
    "fixNodeLength": 214,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 84,
    "bugNodeStartChar": 3049,
    "bugNodeLength": 204,
    "fixLineNum": 84,
    "fixNodeStartChar": 3049,
    "fixNodeLength": 197,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\nindex dfc5061..cb9acd5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1079,
    "bugNodeLength": 323,
    "fixLineNum": 34,
    "fixNodeStartChar": 1079,
    "fixNodeLength": 316,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\nindex dfc5061..cb9acd5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1405,
    "bugNodeLength": 375,
    "fixLineNum": 42,
    "fixNodeStartChar": 1405,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\nindex af7a3fa..001ffe6 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1083,
    "bugNodeLength": 323,
    "fixLineNum": 34,
    "fixNodeStartChar": 1083,
    "fixNodeLength": 316,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\nindex af7a3fa..001ffe6 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1409,
    "bugNodeLength": 375,
    "fixLineNum": 42,
    "fixNodeStartChar": 1409,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\nindex 3fbeac5..64b2ca4 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1075,
    "bugNodeLength": 323,
    "fixLineNum": 34,
    "fixNodeStartChar": 1075,
    "fixNodeLength": 316,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\nindex 3fbeac5..64b2ca4 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1401,
    "bugNodeLength": 375,
    "fixLineNum": 42,
    "fixNodeStartChar": 1401,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\nindex ed2949f..491b5d5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -41,7 +41,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1087,
    "bugNodeLength": 350,
    "fixLineNum": 34,
    "fixNodeStartChar": 1087,
    "fixNodeLength": 343,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\nindex ed2949f..491b5d5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-glassfish/src/test/java/sample/SampleGlassfishDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -41,7 +41,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 43,
    "bugNodeStartChar": 1440,
    "bugNodeLength": 375,
    "fixLineNum": 43,
    "fixNodeStartChar": 1440,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 40,
    "bugNodeStartChar": 1257,
    "bugNodeLength": 310,
    "fixLineNum": 40,
    "fixNodeStartChar": 1257,
    "fixNodeLength": 303,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 48,
    "bugNodeStartChar": 1570,
    "bugNodeLength": 375,
    "fixLineNum": 48,
    "fixNodeStartChar": 1570,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 57,
    "bugNodeStartChar": 1948,
    "bugNodeLength": 216,
    "fixLineNum": 57,
    "fixNodeStartChar": 1948,
    "fixNodeLength": 209,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 62,
    "bugNodeStartChar": 2167,
    "bugNodeLength": 229,
    "fixLineNum": 62,
    "fixNodeStartChar": 2167,
    "fixNodeLength": 222,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 68,
    "bugNodeStartChar": 2399,
    "bugNodeLength": 212,
    "fixLineNum": 68,
    "fixNodeStartChar": 2399,
    "fixNodeLength": 205,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2614,
    "bugNodeLength": 208,
    "fixLineNum": 73,
    "fixNodeStartChar": 2614,
    "fixNodeLength": 201,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 2825,
    "bugNodeLength": 221,
    "fixLineNum": 78,
    "fixNodeStartChar": 2825,
    "fixNodeLength": 214,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\nindex 069ffd3..a4c9f14 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomcat/src/test/java/sample/SampleTomcatDeployApplicationIT.java\n@@ -38,7 +38,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -46,7 +46,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n@@ -55,34 +55,34 @@\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid errorFromExceptionForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/exception\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingAnythingProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.ALL, MediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingJsonProducesAJsonResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.APPLICATION_JSON,\n \t\t\t\tMediaType.APPLICATION_JSON);\n \t}\n \n \t@Test\n-\tpublic void sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n+\tvoid sendErrorForRequestAcceptingHtmlProducesAnHtmlResponse() throws Exception {\n \t\tassertThatPathProducesExpectedResponse(\"/bootapp/send-error\", MediaType.TEXT_HTML, MediaType.TEXT_HTML);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 84,
    "bugNodeStartChar": 3049,
    "bugNodeLength": 204,
    "fixLineNum": 84,
    "fixNodeStartChar": 3049,
    "fixNodeLength": 197,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\nindex dfc5061..cb9acd5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1079,
    "bugNodeLength": 323,
    "fixLineNum": 34,
    "fixNodeStartChar": 1079,
    "fixNodeLength": 316,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\nindex dfc5061..cb9acd5 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-tomee/src/test/java/sample/SampleTomEEDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1405,
    "bugNodeLength": 375,
    "fixLineNum": 42,
    "fixNodeStartChar": 1405,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\nindex af7a3fa..001ffe6 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1083,
    "bugNodeLength": 323,
    "fixLineNum": 34,
    "fixNodeStartChar": 1083,
    "fixNodeLength": 316,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\nindex af7a3fa..001ffe6 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wildfly/src/test/java/sample/SampleWildFlyDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1409,
    "bugNodeLength": 375,
    "fixLineNum": 42,
    "fixNodeStartChar": 1409,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\nindex 3fbeac5..64b2ca4 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1075,
    "bugNodeLength": 323,
    "fixLineNum": 34,
    "fixNodeStartChar": 1075,
    "fixNodeLength": 316,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77",
    "fixCommitParentSHA1": "c11f25bf8b33e9f4e62dd8ab365cc5587d9e3bee",
    "bugFilePath": "spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java",
    "fixPatch": "diff --git a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\nindex 3fbeac5..64b2ca4 100644\n--- a/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n+++ b/spring-boot-tests/spring-boot-deployment-tests/spring-boot-deployment-test-wlp/src/test/java/sample/SampleWlpDeployApplicationIT.java\n@@ -32,7 +32,7 @@\n \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \n \t@Test\n-\tpublic void testHome() throws Exception {\n+\tvoid testHome() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/\";\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n@@ -40,7 +40,7 @@\n \t}\n \n \t@Test\n-\tpublic void testHealth() throws Exception {\n+\tvoid testHealth() throws Exception {\n \t\tString url = \"http://localhost:\" + this.port + \"/bootapp/actuator/health\";\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1401,
    "bugNodeLength": 375,
    "fixLineNum": 42,
    "fixNodeStartChar": 1401,
    "fixNodeLength": 368,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "eb38c3abb7ae175463795acf51ebdcd03b995078",
    "fixCommitParentSHA1": "9a6415375dc845e593db44c0e5508706f1fbe0f8",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java\nindex 5c39729..8059e8a 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java\n@@ -68,7 +68,7 @@\n \t\t\t\t\tassertThat(context.getBeansOfType(ReactiveWebServerFactory.class))\n \t\t\t\t\t\t\t.hasSize(1);\n \t\t\t\t\tassertThat(context.getBeansOfType(WebServerFactoryCustomizer.class))\n-\t\t\t\t\t\t\t.hasSize(1);\n+\t\t\t\t\t\t\t.hasSize(2);\n \t\t\t\t\tassertThat(context\n \t\t\t\t\t\t\t.getBeansOfType(ReactiveWebServerFactoryCustomizer.class))\n \t\t\t\t\t\t\t\t\t.hasSize(1);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 70,
    "bugNodeStartChar": 3409,
    "bugNodeLength": 87,
    "fixLineNum": 70,
    "fixNodeStartChar": 3409,
    "fixNodeLength": 87,
    "sourceBeforeFix": "assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(1)",
    "sourceAfterFix": "assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0b4934d140f64feb7a8a995ab4e66d990dbbf931",
    "fixCommitParentSHA1": "c4024d8b451267b8941f9e6e1e70bc2cb1291c46",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\nindex ba925fc..aa31d7f 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n@@ -335,7 +335,7 @@\n \n \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n-\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n+\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 338,
    "bugNodeStartChar": 13275,
    "bugNodeLength": 46,
    "fixLineNum": 338,
    "fixNodeStartChar": 13275,
    "fixNodeLength": 36,
    "sourceBeforeFix": "exchange.getResponse().writeWith(Mono.empty())",
    "sourceAfterFix": "exchange.getResponse().setComplete()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1f897ad92326cf7a9964ecb59859c18a5dab64bf",
    "fixCommitParentSHA1": "4ad837f5dcb786c46c3c7a2673feba50c40ed478",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\nindex 111b4e4..f26dc34 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n@@ -354,7 +354,7 @@\n \n \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n-\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n+\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 357,
    "bugNodeStartChar": 14005,
    "bugNodeLength": 46,
    "fixLineNum": 357,
    "fixNodeStartChar": 14005,
    "fixNodeLength": 36,
    "sourceBeforeFix": "exchange.getResponse().writeWith(Mono.empty())",
    "sourceAfterFix": "exchange.getResponse().setComplete()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "09acbc1a4f78be8e64a6d28918ad5c6ac08dc753",
    "fixCommitParentSHA1": "6774cc51197f7feaaac1ead4341247953c8dad0e",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\nindex c915cc4..5fd88ca 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,7 +49,7 @@\n  */\n public class UndertowWebServer implements WebServer {\n \n-\tprivate static final Log logger = LogFactory.getLog(UndertowServletWebServer.class);\n+\tprivate static final Log logger = LogFactory.getLog(UndertowWebServer.class);\n \n \tprivate final Object monitor = new Object();\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 52,
    "bugNodeStartChar": 1760,
    "bugNodeLength": 30,
    "fixLineNum": 52,
    "fixNodeStartChar": 1760,
    "fixNodeLength": 23,
    "sourceBeforeFix": "UndertowServletWebServer.class",
    "sourceAfterFix": "UndertowWebServer.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "360da663337be5eb31a54a601b39034e3a3516da",
    "fixCommitParentSHA1": "6774cc51197f7feaaac1ead4341247953c8dad0e",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\nindex c915cc4..196112a 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n@@ -49,7 +49,7 @@\n  */\n public class UndertowWebServer implements WebServer {\n \n-\tprivate static final Log logger = LogFactory.getLog(UndertowServletWebServer.class);\n+\tprivate static final Log logger = LogFactory.getLog(UndertowWebServer.class);\n \n \tprivate final Object monitor = new Object();\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 52,
    "bugNodeStartChar": 1760,
    "bugNodeLength": 30,
    "fixLineNum": 52,
    "fixNodeStartChar": 1760,
    "fixNodeLength": 23,
    "sourceBeforeFix": "UndertowServletWebServer.class",
    "sourceAfterFix": "UndertowWebServer.class"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "c115ee1550ecf4bc8164e59a4f69b59addd50cc6",
    "fixCommitParentSHA1": "0e0ea7f00ad2350ff048661d6e99b199fbbc7508",
    "bugFilePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java\nindex 04681f1..0cea053 100644\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java\n@@ -42,8 +42,7 @@\n \n \tprivate final MockEnvironment environment = new MockEnvironment();\n \n-\tprivate final JmxEndpointProperties properties = new JmxEndpointProperties(\n-\t\t\tthis.environment);\n+\tprivate final JmxEndpointProperties properties = new JmxEndpointProperties();\n \n \tprivate final MBeanServer mBeanServer = mock(MBeanServer.class);\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 45,
    "bugNodeStartChar": 1519,
    "bugNodeLength": 47,
    "fixLineNum": 45,
    "fixNodeStartChar": 1519,
    "fixNodeLength": 27,
    "sourceBeforeFix": "new JmxEndpointProperties(this.environment)",
    "sourceAfterFix": "new JmxEndpointProperties()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "9c3af103e09bdcb4addeab973881eb27bc91722d",
    "fixCommitParentSHA1": "03beed603c34a396476e61622dc0dbe01c71152e",
    "bugFilePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfigurationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfigurationTests.java\nindex 992c536..d210da7 100644\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfigurationTests.java\n@@ -62,7 +62,7 @@\n \t}\n \n \t@Configuration\n-\tprivate static class CustomEndpointConfiguration {\n+\tstatic class CustomEndpointConfiguration {\n \n \t\t@Bean\n \t\tpublic CustomEndpoint customEndpoint() {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 64,
    "bugNodeStartChar": 2175,
    "bugNodeLength": 158,
    "fixLineNum": 64,
    "fixNodeStartChar": 2175,
    "fixNodeLength": 150,
    "sourceBeforeFix": "10",
    "sourceAfterFix": "8"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "03beed603c34a396476e61622dc0dbe01c71152e",
    "fixCommitParentSHA1": "c2eeeb032c5d54c7e408799a23929fbc0c1e0f61",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java\nindex 5ae8383..81d86eb 100644\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/scheduling/ScheduledTasksEndpointTests.java\n@@ -144,7 +144,7 @@\n \n \t@Configuration\n \t@EnableScheduling\n-\tprivate static class BaseConfiguration {\n+\tstatic class BaseConfiguration {\n \n \t\t@Bean\n \t\tpublic ScheduledTasksEndpoint endpoint(\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 145,
    "bugNodeStartChar": 5835,
    "bugNodeLength": 254,
    "fixLineNum": 145,
    "fixNodeStartChar": 5835,
    "fixNodeLength": 246,
    "sourceBeforeFix": "10",
    "sourceAfterFix": "8"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7beb64043d3acfed32f37c0470ede1d3ac03e697",
    "fixCommitParentSHA1": "7f817e339becb338155dc4b5d26b94ed357746d7",
    "bugFilePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\nindex 3124e24..3d77214 100644\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n@@ -317,12 +317,12 @@\n \n \t@Test\n \tpublic void parseDebugArgExpandGroups() {\n-\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, \"debug\");\n+\t\taddPropertiesToEnvironment(this.context, \"debug\");\n \t\tthis.initializer.initialize(this.context.getEnvironment(),\n \t\t\t\tthis.context.getClassLoader());\n-\t\tthis.logFactory.getInstance(\"org.springframework.boot.actuate.endpoint.web\")\n+\t\tthis.loggerContext.getLogger(\"org.springframework.boot.actuate.endpoint.web\")\n \t\t\t\t.debug(\"testdebugwebgroup\");\n-\t\tthis.logFactory.getInstance(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n+\t\tthis.loggerContext.getLogger(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n \t\tassertThat(this.outputCapture.toString()).contains(\"testdebugwebgroup\");\n \t\tassertThat(this.outputCapture.toString()).contains(\"testdebugsqlgroup\");\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 323,
    "bugNodeStartChar": 12832,
    "bugNodeLength": 15,
    "fixLineNum": 323,
    "fixNodeStartChar": 12832,
    "fixNodeLength": 18,
    "sourceBeforeFix": "this.logFactory",
    "sourceAfterFix": "this.loggerContext"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7beb64043d3acfed32f37c0470ede1d3ac03e697",
    "fixCommitParentSHA1": "7f817e339becb338155dc4b5d26b94ed357746d7",
    "bugFilePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\nindex 3124e24..3d77214 100644\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n@@ -317,12 +317,12 @@\n \n \t@Test\n \tpublic void parseDebugArgExpandGroups() {\n-\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, \"debug\");\n+\t\taddPropertiesToEnvironment(this.context, \"debug\");\n \t\tthis.initializer.initialize(this.context.getEnvironment(),\n \t\t\t\tthis.context.getClassLoader());\n-\t\tthis.logFactory.getInstance(\"org.springframework.boot.actuate.endpoint.web\")\n+\t\tthis.loggerContext.getLogger(\"org.springframework.boot.actuate.endpoint.web\")\n \t\t\t\t.debug(\"testdebugwebgroup\");\n-\t\tthis.logFactory.getInstance(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n+\t\tthis.loggerContext.getLogger(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n \t\tassertThat(this.outputCapture.toString()).contains(\"testdebugwebgroup\");\n \t\tassertThat(this.outputCapture.toString()).contains(\"testdebugsqlgroup\");\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 325,
    "bugNodeStartChar": 12944,
    "bugNodeLength": 15,
    "fixLineNum": 325,
    "fixNodeStartChar": 12944,
    "fixNodeLength": 18,
    "sourceBeforeFix": "this.logFactory",
    "sourceAfterFix": "this.loggerContext"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7bdcee5e3dfc368e8ba9c5752aa07d049ca5b5ae",
    "fixCommitParentSHA1": "dc31f617b39fdea955403a6eccd5f82d5c6383d9",
    "bugFilePath": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\nindex e703714..52f7b6d 100644\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -145,7 +145,7 @@\n \n \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n-\t\t\tAssert.notNull(groupId, \"ArtifactId must not be null\");\n+\t\t\tAssert.notNull(artifactId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 148,
    "bugNodeStartChar": 3749,
    "bugNodeLength": 54,
    "fixLineNum": 148,
    "fixNodeStartChar": 3749,
    "fixNodeLength": 57,
    "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")",
    "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "48295e16fc304221123fc38f9c492d711f05c897",
    "fixCommitParentSHA1": "dc31f617b39fdea955403a6eccd5f82d5c6383d9",
    "bugFilePath": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\nindex e703714..52f7b6d 100644\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -145,7 +145,7 @@\n \n \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n-\t\t\tAssert.notNull(groupId, \"ArtifactId must not be null\");\n+\t\t\tAssert.notNull(artifactId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 148,
    "bugNodeStartChar": 3749,
    "bugNodeLength": 54,
    "fixLineNum": 148,
    "fixNodeStartChar": 3749,
    "fixNodeLength": 57,
    "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")",
    "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5bb7b24d7c6a389e4d33660e88c12634c846af3e",
    "fixCommitParentSHA1": "d52b599eee5193502e27a3f5805c18cba37ddbda",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\nindex c136525..fd070da 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n@@ -256,8 +256,8 @@\n \t\t\tfilterRegistrations.addAll(\n \t\t\t\t\tinitializers.getOrDefault(Filter.class, Collections.emptyList()));\n \t\t\tString filtersInfo = filterRegistrations.stream()\n-\t\t\t\t\t.map(FilterRegistrationBean.class::cast)\n-\t\t\t\t\t.map(FilterRegistrationBean::toString)\n+\t\t\t\t\t.map(AbstractFilterRegistrationBean.class::cast)\n+\t\t\t\t\t.map(AbstractFilterRegistrationBean::toString)\n \t\t\t\t\t.collect(Collectors.joining(\", \"));\n \t\t\tServletContextInitializerBeans.logger\n \t\t\t\t\t.debug(\"Mapping filters: \" + filtersInfo);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 259,
    "bugNodeStartChar": 10200,
    "bugNodeLength": 28,
    "fixLineNum": 259,
    "fixNodeStartChar": 10200,
    "fixNodeLength": 36,
    "sourceBeforeFix": "FilterRegistrationBean.class",
    "sourceAfterFix": "AbstractFilterRegistrationBean.class"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "2b6bdfe2771b1db83f51c33911eaa4130ff73769",
    "fixCommitParentSHA1": "1774a282b0e9ad782be2546785dbb291b7b678fe",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\nindex 75e5af0..fddab18 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n@@ -227,14 +227,14 @@\n \n \t\tpublic static void start(ServerManager manager,\n \t\t\t\tSupplier<HttpHandler> handlerSupplier) {\n-\t\t\tif (manager != null) {\n+\t\t\tif (manager != null && manager.server != null) {\n \t\t\t\tmanager.handler = handlerSupplier.get();\n \t\t\t\tmanager.server.start();\n \t\t\t}\n \t\t}\n \n \t\tpublic static void stop(ServerManager manager) {\n-\t\t\tif (manager != null) {\n+\t\t\tif (manager != null && manager.server != null) {\n \t\t\t\ttry {\n \t\t\t\t\tmanager.server.stop();\n \t\t\t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 230,
    "bugNodeStartChar": 7212,
    "bugNodeLength": 15,
    "fixLineNum": 230,
    "fixNodeStartChar": 7212,
    "fixNodeLength": 41,
    "sourceBeforeFix": "manager != null",
    "sourceAfterFix": "manager != null && manager.server != null"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "2b6bdfe2771b1db83f51c33911eaa4130ff73769",
    "fixCommitParentSHA1": "1774a282b0e9ad782be2546785dbb291b7b678fe",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\nindex 75e5af0..fddab18 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n@@ -227,14 +227,14 @@\n \n \t\tpublic static void start(ServerManager manager,\n \t\t\t\tSupplier<HttpHandler> handlerSupplier) {\n-\t\t\tif (manager != null) {\n+\t\t\tif (manager != null && manager.server != null) {\n \t\t\t\tmanager.handler = handlerSupplier.get();\n \t\t\t\tmanager.server.start();\n \t\t\t}\n \t\t}\n \n \t\tpublic static void stop(ServerManager manager) {\n-\t\t\tif (manager != null) {\n+\t\t\tif (manager != null && manager.server != null) {\n \t\t\t\ttry {\n \t\t\t\t\tmanager.server.stop();\n \t\t\t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 237,
    "bugNodeStartChar": 7372,
    "bugNodeLength": 15,
    "fixLineNum": 237,
    "fixNodeStartChar": 7372,
    "fixNodeLength": 41,
    "sourceBeforeFix": "manager != null",
    "sourceAfterFix": "manager != null && manager.server != null"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "7f35f8a98258ad87aebe45b6b9a88e269d19e5de",
    "fixCommitParentSHA1": "aa6a58d24cb7f1bc1a6d04a37bac4f9b5362bea7",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\nindex f13b3fb..f4b31f8 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n@@ -348,7 +348,7 @@\n \t\t}\n \t\twhile (i2 < l2) {\n \t\t\tchar ch2 = e2.charAt(i, i2++);\n-\t\t\tif (indexed2 || !ElementsParser.isAlphaNumeric(ch2)) {\n+\t\t\tif (indexed2 || ElementsParser.isAlphaNumeric(ch2)) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 351,
    "bugNodeStartChar": 10592,
    "bugNodeLength": 35,
    "fixLineNum": 351,
    "fixNodeStartChar": 10592,
    "fixNodeLength": 34,
    "sourceBeforeFix": "!ElementsParser.isAlphaNumeric(ch2)",
    "sourceAfterFix": "ElementsParser.isAlphaNumeric(ch2)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5323095e44d8e2a7d10a9dac61ecb5593c9b4dec",
    "fixCommitParentSHA1": "4ad2f1df5dde311e4259c724886f3a2ae4d828a9",
    "bugFilePath": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\nindex fe5751f..d7193d4 100644\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,7 @@\n \tprivate static final Set<DatabaseDriver> EXCLUDED_DRIVERS = Collections\n \t\t\t.unmodifiableSet(EnumSet.of(DatabaseDriver.UNKNOWN, DatabaseDriver.ORACLE,\n \t\t\t\t\tDatabaseDriver.DB2, DatabaseDriver.DB2_AS400, DatabaseDriver.INFORMIX,\n-\t\t\t\t\tDatabaseDriver.TERADATA));\n+\t\t\t\t\tDatabaseDriver.SAP, DatabaseDriver.TERADATA));\n \n \tprivate final String className;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 47,
    "bugNodeStartChar": 1405,
    "bugNodeLength": 163,
    "fixLineNum": 47,
    "fixNodeStartChar": 1405,
    "fixNodeLength": 183,
    "sourceBeforeFix": "EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.TERADATA)",
    "sourceAfterFix": "EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.SAP,DatabaseDriver.TERADATA)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7c3d863cf7e5c361a71e35e850ffc72550ada997",
    "fixCommitParentSHA1": "55406d91d20e43ba3e01d4b882ef036b16eb798b",
    "bugFilePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\nindex ac64130..f3633bd 100644\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -317,11 +317,11 @@\n \n \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n-\t\t\tString pattern = this.prefix;\n+\t\t\tStringBuilder pattern = new StringBuilder(this.prefix);\n \t\t\tfor (String part : parts) {\n-\t\t\t\tpattern += part;\n+\t\t\t\tpattern.append(part);\n \t\t\t}\n-\t\t\treturn matcherProvider.getRequestMatcher(pattern);\n+\t\t\treturn matcherProvider.getRequestMatcher(pattern.toString());\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 320,
    "bugNodeStartChar": 11061,
    "bugNodeLength": 29,
    "fixLineNum": 320,
    "fixNodeStartChar": 11061,
    "fixNodeLength": 55,
    "sourceBeforeFix": "String pattern=this.prefix; ",
    "sourceAfterFix": "StringBuilder pattern=new StringBuilder(this.prefix); "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "000cb943238947fec086ac7f64054182b7a1c9b9",
    "fixCommitParentSHA1": "43acc37587977b18a3eb27c6aff716e904e320e6",
    "bugFilePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\nindex 4f65bb3..f3633bd 100644\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -317,7 +317,7 @@\n \n \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n-\t\t\tStringBuffer pattern = new StringBuffer(this.prefix);\n+\t\t\tStringBuilder pattern = new StringBuilder(this.prefix);\n \t\t\tfor (String part : parts) {\n \t\t\t\tpattern.append(part);\n \t\t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 320,
    "bugNodeStartChar": 11061,
    "bugNodeLength": 53,
    "fixLineNum": 320,
    "fixNodeStartChar": 11061,
    "fixNodeLength": 55,
    "sourceBeforeFix": "StringBuffer pattern=new StringBuffer(this.prefix); ",
    "sourceAfterFix": "StringBuilder pattern=new StringBuilder(this.prefix); "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "43acc37587977b18a3eb27c6aff716e904e320e6",
    "fixCommitParentSHA1": "55406d91d20e43ba3e01d4b882ef036b16eb798b",
    "bugFilePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\nindex ac64130..4f65bb3 100644\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -317,11 +317,11 @@\n \n \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n-\t\t\tString pattern = this.prefix;\n+\t\t\tStringBuffer pattern = new StringBuffer(this.prefix);\n \t\t\tfor (String part : parts) {\n-\t\t\t\tpattern += part;\n+\t\t\t\tpattern.append(part);\n \t\t\t}\n-\t\t\treturn matcherProvider.getRequestMatcher(pattern);\n+\t\t\treturn matcherProvider.getRequestMatcher(pattern.toString());\n \t\t}\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 320,
    "bugNodeStartChar": 11061,
    "bugNodeLength": 29,
    "fixLineNum": 320,
    "fixNodeStartChar": 11061,
    "fixNodeLength": 53,
    "sourceBeforeFix": "String pattern=this.prefix; ",
    "sourceAfterFix": "StringBuffer pattern=new StringBuffer(this.prefix); "
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "5bf9d31d91a6e45bed5cf0e878431004765c9b86",
    "fixCommitParentSHA1": "d6b6a5f81f1f4790f45318522c856e9e78f23510",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwkConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwkConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwkConfiguration.java\nindex 8180ca1..f6deea3 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwkConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerJwkConfiguration.java\n@@ -33,8 +33,7 @@\n \n \tprivate final OAuth2ResourceServerProperties properties;\n \n-\tpublic OAuth2ResourceServerJwkConfiguration(\n-\t\t\tOAuth2ResourceServerProperties properties) {\n+\tOAuth2ResourceServerJwkConfiguration(OAuth2ResourceServerProperties properties) {\n \t\tthis.properties = properties;\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 36,
    "bugNodeStartChar": 1440,
    "bugNodeLength": 127,
    "fixLineNum": 36,
    "fixNodeStartChar": 1440,
    "fixNodeLength": 116,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "514398e8c8316d890034adffbfbaf2fc0208d9e2",
    "fixCommitParentSHA1": "7bc18638710c7b568ea969b530b08fc73ee392ce",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\nindex f166463..5342026 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -348,7 +348,7 @@\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 351,
    "bugNodeStartChar": 12613,
    "bugNodeLength": 193,
    "fixLineNum": 351,
    "fixNodeStartChar": 12613,
    "fixNodeLength": 194,
    "sourceBeforeFix": "deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))",
    "sourceAfterFix": "deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "514398e8c8316d890034adffbfbaf2fc0208d9e2",
    "fixCommitParentSHA1": "7bc18638710c7b568ea969b530b08fc73ee392ce",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\nindex f166463..5342026 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -348,7 +348,7 @@\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 351,
    "bugNodeStartChar": 12613,
    "bugNodeLength": 193,
    "fixLineNum": 351,
    "fixNodeStartChar": 12613,
    "fixNodeLength": 194,
    "sourceBeforeFix": "deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))",
    "sourceAfterFix": "deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "2399092f1615195ec95b98e9a0a35df821bf000b",
    "fixCommitParentSHA1": "7bc18638710c7b568ea969b530b08fc73ee392ce",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\nindex f166463..5342026 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -348,7 +348,7 @@\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 351,
    "bugNodeStartChar": 12613,
    "bugNodeLength": 193,
    "fixLineNum": 351,
    "fixNodeStartChar": 12613,
    "fixNodeLength": 194,
    "sourceBeforeFix": "deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))",
    "sourceAfterFix": "deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2399092f1615195ec95b98e9a0a35df821bf000b",
    "fixCommitParentSHA1": "7bc18638710c7b568ea969b530b08fc73ee392ce",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\nindex f166463..5342026 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -348,7 +348,7 @@\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 351,
    "bugNodeStartChar": 12613,
    "bugNodeLength": 193,
    "fixLineNum": 351,
    "fixNodeStartChar": 12613,
    "fixNodeLength": 194,
    "sourceBeforeFix": "deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))",
    "sourceAfterFix": "deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9b60eef0e2e02c5ebbb2d33db3e7dbb1809a1b03",
    "fixCommitParentSHA1": "5412f56cf19fcde88b4e984da95bc9e7bde09cfd",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\nindex afed1b4..6267606 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n@@ -138,7 +138,7 @@\n \t@Test\n \tpublic void handlerMappingsCreated() {\n \t\tthis.contextRunner.run((context) -> assertThat(context)\n-\t\t\t\t.getBeans(HandlerMapping.class).hasSize(7));\n+\t\t\t\t.getBeans(HandlerMapping.class).hasSize(5));\n \t}\n \n \t@Test\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 140,
    "bugNodeStartChar": 7047,
    "bugNodeLength": 66,
    "fixLineNum": 140,
    "fixNodeStartChar": 7047,
    "fixNodeLength": 66,
    "sourceBeforeFix": "assertThat(context).getBeans(HandlerMapping.class).hasSize(7)",
    "sourceAfterFix": "assertThat(context).getBeans(HandlerMapping.class).hasSize(5)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9de2d1f83961a6ede9fa5bdf249c41253116374c",
    "fixCommitParentSHA1": "c2315f2e8c44f236de3dd6182b7e8bb1ed719d0f",
    "bugFilePath": "spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\nindex 0ebfeb5..d5292f7 100644\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n@@ -65,7 +65,7 @@\n \tprivate void registerWebTestClient(ConfigurableApplicationContext context) {\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n \t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n-\t\t\tregisterWebTestClient((BeanDefinitionRegistry) context);\n+\t\t\tregisterWebTestClient((BeanDefinitionRegistry) beanFactory);\n \t\t}\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 68,
    "bugNodeStartChar": 3132,
    "bugNodeLength": 32,
    "fixLineNum": 68,
    "fixNodeStartChar": 3132,
    "fixNodeLength": 36,
    "sourceBeforeFix": "(BeanDefinitionRegistry)context",
    "sourceAfterFix": "(BeanDefinitionRegistry)beanFactory"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "17bcd1c3598c5eb22f705e5c523a3deb66f54ea2",
    "fixCommitParentSHA1": "c2315f2e8c44f236de3dd6182b7e8bb1ed719d0f",
    "bugFilePath": "spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\nindex 0ebfeb5..d5292f7 100644\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n@@ -65,7 +65,7 @@\n \tprivate void registerWebTestClient(ConfigurableApplicationContext context) {\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n \t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n-\t\t\tregisterWebTestClient((BeanDefinitionRegistry) context);\n+\t\t\tregisterWebTestClient((BeanDefinitionRegistry) beanFactory);\n \t\t}\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 68,
    "bugNodeStartChar": 3132,
    "bugNodeLength": 32,
    "fixLineNum": 68,
    "fixNodeStartChar": 3132,
    "fixNodeLength": 36,
    "sourceBeforeFix": "(BeanDefinitionRegistry)context",
    "sourceAfterFix": "(BeanDefinitionRegistry)beanFactory"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "6556bb2e8912717a00e781b483c8d83f72a69571",
    "fixCommitParentSHA1": "975e986fef1517b80eaf280edf24409ff79c5f8e",
    "bugFilePath": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\nindex 8ce38af..79894be 100644\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -115,12 +115,12 @@\n \t/**\n \t * Base class for supported request matchers.\n \t */\n-\tprivate static abstract class AbstractRequestMatcher\n+\tprivate abstract static class AbstractRequestMatcher\n \t\t\textends ApplicationContextRequestMatcher<WebApplicationContext> {\n \n \t\tprivate volatile RequestMatcher delegate;\n \n-\t\tpublic AbstractRequestMatcher() {\n+\t\tAbstractRequestMatcher() {\n \t\t\tsuper(WebApplicationContext.class);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 123,
    "bugNodeStartChar": 4564,
    "bugNodeLength": 76,
    "fixLineNum": 123,
    "fixNodeStartChar": 4564,
    "fixNodeLength": 69,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java\nindex 9fe5b3b..7e487fa 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,8 +40,9 @@\n  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n+ * @since 2.0.1\n  */\n-abstract class AbstractNestedCondition extends SpringBootCondition\n+public abstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \n \tprivate final ConfigurationPhase configurationPhase;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 39,
    "bugNodeStartChar": 1561,
    "bugNodeLength": 6173,
    "fixLineNum": 39,
    "fixNodeStartChar": 1561,
    "fixNodeLength": 6180,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\nindex edc3e15..22b1dce 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -30,9 +30,9 @@\n  */\n @Configuration\n @ConditionalOnNotWebApplication\n-public class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n+class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n \n-\tpublic FreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n+\tFreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 25,
    "bugNodeStartChar": 1043,
    "bugNodeLength": 643,
    "fixLineNum": 25,
    "fixNodeStartChar": 1043,
    "fixNodeLength": 636,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\nindex edc3e15..22b1dce 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -30,9 +30,9 @@\n  */\n @Configuration\n @ConditionalOnNotWebApplication\n-public class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n+class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n \n-\tpublic FreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n+\tFreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 35,
    "bugNodeStartChar": 1302,
    "bugNodeLength": 95,
    "fixLineNum": 35,
    "fixNodeStartChar": 1302,
    "fixNodeLength": 88,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java\nindex c754129..830d398 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java\n@@ -28,8 +28,9 @@\n  *\n  * @author Anton Telechev\n  * @author Phillip Webb\n+ * @since 2.0.1\n  */\n-abstract class AbstractJsonParser implements JsonParser {\n+public abstract class AbstractJsonParser implements JsonParser {\n \n \tprotected final Map<String, Object> parseMap(String json,\n \t\t\tFunction<String, Map<String, Object>> parser) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 26,
    "bugNodeStartChar": 832,
    "bugNodeLength": 1076,
    "fixLineNum": 26,
    "fixNodeStartChar": 832,
    "fixNodeLength": 1083,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\nindex 733eb59..7df7dd8 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n@@ -41,8 +41,9 @@\n  *\n  * @param <T> the type of {@link Filter} to register\n  * @author Phillip Webb\n+ * @since 2.0.1\n  */\n-abstract class AbstractFilterRegistrationBean<T extends Filter>\n+public abstract class AbstractFilterRegistrationBean<T extends Filter>\n \t\textends DynamicRegistrationBean<Dynamic> {\n \n \t/**\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 38,
    "bugNodeStartChar": 1200,
    "bugNodeLength": 7915,
    "fixLineNum": 38,
    "fixNodeStartChar": 1200,
    "fixNodeLength": 7922,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java\nindex 9fe5b3b..dd9372d 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java\n@@ -40,8 +40,9 @@\n  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n+ * @since 2.0.1\n  */\n-abstract class AbstractNestedCondition extends SpringBootCondition\n+public abstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \n \tprivate final ConfigurationPhase configurationPhase;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 39,
    "bugNodeStartChar": 1561,
    "bugNodeLength": 6173,
    "fixLineNum": 39,
    "fixNodeStartChar": 1561,
    "fixNodeLength": 6180,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\nindex edc3e15..d11d89d 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n@@ -30,9 +30,9 @@\n  */\n @Configuration\n @ConditionalOnNotWebApplication\n-public class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n+class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n \n-\tpublic FreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n+\tFreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 25,
    "bugNodeStartChar": 1043,
    "bugNodeLength": 643,
    "fixLineNum": 25,
    "fixNodeStartChar": 1043,
    "fixNodeLength": 636,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\nindex edc3e15..d11d89d 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerNonWebConfiguration.java\n@@ -30,9 +30,9 @@\n  */\n @Configuration\n @ConditionalOnNotWebApplication\n-public class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n+class FreeMarkerNonWebConfiguration extends AbstractFreeMarkerConfiguration {\n \n-\tpublic FreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n+\tFreeMarkerNonWebConfiguration(FreeMarkerProperties properties) {\n \t\tsuper(properties);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 35,
    "bugNodeStartChar": 1302,
    "bugNodeLength": 95,
    "fixLineNum": 35,
    "fixNodeStartChar": 1302,
    "fixNodeLength": 88,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java\nindex c754129..830d398 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/AbstractJsonParser.java\n@@ -28,8 +28,9 @@\n  *\n  * @author Anton Telechev\n  * @author Phillip Webb\n+ * @since 2.0.1\n  */\n-abstract class AbstractJsonParser implements JsonParser {\n+public abstract class AbstractJsonParser implements JsonParser {\n \n \tprotected final Map<String, Object> parseMap(String json,\n \t\t\tFunction<String, Map<String, Object>> parser) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 26,
    "bugNodeStartChar": 832,
    "bugNodeLength": 1076,
    "fixLineNum": 26,
    "fixNodeStartChar": 832,
    "fixNodeLength": 1083,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "74f9a84ea9679e743f44a5a743b235c3266958e3",
    "fixCommitParentSHA1": "da77cbaf7e84f631b9a3fcc346a7cc04b7b6ec83",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\nindex 733eb59..7df7dd8 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n@@ -41,8 +41,9 @@\n  *\n  * @param <T> the type of {@link Filter} to register\n  * @author Phillip Webb\n+ * @since 2.0.1\n  */\n-abstract class AbstractFilterRegistrationBean<T extends Filter>\n+public abstract class AbstractFilterRegistrationBean<T extends Filter>\n \t\textends DynamicRegistrationBean<Dynamic> {\n \n \t/**\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 38,
    "bugNodeStartChar": 1200,
    "bugNodeLength": 7915,
    "fixLineNum": 38,
    "fixNodeStartChar": 1200,
    "fixNodeLength": 7922,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "7f85322ddd398c35fdae14efada0c631d35f32f5",
    "fixCommitParentSHA1": "dc36360155c2af9efc56d2d81133f5fcc37c5903",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java\nindex 8d1333a..c8de87f 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java\n@@ -110,7 +110,7 @@\n \t}\n \n \t/**\n-\t * Composite {@link ConversionService} used to call multiple services\n+\t * Composite {@link ConversionService} used to call multiple services.\n \t */\n \tstatic class CompositeConversionService implements ConversionService {\n \n@@ -205,7 +205,7 @@\n \n \t\tprivate final SimpleTypeConverter typeConverter;\n \n-\t\tpublic TypeConverterConverter(SimpleTypeConverter typeConverter) {\n+\t\tTypeConverterConverter(SimpleTypeConverter typeConverter) {\n \t\t\tthis.typeConverter = typeConverter;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 208,
    "bugNodeStartChar": 7086,
    "bugNodeLength": 109,
    "fixLineNum": 208,
    "fixNodeStartChar": 7086,
    "fixNodeLength": 102,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3076a5523ab2c1be078a2acef416fd3a7cb04009",
    "fixCommitParentSHA1": "8c24988faaaed2d46433ab097eae29c105d6a16f",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\nindex 231a8e8..34c8619 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n@@ -29,7 +29,7 @@\n \t/**\n \t * Empty security context.\n \t */\n-\tstatic SecurityContext NONE = new SecurityContext() {\n+\tSecurityContext NONE = new SecurityContext() {\n \n \t\t@Override\n \t\tpublic Principal getPrincipal() {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 29,
    "bugNodeStartChar": 856,
    "bugNodeLength": 244,
    "fixLineNum": 29,
    "fixNodeStartChar": 856,
    "fixNodeLength": 237,
    "sourceBeforeFix": "8",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "8c24988faaaed2d46433ab097eae29c105d6a16f",
    "fixCommitParentSHA1": "349987d9beed5d48e6b8750d5294b8b3d11c3755",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\nindex 08759dd..231a8e8 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n@@ -29,7 +29,7 @@\n \t/**\n \t * Empty security context.\n \t */\n-\tpublic static SecurityContext NONE = new SecurityContext() {\n+\tstatic SecurityContext NONE = new SecurityContext() {\n \n \t\t@Override\n \t\tpublic Principal getPrincipal() {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 29,
    "bugNodeStartChar": 856,
    "bugNodeLength": 251,
    "fixLineNum": 29,
    "fixNodeStartChar": 856,
    "fixNodeLength": 244,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "8"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080",
    "fixCommitParentSHA1": "5de46c3186b8eaad82636c59bfa071270ea686c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyWebEndpointIntegrationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyWebEndpointIntegrationTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyWebEndpointIntegrationTests.java\nindex 586a85f..b2b3fbb 100644\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyWebEndpointIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyWebEndpointIntegrationTests.java\n@@ -142,7 +142,7 @@\n \n \tprivate static class MockPrincipalWrapper extends HttpServletRequestWrapper {\n \n-\t\tpublic MockPrincipalWrapper(HttpServletRequest request) {\n+\t\tMockPrincipalWrapper(HttpServletRequest request) {\n \t\t\tsuper(request);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 145,
    "bugNodeStartChar": 5112,
    "bugNodeLength": 80,
    "fixLineNum": 145,
    "fixNodeStartChar": 5112,
    "fixNodeLength": 73,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080",
    "fixCommitParentSHA1": "5de46c3186b8eaad82636c59bfa071270ea686c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointIntegrationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointIntegrationTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointIntegrationTests.java\nindex d0afb7a..a1db891 100644\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointIntegrationTests.java\n@@ -164,7 +164,7 @@\n \tprivate static class MockPrincipalServerWebExchangeDecorator\n \t\t\textends ServerWebExchangeDecorator {\n \n-\t\tprotected MockPrincipalServerWebExchangeDecorator(ServerWebExchange delegate) {\n+\t\tMockPrincipalServerWebExchangeDecorator(ServerWebExchange delegate) {\n \t\t\tsuper(delegate);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 167,
    "bugNodeStartChar": 6232,
    "bugNodeLength": 103,
    "fixLineNum": 167,
    "fixNodeStartChar": 6232,
    "fixNodeLength": 93,
    "sourceBeforeFix": "4",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080",
    "fixCommitParentSHA1": "5de46c3186b8eaad82636c59bfa071270ea686c9",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java\nindex 64fcc7a..baa7101 100644\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/MvcWebEndpointIntegrationTests.java\n@@ -156,7 +156,7 @@\n \n \tprivate static class MockPrincipalWrapper extends HttpServletRequestWrapper {\n \n-\t\tpublic MockPrincipalWrapper(HttpServletRequest request) {\n+\t\tMockPrincipalWrapper(HttpServletRequest request) {\n \t\t\tsuper(request);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 159,
    "bugNodeStartChar": 6176,
    "bugNodeLength": 80,
    "fixLineNum": 159,
    "fixNodeStartChar": 6176,
    "fixNodeLength": 73,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "7ea6af0e460f175e764e9821c717fc9209250beb",
    "fixCommitParentSHA1": "a631619f63ac3d8ba1f5e7ee8c4f4d3bcfe1c1eb",
    "bugFilePath": "spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java\nindex df073e4..cf9e752 100644\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java\n@@ -95,7 +95,7 @@\n  * @see ReactiveWebApplicationContextRunner\n  * @see ApplicationContextAssert\n  */\n-abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF, C, A>, C extends ConfigurableApplicationContext, A extends ApplicationContextAssertProvider<C>> {\n+public abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF, C, A>, C extends ConfigurableApplicationContext, A extends ApplicationContextAssertProvider<C>> {\n \n \tprivate final Supplier<C> contextFactory;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 39,
    "bugNodeStartChar": 1653,
    "bugNodeLength": 10526,
    "fixLineNum": 39,
    "fixNodeStartChar": 1653,
    "fixNodeLength": 10533,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "1e3bae9ba27a215654cfe28b81bfa933458168c1",
    "fixCommitParentSHA1": "706aa7af59e9f5b0a6850ae0689b05c5199364a7",
    "bugFilePath": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java\nindex 4f437b2..fff5507 100644\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java\n@@ -86,7 +86,7 @@\n \tprivate boolean isMissing(Map<String, Object> arguments,\n \t\t\tOperationParameter parameter) {\n \t\tif (!parameter.isMandatory()) {\n-\t\t\treturn true;\n+\t\t\treturn false;\n \t\t}\n \t\treturn arguments.get(parameter.getName()) == null;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 89,
    "bugNodeStartChar": 3439,
    "bugNodeLength": 12,
    "fixLineNum": 89,
    "fixNodeStartChar": 3439,
    "fixNodeLength": 13,
    "sourceBeforeFix": "return true; ",
    "sourceAfterFix": "return false; "
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "bd7bd6edc871d515c41d9c33f7593849f4d3dc40",
    "fixCommitParentSHA1": "c0e3ae90420c0971aa429992ada65d5cf6980e53",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\nindex 86b6862..7be903e 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -292,7 +292,7 @@\n \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n-\t\t\t\t\t\t: (int) getSessionTimeout().toMinutes());\n+\t\t\t\t\t\t: (int) getSessionTimeout().getSeconds());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 295,
    "bugNodeStartChar": 10189,
    "bugNodeLength": 31,
    "fixLineNum": 295,
    "fixNodeStartChar": 10189,
    "fixNodeLength": 32,
    "sourceBeforeFix": "getSessionTimeout().toMinutes()",
    "sourceAfterFix": "getSessionTimeout().getSeconds()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bd7bd6edc871d515c41d9c33f7593849f4d3dc40",
    "fixCommitParentSHA1": "c0e3ae90420c0971aa429992ada65d5cf6980e53",
    "bugFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\nindex 86b6862..7be903e 100644\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -292,7 +292,7 @@\n \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n-\t\t\t\t\t\t: (int) getSessionTimeout().toMinutes());\n+\t\t\t\t\t\t: (int) getSessionTimeout().getSeconds());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 295,
    "bugNodeStartChar": 10189,
    "bugNodeLength": 31,
    "fixLineNum": 295,
    "fixNodeStartChar": 10189,
    "fixNodeLength": 32,
    "sourceBeforeFix": "getSessionTimeout().toMinutes()",
    "sourceAfterFix": "getSessionTimeout().getSeconds()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "2f6aca222e49ea1564ecb123485fdd75037028cb",
    "fixCommitParentSHA1": "bc322ff593a30035b1c0cb2a4abe3263c17e66d5",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\nindex dc28024..eb7c25a 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -219,7 +219,7 @@\n \n \t\tprivate final DataSource dataSource;\n \n-\t\tpublic LocationResolver(DataSource dataSource) {\n+\t\tLocationResolver(DataSource dataSource) {\n \t\t\tthis.dataSource = dataSource;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 222,
    "bugNodeStartChar": 7886,
    "bugNodeLength": 85,
    "fixLineNum": 222,
    "fixNodeStartChar": 7886,
    "fixNodeLength": 78,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "f59fbe6f81996df3541a69a1827c397bbb099886",
    "fixCommitParentSHA1": "6bfbcc291a3301ce7b02a5444df476cb8df17643",
    "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\nindex bd950b2..05ee515 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n@@ -140,7 +140,8 @@\n \t\tfor (HttpMessageConverter<?> converter : handlerAdapter.getMessageConverters()) {\n \t\t\tif (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n \t\t\t\tassertThat(converter.getSupportedMediaTypes())\n-\t\t\t\t\t\t.containsExactly(MediaTypes.HAL_JSON);\n+\t\t\t\t\t\t.containsExactly(MediaTypes.HAL_JSON, MediaType.parseMediaType(\n+\t\t\t\t\t\t\t\tMediaTypes.HAL_JSON_VALUE + \";charset=UTF-8\"));\n \t\t\t}\n \t\t}\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 142,
    "bugNodeStartChar": 5954,
    "bugNodeLength": 90,
    "fixLineNum": 142,
    "fixNodeStartChar": 5954,
    "fixNodeLength": 171,
    "sourceBeforeFix": "assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON)",
    "sourceAfterFix": "assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON,MediaType.parseMediaType(MediaTypes.HAL_JSON_VALUE + \";charset=UTF-8\"))"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "61bbaf140c267d8bb80f57e9a1c2eb4994bd0962",
    "fixCommitParentSHA1": "eb045f1da13083cf2cd6f4d45184c252969be76c",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java\nindex 0c95198..42b7a65 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java\n@@ -167,7 +167,7 @@\n \n \t\tprivate final Sanitizer sanitizer;\n \n-\t\tpublic PropertySourcesPlaceholdersSanitizingResolver(\n+\t\tPropertySourcesPlaceholdersSanitizingResolver(\n \t\t\t\tIterable<PropertySource<?>> sources, Sanitizer sanitizer) {\n \t\t\tsuper(sources, new PropertyPlaceholderHelper(\n \t\t\t\t\tSystemPropertyUtils.PLACEHOLDER_PREFIX,\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 170,
    "bugNodeStartChar": 6264,
    "bugNodeLength": 341,
    "fixLineNum": 170,
    "fixNodeStartChar": 6264,
    "fixNodeLength": 334,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "7388b4b76881e97b9e80396c847aae4f6f72c4f3",
    "fixCommitParentSHA1": "cc8a1fc3b9730f6afa08180570ddd5592496d48a",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\nindex 0036dd3..e6c472a 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -94,7 +94,7 @@\n \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n-\t\t\t\t\t\t.and(entry.getValue().health().compose(this.timeoutCompose)))\n+\t\t\t\t\t\t.zipWith(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 96,
    "bugNodeStartChar": 3259,
    "bugNodeLength": 92,
    "fixLineNum": 96,
    "fixNodeStartChar": 3259,
    "fixNodeLength": 96,
    "sourceBeforeFix": "Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))",
    "sourceAfterFix": "Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7388b4b76881e97b9e80396c847aae4f6f72c4f3",
    "fixCommitParentSHA1": "cc8a1fc3b9730f6afa08180570ddd5592496d48a",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\nindex 0036dd3..e6c472a 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -94,7 +94,7 @@\n \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n-\t\t\t\t\t\t.and(entry.getValue().health().compose(this.timeoutCompose)))\n+\t\t\t\t\t\t.zipWith(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 96,
    "bugNodeStartChar": 3259,
    "bugNodeLength": 92,
    "fixLineNum": 96,
    "fixNodeStartChar": 3259,
    "fixNodeLength": 96,
    "sourceBeforeFix": "Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))",
    "sourceAfterFix": "Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "87b554d0620d5607b8ef0adcd3931c00a61588d0",
    "fixCommitParentSHA1": "144d987cb8a9acdfbc0dc16550aa74333ea292d0",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\nindex 98a70ad..571841d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n@@ -148,7 +148,7 @@\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tMetric added = this.registry.getMetrics().get(name);\n-\t\t\tregistrar.checkExisting(metric);\n+\t\t\tregistrar.checkExisting(added);\n \t\t\treturn (T) added;\n \t\t}\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 151,
    "bugNodeStartChar": 4914,
    "bugNodeLength": 31,
    "fixLineNum": 151,
    "fixNodeStartChar": 4914,
    "fixNodeLength": 30,
    "sourceBeforeFix": "registrar.checkExisting(metric)",
    "sourceAfterFix": "registrar.checkExisting(added)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1745a5ee6f81fba376110785ddd8546318bee689",
    "fixCommitParentSHA1": "144d987cb8a9acdfbc0dc16550aa74333ea292d0",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\nindex 98a70ad..571841d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n@@ -148,7 +148,7 @@\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tMetric added = this.registry.getMetrics().get(name);\n-\t\t\tregistrar.checkExisting(metric);\n+\t\t\tregistrar.checkExisting(added);\n \t\t\treturn (T) added;\n \t\t}\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 151,
    "bugNodeStartChar": 4914,
    "bugNodeLength": 31,
    "fixLineNum": 151,
    "fixNodeStartChar": 4914,
    "fixNodeLength": 30,
    "sourceBeforeFix": "registrar.checkExisting(metric)",
    "sourceAfterFix": "registrar.checkExisting(added)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5",
    "fixCommitParentSHA1": "c1101e7eb22ae383bd24374c7991f26c54f93905",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\nindex f35d4d9..69794cf 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 2271,
    "bugNodeLength": 88,
    "fixLineNum": 58,
    "fixNodeStartChar": 2271,
    "fixNodeLength": 92,
    "sourceBeforeFix": "defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))",
    "sourceAfterFix": "defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5",
    "fixCommitParentSHA1": "c1101e7eb22ae383bd24374c7991f26c54f93905",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\nindex f35d4d9..69794cf 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 2271,
    "bugNodeLength": 88,
    "fixLineNum": 58,
    "fixNodeStartChar": 2271,
    "fixNodeLength": 92,
    "sourceBeforeFix": "defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))",
    "sourceAfterFix": "defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5",
    "fixCommitParentSHA1": "c1101e7eb22ae383bd24374c7991f26c54f93905",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\nindex f35d4d9..69794cf 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 60,
    "bugNodeStartChar": 2365,
    "bugNodeLength": 88,
    "fixLineNum": 60,
    "fixNodeStartChar": 2365,
    "fixNodeLength": 92,
    "sourceBeforeFix": "defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))",
    "sourceAfterFix": "defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5",
    "fixCommitParentSHA1": "c1101e7eb22ae383bd24374c7991f26c54f93905",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\nindex f35d4d9..69794cf 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 60,
    "bugNodeStartChar": 2365,
    "bugNodeLength": 88,
    "fixLineNum": 60,
    "fixNodeStartChar": 2365,
    "fixNodeLength": 92,
    "sourceBeforeFix": "defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))",
    "sourceAfterFix": "defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "53fd1f7f2e34c70008553640fdf2123e41a02592",
    "fixCommitParentSHA1": "6cdb02050d2081f4fd265e80737b9736440c3c17",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java\nindex bb60f04..34111a6 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java\n@@ -89,7 +89,7 @@\n \n \t\t@Override\n \t\tprotected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) {\n-\t\t\treturn size() >= this.capacity;\n+\t\t\treturn size() > this.capacity;\n \n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 92,
    "bugNodeStartChar": 2980,
    "bugNodeLength": 23,
    "fixLineNum": 92,
    "fixNodeStartChar": 2980,
    "fixNodeLength": 22,
    "sourceBeforeFix": "size() >= this.capacity",
    "sourceAfterFix": "size() > this.capacity"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "6cdb02050d2081f4fd265e80737b9736440c3c17",
    "fixCommitParentSHA1": "77d427af6c386abbbaa35c1a1f7145a1c7f559d5",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\nindex 2602701..c2fa51a 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n@@ -31,7 +31,7 @@\n  */\n public class InMemoryAuditEventRepository implements AuditEventRepository {\n \n-\tprivate static final int DEFAULT_CAPACITY = 4000;\n+\tprivate static final int DEFAULT_CAPACITY = 1000;\n \n \tprivate final Object monitor = new Object();\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1029,
    "bugNodeLength": 23,
    "fixLineNum": 34,
    "fixNodeStartChar": 1029,
    "fixNodeLength": 23,
    "sourceBeforeFix": "DEFAULT_CAPACITY=4000",
    "sourceAfterFix": "DEFAULT_CAPACITY=1000"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "134e93f3fdbb528145fbdb0efd245b3128fec5ce",
    "fixCommitParentSHA1": "ad8b671b3cd059fe44bf91a106c06a8419c80ff3",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\nindex 726f4f8..3a2b274 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n@@ -115,10 +115,10 @@\n \t\t\t\t\t.reduce(RouterFunction::and).get();\n \t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n \t\t\tif (this.messageReaders != null) {\n-\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::messageReader);\n+\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::customMessageReader);\n \t\t\t}\n \t\t\tif (this.messageWriters != null) {\n-\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::messageWriter);\n+\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::customMessageWriter);\n \t\t\t}\n \t\t\tif (this.viewResolvers != null) {\n \t\t\t\tthis.viewResolvers.forEach(strategiesBuilder::viewResolver);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 118,
    "bugNodeStartChar": 4843,
    "bugNodeLength": 32,
    "fixLineNum": 118,
    "fixNodeStartChar": 4843,
    "fixNodeLength": 38,
    "sourceBeforeFix": "strategiesBuilder::messageReader",
    "sourceAfterFix": "strategiesBuilder::customMessageReader"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "134e93f3fdbb528145fbdb0efd245b3128fec5ce",
    "fixCommitParentSHA1": "ad8b671b3cd059fe44bf91a106c06a8419c80ff3",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\nindex 726f4f8..3a2b274 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n@@ -115,10 +115,10 @@\n \t\t\t\t\t.reduce(RouterFunction::and).get();\n \t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n \t\t\tif (this.messageReaders != null) {\n-\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::messageReader);\n+\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::customMessageReader);\n \t\t\t}\n \t\t\tif (this.messageWriters != null) {\n-\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::messageWriter);\n+\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::customMessageWriter);\n \t\t\t}\n \t\t\tif (this.viewResolvers != null) {\n \t\t\t\tthis.viewResolvers.forEach(strategiesBuilder::viewResolver);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 121,
    "bugNodeStartChar": 4953,
    "bugNodeLength": 32,
    "fixLineNum": 121,
    "fixNodeStartChar": 4953,
    "fixNodeLength": 38,
    "sourceBeforeFix": "strategiesBuilder::messageWriter",
    "sourceAfterFix": "strategiesBuilder::customMessageWriter"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "df2d6b370eaa8d29822b928b0f307cb6918dfe4f",
    "fixCommitParentSHA1": "4ca38d4563ffa44b68098d2f0c7cfe76caec6ea3",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\nindex 4893811..9150f55 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n@@ -91,7 +91,7 @@\n \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n-\t\tassertThat(adapter.getArgumentResolvers()).contains(\n+\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 94,
    "bugNodeStartChar": 4175,
    "bugNodeLength": 30,
    "fixLineNum": 94,
    "fixNodeStartChar": 4175,
    "fixNodeLength": 36,
    "sourceBeforeFix": "adapter.getArgumentResolvers()",
    "sourceAfterFix": "adapter.getCustomArgumentResolvers()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "df2d6b370eaa8d29822b928b0f307cb6918dfe4f",
    "fixCommitParentSHA1": "4ca38d4563ffa44b68098d2f0c7cfe76caec6ea3",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\nindex 4893811..9150f55 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n@@ -91,7 +91,7 @@\n \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n-\t\tassertThat(adapter.getArgumentResolvers()).contains(\n+\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 94,
    "bugNodeStartChar": 4175,
    "bugNodeLength": 30,
    "fixLineNum": 94,
    "fixNodeStartChar": 4175,
    "fixNodeLength": 36,
    "sourceBeforeFix": "adapter.getArgumentResolvers()",
    "sourceAfterFix": "adapter.getCustomArgumentResolvers()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\nindex e7a32fe..e3fa328 100644\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n@@ -55,7 +55,7 @@\n \n \t@Test\n \tpublic void unknownFile() throws Exception {\n-\t\tthis.thrown.equals(IllegalStateException.class);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"Unable to deduce layout for 'test.txt'\");\n \t\tLayouts.forFile(new File(\"test.txt\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 1882,
    "bugNodeLength": 47,
    "fixLineNum": 58,
    "fixNodeStartChar": 1882,
    "fixNodeLength": 47,
    "sourceBeforeFix": "this.thrown.equals(IllegalStateException.class)",
    "sourceAfterFix": "this.thrown.expect(IllegalStateException.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\nindex e7a32fe..e3fa328 100644\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n@@ -55,7 +55,7 @@\n \n \t@Test\n \tpublic void unknownFile() throws Exception {\n-\t\tthis.thrown.equals(IllegalStateException.class);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"Unable to deduce layout for 'test.txt'\");\n \t\tLayouts.forFile(new File(\"test.txt\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 1882,
    "bugNodeLength": 47,
    "fixLineNum": 58,
    "fixNodeStartChar": 1882,
    "fixNodeLength": 47,
    "sourceBeforeFix": "this.thrown.equals(IllegalStateException.class)",
    "sourceAfterFix": "this.thrown.expect(IllegalStateException.class)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 90,
    "bugNodeStartChar": 2429,
    "bugNodeLength": 43,
    "fixLineNum": 90,
    "fixNodeStartChar": 2429,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 90,
    "bugNodeStartChar": 2429,
    "bugNodeLength": 43,
    "fixLineNum": 90,
    "fixNodeStartChar": 2429,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 97,
    "bugNodeStartChar": 2620,
    "bugNodeLength": 37,
    "fixLineNum": 97,
    "fixNodeStartChar": 2620,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 97,
    "bugNodeStartChar": 2620,
    "bugNodeLength": 37,
    "fixLineNum": 97,
    "fixNodeStartChar": 2620,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 104,
    "bugNodeStartChar": 2848,
    "bugNodeLength": 43,
    "fixLineNum": 104,
    "fixNodeStartChar": 2848,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 104,
    "bugNodeStartChar": 2848,
    "bugNodeLength": 43,
    "fixLineNum": 104,
    "fixNodeStartChar": 2848,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 111,
    "bugNodeStartChar": 3061,
    "bugNodeLength": 37,
    "fixLineNum": 111,
    "fixNodeStartChar": 3061,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 111,
    "bugNodeStartChar": 3061,
    "bugNodeLength": 37,
    "fixLineNum": 111,
    "fixNodeStartChar": 3061,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\nindex e7a32fe..e3fa328 100644\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n@@ -55,7 +55,7 @@\n \n \t@Test\n \tpublic void unknownFile() throws Exception {\n-\t\tthis.thrown.equals(IllegalStateException.class);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"Unable to deduce layout for 'test.txt'\");\n \t\tLayouts.forFile(new File(\"test.txt\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 1882,
    "bugNodeLength": 47,
    "fixLineNum": 58,
    "fixNodeStartChar": 1882,
    "fixNodeLength": 47,
    "sourceBeforeFix": "this.thrown.equals(IllegalStateException.class)",
    "sourceAfterFix": "this.thrown.expect(IllegalStateException.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\nindex e7a32fe..e3fa328 100644\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/LayoutsTests.java\n@@ -55,7 +55,7 @@\n \n \t@Test\n \tpublic void unknownFile() throws Exception {\n-\t\tthis.thrown.equals(IllegalStateException.class);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"Unable to deduce layout for 'test.txt'\");\n \t\tLayouts.forFile(new File(\"test.txt\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 1882,
    "bugNodeLength": 47,
    "fixLineNum": 58,
    "fixNodeStartChar": 1882,
    "fixNodeLength": 47,
    "sourceBeforeFix": "this.thrown.equals(IllegalStateException.class)",
    "sourceAfterFix": "this.thrown.expect(IllegalStateException.class)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 90,
    "bugNodeStartChar": 2429,
    "bugNodeLength": 43,
    "fixLineNum": 90,
    "fixNodeStartChar": 2429,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 90,
    "bugNodeStartChar": 2429,
    "bugNodeLength": 43,
    "fixLineNum": 90,
    "fixNodeStartChar": 2429,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 97,
    "bugNodeStartChar": 2620,
    "bugNodeLength": 37,
    "fixLineNum": 97,
    "fixNodeStartChar": 2620,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 97,
    "bugNodeStartChar": 2620,
    "bugNodeLength": 37,
    "fixLineNum": 97,
    "fixNodeStartChar": 2620,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 104,
    "bugNodeStartChar": 2848,
    "bugNodeLength": 43,
    "fixLineNum": 104,
    "fixNodeStartChar": 2848,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 104,
    "bugNodeStartChar": 2848,
    "bugNodeLength": 43,
    "fixLineNum": 104,
    "fixNodeStartChar": 2848,
    "fixNodeLength": 50,
    "sourceBeforeFix": "this.thrown.equals(\"File must not be null\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must not be null\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 111,
    "bugNodeStartChar": 3061,
    "bugNodeLength": 37,
    "fixLineNum": 111,
    "fixNodeStartChar": 3061,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1266642aba9a297e0872324c1e72c72a38e0e485",
    "fixCommitParentSHA1": "113279c1bce1216651b8c8f74ecc0c2363c86296",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\nindex 3b0422d..1f5dd7e 100644\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -87,28 +87,28 @@\n \t@Test\n \tpublic void fileNotNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null);\n \t}\n \n \t@Test\n \tpublic void fileExists() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"));\n \t}\n \n \t@Test\n \tpublic void fileNotNullWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must not be null\");\n+\t\tthis.thrown.expectMessage(\"File must not be null\");\n \t\tnew RandomAccessDataFile(null, 1);\n \t}\n \n \t@Test\n \tpublic void fileExistsWithConcurrentReads() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown.equals(\"File must exist\");\n+\t\tthis.thrown.expectMessage(\"File must exist\");\n \t\tnew RandomAccessDataFile(new File(\"/does/not/exist\"), 1);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 111,
    "bugNodeStartChar": 3061,
    "bugNodeLength": 37,
    "fixLineNum": 111,
    "fixNodeStartChar": 3061,
    "fixNodeLength": 44,
    "sourceBeforeFix": "this.thrown.equals(\"File must exist\")",
    "sourceAfterFix": "this.thrown.expectMessage(\"File must exist\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "902905ad10c58669fe4e3950e8a4df7abe451765",
    "fixCommitParentSHA1": "40b33728848e4d6a9b0cdba7b9ef736ba9aad18b",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java b/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\nindex 095d4ef..971b987 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,7 +40,7 @@\n \t * @see Package#getImplementationVersion()\n \t */\n \tpublic static String getVersion() {\n-\t\tPackage pkg = SpringApplication.class.getPackage();\n+\t\tPackage pkg = SpringBootVersion.class.getPackage();\n \t\treturn (pkg != null ? pkg.getImplementationVersion() : null);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 43,
    "bugNodeStartChar": 1515,
    "bugNodeLength": 23,
    "fixLineNum": 43,
    "fixNodeStartChar": 1515,
    "fixNodeLength": 23,
    "sourceBeforeFix": "SpringApplication.class",
    "sourceAfterFix": "SpringBootVersion.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "da8362a2da7950fb84cba182a17a41e3b5152668",
    "fixCommitParentSHA1": "95e7fbeb1d96f7ebcc48ef582859d210d1828d2e",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\nindex f5665b4..4f4c190 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n@@ -50,7 +50,7 @@\n \n \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n-\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n+\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 1838,
    "bugNodeLength": 55,
    "fixLineNum": 53,
    "fixNodeStartChar": 1838,
    "fixNodeLength": 53,
    "sourceBeforeFix": "Assert.notNull(jarScanner,\"Patterns must not be null\")",
    "sourceAfterFix": "Assert.notNull(patterns,\"Patterns must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b3203058be9aba7abbbfa8091413a75603b270bc",
    "fixCommitParentSHA1": "95e7fbeb1d96f7ebcc48ef582859d210d1828d2e",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\nindex f5665b4..4f4c190 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n@@ -50,7 +50,7 @@\n \n \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n-\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n+\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 1838,
    "bugNodeLength": 55,
    "fixLineNum": 53,
    "fixNodeStartChar": 1838,
    "fixNodeLength": 53,
    "sourceBeforeFix": "Assert.notNull(jarScanner,\"Patterns must not be null\")",
    "sourceAfterFix": "Assert.notNull(patterns,\"Patterns must not be null\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed",
    "fixCommitParentSHA1": "e9057354c239fb081c961270c950f8b7bec634ef",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\nindex cbd254b..d8e93fa 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n@@ -157,7 +157,7 @@\n \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n-\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n+\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}\n \n@@ -269,7 +269,7 @@\n \t}\n \n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n-\t@UnrelatedOne\n+\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 160,
    "bugNodeStartChar": 6249,
    "bugNodeLength": 41,
    "fixLineNum": 160,
    "fixNodeStartChar": 6249,
    "fixNodeLength": 41,
    "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class",
    "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed",
    "fixCommitParentSHA1": "e9057354c239fb081c961270c950f8b7bec634ef",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\nindex cbd254b..d8e93fa 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n@@ -157,7 +157,7 @@\n \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n-\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n+\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}\n \n@@ -269,7 +269,7 @@\n \t}\n \n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n-\t@UnrelatedOne\n+\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 272,
    "bugNodeStartChar": 9156,
    "bugNodeLength": 13,
    "fixLineNum": 272,
    "fixNodeStartChar": 9156,
    "fixNodeLength": 13,
    "sourceBeforeFix": "@UnrelatedOne",
    "sourceAfterFix": "@UnrelatedTwo"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "09998d1155cda1399a7624c7ed79b4611d974c4b",
    "fixCommitParentSHA1": "e9057354c239fb081c961270c950f8b7bec634ef",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\nindex cbd254b..d8e93fa 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n@@ -157,7 +157,7 @@\n \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n-\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n+\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}\n \n@@ -269,7 +269,7 @@\n \t}\n \n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n-\t@UnrelatedOne\n+\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 160,
    "bugNodeStartChar": 6249,
    "bugNodeLength": 41,
    "fixLineNum": 160,
    "fixNodeStartChar": 6249,
    "fixNodeLength": 41,
    "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class",
    "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "09998d1155cda1399a7624c7ed79b4611d974c4b",
    "fixCommitParentSHA1": "e9057354c239fb081c961270c950f8b7bec634ef",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\nindex cbd254b..d8e93fa 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ImportAutoConfigurationImportSelectorTests.java\n@@ -157,7 +157,7 @@\n \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n-\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n+\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}\n \n@@ -269,7 +269,7 @@\n \t}\n \n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n-\t@UnrelatedOne\n+\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 272,
    "bugNodeStartChar": 9156,
    "bugNodeLength": 13,
    "fixLineNum": 272,
    "fixNodeStartChar": 9156,
    "fixNodeLength": 13,
    "sourceBeforeFix": "@UnrelatedOne",
    "sourceAfterFix": "@UnrelatedTwo"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "4fa38aeba48a4f6641e48b3f73e1bc0c55c18156",
    "fixCommitParentSHA1": "21234b36dee9c62358bbe45380e52dcda00a9358",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\nindex 0ac9ce4..2d22769 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -417,7 +417,7 @@\n \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n+\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 420,
    "bugNodeStartChar": 14355,
    "bugNodeLength": 56,
    "fixLineNum": 420,
    "fixNodeStartChar": 14355,
    "fixNodeLength": 58,
    "sourceBeforeFix": "AnnotatedElementUtils.isAnnotated(type,Validated.class)",
    "sourceAfterFix": "AnnotatedElementUtils.hasAnnotation(type,Validated.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4fa38aeba48a4f6641e48b3f73e1bc0c55c18156",
    "fixCommitParentSHA1": "21234b36dee9c62358bbe45380e52dcda00a9358",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\nindex 0ac9ce4..2d22769 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -417,7 +417,7 @@\n \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n+\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 420,
    "bugNodeStartChar": 14355,
    "bugNodeLength": 56,
    "fixLineNum": 420,
    "fixNodeStartChar": 14355,
    "fixNodeLength": 58,
    "sourceBeforeFix": "AnnotatedElementUtils.isAnnotated(type,Validated.class)",
    "sourceAfterFix": "AnnotatedElementUtils.hasAnnotation(type,Validated.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a",
    "fixCommitParentSHA1": "f21e7940ba9d86cfdd6acd8a3d40d5f5e24806a2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\nindex d4e0774..356c9fb 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n@@ -43,6 +43,7 @@\n  *\n  * @author Gary Russell\n  * @author Stephane Nicoll\n+ * @author Artem Bilan\n  * @since 1.5.0\n  */\n @ConfigurationProperties(prefix = \"spring.kafka\")\n@@ -199,7 +200,7 @@\n \t\t * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n \t\t * if 'enable.auto.commit' true.\n \t\t */\n-\t\tprivate Long autoCommitInterval;\n+\t\tprivate Integer autoCommitInterval;\n \n \t\t/**\n \t\t * What to do when there is no initial offset in Kafka or if the current offset\n@@ -264,11 +265,11 @@\n \t\t\treturn this.ssl;\n \t\t}\n \n-\t\tpublic Long getAutoCommitInterval() {\n+\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n \n-\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n+\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 198,
    "bugNodeStartChar": 5905,
    "bugNodeLength": 164,
    "fixLineNum": 198,
    "fixNodeStartChar": 5905,
    "fixNodeLength": 167,
    "sourceBeforeFix": "/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Long autoCommitInterval; ",
    "sourceAfterFix": "/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Integer autoCommitInterval; "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a",
    "fixCommitParentSHA1": "f21e7940ba9d86cfdd6acd8a3d40d5f5e24806a2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\nindex d4e0774..356c9fb 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n@@ -43,6 +43,7 @@\n  *\n  * @author Gary Russell\n  * @author Stephane Nicoll\n+ * @author Artem Bilan\n  * @since 1.5.0\n  */\n @ConfigurationProperties(prefix = \"spring.kafka\")\n@@ -199,7 +200,7 @@\n \t\t * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n \t\t * if 'enable.auto.commit' true.\n \t\t */\n-\t\tprivate Long autoCommitInterval;\n+\t\tprivate Integer autoCommitInterval;\n \n \t\t/**\n \t\t * What to do when there is no initial offset in Kafka or if the current offset\n@@ -264,11 +265,11 @@\n \t\t\treturn this.ssl;\n \t\t}\n \n-\t\tpublic Long getAutoCommitInterval() {\n+\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n \n-\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n+\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 267,
    "bugNodeStartChar": 7697,
    "bugNodeLength": 76,
    "fixLineNum": 267,
    "fixNodeStartChar": 7697,
    "fixNodeLength": 79,
    "sourceBeforeFix": "public Long getAutoCommitInterval(){   return this.autoCommitInterval; } ",
    "sourceAfterFix": "public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a",
    "fixCommitParentSHA1": "f21e7940ba9d86cfdd6acd8a3d40d5f5e24806a2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\nindex d4e0774..356c9fb 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n@@ -43,6 +43,7 @@\n  *\n  * @author Gary Russell\n  * @author Stephane Nicoll\n+ * @author Artem Bilan\n  * @since 1.5.0\n  */\n @ConfigurationProperties(prefix = \"spring.kafka\")\n@@ -199,7 +200,7 @@\n \t\t * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n \t\t * if 'enable.auto.commit' true.\n \t\t */\n-\t\tprivate Long autoCommitInterval;\n+\t\tprivate Integer autoCommitInterval;\n \n \t\t/**\n \t\t * What to do when there is no initial offset in Kafka or if the current offset\n@@ -264,11 +265,11 @@\n \t\t\treturn this.ssl;\n \t\t}\n \n-\t\tpublic Long getAutoCommitInterval() {\n+\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n \n-\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n+\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 271,
    "bugNodeStartChar": 7811,
    "bugNodeLength": 23,
    "fixLineNum": 271,
    "fixNodeStartChar": 7811,
    "fixNodeLength": 26,
    "sourceBeforeFix": "Long autoCommitInterval",
    "sourceAfterFix": "Integer autoCommitInterval"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a",
    "fixCommitParentSHA1": "f21e7940ba9d86cfdd6acd8a3d40d5f5e24806a2",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java\nindex dc27e38..5dbb753 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java\n@@ -100,7 +100,7 @@\n \t\tassertThat(configs.get(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG))\n \t\t\t\t.isEqualTo(Boolean.FALSE);\n \t\tassertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG))\n-\t\t\t\t.isEqualTo(123L);\n+\t\t\t\t.isEqualTo(123);\n \t\tassertThat(configs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG))\n \t\t\t\t.isEqualTo(\"earliest\");\n \t\tassertThat(configs.get(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG)).isEqualTo(456);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 102,
    "bugNodeStartChar": 4387,
    "bugNodeLength": 91,
    "fixLineNum": 102,
    "fixNodeStartChar": 4387,
    "fixNodeLength": 90,
    "sourceBeforeFix": "assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123L)",
    "sourceAfterFix": "assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "6ccd858fc04359c5d203278b25ad3d9f1f53a662",
    "fixCommitParentSHA1": "77a1a3b3c08d8087c0e6ec8d921dac4bf55bf11f",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\nindex 2f93b81..55e30f6 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n@@ -200,7 +200,7 @@\n \n \tstatic class ClientCredentialsCondition extends AnyNestedCondition {\n \n-\t\tpublic ClientCredentialsCondition() {\n+\t\tClientCredentialsCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}\n \n@@ -215,7 +215,7 @@\n \n \tstatic class NotClientCredentialsCondition extends NoneNestedConditions {\n \n-\t\tpublic NotClientCredentialsCondition() {\n+\t\tNotClientCredentialsCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 203,
    "bugNodeStartChar": 8223,
    "bugNodeLength": 91,
    "fixLineNum": 203,
    "fixNodeStartChar": 8223,
    "fixNodeLength": 84,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "6ccd858fc04359c5d203278b25ad3d9f1f53a662",
    "fixCommitParentSHA1": "77a1a3b3c08d8087c0e6ec8d921dac4bf55bf11f",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\nindex 2f93b81..55e30f6 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n@@ -200,7 +200,7 @@\n \n \tstatic class ClientCredentialsCondition extends AnyNestedCondition {\n \n-\t\tpublic ClientCredentialsCondition() {\n+\t\tClientCredentialsCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}\n \n@@ -215,7 +215,7 @@\n \n \tstatic class NotClientCredentialsCondition extends NoneNestedConditions {\n \n-\t\tpublic NotClientCredentialsCondition() {\n+\t\tNotClientCredentialsCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 218,
    "bugNodeStartChar": 8661,
    "bugNodeLength": 94,
    "fixLineNum": 218,
    "fixNodeStartChar": 8661,
    "fixNodeLength": 87,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "1be5812cf0e582602dedd34a2bbc450c42b0e3bf",
    "fixCommitParentSHA1": "95be208f0ff1f463db9cba22f361b2150c738382",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java b/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java\nindex 93847c0..3dfbeff 100644\n--- a/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java\n@@ -73,7 +73,7 @@\n \t\t@Override\n \t\tpublic void init(AuthenticationManagerBuilder auth) throws Exception {\n \t\t\tauth.inMemoryAuthentication().withUser(\"admin\").password(\"admin\")\n-\t\t\t\t\t.roles(\"ADMIN\", \"USER\").and().withUser(\"user\").password(\"user\")\n+\t\t\t\t\t.roles(\"ADMIN\", \"USER\", \"ACTUATOR\").and().withUser(\"user\").password(\"user\")\n \t\t\t\t\t.roles(\"USER\");\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 75,
    "bugNodeStartChar": 3019,
    "bugNodeLength": 94,
    "fixLineNum": 75,
    "fixNodeStartChar": 3019,
    "fixNodeLength": 106,
    "sourceBeforeFix": "auth.inMemoryAuthentication().withUser(\"admin\").password(\"admin\").roles(\"ADMIN\",\"USER\")",
    "sourceAfterFix": "auth.inMemoryAuthentication().withUser(\"admin\").password(\"admin\").roles(\"ADMIN\",\"USER\",\"ACTUATOR\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "264d8442da6fcd6598bce079f131c703e541f9c0",
    "fixCommitParentSHA1": "c5cc626d48d7167095f37b3ba938bf9a6167a734",
    "bugFilePath": "spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java",
    "fixPatch": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java\nindex 0abdb7c..ed9f1af 100644\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java\n@@ -61,7 +61,7 @@\n \tpublic void jarFileExtensionNeeded() throws Exception {\n \t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"is not a JAR file\");\n-\t\tthis.cli.jar(\"secure.groovy\");\n+\t\tthis.cli.jar(\"secure.groovy\", \"data-jpa.groovy\");\n \t}\n \n }\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 64,
    "bugNodeStartChar": 1926,
    "bugNodeLength": 29,
    "fixLineNum": 64,
    "fixNodeStartChar": 1926,
    "fixNodeLength": 48,
    "sourceBeforeFix": "this.cli.jar(\"secure.groovy\")",
    "sourceAfterFix": "this.cli.jar(\"secure.groovy\",\"data-jpa.groovy\")"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "b269ab0e4a5f37fe03ccfb33580a9f9b069be67b",
    "fixCommitParentSHA1": "feee401f8747a3794f60265a5e4a37483bb06d54",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java b/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\nindex b5d117c..6def5d1 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n@@ -26,17 +26,18 @@\n import org.springframework.util.Assert;\n \n /**\n- * Default internal implementation of {@link ApplicationArguments}.\n+ * Default implementation of {@link ApplicationArguments}.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.1\n  */\n-class DefaultApplicationArguments implements ApplicationArguments {\n+public class DefaultApplicationArguments implements ApplicationArguments {\n \n \tprivate final Source source;\n \n \tprivate final String[] args;\n \n-\tDefaultApplicationArguments(String[] args) {\n+\tpublic DefaultApplicationArguments(String[] args) {\n \t\tAssert.notNull(args, \"Args must not be null\");\n \t\tthis.source = new Source(args);\n \t\tthis.args = args;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 28,
    "bugNodeStartChar": 894,
    "bugNodeLength": 1375,
    "fixLineNum": 28,
    "fixNodeStartChar": 894,
    "fixNodeLength": 1382,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "b269ab0e4a5f37fe03ccfb33580a9f9b069be67b",
    "fixCommitParentSHA1": "feee401f8747a3794f60265a5e4a37483bb06d54",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java b/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\nindex b5d117c..6def5d1 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n@@ -26,17 +26,18 @@\n import org.springframework.util.Assert;\n \n /**\n- * Default internal implementation of {@link ApplicationArguments}.\n+ * Default implementation of {@link ApplicationArguments}.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.1\n  */\n-class DefaultApplicationArguments implements ApplicationArguments {\n+public class DefaultApplicationArguments implements ApplicationArguments {\n \n \tprivate final Source source;\n \n \tprivate final String[] args;\n \n-\tDefaultApplicationArguments(String[] args) {\n+\tpublic DefaultApplicationArguments(String[] args) {\n \t\tAssert.notNull(args, \"Args must not be null\");\n \t\tthis.source = new Source(args);\n \t\tthis.args = args;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 39,
    "bugNodeStartChar": 1129,
    "bugNodeLength": 150,
    "fixLineNum": 39,
    "fixNodeStartChar": 1129,
    "fixNodeLength": 157,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "284988f0cd9275e98b31a72440965fb4ce60c1c8",
    "fixCommitParentSHA1": "3f236dc95190c3304d69013888846e4f3c0ce8df",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\nindex e79441c..5872f56 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n@@ -52,7 +52,7 @@\n @EnableConfigurationProperties\n @ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n \t\tSessionCreationPolicy.class })\n-@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\n+@AutoConfigureAfter(SecurityAutoConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \n \tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 55,
    "bugNodeStartChar": 2361,
    "bugNodeLength": 40,
    "fixLineNum": 55,
    "fixNodeStartChar": 2361,
    "fixNodeLength": 31,
    "sourceBeforeFix": "SpringBootWebSecurityConfiguration.class",
    "sourceAfterFix": "SecurityAutoConfiguration.class"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "dcfe2673fd99ff60400ead9c83e338c358e2d1b3",
    "fixCommitParentSHA1": "5d3ac53da9f624214ceefd3ed11fb9c6dc497d9d",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\nindex ebc28c6..83f962b 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n@@ -126,7 +126,7 @@\n \t\tassertThat(ds.getTimeBetweenEvictionRunsMillis()).isEqualTo(5000);\n \t\tassertThat(ds.getMinEvictableIdleTimeMillis()).isEqualTo(60000);\n \t\tassertThat(ds.getMaxWait()).isEqualTo(30000);\n-\t\tassertThat(ds.getValidationInterval()).isEqualTo(30000L);\n+\t\tassertThat(ds.getValidationInterval()).isEqualTo(3000L);\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 129,
    "bugNodeStartChar": 5116,
    "bugNodeLength": 56,
    "fixLineNum": 129,
    "fixNodeStartChar": 5116,
    "fixNodeLength": 55,
    "sourceBeforeFix": "assertThat(ds.getValidationInterval()).isEqualTo(30000L)",
    "sourceAfterFix": "assertThat(ds.getValidationInterval()).isEqualTo(3000L)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a3c63b9c34127ab54702729be4e9525443712ed8",
    "fixCommitParentSHA1": "274734e787b50681f27c2b227a69e28b83e909a5",
    "bugFilePath": "spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java",
    "fixPatch": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 3cc1ec2..9f2a384 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -54,8 +54,8 @@\n \t\t\t\t\t\"jetty-server-\", \"jetty-security-\", \"jetty-servlet-\",\n \t\t\t\t\t\"jetty-servlets\", \"jetty-webapp-\", \"websocket-api\",\n \t\t\t\t\t\"javax.annotation-api\", \"jetty-plus\", \"javax-websocket-server-impl-\",\n-\t\t\t\t\t\"asm-\", \"javax.websocket-api-\", \"asm-tree-\", \"asm-commons-\",\n-\t\t\t\t\t\"websocket-common-\", \"jetty-annotations-\",\n+\t\t\t\t\t\"apache-el\", \"asm-\", \"javax.websocket-api-\", \"asm-tree-\",\n+\t\t\t\t\t\"asm-commons-\", \"websocket-common-\", \"jetty-annotations-\",\n \t\t\t\t\t\"javax-websocket-client-impl-\", \"websocket-client-\",\n \t\t\t\t\t\"websocket-server-\", \"jetty-xml-\", \"websocket-servlet-\"));\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 52,
    "bugNodeStartChar": 1752,
    "bugNodeLength": 556,
    "fixLineNum": 52,
    "fixNodeStartChar": 1752,
    "fixNodeLength": 569,
    "sourceBeforeFix": "Arrays.asList(\"spring-boot-starter-jetty-\",\"jetty-continuation\",\"jetty-util-\",\"javax.servlet-\",\"jetty-io-\",\"jetty-http-\",\"jetty-server-\",\"jetty-security-\",\"jetty-servlet-\",\"jetty-servlets\",\"jetty-webapp-\",\"websocket-api\",\"javax.annotation-api\",\"jetty-plus\",\"javax-websocket-server-impl-\",\"asm-\",\"javax.websocket-api-\",\"asm-tree-\",\"asm-commons-\",\"websocket-common-\",\"jetty-annotations-\",\"javax-websocket-client-impl-\",\"websocket-client-\",\"websocket-server-\",\"jetty-xml-\",\"websocket-servlet-\")",
    "sourceAfterFix": "Arrays.asList(\"spring-boot-starter-jetty-\",\"jetty-continuation\",\"jetty-util-\",\"javax.servlet-\",\"jetty-io-\",\"jetty-http-\",\"jetty-server-\",\"jetty-security-\",\"jetty-servlet-\",\"jetty-servlets\",\"jetty-webapp-\",\"websocket-api\",\"javax.annotation-api\",\"jetty-plus\",\"javax-websocket-server-impl-\",\"apache-el\",\"asm-\",\"javax.websocket-api-\",\"asm-tree-\",\"asm-commons-\",\"websocket-common-\",\"jetty-annotations-\",\"javax-websocket-client-impl-\",\"websocket-client-\",\"websocket-server-\",\"jetty-xml-\",\"websocket-servlet-\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6ec3648a10965a2c74c9a595a4c7962aadb7e288",
    "fixCommitParentSHA1": "91e6a5fbee21d80b71c12f7a71c2d43bfdddf96a",
    "bugFilePath": "spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\nindex 90a75cc..025058a 100644\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 2499,
    "bugNodeLength": 18,
    "fixLineNum": 78,
    "fixNodeStartChar": 2499,
    "fixNodeLength": 17,
    "sourceBeforeFix": "MockReset.before()",
    "sourceAfterFix": "MockReset.after()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6ec3648a10965a2c74c9a595a4c7962aadb7e288",
    "fixCommitParentSHA1": "91e6a5fbee21d80b71c12f7a71c2d43bfdddf96a",
    "bugFilePath": "spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\nindex 90a75cc..025058a 100644\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 2499,
    "bugNodeLength": 18,
    "fixLineNum": 78,
    "fixNodeStartChar": 2499,
    "fixNodeLength": 17,
    "sourceBeforeFix": "MockReset.before()",
    "sourceAfterFix": "MockReset.after()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "6ec3648a10965a2c74c9a595a4c7962aadb7e288",
    "fixCommitParentSHA1": "91e6a5fbee21d80b71c12f7a71c2d43bfdddf96a",
    "bugFilePath": "spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\nindex 90a75cc..025058a 100644\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 85,
    "bugNodeStartChar": 2657,
    "bugNodeLength": 46,
    "fixLineNum": 85,
    "fixNodeStartChar": 2657,
    "fixNodeLength": 26,
    "sourceBeforeFix": "mock(ExampleService.class,MockReset.before())",
    "sourceAfterFix": "mock(ExampleService.class)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "11aa4d074970a5486181b0551abca1870ddeac4c",
    "fixCommitParentSHA1": "91e6a5fbee21d80b71c12f7a71c2d43bfdddf96a",
    "bugFilePath": "spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\nindex 90a75cc..025058a 100644\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 2499,
    "bugNodeLength": 18,
    "fixLineNum": 78,
    "fixNodeStartChar": 2499,
    "fixNodeLength": 17,
    "sourceBeforeFix": "MockReset.before()",
    "sourceAfterFix": "MockReset.after()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "11aa4d074970a5486181b0551abca1870ddeac4c",
    "fixCommitParentSHA1": "91e6a5fbee21d80b71c12f7a71c2d43bfdddf96a",
    "bugFilePath": "spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\nindex 90a75cc..025058a 100644\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 78,
    "bugNodeStartChar": 2499,
    "bugNodeLength": 18,
    "fixLineNum": 78,
    "fixNodeStartChar": 2499,
    "fixNodeLength": 17,
    "sourceBeforeFix": "MockReset.before()",
    "sourceAfterFix": "MockReset.after()"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "11aa4d074970a5486181b0551abca1870ddeac4c",
    "fixCommitParentSHA1": "91e6a5fbee21d80b71c12f7a71c2d43bfdddf96a",
    "bugFilePath": "spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java",
    "fixPatch": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\nindex 90a75cc..025058a 100644\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 85,
    "bugNodeStartChar": 2657,
    "bugNodeLength": 46,
    "fixLineNum": 85,
    "fixNodeStartChar": 2657,
    "fixNodeLength": 26,
    "sourceBeforeFix": "mock(ExampleService.class,MockReset.before())",
    "sourceAfterFix": "mock(ExampleService.class)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "d720645275e1ecf44840e543f1245811a764674c",
    "fixCommitParentSHA1": "7841af50ef0c654528182803fc953f1161cbb280",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java\nindex 797bbc4..ef48fa8 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java\n@@ -282,7 +282,7 @@\n \t\t\t\tOnBeanInParentsConfiguration.class);\n \t\tchild.setParent(this.context);\n \t\tchild.refresh();\n-\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1);\n+\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2);\n \t}\n \n \t@Configuration\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 285,
    "bugNodeStartChar": 11073,
    "bugNodeLength": 62,
    "fixLineNum": 285,
    "fixNodeStartChar": 11073,
    "fixNodeLength": 62,
    "sourceBeforeFix": "assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1)",
    "sourceAfterFix": "assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d62827373de0f2971ef8e4b39efbb8735dda64f3",
    "fixCommitParentSHA1": "c7a23eae56132fe87fb165bdecc4bffd2850d6aa",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java\nindex 5391470..9035bb7 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java\n@@ -77,7 +77,7 @@\n \n \t@Bean\n \t@Scope(\"prototype\")\n-\t@ConditionalOnClass(ObjectMapper.class)\n+\t@ConditionalOnClass(Gson.class)\n \t@ConditionalOnBean(Gson.class)\n \tpublic FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {\n \t\treturn new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 80,
    "bugNodeStartChar": 2990,
    "bugNodeLength": 18,
    "fixLineNum": 80,
    "fixNodeStartChar": 2990,
    "fixNodeLength": 10,
    "sourceBeforeFix": "ObjectMapper.class",
    "sourceAfterFix": "Gson.class"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "a2d8a769ab7b2293522223d214d6cfa7b8abd922",
    "fixCommitParentSHA1": "05ff4ed4e07349170e9ad4371bdf8687b82542ba",
    "bugFilePath": "spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java",
    "fixPatch": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 88971fa..3cc1ec2 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -46,8 +46,7 @@\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n-\t\t\t\t\t\"tomcat-embed-websocket-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-continuation\",\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 48,
    "bugNodeStartChar": 1531,
    "bugNodeLength": 153,
    "fixLineNum": 48,
    "fixNodeStartChar": 1531,
    "fixNodeLength": 118,
    "sourceBeforeFix": "Arrays.asList(\"spring-boot-starter-tomcat-\",\"tomcat-embed-core-\",\"tomcat-embed-el-\",\"tomcat-embed-logging-juli-\",\"tomcat-embed-websocket-\")",
    "sourceAfterFix": "Arrays.asList(\"spring-boot-starter-tomcat-\",\"tomcat-embed-core-\",\"tomcat-embed-el-\",\"tomcat-embed-websocket-\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a3b29b0e4224dbf423b50fbaad5e7ad793be6612",
    "fixCommitParentSHA1": "9e8beb7323215f5de0aaa778699fe70717604f39",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\nindex 4a6e853..1358495 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n@@ -88,7 +88,7 @@\n public class SpringBootWebSecurityConfiguration {\n \n \tprivate static List<String> DEFAULT_IGNORED = Arrays.asList(\"/css/**\", \"/js/**\",\n-\t\t\t\"/images/**\", \"/**/favicon.ico\");\n+\t\t\t\"/images/**\", \"/webjars/**\", \"/**/favicon.ico\");\n \n \t@Bean\n \t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 90,
    "bugNodeStartChar": 4864,
    "bugNodeLength": 70,
    "fixLineNum": 90,
    "fixNodeStartChar": 4864,
    "fixNodeLength": 85,
    "sourceBeforeFix": "Arrays.asList(\"/css/**\",\"/js/**\",\"/images/**\",\"/**/favicon.ico\")",
    "sourceAfterFix": "Arrays.asList(\"/css/**\",\"/js/**\",\"/images/**\",\"/webjars/**\",\"/**/favicon.ico\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "a3b29b0e4224dbf423b50fbaad5e7ad793be6612",
    "fixCommitParentSHA1": "9e8beb7323215f5de0aaa778699fe70717604f39",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\nindex e117dca..8c4f534 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n@@ -90,9 +90,9 @@\n \t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tassertThat(this.context.getBean(AuthenticationManagerBuilder.class)).isNotNull();\n-\t\t// 4 for static resources and one for the rest\n+\t\t// 5 for static resources and one for the rest\n \t\tassertThat(this.context.getBean(FilterChainProxy.class).getFilterChains())\n-\t\t\t\t.hasSize(5);\n+\t\t\t\t.hasSize(6);\n \t}\n \n \t@Test\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 94,
    "bugNodeStartChar": 4432,
    "bugNodeLength": 90,
    "fixLineNum": 94,
    "fixNodeStartChar": 4432,
    "fixNodeLength": 90,
    "sourceBeforeFix": "assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(5)",
    "sourceAfterFix": "assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(6)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "1528764194aced9df27bc34847de70e0fcd0c268",
    "fixCommitParentSHA1": "ed6f11d60de998f85687fa90a736b695771cf1a7",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\nindex ec43e0c..9b0b40a 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n@@ -93,14 +93,14 @@\n \t}\n \n \tprivate static String trimTrailingCharacter(String string, char c) {\n-\t\tif (string.length() >= 0 && string.charAt(string.length() - 1) == c) {\n+\t\tif (string.length() > 0 && string.charAt(string.length() - 1) == c) {\n \t\t\treturn string.substring(0, string.length() - 1);\n \t\t}\n \t\treturn string;\n \t}\n \n \tprivate static String trimLeadingCharacter(String string, char c) {\n-\t\tif (string.length() >= 0 && string.charAt(0) == c) {\n+\t\tif (string.length() > 0 && string.charAt(0) == c) {\n \t\t\treturn string.substring(1);\n \t\t}\n \t\treturn string;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 96,
    "bugNodeStartChar": 2592,
    "bugNodeLength": 20,
    "fixLineNum": 96,
    "fixNodeStartChar": 2592,
    "fixNodeLength": 19,
    "sourceBeforeFix": "string.length() >= 0",
    "sourceAfterFix": "string.length() > 0"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "1528764194aced9df27bc34847de70e0fcd0c268",
    "fixCommitParentSHA1": "ed6f11d60de998f85687fa90a736b695771cf1a7",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\nindex ec43e0c..9b0b40a 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n@@ -93,14 +93,14 @@\n \t}\n \n \tprivate static String trimTrailingCharacter(String string, char c) {\n-\t\tif (string.length() >= 0 && string.charAt(string.length() - 1) == c) {\n+\t\tif (string.length() > 0 && string.charAt(string.length() - 1) == c) {\n \t\t\treturn string.substring(0, string.length() - 1);\n \t\t}\n \t\treturn string;\n \t}\n \n \tprivate static String trimLeadingCharacter(String string, char c) {\n-\t\tif (string.length() >= 0 && string.charAt(0) == c) {\n+\t\tif (string.length() > 0 && string.charAt(0) == c) {\n \t\t\treturn string.substring(1);\n \t\t}\n \t\treturn string;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 103,
    "bugNodeStartChar": 2811,
    "bugNodeLength": 20,
    "fixLineNum": 103,
    "fixNodeStartChar": 2811,
    "fixNodeLength": 19,
    "sourceBeforeFix": "string.length() >= 0",
    "sourceAfterFix": "string.length() > 0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "0fa4d2e2604eef5128a5324498eaf90bce45b267",
    "fixCommitParentSHA1": "454d8581d038d784159c192351794ec5726b15cb",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java\nindex 0f224c2..9e5c787 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java\n@@ -26,9 +26,9 @@\n  *\n  * @author Craig Walls\n  * @author Phillip Webb\n- * @since 1.1.0\n+ * @since 1.4.0\n  */\n-abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {\n+public abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {\n \n \t@Override\n \tpublic void addConnectionFactories(ConnectionFactoryConfigurer configurer,\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 24,
    "bugNodeStartChar": 947,
    "bugNodeLength": 473,
    "fixLineNum": 24,
    "fixNodeStartChar": 947,
    "fixNodeLength": 480,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "0fa4d2e2604eef5128a5324498eaf90bce45b267",
    "fixCommitParentSHA1": "454d8581d038d784159c192351794ec5726b15cb",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java\nindex 17eef74..56e47a1 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java\n@@ -22,9 +22,9 @@\n  * Base {@link ConfigurationProperties properties} for spring social.\n  *\n  * @author Stephane Nicoll\n- * @since 1.2.0\n+ * @since 1.4.0\n  */\n-abstract class SocialProperties {\n+public abstract class SocialProperties {\n \n \t/**\n \t * Application id.\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 21,
    "bugNodeStartChar": 755,
    "bugNodeLength": 534,
    "fixLineNum": 21,
    "fixNodeStartChar": 755,
    "fixNodeLength": 541,
    "sourceBeforeFix": "1024",
    "sourceAfterFix": "1025"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\nindex 2ff86ac..aa3ce10 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n@@ -50,11 +50,12 @@\n  * Auto-configuration for a test database.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.0\n  * @see AutoConfigureTestDatabase\n  */\n @Configuration\n @AutoConfigureBefore(DataSourceAutoConfiguration.class)\n-class TestDatabaseAutoConfiguration {\n+public class TestDatabaseAutoConfiguration {\n \n \tprivate final Environment environment;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 49,
    "bugNodeStartChar": 2331,
    "bugNodeLength": 4426,
    "fixLineNum": 49,
    "fixNodeStartChar": 2331,
    "fixNodeLength": 4433,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerAutoConfiguration.java\nindex 756dfea..27790a4 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerAutoConfiguration.java\n@@ -29,12 +29,13 @@\n  * Auto-configuration for {@link TestEntityManager}.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.0\n  * @see AutoConfigureTestEntityManager\n  */\n @Configuration\n @ConditionalOnClass({ EntityManagerFactory.class })\n @AutoConfigureAfter(HibernateJpaAutoConfiguration.class)\n-class TestEntityManagerAutoConfiguration {\n+public class TestEntityManagerAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 28,
    "bugNodeStartChar": 1155,
    "bugNodeLength": 481,
    "fixLineNum": 28,
    "fixNodeStartChar": 1155,
    "fixNodeLength": 488,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java\nindex b1536c7..55772c1 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfiguration.java\n@@ -33,11 +33,12 @@\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.\n  *\n  * @author Andy Wilkinson\n+ * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnWebApplication\n @EnableConfigurationProperties\n-class RestDocsAutoConfiguration {\n+public class RestDocsAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 32,
    "bugNodeStartChar": 1548,
    "bugNodeLength": 1226,
    "fixLineNum": 32,
    "fixNodeStartChar": 1548,
    "fixNodeLength": 1233,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java\nindex ffad5c1..a58aec0 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/MockRestServiceServerAutoConfiguration.java\n@@ -38,11 +38,12 @@\n  * Auto-configuration for {@link MockRestServiceServer} support.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.0\n  * @see AutoConfigureMockRestServiceServer\n  */\n @Configuration\n @ConditionalOnProperty(prefix = \"spring.test.webclient.mockrestserviceserver\", name = \"enabled\")\n-class MockRestServiceServerAutoConfiguration {\n+public class MockRestServiceServerAutoConfiguration {\n \n \t@Bean\n \tpublic MockServerRestTemplateCustomizer mockServerRestTemplateCustomizer() {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 37,
    "bugNodeStartChar": 1573,
    "bugNodeLength": 2943,
    "fixLineNum": 37,
    "fixNodeStartChar": 1573,
    "fixNodeLength": 2950,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/WebClientRestTemplateAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/WebClientRestTemplateAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/WebClientRestTemplateAutoConfiguration.java\nindex e3ef27a..8d16ffe 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/WebClientRestTemplateAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/client/WebClientRestTemplateAutoConfiguration.java\n@@ -29,12 +29,13 @@\n  * {@link AutoConfigureWebClient#registerRestTemplate()} is {@code true}.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.0\n  * @see AutoConfigureMockRestServiceServer\n  */\n @Configuration\n @ConditionalOnProperty(prefix = \"spring.test.webclient\", name = \"register-rest-template\")\n @AutoConfigureAfter(WebClientAutoConfiguration.class)\n-class WebClientRestTemplateAutoConfiguration {\n+public class WebClientRestTemplateAutoConfiguration {\n \n \t@Bean\n \tpublic RestTemplate restTemplate(RestTemplateBuilder builder) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 27,
    "bugNodeStartChar": 1140,
    "bugNodeLength": 533,
    "fixLineNum": 27,
    "fixNodeStartChar": 1140,
    "fixNodeLength": 540,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java\nindex 9a48362..24cc252 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcAutoConfiguration.java\n@@ -38,12 +38,13 @@\n  * @author Phillip Webb\n  * @author Andy Wilkinson\n  * @see AutoConfigureWebMvc\n+ * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnWebApplication\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n @EnableConfigurationProperties\n-class MockMvcAutoConfiguration {\n+public class MockMvcAutoConfiguration {\n \n \tprivate final WebApplicationContext context;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 35,
    "bugNodeStartChar": 1607,
    "bugNodeLength": 1103,
    "fixLineNum": 35,
    "fixNodeStartChar": 1607,
    "fixNodeLength": 1110,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebClientAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebClientAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebClientAutoConfiguration.java\nindex 6cecf27..b884e28 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebClientAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebClientAutoConfiguration.java\n@@ -34,12 +34,13 @@\n  * Auto-configuration for HtmlUnit {@link WebClient} MockMVC integration.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnClass(WebClient.class)\n @AutoConfigureAfter(MockMvcAutoConfiguration.class)\n @ConditionalOnProperty(prefix = \"spring.test.webmvc.webclient\", name = \"enabled\", matchIfMissing = true)\n-class MockMvcWebClientAutoConfiguration {\n+public class MockMvcWebClientAutoConfiguration {\n \n \tprivate final Environment environment;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 33,
    "bugNodeStartChar": 1479,
    "bugNodeLength": 1005,
    "fixLineNum": 33,
    "fixNodeStartChar": 1479,
    "fixNodeLength": 1012,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046",
    "fixCommitParentSHA1": "b84330663da0110f4c44006c698e7cc78d2633ff",
    "bugFilePath": "spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebDriverAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebDriverAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebDriverAutoConfiguration.java\nindex 999555e..5fadb29 100644\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebDriverAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/MockMvcWebDriverAutoConfiguration.java\n@@ -36,12 +36,13 @@\n  * Auto-configuration for Selenium {@link WebDriver} MockMVC integration.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnClass(HtmlUnitDriver.class)\n @AutoConfigureAfter(MockMvcAutoConfiguration.class)\n @ConditionalOnProperty(prefix = \"spring.test.webmvc.webdriver\", name = \"enabled\", matchIfMissing = true)\n-class MockMvcWebDriverAutoConfiguration {\n+public class MockMvcWebDriverAutoConfiguration {\n \n \tprivate final Environment environment;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 35,
    "bugNodeStartChar": 1617,
    "bugNodeLength": 1106,
    "fixLineNum": 35,
    "fixNodeStartChar": 1617,
    "fixNodeLength": 1113,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a258a1045c85126aae00cfbac5b48d19e8d533fa",
    "fixCommitParentSHA1": "075d5e8d12d02a93b8fdc828baec42f6a0aa802b",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\nindex 2d2d632..0683800 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n@@ -199,7 +199,7 @@\n \n \tprivate Cache getCache(String cacheName) {\n \t\tCache cache = this.cacheManager.getCache(cacheName);\n-\t\tAssert.notNull(\"No cache with name '\" + cacheName + \"' found.\");\n+\t\tAssert.notNull(cache, \"No cache with name '\" + cacheName + \"' found.\");\n \t\treturn cache;\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 202,
    "bugNodeStartChar": 7225,
    "bugNodeLength": 63,
    "fixLineNum": 202,
    "fixNodeStartChar": 7225,
    "fixNodeLength": 70,
    "sourceBeforeFix": "Assert.notNull(\"No cache with name '\" + cacheName + \"' found.\")",
    "sourceAfterFix": "Assert.notNull(cache,\"No cache with name '\" + cacheName + \"' found.\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "c84e09f6119233d59ae42a89eb8adc65202db69b",
    "fixCommitParentSHA1": "075d5e8d12d02a93b8fdc828baec42f6a0aa802b",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\nindex 2d2d632..0683800 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n@@ -199,7 +199,7 @@\n \n \tprivate Cache getCache(String cacheName) {\n \t\tCache cache = this.cacheManager.getCache(cacheName);\n-\t\tAssert.notNull(\"No cache with name '\" + cacheName + \"' found.\");\n+\t\tAssert.notNull(cache, \"No cache with name '\" + cacheName + \"' found.\");\n \t\treturn cache;\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 202,
    "bugNodeStartChar": 7225,
    "bugNodeLength": 63,
    "fixLineNum": 202,
    "fixNodeStartChar": 7225,
    "fixNodeLength": 70,
    "sourceBeforeFix": "Assert.notNull(\"No cache with name '\" + cacheName + \"' found.\")",
    "sourceAfterFix": "Assert.notNull(cache,\"No cache with name '\" + cacheName + \"' found.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "727dd12852290f48840a8aeac91c37823112bdc7",
    "fixCommitParentSHA1": "e8e728106e87be40cf2c5aff3cc296c8e42ce295",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\nindex 1467107..5024b1b 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -259,7 +259,7 @@\n \t\tif (getSslStoreProvider() != null) {\n \t\t\ttry {\n \t\t\t\tfactory.setKeyStore(getSslStoreProvider().getKeyStore());\n-\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getKeyStore());\n+\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getTrustStore());\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 262,
    "bugNodeStartChar": 9908,
    "bugNodeLength": 35,
    "fixLineNum": 262,
    "fixNodeStartChar": 9908,
    "fixNodeLength": 37,
    "sourceBeforeFix": "getSslStoreProvider().getKeyStore()",
    "sourceAfterFix": "getSslStoreProvider().getTrustStore()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "727dd12852290f48840a8aeac91c37823112bdc7",
    "fixCommitParentSHA1": "e8e728106e87be40cf2c5aff3cc296c8e42ce295",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\nindex 1467107..5024b1b 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -259,7 +259,7 @@\n \t\tif (getSslStoreProvider() != null) {\n \t\t\ttry {\n \t\t\t\tfactory.setKeyStore(getSslStoreProvider().getKeyStore());\n-\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getKeyStore());\n+\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getTrustStore());\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 262,
    "bugNodeStartChar": 9908,
    "bugNodeLength": 35,
    "fixLineNum": 262,
    "fixNodeStartChar": 9908,
    "fixNodeLength": 37,
    "sourceBeforeFix": "getSslStoreProvider().getKeyStore()",
    "sourceAfterFix": "getSslStoreProvider().getTrustStore()"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "dacf0f9826f67cbb4f6773c79ebacbaa1b9deb03",
    "fixCommitParentSHA1": "6eeda76af7ba6d298299277a56fb5ac4cf72c8b2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\nindex ddc765a..73f3025 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n@@ -125,7 +125,7 @@\n \t\t\t\t\tclusterProperties.getNodes());\n \n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n-\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n+\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 128,
    "bugNodeStartChar": 4879,
    "bugNodeLength": 24,
    "fixLineNum": 128,
    "fixNodeStartChar": 4879,
    "fixNodeLength": 35,
    "sourceBeforeFix": "config.getMaxRedirects()",
    "sourceAfterFix": "clusterProperties.getMaxRedirects()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "dacf0f9826f67cbb4f6773c79ebacbaa1b9deb03",
    "fixCommitParentSHA1": "6eeda76af7ba6d298299277a56fb5ac4cf72c8b2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\nindex ddc765a..73f3025 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n@@ -125,7 +125,7 @@\n \t\t\t\t\tclusterProperties.getNodes());\n \n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n-\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n+\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 128,
    "bugNodeStartChar": 4879,
    "bugNodeLength": 24,
    "fixLineNum": 128,
    "fixNodeStartChar": 4879,
    "fixNodeLength": 35,
    "sourceBeforeFix": "config.getMaxRedirects()",
    "sourceAfterFix": "clusterProperties.getMaxRedirects()"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "af39d558ff5ca71fad662cc1fc7bb2927640751c",
    "fixCommitParentSHA1": "6eeda76af7ba6d298299277a56fb5ac4cf72c8b2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\nindex ddc765a..73f3025 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n@@ -125,7 +125,7 @@\n \t\t\t\t\tclusterProperties.getNodes());\n \n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n-\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n+\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 128,
    "bugNodeStartChar": 4879,
    "bugNodeLength": 24,
    "fixLineNum": 128,
    "fixNodeStartChar": 4879,
    "fixNodeLength": 35,
    "sourceBeforeFix": "config.getMaxRedirects()",
    "sourceAfterFix": "clusterProperties.getMaxRedirects()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "af39d558ff5ca71fad662cc1fc7bb2927640751c",
    "fixCommitParentSHA1": "6eeda76af7ba6d298299277a56fb5ac4cf72c8b2",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\nindex ddc765a..73f3025 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n@@ -125,7 +125,7 @@\n \t\t\t\t\tclusterProperties.getNodes());\n \n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n-\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n+\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 128,
    "bugNodeStartChar": 4879,
    "bugNodeLength": 24,
    "fixLineNum": 128,
    "fixNodeStartChar": 4879,
    "fixNodeLength": 35,
    "sourceBeforeFix": "config.getMaxRedirects()",
    "sourceAfterFix": "clusterProperties.getMaxRedirects()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "8542f4f48129db5b410b7db7e30f05fa011f05f5",
    "fixCommitParentSHA1": "b1656be3d094677e666520acae44584a2c4abaf1",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\nindex f36fd3e..f09c602 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n@@ -99,7 +99,13 @@\n \t\treturn new OAuth2Authentication(request, token);\n \t}\n \n-\tprivate Object getPrincipal(Map<String, Object> map) {\n+\t/**\n+\t * Return the principal that should be used for the token. The default implementation\n+\t * looks for well know {@code user*} keys in the map.\n+\t * @param map the source map\n+\t * @return the principal or {@literal \"unknown\"}\n+\t */\n+\tprotected Object getPrincipal(Map<String, Object> map) {\n \t\tfor (String key : PRINCIPAL_KEYS) {\n \t\t\tif (map.containsKey(key)) {\n \t\t\t\treturn map.get(key);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 102,
    "bugNodeStartChar": 3861,
    "bugNodeLength": 180,
    "fixLineNum": 102,
    "fixNodeStartChar": 3861,
    "fixNodeLength": 414,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6121d105fc56c57636b98ecc7504caff978bcd14",
    "fixCommitParentSHA1": "87de7e63829b9da947e74769c597207c78acb9ef",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java\nindex ec7b0bc..2776d6f 100644\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java\n@@ -44,7 +44,7 @@\n \t@Override\n \tprotected boolean isNestedArchive(Archive.Entry entry) {\n \t\tif (entry.isDirectory()) {\n-\t\t\treturn entry.getName().startsWith(BOOT_INF_CLASSES);\n+\t\t\treturn entry.getName().equals(BOOT_INF_CLASSES);\n \t\t}\n \t\treturn entry.getName().startsWith(BOOT_INF_LIB);\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 47,
    "bugNodeStartChar": 1409,
    "bugNodeLength": 44,
    "fixLineNum": 47,
    "fixNodeStartChar": 1409,
    "fixNodeLength": 40,
    "sourceBeforeFix": "entry.getName().startsWith(BOOT_INF_CLASSES)",
    "sourceAfterFix": "entry.getName().equals(BOOT_INF_CLASSES)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6121d105fc56c57636b98ecc7504caff978bcd14",
    "fixCommitParentSHA1": "87de7e63829b9da947e74769c597207c78acb9ef",
    "bugFilePath": "spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java\nindex ec7b0bc..2776d6f 100644\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/JarLauncher.java\n@@ -44,7 +44,7 @@\n \t@Override\n \tprotected boolean isNestedArchive(Archive.Entry entry) {\n \t\tif (entry.isDirectory()) {\n-\t\t\treturn entry.getName().startsWith(BOOT_INF_CLASSES);\n+\t\t\treturn entry.getName().equals(BOOT_INF_CLASSES);\n \t\t}\n \t\treturn entry.getName().startsWith(BOOT_INF_LIB);\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 47,
    "bugNodeStartChar": 1409,
    "bugNodeLength": 44,
    "fixLineNum": 47,
    "fixNodeStartChar": 1409,
    "fixNodeLength": 40,
    "sourceBeforeFix": "entry.getName().startsWith(BOOT_INF_CLASSES)",
    "sourceAfterFix": "entry.getName().equals(BOOT_INF_CLASSES)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8d08e816a79a7390dc6ba086d5709f1049b5807f",
    "fixCommitParentSHA1": "7942d9f78765d57097ce4cf36c49feced3525a2b",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\nindex 63a14e3..3152bdc 100644\n--- a/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n@@ -39,7 +39,7 @@\n \t\ttry {\n \t\t\tSampleRedisApplication.main(new String[0]);\n \t\t}\n-\t\tcatch (IllegalStateException ex) {\n+\t\tcatch (Exception ex) {\n \t\t\tif (!redisServerRunning(ex)) {\n \t\t\t\treturn;\n \t\t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1197,
    "bugNodeLength": 24,
    "fixLineNum": 42,
    "fixNodeStartChar": 1197,
    "fixNodeLength": 12,
    "sourceBeforeFix": "IllegalStateException ex",
    "sourceAfterFix": "Exception ex"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9bf95c4215ed2dc53be742e94be9ed4b08db8c82",
    "fixCommitParentSHA1": "2e08502c4d5c333aa7b2f865cdb2b49600898b7c",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\nindex a9fd56c..657cefa 100644\n--- a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n+++ b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n@@ -27,8 +27,7 @@\n @Component\n public class CacheManagerCheck implements CommandLineRunner {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(SampleCacheApplication.class);\n+\tprivate static final Logger logger = LoggerFactory.getLogger(CacheManagerCheck.class);\n \n \tprivate final CacheManager cacheManager;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 31,
    "bugNodeStartChar": 1054,
    "bugNodeLength": 28,
    "fixLineNum": 30,
    "fixNodeStartChar": 1050,
    "fixNodeLength": 23,
    "sourceBeforeFix": "SampleCacheApplication.class",
    "sourceAfterFix": "CacheManagerCheck.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9f93559d44b581db765aa43e828c991a8cf91ca1",
    "fixCommitParentSHA1": "2e08502c4d5c333aa7b2f865cdb2b49600898b7c",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\nindex a9fd56c..657cefa 100644\n--- a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n+++ b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n@@ -27,8 +27,7 @@\n @Component\n public class CacheManagerCheck implements CommandLineRunner {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(SampleCacheApplication.class);\n+\tprivate static final Logger logger = LoggerFactory.getLogger(CacheManagerCheck.class);\n \n \tprivate final CacheManager cacheManager;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 31,
    "bugNodeStartChar": 1054,
    "bugNodeLength": 28,
    "fixLineNum": 30,
    "fixNodeStartChar": 1050,
    "fixNodeLength": 23,
    "sourceBeforeFix": "SampleCacheApplication.class",
    "sourceAfterFix": "CacheManagerCheck.class"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "df64a74e607cf5387b1ef63e7c3026f4212e3ce8",
    "fixCommitParentSHA1": "f276ff4bd0ca4d1bdcc340dfd2955d51f9f09301",
    "bugFilePath": "spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java",
    "fixPatch": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex bd128e1..132a02b 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -59,7 +59,7 @@\n \t\t\t\t\t\"asm-\", \"javax.websocket-api-\", \"asm-tree-\", \"asm-commons-\",\n \t\t\t\t\t\"websocket-common-\", \"jetty-annotations-\",\n \t\t\t\t\t\"javax-websocket-client-impl-\", \"websocket-client-\",\n-\t\t\t\t\t\"websocket-server-\", \"jetty-jndi-\", \"jetty-xml-\",\n+\t\t\t\t\t\"websocket-server-\", \"jetty-xml-\",\n \t\t\t\t\t\"websocket-servlet-\"));\n \n \tprivate static final String BOOT_VERSION = Versions.getBootVersion();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 54,
    "bugNodeStartChar": 1817,
    "bugNodeLength": 576,
    "fixLineNum": 54,
    "fixNodeStartChar": 1817,
    "fixNodeLength": 561,
    "sourceBeforeFix": "Arrays.asList(\"spring-boot-starter-jetty-\",\"jetty-continuation\",\"jetty-util-\",\"javax.servlet-\",\"jetty-io-\",\"jetty-http-\",\"jetty-server-\",\"jetty-security-\",\"jetty-servlet-\",\"jetty-servlets\",\"jetty-webapp-\",\"websocket-api\",\"javax.annotation-api\",\"jetty-plus\",\"javax-websocket-server-impl-\",\"asm-\",\"javax.websocket-api-\",\"asm-tree-\",\"asm-commons-\",\"websocket-common-\",\"jetty-annotations-\",\"javax-websocket-client-impl-\",\"websocket-client-\",\"websocket-server-\",\"jetty-jndi-\",\"jetty-xml-\",\"websocket-servlet-\")",
    "sourceAfterFix": "Arrays.asList(\"spring-boot-starter-jetty-\",\"jetty-continuation\",\"jetty-util-\",\"javax.servlet-\",\"jetty-io-\",\"jetty-http-\",\"jetty-server-\",\"jetty-security-\",\"jetty-servlet-\",\"jetty-servlets\",\"jetty-webapp-\",\"websocket-api\",\"javax.annotation-api\",\"jetty-plus\",\"javax-websocket-server-impl-\",\"asm-\",\"javax.websocket-api-\",\"asm-tree-\",\"asm-commons-\",\"websocket-common-\",\"jetty-annotations-\",\"javax-websocket-client-impl-\",\"websocket-client-\",\"websocket-server-\",\"jetty-xml-\",\"websocket-servlet-\")"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5ef690369074888234a9616483d26e4637a126a8",
    "fixCommitParentSHA1": "2ceadd705b5c3336adf641451ca177c55f7e3fae",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/web/servlet/view/velocity/EmbeddedVelocityToolboxView.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/servlet/view/velocity/EmbeddedVelocityToolboxView.java b/spring-boot/src/main/java/org/springframework/boot/web/servlet/view/velocity/EmbeddedVelocityToolboxView.java\nindex ca8ae5a..94955d5 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/web/servlet/view/velocity/EmbeddedVelocityToolboxView.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/view/velocity/EmbeddedVelocityToolboxView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,10 +34,11 @@\n \n /**\n  * Extended version of {@link VelocityToolboxView} that can load toolbox locations from\n- * the classpath as well as the servlet context. This is useful when run an embedded web\n- * server.\n+ * the classpath as well as the servlet context. This is useful when running in an\n+ * embedded web server.\n  *\n  * @author Phillip Webb\n+ * @author Andy Wilkinson\n  * @since 1.2.5\n  */\n @SuppressWarnings(\"deprecation\")\n@@ -69,7 +70,7 @@\n \t\tProxyFactory factory = new ProxyFactory();\n \t\tfactory.setTarget(getServletContext());\n \t\tfactory.addAdvice(new GetResourceMethodInterceptor(getToolboxConfigLocation()));\n-\t\treturn (ServletContext) factory.getProxy();\n+\t\treturn (ServletContext) factory.getProxy(getClass().getClassLoader());\n \t}\n \n \t/**\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 72,
    "bugNodeStartChar": 2803,
    "bugNodeLength": 18,
    "fixLineNum": 72,
    "fixNodeStartChar": 2803,
    "fixNodeLength": 45,
    "sourceBeforeFix": "factory.getProxy()",
    "sourceAfterFix": "factory.getProxy(getClass().getClassLoader())"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8",
    "fixCommitParentSHA1": "9f413230307cd7d119b0ac707022744f77694e2d",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\nindex 219c0d1..ea54654 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n@@ -66,7 +66,7 @@\n \t * @param properties the batch properties\n \t * @param dataSource the underlying data source\n \t */\n-\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n+\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n \t\tthis(properties, dataSource, null);\n \t}\n \n@@ -76,7 +76,7 @@\n \t * @param dataSource the underlying data source\n \t * @param entityManagerFactory the entity manager factory (or {@code null})\n \t */\n-\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n+\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\tEntityManagerFactory entityManagerFactory) {\n \t\tthis.properties = properties;\n \t\tthis.entityManagerFactory = entityManagerFactory;\n@@ -116,7 +116,7 @@\n \t\t}\n \t}\n \n-\tprivate JobExplorer createJobExplorer() throws Exception {\n+\tprotected JobExplorer createJobExplorer() throws Exception {\n \t\tJobExplorerFactoryBean jobExplorerFactoryBean = new JobExplorerFactoryBean();\n \t\tjobExplorerFactoryBean.setDataSource(this.dataSource);\n \t\tString tablePrefix = this.properties.getTablePrefix();\n@@ -127,7 +127,7 @@\n \t\treturn jobExplorerFactoryBean.getObject();\n \t}\n \n-\tprivate JobLauncher createJobLauncher() throws Exception {\n+\tprotected JobLauncher createJobLauncher() throws Exception {\n \t\tSimpleJobLauncher jobLauncher = new SimpleJobLauncher();\n \t\tjobLauncher.setJobRepository(getJobRepository());\n \t\tjobLauncher.afterPropertiesSet();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 64,
    "bugNodeStartChar": 2240,
    "bugNodeLength": 272,
    "fixLineNum": 64,
    "fixNodeStartChar": 2240,
    "fixNodeLength": 282,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8",
    "fixCommitParentSHA1": "9f413230307cd7d119b0ac707022744f77694e2d",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\nindex 219c0d1..ea54654 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n@@ -66,7 +66,7 @@\n \t * @param properties the batch properties\n \t * @param dataSource the underlying data source\n \t */\n-\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n+\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n \t\tthis(properties, dataSource, null);\n \t}\n \n@@ -76,7 +76,7 @@\n \t * @param dataSource the underlying data source\n \t * @param entityManagerFactory the entity manager factory (or {@code null})\n \t */\n-\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n+\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\tEntityManagerFactory entityManagerFactory) {\n \t\tthis.properties = properties;\n \t\tthis.entityManagerFactory = entityManagerFactory;\n@@ -116,7 +116,7 @@\n \t\t}\n \t}\n \n-\tprivate JobExplorer createJobExplorer() throws Exception {\n+\tprotected JobExplorer createJobExplorer() throws Exception {\n \t\tJobExplorerFactoryBean jobExplorerFactoryBean = new JobExplorerFactoryBean();\n \t\tjobExplorerFactoryBean.setDataSource(this.dataSource);\n \t\tString tablePrefix = this.properties.getTablePrefix();\n@@ -127,7 +127,7 @@\n \t\treturn jobExplorerFactoryBean.getObject();\n \t}\n \n-\tprivate JobLauncher createJobLauncher() throws Exception {\n+\tprotected JobLauncher createJobLauncher() throws Exception {\n \t\tSimpleJobLauncher jobLauncher = new SimpleJobLauncher();\n \t\tjobLauncher.setJobRepository(getJobRepository());\n \t\tjobLauncher.afterPropertiesSet();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2515,
    "bugNodeLength": 473,
    "fixLineNum": 73,
    "fixNodeStartChar": 2515,
    "fixNodeLength": 483,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "4"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "3e7863d4b4b4c8b8ddd529c5f47a055e1d5aad6b",
    "fixCommitParentSHA1": "447edd2c4eafde6d478690394a78cc936e9ef37c",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java\nindex fe77ee0..728619f 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java\n@@ -303,7 +303,7 @@\n \n \t\tprivate final Predicate maxContentSize;\n \n-\t\tpublic MaxSizePredicate(int size) {\n+\t\tMaxSizePredicate(int size) {\n \t\t\tthis.maxContentSize = Predicates.maxContentSize(size);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 306,
    "bugNodeStartChar": 9405,
    "bugNodeLength": 97,
    "fixLineNum": 306,
    "fixNodeStartChar": 9405,
    "fixNodeLength": 90,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "a3fac379046d9a9ff4225350c54afc931ee42a80",
    "fixCommitParentSHA1": "287a62c8f38ff352ea172f9f399bca81efd78ce3",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\nindex b82c288..716b143 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n@@ -145,7 +145,7 @@\n \n \t\tprivate final Resource resource;\n \n-\t\tpublic Handler(Resource resource) {\n+\t\tHandler(Resource resource) {\n \t\t\tthis.resource = resource;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 148,
    "bugNodeStartChar": 4303,
    "bugNodeLength": 68,
    "fixLineNum": 148,
    "fixNodeStartChar": 4303,
    "fixNodeLength": 61,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "49a5587558d8183f5a054156f59a8bd5bacc9c67",
    "fixCommitParentSHA1": "f08f872729a6be36247a61c7adb67b071f1a8d20",
    "bugFilePath": "spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java",
    "fixPatch": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\nindex ff8bbd6..629150f 100644\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n@@ -87,7 +87,7 @@\n \t\t\t\targsToUse[i] = \"--cp\";\n \t\t\t}\n \t\t}\n-\t\tOptionSet options = getParser().parse(args);\n+\t\tOptionSet options = getParser().parse(argsToUse);\n \t\treturn run(options);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 90,
    "bugNodeStartChar": 2470,
    "bugNodeLength": 23,
    "fixLineNum": 90,
    "fixNodeStartChar": 2470,
    "fixNodeLength": 28,
    "sourceBeforeFix": "getParser().parse(args)",
    "sourceAfterFix": "getParser().parse(argsToUse)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "86c753a14931a2cace312a5c55ee139feb5ad012",
    "fixCommitParentSHA1": "74317a220ea41419856608bacaecc68996ed811c",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\nindex d0be9cc..907e1a2 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n@@ -144,7 +144,7 @@\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n \t\t// Just the application and management endpoints now\n-\t\tassertEquals(2,\n+\t\tassertEquals(3,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 147,
    "bugNodeStartChar": 6666,
    "bugNodeLength": 90,
    "fixLineNum": 147,
    "fixNodeStartChar": 6666,
    "fixNodeLength": 90,
    "sourceBeforeFix": "assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())",
    "sourceAfterFix": "assertEquals(3,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "00e207dcaf3730835f09c8be85c8e48b725c82a6",
    "fixCommitParentSHA1": "248fcbec5dfe914accfe2c28c22638eff496664e",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\nindex 3b2e3d0..5fc6d18 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n@@ -165,7 +165,7 @@\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n \t\t// Just the application endpoints now\n-\t\tassertEquals(1,\n+\t\tassertEquals(2,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 168,
    "bugNodeStartChar": 7597,
    "bugNodeLength": 90,
    "fixLineNum": 168,
    "fixNodeStartChar": 7597,
    "fixNodeLength": 90,
    "sourceBeforeFix": "assertEquals(1,this.context.getBean(FilterChainProxy.class).getFilterChains().size())",
    "sourceAfterFix": "assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "180815445c5271dbee42d1983e7724d95b2b38a6",
    "fixCommitParentSHA1": "04fa7e4d27c3c5bcecd52bc16a604401afbbf89d",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\nindex d2e7760..5bee1ba 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -337,7 +337,7 @@\n \t\t\tRunnable shutdownHandler = loggingSystem.getShutdownHandler();\n \t\t\tif (shutdownHandler != null\n \t\t\t\t\t&& shutdownHookRegistered.compareAndSet(false, true)) {\n-\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread());\n+\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(shutdownHandler));\n \t\t\t}\n \t\t}\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 340,
    "bugNodeStartChar": 12134,
    "bugNodeLength": 12,
    "fixLineNum": 340,
    "fixNodeStartChar": 12134,
    "fixNodeLength": 27,
    "sourceBeforeFix": "new Thread()",
    "sourceAfterFix": "new Thread(shutdownHandler)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "028fc047779c1457071501b6437fe9331466c6d0",
    "fixCommitParentSHA1": "b95bb54e8c9c0942b5410aab886ea95588ad09e8",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java\nindex 9d8959d..60ad720 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java\n@@ -347,7 +347,7 @@\n \n \tprivate static class DataSourceBeanCreationException extends BeanCreationException {\n \n-\t\tpublic DataSourceBeanCreationException(EmbeddedDatabaseConnection connection,\n+\t\tDataSourceBeanCreationException(EmbeddedDatabaseConnection connection,\n \t\t\t\tEnvironment environment, String property) {\n \t\t\tsuper(getMessage(connection, environment, property));\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 350,
    "bugNodeStartChar": 8072,
    "bugNodeLength": 186,
    "fixLineNum": 350,
    "fixNodeStartChar": 8072,
    "fixNodeLength": 179,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "44c122307e968c2aabc4a89d410c804c632246b1",
    "fixCommitParentSHA1": "676efe7ad6c1e14a4fbf454a4366b5a5ea31d786",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex 9a58706..3df9993 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -223,7 +223,7 @@\n \t@Test\n \tpublic void specificPort() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n-\t\tint specificPort = SocketUtils.findAvailableTcpPort(40000);\n+\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n \t\tfactory.setPort(specificPort);\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 226,
    "bugNodeStartChar": 7988,
    "bugNodeLength": 39,
    "fixLineNum": 226,
    "fixNodeStartChar": 7988,
    "fixNodeLength": 39,
    "sourceBeforeFix": "SocketUtils.findAvailableTcpPort(40000)",
    "sourceAfterFix": "SocketUtils.findAvailableTcpPort(41000)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d10dd137149cea58a3b085abe116a1ca2cb69b67",
    "fixCommitParentSHA1": "1be439485502e0fd556e01139cf3b2481c05cc8f",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\nindex 0a53cb1..29c98bb 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n@@ -192,7 +192,7 @@\n \t */\n \tprivate void applyCglibFilters(ObjectMapper mapper) {\n \t\tmapper.setAnnotationIntrospector(new CglibAnnotationIntrospector());\n-\t\tmapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,\n+\t\tmapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,\n \t\t\t\tnew CglibBeanPropertyFilter()));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 195,
    "bugNodeStartChar": 7265,
    "bugNodeLength": 107,
    "fixLineNum": 195,
    "fixNodeStartChar": 7265,
    "fixNodeLength": 114,
    "sourceBeforeFix": "mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))",
    "sourceAfterFix": "mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d10dd137149cea58a3b085abe116a1ca2cb69b67",
    "fixCommitParentSHA1": "1be439485502e0fd556e01139cf3b2481c05cc8f",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\nindex 0a53cb1..29c98bb 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n@@ -192,7 +192,7 @@\n \t */\n \tprivate void applyCglibFilters(ObjectMapper mapper) {\n \t\tmapper.setAnnotationIntrospector(new CglibAnnotationIntrospector());\n-\t\tmapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,\n+\t\tmapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,\n \t\t\t\tnew CglibBeanPropertyFilter()));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 195,
    "bugNodeStartChar": 7265,
    "bugNodeLength": 107,
    "fixLineNum": 195,
    "fixNodeStartChar": 7265,
    "fixNodeLength": 114,
    "sourceBeforeFix": "mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))",
    "sourceAfterFix": "mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "3174f898c6f3256427d08907ed4b8a1ad6513df1",
    "fixCommitParentSHA1": "6746a0af7bd5a5217891d2f5de4d6755db5a0a7a",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\nindex 35d0c75..1db49ae 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -173,7 +173,7 @@\n \t@Test\n \tpublic void loggingLevelIsPropagatedToJulI() {\n \t\tthis.loggingSystem.beforeInitialize();\n-\t\tthis.loggingSystem.initialize(null, null);\n+\t\tthis.loggingSystem.initialize(this.initializationContext, null, null);\n \t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 176,
    "bugNodeStartChar": 6366,
    "bugNodeLength": 41,
    "fixLineNum": 176,
    "fixNodeStartChar": 6366,
    "fixNodeLength": 69,
    "sourceBeforeFix": "this.loggingSystem.initialize(null,null)",
    "sourceAfterFix": "this.loggingSystem.initialize(this.initializationContext,null,null)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a5430d8a0c8367c5c0646da6b78374295bd33737",
    "fixCommitParentSHA1": "b7e9f805c94e67b56d9c3a9cc201c19dc2e759f9",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\nindex a53a66c..ca6b64f 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -147,8 +147,9 @@\n \t\t\tvendorProperties.put(JTA_PLATFORM, new SpringJtaPlatform(\n \t\t\t\t\tjtaTransactionManager));\n \t\t}\n-\t\tcatch (NoClassDefFoundError ex) {\n-\t\t\t// Can happen if Hibernate 4.2 is used\n+\t\tcatch (LinkageError ex) {\n+\t\t\t// NoClassDefFoundError can happen if Hibernate 4.2 is used and some\n+\t\t\t// containers (e.g. JBoss EAP 6) wraps it in the superclass LinkageError\n \t\t\tif (!isUsingJndi()) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set Hibernate JTA \"\n \t\t\t\t\t\t+ \"platform, are you using the correct \"\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 150,
    "bugNodeStartChar": 5837,
    "bugNodeLength": 23,
    "fixLineNum": 150,
    "fixNodeStartChar": 5837,
    "fixNodeLength": 15,
    "sourceBeforeFix": "NoClassDefFoundError ex",
    "sourceAfterFix": "LinkageError ex"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "b7e9f805c94e67b56d9c3a9cc201c19dc2e759f9",
    "fixCommitParentSHA1": "e69a5879b0c162492990d3c03a9aaed97ff471af",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\nindex eeda381..4c827d8 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -56,7 +56,7 @@\n  * @author Andy Wilkinson\n  * @author Ivan Sopov\n  */\n-@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = false)\n+@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = true)\n public class ServerProperties implements EmbeddedServletContainerCustomizer, Ordered {\n \n \t/**\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 59,
    "bugNodeStartChar": 2672,
    "bugNodeLength": 27,
    "fixLineNum": 59,
    "fixNodeStartChar": 2672,
    "fixNodeLength": 26,
    "sourceBeforeFix": "ignoreUnknownFields=false",
    "sourceAfterFix": "ignoreUnknownFields=true"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "bd942a35fbf90739b19b5d1e292bed63cfc0a865",
    "fixCommitParentSHA1": "0b24a4417a6a4d33ecd964a5679e673bf4241d85",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\nindex b3c1fff..8c66a5c 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -101,7 +101,7 @@\n \t\t\t\tobjectMapper.registerModule(new Jackson2HalModule());\n \t\t\t\tJackson2HalModule.HalHandlerInstantiator instantiator = new Jackson2HalModule.HalHandlerInstantiator(\n \t\t\t\t\t\tHalObjectMapperConfiguration.this.relProvider,\n-\t\t\t\t\t\tHalObjectMapperConfiguration.this.curieProvider);\n+\t\t\t\t\t\tHalObjectMapperConfiguration.this.curieProvider, null);\n \t\t\t\tobjectMapper.setHandlerInstantiator(instantiator);\n \t\t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 102,
    "bugNodeStartChar": 4308,
    "bugNodeLength": 153,
    "fixLineNum": 102,
    "fixNodeStartChar": 4308,
    "fixNodeLength": 159,
    "sourceBeforeFix": "new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider)",
    "sourceAfterFix": "new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider,null)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b3c2d1521f396a5d30a132be0d4e6d648ddc6444",
    "fixCommitParentSHA1": "2c619232b3a734510f2901bc2e01dc6bedf25275",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\nindex c898557..ba68424 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n@@ -55,8 +55,8 @@\n \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n-\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n-\t\t\t\t\t.getChannelSendCount(name)));\n+\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n+\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter\n@@ -66,8 +66,8 @@\n \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n-\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n-\t\t\t\t.getActiveHandlerCountLong()));\n+\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n+\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 1921,
    "bugNodeLength": 15,
    "fixLineNum": 58,
    "fixNodeStartChar": 1921,
    "fixNodeLength": 12,
    "sourceBeforeFix": "Metric<Integer>",
    "sourceAfterFix": "Metric<Long>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b3c2d1521f396a5d30a132be0d4e6d648ddc6444",
    "fixCommitParentSHA1": "2c619232b3a734510f2901bc2e01dc6bedf25275",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\nindex c898557..ba68424 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n@@ -55,8 +55,8 @@\n \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n-\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n-\t\t\t\t\t.getChannelSendCount(name)));\n+\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n+\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter\n@@ -66,8 +66,8 @@\n \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n-\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n-\t\t\t\t.getActiveHandlerCountLong()));\n+\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n+\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 69,
    "bugNodeStartChar": 2405,
    "bugNodeLength": 12,
    "fixLineNum": 69,
    "fixNodeStartChar": 2405,
    "fixNodeLength": 15,
    "sourceBeforeFix": "Metric<Long>",
    "sourceAfterFix": "Metric<Integer>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3ec97c1bb9c55bded42db23e7b2d3e614659f7df",
    "fixCommitParentSHA1": "2c619232b3a734510f2901bc2e01dc6bedf25275",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\nindex c898557..ba68424 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n@@ -55,8 +55,8 @@\n \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n-\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n-\t\t\t\t\t.getChannelSendCount(name)));\n+\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n+\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter\n@@ -66,8 +66,8 @@\n \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n-\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n-\t\t\t\t.getActiveHandlerCountLong()));\n+\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n+\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 58,
    "bugNodeStartChar": 1921,
    "bugNodeLength": 15,
    "fixLineNum": 58,
    "fixNodeStartChar": 1921,
    "fixNodeLength": 12,
    "sourceBeforeFix": "Metric<Integer>",
    "sourceAfterFix": "Metric<Long>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3ec97c1bb9c55bded42db23e7b2d3e614659f7df",
    "fixCommitParentSHA1": "2c619232b3a734510f2901bc2e01dc6bedf25275",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\nindex c898557..ba68424 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n@@ -55,8 +55,8 @@\n \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n-\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n-\t\t\t\t\t.getChannelSendCount(name)));\n+\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n+\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter\n@@ -66,8 +66,8 @@\n \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n-\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n-\t\t\t\t.getActiveHandlerCountLong()));\n+\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n+\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 69,
    "bugNodeStartChar": 2405,
    "bugNodeLength": 12,
    "fixLineNum": 69,
    "fixNodeStartChar": 2405,
    "fixNodeLength": 15,
    "sourceBeforeFix": "Metric<Long>",
    "sourceAfterFix": "Metric<Integer>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 156,
    "bugNodeStartChar": 7025,
    "bugNodeLength": 43,
    "fixLineNum": 156,
    "fixNodeStartChar": 7025,
    "fixNodeLength": 42,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 196,
    "bugNodeStartChar": 8319,
    "bugNodeLength": 46,
    "fixLineNum": 196,
    "fixNodeStartChar": 8319,
    "fixNodeLength": 45,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 213,
    "bugNodeStartChar": 8824,
    "bugNodeLength": 46,
    "fixLineNum": 213,
    "fixNodeStartChar": 8824,
    "fixNodeLength": 45,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 231,
    "bugNodeStartChar": 9362,
    "bugNodeLength": 47,
    "fixLineNum": 231,
    "fixNodeStartChar": 9362,
    "fixNodeLength": 46,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 248,
    "bugNodeStartChar": 9864,
    "bugNodeLength": 45,
    "fixLineNum": 248,
    "fixNodeStartChar": 9864,
    "fixNodeLength": 44,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 264,
    "bugNodeStartChar": 10302,
    "bugNodeLength": 50,
    "fixLineNum": 264,
    "fixNodeStartChar": 10302,
    "fixNodeLength": 49,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 283,
    "bugNodeStartChar": 10871,
    "bugNodeLength": 45,
    "fixLineNum": 283,
    "fixNodeStartChar": 10871,
    "fixNodeLength": 44,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 301,
    "bugNodeStartChar": 11391,
    "bugNodeLength": 44,
    "fixLineNum": 301,
    "fixNodeStartChar": 11391,
    "fixNodeLength": 43,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 318,
    "bugNodeStartChar": 11906,
    "bugNodeLength": 54,
    "fixLineNum": 318,
    "fixNodeStartChar": 11906,
    "fixNodeLength": 53,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java\nindex 2dba841..2355200 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java\n@@ -31,7 +31,7 @@\n  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n \n-\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class\n+\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnabledHealthIndicator.class\n \t\t\t.getName();\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1363,
    "bugNodeLength": 42,
    "fixLineNum": 34,
    "fixNodeStartChar": 1363,
    "fixNodeLength": 41,
    "sourceBeforeFix": "ConditionalOnEnablednHealthIndicator.class",
    "sourceAfterFix": "ConditionalOnEnabledHealthIndicator.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 156,
    "bugNodeStartChar": 7025,
    "bugNodeLength": 43,
    "fixLineNum": 156,
    "fixNodeStartChar": 7025,
    "fixNodeLength": 42,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 196,
    "bugNodeStartChar": 8319,
    "bugNodeLength": 46,
    "fixLineNum": 196,
    "fixNodeStartChar": 8319,
    "fixNodeLength": 45,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 213,
    "bugNodeStartChar": 8824,
    "bugNodeLength": 46,
    "fixLineNum": 213,
    "fixNodeStartChar": 8824,
    "fixNodeLength": 45,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 231,
    "bugNodeStartChar": 9362,
    "bugNodeLength": 47,
    "fixLineNum": 231,
    "fixNodeStartChar": 9362,
    "fixNodeLength": 46,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 248,
    "bugNodeStartChar": 9864,
    "bugNodeLength": 45,
    "fixLineNum": 248,
    "fixNodeStartChar": 9864,
    "fixNodeLength": 44,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 264,
    "bugNodeStartChar": 10302,
    "bugNodeLength": 50,
    "fixLineNum": 264,
    "fixNodeStartChar": 10302,
    "fixNodeLength": 49,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 283,
    "bugNodeStartChar": 10871,
    "bugNodeLength": 45,
    "fixLineNum": 283,
    "fixNodeStartChar": 10871,
    "fixNodeLength": 44,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 301,
    "bugNodeStartChar": 11391,
    "bugNodeLength": 44,
    "fixLineNum": 301,
    "fixNodeStartChar": 11391,
    "fixNodeLength": 43,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 318,
    "bugNodeStartChar": 11906,
    "bugNodeLength": 54,
    "fixLineNum": 318,
    "fixNodeStartChar": 11906,
    "fixNodeLength": 53,
    "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")",
    "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6",
    "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java\nindex 2dba841..2355200 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledHealthIndicatorCondition.java\n@@ -31,7 +31,7 @@\n  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n \n-\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class\n+\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnabledHealthIndicator.class\n \t\t\t.getName();\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 34,
    "bugNodeStartChar": 1363,
    "bugNodeLength": 42,
    "fixLineNum": 34,
    "fixNodeStartChar": 1363,
    "fixNodeLength": 41,
    "sourceBeforeFix": "ConditionalOnEnablednHealthIndicator.class",
    "sourceAfterFix": "ConditionalOnEnabledHealthIndicator.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1e3c0da4bdd228f518ad7297096fdc26c9d53ead",
    "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\nindex b9582f6..52baf22 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n@@ -53,9 +53,9 @@\n public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n \n-\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n+\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n \n-\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n+\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \n \tprivate final Log logger = LogFactory.getLog(getClass());\n \n@@ -308,13 +308,13 @@\n \t\tif (this.ignoreUnknownFields && !isMapTarget()) {\n \t\t\t// Since unknown fields are ignored we can filter them out early to save\n \t\t\t// unnecessary calls to the PropertySource.\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS, true, names);\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS, true, names);\n \t\t}\n \t\tif (this.targetName != null) {\n \t\t\t// We can filter properties to those starting with the target name, but\n \t\t\t// we can't do a complete filter since we need to trigger the\n \t\t\t// unknown fields check\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,\n \t\t\t\t\tthis.targetName);\n \t\t}\n \t\t// Not ideal, we basically can't filter anything\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 311,
    "bugNodeStartChar": 9600,
    "bugNodeLength": 69,
    "fixLineNum": 311,
    "fixNodeStartChar": 9600,
    "fixNodeLength": 69,
    "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)",
    "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1e3c0da4bdd228f518ad7297096fdc26c9d53ead",
    "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\nindex b9582f6..52baf22 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n@@ -53,9 +53,9 @@\n public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n \n-\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n+\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n \n-\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n+\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \n \tprivate final Log logger = LogFactory.getLog(getClass());\n \n@@ -308,13 +308,13 @@\n \t\tif (this.ignoreUnknownFields && !isMapTarget()) {\n \t\t\t// Since unknown fields are ignored we can filter them out early to save\n \t\t\t// unnecessary calls to the PropertySource.\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS, true, names);\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS, true, names);\n \t\t}\n \t\tif (this.targetName != null) {\n \t\t\t// We can filter properties to those starting with the target name, but\n \t\t\t// we can't do a complete filter since we need to trigger the\n \t\t\t// unknown fields check\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,\n \t\t\t\t\tthis.targetName);\n \t\t}\n \t\t// Not ideal, we basically can't filter anything\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 317,
    "bugNodeStartChar": 9885,
    "bugNodeLength": 84,
    "fixLineNum": 317,
    "fixNodeStartChar": 9885,
    "fixNodeLength": 84,
    "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)",
    "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1e3c0da4bdd228f518ad7297096fdc26c9d53ead",
    "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\nindex 6247e48..ed273d5 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\n@@ -69,9 +69,9 @@\n \n \t@Test\n \tpublic void withSquareBrackets() throws Exception {\n-\t\tchar[] delimeters = \"._[\".toCharArray();\n+\t\tchar[] delimiters = \"._[\".toCharArray();\n \t\tPropertyNamePatternsMatcher matcher = new DefaultPropertyNamePatternsMatcher(\n-\t\t\t\tdelimeters, \"aaa\", \"bbbb\", \"ccccc\");\n+\t\t\t\tdelimiters, \"aaa\", \"bbbb\", \"ccccc\");\n \t\tassertTrue(matcher.matches(\"bbbb\"));\n \t\tassertTrue(matcher.matches(\"bbbb[4]\"));\n \t\tassertFalse(matcher.matches(\"bbb[4]\"));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2122,
    "bugNodeLength": 79,
    "fixLineNum": 73,
    "fixNodeStartChar": 2122,
    "fixNodeLength": 79,
    "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(delimeters,\"aaa\",\"bbbb\",\"ccccc\")",
    "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(delimiters,\"aaa\",\"bbbb\",\"ccccc\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7dc9bddf9a64d9309755accddeb91976371792ed",
    "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\nindex b9582f6..52baf22 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n@@ -53,9 +53,9 @@\n public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n \n-\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n+\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n \n-\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n+\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \n \tprivate final Log logger = LogFactory.getLog(getClass());\n \n@@ -308,13 +308,13 @@\n \t\tif (this.ignoreUnknownFields && !isMapTarget()) {\n \t\t\t// Since unknown fields are ignored we can filter them out early to save\n \t\t\t// unnecessary calls to the PropertySource.\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS, true, names);\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS, true, names);\n \t\t}\n \t\tif (this.targetName != null) {\n \t\t\t// We can filter properties to those starting with the target name, but\n \t\t\t// we can't do a complete filter since we need to trigger the\n \t\t\t// unknown fields check\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,\n \t\t\t\t\tthis.targetName);\n \t\t}\n \t\t// Not ideal, we basically can't filter anything\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 311,
    "bugNodeStartChar": 9600,
    "bugNodeLength": 69,
    "fixLineNum": 311,
    "fixNodeStartChar": 9600,
    "fixNodeLength": 69,
    "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)",
    "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7dc9bddf9a64d9309755accddeb91976371792ed",
    "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\nindex b9582f6..52baf22 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n@@ -53,9 +53,9 @@\n public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n \n-\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n+\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n \n-\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n+\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \n \tprivate final Log logger = LogFactory.getLog(getClass());\n \n@@ -308,13 +308,13 @@\n \t\tif (this.ignoreUnknownFields && !isMapTarget()) {\n \t\t\t// Since unknown fields are ignored we can filter them out early to save\n \t\t\t// unnecessary calls to the PropertySource.\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS, true, names);\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS, true, names);\n \t\t}\n \t\tif (this.targetName != null) {\n \t\t\t// We can filter properties to those starting with the target name, but\n \t\t\t// we can't do a complete filter since we need to trigger the\n \t\t\t// unknown fields check\n-\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,\n+\t\t\treturn new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,\n \t\t\t\t\tthis.targetName);\n \t\t}\n \t\t// Not ideal, we basically can't filter anything\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 317,
    "bugNodeStartChar": 9885,
    "bugNodeLength": 84,
    "fixLineNum": 317,
    "fixNodeStartChar": 9885,
    "fixNodeLength": 84,
    "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)",
    "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7dc9bddf9a64d9309755accddeb91976371792ed",
    "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\nindex 6247e48..ed273d5 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\n@@ -69,9 +69,9 @@\n \n \t@Test\n \tpublic void withSquareBrackets() throws Exception {\n-\t\tchar[] delimeters = \"._[\".toCharArray();\n+\t\tchar[] delimiters = \"._[\".toCharArray();\n \t\tPropertyNamePatternsMatcher matcher = new DefaultPropertyNamePatternsMatcher(\n-\t\t\t\tdelimeters, \"aaa\", \"bbbb\", \"ccccc\");\n+\t\t\t\tdelimiters, \"aaa\", \"bbbb\", \"ccccc\");\n \t\tassertTrue(matcher.matches(\"bbbb\"));\n \t\tassertTrue(matcher.matches(\"bbbb[4]\"));\n \t\tassertFalse(matcher.matches(\"bbb[4]\"));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2122,
    "bugNodeLength": 79,
    "fixLineNum": 73,
    "fixNodeStartChar": 2122,
    "fixNodeLength": 79,
    "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(delimeters,\"aaa\",\"bbbb\",\"ccccc\")",
    "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(delimiters,\"aaa\",\"bbbb\",\"ccccc\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "178c690d37e7a329ad0a7a9349f3950f57dc4dde",
    "fixCommitParentSHA1": "16dac01886f5b7bacb11302c8213ee1d17a6ccf0",
    "bugFilePath": "spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java\nindex 0a35c94..b247a9b 100644\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java\n@@ -50,7 +50,7 @@\n \n \tpublic void write(ConfigurationMetadata metadata, OutputStream outputStream)\n \t\t\tthrows IOException {\n-\t\tJSONObject object = new JSONObject();\n+\t\tJSONObject object = new JSONOrderedObject();\n \t\tobject.put(\"groups\", toJsonArray(metadata, ItemType.GROUP));\n \t\tobject.put(\"properties\", toJsonArray(metadata, ItemType.PROPERTY));\n \t\tobject.put(\"hints\", toJsonArray(metadata.getHints()));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 1637,
    "bugNodeLength": 16,
    "fixLineNum": 53,
    "fixNodeStartChar": 1637,
    "fixNodeLength": 23,
    "sourceBeforeFix": "new JSONObject()",
    "sourceAfterFix": "new JSONOrderedObject()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "68d875bdc642856e2c47d67183bdf6a05cfc4895",
    "fixCommitParentSHA1": "e52c190b05b8d882f345df3283aa481a84df1355",
    "bugFilePath": "spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/DescriptionExtractor.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/DescriptionExtractor.java b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/DescriptionExtractor.java\nindex d59745c..d4d346d 100644\n--- a/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/DescriptionExtractor.java\n+++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/DescriptionExtractor.java\n@@ -20,13 +20,13 @@\n import java.util.Locale;\n \n /**\n- * Utility to extract a descriptions.\n+ * Utility to extract a description.\n  *\n  * @author Stephane Nicoll\n  */\n class DescriptionExtractor {\n \n-\tprivate static final String NEW_LINE = System.getProperty(\"line.separator\");\n+\tstatic final String NEW_LINE = System.getProperty(\"line.separator\");\n \n \tpublic String getShortDescription(String description) {\n \t\tif (description == null) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 29,
    "bugNodeStartChar": 844,
    "bugNodeLength": 76,
    "fixLineNum": 29,
    "fixNodeStartChar": 844,
    "fixNodeLength": 68,
    "sourceBeforeFix": "26",
    "sourceAfterFix": "24"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4dda1814e2539a3c4014b20fe14a5f99f616b293",
    "fixCommitParentSHA1": "8cb6f7bcb81756195a9e7bb996ddf98c23a7ba25",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java\nindex 6509fd7..1054cf7 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java\n@@ -84,7 +84,7 @@\n \t\t@Override\n \t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n \t\t\t\tthrows BeansException {\n-\t\t\tfor (String name : beanFactory.getBeanNamesForType(CacheAspectSupport.class)) {\n+\t\t\tfor (String name : beanFactory.getBeanNamesForType(CacheAspectSupport.class, false, false)) {\n \t\t\t\tBeanDefinition definition = beanFactory.getBeanDefinition(name);\n \t\t\t\tdefinition.setDependsOn(append(definition.getDependsOn(),\n \t\t\t\t\t\tVALIDATOR_BEAN_NAME));\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 87,
    "bugNodeStartChar": 3837,
    "bugNodeLength": 57,
    "fixLineNum": 87,
    "fixNodeStartChar": 3837,
    "fixNodeLength": 71,
    "sourceBeforeFix": "beanFactory.getBeanNamesForType(CacheAspectSupport.class)",
    "sourceAfterFix": "beanFactory.getBeanNamesForType(CacheAspectSupport.class,false,false)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "3de25164527f5011df4ea2c889794a7c72bcf5ce",
    "fixCommitParentSHA1": "3588ca8637ebf429223333add3815f408250de5a",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\nindex 9c67a3d..d89783a 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -109,7 +109,7 @@\n \n \tprivate LoggingSystem loggingSystem;\n \n-\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 11;\n+\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 20;\n \n \tprivate boolean parseArgs = true;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 112,
    "bugNodeStartChar": 4463,
    "bugNodeLength": 31,
    "fixLineNum": 112,
    "fixNodeStartChar": 4463,
    "fixNodeLength": 31,
    "sourceBeforeFix": "Ordered.HIGHEST_PRECEDENCE + 11",
    "sourceAfterFix": "Ordered.HIGHEST_PRECEDENCE + 20"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "94e41b41908f47ecde2ec9d7ad0021eb6af4cf04",
    "fixCommitParentSHA1": "7410eee34f01da6d04087bf5f058c77ad85818e1",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\nindex a1f2020..66aec2b 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -296,7 +296,7 @@\n \t\tthis.applicationContext.refresh();\n \t\t// /health, /metrics, /env (/shutdown is disabled by default)\n \t\tassertThat(this.applicationContext.getBeansOfType(MvcEndpoint.class).size(),\n-\t\t\t\tis(equalTo(6)));\n+\t\t\t\tis(equalTo(5)));\n \t}\n \n \t@Test\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 299,
    "bugNodeStartChar": 13670,
    "bugNodeLength": 10,
    "fixLineNum": 299,
    "fixNodeStartChar": 13670,
    "fixNodeLength": 10,
    "sourceBeforeFix": "equalTo(6)",
    "sourceAfterFix": "equalTo(5)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bbb27cf272ba5d2dc74f8f21d1d3a92486e27ee1",
    "fixCommitParentSHA1": "93a7dc21da56730922ac8e5037a674e33f2d5d61",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java\nindex c7cf734..b23f5c1 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,7 +36,7 @@\n  */\n class HornetQEmbeddedConfigurationFactory {\n \n-\tprivate Log logger = LogFactory.getLog(HornetQAutoConfiguration.class);\n+\tprivate Log logger = LogFactory.getLog(HornetQEmbeddedConfigurationFactory.class);\n \n \tprivate final Embedded properties;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 39,
    "bugNodeStartChar": 1391,
    "bugNodeLength": 30,
    "fixLineNum": 39,
    "fixNodeStartChar": 1391,
    "fixNodeLength": 41,
    "sourceBeforeFix": "HornetQAutoConfiguration.class",
    "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6d5ff33bdffa1e4a8b9e9c999604a9a84dc9426c",
    "fixCommitParentSHA1": "93a7dc21da56730922ac8e5037a674e33f2d5d61",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java\nindex c7cf734..b23f5c1 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,7 +36,7 @@\n  */\n class HornetQEmbeddedConfigurationFactory {\n \n-\tprivate Log logger = LogFactory.getLog(HornetQAutoConfiguration.class);\n+\tprivate Log logger = LogFactory.getLog(HornetQEmbeddedConfigurationFactory.class);\n \n \tprivate final Embedded properties;\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 39,
    "bugNodeStartChar": 1391,
    "bugNodeLength": 30,
    "fixLineNum": 39,
    "fixNodeStartChar": 1391,
    "fixNodeLength": 41,
    "sourceBeforeFix": "HornetQAutoConfiguration.class",
    "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "dc94fafaaa5fceb5a2ccaae7342bdf4030e05d14",
    "fixCommitParentSHA1": "01ba732a7385417e0fe4d0bb2e4b52b4cf04a3c7",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\nindex b9b30d4..5385148 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,7 +82,7 @@\n \t@Bean\n \t@ConditionalOnProperty(prefix = \"spring.rabbitmq\", name = \"dynamic\", matchIfMissing = true)\n \t@ConditionalOnMissingBean(AmqpAdmin.class)\n-\tpublic AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n+\tpublic AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {\n \t\treturn new RabbitAdmin(connectionFactory);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 85,
    "bugNodeStartChar": 3628,
    "bugNodeLength": 42,
    "fixLineNum": 85,
    "fixNodeStartChar": 3628,
    "fixNodeLength": 35,
    "sourceBeforeFix": "CachingConnectionFactory connectionFactory",
    "sourceAfterFix": "ConnectionFactory connectionFactory"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "91ce0abe48c7670f567f7b6584883d56fd3306cf",
    "fixCommitParentSHA1": "6ea27024c3b2429108434d6db713a52a53950ed6",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\nindex 2469a61..83a1cdb 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -178,7 +178,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n-\t\tpublic RedisOperations<Object, Object> redisTemplate(\n+\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 181,
    "bugNodeStartChar": 6157,
    "bugNodeLength": 31,
    "fixLineNum": 181,
    "fixNodeStartChar": 6157,
    "fixNodeLength": 29,
    "sourceBeforeFix": "RedisOperations<Object,Object>",
    "sourceAfterFix": "RedisTemplate<Object,Object>"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "c9c1e8b5173d3dd69475f7a1711606ffaf7f88a8",
    "fixCommitParentSHA1": "fbe97748900f2c899fabeb881fd15d7b318c3326",
    "bugFilePath": "spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java",
    "fixPatch": "diff --git a/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java b/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\nindex 8f0b4fd..dbf825c 100644\n--- a/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n@@ -42,7 +42,7 @@\n \t\t\tInterruptedException {\n \t\tInvocation cli = this.cli.invoke(\"hint\");\n \t\tassertThat(cli.await(), equalTo(0));\n-\t\tassertThat(cli.getErrorOutput().length(), equalTo(0));\n+\t\tassertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(), cli.getErrorOutput().length(), equalTo(0));\n \t\tassertThat(cli.getStandardOutputLines().size(), equalTo(10));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 45,
    "bugNodeStartChar": 1454,
    "bugNodeLength": 53,
    "fixLineNum": 45,
    "fixNodeStartChar": 1454,
    "fixNodeLength": 100,
    "sourceBeforeFix": "assertThat(cli.getErrorOutput().length(),equalTo(0))",
    "sourceAfterFix": "assertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(),cli.getErrorOutput().length(),equalTo(0))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "dfdb8015332767b0678bff667e07b82a084a86fd",
    "fixCommitParentSHA1": "4b9cb6afeed1b85ca1084bd1d2b72c4bdbf836c0",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\nindex e734013..7e0d7a4 100755\n--- a/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\n@@ -70,7 +70,7 @@\n \t@Test\n \tpublic void testCreate() throws Exception {\n \t\tthis.mockMvc.perform(post(\"/\").param(\"text\", \"FOO text\").param(\"summary\", \"FOO\"))\n-\t\t\t\t.andExpect(status().isMovedTemporarily())\n+\t\t\t\t.andExpect(status().isFound())\n \t\t\t\t.andExpect(header().string(\"location\", RegexMatcher.matches(\"/[0-9]+\")));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2664,
    "bugNodeLength": 29,
    "fixLineNum": 73,
    "fixNodeStartChar": 2664,
    "fixNodeLength": 18,
    "sourceBeforeFix": "status().isMovedTemporarily()",
    "sourceAfterFix": "status().isFound()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "dfdb8015332767b0678bff667e07b82a084a86fd",
    "fixCommitParentSHA1": "4b9cb6afeed1b85ca1084bd1d2b72c4bdbf836c0",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\nindex e734013..7e0d7a4 100755\n--- a/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\n@@ -70,7 +70,7 @@\n \t@Test\n \tpublic void testCreate() throws Exception {\n \t\tthis.mockMvc.perform(post(\"/\").param(\"text\", \"FOO text\").param(\"summary\", \"FOO\"))\n-\t\t\t\t.andExpect(status().isMovedTemporarily())\n+\t\t\t\t.andExpect(status().isFound())\n \t\t\t\t.andExpect(header().string(\"location\", RegexMatcher.matches(\"/[0-9]+\")));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 73,
    "bugNodeStartChar": 2664,
    "bugNodeLength": 29,
    "fixLineNum": 73,
    "fixNodeStartChar": 2664,
    "fixNodeLength": 18,
    "sourceBeforeFix": "status().isMovedTemporarily()",
    "sourceAfterFix": "status().isFound()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "dfdb8015332767b0678bff667e07b82a084a86fd",
    "fixCommitParentSHA1": "4b9cb6afeed1b85ca1084bd1d2b72c4bdbf836c0",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java b/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\nindex 7ba7c35..48cfa67 100755\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n@@ -68,7 +68,7 @@\n \t@Test\n \tpublic void testCreate() throws Exception {\n \t\tthis.mockMvc.perform(post(\"/\").param(\"text\", \"FOO text\").param(\"summary\", \"FOO\"))\n-\t\t\t\t.andExpect(status().isMovedTemporarily())\n+\t\t\t\t.andExpect(status().isFound())\n \t\t\t\t.andExpect(header().string(\"location\", RegexMatcher.matches(\"/[0-9]+\")));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 71,
    "bugNodeStartChar": 2563,
    "bugNodeLength": 29,
    "fixLineNum": 71,
    "fixNodeStartChar": 2563,
    "fixNodeLength": 18,
    "sourceBeforeFix": "status().isMovedTemporarily()",
    "sourceAfterFix": "status().isFound()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "dfdb8015332767b0678bff667e07b82a084a86fd",
    "fixCommitParentSHA1": "4b9cb6afeed1b85ca1084bd1d2b72c4bdbf836c0",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java b/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\nindex 7ba7c35..48cfa67 100755\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n@@ -68,7 +68,7 @@\n \t@Test\n \tpublic void testCreate() throws Exception {\n \t\tthis.mockMvc.perform(post(\"/\").param(\"text\", \"FOO text\").param(\"summary\", \"FOO\"))\n-\t\t\t\t.andExpect(status().isMovedTemporarily())\n+\t\t\t\t.andExpect(status().isFound())\n \t\t\t\t.andExpect(header().string(\"location\", RegexMatcher.matches(\"/[0-9]+\")));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 71,
    "bugNodeStartChar": 2563,
    "bugNodeLength": 29,
    "fixLineNum": 71,
    "fixNodeStartChar": 2563,
    "fixNodeLength": 18,
    "sourceBeforeFix": "status().isMovedTemporarily()",
    "sourceAfterFix": "status().isFound()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5f959c557973923b797770cac7e01032e89d63c9",
    "fixCommitParentSHA1": "fb195b2ad7db40ac019a50335eb778d131120ecc",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex f326ae6..0c31c16 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -377,7 +377,8 @@\n \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n-\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\"));\n+\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\",\n+\t\t\t\t\"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 380,
    "bugNodeStartChar": 14293,
    "bugNodeLength": 66,
    "fixLineNum": 380,
    "fixNodeStartChar": 14293,
    "fixNodeLength": 101,
    "sourceBeforeFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\")",
    "sourceAfterFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\",\"src/test/resources/test.jks\")"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "bfa984ccd5ef4b7eef802f54999fc947531ef51f",
    "fixCommitParentSHA1": "8d12130a2b0e18eeeba872590e45108ddd9a6677",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java\nindex d858d06..5b3ef16 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java\n@@ -36,7 +36,7 @@\n \t@Bean\n \t@ConditionalOnMissingBean(PersistenceExceptionTranslationPostProcessor.class)\n \t@ConditionalOnProperty(prefix = \"spring.dao.exceptiontranslation\", name = \"enabled\", matchIfMissing = true)\n-\tpublic PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {\n+\tpublic static PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {\n \t\tPersistenceExceptionTranslationPostProcessor postProcessor = new PersistenceExceptionTranslationPostProcessor();\n \t\tpostProcessor.setProxyTargetClass(true);\n \t\treturn postProcessor;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 36,
    "bugNodeStartChar": 1419,
    "bugNodeLength": 480,
    "fixLineNum": 36,
    "fixNodeStartChar": 1419,
    "fixNodeLength": 487,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "9"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9f31e09cf0eb035341103471b0e51df96ac9f13c",
    "fixCommitParentSHA1": "4293b7b79709a1c54b4b8c226fb13cc6f3bebadb",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/EmbeddedServerPortFileWriter.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/EmbeddedServerPortFileWriter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/EmbeddedServerPortFileWriter.java\nindex 539cf1b..3fbbe8d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/EmbeddedServerPortFileWriter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/EmbeddedServerPortFileWriter.java\n@@ -46,29 +46,31 @@\n \n \tprivate static final String[] PROPERTY_VARIABLES = { \"PORTFILE\", \"portfile\" };\n \n-\tprivate static final Log logger = LogFactory.getLog(ApplicationPidFileWriter.class);\n+\tprivate static final Log logger = LogFactory\n+\t\t\t.getLog(EmbeddedServerPortFileWriter.class);\n \n \tprivate final File file;\n \n \t/**\n-\t * Create a new {@link ApplicationPidFileWriter} instance using the filename\n-\t * 'application.pid'.\n+\t * Create a new {@link EmbeddedServerPortFileWriter} instance using the filename\n+\t * 'application.port'.\n \t */\n \tpublic EmbeddedServerPortFileWriter() {\n \t\tthis.file = new File(DEFAULT_FILE_NAME);\n \t}\n \n \t/**\n-\t * Create a new {@link ApplicationPidFileWriter} instance with a specified filename.\n-\t * @param filename the name of file containing pid\n+\t * Create a new {@link EmbeddedServerPortFileWriter} instance with a specified\n+\t * filename.\n+\t * @param filename the name of file containing port\n \t */\n \tpublic EmbeddedServerPortFileWriter(String filename) {\n \t\tthis(new File(filename));\n \t}\n \n \t/**\n-\t * Create a new {@link ApplicationPidFileWriter} instance with a specified file.\n-\t * @param file the file containing pid\n+\t * Create a new {@link EmbeddedServerPortFileWriter} instance with a specified file.\n+\t * @param file the file containing port\n \t */\n \tpublic EmbeddedServerPortFileWriter(File file) {\n \t\tAssert.notNull(file, \"File must not be null\");\n@@ -91,7 +93,7 @@\n \t\t\tportFile.deleteOnExit();\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tlogger.warn(String.format(\"Cannot create pid file %s\", this.file));\n+\t\t\tlogger.warn(String.format(\"Cannot create port file %s\", this.file));\n \t\t}\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 49,
    "bugNodeStartChar": 1879,
    "bugNodeLength": 30,
    "fixLineNum": 50,
    "fixNodeStartChar": 1883,
    "fixNodeLength": 34,
    "sourceBeforeFix": "ApplicationPidFileWriter.class",
    "sourceAfterFix": "EmbeddedServerPortFileWriter.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267",
    "fixCommitParentSHA1": "27d9d7fd55335eb853754f0cc6a94124202f7650",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\nindex 84fb11f..957253d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n@@ -236,12 +236,12 @@\n \t\t/**\n \t\t * SSH port.\n \t\t */\n-\t\tprivate String port = \"2000\";\n+\t\tprivate Integer port = 2000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.ssh.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.ssh.port\", String.valueOf(this.port));\n \t\t\t\tif (this.keyPath != null) {\n \t\t\t\t\tconfig.put(\"crash.ssh.keypath\", this.keyPath);\n \t\t\t\t}\n@@ -267,10 +267,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n@@ -291,12 +291,12 @@\n \t\t/**\n \t\t * Telnet port.\n \t\t */\n-\t\tprivate String port = \"5000\";\n+\t\tprivate Integer port = 5000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}\n \n@@ -310,10 +310,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 236,
    "bugNodeStartChar": 6489,
    "bugNodeLength": 56,
    "fixLineNum": 236,
    "fixNodeStartChar": 6489,
    "fixNodeLength": 55,
    "sourceBeforeFix": "/**   * SSH port.  */ private String port=\"2000\"; ",
    "sourceAfterFix": "/**   * SSH port.  */ private Integer port=2000; "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267",
    "fixCommitParentSHA1": "27d9d7fd55335eb853754f0cc6a94124202f7650",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\nindex 84fb11f..957253d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n@@ -236,12 +236,12 @@\n \t\t/**\n \t\t * SSH port.\n \t\t */\n-\t\tprivate String port = \"2000\";\n+\t\tprivate Integer port = 2000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.ssh.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.ssh.port\", String.valueOf(this.port));\n \t\t\t\tif (this.keyPath != null) {\n \t\t\t\t\tconfig.put(\"crash.ssh.keypath\", this.keyPath);\n \t\t\t\t}\n@@ -267,10 +267,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n@@ -291,12 +291,12 @@\n \t\t/**\n \t\t * Telnet port.\n \t\t */\n-\t\tprivate String port = \"5000\";\n+\t\tprivate Integer port = 5000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}\n \n@@ -310,10 +310,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 273,
    "bugNodeStartChar": 7240,
    "bugNodeLength": 50,
    "fixLineNum": 273,
    "fixNodeStartChar": 7240,
    "fixNodeLength": 51,
    "sourceBeforeFix": "public String getPort(){   return this.port; } ",
    "sourceAfterFix": "public Integer getPort(){   return this.port; } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267",
    "fixCommitParentSHA1": "27d9d7fd55335eb853754f0cc6a94124202f7650",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\nindex 84fb11f..957253d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n@@ -236,12 +236,12 @@\n \t\t/**\n \t\t * SSH port.\n \t\t */\n-\t\tprivate String port = \"2000\";\n+\t\tprivate Integer port = 2000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.ssh.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.ssh.port\", String.valueOf(this.port));\n \t\t\t\tif (this.keyPath != null) {\n \t\t\t\t\tconfig.put(\"crash.ssh.keypath\", this.keyPath);\n \t\t\t\t}\n@@ -267,10 +267,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n@@ -291,12 +291,12 @@\n \t\t/**\n \t\t * Telnet port.\n \t\t */\n-\t\tprivate String port = \"5000\";\n+\t\tprivate Integer port = 5000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}\n \n@@ -310,10 +310,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 291,
    "bugNodeStartChar": 7616,
    "bugNodeLength": 59,
    "fixLineNum": 291,
    "fixNodeStartChar": 7616,
    "fixNodeLength": 58,
    "sourceBeforeFix": "/**   * Telnet port.  */ private String port=\"5000\"; ",
    "sourceAfterFix": "/**   * Telnet port.  */ private Integer port=5000; "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267",
    "fixCommitParentSHA1": "27d9d7fd55335eb853754f0cc6a94124202f7650",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\nindex 84fb11f..957253d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n@@ -236,12 +236,12 @@\n \t\t/**\n \t\t * SSH port.\n \t\t */\n-\t\tprivate String port = \"2000\";\n+\t\tprivate Integer port = 2000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.ssh.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.ssh.port\", String.valueOf(this.port));\n \t\t\t\tif (this.keyPath != null) {\n \t\t\t\t\tconfig.put(\"crash.ssh.keypath\", this.keyPath);\n \t\t\t\t}\n@@ -267,10 +267,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n@@ -291,12 +291,12 @@\n \t\t/**\n \t\t * Telnet port.\n \t\t */\n-\t\tprivate String port = \"5000\";\n+\t\tprivate Integer port = 5000;\n \n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n-\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n+\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}\n \n@@ -310,10 +310,10 @@\n \n \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n-\t\t\tthis.port = port.toString();\n+\t\t\tthis.port = port;\n \t\t}\n \n-\t\tpublic String getPort() {\n+\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 316,
    "bugNodeStartChar": 8094,
    "bugNodeLength": 50,
    "fixLineNum": 316,
    "fixNodeStartChar": 8094,
    "fixNodeLength": 51,
    "sourceBeforeFix": "public String getPort(){   return this.port; } ",
    "sourceAfterFix": "public Integer getPort(){   return this.port; } "
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "b519eda44120933736f9fa62d75bba0c1ed47b3d",
    "fixCommitParentSHA1": "49858a0ff1f9c6f823db7b38540fddcd289815b5",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\nindex cb29b3a..55d6b66 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n@@ -56,8 +56,8 @@\n  */\n @Component\n @Order(Ordered.HIGHEST_PRECEDENCE)\n-class ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer implements\n-\t\tFilter, NonEmbeddedServletContainerFactory {\n+public class ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer\n+\t\timplements Filter, NonEmbeddedServletContainerFactory {\n \n \tprivate static Log logger = LogFactory.getLog(ErrorPageFilter.class);\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 43,
    "bugNodeStartChar": 1632,
    "bugNodeLength": 8131,
    "fixLineNum": 43,
    "fixNodeStartChar": 1632,
    "fixNodeLength": 8138,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0757d24d91bfe9ea2256c19aa798a5fa10bb6692",
    "fixCommitParentSHA1": "6ad626de491fe36df67d74ef17baf63d4125e10a",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\nindex 6b4c4a6..88938e8 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n@@ -166,7 +166,7 @@\n \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n-\t\tassertEquals(2, map.size());\n+\t\tassertEquals(3, map.size());\n \t\tassertEquals(null, (map.get(\"map\")));\n \t}\n \n@@ -206,7 +206,8 @@\n \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n-\t\tassertEquals(2, map.size());\n+\t\t// Only one property is mapped in metadata so the others are ignored\n+\t\tassertEquals(1, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 169,
    "bugNodeStartChar": 6352,
    "bugNodeLength": 27,
    "fixLineNum": 169,
    "fixNodeStartChar": 6352,
    "fixNodeLength": 27,
    "sourceBeforeFix": "assertEquals(2,map.size())",
    "sourceAfterFix": "assertEquals(3,map.size())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0757d24d91bfe9ea2256c19aa798a5fa10bb6692",
    "fixCommitParentSHA1": "6ad626de491fe36df67d74ef17baf63d4125e10a",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\nindex 6b4c4a6..88938e8 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n@@ -166,7 +166,7 @@\n \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n-\t\tassertEquals(2, map.size());\n+\t\tassertEquals(3, map.size());\n \t\tassertEquals(null, (map.get(\"map\")));\n \t}\n \n@@ -206,7 +206,8 @@\n \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n-\t\tassertEquals(2, map.size());\n+\t\t// Only one property is mapped in metadata so the others are ignored\n+\t\tassertEquals(1, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 209,
    "bugNodeStartChar": 7927,
    "bugNodeLength": 27,
    "fixLineNum": 210,
    "fixNodeStartChar": 7998,
    "fixNodeLength": 27,
    "sourceBeforeFix": "assertEquals(2,map.size())",
    "sourceAfterFix": "assertEquals(1,map.size())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "354389932a2848f5b2d04a511db5b4e5219026d9",
    "fixCommitParentSHA1": "2f17c3882230fd39bdb8d7678b4e2f9c52e1deb3",
    "bugFilePath": "spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java",
    "fixPatch": "diff --git a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 86b29f7..fe74fb6 100644\n--- a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -48,7 +48,8 @@\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n+\t\t\t\t\t\"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-util-\", \"jetty-xml-\",\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 50,
    "bugNodeStartChar": 1631,
    "bugNodeLength": 121,
    "fixLineNum": 50,
    "fixNodeStartChar": 1631,
    "fixNodeLength": 153,
    "sourceBeforeFix": "Arrays.asList(\"spring-boot-starter-tomcat-\",\"tomcat-embed-core-\",\"tomcat-embed-el-\",\"tomcat-embed-logging-juli-\")",
    "sourceAfterFix": "Arrays.asList(\"spring-boot-starter-tomcat-\",\"tomcat-embed-core-\",\"tomcat-embed-el-\",\"tomcat-embed-logging-juli-\",\"tomcat-embed-websocket-\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "57a4cb1aeef2b6106549c5374f52725c3a4530d3",
    "fixCommitParentSHA1": "e1894c1c4ba5fed7c3b22916f05f50ce6235c4dc",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\nindex a5bc91a..2eeb70c 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n@@ -66,7 +66,7 @@\n \t\tfile = file != null ? file : getExplodedWarFileDocumentRoot();\n \t\t// Or maybe there is a document root in a well-known location\n \t\tfile = file != null ? file : getCommonDocumentRoot();\n-\t\tif (file == null && this.logger.isWarnEnabled()) {\n+\t\tif (file == null && this.logger.isDebugEnabled()) {\n \t\t\tthis.logger.debug(\"None of the document roots \"\n \t\t\t\t\t+ Arrays.asList(COMMON_DOC_ROOTS)\n \t\t\t\t\t+ \" point to a directory and will be ignored.\");\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 69,
    "bugNodeStartChar": 2294,
    "bugNodeLength": 27,
    "fixLineNum": 69,
    "fixNodeStartChar": 2294,
    "fixNodeLength": 28,
    "sourceBeforeFix": "this.logger.isWarnEnabled()",
    "sourceAfterFix": "this.logger.isDebugEnabled()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "57a4cb1aeef2b6106549c5374f52725c3a4530d3",
    "fixCommitParentSHA1": "e1894c1c4ba5fed7c3b22916f05f50ce6235c4dc",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\nindex a5bc91a..2eeb70c 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n@@ -66,7 +66,7 @@\n \t\tfile = file != null ? file : getExplodedWarFileDocumentRoot();\n \t\t// Or maybe there is a document root in a well-known location\n \t\tfile = file != null ? file : getCommonDocumentRoot();\n-\t\tif (file == null && this.logger.isWarnEnabled()) {\n+\t\tif (file == null && this.logger.isDebugEnabled()) {\n \t\t\tthis.logger.debug(\"None of the document roots \"\n \t\t\t\t\t+ Arrays.asList(COMMON_DOC_ROOTS)\n \t\t\t\t\t+ \" point to a directory and will be ignored.\");\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 69,
    "bugNodeStartChar": 2294,
    "bugNodeLength": 27,
    "fixLineNum": 69,
    "fixNodeStartChar": 2294,
    "fixNodeLength": 28,
    "sourceBeforeFix": "this.logger.isWarnEnabled()",
    "sourceAfterFix": "this.logger.isDebugEnabled()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0b116a1a5ac6a369ab9622dce95c969ee591b809",
    "fixCommitParentSHA1": "6c66ff78c0d04c2bc30e9b8c338c8b7e3faf1046",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java\nindex 3fca3a4..1de85df 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java\n@@ -95,7 +95,7 @@\n \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n-\t\tjulLogger.info(\"Hello world\");\n+\t\tjulLogger.severe(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 98,
    "bugNodeStartChar": 3077,
    "bugNodeLength": 29,
    "fixLineNum": 98,
    "fixNodeStartChar": 3077,
    "fixNodeLength": 31,
    "sourceBeforeFix": "julLogger.info(\"Hello world\")",
    "sourceAfterFix": "julLogger.severe(\"Hello world\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0b116a1a5ac6a369ab9622dce95c969ee591b809",
    "fixCommitParentSHA1": "6c66ff78c0d04c2bc30e9b8c338c8b7e3faf1046",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java\nindex 3fca3a4..1de85df 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j/Log4JLoggingSystemTests.java\n@@ -95,7 +95,7 @@\n \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n-\t\tjulLogger.info(\"Hello world\");\n+\t\tjulLogger.severe(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 98,
    "bugNodeStartChar": 3077,
    "bugNodeLength": 29,
    "fixLineNum": 98,
    "fixNodeStartChar": 3077,
    "fixNodeLength": 31,
    "sourceBeforeFix": "julLogger.info(\"Hello world\")",
    "sourceAfterFix": "julLogger.severe(\"Hello world\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0b116a1a5ac6a369ab9622dce95c969ee591b809",
    "fixCommitParentSHA1": "6c66ff78c0d04c2bc30e9b8c338c8b7e3faf1046",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\nindex 9d75c50..20c54d2 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n@@ -96,7 +96,7 @@\n \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n-\t\tjulLogger.info(\"Hello world\");\n+\t\tjulLogger.severe(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 99,
    "bugNodeStartChar": 3103,
    "bugNodeLength": 29,
    "fixLineNum": 99,
    "fixNodeStartChar": 3103,
    "fixNodeLength": 31,
    "sourceBeforeFix": "julLogger.info(\"Hello world\")",
    "sourceAfterFix": "julLogger.severe(\"Hello world\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0b116a1a5ac6a369ab9622dce95c969ee591b809",
    "fixCommitParentSHA1": "6c66ff78c0d04c2bc30e9b8c338c8b7e3faf1046",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\nindex 9d75c50..20c54d2 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n@@ -96,7 +96,7 @@\n \t\tthis.loggingSystem.initialize();\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());\n-\t\tjulLogger.info(\"Hello world\");\n+\t\tjulLogger.severe(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 99,
    "bugNodeStartChar": 3103,
    "bugNodeLength": 29,
    "fixLineNum": 99,
    "fixNodeStartChar": 3103,
    "fixNodeLength": 31,
    "sourceBeforeFix": "julLogger.info(\"Hello world\")",
    "sourceAfterFix": "julLogger.severe(\"Hello world\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b85926e6f0e68368db83db38fca9e33d36796cac",
    "fixCommitParentSHA1": "02fef4295d5acef3ee0503acddd60e0319df3a0d",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java\nindex 0dedf1c..dc00e09 100644\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java\n@@ -30,7 +30,7 @@\n \n \t@Bean\n \tpublic MessageRepository messageRepository() {\n-\t\treturn new InMemoryMessageRespository();\n+\t\treturn new InMemoryMessageRepository();\n \t}\n \n \t@Bean\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 33,
    "bugNodeStartChar": 1158,
    "bugNodeLength": 32,
    "fixLineNum": 33,
    "fixNodeStartChar": 1158,
    "fixNodeLength": 31,
    "sourceBeforeFix": "new InMemoryMessageRespository()",
    "sourceAfterFix": "new InMemoryMessageRepository()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0ff511d978c273a8eae317ecf9f4f1b98e2efb07",
    "fixCommitParentSHA1": "26a528ce95016c0d6f3a239b97aed4e0ecc9a763",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/SpringApplication.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\nindex b307ace..147239f 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -330,7 +330,7 @@\n \t\t\t}\n \t\t\treturn context;\n \t\t}\n-\t\tcatch (Exception ex) {\n+\t\tcatch (Throwable ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);\n@@ -696,7 +696,7 @@\n \t}\n \n \tprivate void finishWithException(SpringApplicationRunListener runListener,\n-\t\t\tConfigurableApplicationContext context, Exception exception) {\n+\t\t\tConfigurableApplicationContext context, Throwable exception) {\n \t\ttry {\n \t\t\trunListener.finished(context, exception);\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 333,
    "bugNodeStartChar": 12004,
    "bugNodeLength": 12,
    "fixLineNum": 333,
    "fixNodeStartChar": 12004,
    "fixNodeLength": 12,
    "sourceBeforeFix": "Exception ex",
    "sourceAfterFix": "Throwable ex"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0ff511d978c273a8eae317ecf9f4f1b98e2efb07",
    "fixCommitParentSHA1": "26a528ce95016c0d6f3a239b97aed4e0ecc9a763",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/SpringApplication.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\nindex b307ace..147239f 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -330,7 +330,7 @@\n \t\t\t}\n \t\t\treturn context;\n \t\t}\n-\t\tcatch (Exception ex) {\n+\t\tcatch (Throwable ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);\n@@ -696,7 +696,7 @@\n \t}\n \n \tprivate void finishWithException(SpringApplicationRunListener runListener,\n-\t\t\tConfigurableApplicationContext context, Exception exception) {\n+\t\t\tConfigurableApplicationContext context, Throwable exception) {\n \t\ttry {\n \t\t\trunListener.finished(context, exception);\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 699,
    "bugNodeStartChar": 25372,
    "bugNodeLength": 19,
    "fixLineNum": 699,
    "fixNodeStartChar": 25372,
    "fixNodeLength": 19,
    "sourceBeforeFix": "Exception exception",
    "sourceAfterFix": "Throwable exception"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8d5f26f6bd0e273649ccf2d4a37308317c0c4612",
    "fixCommitParentSHA1": "e070d554917bf3492fb09e10a79ee35d62052e7f",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java\nindex 7a78f6f..4081c4f 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java\n@@ -48,7 +48,7 @@\n @Configuration\n @Profile(\"cloud\")\n @Order(CloudAutoConfiguration.ORDER)\n-@ConditionalOnClass(Cloud.class)\n+@ConditionalOnClass(CloudScanConfiguration.class)\n @ConditionalOnMissingBean(Cloud.class)\n @ConditionalOnProperty(prefix = \"spring.cloud\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n @Import(CloudScanConfiguration.class)\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 51,
    "bugNodeStartChar": 2157,
    "bugNodeLength": 11,
    "fixLineNum": 51,
    "fixNodeStartChar": 2157,
    "fixNodeLength": 28,
    "sourceBeforeFix": "Cloud.class",
    "sourceAfterFix": "CloudScanConfiguration.class"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "fae9ab4140b56123177d498845b738b3bb53808d",
    "fixCommitParentSHA1": "c0f69d28d3b3501fd8996dd45cfb84cc0ec989b7",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\nindex 9aa403b..5874b0a 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n@@ -74,7 +74,7 @@\n \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n \t\t// 6 for static resources, one for management endpoints and one for the rest\n-\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n+\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}\n \n@@ -144,7 +144,7 @@\n \t\tthis.context.refresh();\n \t\t// Just the management endpoints (one filter) and ignores now plus the backup\n \t\t// filter on app endpoints\n-\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n+\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 77,
    "bugNodeStartChar": 3424,
    "bugNodeLength": 91,
    "fixLineNum": 77,
    "fixNodeStartChar": 3424,
    "fixNodeLength": 91,
    "sourceBeforeFix": "assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())",
    "sourceAfterFix": "assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "fae9ab4140b56123177d498845b738b3bb53808d",
    "fixCommitParentSHA1": "c0f69d28d3b3501fd8996dd45cfb84cc0ec989b7",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\nindex 9aa403b..5874b0a 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n@@ -74,7 +74,7 @@\n \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n \t\t// 6 for static resources, one for management endpoints and one for the rest\n-\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n+\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}\n \n@@ -144,7 +144,7 @@\n \t\tthis.context.refresh();\n \t\t// Just the management endpoints (one filter) and ignores now plus the backup\n \t\t// filter on app endpoints\n-\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n+\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 147,
    "bugNodeStartChar": 6359,
    "bugNodeLength": 91,
    "fixLineNum": 147,
    "fixNodeStartChar": 6359,
    "fixNodeLength": 91,
    "sourceBeforeFix": "assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())",
    "sourceAfterFix": "assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "99971a65787b0d8e46de459b93f9378e351f5bf0",
    "fixCommitParentSHA1": "3145edff3aefa9df5a51e0fa81b1c167a288fc91",
    "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\nindex 5e49ac5..5173059 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n@@ -156,7 +156,8 @@\n \t@ConditionalOnExpression(\"${endpoints.health.enabled:true}\")\n \tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n \t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate);\n-\t\tif (this.healthMvcEndpointProperties.getMapping() != null) {\n+\t\tif (this.healthMvcEndpointProperties.getMapping() != null\n+\t\t\t\t&& this.healthMvcEndpointProperties.getMapping().size() > 0) {\n \t\t\thealthMvcEndpoint.setStatusMapping(this.healthMvcEndpointProperties\n \t\t\t\t\t.getMapping());\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 159,
    "bugNodeStartChar": 7153,
    "bugNodeLength": 53,
    "fixLineNum": 159,
    "fixNodeStartChar": 7153,
    "fixNodeLength": 117,
    "sourceBeforeFix": "this.healthMvcEndpointProperties.getMapping() != null",
    "sourceAfterFix": "this.healthMvcEndpointProperties.getMapping() != null && this.healthMvcEndpointProperties.getMapping().size() > 0"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "20e08494aed42b7c4bcb12765b7599568601ebaa",
    "fixCommitParentSHA1": "d01154c212791d22d91a6c883e4d7ffea9ba9d5b",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java\nindex 4d63ffe..34e3a90 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java\n@@ -58,17 +58,17 @@\n \n \t@Configuration\n \t@EnableSocial\n-\t@EnableConfigurationProperties(FaceBookProperties.class)\n+\t@EnableConfigurationProperties(FacebookProperties.class)\n \t@ConditionalOnWebApplication\n \tprotected static class FacebookAutoConfigurationAdapter extends\n \t\t\tSocialAutoConfigurerAdapter {\n \n \t\t@Autowired\n-\t\tprivate FaceBookProperties faceBookProperties;\n+\t\tprivate FacebookProperties facebookProperties;\n \n \t\t@Override\n \t\tprotected SocialProperties getSocialProperties() {\n-\t\t\treturn faceBookProperties;\n+\t\t\treturn facebookProperties;\n \t\t}\n \n \t\t@Bean\n@@ -89,7 +89,7 @@\n \t}\n \n \t@ConfigurationProperties(\"spring.social.facebook\")\n-\tpublic static class FaceBookProperties extends SocialProperties {\n+\tpublic static class FacebookProperties extends SocialProperties {\n \n \t\tpublic ConnectionFactory<?> createConnectionFactory() {\n \t\t\treturn new FacebookConnectionFactory(\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 71,
    "bugNodeStartChar": 3207,
    "bugNodeLength": 26,
    "fixLineNum": 71,
    "fixNodeStartChar": 3207,
    "fixNodeLength": 26,
    "sourceBeforeFix": "return faceBookProperties; ",
    "sourceAfterFix": "return facebookProperties; "
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "51496b4e4f41da1a5bf6811874d23b20f16de03d",
    "fixCommitParentSHA1": "772df9bea76af6514fd24b12e903d0579c5aca6c",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\nindex 1f58bf8..e31ac84 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n@@ -136,18 +136,18 @@\n \t\trequest.setAttribute(ERROR_EXCEPTION, ex);\n \t\trequest.setAttribute(ERROR_EXCEPTION_TYPE, type.getName());\n \t\twrapped.sendError(500, ex.getMessage());\n-\t\tforwardToErrorPage(errorPath, request, wrapped);\n+\t\tforwardToErrorPage(errorPath, request, wrapped, ex);\n \t}\n \n \tprivate void forwardToErrorPage(String path, HttpServletRequest request,\n-\t\t\tServletResponse response) throws ServletException, IOException {\n+\t\t\tServletResponse response, Throwable ex) throws ServletException, IOException {\n \t\tif (!response.isCommitted()) {\n \t\t\tString message = \"Cannot forward to error page for\" + request.getRequestURI()\n \t\t\t\t\t+ \" (response is committed), so this response may have \"\n \t\t\t\t\t+ \"the wrong status code\";\n-\t\t\t// User might see the error page without all the data here but the exception\n-\t\t\t// isn't going to help anyone (and it's already been logged)\n-\t\t\tlogger.error(message);\n+\t\t\t// User might see the error page without all the data here but throwing the\n+\t\t\t// exception isn't going to help anyone (we'll log it to be on the safe side)\n+\t\t\tlogger.error(message, ex);\n \t\t\treturn;\n \t\t}\n \t\tresponse.reset();\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 150,
    "bugNodeStartChar": 5652,
    "bugNodeLength": 21,
    "fixLineNum": 150,
    "fixNodeStartChar": 5668,
    "fixNodeLength": 25,
    "sourceBeforeFix": "logger.error(message)",
    "sourceAfterFix": "logger.error(message,ex)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "6fbafc3ca487c2cf42630a471286334966355b43",
    "fixCommitParentSHA1": "e7aa192d82b514373e16ceca5144820048fd742b",
    "bugFilePath": "spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java",
    "fixPatch": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\nindex ebca33f..72d879d 100644\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n@@ -195,7 +195,8 @@\n \t\t\t\t\t.getManagedDependencies());\n \n \t\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest,\n-\t\t\t\t\tDependencyFilterUtils.classpathFilter(JavaScopes.COMPILE));\n+\t\t\t\t\tDependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,\n+\t\t\t\t\t\t\tJavaScopes.RUNTIME));\n \n \t\t\tDependencyResult dependencyResult = this.repositorySystem\n \t\t\t\t\t.resolveDependencies(this.session, dependencyRequest);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 198,
    "bugNodeStartChar": 6702,
    "bugNodeLength": 57,
    "fixLineNum": 198,
    "fixNodeStartChar": 6702,
    "fixNodeLength": 84,
    "sourceBeforeFix": "DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE)",
    "sourceAfterFix": "DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,JavaScopes.RUNTIME)"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1",
    "fixCommitParentSHA1": "ae7098ae1d8ed13bed52f67f30612e7ecf39d618",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateProperties.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateProperties.java\nindex 8da3117..2fe3ece 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateProperties.java\n@@ -21,7 +21,7 @@\n @ConfigurationProperties(prefix = \"spring.jms\")\n public class JmsTemplateProperties {\n \n-\tprivate boolean pubSubDomain = true;\n+\tprivate boolean pubSubDomain = false;\n \n \tpublic boolean isPubSubDomain() {\n \t\treturn this.pubSubDomain;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 24,
    "bugNodeStartChar": 855,
    "bugNodeLength": 19,
    "fixLineNum": 24,
    "fixNodeStartChar": 855,
    "fixNodeLength": 20,
    "sourceBeforeFix": "pubSubDomain=true",
    "sourceAfterFix": "pubSubDomain=false"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1",
    "fixCommitParentSHA1": "ae7098ae1d8ed13bed52f67f30612e7ecf39d618",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\nindex ea7ade8..b745c96 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n@@ -94,23 +94,23 @@\n \t}\n \n \t@Test\n-\tpublic void testPubSubEnabledByDefault() {\n+\tpublic void testPubSubDisabledByDefault() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context\n \t\t\t\t.register(TestConfiguration.class, JmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertTrue(jmsTemplate.isPubSubDomain());\n+\t\tassertFalse(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n-\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsFalse() {\n+\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsTrue() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context.register(TestConfiguration4.class,\n \t\t\t\tJmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertFalse(jmsTemplate.isPubSubDomain());\n+\t\tassertTrue(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n@@ -262,7 +262,7 @@\n \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n-\t\t\t\tjmsTemplate.setPubSubDomain(false);\n+\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 103,
    "bugNodeStartChar": 3767,
    "bugNodeLength": 40,
    "fixLineNum": 103,
    "fixNodeStartChar": 3767,
    "fixNodeLength": 41,
    "sourceBeforeFix": "assertTrue(jmsTemplate.isPubSubDomain())",
    "sourceAfterFix": "assertFalse(jmsTemplate.isPubSubDomain())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1",
    "fixCommitParentSHA1": "ae7098ae1d8ed13bed52f67f30612e7ecf39d618",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\nindex ea7ade8..b745c96 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n@@ -94,23 +94,23 @@\n \t}\n \n \t@Test\n-\tpublic void testPubSubEnabledByDefault() {\n+\tpublic void testPubSubDisabledByDefault() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context\n \t\t\t\t.register(TestConfiguration.class, JmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertTrue(jmsTemplate.isPubSubDomain());\n+\t\tassertFalse(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n-\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsFalse() {\n+\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsTrue() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context.register(TestConfiguration4.class,\n \t\t\t\tJmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertFalse(jmsTemplate.isPubSubDomain());\n+\t\tassertTrue(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n@@ -262,7 +262,7 @@\n \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n-\t\t\t\tjmsTemplate.setPubSubDomain(false);\n+\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 103,
    "bugNodeStartChar": 3767,
    "bugNodeLength": 40,
    "fixLineNum": 103,
    "fixNodeStartChar": 3767,
    "fixNodeLength": 41,
    "sourceBeforeFix": "assertTrue(jmsTemplate.isPubSubDomain())",
    "sourceAfterFix": "assertFalse(jmsTemplate.isPubSubDomain())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1",
    "fixCommitParentSHA1": "ae7098ae1d8ed13bed52f67f30612e7ecf39d618",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\nindex ea7ade8..b745c96 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n@@ -94,23 +94,23 @@\n \t}\n \n \t@Test\n-\tpublic void testPubSubEnabledByDefault() {\n+\tpublic void testPubSubDisabledByDefault() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context\n \t\t\t\t.register(TestConfiguration.class, JmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertTrue(jmsTemplate.isPubSubDomain());\n+\t\tassertFalse(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n-\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsFalse() {\n+\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsTrue() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context.register(TestConfiguration4.class,\n \t\t\t\tJmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertFalse(jmsTemplate.isPubSubDomain());\n+\t\tassertTrue(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n@@ -262,7 +262,7 @@\n \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n-\t\t\t\tjmsTemplate.setPubSubDomain(false);\n+\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 113,
    "bugNodeStartChar": 4132,
    "bugNodeLength": 41,
    "fixLineNum": 113,
    "fixNodeStartChar": 4132,
    "fixNodeLength": 40,
    "sourceBeforeFix": "assertFalse(jmsTemplate.isPubSubDomain())",
    "sourceAfterFix": "assertTrue(jmsTemplate.isPubSubDomain())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1",
    "fixCommitParentSHA1": "ae7098ae1d8ed13bed52f67f30612e7ecf39d618",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\nindex ea7ade8..b745c96 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n@@ -94,23 +94,23 @@\n \t}\n \n \t@Test\n-\tpublic void testPubSubEnabledByDefault() {\n+\tpublic void testPubSubDisabledByDefault() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context\n \t\t\t\t.register(TestConfiguration.class, JmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertTrue(jmsTemplate.isPubSubDomain());\n+\t\tassertFalse(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n-\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsFalse() {\n+\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsTrue() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context.register(TestConfiguration4.class,\n \t\t\t\tJmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertFalse(jmsTemplate.isPubSubDomain());\n+\t\tassertTrue(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n@@ -262,7 +262,7 @@\n \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n-\t\t\t\tjmsTemplate.setPubSubDomain(false);\n+\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 113,
    "bugNodeStartChar": 4132,
    "bugNodeLength": 41,
    "fixLineNum": 113,
    "fixNodeStartChar": 4132,
    "fixNodeLength": 40,
    "sourceBeforeFix": "assertFalse(jmsTemplate.isPubSubDomain())",
    "sourceAfterFix": "assertTrue(jmsTemplate.isPubSubDomain())"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1",
    "fixCommitParentSHA1": "ae7098ae1d8ed13bed52f67f30612e7ecf39d618",
    "bugFilePath": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\nindex ea7ade8..b745c96 100644\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfigurationTests.java\n@@ -94,23 +94,23 @@\n \t}\n \n \t@Test\n-\tpublic void testPubSubEnabledByDefault() {\n+\tpublic void testPubSubDisabledByDefault() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context\n \t\t\t\t.register(TestConfiguration.class, JmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertTrue(jmsTemplate.isPubSubDomain());\n+\t\tassertFalse(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n-\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsFalse() {\n+\tpublic void testJmsTemplatePostProcessedSoThatPubSubIsTrue() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context.register(TestConfiguration4.class,\n \t\t\t\tJmsTemplateAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tJmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);\n-\t\tassertFalse(jmsTemplate.isPubSubDomain());\n+\t\tassertTrue(jmsTemplate.isPubSubDomain());\n \t}\n \n \t@Test\n@@ -262,7 +262,7 @@\n \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n-\t\t\t\tjmsTemplate.setPubSubDomain(false);\n+\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 265,
    "bugNodeStartChar": 9748,
    "bugNodeLength": 34,
    "fixLineNum": 265,
    "fixNodeStartChar": 9748,
    "fixNodeLength": 33,
    "sourceBeforeFix": "jmsTemplate.setPubSubDomain(false)",
    "sourceAfterFix": "jmsTemplate.setPubSubDomain(true)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b75894aec218a045bd91652840f07f0aecf01a73",
    "fixCommitParentSHA1": "e7153dd604416e0d964d93c3e7da250e79606fd0",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\nindex 4aa2a34..ac249e4 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n@@ -168,7 +168,7 @@\n \n \t\tEnumerableCompositePropertySource group = getGeneric(basename);\n \t\tgroup.add(source);\n-\t\tlogger.info(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n+\t\tlogger.trace(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n \t\tif (this.propertySources.contains(group.getName())) {\n \t\t\tthis.propertySources.replace(group.getName(), group);\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 171,
    "bugNodeStartChar": 6067,
    "bugNodeLength": 74,
    "fixLineNum": 171,
    "fixNodeStartChar": 6067,
    "fixNodeLength": 75,
    "sourceBeforeFix": "logger.info(\"Adding PropertySource: \" + source + \" in group: \"+ basename)",
    "sourceAfterFix": "logger.trace(\"Adding PropertySource: \" + source + \" in group: \"+ basename)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b75894aec218a045bd91652840f07f0aecf01a73",
    "fixCommitParentSHA1": "e7153dd604416e0d964d93c3e7da250e79606fd0",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\nindex 4aa2a34..ac249e4 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n@@ -168,7 +168,7 @@\n \n \t\tEnumerableCompositePropertySource group = getGeneric(basename);\n \t\tgroup.add(source);\n-\t\tlogger.info(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n+\t\tlogger.trace(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n \t\tif (this.propertySources.contains(group.getName())) {\n \t\t\tthis.propertySources.replace(group.getName(), group);\n \t\t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 171,
    "bugNodeStartChar": 6067,
    "bugNodeLength": 74,
    "fixLineNum": 171,
    "fixNodeStartChar": 6067,
    "fixNodeLength": 75,
    "sourceBeforeFix": "logger.info(\"Adding PropertySource: \" + source + \" in group: \"+ basename)",
    "sourceAfterFix": "logger.trace(\"Adding PropertySource: \" + source + \" in group: \"+ basename)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "b21fdd34632473bb239d13472462831ccfbd556c",
    "fixCommitParentSHA1": "489e97361c940a9978a1ad83c34d524a240ded64",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\nindex fd09d36..92d878d 100644\n--- a/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n@@ -52,8 +52,7 @@\n \n \tpublic static void main(String[] args) throws Exception {\n \t\t// Set user password to \"password\" for demo purposes only\n-\t\tnew SpringApplicationBuilder(SampleSecureApplication.class).properties(\n-\t\t\t\t\"security.basic.enabled=false\", \"security.user.password=password\").run(\n+\t\tnew SpringApplicationBuilder(SampleSecureApplication.class).properties(\"security.user.password=password\").run(\n \t\t\t\targs);\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 55,
    "bugNodeStartChar": 2059,
    "bugNodeLength": 142,
    "fixLineNum": 55,
    "fixNodeStartChar": 2059,
    "fixNodeLength": 105,
    "sourceBeforeFix": "new SpringApplicationBuilder(SampleSecureApplication.class).properties(\"security.basic.enabled=false\",\"security.user.password=password\")",
    "sourceAfterFix": "new SpringApplicationBuilder(SampleSecureApplication.class).properties(\"security.user.password=password\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "373e2c51564a4c2cca306394ba52e5bcde839cfd",
    "fixCommitParentSHA1": "4637c2a8f7820e2f499bffc8bbc6d93789f64399",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\nindex bf829a6..fbaa5c6 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -182,9 +182,9 @@\n \t\t\t\t\t\"excludedViewNames\", String[].class));\n \t\t\tresolver.setViewNames(this.environment.getProperty(\"viewNames\",\n \t\t\t\t\tString[].class));\n-\t\t\t// Needs to come before any fallback resolver (e.g. a\n-\t\t\t// InternalResourceViewResolver)\n-\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 20);\n+\t\t\t// This resolver acts as a fallback resolver (e.g. like a\n+\t\t\t// InternalResourceViewResolver) so it needs to have low precedence\n+\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n \t\t\treturn resolver;\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 187,
    "bugNodeStartChar": 6756,
    "bugNodeLength": 30,
    "fixLineNum": 187,
    "fixNodeStartChar": 6795,
    "fixNodeLength": 29,
    "sourceBeforeFix": "Ordered.LOWEST_PRECEDENCE - 20",
    "sourceAfterFix": "Ordered.LOWEST_PRECEDENCE - 5"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "c68902260ebcdcdcfddc3b95f5a263405c17846b",
    "fixCommitParentSHA1": "9453a6324a32f61eb9668e81c8ff16f66261b21b",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\nindex 30c9f60..a917306 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -177,7 +177,7 @@\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(NamedParameterJdbcOperations.class)\n-\t\tpublic NamedParameterJdbcOperations namedParameterJdbcTemplate() {\n+\t\tpublic NamedParameterJdbcTemplate namedParameterJdbcTemplate() {\n \t\t\treturn new NamedParameterJdbcTemplate(this.dataSource);\n \t\t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 178,
    "bugNodeStartChar": 6479,
    "bugNodeLength": 201,
    "fixLineNum": 178,
    "fixNodeStartChar": 6479,
    "fixNodeLength": 199,
    "sourceBeforeFix": "@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcOperations namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } ",
    "sourceAfterFix": "@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcTemplate namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6c8e81f8706f6e5f13027ba63fc667f1f0e2b488",
    "fixCommitParentSHA1": "99350a221658e2c446d0f5636d751f00747e8b88",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java\nindex fef93f4..abbe9b2 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java\n@@ -85,7 +85,7 @@\n \t\tapplication.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n \t\tapplication = configure(application);\n \t\t// Ensure error pages are registered\n-\t\tapplication.sources(ErrorWrapperEmbeddedServletContainerFactory.class);\n+\t\tapplication.sources(ErrorPageFilter.class);\n \t\treturn (WebApplicationContext) application.run();\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 88,
    "bugNodeStartChar": 3670,
    "bugNodeLength": 49,
    "fixLineNum": 88,
    "fixNodeStartChar": 3670,
    "fixNodeLength": 21,
    "sourceBeforeFix": "ErrorWrapperEmbeddedServletContainerFactory.class",
    "sourceAfterFix": "ErrorPageFilter.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6c8e81f8706f6e5f13027ba63fc667f1f0e2b488",
    "fixCommitParentSHA1": "99350a221658e2c446d0f5636d751f00747e8b88",
    "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/context/web/ErrorWrapperEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/web/ErrorWrapperEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/web/ErrorWrapperEmbeddedServletContainerFactoryTests.java\nindex 6f74b87..4119a11 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/context/web/ErrorWrapperEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/web/ErrorWrapperEmbeddedServletContainerFactoryTests.java\n@@ -36,13 +36,13 @@\n import static org.junit.Assert.assertThat;\n \n /**\n- * Tests for {@link ErrorWrapperEmbeddedServletContainerFactory}.\n+ * Tests for {@link ErrorPageFilter}.\n  * \n  * @author Dave Syer\n  */\n public class ErrorWrapperEmbeddedServletContainerFactoryTests {\n \n-\tprivate ErrorWrapperEmbeddedServletContainerFactory filter = new ErrorWrapperEmbeddedServletContainerFactory();\n+\tprivate ErrorPageFilter filter = new ErrorPageFilter();\n \n \tprivate MockHttpServletRequest request = new MockHttpServletRequest();\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 45,
    "bugNodeStartChar": 1510,
    "bugNodeLength": 111,
    "fixLineNum": 45,
    "fixNodeStartChar": 1510,
    "fixNodeLength": 55,
    "sourceBeforeFix": "private ErrorWrapperEmbeddedServletContainerFactory filter=new ErrorWrapperEmbeddedServletContainerFactory(); ",
    "sourceAfterFix": "private ErrorPageFilter filter=new ErrorPageFilter(); "
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "af458cb253d67fff55a0c70f926fa58fcb800378",
    "fixCommitParentSHA1": "865c51d7ac2e63afa2223f48ed65a475bc4075ad",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\nindex 6a68a87..8a38754 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n@@ -63,7 +63,7 @@\n \t\tStandardAnnotationMetadata metadata = new StandardAnnotationMetadata(\n \t\t\t\tgetConfiguration(), true);\n \t\treturn new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),\n-\t\t\t\tthis.environment) {\n+\t\t\t\tthis.resourceLoader, this.environment) {\n \t\t\t@Override\n \t\t\tpublic java.lang.Iterable<String> getBasePackages() {\n \t\t\t\treturn AbstractRepositoryConfigurationSourceSupport.this\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 65,
    "bugNodeStartChar": 2645,
    "bugNodeLength": 261,
    "fixLineNum": 65,
    "fixNodeStartChar": 2645,
    "fixNodeLength": 282,
    "sourceBeforeFix": "new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } ",
    "sourceAfterFix": "new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.resourceLoader,this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } "
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "e48ddaeb99490ab08b409f4513a00b21b6f5eac0",
    "fixCommitParentSHA1": "df476bed1fdc333f078a96b4fcc9c92cef05107f",
    "bugFilePath": "spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java",
    "fixPatch": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\nindex 263910b..96441a2 100644\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n@@ -268,7 +268,7 @@\n \t\t\tbuilder.setProxy(this.proxySelector.getProxy(repository));\n \t\t\trepository = builder.build();\n \t\t}\n-\t\tthis.repositories.add(repository);\n+\t\tthis.repositories.add(0, repository);\n \t}\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 271,
    "bugNodeStartChar": 9927,
    "bugNodeLength": 33,
    "fixLineNum": 271,
    "fixNodeStartChar": 9927,
    "fixNodeLength": 36,
    "sourceBeforeFix": "this.repositories.add(repository)",
    "sourceAfterFix": "this.repositories.add(0,repository)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "023faf092faa11ecde2c17cb7ff37b1f09cccce2",
    "fixCommitParentSHA1": "bcae284dd9343be846d7e13ef4792afb0aedbf54",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\nindex 80a439e..20dc615 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -88,7 +88,7 @@\n \t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n \t\t\t\tDispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,\n \t\t\t\tManagementServerPropertiesAutoConfiguration.class,\n-\t\t\t\tEndpointWebMvcAutoConfiguration.class);\n+\t\t\t\tEndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);\n \t\tthis.applicationContext.refresh();\n \t\tassertContent(\"/controller\", 8080, \"controlleroutput\");\n \t\tassertContent(\"/endpoint\", 8080, null);\n@@ -125,7 +125,7 @@\n \t\t\t\tServerPropertiesAutoConfiguration.class,\n \t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n \t\t\t\tDispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,\n-\t\t\t\tEndpointWebMvcAutoConfiguration.class);\n+\t\t\t\tEndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);\n \t\tthis.applicationContext.refresh();\n \t\tassertContent(\"/controller\", 7070, \"controlleroutput\");\n \t\tassertContent(\"/endpoint\", 7070, null);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 86,
    "bugNodeStartChar": 3424,
    "bugNodeLength": 353,
    "fixLineNum": 86,
    "fixNodeStartChar": 3424,
    "fixNodeLength": 386,
    "sourceBeforeFix": "this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)",
    "sourceAfterFix": "this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "023faf092faa11ecde2c17cb7ff37b1f09cccce2",
    "fixCommitParentSHA1": "bcae284dd9343be846d7e13ef4792afb0aedbf54",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\nindex 80a439e..20dc615 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -88,7 +88,7 @@\n \t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n \t\t\t\tDispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,\n \t\t\t\tManagementServerPropertiesAutoConfiguration.class,\n-\t\t\t\tEndpointWebMvcAutoConfiguration.class);\n+\t\t\t\tEndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);\n \t\tthis.applicationContext.refresh();\n \t\tassertContent(\"/controller\", 8080, \"controlleroutput\");\n \t\tassertContent(\"/endpoint\", 8080, null);\n@@ -125,7 +125,7 @@\n \t\t\t\tServerPropertiesAutoConfiguration.class,\n \t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n \t\t\t\tDispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,\n-\t\t\t\tEndpointWebMvcAutoConfiguration.class);\n+\t\t\t\tEndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);\n \t\tthis.applicationContext.refresh();\n \t\tassertContent(\"/controller\", 7070, \"controlleroutput\");\n \t\tassertContent(\"/endpoint\", 7070, null);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 122,
    "bugNodeStartChar": 4928,
    "bugNodeLength": 371,
    "fixLineNum": 122,
    "fixNodeStartChar": 4928,
    "fixNodeLength": 404,
    "sourceBeforeFix": "this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)",
    "sourceAfterFix": "this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "17de6689ab43b6d8fc8b60b87eb1155ba55b26f6",
    "fixCommitParentSHA1": "2f7214002dff9503f33a2f3ec20c36e069dbea2d",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\nindex 9183196..181216c 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n@@ -63,7 +63,7 @@\n  * to <code>vcap.application.*</code> in a fairly obvious way, and the VCAP_SERVICES\n  * object is unwrapped so that it is a hash of objects with key equal to the service\n  * instance name (e.g. \"mysql\" in the example above), and value equal to that instances\n- * properties, and then flattened in the smae way. E.g.\n+ * properties, and then flattened in the same way. E.g.\n  * \n  * <pre>\n  * vcap.application.instance_id: 2ce0ac627a6c8e47e936d829a3a47b5b\n@@ -81,6 +81,10 @@\n  * ...\n  * </pre>\n  * \n+ * N.B. this initializer is mainly intended for informational use (the application and\n+ * instance ids are particularly useful). For service binding you might find that Spring\n+ * Cloud is more convenient and more robust against potential changes in Cloud Foundry.\n+ * \n  * @author Dave Syer\n  */\n public class VcapApplicationContextInitializer implements\n@@ -93,7 +97,9 @@\n \n \tprivate static final String VCAP_SERVICES = \"VCAP_SERVICES\";\n \n-\tprivate int order = Integer.MIN_VALUE + 11;\n+\t// Intentionally before ConfigFileApplicationContextInitializer so values there can\n+\t// use these ones\n+\tprivate int order = Integer.MIN_VALUE + 9;\n \n \tprivate JsonParser parser = JsonParserFactory.getJsonParser();\n \n@@ -188,7 +194,7 @@\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", ex);\n+\t\t\tlogger.error(\"Could not parse VCAP_SERVICES\", ex);\n \t\t}\n \t\treturn properties;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 96,
    "bugNodeStartChar": 4385,
    "bugNodeLength": 22,
    "fixLineNum": 98,
    "fixNodeStartChar": 4489,
    "fixNodeLength": 21,
    "sourceBeforeFix": "Integer.MIN_VALUE + 11",
    "sourceAfterFix": "Integer.MIN_VALUE + 9"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "f9caade3cc3b25e35c12e7ebb1766bd9c9c369d1",
    "fixCommitParentSHA1": "368f279788bd546ecbcf52ed2d29ef6ce36f3a58",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\nindex d00cabc..0a8ee24 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n@@ -92,7 +92,7 @@\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"shell.config_path_patterns\",\n \t\t\t\t\"pattern1, pattern2\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(2, props.getConfigPathPatterns().length, 2);\n+\t\tassertEquals(2, props.getConfigPathPatterns().length);\n \t\tAssert.assertArrayEquals(new String[] { \"pattern1\", \"pattern2\" }, props.getConfigPathPatterns());\n \t}\n \n@@ -104,7 +104,7 @@\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"shell.disabled_plugins\",\n \t\t\t\t\"pattern1, pattern2\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(2, props.getDisabledPlugins().length, 2);\n+\t\tassertEquals(2, props.getDisabledPlugins().length);\n \t\tassertArrayEquals(new String[] { \"pattern1\", \"pattern2\" }, props.getDisabledPlugins());\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 95,
    "bugNodeStartChar": 3878,
    "bugNodeLength": 56,
    "fixLineNum": 95,
    "fixNodeStartChar": 3878,
    "fixNodeLength": 53,
    "sourceBeforeFix": "assertEquals(2,props.getConfigPathPatterns().length,2)",
    "sourceAfterFix": "assertEquals(2,props.getConfigPathPatterns().length)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "f9caade3cc3b25e35c12e7ebb1766bd9c9c369d1",
    "fixCommitParentSHA1": "368f279788bd546ecbcf52ed2d29ef6ce36f3a58",
    "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java",
    "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\nindex d00cabc..0a8ee24 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n@@ -92,7 +92,7 @@\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"shell.config_path_patterns\",\n \t\t\t\t\"pattern1, pattern2\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(2, props.getConfigPathPatterns().length, 2);\n+\t\tassertEquals(2, props.getConfigPathPatterns().length);\n \t\tAssert.assertArrayEquals(new String[] { \"pattern1\", \"pattern2\" }, props.getConfigPathPatterns());\n \t}\n \n@@ -104,7 +104,7 @@\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"shell.disabled_plugins\",\n \t\t\t\t\"pattern1, pattern2\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(2, props.getDisabledPlugins().length, 2);\n+\t\tassertEquals(2, props.getDisabledPlugins().length);\n \t\tassertArrayEquals(new String[] { \"pattern1\", \"pattern2\" }, props.getDisabledPlugins());\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 107,
    "bugNodeStartChar": 4445,
    "bugNodeLength": 53,
    "fixLineNum": 107,
    "fixNodeStartChar": 4445,
    "fixNodeLength": 50,
    "sourceBeforeFix": "assertEquals(2,props.getDisabledPlugins().length,2)",
    "sourceAfterFix": "assertEquals(2,props.getDisabledPlugins().length)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "f8d58022301347c8a9790013e38dfc1d5d4037e7",
    "fixCommitParentSHA1": "18ee229748422bfc23c357ebe9db25831bc6c4d8",
    "bugFilePath": "spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\nindex 794df87..6e013e3 100644\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n@@ -49,7 +49,7 @@\n \t\t\t\tthis.providedConfigurationName);\n \t\tif (provided != null) {\n \t\t\tcompile = compile.minus(provided);\n-\t\t\truntime = compile.minus(provided);\n+\t\t\truntime = runtime.minus(provided);\n \t\t}\n \n \t\tlibraries(LibraryScope.COMPILE, compile, callback);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 52,
    "bugNodeStartChar": 1629,
    "bugNodeLength": 23,
    "fixLineNum": 52,
    "fixNodeStartChar": 1629,
    "fixNodeLength": 23,
    "sourceBeforeFix": "compile.minus(provided)",
    "sourceAfterFix": "runtime.minus(provided)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f8d58022301347c8a9790013e38dfc1d5d4037e7",
    "fixCommitParentSHA1": "18ee229748422bfc23c357ebe9db25831bc6c4d8",
    "bugFilePath": "spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java",
    "fixPatch": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\nindex 794df87..6e013e3 100644\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n@@ -49,7 +49,7 @@\n \t\t\t\tthis.providedConfigurationName);\n \t\tif (provided != null) {\n \t\t\tcompile = compile.minus(provided);\n-\t\t\truntime = compile.minus(provided);\n+\t\t\truntime = runtime.minus(provided);\n \t\t}\n \n \t\tlibraries(LibraryScope.COMPILE, compile, callback);\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 52,
    "bugNodeStartChar": 1629,
    "bugNodeLength": 23,
    "fixLineNum": 52,
    "fixNodeStartChar": 1629,
    "fixNodeLength": 23,
    "sourceBeforeFix": "compile.minus(provided)",
    "sourceAfterFix": "runtime.minus(provided)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95",
    "fixCommitParentSHA1": "a9113d58a3ea6a977b23cc702035b9fe55a5c047",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\nindex 1187a84..734970e 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -197,7 +197,7 @@\n \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n \n-\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n+\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 200,
    "bugNodeStartChar": 7064,
    "bugNodeLength": 59,
    "fixLineNum": 200,
    "fixNodeStartChar": 7064,
    "fixNodeLength": 61,
    "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)",
    "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95",
    "fixCommitParentSHA1": "a9113d58a3ea6a977b23cc702035b9fe55a5c047",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\nindex 1187a84..734970e 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -197,7 +197,7 @@\n \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n \n-\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n+\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 200,
    "bugNodeStartChar": 7064,
    "bugNodeLength": 59,
    "fixLineNum": 200,
    "fixNodeStartChar": 7064,
    "fixNodeLength": 61,
    "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)",
    "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8c7c5d4dc981cb21d4151379d0e6b9e5c131d7ec",
    "fixCommitParentSHA1": "e2b3c03fc4d2c4a8a1d0802bd2c290b4dc9d15ca",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\nindex 1b66e80..be21629 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n@@ -160,7 +160,7 @@\n \t\t\t\tproperties.putAll(map);\n \t\t\t}\n \t\t}\n-\t\tcatch (IllegalArgumentException e) {\n+\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;\n@@ -187,7 +187,7 @@\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (IllegalArgumentException e) {\n+\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 163,
    "bugNodeStartChar": 6359,
    "bugNodeLength": 26,
    "fixLineNum": 163,
    "fixNodeStartChar": 6359,
    "fixNodeLength": 11,
    "sourceBeforeFix": "IllegalArgumentException e",
    "sourceAfterFix": "Exception e"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8c7c5d4dc981cb21d4151379d0e6b9e5c131d7ec",
    "fixCommitParentSHA1": "e2b3c03fc4d2c4a8a1d0802bd2c290b4dc9d15ca",
    "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java",
    "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\nindex 1b66e80..be21629 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n@@ -160,7 +160,7 @@\n \t\t\t\tproperties.putAll(map);\n \t\t\t}\n \t\t}\n-\t\tcatch (IllegalArgumentException e) {\n+\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;\n@@ -187,7 +187,7 @@\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (IllegalArgumentException e) {\n+\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 190,
    "bugNodeStartChar": 7188,
    "bugNodeLength": 26,
    "fixLineNum": 190,
    "fixNodeStartChar": 7188,
    "fixNodeLength": 11,
    "sourceBeforeFix": "IllegalArgumentException e",
    "sourceAfterFix": "Exception e"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d64a44547c2b2b69c771b16d9ac4e1ef5f8d8ce1",
    "fixCommitParentSHA1": "621116c9b88683dd0a53252dad912afa66b0e375",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java\nindex 53398e3..98f8ab4 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n@@ -54,7 +54,7 @@\n \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n-\t\tthis.pool.setTestOnReturn(isTestOnBorrow());\n+\t\tthis.pool.setTestOnReturn(isTestOnReturn());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 57,
    "bugNodeStartChar": 2074,
    "bugNodeLength": 16,
    "fixLineNum": 57,
    "fixNodeStartChar": 2074,
    "fixNodeLength": 16,
    "sourceBeforeFix": "isTestOnBorrow()",
    "sourceAfterFix": "isTestOnReturn()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d64a44547c2b2b69c771b16d9ac4e1ef5f8d8ce1",
    "fixCommitParentSHA1": "621116c9b88683dd0a53252dad912afa66b0e375",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java\nindex 53398e3..98f8ab4 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n@@ -54,7 +54,7 @@\n \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n-\t\tthis.pool.setTestOnReturn(isTestOnBorrow());\n+\t\tthis.pool.setTestOnReturn(isTestOnReturn());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 57,
    "bugNodeStartChar": 2074,
    "bugNodeLength": 16,
    "fixLineNum": 57,
    "fixNodeStartChar": 2074,
    "fixNodeLength": 16,
    "sourceBeforeFix": "isTestOnBorrow()",
    "sourceAfterFix": "isTestOnReturn()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d64a44547c2b2b69c771b16d9ac4e1ef5f8d8ce1",
    "fixCommitParentSHA1": "621116c9b88683dd0a53252dad912afa66b0e375",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java\nindex 54fbf7e..de24c31 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java\n@@ -44,7 +44,7 @@\n \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n-\t\tthis.pool.setTestOnReturn(isTestOnBorrow());\n+\t\tthis.pool.setTestOnReturn(isTestOnReturn());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 47,
    "bugNodeStartChar": 1652,
    "bugNodeLength": 16,
    "fixLineNum": 47,
    "fixNodeStartChar": 1652,
    "fixNodeLength": 16,
    "sourceBeforeFix": "isTestOnBorrow()",
    "sourceAfterFix": "isTestOnReturn()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d64a44547c2b2b69c771b16d9ac4e1ef5f8d8ce1",
    "fixCommitParentSHA1": "621116c9b88683dd0a53252dad912afa66b0e375",
    "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java",
    "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java\nindex 54fbf7e..de24c31 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfiguration.java\n@@ -44,7 +44,7 @@\n \t\tthis.pool.setMaxIdle(getMaxIdle());\n \t\tthis.pool.setMinIdle(getMinIdle());\n \t\tthis.pool.setTestOnBorrow(isTestOnBorrow());\n-\t\tthis.pool.setTestOnReturn(isTestOnBorrow());\n+\t\tthis.pool.setTestOnReturn(isTestOnReturn());\n \t\tthis.pool.setValidationQuery(getValidationQuery());\n \t\treturn this.pool;\n \t}\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 47,
    "bugNodeStartChar": 1652,
    "bugNodeLength": 16,
    "fixLineNum": 47,
    "fixNodeStartChar": 1652,
    "fixNodeLength": 16,
    "sourceBeforeFix": "isTestOnBorrow()",
    "sourceAfterFix": "isTestOnReturn()"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "638a31f5e3b396907e2543fc72b68fc257d3c352",
    "fixCommitParentSHA1": "19a880dff6635d3b2b42d1499864d7f8e3eab9ba",
    "bugFilePath": "spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java",
    "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java b/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java\nindex 0b0c071..c9143c5 100644\n--- a/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java\n@@ -84,6 +84,6 @@\n \t\t\t\t\t\treturn builder.toString();\n \t\t\t\t\t}\n \t\t\t\t});\n-\t\treturn future.get(10, TimeUnit.SECONDS);\n+\t\treturn future.get(30, TimeUnit.SECONDS);\n \t}\n }\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 87,
    "bugNodeStartChar": 2893,
    "bugNodeLength": 32,
    "fixLineNum": 87,
    "fixNodeStartChar": 2893,
    "fixNodeLength": 32,
    "sourceBeforeFix": "future.get(10,TimeUnit.SECONDS)",
    "sourceAfterFix": "future.get(30,TimeUnit.SECONDS)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 134,
    "bugNodeStartChar": 4468,
    "bugNodeLength": 127,
    "fixLineNum": 134,
    "fixNodeStartChar": 4468,
    "fixNodeLength": 126,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 134,
    "bugNodeStartChar": 4468,
    "bugNodeLength": 127,
    "fixLineNum": 134,
    "fixNodeStartChar": 4468,
    "fixNodeLength": 126,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 219,
    "bugNodeStartChar": 7528,
    "bugNodeLength": 74,
    "fixLineNum": 219,
    "fixNodeStartChar": 7528,
    "fixNodeLength": 73,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 219,
    "bugNodeStartChar": 7528,
    "bugNodeLength": 74,
    "fixLineNum": 219,
    "fixNodeStartChar": 7528,
    "fixNodeLength": 73,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 233,
    "bugNodeStartChar": 8091,
    "bugNodeLength": 38,
    "fixLineNum": 233,
    "fixNodeStartChar": 8091,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 233,
    "bugNodeStartChar": 8091,
    "bugNodeLength": 38,
    "fixLineNum": 233,
    "fixNodeStartChar": 8091,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\nindex d75bd8b..8b4526e 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n@@ -47,7 +47,7 @@\n \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 50,
    "bugNodeStartChar": 1925,
    "bugNodeLength": 38,
    "fixLineNum": 50,
    "fixNodeStartChar": 1925,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\nindex d75bd8b..8b4526e 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n@@ -47,7 +47,7 @@\n \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 50,
    "bugNodeStartChar": 1925,
    "bugNodeLength": 38,
    "fixLineNum": 50,
    "fixNodeStartChar": 1925,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\nindex bd54e09..19e83e1 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n@@ -48,7 +48,7 @@\n \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 51,
    "bugNodeStartChar": 1978,
    "bugNodeLength": 38,
    "fixLineNum": 51,
    "fixNodeStartChar": 1978,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\nindex bd54e09..19e83e1 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n@@ -48,7 +48,7 @@\n \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 51,
    "bugNodeStartChar": 1978,
    "bugNodeLength": 38,
    "fixLineNum": 51,
    "fixNodeStartChar": 1978,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 134,
    "bugNodeStartChar": 4468,
    "bugNodeLength": 127,
    "fixLineNum": 134,
    "fixNodeStartChar": 4468,
    "fixNodeLength": 126,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 134,
    "bugNodeStartChar": 4468,
    "bugNodeLength": 127,
    "fixLineNum": 134,
    "fixNodeStartChar": 4468,
    "fixNodeLength": 126,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 219,
    "bugNodeStartChar": 7528,
    "bugNodeLength": 74,
    "fixLineNum": 219,
    "fixNodeStartChar": 7528,
    "fixNodeLength": 73,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 219,
    "bugNodeStartChar": 7528,
    "bugNodeLength": 74,
    "fixLineNum": 219,
    "fixNodeStartChar": 7528,
    "fixNodeLength": 73,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])",
    "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 233,
    "bugNodeStartChar": 8091,
    "bugNodeLength": 38,
    "fixLineNum": 233,
    "fixNodeStartChar": 8091,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 233,
    "bugNodeStartChar": 8091,
    "bugNodeLength": 38,
    "fixLineNum": 233,
    "fixNodeStartChar": 8091,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\nindex d75bd8b..8b4526e 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n@@ -47,7 +47,7 @@\n \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 50,
    "bugNodeStartChar": 1925,
    "bugNodeLength": 38,
    "fixLineNum": 50,
    "fixNodeStartChar": 1925,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\nindex d75bd8b..8b4526e 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n@@ -47,7 +47,7 @@\n \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 50,
    "bugNodeStartChar": 1925,
    "bugNodeLength": 38,
    "fixLineNum": 50,
    "fixNodeStartChar": 1925,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\nindex bd54e09..19e83e1 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n@@ -48,7 +48,7 @@\n \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 51,
    "bugNodeStartChar": 1978,
    "bugNodeLength": 38,
    "fixLineNum": 51,
    "fixNodeStartChar": 1978,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e",
    "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
    "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java",
    "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\nindex bd54e09..19e83e1 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java\n@@ -48,7 +48,7 @@\n \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 51,
    "bugNodeStartChar": 1978,
    "bugNodeLength": 38,
    "fixLineNum": 51,
    "fixNodeStartChar": 1978,
    "fixNodeLength": 37,
    "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
    "sourceAfterFix": "factory.getEmbeddedServletContainer()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\nindex 8b12cc5..6092c21 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n@@ -29,7 +29,7 @@\n import org.springframework.bootstrap.cli.compiler.DependencyCustomizer;\n \n /**\n- * {@link CompilerAutoConfiguration} for Spring Batch.\n+ * {@link CompilerAutoConfiguration} for Spring Integration.\n  * \n  * @author Dave Syer\n  */\n@@ -39,7 +39,7 @@\n \tpublic boolean matches(ClassNode classNode) {\n \t\t// Slightly weird detection algorithm because there is no @Enable annotation for\n \t\t// Integration\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1556,
    "bugNodeLength": 93,
    "fixLineNum": 42,
    "fixNodeStartChar": 1556,
    "fixNodeLength": 95,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\nindex 8b12cc5..6092c21 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n@@ -29,7 +29,7 @@\n import org.springframework.bootstrap.cli.compiler.DependencyCustomizer;\n \n /**\n- * {@link CompilerAutoConfiguration} for Spring Batch.\n+ * {@link CompilerAutoConfiguration} for Spring Integration.\n  * \n  * @author Dave Syer\n  */\n@@ -39,7 +39,7 @@\n \tpublic boolean matches(ClassNode classNode) {\n \t\t// Slightly weird detection algorithm because there is no @Enable annotation for\n \t\t// Integration\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1556,
    "bugNodeLength": 93,
    "fixLineNum": 42,
    "fixNodeStartChar": 1556,
    "fixNodeLength": 95,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\nindex 4210232..0aa0960 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -50,7 +50,7 @@\n \n \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 71,
    "fixLineNum": 53,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 73,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\nindex 4210232..0aa0960 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -50,7 +50,7 @@\n \n \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 71,
    "fixLineNum": 53,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 73,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6c4e39d4c1356bd3c068af3a2d42cf020e960842",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\nindex 8b12cc5..6092c21 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n@@ -29,7 +29,7 @@\n import org.springframework.bootstrap.cli.compiler.DependencyCustomizer;\n \n /**\n- * {@link CompilerAutoConfiguration} for Spring Batch.\n+ * {@link CompilerAutoConfiguration} for Spring Integration.\n  * \n  * @author Dave Syer\n  */\n@@ -39,7 +39,7 @@\n \tpublic boolean matches(ClassNode classNode) {\n \t\t// Slightly weird detection algorithm because there is no @Enable annotation for\n \t\t// Integration\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1556,
    "bugNodeLength": 93,
    "fixLineNum": 42,
    "fixNodeStartChar": 1556,
    "fixNodeLength": 95,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6c4e39d4c1356bd3c068af3a2d42cf020e960842",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\nindex 8b12cc5..6092c21 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n@@ -29,7 +29,7 @@\n import org.springframework.bootstrap.cli.compiler.DependencyCustomizer;\n \n /**\n- * {@link CompilerAutoConfiguration} for Spring Batch.\n+ * {@link CompilerAutoConfiguration} for Spring Integration.\n  * \n  * @author Dave Syer\n  */\n@@ -39,7 +39,7 @@\n \tpublic boolean matches(ClassNode classNode) {\n \t\t// Slightly weird detection algorithm because there is no @Enable annotation for\n \t\t// Integration\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}\n \n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 42,
    "bugNodeStartChar": 1556,
    "bugNodeLength": 93,
    "fixLineNum": 42,
    "fixNodeStartChar": 1556,
    "fixNodeLength": 95,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6c4e39d4c1356bd3c068af3a2d42cf020e960842",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\nindex 4210232..0aa0960 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -50,7 +50,7 @@\n \n \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 71,
    "fixLineNum": 53,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 73,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6c4e39d4c1356bd3c068af3a2d42cf020e960842",
    "fixCommitParentSHA1": "25f68404f37f35cb95ade6b3ff46ec427375c867",
    "bugFilePath": "spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java",
    "fixPatch": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\nindex 4210232..0aa0960 100644\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -50,7 +50,7 @@\n \n \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n-\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\");\n \t}\n \n \t@Override\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 53,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 71,
    "fixLineNum": 53,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 73,
    "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")",
    "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"Controller\",\"EnableWebMvc\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "88a1c1de41e145d7c39abe4d6dc4f3fd51545748",
    "fixCommitParentSHA1": "4743d1803cb2e4a9c7c946db1cf256884ccbad6a",
    "bugFilePath": "spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java",
    "fixPatch": "diff --git a/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java b/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java\nindex bcf296f..975583b 100644\n--- a/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java\n+++ b/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java\n@@ -29,7 +29,6 @@\n  * Externalized configuration for server properties\n  * \n  * @author Dave Syer\n- * \n  */\n public class ServerPropertiesTests {\n \n@@ -41,7 +40,7 @@\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"server.address\",\n \t\t\t\t\"127.0.0.1\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(InetAddress.getLocalHost(), this.properties.getAddress());\n+\t\tassertEquals(InetAddress.getByName(\"127.0.0.1\"), this.properties.getAddress());\n \t}\n \n \t@Test\n",
    "projectName": "spring-projects.spring-boot",
    "bugLineNum": 44,
    "bugNodeStartChar": 1473,
    "bugNodeLength": 26,
    "fixLineNum": 44,
    "fixNodeStartChar": 1473,
    "fixNodeLength": 34,
    "sourceBeforeFix": "InetAddress.getLocalHost()",
    "sourceAfterFix": "InetAddress.getByName(\"127.0.0.1\")"
  }
]