[{"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "92b7f309d809fbb4e74a0677f62b8fe39ff207db", "fixCommitParentSHA1": "1155b10c8a1089bdeaebf752311991ce015b9d00", "bugFilePath": "examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java", "fixPatch": "diff --git a/examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java b/examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java\nindex d79010c..fabbd6e 100644\n--- a/examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java\n+++ b/examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java\n@@ -176,7 +176,7 @@\n     createEmptyFile(testFile);\n     byte[] buf = new byte[0];\n     int bytesRead = mUfs.open(testFile).read(buf);\n-    boolean bytesReadCorrect = bytesRead != 0;\n+    boolean bytesReadCorrect = bytesRead == 0;\n     if (UnderFileSystemUtils.isHdfs(mUfs) && bytesRead == -1) {\n       // TODO(adit): Consider making the return value uniform across UFSs\n       bytesReadCorrect = true;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 179, "bugNodeStartChar": 7007, "bugNodeLength": 14, "fixLineNum": 179, "fixNodeStartChar": 7007, "fixNodeLength": 14, "sourceBeforeFix": "bytesRead != 0", "sourceAfterFix": "bytesRead == 0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8d71d7b7fee48804c1bda4f1afa90a91f2777cef", "fixCommitParentSHA1": "646fe30a935d434cadb0b7f186b2c461f9a67b0c", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java\nindex af0a271..1c1b1ab 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java\n@@ -142,10 +142,10 @@\n     }\n     mPosToRead += buffer.readableBytes();\n     try {\n-      mStream.send(ReadRequest.newBuilder().setOffsetReceived(mPosToRead).build());\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n     } catch (Exception e) {\n       // nothing is done as the receipt is sent at best effort\n-      LOG.warn(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n           mReadRequest, e.getMessage());\n     }\n     Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 148, "bugNodeStartChar": 5841, "bugNodeLength": 125, "fixLineNum": 148, "fixNodeStartChar": 5841, "fixNodeLength": 126, "sourceBeforeFix": "LOG.warn(\"Failed to send receipt of data to worker {} for request {}: {}.\",mAddress,mReadRequest,e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\",mAddress,mReadRequest,e.getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8d71d7b7fee48804c1bda4f1afa90a91f2777cef", "fixCommitParentSHA1": "646fe30a935d434cadb0b7f186b2c461f9a67b0c", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java\nindex af0a271..1c1b1ab 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcDataReader.java\n@@ -142,10 +142,10 @@\n     }\n     mPosToRead += buffer.readableBytes();\n     try {\n-      mStream.send(ReadRequest.newBuilder().setOffsetReceived(mPosToRead).build());\n+      mStream.send(mReadRequest.toBuilder().setOffsetReceived(mPosToRead).build());\n     } catch (Exception e) {\n       // nothing is done as the receipt is sent at best effort\n-      LOG.warn(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n+      LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\", mAddress,\n           mReadRequest, e.getMessage());\n     }\n     Preconditions.checkState(mPosToRead - mReadRequest.getOffset() <= mReadRequest.getLength());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 148, "bugNodeStartChar": 5841, "bugNodeLength": 125, "fixLineNum": 148, "fixNodeStartChar": 5841, "fixNodeLength": 126, "sourceBeforeFix": "LOG.warn(\"Failed to send receipt of data to worker {} for request {}: {}.\",mAddress,mReadRequest,e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to send receipt of data to worker {} for request {}: {}.\",mAddress,mReadRequest,e.getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e8d4313f2227440d197eb7706375d24ab8a9f220", "fixCommitParentSHA1": "146216b3c5de5e5a4161d4b01a7257fe0f358f0f", "bugFilePath": "shell/src/main/java/alluxio/cli/fs/command/LsCommand.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java b/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java\nindex 2be6fb3..78d46bc 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java\n@@ -127,7 +127,7 @@\n     SORT_FIELD_COMPARATORS.put(\"name\",\n         Comparator.comparing(URIStatus::getName, String.CASE_INSENSITIVE_ORDER));\n     SORT_FIELD_COMPARATORS.put(\"path\", Comparator.comparing(URIStatus::getPath));\n-    SORT_FIELD_COMPARATORS.put(\"size\", Comparator.comparingLong(URIStatus::getBlockSizeBytes));\n+    SORT_FIELD_COMPARATORS.put(\"size\", Comparator.comparingLong(URIStatus::getLength));\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 130, "bugNodeStartChar": 5158, "bugNodeLength": 28, "fixLineNum": 130, "fixNodeStartChar": 5158, "fixNodeLength": 20, "sourceBeforeFix": "URIStatus::getBlockSizeBytes", "sourceAfterFix": "URIStatus::getLength"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "40f855112ded52d57277ffb03f8809f5d687fbbf", "fixCommitParentSHA1": "b6ede350964986fb51b26cf0304847bb53ebb3a3", "bugFilePath": "core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java b/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\nindex ae2d441..4f5b02f 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\n@@ -48,7 +48,7 @@\n  */\n @ThreadSafe\n public class JournalStateMachine extends StateMachine implements Snapshottable {\n-  private static final Logger LOG = LoggerFactory.getLogger(RaftJournalSystem.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(JournalStateMachine.class);\n \n   private final Map<String, RaftJournal> mJournals;\n   @GuardedBy(\"this\")\n@@ -136,7 +136,10 @@\n     }\n     long newSN = entry.getSequenceNumber();\n     if (newSN < mNextSequenceNumberToRead) {\n-      LOG.info(\"Ignoring duplicate journal entry with SN {} when next SN is {}\", newSN,\n+      // This can happen due to retried writes. For example, if flushing [3, 4] fails, we will\n+      // retry, and the log may end up looking like [1, 2, 3, 4, 3, 4] if the original request\n+      // eventually succeeds. Once we've read the first \"4\", we must ignore the next two entries.\n+      LOG.debug(\"Ignoring duplicate journal entry with SN {} when next SN is {}\", newSN,\n           mNextSequenceNumberToRead);\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 51, "bugNodeStartChar": 2185, "bugNodeLength": 23, "fixLineNum": 51, "fixNodeStartChar": 2185, "fixNodeLength": 25, "sourceBeforeFix": "RaftJournalSystem.class", "sourceAfterFix": "JournalStateMachine.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "40f855112ded52d57277ffb03f8809f5d687fbbf", "fixCommitParentSHA1": "b6ede350964986fb51b26cf0304847bb53ebb3a3", "bugFilePath": "core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java b/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\nindex ae2d441..4f5b02f 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\n@@ -48,7 +48,7 @@\n  */\n @ThreadSafe\n public class JournalStateMachine extends StateMachine implements Snapshottable {\n-  private static final Logger LOG = LoggerFactory.getLogger(RaftJournalSystem.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(JournalStateMachine.class);\n \n   private final Map<String, RaftJournal> mJournals;\n   @GuardedBy(\"this\")\n@@ -136,7 +136,10 @@\n     }\n     long newSN = entry.getSequenceNumber();\n     if (newSN < mNextSequenceNumberToRead) {\n-      LOG.info(\"Ignoring duplicate journal entry with SN {} when next SN is {}\", newSN,\n+      // This can happen due to retried writes. For example, if flushing [3, 4] fails, we will\n+      // retry, and the log may end up looking like [1, 2, 3, 4, 3, 4] if the original request\n+      // eventually succeeds. Once we've read the first \"4\", we must ignore the next two entries.\n+      LOG.debug(\"Ignoring duplicate journal entry with SN {} when next SN is {}\", newSN,\n           mNextSequenceNumberToRead);\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 139, "bugNodeStartChar": 5421, "bugNodeLength": 118, "fixLineNum": 142, "fixNodeStartChar": 5709, "fixNodeLength": 119, "sourceBeforeFix": "LOG.info(\"Ignoring duplicate journal entry with SN {} when next SN is {}\",newSN,mNextSequenceNumberToRead)", "sourceAfterFix": "LOG.debug(\"Ignoring duplicate journal entry with SN {} when next SN is {}\",newSN,mNextSequenceNumberToRead)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "40f855112ded52d57277ffb03f8809f5d687fbbf", "fixCommitParentSHA1": "b6ede350964986fb51b26cf0304847bb53ebb3a3", "bugFilePath": "core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java b/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\nindex ae2d441..4f5b02f 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/raft/JournalStateMachine.java\n@@ -48,7 +48,7 @@\n  */\n @ThreadSafe\n public class JournalStateMachine extends StateMachine implements Snapshottable {\n-  private static final Logger LOG = LoggerFactory.getLogger(RaftJournalSystem.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(JournalStateMachine.class);\n \n   private final Map<String, RaftJournal> mJournals;\n   @GuardedBy(\"this\")\n@@ -136,7 +136,10 @@\n     }\n     long newSN = entry.getSequenceNumber();\n     if (newSN < mNextSequenceNumberToRead) {\n-      LOG.info(\"Ignoring duplicate journal entry with SN {} when next SN is {}\", newSN,\n+      // This can happen due to retried writes. For example, if flushing [3, 4] fails, we will\n+      // retry, and the log may end up looking like [1, 2, 3, 4, 3, 4] if the original request\n+      // eventually succeeds. Once we've read the first \"4\", we must ignore the next two entries.\n+      LOG.debug(\"Ignoring duplicate journal entry with SN {} when next SN is {}\", newSN,\n           mNextSequenceNumberToRead);\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 139, "bugNodeStartChar": 5421, "bugNodeLength": 118, "fixLineNum": 142, "fixNodeStartChar": 5709, "fixNodeLength": 119, "sourceBeforeFix": "LOG.info(\"Ignoring duplicate journal entry with SN {} when next SN is {}\",newSN,mNextSequenceNumberToRead)", "sourceAfterFix": "LOG.debug(\"Ignoring duplicate journal entry with SN {} when next SN is {}\",newSN,mNextSequenceNumberToRead)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c1301c436ddb98e943d087a35b5ae97aa8c1420c", "fixCommitParentSHA1": "e387d08c63b2036170caa1d042e52195ec2b3196", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java b/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java\nindex fc22376..f4c3cff 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java\n@@ -44,7 +44,7 @@\n \n   private GetStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n-        .setTtl(Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL))\n+        .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =\n", "projectName": "Alluxio.alluxio", "bugLineNum": 47, "bugNodeStartChar": 1482, "bugNodeLength": 53, "fixLineNum": 47, "fixNodeStartChar": 1482, "fixNodeLength": 51, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c1301c436ddb98e943d087a35b5ae97aa8c1420c", "fixCommitParentSHA1": "e387d08c63b2036170caa1d042e52195ec2b3196", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java b/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java\nindex fc22376..f4c3cff 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/options/GetStatusOptions.java\n@@ -44,7 +44,7 @@\n \n   private GetStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n-        .setTtl(Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL))\n+        .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =\n", "projectName": "Alluxio.alluxio", "bugLineNum": 47, "bugNodeStartChar": 1482, "bugNodeLength": 53, "fixLineNum": 47, "fixNodeStartChar": 1482, "fixNodeLength": 51, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c1301c436ddb98e943d087a35b5ae97aa8c1420c", "fixCommitParentSHA1": "e387d08c63b2036170caa1d042e52195ec2b3196", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java b/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java\nindex b73cfe6..9747d74 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java\n@@ -45,7 +45,7 @@\n \n   private ListStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n-        .setTtl(Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL))\n+        .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =\n", "projectName": "Alluxio.alluxio", "bugLineNum": 48, "bugNodeStartChar": 1508, "bugNodeLength": 53, "fixLineNum": 48, "fixNodeStartChar": 1508, "fixNodeLength": 51, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c1301c436ddb98e943d087a35b5ae97aa8c1420c", "fixCommitParentSHA1": "e387d08c63b2036170caa1d042e52195ec2b3196", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java b/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java\nindex b73cfe6..9747d74 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/options/ListStatusOptions.java\n@@ -45,7 +45,7 @@\n \n   private ListStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n-        .setTtl(Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL))\n+        .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =\n", "projectName": "Alluxio.alluxio", "bugLineNum": 48, "bugNodeStartChar": 1508, "bugNodeLength": 53, "fixLineNum": 48, "fixNodeStartChar": 1508, "fixNodeLength": 51, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b2b6b606f010d7d1da5a60bab132e65213e7c3bf", "fixCommitParentSHA1": "25acd36d7d4e73201c61cbbca3aa9b14e623a7cf", "bugFilePath": "tests/src/test/java/alluxio/client/fs/FileSystemMasterIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/fs/FileSystemMasterIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/FileSystemMasterIntegrationTest.java\nindex 18a6819..493c08c 100644\n--- a/tests/src/test/java/alluxio/client/fs/FileSystemMasterIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/FileSystemMasterIntegrationTest.java\n@@ -1209,7 +1209,7 @@\n     String ufs = Configuration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n     String parentPath = Paths.get(ufs, \"d1\").toString();\n     FileUtils.createDir(parentPath);\n-    FileUtils.changeLocalFilePermission(parentPath, new Mode((short) 600).toString());\n+    FileUtils.changeLocalFilePermission(parentPath, new Mode((short) 0600).toString());\n     AlluxioURI path = new AlluxioURI(Paths.get(\"/d1\", \"d2\", \"d3\", \"d4\").toString());\n \n     // this should fail\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1212, "bugNodeStartChar": 52515, "bugNodeLength": 11, "fixLineNum": 1212, "fixNodeStartChar": 52515, "fixNodeLength": 12, "sourceBeforeFix": "(short)600", "sourceAfterFix": "(short)0600"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b2b6b606f010d7d1da5a60bab132e65213e7c3bf", "fixCommitParentSHA1": "25acd36d7d4e73201c61cbbca3aa9b14e623a7cf", "bugFilePath": "tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java\nindex 1d0e5cd..824a660 100644\n--- a/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java\n@@ -447,14 +447,14 @@\n \n     // Set initial alluxio permissions\n     mFileSystem.setAttribute(new AlluxioURI(alluxioPath(EXISTING_FILE)),\n-        SetAttributeOptions.defaults().setMode(new Mode((short) 777)));\n+        SetAttributeOptions.defaults().setMode(new Mode((short) 0777)));\n \n     URIStatus status = mFileSystem.getStatus(new AlluxioURI(alluxioPath(EXISTING_FILE)), options);\n     String startFingerprint = status.getUfsFingerprint();\n \n     // Change alluxio permissions\n     mFileSystem.setAttribute(new AlluxioURI(alluxioPath(EXISTING_FILE)),\n-        SetAttributeOptions.defaults().setMode(new Mode((short) 655)));\n+        SetAttributeOptions.defaults().setMode(new Mode((short) 0655)));\n \n     status = mFileSystem.getStatus(new AlluxioURI(alluxioPath(EXISTING_FILE)), options);\n     String endFingerprint = status.getUfsFingerprint();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 450, "bugNodeStartChar": 17844, "bugNodeLength": 11, "fixLineNum": 450, "fixNodeStartChar": 17844, "fixNodeLength": 12, "sourceBeforeFix": "(short)777", "sourceAfterFix": "(short)0777"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b2b6b606f010d7d1da5a60bab132e65213e7c3bf", "fixCommitParentSHA1": "25acd36d7d4e73201c61cbbca3aa9b14e623a7cf", "bugFilePath": "tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java\nindex 1d0e5cd..824a660 100644\n--- a/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/UfsSyncIntegrationTest.java\n@@ -447,14 +447,14 @@\n \n     // Set initial alluxio permissions\n     mFileSystem.setAttribute(new AlluxioURI(alluxioPath(EXISTING_FILE)),\n-        SetAttributeOptions.defaults().setMode(new Mode((short) 777)));\n+        SetAttributeOptions.defaults().setMode(new Mode((short) 0777)));\n \n     URIStatus status = mFileSystem.getStatus(new AlluxioURI(alluxioPath(EXISTING_FILE)), options);\n     String startFingerprint = status.getUfsFingerprint();\n \n     // Change alluxio permissions\n     mFileSystem.setAttribute(new AlluxioURI(alluxioPath(EXISTING_FILE)),\n-        SetAttributeOptions.defaults().setMode(new Mode((short) 655)));\n+        SetAttributeOptions.defaults().setMode(new Mode((short) 0655)));\n \n     status = mFileSystem.getStatus(new AlluxioURI(alluxioPath(EXISTING_FILE)), options);\n     String endFingerprint = status.getUfsFingerprint();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 457, "bugNodeStartChar": 18182, "bugNodeLength": 11, "fixLineNum": 457, "fixNodeStartChar": 18182, "fixNodeLength": 12, "sourceBeforeFix": "(short)655", "sourceAfterFix": "(short)0655"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "a80ce3d0a97440d2c91afa9a6043901acdca0170", "fixCommitParentSHA1": "ee0cc1d23d31cde6fd134420d821f9a23615d910", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java b/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java\nindex 4e45ec6..69036a6 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java\n@@ -231,15 +231,17 @@\n    * it does not close the existing path.\n    *\n    * @param child the inode of the direct child\n+   * @param lockMode the desired locking mode for the child\n    * @return a {@link LockedInodePath} for the direct child\n    * @throws InvalidPathException if the path is invalid\n    * @throws FileDoesNotExistException if the file does not exist\n    */\n-  public synchronized LockedInodePath createTempPathForExistingChild(Inode<?> child)\n+  public synchronized LockedInodePath createTempPathForExistingChild(\n+      Inode<?> child, InodeTree.LockMode lockMode)\n       throws InvalidPathException, FileDoesNotExistException {\n     InodeLockList lockList = new CompositeInodeLockList(mLockList);\n     LockedInodePath lockedDescendantPath;\n-    if (mLockMode == InodeTree.LockMode.READ) {\n+    if (lockMode == InodeTree.LockMode.READ) {\n       lockList.lockReadAndCheckParent(child, getInode());\n       lockedDescendantPath = new MutableLockedInodePath(\n           getUri().join(child.getName()), this, lockList);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 242, "bugNodeStartChar": 8741, "bugNodeLength": 36, "fixLineNum": 242, "fixNodeStartChar": 8741, "fixNodeLength": 35, "sourceBeforeFix": "mLockMode == InodeTree.LockMode.READ", "sourceAfterFix": "lockMode == InodeTree.LockMode.READ"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a80ce3d0a97440d2c91afa9a6043901acdca0170", "fixCommitParentSHA1": "ee0cc1d23d31cde6fd134420d821f9a23615d910", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java b/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java\nindex 4e45ec6..69036a6 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/LockedInodePath.java\n@@ -231,15 +231,17 @@\n    * it does not close the existing path.\n    *\n    * @param child the inode of the direct child\n+   * @param lockMode the desired locking mode for the child\n    * @return a {@link LockedInodePath} for the direct child\n    * @throws InvalidPathException if the path is invalid\n    * @throws FileDoesNotExistException if the file does not exist\n    */\n-  public synchronized LockedInodePath createTempPathForExistingChild(Inode<?> child)\n+  public synchronized LockedInodePath createTempPathForExistingChild(\n+      Inode<?> child, InodeTree.LockMode lockMode)\n       throws InvalidPathException, FileDoesNotExistException {\n     InodeLockList lockList = new CompositeInodeLockList(mLockList);\n     LockedInodePath lockedDescendantPath;\n-    if (mLockMode == InodeTree.LockMode.READ) {\n+    if (lockMode == InodeTree.LockMode.READ) {\n       lockList.lockReadAndCheckParent(child, getInode());\n       lockedDescendantPath = new MutableLockedInodePath(\n           getUri().join(child.getName()), this, lockList);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 242, "bugNodeStartChar": 8741, "bugNodeLength": 36, "fixLineNum": 242, "fixNodeStartChar": 8741, "fixNodeLength": 35, "sourceBeforeFix": "mLockMode == InodeTree.LockMode.READ", "sourceAfterFix": "lockMode == InodeTree.LockMode.READ"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a382c85225c19d45fe7052af28654cd5aca7ef11", "fixCommitParentSHA1": "58a3b667861521067f11d518b3381198343ab41e", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java b/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java\nindex e705478..5695ce3 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java\n@@ -1068,7 +1068,7 @@\n                 status = ufs.getStatus(ufsUri);\n               } catch (Exception e) {\n                 throw new IOException(String.format(\"Cannot sync UFS directory %s: %s.\", ufsUri,\n-                    e.getMessage()), e);\n+                    e.toString()), e);\n               }\n               if (status.isFile()) {\n                 throw new InvalidPathException(String.format(\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1071, "bugNodeStartChar": 43490, "bugNodeLength": 14, "fixLineNum": 1071, "fixNodeStartChar": 43490, "fixNodeLength": 12, "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a382c85225c19d45fe7052af28654cd5aca7ef11", "fixCommitParentSHA1": "58a3b667861521067f11d518b3381198343ab41e", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java b/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java\nindex e705478..5695ce3 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java\n@@ -1068,7 +1068,7 @@\n                 status = ufs.getStatus(ufsUri);\n               } catch (Exception e) {\n                 throw new IOException(String.format(\"Cannot sync UFS directory %s: %s.\", ufsUri,\n-                    e.getMessage()), e);\n+                    e.toString()), e);\n               }\n               if (status.isFile()) {\n                 throw new InvalidPathException(String.format(\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1071, "bugNodeStartChar": 43490, "bugNodeLength": 14, "fixLineNum": 1071, "fixNodeStartChar": 43490, "fixNodeLength": 12, "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "459e772e2b72e5179d117e6f50e3837c95fa1112", "fixCommitParentSHA1": "c901e96a7e9a986b50831cc92a1662d0384b3ff3", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/allocator/MaxFreeAllocator.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/allocator/MaxFreeAllocator.java b/core/server/worker/src/main/java/alluxio/worker/block/allocator/MaxFreeAllocator.java\nindex 3dfa290..56ce9ab 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/allocator/MaxFreeAllocator.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/allocator/MaxFreeAllocator.java\n@@ -57,7 +57,7 @@\n    */\n   private StorageDirView allocateBlock(long sessionId, long blockSize,\n       BlockStoreLocation location) {\n-    Preconditions.checkNotNull(location);\n+    Preconditions.checkNotNull(location, \"location\");\n     StorageDirView candidateDirView = null;\n \n     if (location.equals(BlockStoreLocation.anyTier())) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 60, "bugNodeStartChar": 2391, "bugNodeLength": 36, "fixLineNum": 60, "fixNodeStartChar": 2391, "fixNodeLength": 48, "sourceBeforeFix": "Preconditions.checkNotNull(location)", "sourceAfterFix": "Preconditions.checkNotNull(location,\"location\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "54a0202fd530f5e76de06cbfc3e1da97f8cdf808", "fixCommitParentSHA1": "61d8f890b37a3b6202425cb565020f847c305bee", "bugFilePath": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java b/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java\nindex dd0ec94..4bd1cd3 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java\n@@ -363,7 +363,7 @@\n         entry = journalReader.read();\n       } catch (IOException e) {\n         LOG.warn(\"{}: Failed to read from journal: {}\", mMaster.getName(), e);\n-        if (retry.attemptRetry()) {\n+        if (retry.attempt()) {\n           continue;\n         }\n         throw new RuntimeException(e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 366, "bugNodeStartChar": 12778, "bugNodeLength": 20, "fixLineNum": 366, "fixNodeStartChar": 12778, "fixNodeLength": 15, "sourceBeforeFix": "retry.attemptRetry()", "sourceAfterFix": "retry.attempt()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "54a0202fd530f5e76de06cbfc3e1da97f8cdf808", "fixCommitParentSHA1": "61d8f890b37a3b6202425cb565020f847c305bee", "bugFilePath": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java b/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java\nindex dd0ec94..4bd1cd3 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java\n@@ -363,7 +363,7 @@\n         entry = journalReader.read();\n       } catch (IOException e) {\n         LOG.warn(\"{}: Failed to read from journal: {}\", mMaster.getName(), e);\n-        if (retry.attemptRetry()) {\n+        if (retry.attempt()) {\n           continue;\n         }\n         throw new RuntimeException(e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 366, "bugNodeStartChar": 12778, "bugNodeLength": 20, "fixLineNum": 366, "fixNodeStartChar": 12778, "fixNodeLength": 15, "sourceBeforeFix": "retry.attemptRetry()", "sourceAfterFix": "retry.attempt()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "049041ac5293efc1066c473f4765330e7eb04aae", "fixCommitParentSHA1": "b3f7e2c79fb668e8f46a8e0be0235c3dcdb140ee", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex 283b5b9..3d847b3 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -1504,7 +1504,7 @@\n               failedToDelete = !ufsDeleter.delete(alluxioUriToDel, delInode);\n             }\n           } catch (InvalidPathException e) {\n-            LOG.warn(e.getMessage());\n+            LOG.warn(\"Failed to delete path from UFS: {}\", e.getMessage());\n           }\n         }\n         if (!failedToDelete) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1507, "bugNodeStartChar": 66227, "bugNodeLength": 24, "fixLineNum": 1507, "fixNodeStartChar": 66227, "fixNodeLength": 62, "sourceBeforeFix": "LOG.warn(e.getMessage())", "sourceAfterFix": "LOG.warn(\"Failed to delete path from UFS: {}\",e.getMessage())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "049041ac5293efc1066c473f4765330e7eb04aae", "fixCommitParentSHA1": "b3f7e2c79fb668e8f46a8e0be0235c3dcdb140ee", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/SpaceReserver.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/SpaceReserver.java b/core/server/worker/src/main/java/alluxio/worker/block/SpaceReserver.java\nindex f59adba..3a7c689 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/SpaceReserver.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/SpaceReserver.java\n@@ -102,8 +102,8 @@\n             mBlockWorker.freeSpace(Sessions.MIGRATE_DATA_SESSION_ID, reservedSpace, tierAlias);\n           } catch (WorkerOutOfSpaceException | BlockDoesNotExistException\n               | BlockAlreadyExistsException | InvalidWorkerStateException | IOException e) {\n-            LOG.warn(\"SpaceReserver failed to free tier {} to {} bytes used\", tierAlias,\n-                reservedSpace, e.getMessage());\n+            LOG.warn(\"SpaceReserver failed to free tier {} to {} bytes used for high watermarks: \"\n+                + \"{}\", tierAlias, reservedSpace, e.getMessage());\n           }\n         }\n       } else {\n@@ -111,7 +111,8 @@\n           mBlockWorker.freeSpace(Sessions.MIGRATE_DATA_SESSION_ID, reservedSpace, tierAlias);\n         } catch (WorkerOutOfSpaceException | BlockDoesNotExistException\n             | BlockAlreadyExistsException | InvalidWorkerStateException | IOException e) {\n-          LOG.warn(e.getMessage());\n+          LOG.warn(\"SpaceReserver failed to free tier {} to {} bytes used: {}\", tierAlias,\n+              reservedSpace, e.getMessage());\n         }\n       }\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 114, "bugNodeStartChar": 5326, "bugNodeLength": 24, "fixLineNum": 114, "fixNodeStartChar": 5326, "fixNodeLength": 125, "sourceBeforeFix": "LOG.warn(e.getMessage())", "sourceAfterFix": "LOG.warn(\"SpaceReserver failed to free tier {} to {} bytes used: {}\",tierAlias,reservedSpace,e.getMessage())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e7ff07d6ddd0d860daee74e0b2623000ecd6778d", "fixCommitParentSHA1": "6750605db7548d2592b3c6c48930a50129da3c33", "bugFilePath": "core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java b/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java\nindex f951810..5e21123 100644\n--- a/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java\n+++ b/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java\n@@ -74,7 +74,7 @@\n       }\n       thread.interrupt();\n       thread.join(10 * Constants.SECOND_MS);\n-      assertFalse(retry.attemptRetry());\n+      assertFalse(retry.attempt());\n     }\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 77, "bugNodeStartChar": 2823, "bugNodeLength": 20, "fixLineNum": 77, "fixNodeStartChar": 2823, "fixNodeLength": 15, "sourceBeforeFix": "retry.attemptRetry()", "sourceAfterFix": "retry.attempt()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e7ff07d6ddd0d860daee74e0b2623000ecd6778d", "fixCommitParentSHA1": "6750605db7548d2592b3c6c48930a50129da3c33", "bugFilePath": "core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java b/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java\nindex f951810..5e21123 100644\n--- a/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java\n+++ b/core/common/src/test/java/alluxio/retry/ExponentialTimeBoundedRetryTest.java\n@@ -74,7 +74,7 @@\n       }\n       thread.interrupt();\n       thread.join(10 * Constants.SECOND_MS);\n-      assertFalse(retry.attemptRetry());\n+      assertFalse(retry.attempt());\n     }\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 77, "bugNodeStartChar": 2823, "bugNodeLength": 20, "fixLineNum": 77, "fixNodeStartChar": 2823, "fixNodeLength": 15, "sourceBeforeFix": "retry.attemptRetry()", "sourceAfterFix": "retry.attempt()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "0e04d7164b1d8ab2da90a07a76610adc051423ad", "fixCommitParentSHA1": "2edf0b0cd191e41c0019a0f1326b411299a472c5", "bugFilePath": "keyvalue/client/src/main/java/alluxio/client/keyvalue/KeyValuePartitionReader.java", "fixPatch": "diff --git a/keyvalue/client/src/main/java/alluxio/client/keyvalue/KeyValuePartitionReader.java b/keyvalue/client/src/main/java/alluxio/client/keyvalue/KeyValuePartitionReader.java\nindex b7d7a50..006f492 100644\n--- a/keyvalue/client/src/main/java/alluxio/client/keyvalue/KeyValuePartitionReader.java\n+++ b/keyvalue/client/src/main/java/alluxio/client/keyvalue/KeyValuePartitionReader.java\n@@ -43,7 +43,7 @@\n      */\n     public static KeyValuePartitionReader create(AlluxioURI uri)\n         throws AlluxioException, IOException {\n-      Preconditions.checkNotNull(uri);\n+      Preconditions.checkNotNull(uri, \"uri\");\n       FileSystem fs = FileSystem.Factory.get();\n       List<Long> blockIds = fs.getStatus(uri).getBlockIds();\n       // Each partition file should only contain one block.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 46, "bugNodeStartChar": 1509, "bugNodeLength": 31, "fixLineNum": 46, "fixNodeStartChar": 1509, "fixNodeLength": 38, "sourceBeforeFix": "Preconditions.checkNotNull(uri)", "sourceAfterFix": "Preconditions.checkNotNull(uri,\"uri\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8368e79de7092308557d39acadd54283c2c8d220", "fixCommitParentSHA1": "a5d2dc8187b9fd7b9b62ebf78f8c7de77f0193cf", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\nindex 283c9c6..5e94192 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n@@ -120,7 +120,7 @@\n       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n-      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n+      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4061, "bugNodeLength": 62, "fixLineNum": 123, "fixNodeStartChar": 4061, "fixNodeLength": 58, "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8368e79de7092308557d39acadd54283c2c8d220", "fixCommitParentSHA1": "a5d2dc8187b9fd7b9b62ebf78f8c7de77f0193cf", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\nindex 283c9c6..5e94192 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n@@ -120,7 +120,7 @@\n       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n-      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n+      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4061, "bugNodeLength": 62, "fixLineNum": 123, "fixNodeStartChar": 4061, "fixNodeLength": 58, "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8368e79de7092308557d39acadd54283c2c8d220", "fixCommitParentSHA1": "a5d2dc8187b9fd7b9b62ebf78f8c7de77f0193cf", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\nindex 72fa3fa..f1cff5b 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n@@ -142,7 +142,7 @@\n         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n-      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);\n+      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);\n \n       // Generate the put request and wait for the transfer manager to complete the upload, then\n       // delete the temporary file on the local machine\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 5198, "bugNodeLength": 56, "fixLineNum": 145, "fixNodeStartChar": 5198, "fixNodeLength": 52, "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8368e79de7092308557d39acadd54283c2c8d220", "fixCommitParentSHA1": "a5d2dc8187b9fd7b9b62ebf78f8c7de77f0193cf", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\nindex 72fa3fa..f1cff5b 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n@@ -142,7 +142,7 @@\n         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n-      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);\n+      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);\n \n       // Generate the put request and wait for the transfer manager to complete the upload, then\n       // delete the temporary file on the local machine\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 5198, "bugNodeLength": 56, "fixLineNum": 145, "fixNodeStartChar": 5198, "fixNodeLength": 52, "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\nindex 283c9c6..5e94192 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n@@ -120,7 +120,7 @@\n       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n-      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n+      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4061, "bugNodeLength": 62, "fixLineNum": 123, "fixNodeStartChar": 4061, "fixNodeLength": 58, "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\nindex 283c9c6..5e94192 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n@@ -120,7 +120,7 @@\n       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n-      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n+      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4061, "bugNodeLength": 62, "fixLineNum": 123, "fixNodeStartChar": 4061, "fixNodeLength": 58, "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\nindex 72fa3fa..f1cff5b 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n@@ -142,7 +142,7 @@\n         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n-      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);\n+      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);\n \n       // Generate the put request and wait for the transfer manager to complete the upload, then\n       // delete the temporary file on the local machine\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 5198, "bugNodeLength": 56, "fixLineNum": 145, "fixNodeStartChar": 5198, "fixNodeLength": 52, "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\nindex 72fa3fa..f1cff5b 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n@@ -142,7 +142,7 @@\n         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n-      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);\n+      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);\n \n       // Generate the put request and wait for the transfer manager to complete the upload, then\n       // delete the temporary file on the local machine\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 5198, "bugNodeLength": 56, "fixLineNum": 145, "fixNodeStartChar": 5198, "fixNodeLength": 52, "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\nindex 283c9c6..5e94192 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n@@ -120,7 +120,7 @@\n       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n-      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n+      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4061, "bugNodeLength": 62, "fixLineNum": 123, "fixNodeStartChar": 4061, "fixNodeLength": 58, "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\nindex 283c9c6..5e94192 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSOutputStream.java\n@@ -120,7 +120,7 @@\n       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n-      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n+      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4061, "bugNodeLength": 62, "fixLineNum": 123, "fixNodeStartChar": 4061, "fixNodeLength": 58, "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\nindex 72fa3fa..f1cff5b 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n@@ -142,7 +142,7 @@\n         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n-      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);\n+      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);\n \n       // Generate the put request and wait for the transfer manager to complete the upload, then\n       // delete the temporary file on the local machine\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 5198, "bugNodeLength": 56, "fixLineNum": 145, "fixNodeStartChar": 5198, "fixNodeLength": 52, "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f86baa60b64682aeaeafe54055df03f4d3f8c5d1", "fixCommitParentSHA1": "5980498353f6bde93b6abc9902a2b9cf4d8eb26f", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\nindex 72fa3fa..f1cff5b 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AOutputStream.java\n@@ -142,7 +142,7 @@\n         meta.setContentMD5(new String(Base64.encode(mHash.digest())));\n       }\n       meta.setContentLength(mFile.length());\n-      meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM);\n+      meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM);\n \n       // Generate the put request and wait for the transfer manager to complete the upload, then\n       // delete the temporary file on the local machine\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 5198, "bugNodeLength": 56, "fixLineNum": 145, "fixNodeStartChar": 5198, "fixNodeLength": 52, "sourceBeforeFix": "meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)", "sourceAfterFix": "meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "f77b53a247c6ed83a2c5fc7d2a068a8c13c20866", "fixCommitParentSHA1": "43dab0c6c50859d61c0f64fffc3471882312e224", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 52abfaf..2379774 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -112,7 +112,7 @@\n     }\n \n     boolean shortCircuit = Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED);\n-    boolean sourceSupportsDomainSocket = !NettyUtils.isDomainSocketSupported(dataSource);\n+    boolean sourceSupportsDomainSocket = NettyUtils.isDomainSocketSupported(dataSource);\n     boolean sourceIsLocal = dataSourceType == BlockInStreamSource.LOCAL;\n \n     // Short circuit\n", "projectName": "Alluxio.alluxio", "bugLineNum": 115, "bugNodeStartChar": 4405, "bugNodeLength": 47, "fixLineNum": 115, "fixNodeStartChar": 4405, "fixNodeLength": 46, "sourceBeforeFix": "!NettyUtils.isDomainSocketSupported(dataSource)", "sourceAfterFix": "NettyUtils.isDomainSocketSupported(dataSource)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d90c2e643a15cec40c8a48f11a515bb7b2ffde3e", "fixCommitParentSHA1": "60bc8934766bf0447d539dd690248537e92a1887", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java b/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\nindex bdb4b48..e987537 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\n@@ -50,6 +50,10 @@\n   private final ConcurrentHashMap<Long, Protocol.AsyncCacheRequest> mPendingRequests;\n   private final WorkerNetAddress mLocalWorkerAddress;\n \n+  /**\n+   * @param service thread pool to run the background caching work\n+   * @param blockWorker handler to the block worker\n+   */\n   public AsyncCacheRequestManager(ExecutorService service, BlockWorker blockWorker) {\n     mAsyncCacheExecutor = service;\n     mBlockWorker = blockWorker;\n@@ -78,7 +82,7 @@\n       long sessionId = IdUtils.createSessionId();\n       long blockSize = openUfsBlockOptions.getBlockSize();\n       boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())\n-          && mLocalWorkerAddress.getRpcPort() == request.getSourcePort();\n+          && mLocalWorkerAddress.getDataPort() == request.getSourcePort();\n       // Depends on the request, cache the target block from different sources\n       try {\n         if (isSourceLocal) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 81, "bugNodeStartChar": 3165, "bugNodeLength": 32, "fixLineNum": 81, "fixNodeStartChar": 3165, "fixNodeLength": 33, "sourceBeforeFix": "mLocalWorkerAddress.getRpcPort()", "sourceAfterFix": "mLocalWorkerAddress.getDataPort()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d90c2e643a15cec40c8a48f11a515bb7b2ffde3e", "fixCommitParentSHA1": "60bc8934766bf0447d539dd690248537e92a1887", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java b/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\nindex bdb4b48..e987537 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/AsyncCacheRequestManager.java\n@@ -50,6 +50,10 @@\n   private final ConcurrentHashMap<Long, Protocol.AsyncCacheRequest> mPendingRequests;\n   private final WorkerNetAddress mLocalWorkerAddress;\n \n+  /**\n+   * @param service thread pool to run the background caching work\n+   * @param blockWorker handler to the block worker\n+   */\n   public AsyncCacheRequestManager(ExecutorService service, BlockWorker blockWorker) {\n     mAsyncCacheExecutor = service;\n     mBlockWorker = blockWorker;\n@@ -78,7 +82,7 @@\n       long sessionId = IdUtils.createSessionId();\n       long blockSize = openUfsBlockOptions.getBlockSize();\n       boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())\n-          && mLocalWorkerAddress.getRpcPort() == request.getSourcePort();\n+          && mLocalWorkerAddress.getDataPort() == request.getSourcePort();\n       // Depends on the request, cache the target block from different sources\n       try {\n         if (isSourceLocal) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 81, "bugNodeStartChar": 3165, "bugNodeLength": 32, "fixLineNum": 81, "fixNodeStartChar": 3165, "fixNodeLength": 33, "sourceBeforeFix": "mLocalWorkerAddress.getRpcPort()", "sourceAfterFix": "mLocalWorkerAddress.getDataPort()"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "0d753e38ffde13e4c76d6d0ff075c92c7a8365f5", "fixCommitParentSHA1": "85e03230a988cb7545cb91896de2a9df6a7a7b0a", "bugFilePath": "core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstAvoidEvictionPolicyTest.java", "fixPatch": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstAvoidEvictionPolicyTest.java b/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstAvoidEvictionPolicyTest.java\nindex 9bb1562..b10143e 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstAvoidEvictionPolicyTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstAvoidEvictionPolicyTest.java\n@@ -34,7 +34,7 @@\n public class LocalFirstAvoidEvictionPolicyTest {\n \n   @Test\n-  public void chooseClosestTierAvoidEviction() {\n+  public void chooseClosestTierAvoidEviction() throws Exception {\n     List<BlockWorkerInfo> workers = new ArrayList<>();\n     workers.add(worker(Constants.GB, Constants.MB, \"node2\", \"rack3\"));\n     workers.add(worker(Constants.GB, 0, \"node3\", \"rack2\"));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 36, "bugNodeStartChar": 1227, "bugNodeLength": 671, "fixLineNum": 36, "fixNodeStartChar": 1227, "fixNodeLength": 688, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "0d753e38ffde13e4c76d6d0ff075c92c7a8365f5", "fixCommitParentSHA1": "85e03230a988cb7545cb91896de2a9df6a7a7b0a", "bugFilePath": "core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstPolicyTest.java", "fixPatch": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstPolicyTest.java b/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstPolicyTest.java\nindex 18db2f3..48d5df4 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstPolicyTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/policy/LocalFirstPolicyTest.java\n@@ -81,7 +81,7 @@\n   }\n \n   @Test\n-  public void chooseClosestTier() {\n+  public void chooseClosestTier() throws Exception {\n     List<BlockWorkerInfo> workers = new ArrayList<>();\n     workers.add(worker(Constants.GB, \"node2\", \"rack3\"));\n     workers.add(worker(Constants.GB, \"node3\", \"rack2\"));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 83, "bugNodeStartChar": 2828, "bugNodeLength": 846, "fixLineNum": 83, "fixNodeStartChar": 2828, "fixNodeLength": 863, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4c827ededc0bcac3a95bd137380e8dd1aae845bd", "fixCommitParentSHA1": "f7151342bbd20e51228e40ce5e30883788a43cef", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/UfsSyncUtils.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/UfsSyncUtils.java b/core/server/master/src/main/java/alluxio/master/file/meta/UfsSyncUtils.java\nindex 6dcd232..036075f 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/UfsSyncUtils.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/UfsSyncUtils.java\n@@ -120,7 +120,7 @@\n     private boolean mLoadMetadata;\n     private boolean mSyncChildren;\n \n-    public SyncPlan() {\n+    SyncPlan() {\n       mDelete = false;\n       mLoadMetadata = false;\n       mSyncChildren = false;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 123, "bugNodeStartChar": 4142, "bugNodeLength": 106, "fixLineNum": 123, "fixNodeStartChar": 4142, "fixNodeLength": 99, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4c827ededc0bcac3a95bd137380e8dd1aae845bd", "fixCommitParentSHA1": "f7151342bbd20e51228e40ce5e30883788a43cef", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/options/SyncMetadataOptions.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/options/SyncMetadataOptions.java b/core/server/master/src/main/java/alluxio/master/file/options/SyncMetadataOptions.java\nindex 4a83f68..bb1a69a 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/options/SyncMetadataOptions.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/options/SyncMetadataOptions.java\n@@ -48,7 +48,7 @@\n   }\n \n   // TODO(gpang): unused?\n-  public SyncMetadataOptions(CommonOptions options) {\n+  SyncMetadataOptions(CommonOptions options) {\n     this();\n     if (options != null) {\n       mCommonOptions = CommonOptions.defaults().setSyncIntervalMs(options.getSyncIntervalMs());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 51, "bugNodeStartChar": 1476, "bugNodeLength": 196, "fixLineNum": 51, "fixNodeStartChar": 1476, "fixNodeLength": 189, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "11112748e114a68d1e8d1934e73ba8c947df9414", "fixCommitParentSHA1": "55a49dbd4a85d065b94d25d5f3dfd385590beca0", "bugFilePath": "core/server/common/src/main/java/alluxio/cli/ValidateEnv.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/cli/ValidateEnv.java b/core/server/common/src/main/java/alluxio/cli/ValidateEnv.java\nindex 521803c..4c9a21f 100644\n--- a/core/server/common/src/main/java/alluxio/cli/ValidateEnv.java\n+++ b/core/server/common/src/main/java/alluxio/cli/ValidateEnv.java\n@@ -247,7 +247,7 @@\n     }\n \n     System.out.println(\"Validation succeeded.\");\n-    return false;\n+    return true;\n   }\n \n   private static boolean validateWorkers(String name) throws InterruptedException {\n@@ -330,6 +330,17 @@\n     System.exit(validate(args));\n   }\n \n+  /**\n+   * Parses the command line arguments and options in {@code args}.\n+   *\n+   * After successful execution of this method, command line arguments can be\n+   * retrieved by invoking {@link CommandLine#getArgs()}, and options can be\n+   * retrieved by calling {@link CommandLine#getOptions()}.\n+   *\n+   * @param args\n+   * @return\n+   * @throws InvalidArgumentException\n+   */\n   private static CommandLine parseArgsAndOptions(String... args) throws InvalidArgumentException {\n     Options opts = new Options().addOption(HADOOP_CONF_DIR_OPTION);\n     CommandLineParser parser = new DefaultParser();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 250, "bugNodeStartChar": 10268, "bugNodeLength": 13, "fixLineNum": 250, "fixNodeStartChar": 10268, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "fixCommitParentSHA1": "5ca595cc254728fcf29cedcafe4d01481b6bba81", "bugFilePath": "core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java", "fixPatch": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 830d712..901105b 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -362,9 +362,9 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n-    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n \n   /**\n@@ -375,7 +375,7 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     try {\n       mFileSystem.rename(src, dst, renameOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 365, "bugNodeStartChar": 13761, "bugNodeLength": 66, "fixLineNum": 365, "fixNodeStartChar": 13761, "fixNodeLength": 81, "sourceBeforeFix": "Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "fixCommitParentSHA1": "5ca595cc254728fcf29cedcafe4d01481b6bba81", "bugFilePath": "core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java", "fixPatch": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 830d712..901105b 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -362,9 +362,9 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n-    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n \n   /**\n@@ -375,7 +375,7 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     try {\n       mFileSystem.rename(src, dst, renameOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 367, "bugNodeStartChar": 13882, "bugNodeLength": 56, "fixLineNum": 367, "fixNodeStartChar": 13882, "fixNodeLength": 71, "sourceBeforeFix": "Mockito.verify(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "fixCommitParentSHA1": "5ca595cc254728fcf29cedcafe4d01481b6bba81", "bugFilePath": "core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java", "fixPatch": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 830d712..901105b 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -362,9 +362,9 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n-    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n \n   /**\n@@ -375,7 +375,7 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     try {\n       mFileSystem.rename(src, dst, renameOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 378, "bugNodeStartChar": 14253, "bugNodeLength": 73, "fixLineNum": 378, "fixNodeStartChar": 14253, "fixNodeLength": 88, "sourceBeforeFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst,renameOptions)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "81c639de0a597d158da89048e0b2153d27ab9b1b", "fixCommitParentSHA1": "5b7edd00f3941e1fa5ce5bc4dae788d2fab1042d", "bugFilePath": "core/server/worker/src/main/java/alluxio/SessionInfo.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/SessionInfo.java b/core/server/worker/src/main/java/alluxio/SessionInfo.java\nindex 51a2fa5..11432aa 100644\n--- a/core/server/worker/src/main/java/alluxio/SessionInfo.java\n+++ b/core/server/worker/src/main/java/alluxio/SessionInfo.java\n@@ -24,7 +24,7 @@\n   private final long mSessionId;\n \n   private long mLastHeartbeatMs;\n-  private int mSessionTimeoutMs;\n+  private final int mSessionTimeoutMs;\n \n   /**\n    * Creates a new instance of {@link SessionInfo}.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 27, "bugNodeStartChar": 829, "bugNodeLength": 30, "fixLineNum": 27, "fixNodeStartChar": 829, "fixNodeLength": 36, "sourceBeforeFix": "2", "sourceAfterFix": "18"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8c79cfe0a99af45b14f6d8f1952060c44f402065", "fixCommitParentSHA1": "90721ca4f754ba185ce0e8770ba72e66fcd4e4c3", "bugFilePath": "core/server/worker/src/main/java/alluxio/SessionInfo.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/SessionInfo.java b/core/server/worker/src/main/java/alluxio/SessionInfo.java\nindex 51a2fa5..11432aa 100644\n--- a/core/server/worker/src/main/java/alluxio/SessionInfo.java\n+++ b/core/server/worker/src/main/java/alluxio/SessionInfo.java\n@@ -24,7 +24,7 @@\n   private final long mSessionId;\n \n   private long mLastHeartbeatMs;\n-  private int mSessionTimeoutMs;\n+  private final int mSessionTimeoutMs;\n \n   /**\n    * Creates a new instance of {@link SessionInfo}.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 27, "bugNodeStartChar": 829, "bugNodeLength": 30, "fixLineNum": 27, "fixNodeStartChar": 829, "fixNodeLength": 36, "sourceBeforeFix": "2", "sourceAfterFix": "18"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "de55ca810b70f8a2dd144d409cb2491dceb16286", "fixCommitParentSHA1": "5b7edd00f3941e1fa5ce5bc4dae788d2fab1042d", "bugFilePath": "core/server/worker/src/main/java/alluxio/SessionInfo.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/SessionInfo.java b/core/server/worker/src/main/java/alluxio/SessionInfo.java\nindex 51a2fa5..11432aa 100644\n--- a/core/server/worker/src/main/java/alluxio/SessionInfo.java\n+++ b/core/server/worker/src/main/java/alluxio/SessionInfo.java\n@@ -24,7 +24,7 @@\n   private final long mSessionId;\n \n   private long mLastHeartbeatMs;\n-  private int mSessionTimeoutMs;\n+  private final int mSessionTimeoutMs;\n \n   /**\n    * Creates a new instance of {@link SessionInfo}.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 27, "bugNodeStartChar": 829, "bugNodeLength": 30, "fixLineNum": 27, "fixNodeStartChar": 829, "fixNodeLength": 36, "sourceBeforeFix": "2", "sourceAfterFix": "18"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 4902, "bugNodeLength": 18, "fixLineNum": 140, "fixNodeStartChar": 4902, "fixNodeLength": 24, "sourceBeforeFix": "stat.st_size.get()", "sourceAfterFix": "stat.st_size.longValue()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 4902, "bugNodeLength": 18, "fixLineNum": 140, "fixNodeStartChar": 4902, "fixNodeLength": 24, "sourceBeforeFix": "stat.st_size.get()", "sourceAfterFix": "stat.st_size.longValue()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 142, "bugNodeStartChar": 5080, "bugNodeLength": 26, "fixLineNum": 142, "fixNodeStartChar": 5080, "fixNodeLength": 32, "sourceBeforeFix": "stat.st_ctim.tv_nsec.get()", "sourceAfterFix": "stat.st_ctim.tv_nsec.longValue()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 142, "bugNodeStartChar": 5080, "bugNodeLength": 26, "fixLineNum": 142, "fixNodeStartChar": 5080, "fixNodeLength": 32, "sourceBeforeFix": "stat.st_ctim.tv_nsec.get()", "sourceAfterFix": "stat.st_ctim.tv_nsec.longValue()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 144, "bugNodeStartChar": 5266, "bugNodeLength": 26, "fixLineNum": 144, "fixNodeStartChar": 5266, "fixNodeLength": 32, "sourceBeforeFix": "stat.st_mtim.tv_nsec.get()", "sourceAfterFix": "stat.st_mtim.tv_nsec.longValue()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 144, "bugNodeStartChar": 5266, "bugNodeLength": 26, "fixLineNum": 144, "fixNodeStartChar": 5266, "fixNodeLength": 32, "sourceBeforeFix": "stat.st_mtim.tv_nsec.get()", "sourceAfterFix": "stat.st_mtim.tv_nsec.longValue()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 147, "bugNodeStartChar": 5526, "bugNodeLength": 18, "fixLineNum": 147, "fixNodeStartChar": 5526, "fixNodeLength": 23, "sourceBeforeFix": "stat.st_mode.get()", "sourceAfterFix": "stat.st_mode.intValue()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "38d82701494c7ca1364976fcf7a7a10f50bcfa77", "fixCommitParentSHA1": "b4bdd15632e398f48f119cf814e5b7169148e699", "bugFilePath": "integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "fixPatch": "diff --git a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\nindex 4329f43..b6d3c46 100644\n--- a/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n+++ b/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java\n@@ -137,14 +137,14 @@\n \n     FileStat stat = new FileStat(Runtime.getSystemRuntime());\n     assertEquals(0, mFuseFs.getattr(\"/foo\", stat));\n-    assertEquals(status.getLength(), stat.st_size.get());\n+    assertEquals(status.getLength(), stat.st_size.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_ctim.tv_nsec.longValue());\n     assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());\n-    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.get());\n+    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000, stat.st_mtim.tv_nsec.longValue());\n     assertEquals(AlluxioFuseUtils.getUid(System.getProperty(\"user.name\")), stat.st_uid.get());\n     assertEquals(AlluxioFuseUtils.getGid(System.getProperty(\"user.name\")), stat.st_gid.get());\n-    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.get());\n+    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 147, "bugNodeStartChar": 5526, "bugNodeLength": 18, "fixLineNum": 147, "fixNodeStartChar": 5526, "fixNodeLength": 23, "sourceBeforeFix": "stat.st_mode.get()", "sourceAfterFix": "stat.st_mode.intValue()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0ac7ee76635e28f3f8b88c575a53e8d700c5f4e5", "fixCommitParentSHA1": "3b5e3abea92be2b34531fb17b1ca406d23f030c1", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/FileInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java b/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java\nindex aef527a..451a31d 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java\n@@ -63,7 +63,7 @@\n       Configuration.getBoolean(PropertyKey.USER_FILE_PASSIVE_CACHE_ENABLED);\n   private static final int UNINITIALIZED_BLOCK_INDEX = -1;\n   private static final int EOF_DATA = -1;\n-  private static final int EOF_BLOCK_ID = -1;\n+  private static final long EOF_BLOCK_ID = -1;\n \n   /** The instream options. */\n   private final InStreamOptions mInStreamOptions;\n@@ -201,7 +201,7 @@\n \n   private int readInternal() throws IOException {\n     if (remainingInternal() <= 0) {\n-      return EOF_BLOCK_ID;\n+      return EOF_DATA;\n     }\n     updateStreamsOnRead();\n     Preconditions.checkState(mCurrentBlockInStream != null, PreconditionMessage.ERR_UNEXPECTED_EOF);\n@@ -442,7 +442,8 @@\n   }\n \n   /**\n-   * @return the current block id based on mBlockIndex, -1 if at the end of the file\n+   * @return the current block id based on mBlockIndex, or {@link #EOF_BLOCK_ID} if at the end of\n+   *         the file\n    */\n   private long getCurrentBlockId() {\n     if (remainingInternal() <= 0) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 204, "bugNodeStartChar": 7421, "bugNodeLength": 20, "fixLineNum": 204, "fixNodeStartChar": 7421, "fixNodeLength": 16, "sourceBeforeFix": "return EOF_BLOCK_ID; ", "sourceAfterFix": "return EOF_DATA; "}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "688ef85a12d6cd61f3d7c77a637650255d70f227", "fixCommitParentSHA1": "a933f44c6b7640baecbae0acefb3b2b2bd8f86cb", "bugFilePath": "minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java", "fixPatch": "diff --git a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\nindex 1616934..dea4af3 100644\n--- a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n+++ b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n@@ -463,7 +463,7 @@\n      * @return the builder\n      */\n     public Builder addProperty(PropertyKey key, String value) {\n-      Preconditions.checkState(key.equals(PropertyKey.ZOOKEEPER_ENABLED),\n+      Preconditions.checkState(!key.equals(PropertyKey.ZOOKEEPER_ENABLED),\n           \"Enable Zookeeper via #setDeployMode instead of #addProperty\");\n       mProperties.put(key, value);\n       return this;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 466, "bugNodeStartChar": 16998, "bugNodeLength": 41, "fixLineNum": 466, "fixNodeStartChar": 16998, "fixNodeLength": 42, "sourceBeforeFix": "key.equals(PropertyKey.ZOOKEEPER_ENABLED)", "sourceAfterFix": "!key.equals(PropertyKey.ZOOKEEPER_ENABLED)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c6bff5c45c44eb1876cc2888ead4253a69facc4c", "fixCommitParentSHA1": "6b1fc4e2e8b497991f23dcdedce6b202f9ae6aa0", "bugFilePath": "minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java", "fixPatch": "diff --git a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\nindex 21b0b59..4ab50b0 100644\n--- a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n+++ b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n@@ -299,21 +299,21 @@\n   /**\n    * @return return the list of master addresses\n    */\n-  public List<MasterNetAddress> getMasterAddresses() {\n+  public synchronized List<MasterNetAddress> getMasterAddresses() {\n     return mMasterAddresses;\n   }\n \n   /**\n    * Stops the Zookeeper cluster.\n    */\n-  public void stopZk() throws IOException {\n+  public synchronized void stopZk() throws IOException {\n     mCuratorServer.stop();\n   }\n \n   /**\n    * Restarts the Zookeeper cluster.\n    */\n-  public void restartZk() throws Exception {\n+  public synchronized void restartZk() throws Exception {\n     Preconditions.checkNotNull(mCuratorServer, \"mCuratorServer\");\n     mCuratorServer.restart();\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 299, "bugNodeStartChar": 10845, "bugNodeLength": 146, "fixLineNum": 299, "fixNodeStartChar": 10845, "fixNodeLength": 159, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c6bff5c45c44eb1876cc2888ead4253a69facc4c", "fixCommitParentSHA1": "6b1fc4e2e8b497991f23dcdedce6b202f9ae6aa0", "bugFilePath": "minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java", "fixPatch": "diff --git a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\nindex 21b0b59..4ab50b0 100644\n--- a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n+++ b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n@@ -299,21 +299,21 @@\n   /**\n    * @return return the list of master addresses\n    */\n-  public List<MasterNetAddress> getMasterAddresses() {\n+  public synchronized List<MasterNetAddress> getMasterAddresses() {\n     return mMasterAddresses;\n   }\n \n   /**\n    * Stops the Zookeeper cluster.\n    */\n-  public void stopZk() throws IOException {\n+  public synchronized void stopZk() throws IOException {\n     mCuratorServer.stop();\n   }\n \n   /**\n    * Restarts the Zookeeper cluster.\n    */\n-  public void restartZk() throws Exception {\n+  public synchronized void restartZk() throws Exception {\n     Preconditions.checkNotNull(mCuratorServer, \"mCuratorServer\");\n     mCuratorServer.restart();\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 306, "bugNodeStartChar": 10995, "bugNodeLength": 118, "fixLineNum": 306, "fixNodeStartChar": 10995, "fixNodeLength": 131, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c6bff5c45c44eb1876cc2888ead4253a69facc4c", "fixCommitParentSHA1": "6b1fc4e2e8b497991f23dcdedce6b202f9ae6aa0", "bugFilePath": "minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java", "fixPatch": "diff --git a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\nindex 21b0b59..4ab50b0 100644\n--- a/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n+++ b/minicluster/src/main/java/alluxio/multi/process/MultiProcessCluster.java\n@@ -299,21 +299,21 @@\n   /**\n    * @return return the list of master addresses\n    */\n-  public List<MasterNetAddress> getMasterAddresses() {\n+  public synchronized List<MasterNetAddress> getMasterAddresses() {\n     return mMasterAddresses;\n   }\n \n   /**\n    * Stops the Zookeeper cluster.\n    */\n-  public void stopZk() throws IOException {\n+  public synchronized void stopZk() throws IOException {\n     mCuratorServer.stop();\n   }\n \n   /**\n    * Restarts the Zookeeper cluster.\n    */\n-  public void restartZk() throws Exception {\n+  public synchronized void restartZk() throws Exception {\n     Preconditions.checkNotNull(mCuratorServer, \"mCuratorServer\");\n     mCuratorServer.restart();\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 313, "bugNodeStartChar": 11117, "bugNodeLength": 191, "fixLineNum": 313, "fixNodeStartChar": 11117, "fixNodeLength": 204, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "babab8ae2881354a042e42602913f52cec256d14", "fixCommitParentSHA1": "a100b8d369510cbe198e005200fa7661eb0a1b30", "bugFilePath": "shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java b/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java\nindex e22c60b..70c922a 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java\n@@ -68,7 +68,7 @@\n \n   @Override\n   protected void runCommand(AlluxioURI path, CommandLine cl) throws AlluxioException, IOException {\n-    load(path, cl.hasOption(LOCAL_OPTION.getOpt()));\n+    load(path, cl.hasOption(LOCAL_OPTION.getLongOpt()));\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 71, "bugNodeStartChar": 2144, "bugNodeLength": 21, "fixLineNum": 71, "fixNodeStartChar": 2144, "fixNodeLength": 25, "sourceBeforeFix": "LOCAL_OPTION.getOpt()", "sourceAfterFix": "LOCAL_OPTION.getLongOpt()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "babab8ae2881354a042e42602913f52cec256d14", "fixCommitParentSHA1": "a100b8d369510cbe198e005200fa7661eb0a1b30", "bugFilePath": "shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java b/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java\nindex e22c60b..70c922a 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/LoadCommand.java\n@@ -68,7 +68,7 @@\n \n   @Override\n   protected void runCommand(AlluxioURI path, CommandLine cl) throws AlluxioException, IOException {\n-    load(path, cl.hasOption(LOCAL_OPTION.getOpt()));\n+    load(path, cl.hasOption(LOCAL_OPTION.getLongOpt()));\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 71, "bugNodeStartChar": 2144, "bugNodeLength": 21, "fixLineNum": 71, "fixNodeStartChar": 2144, "fixNodeLength": 25, "sourceBeforeFix": "LOCAL_OPTION.getOpt()", "sourceAfterFix": "LOCAL_OPTION.getLongOpt()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 61, "bugNodeStartChar": 2126, "bugNodeLength": 84, "fixLineNum": 61, "fixNodeStartChar": 2126, "fixNodeLength": 85, "sourceBeforeFix": "LOG.info(\"Creating short circuit output stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit output stream for block {} @ {}\",blockId,address)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 61, "bugNodeStartChar": 2126, "bugNodeLength": 84, "fixLineNum": 61, "fixNodeStartChar": 2126, "fixNodeLength": 85, "sourceBeforeFix": "LOG.info(\"Creating short circuit output stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit output stream for block {} @ {}\",blockId,address)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 64, "bugNodeStartChar": 2316, "bugNodeLength": 144, "fixLineNum": 64, "fixNodeStartChar": 2316, "fixNodeLength": 145, "sourceBeforeFix": "LOG.info(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "463750c397e836dbcea5cee0d960c4551f6cebaf", "fixCommitParentSHA1": "ca8be46e7bd85b9e2d6747c69dd3e3bef36c0e93", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 64, "bugNodeStartChar": 2316, "bugNodeLength": 144, "fixLineNum": 64, "fixNodeStartChar": 2316, "fixNodeLength": 145, "sourceBeforeFix": "LOG.info(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 61, "bugNodeStartChar": 2126, "bugNodeLength": 84, "fixLineNum": 61, "fixNodeStartChar": 2126, "fixNodeLength": 85, "sourceBeforeFix": "LOG.info(\"Creating short circuit output stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit output stream for block {} @ {}\",blockId,address)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 61, "bugNodeStartChar": 2126, "bugNodeLength": 84, "fixLineNum": 61, "fixNodeStartChar": 2126, "fixNodeLength": 85, "sourceBeforeFix": "LOG.info(\"Creating short circuit output stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit output stream for block {} @ {}\",blockId,address)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 64, "bugNodeStartChar": 2316, "bugNodeLength": 144, "fixLineNum": 64, "fixNodeStartChar": 2316, "fixNodeLength": 145, "sourceBeforeFix": "LOG.info(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "fixCommitParentSHA1": "1d64eaa19505c0791d097a0c3f27e847f7db9c90", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\nindex 77f2090..de681b4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/PacketWriter.java\n@@ -58,10 +58,10 @@\n       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n-        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n-        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n+        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 64, "bugNodeStartChar": 2316, "bugNodeLength": 144, "fixLineNum": 64, "fixNodeStartChar": 2316, "fixNodeLength": 145, "sourceBeforeFix": "LOG.info(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "fixCommitParentSHA1": "758c003f7301cc680117334fc9661e5d82907a35", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "fixCommitParentSHA1": "758c003f7301cc680117334fc9661e5d82907a35", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "fixCommitParentSHA1": "758c003f7301cc680117334fc9661e5d82907a35", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "fixCommitParentSHA1": "758c003f7301cc680117334fc9661e5d82907a35", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "fixCommitParentSHA1": "d56aeca393661a13c063bf80b76362fccc24ff36", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "fixCommitParentSHA1": "d56aeca393661a13c063bf80b76362fccc24ff36", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3453, "bugNodeLength": 83, "fixLineNum": 92, "fixNodeStartChar": 3453, "fixNodeLength": 84, "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "fixCommitParentSHA1": "d56aeca393661a13c063bf80b76362fccc24ff36", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5fd6669348c19dc24ef1ba51c2ca0a64cbedef20", "fixCommitParentSHA1": "d56aeca393661a13c063bf80b76362fccc24ff36", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\nindex 235eea3..91889a0 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java\n@@ -89,7 +89,7 @@\n         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n-        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n+        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {\n         // Failed to do short circuit read because the block is not available in Alluxio.\n@@ -103,7 +103,7 @@\n       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n \n-    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n+    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 4222, "bugNodeLength": 139, "fixLineNum": 106, "fixNodeStartChar": 4222, "fixNodeLength": 140, "sourceBeforeFix": "LOG.info(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())", "sourceAfterFix": "LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\",blockId,address,NetworkAddressUtils.getClientHostName())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "64292cde475804151a5743712ee901d017b40af8", "fixCommitParentSHA1": "31f935ef6c2c57f5d98727c823a7317a5516e86f", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java b/core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java\nindex 7f2a52f..1749a8b 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/InodeDirectoryIdGenerator.java\n@@ -40,7 +40,8 @@\n    * @param containerIdGenerator the container id generator to use\n    */\n   public InodeDirectoryIdGenerator(ContainerIdGenerable containerIdGenerator) {\n-    mContainerIdGenerator = Preconditions.checkNotNull(containerIdGenerator);\n+    mContainerIdGenerator =\n+            Preconditions.checkNotNull(containerIdGenerator, \"containerIdGenerator\");\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 43, "bugNodeStartChar": 1659, "bugNodeLength": 48, "fixLineNum": 44, "fixNodeStartChar": 1671, "fixNodeLength": 72, "sourceBeforeFix": "Preconditions.checkNotNull(containerIdGenerator)", "sourceAfterFix": "Preconditions.checkNotNull(containerIdGenerator,\"containerIdGenerator\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "31f935ef6c2c57f5d98727c823a7317a5516e86f", "fixCommitParentSHA1": "65d51bdf063a479fa1b6e303ec91687f0c920823", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java b/core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java\nindex 0f5eac5..6403b03 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java\n@@ -178,7 +178,7 @@\n    * @return the updated object\n    */\n   public InodeFile setBlockIds(List<Long> blockIds) {\n-    mBlocks = new ArrayList<>(Preconditions.checkNotNull(blockIds));\n+    mBlocks = new ArrayList<>(Preconditions.checkNotNull(blockIds, \"blockIds\"));\n     return getThis();\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 181, "bugNodeStartChar": 5431, "bugNodeLength": 36, "fixLineNum": 181, "fixNodeStartChar": 5431, "fixNodeLength": 48, "sourceBeforeFix": "Preconditions.checkNotNull(blockIds)", "sourceAfterFix": "Preconditions.checkNotNull(blockIds,\"blockIds\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "65d51bdf063a479fa1b6e303ec91687f0c920823", "fixCommitParentSHA1": "eef0c2925e178f6d281b6d84468369939212f72b", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java b/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\nindex 1497054..e9f3140 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\n@@ -97,7 +97,7 @@\n    * @param fileSystemMaster the {@link FileSystemMaster} the handler uses internally\n    */\n   FileSystemMasterClientServiceHandler(FileSystemMaster fileSystemMaster) {\n-    Preconditions.checkNotNull(fileSystemMaster);\n+    Preconditions.checkNotNull(fileSystemMaster, \"fileSystemMaster\");\n     mFileSystemMaster = fileSystemMaster;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 100, "bugNodeStartChar": 4036, "bugNodeLength": 44, "fixLineNum": 100, "fixNodeStartChar": 4036, "fixNodeLength": 64, "sourceBeforeFix": "Preconditions.checkNotNull(fileSystemMaster)", "sourceAfterFix": "Preconditions.checkNotNull(fileSystemMaster,\"fileSystemMaster\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "8d4cd57b5d5f586d70346593c507430c07905dcb", "fixCommitParentSHA1": "14ae6849dfa0ded2df4b317fe889d11cf449ddfc", "bugFilePath": "core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java b/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java\nindex 6f3b8df..15c1d0c 100644\n--- a/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java\n+++ b/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java\n@@ -93,7 +93,7 @@\n   @Test\n   public void createAtomic() throws IOException {\n     String testFile = PathUtils.concatPath(mUnderfsAddress, \"createAtomic\");\n-    OutputStream stream = mUfs.create(testFile);\n+    OutputStream stream = mUfs.create(testFile, CreateOptions.defaults().setEnsureAtomic(true));\n     stream.write(TEST_BYTES);\n     Assert.assertFalse(mUfs.isFile(testFile));\n     stream.close();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 96, "bugNodeStartChar": 3330, "bugNodeLength": 21, "fixLineNum": 96, "fixNodeStartChar": 3330, "fixNodeLength": 69, "sourceBeforeFix": "mUfs.create(testFile)", "sourceAfterFix": "mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d0f700176d3cb35beee720b91c5d2a97a27f5ccd", "fixCommitParentSHA1": "14ae6849dfa0ded2df4b317fe889d11cf449ddfc", "bugFilePath": "core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java b/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java\nindex 6f3b8df..15c1d0c 100644\n--- a/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java\n+++ b/core/common/src/test/java/alluxio/underfs/AbstractUnderFileSystemContractTest.java\n@@ -93,7 +93,7 @@\n   @Test\n   public void createAtomic() throws IOException {\n     String testFile = PathUtils.concatPath(mUnderfsAddress, \"createAtomic\");\n-    OutputStream stream = mUfs.create(testFile);\n+    OutputStream stream = mUfs.create(testFile, CreateOptions.defaults().setEnsureAtomic(true));\n     stream.write(TEST_BYTES);\n     Assert.assertFalse(mUfs.isFile(testFile));\n     stream.close();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 96, "bugNodeStartChar": 3330, "bugNodeLength": 21, "fixLineNum": 96, "fixNodeStartChar": 3330, "fixNodeLength": 69, "sourceBeforeFix": "mUfs.create(testFile)", "sourceAfterFix": "mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f9427a667bc93e1d417793afde0186b59bab29bc", "fixCommitParentSHA1": "85e77153fcc5ac7cf14c917154ddef12204cade0", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex 7377511..987dfb5 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -1379,7 +1379,7 @@\n       throw new InvalidPathException(ExceptionMessage.DELETE_ROOT_DIRECTORY.getMessage());\n     }\n \n-    List<Pair<AlluxioURI, Inode>> delInodes = new LinkedList<>();\n+    List<Pair<AlluxioURI, Inode>> delInodes = new ArrayList<>();\n     List<Inode<?>> deletedInodes = new ArrayList<>();\n \n     Pair<AlluxioURI, Inode> inodePair = new Pair<AlluxioURI, Inode>(inodePath.getUri(), inode);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1382, "bugNodeStartChar": 60318, "bugNodeLength": 12, "fixLineNum": 1382, "fixNodeStartChar": 60318, "fixNodeLength": 11, "sourceBeforeFix": "LinkedList<>", "sourceAfterFix": "ArrayList<>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c309db03048d208ec81541395c69b58e14f7fd7", "fixCommitParentSHA1": "85e77153fcc5ac7cf14c917154ddef12204cade0", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex 7377511..987dfb5 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -1379,7 +1379,7 @@\n       throw new InvalidPathException(ExceptionMessage.DELETE_ROOT_DIRECTORY.getMessage());\n     }\n \n-    List<Pair<AlluxioURI, Inode>> delInodes = new LinkedList<>();\n+    List<Pair<AlluxioURI, Inode>> delInodes = new ArrayList<>();\n     List<Inode<?>> deletedInodes = new ArrayList<>();\n \n     Pair<AlluxioURI, Inode> inodePair = new Pair<AlluxioURI, Inode>(inodePath.getUri(), inode);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1382, "bugNodeStartChar": 60318, "bugNodeLength": 12, "fixLineNum": 1382, "fixNodeStartChar": 60318, "fixNodeLength": 11, "sourceBeforeFix": "LinkedList<>", "sourceAfterFix": "ArrayList<>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cb1b4d02e48d37e5c76932c430be95c0511e34dc", "fixCommitParentSHA1": "64204bd06fb318970fd90c85e0524bdd426fa090", "bugFilePath": "logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java", "fixPatch": "diff --git a/logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java b/logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java\nindex c6e8e6e..b78d1e9 100644\n--- a/logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java\n+++ b/logserver/src/main/java/alluxio/logserver/AlluxioLogServerProcess.java\n@@ -53,7 +53,7 @@\n  */\n public class AlluxioLogServerProcess implements Process {\n   private static final String LOGSERVER_CLIENT_LOGGER_APPENDER_NAME = \"LOGSERVER_CLIENT_LOGGER\";\n-  private static final Logger LOG = LoggerFactory.getLogger(AlluxioLogServer.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AlluxioLogServerProcess.class);\n   private static final long STOP_TIMEOUT_MS = 60000;\n   private static final int BASE_SLEEP_TIME_MS = 50;\n   private static final int MAX_SLEEP_TIME_MS = 30000;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 56, "bugNodeStartChar": 2064, "bugNodeLength": 22, "fixLineNum": 56, "fixNodeStartChar": 2064, "fixNodeLength": 29, "sourceBeforeFix": "AlluxioLogServer.class", "sourceAfterFix": "AlluxioLogServerProcess.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "44480175dafea420390a48d1a9e93dae0d1b4a3f", "fixCommitParentSHA1": "edf0a5eab764b18a569c7e54afc87d61f5f6e9f7", "bugFilePath": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "fixPatch": "diff --git a/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java b/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java\nindex 89e597f..12e08d1 100644\n--- a/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java\n+++ b/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java\n@@ -75,7 +75,7 @@\n     mName = bucketName;\n     mKeyCount = 0;\n     if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.valueOf(options.getMaxKeys());\n+      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n     }\n     mContents = new ArrayList<>();\n     mContinuationToken = options.getContinuationToken();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 78, "bugNodeStartChar": 3225, "bugNodeLength": 37, "fixLineNum": 78, "fixNodeStartChar": 3225, "fixNodeLength": 38, "sourceBeforeFix": "Integer.valueOf(options.getMaxKeys())", "sourceAfterFix": "Integer.parseInt(options.getMaxKeys())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "44480175dafea420390a48d1a9e93dae0d1b4a3f", "fixCommitParentSHA1": "edf0a5eab764b18a569c7e54afc87d61f5f6e9f7", "bugFilePath": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "fixPatch": "diff --git a/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java b/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java\nindex 89e597f..12e08d1 100644\n--- a/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java\n+++ b/core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java\n@@ -75,7 +75,7 @@\n     mName = bucketName;\n     mKeyCount = 0;\n     if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.valueOf(options.getMaxKeys());\n+      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n     }\n     mContents = new ArrayList<>();\n     mContinuationToken = options.getContinuationToken();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 78, "bugNodeStartChar": 3225, "bugNodeLength": 37, "fixLineNum": 78, "fixNodeStartChar": 3225, "fixNodeLength": 38, "sourceBeforeFix": "Integer.valueOf(options.getMaxKeys())", "sourceAfterFix": "Integer.parseInt(options.getMaxKeys())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "9d811b03cabd5a726a22378e81019160d6265bf6", "fixCommitParentSHA1": "43e07c15e5db5216e7568c5268d95579d03b6598", "bugFilePath": "core/server/common/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java", "fixPatch": "diff --git a/core/server/common/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java b/core/server/common/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java\nindex 3c14997..31ba065 100644\n--- a/core/server/common/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java\n+++ b/core/server/common/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java\n@@ -86,11 +86,12 @@\n                 \"Tier %d: Not enough space on %s. %n\"\n                     + \"Desired quota: %s%n\"\n                     + \"Used in tiered storage: %s%n\"\n-                    + \"Available: %s%n\",\n+                    + \"Available: %s (Additional %s free space required)%n\",\n                 level, storageEntry.getKey(),\n                 FormatUtils.getSizeFromBytes(quota),\n                 FormatUtils.getSizeFromBytes(used),\n-                FormatUtils.getSizeFromBytes(available));\n+                FormatUtils.getSizeFromBytes(available),\n+                FormatUtils.getSizeFromBytes(quota - used - available));\n             success = false;\n           }\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 85, "bugNodeStartChar": 3165, "bugNodeLength": 418, "fixLineNum": 85, "fixNodeStartChar": 3165, "fixNodeLength": 490, "sourceBeforeFix": "System.err.format(\"Tier %d: Not enough space on %s. %n\" + \"Desired quota: %s%n\" + \"Used in tiered storage: %s%n\"+ \"Available: %s%n\",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available))", "sourceAfterFix": "System.err.format(\"Tier %d: Not enough space on %s. %n\" + \"Desired quota: %s%n\" + \"Used in tiered storage: %s%n\"+ \"Available: %s%n\",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available),FormatUtils.getSizeFromBytes(quota - used - available))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c799126efce58248261e9c993680798d2ed3eeb1", "fixCommitParentSHA1": "828d7f1d8463daa31ab5aaf6414cb0710b0f6ad5", "bugFilePath": "shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\nindex 3e6b440..e5306d9 100644\n--- a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n+++ b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n@@ -198,7 +198,7 @@\n     String filePath = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n     writeCSVFile(defaultKeys, filePath);\n     // generate YML files\n-    filePath = PathUtils.concatPath(filePath, YML_FILE_DIR);\n+    filePath = PathUtils.concatPath(homeDir, YML_FILE_DIR);\n     writeYMLFile(defaultKeys, filePath);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 201, "bugNodeStartChar": 7247, "bugNodeLength": 44, "fixLineNum": 201, "fixNodeStartChar": 7247, "fixNodeLength": 43, "sourceBeforeFix": "PathUtils.concatPath(filePath,YML_FILE_DIR)", "sourceAfterFix": "PathUtils.concatPath(homeDir,YML_FILE_DIR)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9fa5e4ef4b995bbf12483ad0960a69ccab416a0b", "fixCommitParentSHA1": "828d7f1d8463daa31ab5aaf6414cb0710b0f6ad5", "bugFilePath": "shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\nindex 3e6b440..e5306d9 100644\n--- a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n+++ b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n@@ -198,7 +198,7 @@\n     String filePath = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n     writeCSVFile(defaultKeys, filePath);\n     // generate YML files\n-    filePath = PathUtils.concatPath(filePath, YML_FILE_DIR);\n+    filePath = PathUtils.concatPath(homeDir, YML_FILE_DIR);\n     writeYMLFile(defaultKeys, filePath);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 201, "bugNodeStartChar": 7247, "bugNodeLength": 44, "fixLineNum": 201, "fixNodeStartChar": 7247, "fixNodeLength": 43, "sourceBeforeFix": "PathUtils.concatPath(filePath,YML_FILE_DIR)", "sourceAfterFix": "PathUtils.concatPath(homeDir,YML_FILE_DIR)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "8489cbc64e450aea0a05cf2bca4d6e04285d1459", "fixCommitParentSHA1": "c870cacf9efac091f5ea022f578fcea23b10a3af", "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex 78ea6fb..1673cda 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -32,7 +32,7 @@\n  * Configuration property keys. This class provides a set of pre-defined property keys.\n  */\n @ThreadSafe\n-public class PropertyKey implements Comparable<PropertyKey> {\n+public final class PropertyKey implements Comparable<PropertyKey> {\n   // The following two maps must be the first to initialize within this file.\n   /** A map from default property key's string name to the key. */\n   private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 31, "bugNodeStartChar": 987, "bugNodeLength": 128640, "fixLineNum": 31, "fixNodeStartChar": 987, "fixNodeLength": 128646, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "e37052e521c2d4eeb1c583830bdba728dc6c83cf", "fixCommitParentSHA1": "580e64f0934caef41ad0e8ff0c959ab18c4c511a", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java\nindex 19f474b..179b494 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java\n@@ -37,7 +37,7 @@\n \n   @Override\n   public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n-    Preconditions.checkNotNull(path);\n+    Preconditions.checkNotNull(path, \"path\");\n \n     try {\n       return S3AUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 40, "bugNodeStartChar": 1405, "bugNodeLength": 32, "fixLineNum": 40, "fixNodeStartChar": 1405, "fixNodeLength": 40, "sourceBeforeFix": "Preconditions.checkNotNull(path)", "sourceAfterFix": "Preconditions.checkNotNull(path,\"path\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "810b2f27e2f38963875781944ab6ff18fc336cb5", "fixCommitParentSHA1": "3bc22256beb932f52812bf42316a5364f3210318", "bugFilePath": "underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java", "fixPatch": "diff --git a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java\nindex 19f474b..179b494 100644\n--- a/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java\n+++ b/underfs/s3a/src/main/java/alluxio/underfs/s3a/S3AUnderFileSystemFactory.java\n@@ -37,7 +37,7 @@\n \n   @Override\n   public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n-    Preconditions.checkNotNull(path);\n+    Preconditions.checkNotNull(path, \"path\");\n \n     try {\n       return S3AUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 40, "bugNodeStartChar": 1405, "bugNodeLength": 32, "fixLineNum": 40, "fixNodeStartChar": 1405, "fixNodeLength": 40, "sourceBeforeFix": "Preconditions.checkNotNull(path)", "sourceAfterFix": "Preconditions.checkNotNull(path,\"path\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "718ec56fd9be666a6f8f22115ea2912561634dbb", "fixCommitParentSHA1": "3bf1cf7aab83bec9d500929e58566351a21f448b", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/policy/SpecificHostPolicy.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/policy/SpecificHostPolicy.java b/core/client/fs/src/main/java/alluxio/client/file/policy/SpecificHostPolicy.java\nindex 66b8795..faba176 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/policy/SpecificHostPolicy.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/policy/SpecificHostPolicy.java\n@@ -36,7 +36,7 @@\n    * @param hostname the name of the host\n    */\n   public SpecificHostPolicy(String hostname) {\n-    mHostname = Preconditions.checkNotNull(hostname);\n+    mHostname = Preconditions.checkNotNull(hostname, \"hostname\");\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 39, "bugNodeStartChar": 1411, "bugNodeLength": 36, "fixLineNum": 39, "fixNodeStartChar": 1411, "fixNodeLength": 48, "sourceBeforeFix": "Preconditions.checkNotNull(hostname)", "sourceAfterFix": "Preconditions.checkNotNull(hostname,\"hostname\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f24efb632299bc0b1be935f6ad10bae2493e934b", "fixCommitParentSHA1": "9415d545c24c9cc00ca7519abb977415a8fd82d4", "bugFilePath": "shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\nindex 7c89f08..19e3da4 100644\n--- a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n+++ b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n@@ -80,7 +80,7 @@\n       }\n \n       //Sort defaultKeys\n-      Comparator<PropertyKey> pC = new ConfigurationDocGenerator().new PropertyKeyComparator();\n+      Comparator<PropertyKey> pC = new PropertyKeyComparator();\n       List<PropertyKey> dfkeys = new ArrayList<>(defaultKeys);\n       Collections.sort(dfkeys, pC);\n \n@@ -140,7 +140,7 @@\n   /**\n    * PropertyKey Comparator inner class.\n    */\n-  private final class PropertyKeyComparator implements Comparator<PropertyKey> {\n+  private static final class PropertyKeyComparator implements Comparator<PropertyKey> {\n     private PropertyKeyComparator() {\n     } // prevent instantiation\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 5061, "bugNodeLength": 533, "fixLineNum": 140, "fixNodeStartChar": 5061, "fixNodeLength": 540, "sourceBeforeFix": "18", "sourceAfterFix": "26"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "9415d545c24c9cc00ca7519abb977415a8fd82d4", "fixCommitParentSHA1": "c616cb08d4da9d25fbe3c323b895cea6886fb62b", "bugFilePath": "shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java", "fixPatch": "diff --git a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\nindex f3eb1a6..7c89f08 100644\n--- a/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n+++ b/shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java\n@@ -140,7 +140,7 @@\n   /**\n    * PropertyKey Comparator inner class.\n    */\n-  private class PropertyKeyComparator implements Comparator<PropertyKey> {\n+  private final class PropertyKeyComparator implements Comparator<PropertyKey> {\n     private PropertyKeyComparator() {\n     } // prevent instantiation\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 5061, "bugNodeLength": 527, "fixLineNum": 140, "fixNodeStartChar": 5061, "fixNodeLength": 533, "sourceBeforeFix": "2", "sourceAfterFix": "18"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7c97a1d92f384dcc205d530b7b46c15c97e6fac8", "fixCommitParentSHA1": "f17ac77d8f7af41cc48c8144441c58da3b275133", "bugFilePath": "core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java b/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java\nindex 4d5f014..998ebf7 100644\n--- a/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java\n+++ b/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java\n@@ -29,7 +29,7 @@\n /**\n  * Tests for the {@link LocalFileBlockWriter} class.\n  */\n-public class LocalFileBlockWriterTest {\n+public final class LocalFileBlockWriterTest {\n   private static final long TEST_BLOCK_SIZE = 1024;\n \n   private LocalFileBlockWriter mWriter;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 29, "bugNodeStartChar": 949, "bugNodeLength": 2250, "fixLineNum": 29, "fixNodeStartChar": 949, "fixNodeLength": 2256, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a12aa14d0430bac0d75ad4a9a2638434070fea14", "fixCommitParentSHA1": "f17ac77d8f7af41cc48c8144441c58da3b275133", "bugFilePath": "core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java b/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java\nindex 4d5f014..998ebf7 100644\n--- a/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java\n+++ b/core/common/src/test/java/alluxio/worker/block/io/LocalFileBlockWriterTest.java\n@@ -29,7 +29,7 @@\n /**\n  * Tests for the {@link LocalFileBlockWriter} class.\n  */\n-public class LocalFileBlockWriterTest {\n+public final class LocalFileBlockWriterTest {\n   private static final long TEST_BLOCK_SIZE = 1024;\n \n   private LocalFileBlockWriter mWriter;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 29, "bugNodeStartChar": 949, "bugNodeLength": 2250, "fixLineNum": 29, "fixNodeStartChar": 949, "fixNodeLength": 2256, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "fixCommitParentSHA1": "fe9ce32a2b161ea15560216f8ee222a951f27cf3", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..29b947d 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 80, "bugNodeStartChar": 2749, "bugNodeLength": 44, "fixLineNum": 80, "fixNodeStartChar": 2749, "fixNodeLength": 64, "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "fixCommitParentSHA1": "fe9ce32a2b161ea15560216f8ee222a951f27cf3", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..29b947d 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 131, "bugNodeStartChar": 4154, "bugNodeLength": 44, "fixLineNum": 131, "fixNodeStartChar": 4154, "fixNodeLength": 64, "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "fixCommitParentSHA1": "fe9ce32a2b161ea15560216f8ee222a951f27cf3", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..29b947d 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 171, "bugNodeStartChar": 5207, "bugNodeLength": 35, "fixLineNum": 171, "fixNodeStartChar": 5207, "fixNodeLength": 46, "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "fixCommitParentSHA1": "1d36bed3166504e5bde0c6e1e5b988cb70197875", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..29b947d 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 80, "bugNodeStartChar": 2749, "bugNodeLength": 44, "fixLineNum": 80, "fixNodeStartChar": 2749, "fixNodeLength": 64, "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "fixCommitParentSHA1": "1d36bed3166504e5bde0c6e1e5b988cb70197875", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..29b947d 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 131, "bugNodeStartChar": 4154, "bugNodeLength": 44, "fixLineNum": 131, "fixNodeStartChar": 4154, "fixNodeLength": 64, "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "fixCommitParentSHA1": "1d36bed3166504e5bde0c6e1e5b988cb70197875", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..29b947d 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 171, "bugNodeStartChar": 5207, "bugNodeLength": 35, "fixLineNum": 171, "fixNodeStartChar": 5207, "fixNodeLength": 46, "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "fixCommitParentSHA1": "1d36bed3166504e5bde0c6e1e5b988cb70197875", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..328f85a 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager,\"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 80, "bugNodeStartChar": 2749, "bugNodeLength": 44, "fixLineNum": 80, "fixNodeStartChar": 2749, "fixNodeLength": 63, "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "fixCommitParentSHA1": "1d36bed3166504e5bde0c6e1e5b988cb70197875", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..328f85a 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager,\"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 131, "bugNodeStartChar": 4154, "bugNodeLength": 44, "fixLineNum": 131, "fixNodeStartChar": 4154, "fixNodeLength": 63, "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "fixCommitParentSHA1": "1d36bed3166504e5bde0c6e1e5b988cb70197875", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\nindex 2841d1f..328f85a 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/BlockStoreMeta.java\n@@ -77,7 +77,7 @@\n    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n \n     return mBlockIdsOnTiers;\n   }\n@@ -128,7 +128,7 @@\n    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n-    Preconditions.checkNotNull(mBlockIdsOnTiers);\n+    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n \n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {\n@@ -168,7 +168,7 @@\n    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n-    Preconditions.checkNotNull(manager);\n+    Preconditions.checkNotNull(manager,\"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 171, "bugNodeStartChar": 5207, "bugNodeLength": 35, "fixLineNum": 171, "fixNodeStartChar": 5207, "fixNodeLength": 45, "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "69788d35e44a789fb6fc3774f0a34915c6cfe711", "fixCommitParentSHA1": "45aa302f23fa0977083eb9d4ef84df23bdda219e", "bugFilePath": "core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java b/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java\nindex b7c3d0d..54aa8d0 100644\n--- a/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java\n+++ b/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java\n@@ -59,7 +59,7 @@\n    * @param blockWorker block worker handle\n    */\n   public WebInterfaceWorkerBlockInfoServlet(BlockWorker blockWorker) {\n-    mBlockWorker = Preconditions.checkNotNull(blockWorker);\n+    mBlockWorker = Preconditions.checkNotNull(blockWorker, \"blockWorker\");\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 62, "bugNodeStartChar": 2178, "bugNodeLength": 39, "fixLineNum": 62, "fixNodeStartChar": 2178, "fixNodeLength": 54, "sourceBeforeFix": "Preconditions.checkNotNull(blockWorker)", "sourceAfterFix": "Preconditions.checkNotNull(blockWorker,\"blockWorker\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "ba0197ee4e9bf1976bb46f363f02b606d2389489", "fixCommitParentSHA1": "5435ed6908acbfe13f9e67f744ab7a341e24351e", "bugFilePath": "core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java b/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java\nindex b7c3d0d..54aa8d0 100644\n--- a/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java\n+++ b/core/server/worker/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java\n@@ -59,7 +59,7 @@\n    * @param blockWorker block worker handle\n    */\n   public WebInterfaceWorkerBlockInfoServlet(BlockWorker blockWorker) {\n-    mBlockWorker = Preconditions.checkNotNull(blockWorker);\n+    mBlockWorker = Preconditions.checkNotNull(blockWorker, \"blockWorker\");\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 62, "bugNodeStartChar": 2178, "bugNodeLength": 39, "fixLineNum": 62, "fixNodeStartChar": 2178, "fixNodeLength": 54, "sourceBeforeFix": "Preconditions.checkNotNull(blockWorker)", "sourceAfterFix": "Preconditions.checkNotNull(blockWorker,\"blockWorker\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java\nindex 5d9a07a..520f443 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java\n@@ -93,7 +93,7 @@\n    */\n   public static class Factory implements PacketReader.Factory {\n     private static final long READ_TIMEOUT_MS =\n-        Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n+        Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n \n     private final FileSystemContext mContext;\n     private final WorkerNetAddress mAddress;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 96, "bugNodeStartChar": 2848, "bugNodeLength": 64, "fixLineNum": 96, "fixNodeStartChar": 2848, "fixNodeLength": 62, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java\nindex 5d9a07a..520f443 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketReader.java\n@@ -93,7 +93,7 @@\n    */\n   public static class Factory implements PacketReader.Factory {\n     private static final long READ_TIMEOUT_MS =\n-        Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n+        Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n \n     private final FileSystemContext mContext;\n     private final WorkerNetAddress mAddress;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 96, "bugNodeStartChar": 2848, "bugNodeLength": 64, "fixLineNum": 96, "fixNodeStartChar": 2848, "fixNodeLength": 62, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java\nindex b637196..8e012f2 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java\n@@ -44,7 +44,7 @@\n   private static final long FILE_BUFFER_BYTES =\n       Configuration.getBytes(PropertyKey.USER_FILE_BUFFER_BYTES);\n   private static final long WRITE_TIMEOUT_MS =\n-      Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n+      Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n \n   private final FileSystemContext mContext;\n   private final WorkerNetAddress mAddress;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 47, "bugNodeStartChar": 1725, "bugNodeLength": 64, "fixLineNum": 47, "fixNodeStartChar": 1725, "fixNodeLength": 62, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java\nindex b637196..8e012f2 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/LocalFilePacketWriter.java\n@@ -44,7 +44,7 @@\n   private static final long FILE_BUFFER_BYTES =\n       Configuration.getBytes(PropertyKey.USER_FILE_BUFFER_BYTES);\n   private static final long WRITE_TIMEOUT_MS =\n-      Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n+      Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n \n   private final FileSystemContext mContext;\n   private final WorkerNetAddress mAddress;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 47, "bugNodeStartChar": 1725, "bugNodeLength": 64, "fixLineNum": 47, "fixNodeStartChar": 1725, "fixNodeLength": 62, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java b/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java\nindex 000e8e4..2fd4cbd 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java\n@@ -70,7 +70,7 @@\n   private static final int MAX_PACKETS_IN_FLIGHT =\n       Configuration.getInt(PropertyKey.USER_NETWORK_NETTY_READER_BUFFER_SIZE_PACKETS);\n   private static final long READ_TIMEOUT_MS =\n-      Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n+      Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n \n   /** Special packet that indicates an exception is caught. */\n   private static final ByteBuf THROWABLE = Unpooled.buffer(0);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 73, "bugNodeStartChar": 3287, "bugNodeLength": 64, "fixLineNum": 73, "fixNodeStartChar": 3287, "fixNodeLength": 62, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java b/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java\nindex 000e8e4..2fd4cbd 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/NettyPacketReader.java\n@@ -70,7 +70,7 @@\n   private static final int MAX_PACKETS_IN_FLIGHT =\n       Configuration.getInt(PropertyKey.USER_NETWORK_NETTY_READER_BUFFER_SIZE_PACKETS);\n   private static final long READ_TIMEOUT_MS =\n-      Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n+      Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n \n   /** Special packet that indicates an exception is caught. */\n   private static final ByteBuf THROWABLE = Unpooled.buffer(0);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 73, "bugNodeStartChar": 3287, "bugNodeLength": 64, "fixLineNum": 73, "fixNodeStartChar": 3287, "fixNodeLength": 62, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java\nindex ebe31f4..6da189e 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java\n@@ -94,7 +94,7 @@\n           throws IOException, AlluxioException, InterruptedException {\n \n     final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);\n-    final long pollPeriod = Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n+    final long pollPeriod = Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n     boolean completed = false;\n     long timeleft = deadline - System.currentTimeMillis();\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 97, "bugNodeStartChar": 4564, "bugNodeLength": 66, "fixLineNum": 97, "fixNodeStartChar": 4564, "fixNodeLength": 64, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "fixCommitParentSHA1": "a7892257e1e4d040a7a54d82048758eba74f2a89", "bugFilePath": "core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java", "fixPatch": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java\nindex ebe31f4..6da189e 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystemUtils.java\n@@ -94,7 +94,7 @@\n           throws IOException, AlluxioException, InterruptedException {\n \n     final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);\n-    final long pollPeriod = Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n+    final long pollPeriod = Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n     boolean completed = false;\n     long timeleft = deadline - System.currentTimeMillis();\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 97, "bugNodeStartChar": 4564, "bugNodeLength": 66, "fixLineNum": 97, "fixNodeStartChar": 4564, "fixNodeLength": 64, "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7c3ad0194c2aa495bf464f68e0da6622733b4430", "fixCommitParentSHA1": "7ea02f16ec85e32ed5f2a91a100aa588e8358527", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java b/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java\nindex dba7abc..5144c22 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java\n@@ -30,7 +30,7 @@\n public final class TtlBucket implements Comparable<TtlBucket> {\n   /** The time interval of this bucket is the same as ttl checker's interval. */\n   private static long sTtlIntervalMs =\n-      Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n+      Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n    * value is the same as the configuration of {@link PropertyKey#MASTER_TTL_CHECKER_INTERVAL_MS}.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 33, "bugNodeStartChar": 1179, "bugNodeLength": 64, "fixLineNum": 33, "fixNodeStartChar": 1179, "fixNodeLength": 63, "sourceBeforeFix": "Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c3ad0194c2aa495bf464f68e0da6622733b4430", "fixCommitParentSHA1": "7ea02f16ec85e32ed5f2a91a100aa588e8358527", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java b/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java\nindex dba7abc..5144c22 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/meta/TtlBucket.java\n@@ -30,7 +30,7 @@\n public final class TtlBucket implements Comparable<TtlBucket> {\n   /** The time interval of this bucket is the same as ttl checker's interval. */\n   private static long sTtlIntervalMs =\n-      Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n+      Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS);\n   /**\n    * Each bucket has a time to live interval, this value is the start of the interval, interval\n    * value is the same as the configuration of {@link PropertyKey#MASTER_TTL_CHECKER_INTERVAL_MS}.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 33, "bugNodeStartChar": 1179, "bugNodeLength": 64, "fixLineNum": 33, "fixNodeStartChar": 1179, "fixNodeLength": 63, "sourceBeforeFix": "Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3d3aad91880410164be0372875fe702af44fa279", "fixCommitParentSHA1": "ddafeb24041d0ea2fd85d92115f08b84fc77e662", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java b/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\nindex 4eb6e79..99b84e5 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\n@@ -119,7 +119,7 @@\n     try {\n       info = ShellUtils.getUnixMountInfo();\n     } catch (IOException e) {\n-      LOG.warn(\"Failed to get mount information: {}\", e.getMessage());\n+      LOG.debug(\"Failed to get mount information: {}\", e.getMessage());\n       return;\n     }\n     for (UnixMountInfo mountInfo : info) {\n@@ -142,8 +142,9 @@\n       if ((fsType.equalsIgnoreCase(\"tmpfs\") || fsType.equalsIgnoreCase(\"ramfs\"))\n           && size < storageDir.getCapacityBytes()) {\n         throw new IllegalStateException(String.format(\n-            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\", size,\n-            storageDir.getCapacityBytes()));\n+            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\",\n+            FormatUtils.getSizeFromBytes(size),\n+            FormatUtils.getSizeFromBytes(storageDir.getCapacityBytes())));\n       }\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 122, "bugNodeStartChar": 4678, "bugNodeLength": 63, "fixLineNum": 122, "fixNodeStartChar": 4678, "fixNodeLength": 64, "sourceBeforeFix": "LOG.warn(\"Failed to get mount information: {}\",e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to get mount information: {}\",e.getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3d3aad91880410164be0372875fe702af44fa279", "fixCommitParentSHA1": "ddafeb24041d0ea2fd85d92115f08b84fc77e662", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java b/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\nindex 4eb6e79..99b84e5 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/meta/StorageTier.java\n@@ -119,7 +119,7 @@\n     try {\n       info = ShellUtils.getUnixMountInfo();\n     } catch (IOException e) {\n-      LOG.warn(\"Failed to get mount information: {}\", e.getMessage());\n+      LOG.debug(\"Failed to get mount information: {}\", e.getMessage());\n       return;\n     }\n     for (UnixMountInfo mountInfo : info) {\n@@ -142,8 +142,9 @@\n       if ((fsType.equalsIgnoreCase(\"tmpfs\") || fsType.equalsIgnoreCase(\"ramfs\"))\n           && size < storageDir.getCapacityBytes()) {\n         throw new IllegalStateException(String.format(\n-            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\", size,\n-            storageDir.getCapacityBytes()));\n+            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\",\n+            FormatUtils.getSizeFromBytes(size),\n+            FormatUtils.getSizeFromBytes(storageDir.getCapacityBytes())));\n       }\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 122, "bugNodeStartChar": 4678, "bugNodeLength": 63, "fixLineNum": 122, "fixNodeStartChar": 4678, "fixNodeLength": 64, "sourceBeforeFix": "LOG.warn(\"Failed to get mount information: {}\",e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to get mount information: {}\",e.getMessage())"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "ec295568e2e59583c7ee243a7f705669a2263ccc", "fixCommitParentSHA1": "396b67eb1e16a4b026bb9300da880bb6c2334004", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex 3ca8809..8e2204e 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -294,7 +294,7 @@\n     for (FileStatus status : files) {\n       // only return the relative path, to keep consistent with java.io.File.list()\n       UfsStatus retStatus;\n-      if (status.isDir()) {\n+      if (!status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 297, "bugNodeStartChar": 11245, "bugNodeLength": 14, "fixLineNum": 297, "fixNodeStartChar": 11245, "fixNodeLength": 15, "sourceBeforeFix": "status.isDir()", "sourceAfterFix": "!status.isDir()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "f1f4c0fbfc0c36363a3751f942071199eb3dbeeb", "fixCommitParentSHA1": "7c5bf68537c5adf988751ce2cfa9f5b895270c18", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex 3ca8809..8e2204e 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -294,7 +294,7 @@\n     for (FileStatus status : files) {\n       // only return the relative path, to keep consistent with java.io.File.list()\n       UfsStatus retStatus;\n-      if (status.isDir()) {\n+      if (!status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 297, "bugNodeStartChar": 11245, "bugNodeLength": 14, "fixLineNum": 297, "fixNodeStartChar": 11245, "fixNodeLength": 15, "sourceBeforeFix": "status.isDir()", "sourceAfterFix": "!status.isDir()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7c5bf68537c5adf988751ce2cfa9f5b895270c18", "fixCommitParentSHA1": "4edadd10cf8e8309ae86b21710ecdd8eb0d32b64", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex b8e51b4..3ca8809 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -294,7 +294,7 @@\n     for (FileStatus status : files) {\n       // only return the relative path, to keep consistent with java.io.File.list()\n       UfsStatus retStatus;\n-      if (status.isDirectory()) {\n+      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 297, "bugNodeStartChar": 11245, "bugNodeLength": 20, "fixLineNum": 297, "fixNodeStartChar": 11245, "fixNodeLength": 14, "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c5bf68537c5adf988751ce2cfa9f5b895270c18", "fixCommitParentSHA1": "4edadd10cf8e8309ae86b21710ecdd8eb0d32b64", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex b8e51b4..3ca8809 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -294,7 +294,7 @@\n     for (FileStatus status : files) {\n       // only return the relative path, to keep consistent with java.io.File.list()\n       UfsStatus retStatus;\n-      if (status.isDirectory()) {\n+      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 297, "bugNodeStartChar": 11245, "bugNodeLength": 20, "fixLineNum": 297, "fixNodeStartChar": 11245, "fixNodeLength": 14, "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f6e41f5a832e0831deea9a1d83537f5c347836e", "fixCommitParentSHA1": "e9ed4386a68d82a45b020673fe8bc5c49997a91b", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex b8e51b4..3ca8809 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -294,7 +294,7 @@\n     for (FileStatus status : files) {\n       // only return the relative path, to keep consistent with java.io.File.list()\n       UfsStatus retStatus;\n-      if (status.isDirectory()) {\n+      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 297, "bugNodeStartChar": 11245, "bugNodeLength": 20, "fixLineNum": 297, "fixNodeStartChar": 11245, "fixNodeLength": 14, "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f6e41f5a832e0831deea9a1d83537f5c347836e", "fixCommitParentSHA1": "e9ed4386a68d82a45b020673fe8bc5c49997a91b", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex b8e51b4..3ca8809 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -294,7 +294,7 @@\n     for (FileStatus status : files) {\n       // only return the relative path, to keep consistent with java.io.File.list()\n       UfsStatus retStatus;\n-      if (status.isDirectory()) {\n+      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 297, "bugNodeStartChar": 11245, "bugNodeLength": 20, "fixLineNum": 297, "fixNodeStartChar": 11245, "fixNodeLength": 14, "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "afba5f5fd261b447c47c6b01c980365e15471bc8", "fixCommitParentSHA1": "733b8fabac09b0537692cad9f59e5b170cd358ab", "bugFilePath": "core/common/src/main/java/alluxio/underfs/UnderFileSystem.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/underfs/UnderFileSystem.java b/core/common/src/main/java/alluxio/underfs/UnderFileSystem.java\nindex 8665d35..85fc660 100644\n--- a/core/common/src/main/java/alluxio/underfs/UnderFileSystem.java\n+++ b/core/common/src/main/java/alluxio/underfs/UnderFileSystem.java\n@@ -95,7 +95,8 @@\n           // Use the factory to create the actual client for the Under File System\n           return new UnderFileSystemWithLogging(\n               factory.create(path, new UnderFileSystemConfiguration(ufsConf)));\n-        } catch (Exception e) {\n+        } catch (Throwable e) {\n+          // This needs to be Throwable rather than Error to catch service loading errors\n           errors.add(e);\n           LOG.warn(\"Failed to create UnderFileSystemFactory {}\", factory, e);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 98, "bugNodeStartChar": 3626, "bugNodeLength": 11, "fixLineNum": 98, "fixNodeStartChar": 3626, "fixNodeLength": 11, "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0689e877255da69d9b511cb7cff1878a32bc8860", "fixCommitParentSHA1": "3bc69fbacad0d751102d794aea3ac78172d06288", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/netty/DataServerShortCircuitWriteHandler.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/netty/DataServerShortCircuitWriteHandler.java b/core/server/worker/src/main/java/alluxio/worker/netty/DataServerShortCircuitWriteHandler.java\nindex c91c461..aa754d7 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/netty/DataServerShortCircuitWriteHandler.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/netty/DataServerShortCircuitWriteHandler.java\n@@ -38,7 +38,7 @@\n   private static final Logger LOG =\n       LoggerFactory.getLogger(DataServerShortCircuitWriteHandler.class);\n \n-  private static long INVALID_SESSION_ID = -1;\n+  private static final long INVALID_SESSION_ID = -1;\n \n   /** The block worker. */\n   private final BlockWorker mBlockWorker;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 41, "bugNodeStartChar": 1481, "bugNodeLength": 44, "fixLineNum": 41, "fixNodeStartChar": 1481, "fixNodeLength": 50, "sourceBeforeFix": "10", "sourceAfterFix": "26"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "af6a9484ccb210facdbc5995dcf4836f126e8d04", "fixCommitParentSHA1": "43dbd8e7c1ddfe19ca044014d350526e7b55f0da", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex e015ad9..9def980 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -1207,7 +1207,7 @@\n               unmountInternal(alluxioUriToDel);\n             } else if (!deleteOptions.isAlluxioOnly()) {\n               // Attempt to delete node if all children were deleted successfully\n-              failedToDelete = ufsDeleter.delete(alluxioUriToDel, delInode);\n+              failedToDelete = !ufsDeleter.delete(alluxioUriToDel, delInode);\n             }\n           } catch (InvalidPathException e) {\n             LOG.warn(e.getMessage());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1210, "bugNodeStartChar": 53541, "bugNodeLength": 44, "fixLineNum": 1210, "fixNodeStartChar": 53541, "fixNodeLength": 45, "sourceBeforeFix": "ufsDeleter.delete(alluxioUriToDel,delInode)", "sourceAfterFix": "!ufsDeleter.delete(alluxioUriToDel,delInode)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "b27f246f740829ca4a64beeb0b9405b06c49cff0", "fixCommitParentSHA1": "eab0c5d0bb41623c4037d4e8ecb84694a2c98fa7", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex 435021b..77a8b9f 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -1226,7 +1226,8 @@\n               String ufsUri = resolution.getUri().toString();\n               UnderFileSystem ufs = resolution.getUfs();\n               AlluxioURI parentUri = alluxioUriToDel.getParent();\n-              if (!ufsSyncChecker.isDirectoryInSync(parentUri)) {\n+              if (alluxioUriToDel.equals(inodePath.getUri())\n+                  || !ufsSyncChecker.isDirectoryInSync(parentUri)) {\n                 // Parent will not recursively delete, so delete this inode individually\n                 if (delInode.isFile()) {\n                   if (!ufs.deleteFile(ufsUri)) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1229, "bugNodeStartChar": 54473, "bugNodeLength": 44, "fixLineNum": 1229, "fixNodeStartChar": 54473, "fixNodeLength": 108, "sourceBeforeFix": "!ufsSyncChecker.isDirectoryInSync(parentUri)", "sourceAfterFix": "alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "8d1af7d7a8d8e028a3058a848c3b0cd9862f297d", "fixCommitParentSHA1": "8bd7625710dc8ab60f0efaca31b5d5f642d8a4a2", "bugFilePath": "core/server/master/src/test/java/alluxio/master/file/options/LoadMetadataOptionsTest.java", "fixPatch": "diff --git a/core/server/master/src/test/java/alluxio/master/file/options/LoadMetadataOptionsTest.java b/core/server/master/src/test/java/alluxio/master/file/options/LoadMetadataOptionsTest.java\nindex ddcccac..513e792 100644\n--- a/core/server/master/src/test/java/alluxio/master/file/options/LoadMetadataOptionsTest.java\n+++ b/core/server/master/src/test/java/alluxio/master/file/options/LoadMetadataOptionsTest.java\n@@ -40,7 +40,8 @@\n     LoadMetadataOptions options = LoadMetadataOptions.defaults();\n     options.setCreateAncestors(isCreateAncestors);\n     options.setLoadDirectChildren(isLoadDirectChildren);\n-    options.setUnderFileStatus(new UnderFileStatus(\"dummy\", isDirectory));\n+    options.setUnderFileStatus(\n+        new UnderFileStatus(\"dummy\", 0L, isDirectory, 0L, \"owner\", \"group\", (short) 077));\n     Assert.assertEquals(isCreateAncestors, options.isCreateAncestors());\n     Assert.assertEquals(isLoadDirectChildren, options.isLoadDirectChildren());\n     Assert.assertEquals(isDirectory, options.getUnderFileStatus().isDirectory());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 43, "bugNodeStartChar": 1528, "bugNodeLength": 41, "fixLineNum": 44, "fixNodeStartChar": 1537, "fixNodeLength": 80, "sourceBeforeFix": "new UnderFileStatus(\"dummy\",isDirectory)", "sourceAfterFix": "new UnderFileStatus(\"dummy\",0L,isDirectory,0L,\"owner\",\"group\",(short)077)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "d8ca70f67abb10b2f1df8bfdefac2eef9bae2175", "fixCommitParentSHA1": "a4df9dcd052a1b731c480fbcc63fec4088ce2d71", "bugFilePath": "core/server/master/src/test/java/alluxio/master/file/FileSystemMasterTest.java", "fixPatch": "diff --git a/core/server/master/src/test/java/alluxio/master/file/FileSystemMasterTest.java b/core/server/master/src/test/java/alluxio/master/file/FileSystemMasterTest.java\nindex 241dde3..246ef93 100644\n--- a/core/server/master/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n+++ b/core/server/master/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n@@ -395,7 +395,7 @@\n         .join(FILE_PREFIX + (DIR_WIDTH)).getPath()));\n     // delete top-level directory\n     mFileSystemMaster.delete(new AlluxioURI(MOUNT_URI).join(DIR_TOP_LEVEL),\n-        DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false));\n+        DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true));\n     checkPersistedDirectoriesDeleted(3, ufsMount, Collections.EMPTY_LIST);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 398, "bugNodeStartChar": 16689, "bugNodeLength": 85, "fixLineNum": 398, "fixNodeStartChar": 16689, "fixNodeLength": 84, "sourceBeforeFix": "DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false)", "sourceAfterFix": "DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "22a7ee9be3f6a027215775195111fe5f00727be0", "fixCommitParentSHA1": "7cc7a1a2f8b8c0da4647c5e3b337ebfb3dcf6103", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\nindex ab6f8ea..5b448e6 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n@@ -71,7 +71,7 @@\n       }\n     }\n     if (selectedDirView == null) {\n-      LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n+      LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 74, "bugNodeStartChar": 2820, "bugNodeLength": 109, "fixLineNum": 74, "fixNodeStartChar": 2820, "fixNodeLength": 108, "sourceBeforeFix": "LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)", "sourceAfterFix": "LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "22a7ee9be3f6a027215775195111fe5f00727be0", "fixCommitParentSHA1": "7cc7a1a2f8b8c0da4647c5e3b337ebfb3dcf6103", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\nindex ab6f8ea..5b448e6 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n@@ -71,7 +71,7 @@\n       }\n     }\n     if (selectedDirView == null) {\n-      LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n+      LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 74, "bugNodeStartChar": 2820, "bugNodeLength": 109, "fixLineNum": 74, "fixNodeStartChar": 2820, "fixNodeLength": 108, "sourceBeforeFix": "LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)", "sourceAfterFix": "LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a82a81905c6c9034a910fa906ff84a487226213d", "fixCommitParentSHA1": "7cc7a1a2f8b8c0da4647c5e3b337ebfb3dcf6103", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\nindex ab6f8ea..5b448e6 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n@@ -71,7 +71,7 @@\n       }\n     }\n     if (selectedDirView == null) {\n-      LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n+      LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 74, "bugNodeStartChar": 2820, "bugNodeLength": 109, "fixLineNum": 74, "fixNodeStartChar": 2820, "fixNodeLength": 108, "sourceBeforeFix": "LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)", "sourceAfterFix": "LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a82a81905c6c9034a910fa906ff84a487226213d", "fixCommitParentSHA1": "7cc7a1a2f8b8c0da4647c5e3b337ebfb3dcf6103", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\nindex ab6f8ea..5b448e6 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/evictor/GreedyEvictor.java\n@@ -71,7 +71,7 @@\n       }\n     }\n     if (selectedDirView == null) {\n-      LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n+      LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 74, "bugNodeStartChar": 2820, "bugNodeLength": 109, "fixLineNum": 74, "fixNodeStartChar": 2820, "fixNodeLength": 108, "sourceBeforeFix": "LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)", "sourceAfterFix": "LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f1df3a8b1d92ab16bd21d80fe8a21cf57d3eb14f", "fixCommitParentSHA1": "33aac3af11c87e1f44eb0d58b3c3d7a873e85a2f", "bugFilePath": "core/client/src/main/java/alluxio/client/netty/NettyRPC.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/netty/NettyRPC.java b/core/client/src/main/java/alluxio/client/netty/NettyRPC.java\nindex f38c8b5..100461d 100644\n--- a/core/client/src/main/java/alluxio/client/netty/NettyRPC.java\n+++ b/core/client/src/main/java/alluxio/client/netty/NettyRPC.java\n@@ -30,7 +30,7 @@\n  * Netty blocking RPC client. This provides a simple way to send a request and wait for response\n  * via netty. The user needs to make sure that the request is properly handled on the server.\n  */\n-public class NettyRPC {\n+public final class NettyRPC {\n   private NettyRPC() {}  // prevent instantiation\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 29, "bugNodeStartChar": 1050, "bugNodeLength": 2958, "fixLineNum": 29, "fixNodeStartChar": 1050, "fixNodeLength": 2964, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f1df3a8b1d92ab16bd21d80fe8a21cf57d3eb14f", "fixCommitParentSHA1": "33aac3af11c87e1f44eb0d58b3c3d7a873e85a2f", "bugFilePath": "core/client/src/main/java/alluxio/client/netty/NettyRPCContext.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/netty/NettyRPCContext.java b/core/client/src/main/java/alluxio/client/netty/NettyRPCContext.java\nindex c1e976e..2a6bb03 100644\n--- a/core/client/src/main/java/alluxio/client/netty/NettyRPCContext.java\n+++ b/core/client/src/main/java/alluxio/client/netty/NettyRPCContext.java\n@@ -16,7 +16,7 @@\n /**\n  * Context to send a netty RPC.\n  */\n-public class NettyRPCContext {\n+public final class NettyRPCContext {\n   /** The netty channel, default to be null. */\n   private Channel mChannel;\n   /** The RPC timeout in ms, default to +inf. */\n", "projectName": "Alluxio.alluxio", "bugLineNum": 16, "bugNodeStartChar": 579, "bugNodeLength": 952, "fixLineNum": 16, "fixNodeStartChar": 579, "fixNodeLength": 958, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9f5dd0f7caa451c4d1620467f13be87bd9ae3f71", "fixCommitParentSHA1": "755bcbbf351f132f108aa25eb861d012b3b1ae8b", "bugFilePath": "core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java b/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java\nindex d2eea94..669832a 100644\n--- a/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java\n+++ b/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java\n@@ -186,7 +186,7 @@\n     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n-      LOG.error(\"Unable to delete {} because listInternal returns null\", path);\n+      LOG.warn(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 189, "bugNodeStartChar": 6044, "bugNodeLength": 72, "fixLineNum": 189, "fixNodeStartChar": 6044, "fixNodeLength": 71, "sourceBeforeFix": "LOG.error(\"Unable to delete {} because listInternal returns null\",path)", "sourceAfterFix": "LOG.warn(\"Unable to delete {} because listInternal returns null\",path)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9f5dd0f7caa451c4d1620467f13be87bd9ae3f71", "fixCommitParentSHA1": "755bcbbf351f132f108aa25eb861d012b3b1ae8b", "bugFilePath": "core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java b/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java\nindex d2eea94..669832a 100644\n--- a/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java\n+++ b/core/common/src/main/java/alluxio/underfs/ObjectUnderFileSystem.java\n@@ -186,7 +186,7 @@\n     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n-      LOG.error(\"Unable to delete {} because listInternal returns null\", path);\n+      LOG.warn(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 189, "bugNodeStartChar": 6044, "bugNodeLength": 72, "fixLineNum": 189, "fixNodeStartChar": 6044, "fixNodeLength": 71, "sourceBeforeFix": "LOG.error(\"Unable to delete {} because listInternal returns null\",path)", "sourceAfterFix": "LOG.warn(\"Unable to delete {} because listInternal returns null\",path)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0cadcd61468d62a7a2fd1da26c7bac28b6c8c049", "fixCommitParentSHA1": "b4d406da168d96ef887c403ebf7592555a245168", "bugFilePath": "underfs/glusterfs/src/main/java/alluxio/underfs/glusterfs/GlusterFSUnderFileSystem.java", "fixPatch": "diff --git a/underfs/glusterfs/src/main/java/alluxio/underfs/glusterfs/GlusterFSUnderFileSystem.java b/underfs/glusterfs/src/main/java/alluxio/underfs/glusterfs/GlusterFSUnderFileSystem.java\nindex 389ac7e..d75cc89 100644\n--- a/underfs/glusterfs/src/main/java/alluxio/underfs/glusterfs/GlusterFSUnderFileSystem.java\n+++ b/underfs/glusterfs/src/main/java/alluxio/underfs/glusterfs/GlusterFSUnderFileSystem.java\n@@ -31,7 +31,7 @@\n  * </p>\n  */\n @ThreadSafe\n-public class GlusterFSUnderFileSystem extends HdfsUnderFileSystem {\n+public final class GlusterFSUnderFileSystem extends HdfsUnderFileSystem {\n \n   /**\n    * Constant for the Gluster FS URI scheme.\n@@ -41,7 +41,9 @@\n   /**\n    * Prepares the Hadoop configuration necessary.\n    *\n+   * @param path the gluster path to serve as ufs\n    * @param ufsConf Hadoop configuration\n+   * @return a prepared configuration\n    */\n   public static Configuration prepareConfiguration(String path, Map<String, String> ufsConf) {\n     if (path.startsWith(SCHEME)) {\n@@ -70,6 +72,7 @@\n    *\n    * @param uri the {@link AlluxioURI} for this UFS\n    * @param conf the configuration for Hadoop or GlusterFS\n+   * @return a new Gluster FS {@link UnderFileSystem}\n    */\n   public static GlusterFSUnderFileSystem createInstance(AlluxioURI uri, Map<String, String> conf) {\n     Configuration hadoopConf = prepareConfiguration(uri.toString(), conf);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 26, "bugNodeStartChar": 854, "bugNodeLength": 2629, "fixLineNum": 26, "fixNodeStartChar": 854, "fixNodeLength": 2635, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4049edd5a55e9523f1b329d9e9103091d0ad943d", "fixCommitParentSHA1": "bfac4610a8a638bc89f9d6752ef0f498a942c22b", "bugFilePath": "core/client/src/test/java/alluxio/client/file/FileInStreamTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/file/FileInStreamTest.java b/core/client/src/test/java/alluxio/client/file/FileInStreamTest.java\nindex edb2e77..2c2e727 100644\n--- a/core/client/src/test/java/alluxio/client/file/FileInStreamTest.java\n+++ b/core/client/src/test/java/alluxio/client/file/FileInStreamTest.java\n@@ -439,7 +439,7 @@\n     try {\n       mTestStream.seek(BLOCK_LENGTH);\n       Assert.fail(\"block store should throw exception\");\n-    } catch (UnavailableException e) {\n+    } catch (IOException e) {\n       Assert.assertEquals(\"test IOException\", e.getMessage());\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 442, "bugNodeStartChar": 16697, "bugNodeLength": 22, "fixLineNum": 442, "fixNodeStartChar": 16697, "fixNodeLength": 13, "sourceBeforeFix": "UnavailableException e", "sourceAfterFix": "IOException e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2e3328d3b849d29df6afd79a9d803a2ccb71793d", "fixCommitParentSHA1": "c217e41ad5a9ff661fda4b44e539f91af24867b5", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex c1fd2d2..82fc656 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -1208,7 +1208,7 @@\n                 findPathInPairList(recursiveUFSDeletes, ancestor);\n             while (ancestor != null && ancestorPair != null) {\n               toAdd.add(ancestorPair);\n-              recursiveUFSDeletes.remove(ancestor);\n+              recursiveUFSDeletes.remove(ancestorPair);\n               ancestor = ancestor.getParent();\n               ancestorPair = findPathInPairList(recursiveUFSDeletes, ancestor);\n             }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1211, "bugNodeStartChar": 53782, "bugNodeLength": 36, "fixLineNum": 1211, "fixNodeStartChar": 53782, "fixNodeLength": 40, "sourceBeforeFix": "recursiveUFSDeletes.remove(ancestor)", "sourceAfterFix": "recursiveUFSDeletes.remove(ancestorPair)"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "42ac2cd8be79d12d0cccf164ef9876a7770fdc70", "fixCommitParentSHA1": "477cec0a79c0c24ef09167360b0862802348a519", "bugFilePath": "tests/src/test/java/alluxio/master/journal/options/JournalReaderOptionsTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/master/journal/options/JournalReaderOptionsTest.java b/tests/src/test/java/alluxio/master/journal/options/JournalReaderOptionsTest.java\nindex da338df..2d808fc 100644\n--- a/tests/src/test/java/alluxio/master/journal/options/JournalReaderOptionsTest.java\n+++ b/tests/src/test/java/alluxio/master/journal/options/JournalReaderOptionsTest.java\n@@ -31,7 +31,7 @@\n    * Tests getting and setting fields.\n    */\n   @Test\n-  public void fields() {\n+  public void fields() throws Exception {\n     Random random = new Random();\n     boolean isPrimary = random.nextBoolean();\n     long sequenceNumber = random.nextLong();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 30, "bugNodeStartChar": 956, "bugNodeLength": 495, "fixLineNum": 30, "fixNodeStartChar": 956, "fixNodeLength": 512, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ce53a6874b919d79f06e563b6edd0c7e8302e33f", "fixCommitParentSHA1": "d764fa8facdafe02a808ee1f365940a57262e941", "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex 19b74fd..f17bf25 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -31,9 +31,9 @@\n public class PropertyKey {\n   // The following two maps must be the first to initialize within this file.\n   /** A map from default property key's string name to the key. */\n-  private static Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n+  private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   /** A map from default property key's string name to the key. */\n-  private static Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n+  private static final Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n \n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 33, "bugNodeStartChar": 1066, "bugNodeLength": 142, "fixLineNum": 33, "fixNodeStartChar": 1066, "fixNodeLength": 148, "sourceBeforeFix": "10", "sourceAfterFix": "26"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ce53a6874b919d79f06e563b6edd0c7e8302e33f", "fixCommitParentSHA1": "d764fa8facdafe02a808ee1f365940a57262e941", "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex 19b74fd..f17bf25 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -31,9 +31,9 @@\n public class PropertyKey {\n   // The following two maps must be the first to initialize within this file.\n   /** A map from default property key's string name to the key. */\n-  private static Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n+  private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   /** A map from default property key's string name to the key. */\n-  private static Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n+  private static final Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n \n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 35, "bugNodeStartChar": 1211, "bugNodeLength": 140, "fixLineNum": 35, "fixNodeStartChar": 1211, "fixNodeLength": 146, "sourceBeforeFix": "10", "sourceAfterFix": "26"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a34581c2dbe9aff080eec247d772c5ba7a2e43d4", "fixCommitParentSHA1": "52861acdcf88df548e581bd3e314bd52b46cff7e", "bugFilePath": "core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\nindex 24ccf49..d17236c 100644\n--- a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n+++ b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n@@ -249,7 +249,7 @@\n       mFileSystem.delete(uri, options);\n       return true;\n     } catch (InvalidPathException | FileDoesNotExistException e) {\n-      LOG.error(\"delete failed: {}\", e.getMessage());\n+      LOG.warn(\"delete failed: {}\", e.getMessage());\n       return false;\n     } catch (AlluxioException e) {\n       throw new IOException(e);\n@@ -656,7 +656,7 @@\n     try {\n       mFileSystem.rename(srcPath, dstPath);\n     } catch (FileDoesNotExistException e) {\n-      LOG.error(\"Failed to rename {} to {}\", src, dst);\n+      LOG.warn(\"rename failed: {}\", e.getMessage());\n       return false;\n     } catch (AlluxioException e) {\n       ensureExists(srcPath);\n@@ -664,14 +664,14 @@\n       try {\n         dstStatus = mFileSystem.getStatus(dstPath);\n       } catch (IOException | AlluxioException e2) {\n-        LOG.error(\"Failed to rename {} to {}\", src, dst);\n+        LOG.warn(\"rename failed: {}\", e.getMessage());\n         return false;\n       }\n       // If the destination is an existing folder, try to move the src into the folder\n       if (dstStatus != null && dstStatus.isFolder()) {\n         dstPath = dstPath.join(srcPath.getName());\n       } else {\n-        LOG.error(\"Failed to rename {} to {}\", src, dst);\n+        LOG.warn(\"rename failed: {}\", e.getMessage());\n         return false;\n       }\n       try {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 252, "bugNodeStartChar": 9995, "bugNodeLength": 46, "fixLineNum": 252, "fixNodeStartChar": 9995, "fixNodeLength": 45, "sourceBeforeFix": "LOG.error(\"delete failed: {}\",e.getMessage())", "sourceAfterFix": "LOG.warn(\"delete failed: {}\",e.getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a34581c2dbe9aff080eec247d772c5ba7a2e43d4", "fixCommitParentSHA1": "52861acdcf88df548e581bd3e314bd52b46cff7e", "bugFilePath": "core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\nindex 24ccf49..d17236c 100644\n--- a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n+++ b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n@@ -249,7 +249,7 @@\n       mFileSystem.delete(uri, options);\n       return true;\n     } catch (InvalidPathException | FileDoesNotExistException e) {\n-      LOG.error(\"delete failed: {}\", e.getMessage());\n+      LOG.warn(\"delete failed: {}\", e.getMessage());\n       return false;\n     } catch (AlluxioException e) {\n       throw new IOException(e);\n@@ -656,7 +656,7 @@\n     try {\n       mFileSystem.rename(srcPath, dstPath);\n     } catch (FileDoesNotExistException e) {\n-      LOG.error(\"Failed to rename {} to {}\", src, dst);\n+      LOG.warn(\"rename failed: {}\", e.getMessage());\n       return false;\n     } catch (AlluxioException e) {\n       ensureExists(srcPath);\n@@ -664,14 +664,14 @@\n       try {\n         dstStatus = mFileSystem.getStatus(dstPath);\n       } catch (IOException | AlluxioException e2) {\n-        LOG.error(\"Failed to rename {} to {}\", src, dst);\n+        LOG.warn(\"rename failed: {}\", e.getMessage());\n         return false;\n       }\n       // If the destination is an existing folder, try to move the src into the folder\n       if (dstStatus != null && dstStatus.isFolder()) {\n         dstPath = dstPath.join(srcPath.getName());\n       } else {\n-        LOG.error(\"Failed to rename {} to {}\", src, dst);\n+        LOG.warn(\"rename failed: {}\", e.getMessage());\n         return false;\n       }\n       try {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 252, "bugNodeStartChar": 9995, "bugNodeLength": 46, "fixLineNum": 252, "fixNodeStartChar": 9995, "fixNodeLength": 45, "sourceBeforeFix": "LOG.error(\"delete failed: {}\",e.getMessage())", "sourceAfterFix": "LOG.warn(\"delete failed: {}\",e.getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "fixCommitParentSHA1": "66869407ca45a30eab2b8924ca030666e9995820", "bugFilePath": "core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\nindex 1d4c316..b4b0501 100644\n--- a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n+++ b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n@@ -52,11 +52,11 @@\n   /**\n    * A wrapper on the resource to include the last time at which it was used.\n    *\n-   * @param <T> the resource type\n+   * @param <R> the resource type\n    */\n-  protected class ResourceInternal<T> {\n+  protected class ResourceInternal<R> {\n     /** The resource. */\n-    private T mResource;\n+    private R mResource;\n \n     /** The last access time in ms. */\n     private long mLastAccessTimeMs;\n@@ -80,7 +80,7 @@\n      *\n      * @param resource the resource\n      */\n-    public ResourceInternal(T resource) {\n+    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 57, "bugNodeStartChar": 1930, "bugNodeLength": 1, "fixLineNum": 57, "fixNodeStartChar": 1930, "fixNodeLength": 1, "sourceBeforeFix": "T", "sourceAfterFix": "R"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "fixCommitParentSHA1": "66869407ca45a30eab2b8924ca030666e9995820", "bugFilePath": "core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\nindex 1d4c316..b4b0501 100644\n--- a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n+++ b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n@@ -52,11 +52,11 @@\n   /**\n    * A wrapper on the resource to include the last time at which it was used.\n    *\n-   * @param <T> the resource type\n+   * @param <R> the resource type\n    */\n-  protected class ResourceInternal<T> {\n+  protected class ResourceInternal<R> {\n     /** The resource. */\n-    private T mResource;\n+    private R mResource;\n \n     /** The last access time in ms. */\n     private long mLastAccessTimeMs;\n@@ -80,7 +80,7 @@\n      *\n      * @param resource the resource\n      */\n-    public ResourceInternal(T resource) {\n+    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 58, "bugNodeStartChar": 1939, "bugNodeLength": 45, "fixLineNum": 58, "fixNodeStartChar": 1939, "fixNodeLength": 45, "sourceBeforeFix": "/**   * The resource.   */ private T mResource; ", "sourceAfterFix": "/**   * The resource.   */ private R mResource; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "fixCommitParentSHA1": "66869407ca45a30eab2b8924ca030666e9995820", "bugFilePath": "core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\nindex 1d4c316..b4b0501 100644\n--- a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n+++ b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n@@ -52,11 +52,11 @@\n   /**\n    * A wrapper on the resource to include the last time at which it was used.\n    *\n-   * @param <T> the resource type\n+   * @param <R> the resource type\n    */\n-  protected class ResourceInternal<T> {\n+  protected class ResourceInternal<R> {\n     /** The resource. */\n-    private T mResource;\n+    private R mResource;\n \n     /** The last access time in ms. */\n     private long mLastAccessTimeMs;\n@@ -80,7 +80,7 @@\n      *\n      * @param resource the resource\n      */\n-    public ResourceInternal(T resource) {\n+    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 83, "bugNodeStartChar": 2524, "bugNodeLength": 10, "fixLineNum": 83, "fixNodeStartChar": 2524, "fixNodeLength": 10, "sourceBeforeFix": "T resource", "sourceAfterFix": "R resource"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "55afb8268fa23107749ab8fc0feac49724afe751", "fixCommitParentSHA1": "8c732cc23a6da564e75877821fba6dd2a21eb646", "bugFilePath": "core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\nindex 1d4c316..b4b0501 100644\n--- a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n+++ b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n@@ -52,11 +52,11 @@\n   /**\n    * A wrapper on the resource to include the last time at which it was used.\n    *\n-   * @param <T> the resource type\n+   * @param <R> the resource type\n    */\n-  protected class ResourceInternal<T> {\n+  protected class ResourceInternal<R> {\n     /** The resource. */\n-    private T mResource;\n+    private R mResource;\n \n     /** The last access time in ms. */\n     private long mLastAccessTimeMs;\n@@ -80,7 +80,7 @@\n      *\n      * @param resource the resource\n      */\n-    public ResourceInternal(T resource) {\n+    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 57, "bugNodeStartChar": 1930, "bugNodeLength": 1, "fixLineNum": 57, "fixNodeStartChar": 1930, "fixNodeLength": 1, "sourceBeforeFix": "T", "sourceAfterFix": "R"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "55afb8268fa23107749ab8fc0feac49724afe751", "fixCommitParentSHA1": "8c732cc23a6da564e75877821fba6dd2a21eb646", "bugFilePath": "core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\nindex 1d4c316..b4b0501 100644\n--- a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n+++ b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n@@ -52,11 +52,11 @@\n   /**\n    * A wrapper on the resource to include the last time at which it was used.\n    *\n-   * @param <T> the resource type\n+   * @param <R> the resource type\n    */\n-  protected class ResourceInternal<T> {\n+  protected class ResourceInternal<R> {\n     /** The resource. */\n-    private T mResource;\n+    private R mResource;\n \n     /** The last access time in ms. */\n     private long mLastAccessTimeMs;\n@@ -80,7 +80,7 @@\n      *\n      * @param resource the resource\n      */\n-    public ResourceInternal(T resource) {\n+    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 58, "bugNodeStartChar": 1939, "bugNodeLength": 45, "fixLineNum": 58, "fixNodeStartChar": 1939, "fixNodeLength": 45, "sourceBeforeFix": "/**   * The resource.   */ private T mResource; ", "sourceAfterFix": "/**   * The resource.   */ private R mResource; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "55afb8268fa23107749ab8fc0feac49724afe751", "fixCommitParentSHA1": "8c732cc23a6da564e75877821fba6dd2a21eb646", "bugFilePath": "core/common/src/main/java/alluxio/resource/DynamicResourcePool.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\nindex 1d4c316..b4b0501 100644\n--- a/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n+++ b/core/common/src/main/java/alluxio/resource/DynamicResourcePool.java\n@@ -52,11 +52,11 @@\n   /**\n    * A wrapper on the resource to include the last time at which it was used.\n    *\n-   * @param <T> the resource type\n+   * @param <R> the resource type\n    */\n-  protected class ResourceInternal<T> {\n+  protected class ResourceInternal<R> {\n     /** The resource. */\n-    private T mResource;\n+    private R mResource;\n \n     /** The last access time in ms. */\n     private long mLastAccessTimeMs;\n@@ -80,7 +80,7 @@\n      *\n      * @param resource the resource\n      */\n-    public ResourceInternal(T resource) {\n+    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 83, "bugNodeStartChar": 2524, "bugNodeLength": 10, "fixLineNum": 83, "fixNodeStartChar": 2524, "fixNodeLength": 10, "sourceBeforeFix": "T resource", "sourceAfterFix": "R resource"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "2170c35fb25ca10d67a21943efe27a5ca89ccd66", "fixCommitParentSHA1": "dc30ba9d9e854c29534bacf2f644e533fd929a5b", "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java", "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java b/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java\nindex 97a07fa..195d89a 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java\n@@ -393,7 +393,7 @@\n     @GuardedBy(\"mLock\")\n     private boolean shouldRestartPacketReader() {\n       return !mPacketReaderActive && !tooManyPendingPackets() && mPosToQueue < mRequest.mEnd\n-          && mError != null && !mCancel && !mEof;\n+          && mError == null && !mCancel && !mEof;\n     }\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 396, "bugNodeStartChar": 13507, "bugNodeLength": 14, "fixLineNum": 396, "fixNodeStartChar": 13507, "fixNodeLength": 14, "sourceBeforeFix": "mError != null", "sourceAfterFix": "mError == null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "80b65af84df3d54ebb4e4a4abe52c6b1fdc32b64", "fixCommitParentSHA1": "f4f422c1fadbe7642772e0acf54aa805f81587a4", "bugFilePath": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "fixPatch": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex 35adf13..a2a5a5c 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n@@ -306,7 +306,7 @@\n     mAsyncPersistHandler = AsyncPersistHandler.Factory.create(new FileSystemMasterView(this));\n     mPermissionChecker = new PermissionChecker(mInodeTree);\n \n-    registry.add(DefaultFileSystemMaster.class, this);\n+    registry.add(FileSystemMaster.class, this);\n     Metrics.registerGauges(this);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 309, "bugNodeStartChar": 13641, "bugNodeLength": 29, "fixLineNum": 309, "fixNodeStartChar": 13641, "fixNodeLength": 22, "sourceBeforeFix": "DefaultFileSystemMaster.class", "sourceAfterFix": "FileSystemMaster.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "80b65af84df3d54ebb4e4a4abe52c6b1fdc32b64", "fixCommitParentSHA1": "f4f422c1fadbe7642772e0acf54aa805f81587a4", "bugFilePath": "core/server/master/src/test/java/alluxio/master/lineage/LineageMasterTest.java", "fixPatch": "diff --git a/core/server/master/src/test/java/alluxio/master/lineage/LineageMasterTest.java b/core/server/master/src/test/java/alluxio/master/lineage/LineageMasterTest.java\nindex 150785c..5873135 100644\n--- a/core/server/master/src/test/java/alluxio/master/lineage/LineageMasterTest.java\n+++ b/core/server/master/src/test/java/alluxio/master/lineage/LineageMasterTest.java\n@@ -75,7 +75,7 @@\n     JournalFactory factory =\n         new MutableJournal.Factory(new URI(mTestFolder.newFolder().getAbsolutePath()));\n     mFileSystemMaster = Mockito.mock(DefaultFileSystemMaster.class);\n-    registry.add(DefaultFileSystemMaster.class, mFileSystemMaster);\n+    registry.add(FileSystemMaster.class, mFileSystemMaster);\n     ThreadFactory threadPool = ThreadFactoryUtils.build(\"LineageMasterTest-%d\", true);\n     mExecutorService = Executors.newFixedThreadPool(2, threadPool);\n     mLineageMaster = new LineageMaster(registry, factory,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 78, "bugNodeStartChar": 2770, "bugNodeLength": 29, "fixLineNum": 78, "fixNodeStartChar": 2770, "fixNodeLength": 22, "sourceBeforeFix": "DefaultFileSystemMaster.class", "sourceAfterFix": "FileSystemMaster.class"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "87fbcfbbd5e2d39f470db8edbd803f4b6d5f3326", "fixCommitParentSHA1": "45c3cbe91140fc78165914cb4438aeb8b049b0da", "bugFilePath": "core/server/src/main/java/alluxio/master/file/FileSystemMaster.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\nindex 6a304df..2a04660 100644\n--- a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n+++ b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n@@ -3046,7 +3046,7 @@\n               LOG.debug(\"File {} is expired. Performing action {}\", inode.getName(), ttlAction);\n               switch (ttlAction) {\n                 case FREE:\n-                  free(path, false);\n+                  free(path, true);\n                   // Reset state\n                   inode.setTtl(Constants.NO_TTL);\n                   inode.setTtlAction(TtlAction.DELETE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 3049, "bugNodeStartChar": 132445, "bugNodeLength": 17, "fixLineNum": 3049, "fixNodeStartChar": 132445, "fixNodeLength": 16, "sourceBeforeFix": "free(path,false)", "sourceAfterFix": "free(path,true)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "fixCommitParentSHA1": "32e7a4e6c717d801d18724f0f57bbd68c0d40d8f", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileSystemContext.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileSystemContext.java b/core/client/src/main/java/alluxio/client/file/FileSystemContext.java\nindex dafdf04..4db49ab 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileSystemContext.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileSystemContext.java\n@@ -127,7 +127,7 @@\n    *\n    * @param subject the parent subject, set to null if not present\n    */\n-  private FileSystemContext(Subject subject) {\n+  public FileSystemContext(Subject subject) {\n     mParentSubject = subject;\n     init();\n   }\n@@ -149,7 +149,7 @@\n    * Closes all the resources asscoated with the context. Make sure all the resources are released\n    * back to this context before calling this close. Usually, you don't need to call this.\n    */\n-  public synchronized void close() {\n+  public void close() {\n     mFileSystemMasterClientPool.close();\n     mFileSystemMasterClientPool = null;\n     mBlockMasterClientPool.close();\n@@ -178,7 +178,7 @@\n   /**\n    * Resets the context.\n    */\n-  public synchronized void reset() {\n+  public void reset() {\n     close();\n     init();\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 148, "bugNodeStartChar": 5508, "bugNodeLength": 939, "fixLineNum": 148, "fixNodeStartChar": 5508, "fixNodeLength": 926, "sourceBeforeFix": "33", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "fixCommitParentSHA1": "32e7a4e6c717d801d18724f0f57bbd68c0d40d8f", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileSystemContext.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileSystemContext.java b/core/client/src/main/java/alluxio/client/file/FileSystemContext.java\nindex dafdf04..4db49ab 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileSystemContext.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileSystemContext.java\n@@ -127,7 +127,7 @@\n    *\n    * @param subject the parent subject, set to null if not present\n    */\n-  private FileSystemContext(Subject subject) {\n+  public FileSystemContext(Subject subject) {\n     mParentSubject = subject;\n     init();\n   }\n@@ -149,7 +149,7 @@\n    * Closes all the resources asscoated with the context. Make sure all the resources are released\n    * back to this context before calling this close. Usually, you don't need to call this.\n    */\n-  public synchronized void close() {\n+  public void close() {\n     mFileSystemMasterClientPool.close();\n     mFileSystemMasterClientPool = null;\n     mBlockMasterClientPool.close();\n@@ -178,7 +178,7 @@\n   /**\n    * Resets the context.\n    */\n-  public synchronized void reset() {\n+  public void reset() {\n     close();\n     init();\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 178, "bugNodeStartChar": 6451, "bugNodeLength": 100, "fixLineNum": 178, "fixNodeStartChar": 6451, "fixNodeLength": 87, "sourceBeforeFix": "33", "sourceAfterFix": "1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "57f8d26bc2aad0a91ab8a85be7e192ef469489f9", "fixCommitParentSHA1": "8b43c2223a08c21b677b97db9293c126cf2b8a2b", "bugFilePath": "core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\nindex 4968bff..5160fea 100644\n--- a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n+++ b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n@@ -74,11 +74,11 @@\n     String rpcAddress = CommonUtils.randomAlphaNumString(random.nextInt(10));\n     long startTimeMs = random.nextLong();\n     StartupConsistencyCheck check = new StartupConsistencyCheck();\n-    check.setStatus(CommonUtils.randomString(random.nextInt(10)));\n+    check.setStatus(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     int numUris = random.nextInt(10);\n     List<String> uris = new ArrayList<>(numUris);\n     for (int i = 0; i < numUris; i++) {\n-      uris.add(CommonUtils.randomString(random.nextInt(10)));\n+      uris.add(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     }\n     check.setInconsistentUris(uris);\n     Map<String, Capacity> tierCapacity = new HashMap<>();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 77, "bugNodeStartChar": 3038, "bugNodeLength": 44, "fixLineNum": 77, "fixNodeStartChar": 3038, "fixNodeLength": 52, "sourceBeforeFix": "CommonUtils.randomString(random.nextInt(10))", "sourceAfterFix": "CommonUtils.randomAlphaNumString(random.nextInt(10))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "57f8d26bc2aad0a91ab8a85be7e192ef469489f9", "fixCommitParentSHA1": "8b43c2223a08c21b677b97db9293c126cf2b8a2b", "bugFilePath": "core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\nindex 4968bff..5160fea 100644\n--- a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n+++ b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n@@ -74,11 +74,11 @@\n     String rpcAddress = CommonUtils.randomAlphaNumString(random.nextInt(10));\n     long startTimeMs = random.nextLong();\n     StartupConsistencyCheck check = new StartupConsistencyCheck();\n-    check.setStatus(CommonUtils.randomString(random.nextInt(10)));\n+    check.setStatus(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     int numUris = random.nextInt(10);\n     List<String> uris = new ArrayList<>(numUris);\n     for (int i = 0; i < numUris; i++) {\n-      uris.add(CommonUtils.randomString(random.nextInt(10)));\n+      uris.add(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     }\n     check.setInconsistentUris(uris);\n     Map<String, Capacity> tierCapacity = new HashMap<>();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 77, "bugNodeStartChar": 3038, "bugNodeLength": 44, "fixLineNum": 77, "fixNodeStartChar": 3038, "fixNodeLength": 52, "sourceBeforeFix": "CommonUtils.randomString(random.nextInt(10))", "sourceAfterFix": "CommonUtils.randomAlphaNumString(random.nextInt(10))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "57f8d26bc2aad0a91ab8a85be7e192ef469489f9", "fixCommitParentSHA1": "8b43c2223a08c21b677b97db9293c126cf2b8a2b", "bugFilePath": "core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\nindex 4968bff..5160fea 100644\n--- a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n+++ b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n@@ -74,11 +74,11 @@\n     String rpcAddress = CommonUtils.randomAlphaNumString(random.nextInt(10));\n     long startTimeMs = random.nextLong();\n     StartupConsistencyCheck check = new StartupConsistencyCheck();\n-    check.setStatus(CommonUtils.randomString(random.nextInt(10)));\n+    check.setStatus(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     int numUris = random.nextInt(10);\n     List<String> uris = new ArrayList<>(numUris);\n     for (int i = 0; i < numUris; i++) {\n-      uris.add(CommonUtils.randomString(random.nextInt(10)));\n+      uris.add(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     }\n     check.setInconsistentUris(uris);\n     Map<String, Capacity> tierCapacity = new HashMap<>();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 81, "bugNodeStartChar": 3228, "bugNodeLength": 44, "fixLineNum": 81, "fixNodeStartChar": 3228, "fixNodeLength": 52, "sourceBeforeFix": "CommonUtils.randomString(random.nextInt(10))", "sourceAfterFix": "CommonUtils.randomAlphaNumString(random.nextInt(10))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "57f8d26bc2aad0a91ab8a85be7e192ef469489f9", "fixCommitParentSHA1": "8b43c2223a08c21b677b97db9293c126cf2b8a2b", "bugFilePath": "core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\nindex 4968bff..5160fea 100644\n--- a/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n+++ b/core/common/src/test/java/alluxio/wire/AlluxioMasterInfoTest.java\n@@ -74,11 +74,11 @@\n     String rpcAddress = CommonUtils.randomAlphaNumString(random.nextInt(10));\n     long startTimeMs = random.nextLong();\n     StartupConsistencyCheck check = new StartupConsistencyCheck();\n-    check.setStatus(CommonUtils.randomString(random.nextInt(10)));\n+    check.setStatus(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     int numUris = random.nextInt(10);\n     List<String> uris = new ArrayList<>(numUris);\n     for (int i = 0; i < numUris; i++) {\n-      uris.add(CommonUtils.randomString(random.nextInt(10)));\n+      uris.add(CommonUtils.randomAlphaNumString(random.nextInt(10)));\n     }\n     check.setInconsistentUris(uris);\n     Map<String, Capacity> tierCapacity = new HashMap<>();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 81, "bugNodeStartChar": 3228, "bugNodeLength": 44, "fixLineNum": 81, "fixNodeStartChar": 3228, "fixNodeLength": 52, "sourceBeforeFix": "CommonUtils.randomString(random.nextInt(10))", "sourceAfterFix": "CommonUtils.randomAlphaNumString(random.nextInt(10))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5303dec13d7b0336f282e02dce4d169c7acc6fcf", "fixCommitParentSHA1": "965def8ebc2154f1d3c6cbf2a26f3a63766ceae3", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex 2797058..e6f634b 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -280,7 +280,7 @@\n       int i = 0;\n       for (FileStatus status : files) {\n         // only return the relative path, to keep consistent with java.io.File.list()\n-        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDirectory());\n+        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDir());\n       }\n       return rtn;\n     } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 283, "bugNodeStartChar": 10527, "bugNodeLength": 20, "fixLineNum": 283, "fixNodeStartChar": 10527, "fixNodeLength": 14, "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5303dec13d7b0336f282e02dce4d169c7acc6fcf", "fixCommitParentSHA1": "965def8ebc2154f1d3c6cbf2a26f3a63766ceae3", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex 2797058..e6f634b 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -280,7 +280,7 @@\n       int i = 0;\n       for (FileStatus status : files) {\n         // only return the relative path, to keep consistent with java.io.File.list()\n-        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDirectory());\n+        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDir());\n       }\n       return rtn;\n     } else {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 283, "bugNodeStartChar": 10527, "bugNodeLength": 20, "fixLineNum": 283, "fixNodeStartChar": 10527, "fixNodeLength": 14, "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "82f6bf69cf547d15d83338f69fcebfd83fa2f461", "fixCommitParentSHA1": "27fc0901585b5fc45190e95d28a53d86e3aac97e", "bugFilePath": "core/client/src/main/java/alluxio/client/block/LocalBlockInStream.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/block/LocalBlockInStream.java b/core/client/src/main/java/alluxio/client/block/LocalBlockInStream.java\nindex 0f20c1a..79ae72d 100644\n--- a/core/client/src/main/java/alluxio/client/block/LocalBlockInStream.java\n+++ b/core/client/src/main/java/alluxio/client/block/LocalBlockInStream.java\n@@ -67,7 +67,7 @@\n       mReader = mCloser.register(new LocalFileBlockReader(result.getBlockPath()));\n     } catch (BlockDoesNotExistException e) {\n       mCloser.close();\n-      throw new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId));\n+      throw new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId), e);\n     } catch (AlluxioException e) {\n       mCloser.close();\n       throw new IOException(e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 70, "bugNodeStartChar": 2754, "bugNodeLength": 82, "fixLineNum": 70, "fixNodeStartChar": 2754, "fixNodeLength": 85, "sourceBeforeFix": "new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId))", "sourceAfterFix": "new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId),e)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "82f6bf69cf547d15d83338f69fcebfd83fa2f461", "fixCommitParentSHA1": "27fc0901585b5fc45190e95d28a53d86e3aac97e", "bugFilePath": "core/client/src/main/java/alluxio/client/block/RemoteBlockInStream.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/block/RemoteBlockInStream.java b/core/client/src/main/java/alluxio/client/block/RemoteBlockInStream.java\nindex dcd966a..a5bf996 100644\n--- a/core/client/src/main/java/alluxio/client/block/RemoteBlockInStream.java\n+++ b/core/client/src/main/java/alluxio/client/block/RemoteBlockInStream.java\n@@ -78,7 +78,7 @@\n       mLockId = result.getLockId();\n     } catch (BlockDoesNotExistException e) {\n       mCloser.close();\n-      throw new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId));\n+      throw new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId), e);\n     } catch (AlluxioException e) {\n       mCloser.close();\n       throw new IOException(e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 81, "bugNodeStartChar": 3221, "bugNodeLength": 71, "fixLineNum": 81, "fixNodeStartChar": 3221, "fixNodeLength": 74, "sourceBeforeFix": "new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId))", "sourceAfterFix": "new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId),e)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "646eab8942d2502ace75eef4ca09639e3861e594", "fixCommitParentSHA1": "5fd356a2fb97c994951a8d96dc91ffae3214c783", "bugFilePath": "underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java", "fixPatch": "diff --git a/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java b/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java\nindex 63ef766..1cbfe21 100644\n--- a/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java\n+++ b/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java\n@@ -273,7 +273,7 @@\n       }\n     } catch (IOException e) {\n       LOG.error(\"Fail to set owner for {} with user: {}, group: {}\", path, user, group);\n-      LOG.debug(e);\n+      LOG.debug(\"Exception: \", e);\n       LOG.warn(\"In order for Alluxio to set local files with the correct user and groups, \"\n           + \"Alluxio should be the local file system superusers.\");\n       if (!Configuration.getBoolean(PropertyKey.UNDERFS_ALLOW_SET_OWNER_FAILURE)) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 276, "bugNodeStartChar": 8256, "bugNodeLength": 12, "fixLineNum": 276, "fixNodeStartChar": 8256, "fixNodeLength": 27, "sourceBeforeFix": "LOG.debug(e)", "sourceAfterFix": "LOG.debug(\"Exception: \",e)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "8d3395136018a23e5abeddd90fded0b6f64eb399", "fixCommitParentSHA1": "9e86c354455706ca4b0f07412f2597a2eaef99e0", "bugFilePath": "underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java", "fixPatch": "diff --git a/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java b/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java\nindex aa40577..785e83e 100644\n--- a/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java\n+++ b/underfs/local/src/main/java/alluxio/underfs/local/LocalUnderFileSystem.java\n@@ -272,7 +272,7 @@\n         FileUtils.changeLocalFileGroup(path, group);\n       }\n     } catch (IOException e) {\n-      LOG.error(\"Fail to set owner for {} with user: {}, group: {}\", path, user, group, e);\n+      LOG.error(\"Fail to set owner for {} with user: {}, group: {}\", path, user, group);\n       LOG.warn(\"In order for Alluxio to set local files with the correct user and groups, \"\n           + \"Alluxio should be the local file system superusers.\");\n       if (!Configuration.getBoolean(PropertyKey.UNDERFS_ALLOW_SET_OWNER_FAILURE)) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 275, "bugNodeStartChar": 8167, "bugNodeLength": 84, "fixLineNum": 275, "fixNodeStartChar": 8167, "fixNodeLength": 81, "sourceBeforeFix": "LOG.error(\"Fail to set owner for {} with user: {}, group: {}\",path,user,group,e)", "sourceAfterFix": "LOG.error(\"Fail to set owner for {} with user: {}, group: {}\",path,user,group)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "eba21442eb7ab27514cf82240bb443955c5e52c4", "fixCommitParentSHA1": "f434441aa98ff2ae63020bf77aba4d53c739f010", "bugFilePath": "core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\nindex 813c501..46330dd 100644\n--- a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n+++ b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n@@ -465,7 +465,7 @@\n       URIStatus status = statuses.get(k);\n       // TODO(hy): Replicate 3 with the number of disk replications.\n       ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),\n-          status.getCreationTimeMs(), status.getCreationTimeMs(), null, null, null,\n+          status.getLastModificationTimeMs(), status.getCreationTimeMs(), null, null, null,\n           new Path(mAlluxioHeader + status.getPath()));\n     }\n     return ret;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 468, "bugNodeStartChar": 18581, "bugNodeLength": 26, "fixLineNum": 468, "fixNodeStartChar": 18581, "fixNodeLength": 34, "sourceBeforeFix": "status.getCreationTimeMs()", "sourceAfterFix": "status.getLastModificationTimeMs()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "eba21442eb7ab27514cf82240bb443955c5e52c4", "fixCommitParentSHA1": "f434441aa98ff2ae63020bf77aba4d53c739f010", "bugFilePath": "core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\nindex 813c501..46330dd 100644\n--- a/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n+++ b/core/client/src/main/java/alluxio/hadoop/AbstractFileSystem.java\n@@ -465,7 +465,7 @@\n       URIStatus status = statuses.get(k);\n       // TODO(hy): Replicate 3 with the number of disk replications.\n       ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),\n-          status.getCreationTimeMs(), status.getCreationTimeMs(), null, null, null,\n+          status.getLastModificationTimeMs(), status.getCreationTimeMs(), null, null, null,\n           new Path(mAlluxioHeader + status.getPath()));\n     }\n     return ret;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 468, "bugNodeStartChar": 18581, "bugNodeLength": 26, "fixLineNum": 468, "fixNodeStartChar": 18581, "fixNodeLength": 34, "sourceBeforeFix": "status.getCreationTimeMs()", "sourceAfterFix": "status.getLastModificationTimeMs()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fd56ecd6cf84e528206a189136ad4f88039b8b2", "fixCommitParentSHA1": "dd09185c165b81152c5c94be2fb88bbad3c757ac", "bugFilePath": "underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java", "fixPatch": "diff --git a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java\nindex 949d116..dfd3a4d 100644\n--- a/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java\n+++ b/underfs/gcs/src/main/java/alluxio/underfs/gcs/GCSUnderFileSystem.java\n@@ -409,7 +409,7 @@\n     }\n     for (String child : children) {\n       String childSrcPath = PathUtils.concatPath(src, child);\n-      String childDstPath = PathUtils.concatPath(src, child);\n+      String childDstPath = PathUtils.concatPath(dst, child);\n       boolean success;\n       if (isDirectory(childSrcPath)) {\n         // Recursive call\n", "projectName": "Alluxio.alluxio", "bugLineNum": 412, "bugNodeStartChar": 13984, "bugNodeLength": 32, "fixLineNum": 412, "fixNodeStartChar": 13984, "fixNodeLength": 32, "sourceBeforeFix": "PathUtils.concatPath(src,child)", "sourceAfterFix": "PathUtils.concatPath(dst,child)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6ca971f8904a41334a7b811033c0c146e9a3f45a", "fixCommitParentSHA1": "58dce46c3b3290ecece7c670fa551f1468be17a2", "bugFilePath": "core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java b/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java\nindex d68f1e8..68d07b0 100644\n--- a/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java\n+++ b/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java\n@@ -56,7 +56,7 @@\n    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n-    Preconditions.checkNotNull(timer);\n+    Preconditions.checkNotNull(timer, \"timer\");\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 59, "bugNodeStartChar": 2215, "bugNodeLength": 33, "fixLineNum": 59, "fixNodeStartChar": 2215, "fixNodeLength": 42, "sourceBeforeFix": "Preconditions.checkNotNull(timer)", "sourceAfterFix": "Preconditions.checkNotNull(timer,\"timer\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b8f47f506adeb28b8465119057673be4eb0b8015", "fixCommitParentSHA1": "1ec01527a3cc01a8ef3f35de391ad752667e9203", "bugFilePath": "core/common/src/main/java/alluxio/collections/IndexedSet.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/collections/IndexedSet.java b/core/common/src/main/java/alluxio/collections/IndexedSet.java\nindex 12251c3..35a4156 100644\n--- a/core/common/src/main/java/alluxio/collections/IndexedSet.java\n+++ b/core/common/src/main/java/alluxio/collections/IndexedSet.java\n@@ -165,7 +165,7 @@\n    */\n   @Override\n   public boolean add(T object) {\n-    Preconditions.checkNotNull(object);\n+    Preconditions.checkNotNull(object, \"object\");\n \n     // Locking this object protects against removing the exact object, but does not protect against\n     // removing a distinct, but equivalent object.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 168, "bugNodeStartChar": 5376, "bugNodeLength": 34, "fixLineNum": 168, "fixNodeStartChar": 5376, "fixNodeLength": 44, "sourceBeforeFix": "Preconditions.checkNotNull(object)", "sourceAfterFix": "Preconditions.checkNotNull(object,\"object\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "710fae2d6c9db4eec40aafbe618814ebe9e9aec5", "fixCommitParentSHA1": "1ec01527a3cc01a8ef3f35de391ad752667e9203", "bugFilePath": "core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java b/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java\nindex d68f1e8..68d07b0 100644\n--- a/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java\n+++ b/core/common/src/main/java/alluxio/heartbeat/HeartbeatScheduler.java\n@@ -56,7 +56,7 @@\n    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n-    Preconditions.checkNotNull(timer);\n+    Preconditions.checkNotNull(timer, \"timer\");\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 59, "bugNodeStartChar": 2215, "bugNodeLength": 33, "fixLineNum": 59, "fixNodeStartChar": 2215, "fixNodeLength": 42, "sourceBeforeFix": "Preconditions.checkNotNull(timer)", "sourceAfterFix": "Preconditions.checkNotNull(timer,\"timer\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "88bf7f435fd294dc60ea6bcc2a1ee19e9aada3d4", "fixCommitParentSHA1": "6e8d7e1df635ecd360ee407510b77b1d59ea0283", "bugFilePath": "core/server/src/main/java/alluxio/master/journal/CheckpointManager.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java b/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java\nindex 9004474..72df30b 100644\n--- a/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java\n+++ b/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java\n@@ -102,7 +102,7 @@\n       if (tempBackupCheckpointExists) {\n         // If mCheckpointPath also exists, step 2 must have implemented rename as copy + delete, and\n         // failed during the delete.\n-        UnderFileSystemUtils.deleteFileIfExists(mUfs, mCheckpointPath);\n+        UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 105, "bugNodeStartChar": 4694, "bugNodeLength": 62, "fixLineNum": 105, "fixNodeStartChar": 4694, "fixNodeLength": 56, "sourceBeforeFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "88bf7f435fd294dc60ea6bcc2a1ee19e9aada3d4", "fixCommitParentSHA1": "6e8d7e1df635ecd360ee407510b77b1d59ea0283", "bugFilePath": "core/server/src/main/java/alluxio/master/journal/CheckpointManager.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java b/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java\nindex 9004474..72df30b 100644\n--- a/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java\n+++ b/core/server/src/main/java/alluxio/master/journal/CheckpointManager.java\n@@ -102,7 +102,7 @@\n       if (tempBackupCheckpointExists) {\n         // If mCheckpointPath also exists, step 2 must have implemented rename as copy + delete, and\n         // failed during the delete.\n-        UnderFileSystemUtils.deleteFileIfExists(mUfs, mCheckpointPath);\n+        UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 105, "bugNodeStartChar": 4694, "bugNodeLength": 62, "fixLineNum": 105, "fixNodeStartChar": 4694, "fixNodeLength": 56, "sourceBeforeFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ede44c3776589eb86d3049ecd349909ab934a2ea", "fixCommitParentSHA1": "c06766905499bdda55d457f231f57254bfbec5af", "bugFilePath": "core/server/src/main/java/alluxio/master/journal/JournalWriter.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/journal/JournalWriter.java b/core/server/src/main/java/alluxio/master/journal/JournalWriter.java\nindex a31b50b..628bc18 100644\n--- a/core/server/src/main/java/alluxio/master/journal/JournalWriter.java\n+++ b/core/server/src/main/java/alluxio/master/journal/JournalWriter.java\n@@ -129,7 +129,7 @@\n       mNextEntrySequenceNumber = latestSequenceNumber + 1;\n       LOG.info(\"Latest journal sequence number: {} Next journal sequence number: {}\",\n           latestSequenceNumber, mNextEntrySequenceNumber);\n-      UnderFileSystemUtils.deleteIfExists(mUfs, mTempCheckpointPath);\n+      UnderFileSystemUtils.deleteFileIfExists(mUfs, mTempCheckpointPath);\n       mCheckpointOutputStream =\n           new CheckpointOutputStream(new DataOutputStream(mUfs.create(mTempCheckpointPath)));\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 132, "bugNodeStartChar": 5440, "bugNodeLength": 62, "fixLineNum": 132, "fixNodeStartChar": 5440, "fixNodeLength": 66, "sourceBeforeFix": "UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ede44c3776589eb86d3049ecd349909ab934a2ea", "fixCommitParentSHA1": "c06766905499bdda55d457f231f57254bfbec5af", "bugFilePath": "core/server/src/main/java/alluxio/master/journal/JournalWriter.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/journal/JournalWriter.java b/core/server/src/main/java/alluxio/master/journal/JournalWriter.java\nindex a31b50b..628bc18 100644\n--- a/core/server/src/main/java/alluxio/master/journal/JournalWriter.java\n+++ b/core/server/src/main/java/alluxio/master/journal/JournalWriter.java\n@@ -129,7 +129,7 @@\n       mNextEntrySequenceNumber = latestSequenceNumber + 1;\n       LOG.info(\"Latest journal sequence number: {} Next journal sequence number: {}\",\n           latestSequenceNumber, mNextEntrySequenceNumber);\n-      UnderFileSystemUtils.deleteIfExists(mUfs, mTempCheckpointPath);\n+      UnderFileSystemUtils.deleteFileIfExists(mUfs, mTempCheckpointPath);\n       mCheckpointOutputStream =\n           new CheckpointOutputStream(new DataOutputStream(mUfs.create(mTempCheckpointPath)));\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 132, "bugNodeStartChar": 5440, "bugNodeLength": 62, "fixLineNum": 132, "fixNodeStartChar": 5440, "fixNodeLength": 66, "sourceBeforeFix": "UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2f61cce7754b09bc033105e4129acc6bac1de1e9", "fixCommitParentSHA1": "ee151e1ecacd9e45c1a7bce091533197b8ac5d80", "bugFilePath": "core/server/src/main/java/alluxio/worker/file/FileSystemWorkerClientServiceHandler.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/worker/file/FileSystemWorkerClientServiceHandler.java b/core/server/src/main/java/alluxio/worker/file/FileSystemWorkerClientServiceHandler.java\nindex 5d0c777..f69ed1d 100644\n--- a/core/server/src/main/java/alluxio/worker/file/FileSystemWorkerClientServiceHandler.java\n+++ b/core/server/src/main/java/alluxio/worker/file/FileSystemWorkerClientServiceHandler.java\n@@ -49,7 +49,7 @@\n    * @param worker the file system worker which will handle most of the requests\n    */\n   public FileSystemWorkerClientServiceHandler(FileSystemWorker worker) {\n-    mWorker = Preconditions.checkNotNull(worker);\n+    mWorker = Preconditions.checkNotNull(worker, \"worker\");\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 52, "bugNodeStartChar": 1911, "bugNodeLength": 34, "fixLineNum": 52, "fixNodeStartChar": 1911, "fixNodeLength": 44, "sourceBeforeFix": "Preconditions.checkNotNull(worker)", "sourceAfterFix": "Preconditions.checkNotNull(worker,\"worker\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fc1049ce93555e3e73c42a9759cc61b347a6c16a", "fixCommitParentSHA1": "605686cd1571abf3e1e6e6f528e555ad1c0fb3f9", "bugFilePath": "core/server/src/main/java/alluxio/worker/netty/DataServerHandler.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/worker/netty/DataServerHandler.java b/core/server/src/main/java/alluxio/worker/netty/DataServerHandler.java\nindex 2f1dcac..31b5316 100644\n--- a/core/server/src/main/java/alluxio/worker/netty/DataServerHandler.java\n+++ b/core/server/src/main/java/alluxio/worker/netty/DataServerHandler.java\n@@ -55,7 +55,7 @@\n    * @param worker the Alluxio worker handle\n    */\n   public DataServerHandler(final AlluxioWorkerService worker) {\n-    Preconditions.checkNotNull(worker);\n+    Preconditions.checkNotNull(worker, \"worker\");\n     mBlockHandler = new BlockDataServerHandler(worker.getBlockWorker());\n     mUnderFileSystemHandler = new UnderFileSystemDataServerHandler(worker.getFileSystemWorker());\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 58, "bugNodeStartChar": 2186, "bugNodeLength": 34, "fixLineNum": 58, "fixNodeStartChar": 2186, "fixNodeLength": 44, "sourceBeforeFix": "Preconditions.checkNotNull(worker)", "sourceAfterFix": "Preconditions.checkNotNull(worker,\"worker\")"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2", "fixCommitParentSHA1": "107f644b7dc87a491e0b82c5f79f021f5fc1740e", "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex 4d8e986..ae6acf8 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -151,7 +151,7 @@\n       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n-  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 10000),\n+  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),\n@@ -184,7 +184,7 @@\n   WORKER_NETWORK_NETTY_WORKER_THREADS(Name.WORKER_NETWORK_NETTY_WORKER_THREADS, 0),\n   WORKER_PRINCIPAL(Name.WORKER_PRINCIPAL, null),\n   WORKER_RPC_PORT(Name.WORKER_RPC_PORT, 29998),\n-  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 10000),\n+  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 60000),\n   WORKER_TIERED_STORE_BLOCK_LOCKS(Name.WORKER_TIERED_STORE_BLOCK_LOCKS, 1000),\n   WORKER_TIERED_STORE_LEVEL0_ALIAS(Name.WORKER_TIERED_STORE_LEVEL0_ALIAS, \"MEM\"),\n   WORKER_TIERED_STORE_LEVEL0_DIRS_PATH(Name.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH, \"/mnt/ramdisk\"),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 154, "bugNodeStartChar": 8386, "bugNodeLength": 80, "fixLineNum": 154, "fixNodeStartChar": 8386, "fixNodeLength": 80, "sourceBeforeFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)", "sourceAfterFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2", "fixCommitParentSHA1": "107f644b7dc87a491e0b82c5f79f021f5fc1740e", "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex 4d8e986..ae6acf8 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -151,7 +151,7 @@\n       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n-  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 10000),\n+  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),\n@@ -184,7 +184,7 @@\n   WORKER_NETWORK_NETTY_WORKER_THREADS(Name.WORKER_NETWORK_NETTY_WORKER_THREADS, 0),\n   WORKER_PRINCIPAL(Name.WORKER_PRINCIPAL, null),\n   WORKER_RPC_PORT(Name.WORKER_RPC_PORT, 29998),\n-  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 10000),\n+  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 60000),\n   WORKER_TIERED_STORE_BLOCK_LOCKS(Name.WORKER_TIERED_STORE_BLOCK_LOCKS, 1000),\n   WORKER_TIERED_STORE_LEVEL0_ALIAS(Name.WORKER_TIERED_STORE_LEVEL0_ALIAS, \"MEM\"),\n   WORKER_TIERED_STORE_LEVEL0_DIRS_PATH(Name.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH, \"/mnt/ramdisk\"),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 187, "bugNodeStartChar": 10869, "bugNodeLength": 64, "fixLineNum": 187, "fixNodeStartChar": 10869, "fixNodeLength": 64, "sourceBeforeFix": "WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)", "sourceAfterFix": "WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a04df35fd9c932531fce2ebd85de52812a038b13", "fixCommitParentSHA1": "a641e82bef611b82380729f35ccd86dafeadf1da", "bugFilePath": "core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java b/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java\nindex 7062e2a..1cdfda1 100644\n--- a/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java\n+++ b/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java\n@@ -258,7 +258,7 @@\n       client.getOutputProtocol().getTransport().close();\n       throw new IOException(e);\n     } finally {\n-      BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress, client);\n+      BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress, client);\n     }\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 261, "bugNodeStartChar": 9311, "bugNodeLength": 69, "fixLineNum": 261, "fixNodeStartChar": 9311, "fixNodeLength": 78, "sourceBeforeFix": "BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)", "sourceAfterFix": "BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a04df35fd9c932531fce2ebd85de52812a038b13", "fixCommitParentSHA1": "a641e82bef611b82380729f35ccd86dafeadf1da", "bugFilePath": "core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java b/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java\nindex 7062e2a..1cdfda1 100644\n--- a/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java\n+++ b/core/client/src/main/java/alluxio/client/block/RetryHandlingBlockWorkerClient.java\n@@ -258,7 +258,7 @@\n       client.getOutputProtocol().getTransport().close();\n       throw new IOException(e);\n     } finally {\n-      BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress, client);\n+      BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress, client);\n     }\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 261, "bugNodeStartChar": 9311, "bugNodeLength": 69, "fixLineNum": 261, "fixNodeStartChar": 9311, "fixNodeLength": 78, "sourceBeforeFix": "BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)", "sourceAfterFix": "BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "5db9d6a3a54f5f3850a9dd2bedebdce45eca082a", "fixCommitParentSHA1": "a065765ab8c9695dd70e7f016b6b4d5f361e7d21", "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex dc3435c..b69659c 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -241,7 +241,7 @@\n   USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX(Name.USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX, 1024),\n   USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS(\n       Name.USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS, 300 * Constants.SECOND_MS),\n-  USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED, false),\n+  USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED, true),\n   USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES,\n       \"8MB\"),\n   USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES,\n", "projectName": "Alluxio.alluxio", "bugLineNum": 244, "bugNodeStartChar": 14873, "bugNodeLength": 68, "fixLineNum": 244, "fixNodeStartChar": 14873, "fixNodeLength": 67, "sourceBeforeFix": "USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)", "sourceAfterFix": "USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0d28e2c39fb2fb0b3f12716ae5cd7caef3b12b06", "fixCommitParentSHA1": "ca89efe205354f0771700c4449eafd5af2494020", "bugFilePath": "core/server/src/main/java/alluxio/master/file/FileSystemMaster.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\nindex 3e6c8a8..79939ab 100644\n--- a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n+++ b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n@@ -2294,14 +2294,14 @@\n         for (Inode<?> inode : inodeChildren) {\n           // the path to inode for getPath should already be locked.\n           tempInodePath.setDescendant(inode, mInodeTree.getPath(inode));\n-          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, true, opTimeMs,\n+          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, false, opTimeMs,\n               options);\n           journalPersistedInodes(persistedInodes);\n           journalSetAttribute(tempInodePath, opTimeMs, options);\n         }\n       }\n     }\n-    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, true, opTimeMs, options);\n+    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, false, opTimeMs, options);\n     journalPersistedInodes(persistedInodes);\n     return journalSetAttribute(inodePath, opTimeMs, options);\n   }\n@@ -2529,7 +2529,7 @@\n     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n-      setAttributeInternal(inodePath, false, entry.getOpTimeMs(), options);\n+      setAttributeInternal(inodePath, true, entry.getOpTimeMs(), options);\n       // Intentionally not journaling the persisted inodes from setAttributeInternal\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 2297, "bugNodeStartChar": 100890, "bugNodeLength": 74, "fixLineNum": 2297, "fixNodeStartChar": 100890, "fixNodeLength": 75, "sourceBeforeFix": "setAttributeInternal(tempInodePath,true,opTimeMs,options)", "sourceAfterFix": "setAttributeInternal(tempInodePath,false,opTimeMs,options)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0d28e2c39fb2fb0b3f12716ae5cd7caef3b12b06", "fixCommitParentSHA1": "ca89efe205354f0771700c4449eafd5af2494020", "bugFilePath": "core/server/src/main/java/alluxio/master/file/FileSystemMaster.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\nindex 3e6c8a8..79939ab 100644\n--- a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n+++ b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n@@ -2294,14 +2294,14 @@\n         for (Inode<?> inode : inodeChildren) {\n           // the path to inode for getPath should already be locked.\n           tempInodePath.setDescendant(inode, mInodeTree.getPath(inode));\n-          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, true, opTimeMs,\n+          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, false, opTimeMs,\n               options);\n           journalPersistedInodes(persistedInodes);\n           journalSetAttribute(tempInodePath, opTimeMs, options);\n         }\n       }\n     }\n-    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, true, opTimeMs, options);\n+    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, false, opTimeMs, options);\n     journalPersistedInodes(persistedInodes);\n     return journalSetAttribute(inodePath, opTimeMs, options);\n   }\n@@ -2529,7 +2529,7 @@\n     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n-      setAttributeInternal(inodePath, false, entry.getOpTimeMs(), options);\n+      setAttributeInternal(inodePath, true, entry.getOpTimeMs(), options);\n       // Intentionally not journaling the persisted inodes from setAttributeInternal\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 2304, "bugNodeStartChar": 101143, "bugNodeLength": 56, "fixLineNum": 2304, "fixNodeStartChar": 101143, "fixNodeLength": 57, "sourceBeforeFix": "setAttributeInternal(inodePath,true,opTimeMs,options)", "sourceAfterFix": "setAttributeInternal(inodePath,false,opTimeMs,options)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "0d28e2c39fb2fb0b3f12716ae5cd7caef3b12b06", "fixCommitParentSHA1": "ca89efe205354f0771700c4449eafd5af2494020", "bugFilePath": "core/server/src/main/java/alluxio/master/file/FileSystemMaster.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\nindex 3e6c8a8..79939ab 100644\n--- a/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n+++ b/core/server/src/main/java/alluxio/master/file/FileSystemMaster.java\n@@ -2294,14 +2294,14 @@\n         for (Inode<?> inode : inodeChildren) {\n           // the path to inode for getPath should already be locked.\n           tempInodePath.setDescendant(inode, mInodeTree.getPath(inode));\n-          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, true, opTimeMs,\n+          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, false, opTimeMs,\n               options);\n           journalPersistedInodes(persistedInodes);\n           journalSetAttribute(tempInodePath, opTimeMs, options);\n         }\n       }\n     }\n-    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, true, opTimeMs, options);\n+    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, false, opTimeMs, options);\n     journalPersistedInodes(persistedInodes);\n     return journalSetAttribute(inodePath, opTimeMs, options);\n   }\n@@ -2529,7 +2529,7 @@\n     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n-      setAttributeInternal(inodePath, false, entry.getOpTimeMs(), options);\n+      setAttributeInternal(inodePath, true, entry.getOpTimeMs(), options);\n       // Intentionally not journaling the persisted inodes from setAttributeInternal\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 2532, "bugNodeStartChar": 110700, "bugNodeLength": 68, "fixLineNum": 2532, "fixNodeStartChar": 110700, "fixNodeLength": 67, "sourceBeforeFix": "setAttributeInternal(inodePath,false,entry.getOpTimeMs(),options)", "sourceAfterFix": "setAttributeInternal(inodePath,true,entry.getOpTimeMs(),options)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3accf765e68d502ebcd7771252cf92d806a8f302", "fixCommitParentSHA1": "1fb246d7e248037de64f764fa3209e86fa0d57e9", "bugFilePath": "core/common/src/test/java/alluxio/resource/DynamicResourcePoolTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/resource/DynamicResourcePoolTest.java b/core/common/src/test/java/alluxio/resource/DynamicResourcePoolTest.java\nindex da8a3f1..9522e96 100644\n--- a/core/common/src/test/java/alluxio/resource/DynamicResourcePoolTest.java\n+++ b/core/common/src/test/java/alluxio/resource/DynamicResourcePoolTest.java\n@@ -55,7 +55,7 @@\n \n     @Override\n     protected boolean shouldGc(ResourceInternal<Resource> resourceInternal) {\n-      return System.currentTimeMillis() - resourceInternal.getLastAccessTimeMs()\n+      return mClock.millis() - resourceInternal.getLastAccessTimeMs()\n           >= (long) mGcThresholdInSecs * (long) Constants.SECOND_MS;\n     }\n \n@@ -201,7 +201,7 @@\n     resourceList.add(pool.acquire());\n \n     pool.release(resourceList.get(0));\n-    manualClock.addTimeMs(1020);\n+    manualClock.addTimeMs(1001);\n \n     // Sleep 1 second to make sure the GC has run.\n     Thread.sleep(1000);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 204, "bugNodeStartChar": 5946, "bugNodeLength": 27, "fixLineNum": 204, "fixNodeStartChar": 5946, "fixNodeLength": 27, "sourceBeforeFix": "manualClock.addTimeMs(1020)", "sourceAfterFix": "manualClock.addTimeMs(1001)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "08d1662df0a9d141984b6cabab954a989102d46d", "fixCommitParentSHA1": "e5dd75745d42ba878ff00339bcd0054df008d40d", "bugFilePath": "core/common/src/test/java/alluxio/AuthenticatedUserRule.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/AuthenticatedUserRule.java b/core/common/src/test/java/alluxio/AuthenticatedUserRule.java\nindex e7e036b..473c4cd 100644\n--- a/core/common/src/test/java/alluxio/AuthenticatedUserRule.java\n+++ b/core/common/src/test/java/alluxio/AuthenticatedUserRule.java\n@@ -19,11 +19,16 @@\n import org.junit.runners.model.Statement;\n \n /**\n- * A rule for login a Alluxio user during a test suite.\n+ * A rule for login an Alluxio user during a test suite. It sets {@link AuthenticatedClientUser}\n+ * and {@link PropertyKey#SECURITY_LOGIN_USERNAME} to the specified user name during the lifetime\n+ * of this rule. Note: {@link AuthenticatedClientUser} only takes effect within the caller thread.\n  */\n-public class AuthenticatedUserRule implements TestRule {\n+public final class AuthenticatedUserRule implements TestRule {\n   private final String mUser;\n \n+  /**\n+   * @param user the user name to set as authenticated user\n+   */\n   public AuthenticatedUserRule(String user) {\n     mUser = user;\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 21, "bugNodeStartChar": 754, "bugNodeLength": 1201, "fixLineNum": 21, "fixNodeStartChar": 754, "fixNodeLength": 1207, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "b72b1ca4847db6559ca16fc9c7cab22e7e6242f2", "fixCommitParentSHA1": "0c8abb044b4c56dc5cdf391cece96a11a34f4f62", "bugFilePath": "examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java", "fixPatch": "diff --git a/examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java b/examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java\nindex db32d70..24572f2 100644\n--- a/examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java\n+++ b/examples/src/main/java/alluxio/cli/AlluxioFrameworkIntegrationTest.java\n@@ -127,7 +127,7 @@\n   private void startAlluxioFramework(Map<String, String> extraEnv) {\n     String startScript = PathUtils.concatPath(Configuration.get(PropertyKey.HOME),\n         \"integration\", \"bin\", \"alluxio-mesos.sh\");\n-    ProcessBuilder pb = new ProcessBuilder(startScript, mMesosAddress, \"-w\");\n+    ProcessBuilder pb = new ProcessBuilder(startScript, mMesosAddress);\n     Map<String, String> env = pb.environment();\n     env.putAll(extraEnv);\n     try {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 130, "bugNodeStartChar": 5171, "bugNodeLength": 52, "fixLineNum": 130, "fixNodeStartChar": 5171, "fixNodeLength": 46, "sourceBeforeFix": "new ProcessBuilder(startScript,mMesosAddress,\"-w\")", "sourceAfterFix": "new ProcessBuilder(startScript,mMesosAddress)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "01760ff324bfe4218c34d648c53af46d782f14c1", "fixCommitParentSHA1": "d3439a8c28d1b8dc89bb6be81273ee673e1fb39a", "bugFilePath": "core/server/src/main/java/alluxio/RpcUtils.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/RpcUtils.java b/core/server/src/main/java/alluxio/RpcUtils.java\nindex 5476d29..d91b92f 100644\n--- a/core/server/src/main/java/alluxio/RpcUtils.java\n+++ b/core/server/src/main/java/alluxio/RpcUtils.java\n@@ -64,7 +64,7 @@\n       LOG.debug(\"Internal Alluxio error when running rpc\", e);\n       throw e.toThrift();\n     } catch (IOException e) {\n-      LOG.error(\"I/O error when running rpc\", e);\n+      LOG.warn(\"I/O error when running rpc\", e);\n       throw new ThriftIOException(e.getMessage());\n     } catch (Exception e) {\n       LOG.error(\"Unexpected error running rpc\", e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 67, "bugNodeStartChar": 2407, "bugNodeLength": 42, "fixLineNum": 67, "fixNodeStartChar": 2407, "fixNodeLength": 41, "sourceBeforeFix": "LOG.error(\"I/O error when running rpc\",e)", "sourceAfterFix": "LOG.warn(\"I/O error when running rpc\",e)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01760ff324bfe4218c34d648c53af46d782f14c1", "fixCommitParentSHA1": "d3439a8c28d1b8dc89bb6be81273ee673e1fb39a", "bugFilePath": "core/server/src/main/java/alluxio/RpcUtils.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/RpcUtils.java b/core/server/src/main/java/alluxio/RpcUtils.java\nindex 5476d29..d91b92f 100644\n--- a/core/server/src/main/java/alluxio/RpcUtils.java\n+++ b/core/server/src/main/java/alluxio/RpcUtils.java\n@@ -64,7 +64,7 @@\n       LOG.debug(\"Internal Alluxio error when running rpc\", e);\n       throw e.toThrift();\n     } catch (IOException e) {\n-      LOG.error(\"I/O error when running rpc\", e);\n+      LOG.warn(\"I/O error when running rpc\", e);\n       throw new ThriftIOException(e.getMessage());\n     } catch (Exception e) {\n       LOG.error(\"Unexpected error running rpc\", e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 67, "bugNodeStartChar": 2407, "bugNodeLength": 42, "fixLineNum": 67, "fixNodeStartChar": 2407, "fixNodeLength": 41, "sourceBeforeFix": "LOG.error(\"I/O error when running rpc\",e)", "sourceAfterFix": "LOG.warn(\"I/O error when running rpc\",e)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "a81d3c2dc6a8ab3c4990b51c83874d6d095aeb38", "fixCommitParentSHA1": "7cade9254a26296066c645370fced1212e47ef2f", "bugFilePath": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/metrics/MetricsSystem.java b/core/common/src/main/java/alluxio/metrics/MetricsSystem.java\nindex 74b8671..f105b34 100644\n--- a/core/common/src/main/java/alluxio/metrics/MetricsSystem.java\n+++ b/core/common/src/main/java/alluxio/metrics/MetricsSystem.java\n@@ -185,7 +185,7 @@\n   public static void checkMinimalPollingPeriod(TimeUnit pollUnit, int pollPeriod)\n       throws IllegalArgumentException {\n     int period = (int) MINIMAL_POLL_UNIT.convert(pollPeriod, pollUnit);\n-    Preconditions.checkArgument(period < MINIMAL_POLL_PERIOD,\n+    Preconditions.checkArgument(period >= MINIMAL_POLL_PERIOD,\n         \"Polling period %d %d is below than minimal polling period\", pollPeriod, pollUnit);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 188, "bugNodeStartChar": 6145, "bugNodeLength": 28, "fixLineNum": 188, "fixNodeStartChar": 6145, "fixNodeLength": 29, "sourceBeforeFix": "period < MINIMAL_POLL_PERIOD", "sourceAfterFix": "period >= MINIMAL_POLL_PERIOD"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c1dafc1118b225ec818e9ca305edbdbc45e6b207", "fixCommitParentSHA1": "80474f6ac5f1df9dabc9606e2983eac6efe78b12", "bugFilePath": "tests/src/test/java/alluxio/web/WebServerIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java b/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java\nindex 9d7faa4..33cb42c 100644\n--- a/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java\n@@ -51,7 +51,7 @@\n     if (serviceType == ServiceType.MASTER_WEB) {\n       port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort();\n     } else {\n-      port = mLocalAlluxioClusterResource.get().getWorkerAddress().getWebPort();\n+      port = mLocalAlluxioClusterResource.get().getWorker().getWebLocalPort();\n     }\n     InetSocketAddress webAddr =\n         new InetSocketAddress(NetworkAddressUtils.getConnectHost(serviceType), port);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 54, "bugNodeStartChar": 1958, "bugNodeLength": 53, "fixLineNum": 54, "fixNodeStartChar": 1958, "fixNodeLength": 46, "sourceBeforeFix": "mLocalAlluxioClusterResource.get().getWorkerAddress()", "sourceAfterFix": "mLocalAlluxioClusterResource.get().getWorker()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c1dafc1118b225ec818e9ca305edbdbc45e6b207", "fixCommitParentSHA1": "80474f6ac5f1df9dabc9606e2983eac6efe78b12", "bugFilePath": "tests/src/test/java/alluxio/web/WebServerIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java b/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java\nindex 9d7faa4..33cb42c 100644\n--- a/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/web/WebServerIntegrationTest.java\n@@ -51,7 +51,7 @@\n     if (serviceType == ServiceType.MASTER_WEB) {\n       port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort();\n     } else {\n-      port = mLocalAlluxioClusterResource.get().getWorkerAddress().getWebPort();\n+      port = mLocalAlluxioClusterResource.get().getWorker().getWebLocalPort();\n     }\n     InetSocketAddress webAddr =\n         new InetSocketAddress(NetworkAddressUtils.getConnectHost(serviceType), port);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 54, "bugNodeStartChar": 1958, "bugNodeLength": 53, "fixLineNum": 54, "fixNodeStartChar": 1958, "fixNodeLength": 46, "sourceBeforeFix": "mLocalAlluxioClusterResource.get().getWorkerAddress()", "sourceAfterFix": "mLocalAlluxioClusterResource.get().getWorker()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a804404a5f3cc8f3975dd0cca70b19b90455696b", "fixCommitParentSHA1": "881e4a2926f408d3580b8d76e221655411e85734", "bugFilePath": "underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java", "fixPatch": "diff --git a/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java b/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\nindex 4052437..9aca99d 100644\n--- a/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\n+++ b/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\n@@ -124,7 +124,7 @@\n     DownloadInstructions downloadInstructions  = new DownloadInstructions();\n     final long blockSize = getBlockSize();\n     final long endPos = mPos + blockSize - (mPos % blockSize);\n-    downloadInstructions.setRange(new SwiftRange(mPos, endPos));\n+    downloadInstructions.setRange(new MidPartLongRange(mPos, endPos));\n     mStream = storedObject.downloadObjectAsInputStream(downloadInstructions);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 127, "bugNodeStartChar": 3658, "bugNodeLength": 28, "fixLineNum": 127, "fixNodeStartChar": 3658, "fixNodeLength": 34, "sourceBeforeFix": "new SwiftRange(mPos,endPos)", "sourceAfterFix": "new MidPartLongRange(mPos,endPos)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9d29b3be6a155045aa07ed40d01c9edbaef19b3d", "fixCommitParentSHA1": "91cb0158234c2102443e8e47528583c803ff32bf", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex 5b5685a..9c69a62 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -211,7 +211,7 @@\n       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n-        String[] names = bLocations[0].getNames();\n+        String[] names = bLocations[0].getHosts();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 214, "bugNodeStartChar": 7746, "bugNodeLength": 24, "fixLineNum": 214, "fixNodeStartChar": 7746, "fixNodeLength": 24, "sourceBeforeFix": "bLocations[0].getNames()", "sourceAfterFix": "bLocations[0].getHosts()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9d29b3be6a155045aa07ed40d01c9edbaef19b3d", "fixCommitParentSHA1": "91cb0158234c2102443e8e47528583c803ff32bf", "bugFilePath": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "fixPatch": "diff --git a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\nindex 5b5685a..9c69a62 100644\n--- a/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n+++ b/underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java\n@@ -211,7 +211,7 @@\n       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n-        String[] names = bLocations[0].getNames();\n+        String[] names = bLocations[0].getHosts();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 214, "bugNodeStartChar": 7746, "bugNodeLength": 24, "fixLineNum": 214, "fixNodeStartChar": 7746, "fixNodeLength": 24, "sourceBeforeFix": "bLocations[0].getNames()", "sourceAfterFix": "bLocations[0].getHosts()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4943b845e40f8943ab906f057502cfe49902d045", "fixCommitParentSHA1": "0030c294388afc591459d250d875b9f92f5bc15d", "bugFilePath": "core/common/src/test/java/alluxio/metrics/MetricsConfigTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/metrics/MetricsConfigTest.java b/core/common/src/test/java/alluxio/metrics/MetricsConfigTest.java\nindex eb9b663..293cabf 100644\n--- a/core/common/src/test/java/alluxio/metrics/MetricsConfigTest.java\n+++ b/core/common/src/test/java/alluxio/metrics/MetricsConfigTest.java\n@@ -79,7 +79,7 @@\n     MetricsConfig config = new MetricsConfig(mMetricsProps);\n \n     Map<String, Properties> propertyCategories = config.getPropertyCategories();\n-    Assert.assertEquals(2, propertyCategories.size());\n+    Assert.assertEquals(3, propertyCategories.size());\n \n     Properties masterProp = config.getInstanceProperties(\"master\");\n     Map<String, Properties> sourceProps =\n", "projectName": "Alluxio.alluxio", "bugLineNum": 82, "bugNodeStartChar": 3387, "bugNodeLength": 49, "fixLineNum": 82, "fixNodeStartChar": 3387, "fixNodeLength": 49, "sourceBeforeFix": "Assert.assertEquals(2,propertyCategories.size())", "sourceAfterFix": "Assert.assertEquals(3,propertyCategories.size())"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "09b35af981f85d357790a6e6a15ed8cc427aa379", "fixCommitParentSHA1": "be658faac8674341ff2e4cbbc363b6ff680fa4cc", "bugFilePath": "integration/yarn/src/main/java/alluxio/yarn/ContainerAllocator.java", "fixPatch": "diff --git a/integration/yarn/src/main/java/alluxio/yarn/ContainerAllocator.java b/integration/yarn/src/main/java/alluxio/yarn/ContainerAllocator.java\nindex 7b45f96..e4aa39f 100644\n--- a/integration/yarn/src/main/java/alluxio/yarn/ContainerAllocator.java\n+++ b/integration/yarn/src/main/java/alluxio/yarn/ContainerAllocator.java\n@@ -145,7 +145,7 @@\n     Priority priority;\n     if (mPreferredHost != null) {\n       hosts = new String[]{mPreferredHost};\n-      relaxLocality = !mPreferredHost.equals(\"localhost\");\n+      relaxLocality = mPreferredHost.equals(\"localhost\");\n       priority = Priority.newInstance(100);\n     } else {\n       hosts = getPotentialWorkerHosts();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 148, "bugNodeStartChar": 6449, "bugNodeLength": 35, "fixLineNum": 148, "fixNodeStartChar": 6449, "fixNodeLength": 34, "sourceBeforeFix": "!mPreferredHost.equals(\"localhost\")", "sourceAfterFix": "mPreferredHost.equals(\"localhost\")"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "09b35af981f85d357790a6e6a15ed8cc427aa379", "fixCommitParentSHA1": "be658faac8674341ff2e4cbbc363b6ff680fa4cc", "bugFilePath": "integration/yarn/src/test/java/alluxio/yarn/ContainerAllocatorTest.java", "fixPatch": "diff --git a/integration/yarn/src/test/java/alluxio/yarn/ContainerAllocatorTest.java b/integration/yarn/src/test/java/alluxio/yarn/ContainerAllocatorTest.java\nindex 33214f3..38e78c0 100644\n--- a/integration/yarn/src/test/java/alluxio/yarn/ContainerAllocatorTest.java\n+++ b/integration/yarn/src/test/java/alluxio/yarn/ContainerAllocatorTest.java\n@@ -115,7 +115,7 @@\n             @Override\n             public boolean matches(Object o) {\n               ContainerRequest request = (ContainerRequest) o;\n-              if (request.getRelaxLocality() == false\n+              if (request.getRelaxLocality() == true\n                   && request.getNodes().size() == 1\n                   && request.getNodes().get(0).equals(\"localhost\")) {\n                 return true;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 118, "bugNodeStartChar": 4363, "bugNodeLength": 35, "fixLineNum": 118, "fixNodeStartChar": 4363, "fixNodeLength": 34, "sourceBeforeFix": "request.getRelaxLocality() == false", "sourceAfterFix": "request.getRelaxLocality() == true"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4c90dbd67d581b2c7f105c09e47aac9667bbdf35", "fixCommitParentSHA1": "fa43bc9037e2de54f355f5fa0202be32567e50eb", "bugFilePath": "core/client/src/main/java/alluxio/client/file/BaseFileSystem.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/BaseFileSystem.java b/core/client/src/main/java/alluxio/client/file/BaseFileSystem.java\nindex d1e4c62..a911fcb 100644\n--- a/core/client/src/main/java/alluxio/client/file/BaseFileSystem.java\n+++ b/core/client/src/main/java/alluxio/client/file/BaseFileSystem.java\n@@ -263,7 +263,7 @@\n       throw new FileNotFoundException(\n           ExceptionMessage.CANNOT_READ_DIRECTORY.getMessage(status.getName()));\n     }\n-    return FileInStream.create(status, options.toInStreamOptions(), mContext);\n+    return FileInStream.create(status, options.toInStreamOptions(), mFileSystemContext);\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 266, "bugNodeStartChar": 9604, "bugNodeLength": 66, "fixLineNum": 266, "fixNodeStartChar": 9604, "fixNodeLength": 76, "sourceBeforeFix": "FileInStream.create(status,options.toInStreamOptions(),mContext)", "sourceAfterFix": "FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "76074b214612b7efb933e5bfed9d2a9e8e1bcbd7", "fixCommitParentSHA1": "9c7b691d71b09d23db015913856167c9fb8c580a", "bugFilePath": "core/server/src/main/java/alluxio/worker/AlluxioWorker.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/worker/AlluxioWorker.java b/core/server/src/main/java/alluxio/worker/AlluxioWorker.java\nindex b87660f..894bcdf 100644\n--- a/core/server/src/main/java/alluxio/worker/AlluxioWorker.java\n+++ b/core/server/src/main/java/alluxio/worker/AlluxioWorker.java\n@@ -35,7 +35,7 @@\n   public static void main(String[] args) {\n     if (args.length != 0) {\n       LOG.info(\"java -cp {} {}\", RuntimeConstants.ALLUXIO_JAR,\n-          AlluxioWorkerService.class.getCanonicalName());\n+          AlluxioWorker.class.getCanonicalName());\n       System.exit(-1);\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1244, "bugNodeLength": 26, "fixLineNum": 38, "fixNodeStartChar": 1244, "fixNodeLength": 19, "sourceBeforeFix": "AlluxioWorkerService.class", "sourceAfterFix": "AlluxioWorker.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1249, "bugNodeLength": 23, "fixLineNum": 38, "fixNodeStartChar": 1249, "fixNodeLength": 36, "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 113, "bugNodeStartChar": 4313, "bugNodeLength": 80, "fixLineNum": 113, "fixNodeStartChar": 4313, "fixNodeLength": 114, "sourceBeforeFix": "BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); ", "sourceAfterFix": "RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 117, "bugNodeStartChar": 4630, "bugNodeLength": 23, "fixLineNum": 117, "fixNodeStartChar": 4630, "fixNodeLength": 36, "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 178, "bugNodeStartChar": 7456, "bugNodeLength": 80, "fixLineNum": 178, "fixNodeStartChar": 7456, "fixNodeLength": 114, "sourceBeforeFix": "BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); ", "sourceAfterFix": "RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 182, "bugNodeStartChar": 7773, "bugNodeLength": 23, "fixLineNum": 182, "fixNodeStartChar": 7773, "fixNodeLength": 36, "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 196, "bugNodeStartChar": 8327, "bugNodeLength": 80, "fixLineNum": 196, "fixNodeStartChar": 8327, "fixNodeLength": 114, "sourceBeforeFix": "BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); ", "sourceAfterFix": "RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "fixCommitParentSHA1": "6df8fb1b891601f1374e599a395d5ad632fcfbe7", "bugFilePath": "core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\nindex 9ede102..f8ceea1 100644\n--- a/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/BlockStoreContextTest.java\n@@ -35,8 +35,8 @@\n  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n-    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n+@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n+    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n \n   /**\n@@ -110,11 +110,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     // Use mocks for the block worker client to prevent it from trying to invoke the session\n@@ -175,11 +176,12 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertTrue(BlockStoreContext.INSTANCE.hasLocalWorker());\n@@ -193,12 +195,13 @@\n     // Use mocks for the master client to make sure the pool of local block worker clients is\n     // initialized properly.\n     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n-    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n+    RetryHandlingBlockMasterClient masterClientMock =\n+        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"foo\")));\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"bar\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n-    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n+    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);\n \n     Assert.assertFalse(BlockStoreContext.INSTANCE.hasLocalWorker());\n", "projectName": "Alluxio.alluxio", "bugLineNum": 201, "bugNodeStartChar": 8720, "bugNodeLength": 23, "fixLineNum": 201, "fixNodeStartChar": 8720, "fixNodeLength": 36, "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ec6882d1cdfcdd73806895a5546182a4af56d79c", "fixCommitParentSHA1": "ef708a648af7d61a272ab8e680ecc46d3b5c2d7f", "bugFilePath": "core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java b/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java\nindex 763b067..7bdd590 100644\n--- a/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java\n+++ b/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java\n@@ -137,7 +137,7 @@\n   }\n \n   @Override\n-  public <T> T[] toArray(T[] a) {\n+  public <E> E[] toArray(E[] a) {\n     return mMap.keySet().toArray(a);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 3926, "bugNodeLength": 1, "fixLineNum": 140, "fixNodeStartChar": 3926, "fixNodeLength": 1, "sourceBeforeFix": "T", "sourceAfterFix": "E"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8ee692df2f39df705cbffaedcd30a088fd46d134", "fixCommitParentSHA1": "c621b2d8e522e6ebd02d091a39036aff8cbdec02", "bugFilePath": "core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java b/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java\nindex 763b067..7bdd590 100644\n--- a/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java\n+++ b/core/common/src/main/java/alluxio/collections/ConcurrentHashSet.java\n@@ -137,7 +137,7 @@\n   }\n \n   @Override\n-  public <T> T[] toArray(T[] a) {\n+  public <E> E[] toArray(E[] a) {\n     return mMap.keySet().toArray(a);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 3926, "bugNodeLength": 1, "fixLineNum": 140, "fixNodeStartChar": 3926, "fixNodeLength": 1, "sourceBeforeFix": "T", "sourceAfterFix": "E"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e", "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 103, "bugNodeStartChar": 3330, "bugNodeLength": 34, "fixLineNum": 103, "fixNodeStartChar": 3330, "fixNodeLength": 39, "sourceBeforeFix": "private final String mHostNameKey; ", "sourceAfterFix": "private final PropertyKey mHostNameKey; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e", "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 3402, "bugNodeLength": 34, "fixLineNum": 106, "fixNodeStartChar": 3402, "fixNodeLength": 39, "sourceBeforeFix": "private final String mBindHostKey; ", "sourceAfterFix": "private final PropertyKey mBindHostKey; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e", "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 109, "bugNodeStartChar": 3473, "bugNodeLength": 30, "fixLineNum": 109, "fixNodeStartChar": 3473, "fixNodeLength": 35, "sourceBeforeFix": "private final String mPortKey; ", "sourceAfterFix": "private final PropertyKey mPortKey; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e", "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 132, "bugNodeStartChar": 4009, "bugNodeLength": 168, "fixLineNum": 132, "fixNodeStartChar": 4009, "fixNodeLength": 173, "sourceBeforeFix": "/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public String getHostNameKey(){   return mHostNameKey; } ", "sourceAfterFix": "/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public PropertyKey getHostNameKey(){   return mHostNameKey; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e", "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 141, "bugNodeStartChar": 4183, "bugNodeLength": 162, "fixLineNum": 141, "fixNodeStartChar": 4183, "fixNodeLength": 167, "sourceBeforeFix": "/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public String getBindHostKey(){   return mBindHostKey; } ", "sourceAfterFix": "/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public PropertyKey getBindHostKey(){   return mBindHostKey; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e", "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 150, "bugNodeStartChar": 4351, "bugNodeLength": 152, "fixLineNum": 150, "fixNodeStartChar": 4351, "fixNodeLength": 157, "sourceBeforeFix": "/**   * Gets the key of service port.  * @return key of service port  */ public String getPortKey(){   return mPortKey; } ", "sourceAfterFix": "/**   * Gets the key of service port.  * @return key of service port  */ public PropertyKey getPortKey(){   return mPortKey; } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c6852c9956205b986fde8fe4c3c5d22ba4646912", "fixCommitParentSHA1": "393a77f18c6c0bcbeb86d37fbccaf5addc453b4b", "bugFilePath": "minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java", "fixPatch": "diff --git a/minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java b/minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java\nindex 7d3c12c..1380180 100644\n--- a/minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java\n+++ b/minicluster/src/main/java/alluxio/master/AbstractLocalAlluxioCluster.java\n@@ -389,7 +389,7 @@\n    */\n   protected void runWorker() throws IOException, ConnectionFailedException {\n     mWorker = new DefaultAlluxioWorker();\n-    Whitebox.setInternalState(AlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n+    Whitebox.setInternalState(DefaultAlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n \n     Runnable runWorker = new Runnable() {\n       @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 392, "bugNodeStartChar": 16113, "bugNodeLength": 19, "fixLineNum": 392, "fixNodeStartChar": 16113, "fixNodeLength": 26, "sourceBeforeFix": "AlluxioWorker.class", "sourceAfterFix": "DefaultAlluxioWorker.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c6852c9956205b986fde8fe4c3c5d22ba4646912", "fixCommitParentSHA1": "393a77f18c6c0bcbeb86d37fbccaf5addc453b4b", "bugFilePath": "tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java b/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\nindex cfee55a..797e2aa 100644\n--- a/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\n+++ b/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\n@@ -51,8 +51,8 @@\n  * Test cases for {@link AlluxioWorkerRestServiceHandler}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({AlluxioWorker.class, BlockWorker.class, BlockStoreMeta.class, Configuration.class,\n-    WorkerContext.class})\n+@PrepareForTest({DefaultAlluxioWorker.class, BlockWorker.class, BlockStoreMeta.class,\n+    Configuration.class, WorkerContext.class})\n public final class AlluxioWorkerRestApiTest extends RestApiTest {\n   private static final String ALLUXIO_CONF_PREFIX = \"alluxio\";\n   private static final String NOT_ALLUXIO_CONF_PREFIX = \"_alluxio_\";\n@@ -63,7 +63,7 @@\n   @Before\n   public void before() {\n     mWorker = PowerMockito.spy(mResource.get().getWorker());\n-    Whitebox.setInternalState(AlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n+    Whitebox.setInternalState(DefaultAlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n     BlockWorker blockWorker = PowerMockito.mock(BlockWorker.class);\n     Whitebox.setInternalState(mWorker, \"mBlockWorker\", blockWorker);\n     mStoreMeta = PowerMockito.mock(BlockStoreMeta.class);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 54, "bugNodeStartChar": 1752, "bugNodeLength": 19, "fixLineNum": 54, "fixNodeStartChar": 1752, "fixNodeLength": 26, "sourceBeforeFix": "AlluxioWorker.class", "sourceAfterFix": "DefaultAlluxioWorker.class"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c6852c9956205b986fde8fe4c3c5d22ba4646912", "fixCommitParentSHA1": "393a77f18c6c0bcbeb86d37fbccaf5addc453b4b", "bugFilePath": "tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java b/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\nindex cfee55a..797e2aa 100644\n--- a/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\n+++ b/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\n@@ -51,8 +51,8 @@\n  * Test cases for {@link AlluxioWorkerRestServiceHandler}.\n  */\n @RunWith(PowerMockRunner.class)\n-@PrepareForTest({AlluxioWorker.class, BlockWorker.class, BlockStoreMeta.class, Configuration.class,\n-    WorkerContext.class})\n+@PrepareForTest({DefaultAlluxioWorker.class, BlockWorker.class, BlockStoreMeta.class,\n+    Configuration.class, WorkerContext.class})\n public final class AlluxioWorkerRestApiTest extends RestApiTest {\n   private static final String ALLUXIO_CONF_PREFIX = \"alluxio\";\n   private static final String NOT_ALLUXIO_CONF_PREFIX = \"_alluxio_\";\n@@ -63,7 +63,7 @@\n   @Before\n   public void before() {\n     mWorker = PowerMockito.spy(mResource.get().getWorker());\n-    Whitebox.setInternalState(AlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n+    Whitebox.setInternalState(DefaultAlluxioWorker.class, \"sAlluxioWorker\", mWorker);\n     BlockWorker blockWorker = PowerMockito.mock(BlockWorker.class);\n     Whitebox.setInternalState(mWorker, \"mBlockWorker\", blockWorker);\n     mStoreMeta = PowerMockito.mock(BlockStoreMeta.class);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 66, "bugNodeStartChar": 2257, "bugNodeLength": 19, "fixLineNum": 66, "fixNodeStartChar": 2257, "fixNodeLength": 26, "sourceBeforeFix": "AlluxioWorker.class", "sourceAfterFix": "DefaultAlluxioWorker.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5992b8ccbc9bc21d353ec3738c3f8994dfc3bbf8", "fixCommitParentSHA1": "5f9a7741ef180ca39da78f77e56978fb1be69857", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileSystemUtils.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\nindex 9e9be66..ff54336 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n@@ -170,7 +170,7 @@\n       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n-      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n+      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 173, "bugNodeStartChar": 7755, "bugNodeLength": 17, "fixLineNum": 173, "fixNodeStartChar": 7755, "fixNodeLength": 18, "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5992b8ccbc9bc21d353ec3738c3f8994dfc3bbf8", "fixCommitParentSHA1": "5f9a7741ef180ca39da78f77e56978fb1be69857", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileSystemUtils.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\nindex 9e9be66..ff54336 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n@@ -170,7 +170,7 @@\n       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n-      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n+      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 173, "bugNodeStartChar": 7755, "bugNodeLength": 17, "fixLineNum": 173, "fixNodeStartChar": 7755, "fixNodeLength": 18, "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ad687b722b4d0c3461fdb7c45206257145484d8a", "fixCommitParentSHA1": "5f9a7741ef180ca39da78f77e56978fb1be69857", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileSystemUtils.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\nindex 9e9be66..ff54336 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n@@ -170,7 +170,7 @@\n       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n-      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n+      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 173, "bugNodeStartChar": 7755, "bugNodeLength": 17, "fixLineNum": 173, "fixNodeStartChar": 7755, "fixNodeLength": 18, "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ad687b722b4d0c3461fdb7c45206257145484d8a", "fixCommitParentSHA1": "5f9a7741ef180ca39da78f77e56978fb1be69857", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileSystemUtils.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\nindex 9e9be66..ff54336 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileSystemUtils.java\n@@ -170,7 +170,7 @@\n       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n-      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n+      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 173, "bugNodeStartChar": 7755, "bugNodeLength": 17, "fixLineNum": 173, "fixNodeStartChar": 7755, "fixNodeLength": 18, "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "fixCommitParentSHA1": "f0bd221d5cad122e00f39e9ee8af5d41ee4d5ec5", "bugFilePath": "core/client/src/test/java/alluxio/client/file/options/CompleteUfsFileOptionsTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/file/options/CompleteUfsFileOptionsTest.java b/core/client/src/test/java/alluxio/client/file/options/CompleteUfsFileOptionsTest.java\nindex 13d22f2..f13d720 100644\n--- a/core/client/src/test/java/alluxio/client/file/options/CompleteUfsFileOptionsTest.java\n+++ b/core/client/src/test/java/alluxio/client/file/options/CompleteUfsFileOptionsTest.java\n@@ -27,7 +27,7 @@\n /**\n  * Tests for the {@link CompleteUfsFileOptions} class.\n  */\n-public class CompleteUfsFileOptionsTest {\n+public final class CompleteUfsFileOptionsTest {\n   /**\n    * Tests that building an {@link CompleteUfsFileOptions} with the defaults works.\n    */\n", "projectName": "Alluxio.alluxio", "bugLineNum": 27, "bugNodeStartChar": 933, "bugNodeLength": 2345, "fixLineNum": 27, "fixNodeStartChar": 933, "fixNodeLength": 2351, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "fixCommitParentSHA1": "f0bd221d5cad122e00f39e9ee8af5d41ee4d5ec5", "bugFilePath": "core/client/src/test/java/alluxio/client/file/options/CreateUfsFileOptionsTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/file/options/CreateUfsFileOptionsTest.java b/core/client/src/test/java/alluxio/client/file/options/CreateUfsFileOptionsTest.java\nindex 4e29f31..9daa1b6 100644\n--- a/core/client/src/test/java/alluxio/client/file/options/CreateUfsFileOptionsTest.java\n+++ b/core/client/src/test/java/alluxio/client/file/options/CreateUfsFileOptionsTest.java\n@@ -27,7 +27,7 @@\n /**\n  * Tests for the {@link CreateUfsFileOptions} class.\n  */\n-public class CreateUfsFileOptionsTest {\n+public final class CreateUfsFileOptionsTest {\n   /**\n    * Tests that building an {@link CreateUfsFileOptions} with the defaults works.\n    */\n", "projectName": "Alluxio.alluxio", "bugLineNum": 27, "bugNodeStartChar": 931, "bugNodeLength": 2323, "fixLineNum": 27, "fixNodeStartChar": 931, "fixNodeLength": 2329, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "fixCommitParentSHA1": "f0bd221d5cad122e00f39e9ee8af5d41ee4d5ec5", "bugFilePath": "core/common/src/test/java/alluxio/underfs/options/CreateOptionsTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/underfs/options/CreateOptionsTest.java b/core/common/src/test/java/alluxio/underfs/options/CreateOptionsTest.java\nindex e516c83..8428a36 100644\n--- a/core/common/src/test/java/alluxio/underfs/options/CreateOptionsTest.java\n+++ b/core/common/src/test/java/alluxio/underfs/options/CreateOptionsTest.java\n@@ -31,7 +31,7 @@\n @RunWith(PowerMockRunner.class)\n // Need to mock Permission to use CommonTestUtils#testEquals.\n @PrepareForTest(Permission.class)\n-public class CreateOptionsTest {\n+public final class CreateOptionsTest {\n   /**\n    * Tests for default {@link CreateOptions}.\n    */\n", "projectName": "Alluxio.alluxio", "bugLineNum": 28, "bugNodeStartChar": 983, "bugNodeLength": 2097, "fixLineNum": 28, "fixNodeStartChar": 983, "fixNodeLength": 2103, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "fixCommitParentSHA1": "f0bd221d5cad122e00f39e9ee8af5d41ee4d5ec5", "bugFilePath": "core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java b/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java\nindex 6513a7b..2e5e1e0 100644\n--- a/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java\n+++ b/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java\n@@ -31,7 +31,7 @@\n @RunWith(PowerMockRunner.class)\n // Need to mock Permission to use CommonTestUtils#testEquals.\n @PrepareForTest(Permission.class)\n-public class MkdirsOptionsTest {\n+public final class MkdirsOptionsTest {\n   /**\n    * Tests for default {@link MkdirsOptions}.\n    */\n", "projectName": "Alluxio.alluxio", "bugLineNum": 28, "bugNodeStartChar": 983, "bugNodeLength": 2441, "fixLineNum": 28, "fixNodeStartChar": 983, "fixNodeLength": 2447, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5825d83fc69047c2b821beca9d27f69f49533e84", "fixCommitParentSHA1": "0ab0e83883dfea096bfce8700c3ed0aa121c7345", "bugFilePath": "core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java b/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java\nindex d65c42e..d3b90db 100644\n--- a/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java\n+++ b/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java\n@@ -97,7 +97,7 @@\n     if (this == o) {\n       return true;\n     }\n-    if (!(o instanceof CreateOptions)) {\n+    if (!(o instanceof MkdirsOptions)) {\n       return false;\n     }\n     MkdirsOptions that = (MkdirsOptions) o;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 100, "bugNodeStartChar": 2822, "bugNodeLength": 26, "fixLineNum": 100, "fixNodeStartChar": 2822, "fixNodeLength": 26, "sourceBeforeFix": "o instanceof CreateOptions", "sourceAfterFix": "o instanceof MkdirsOptions"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5825d83fc69047c2b821beca9d27f69f49533e84", "fixCommitParentSHA1": "0ab0e83883dfea096bfce8700c3ed0aa121c7345", "bugFilePath": "core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java b/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java\nindex bcf823f..84e9413 100644\n--- a/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java\n+++ b/core/common/src/test/java/alluxio/underfs/options/MkdirsOptionsTest.java\n@@ -93,6 +93,6 @@\n \n   @Test\n   public void equalsTest() throws Exception {\n-    CommonTestUtils.testEquals(CreateOptions.class);\n+    CommonTestUtils.testEquals(MkdirsOptions.class);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 96, "bugNodeStartChar": 3522, "bugNodeLength": 19, "fixLineNum": 96, "fixNodeStartChar": 3522, "fixNodeLength": 19, "sourceBeforeFix": "CreateOptions.class", "sourceAfterFix": "MkdirsOptions.class"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "885bfcae0994d0b56d6978dc7482f71be04cfe3b", "fixCommitParentSHA1": "1790ad1bde6708d069025362c6b786924e606ba5", "bugFilePath": "core/common/src/main/java/alluxio/util/io/FileUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/io/FileUtils.java b/core/common/src/main/java/alluxio/util/io/FileUtils.java\nindex 1f63b2e..9f77a30 100644\n--- a/core/common/src/main/java/alluxio/util/io/FileUtils.java\n+++ b/core/common/src/main/java/alluxio/util/io/FileUtils.java\n@@ -98,7 +98,7 @@\n     PosixFileAttributeView view =\n         Files.getFileAttributeView(Paths.get(path), PosixFileAttributeView.class,\n             LinkOption.NOFOLLOW_LINKS);\n-    UserPrincipal userPrincipal = lookupService.lookupPrincipalByGroupName(user);\n+    UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(user);\n     view.setOwner(userPrincipal);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 101, "bugNodeStartChar": 3661, "bugNodeLength": 46, "fixLineNum": 101, "fixNodeStartChar": 3661, "fixNodeLength": 41, "sourceBeforeFix": "lookupService.lookupPrincipalByGroupName(user)", "sourceAfterFix": "lookupService.lookupPrincipalByName(user)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "885bfcae0994d0b56d6978dc7482f71be04cfe3b", "fixCommitParentSHA1": "1790ad1bde6708d069025362c6b786924e606ba5", "bugFilePath": "core/common/src/main/java/alluxio/util/io/FileUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/io/FileUtils.java b/core/common/src/main/java/alluxio/util/io/FileUtils.java\nindex 1f63b2e..9f77a30 100644\n--- a/core/common/src/main/java/alluxio/util/io/FileUtils.java\n+++ b/core/common/src/main/java/alluxio/util/io/FileUtils.java\n@@ -98,7 +98,7 @@\n     PosixFileAttributeView view =\n         Files.getFileAttributeView(Paths.get(path), PosixFileAttributeView.class,\n             LinkOption.NOFOLLOW_LINKS);\n-    UserPrincipal userPrincipal = lookupService.lookupPrincipalByGroupName(user);\n+    UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(user);\n     view.setOwner(userPrincipal);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 101, "bugNodeStartChar": 3661, "bugNodeLength": 46, "fixLineNum": 101, "fixNodeStartChar": 3661, "fixNodeLength": 41, "sourceBeforeFix": "lookupService.lookupPrincipalByGroupName(user)", "sourceAfterFix": "lookupService.lookupPrincipalByName(user)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c97c9dfa0c92465351ea13a2c44b080f56fdaf60", "fixCommitParentSHA1": "3cf4bfa1ba00d6a16057ba54fca714a4446a4316", "bugFilePath": "core/client/src/main/java/alluxio/client/block/BufferedBlockInStream.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/block/BufferedBlockInStream.java b/core/client/src/main/java/alluxio/client/block/BufferedBlockInStream.java\nindex 3bc88b9..83e3790 100644\n--- a/core/client/src/main/java/alluxio/client/block/BufferedBlockInStream.java\n+++ b/core/client/src/main/java/alluxio/client/block/BufferedBlockInStream.java\n@@ -110,7 +110,7 @@\n     }\n \n     int toRead = (int) Math.min(len, remaining());\n-    if (mBufferIsValid && mBuffer.remaining() > toRead) { // data is fully contained in the buffer\n+    if (mBufferIsValid && mBuffer.remaining() >= toRead) { // data is fully contained in the buffer\n       mBuffer.get(b, off, toRead);\n       mPos += toRead;\n       mBlockIsRead = true;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 113, "bugNodeStartChar": 3742, "bugNodeLength": 28, "fixLineNum": 113, "fixNodeStartChar": 3742, "fixNodeLength": 29, "sourceBeforeFix": "mBuffer.remaining() > toRead", "sourceAfterFix": "mBuffer.remaining() >= toRead"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "0a7ef39be0ebd0a26f5dad734cd6b3fea58984a9", "fixCommitParentSHA1": "91a0e48955006573ddb2586c0a38a6e3b410c823", "bugFilePath": "core/common/src/test/java/alluxio/ConfigurationTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTest.java b/core/common/src/test/java/alluxio/ConfigurationTest.java\nindex 464ea19..bb9e494 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTest.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTest.java\n@@ -184,7 +184,7 @@\n     Assert.assertEquals(512, intValue);\n \n     intValue = sDefaultConfiguration.getInt(Constants.MASTER_WORKER_TIMEOUT_MS);\n-    Assert.assertEquals(10 * Constants.SECOND_MS, intValue);\n+    Assert.assertEquals(300 * Constants.SECOND_MS, intValue);\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 187, "bugNodeStartChar": 6947, "bugNodeLength": 24, "fixLineNum": 187, "fixNodeStartChar": 6947, "fixNodeLength": 25, "sourceBeforeFix": "10 * Constants.SECOND_MS", "sourceAfterFix": "300 * Constants.SECOND_MS"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "fbec7f83ac76c551185e0e894ec41b4bfba7fa5d", "fixCommitParentSHA1": "889ea70855c55be0c80055629c9d60b19f92740a", "bugFilePath": "core/common/src/test/java/alluxio/ConfigurationTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTest.java b/core/common/src/test/java/alluxio/ConfigurationTest.java\nindex 464ea19..bb9e494 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTest.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTest.java\n@@ -184,7 +184,7 @@\n     Assert.assertEquals(512, intValue);\n \n     intValue = sDefaultConfiguration.getInt(Constants.MASTER_WORKER_TIMEOUT_MS);\n-    Assert.assertEquals(10 * Constants.SECOND_MS, intValue);\n+    Assert.assertEquals(300 * Constants.SECOND_MS, intValue);\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 187, "bugNodeStartChar": 6947, "bugNodeLength": 24, "fixLineNum": 187, "fixNodeStartChar": 6947, "fixNodeLength": 25, "sourceBeforeFix": "10 * Constants.SECOND_MS", "sourceAfterFix": "300 * Constants.SECOND_MS"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "43f9e9cd9f0e5741a87282cf2ad218a40f125359", "fixCommitParentSHA1": "f1099d63b20a56c728b014812fd3510e53633458", "bugFilePath": "core/common/src/test/java/alluxio/ConfigurationTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTest.java b/core/common/src/test/java/alluxio/ConfigurationTest.java\nindex 3c91ac7..464ea19 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTest.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTest.java\n@@ -127,7 +127,7 @@\n \n     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n-    Assert.assertEquals(Constants.KB * 4, longBytesValue);\n+    Assert.assertEquals(Constants.MB * 8, longBytesValue);\n \n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);\n@@ -254,7 +254,7 @@\n     Assert.assertEquals(Constants.MB, longValue);\n \n     longValue = sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n-    Assert.assertEquals(4 * Constants.KB, longValue);\n+    Assert.assertEquals(8 * Constants.MB, longValue);\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 257, "bugNodeStartChar": 9741, "bugNodeLength": 16, "fixLineNum": 257, "fixNodeStartChar": 9741, "fixNodeLength": 16, "sourceBeforeFix": "4 * Constants.KB", "sourceAfterFix": "8 * Constants.MB"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "49c35aabcf0811b2ad7761f2476ebc277f640f44", "fixCommitParentSHA1": "552ea785e8d82033d25333773ef6bf641d05922c", "bugFilePath": "core/common/src/test/java/alluxio/ConfigurationTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTest.java b/core/common/src/test/java/alluxio/ConfigurationTest.java\nindex 464ea19..3c91ac7 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTest.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTest.java\n@@ -127,7 +127,7 @@\n \n     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n-    Assert.assertEquals(Constants.MB * 8, longBytesValue);\n+    Assert.assertEquals(Constants.KB * 4, longBytesValue);\n \n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);\n@@ -254,7 +254,7 @@\n     Assert.assertEquals(Constants.MB, longValue);\n \n     longValue = sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n-    Assert.assertEquals(8 * Constants.MB, longValue);\n+    Assert.assertEquals(4 * Constants.KB, longValue);\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 257, "bugNodeStartChar": 9741, "bugNodeLength": 16, "fixLineNum": 257, "fixNodeStartChar": 9741, "fixNodeLength": 16, "sourceBeforeFix": "8 * Constants.MB", "sourceAfterFix": "4 * Constants.KB"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "562622c839991c9fa82a9c73bdb1887a9edf8696", "fixCommitParentSHA1": "151de1b4e21508529ebac3e94bc895c3a8eb388c", "bugFilePath": "core/common/src/test/java/alluxio/ConfigurationTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTest.java b/core/common/src/test/java/alluxio/ConfigurationTest.java\nindex 464ea19..3c91ac7 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTest.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTest.java\n@@ -127,7 +127,7 @@\n \n     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n-    Assert.assertEquals(Constants.MB * 8, longBytesValue);\n+    Assert.assertEquals(Constants.KB * 4, longBytesValue);\n \n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);\n@@ -254,7 +254,7 @@\n     Assert.assertEquals(Constants.MB, longValue);\n \n     longValue = sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n-    Assert.assertEquals(8 * Constants.MB, longValue);\n+    Assert.assertEquals(4 * Constants.KB, longValue);\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 257, "bugNodeStartChar": 9741, "bugNodeLength": 16, "fixLineNum": 257, "fixNodeStartChar": 9741, "fixNodeLength": 16, "sourceBeforeFix": "8 * Constants.MB", "sourceAfterFix": "4 * Constants.KB"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "707dd41a0d71842dc2eadb6c73ae89d01584afc6", "fixCommitParentSHA1": "e6401b64e01bbb5b56546ecc39e89c19760bdc9c", "bugFilePath": "tests/src/test/java/alluxio/client/FreeAndDeleteIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/FreeAndDeleteIntegrationTest.java b/tests/src/test/java/alluxio/client/FreeAndDeleteIntegrationTest.java\nindex 27d3661..55b2688 100644\n--- a/tests/src/test/java/alluxio/client/FreeAndDeleteIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/FreeAndDeleteIntegrationTest.java\n@@ -125,7 +125,7 @@\n     try {\n       // File is immediately gone after delete.\n       mFileSystem.getStatus(filePath);\n-      Assert.fail();\n+      Assert.fail(String.format(\"Expected file %s being deleted but it was not.\", filePath));\n     } catch (FileDoesNotExistException e) {\n       // expected\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 128, "bugNodeStartChar": 5140, "bugNodeLength": 13, "fixLineNum": 128, "fixNodeStartChar": 5140, "fixNodeLength": 86, "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(String.format(\"Expected file %s being deleted but it was not.\",filePath))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "658855128c1d02f13828ed0ef27757b85f7b6c44", "fixCommitParentSHA1": "bfadb6640f922132d1bb2a78cc942b9f6d1dd4cc", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileInStream.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileInStream.java b/core/client/src/main/java/alluxio/client/file/FileInStream.java\nindex 3c33650..7c6337a 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileInStream.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileInStream.java\n@@ -613,7 +613,7 @@\n     // Do not set the buffer size too small to avoid slowing down seek by too much.\n     byte[] buffer = new byte[Math.min((int) mSeekBufferSizeBytes, (int) len)];\n     do {\n-      int bytesRead = read(buffer);\n+      int bytesRead = read(buffer, 0, (int) Math.min(buffer.length, len));\n       Preconditions.checkState(bytesRead > 0, PreconditionMessage.ERR_UNEXPECTED_EOF);\n       len -= bytesRead;\n     } while (len > 0);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 616, "bugNodeStartChar": 23052, "bugNodeLength": 12, "fixLineNum": 616, "fixNodeStartChar": 23052, "fixNodeLength": 51, "sourceBeforeFix": "read(buffer)", "sourceAfterFix": "read(buffer,0,(int)Math.min(buffer.length,len))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ab72c059c55e01140f4c844e32686b1bc1daf591", "fixCommitParentSHA1": "c4cd886db20e8c5f63d0487be98ed6c56b671388", "bugFilePath": "tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\nindex 610bf38..21204df 100644\n--- a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n@@ -431,7 +431,7 @@\n       Assert.assertEquals(k / 2, is.skip(k / 2));\n       Assert.assertEquals(k / 2, is.read());\n       is.close();\n-      Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+      Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n \n       if (k >= 3) {\n         is = mFileSystem.openFile(uri, mReadCache);\n@@ -441,7 +441,7 @@\n         Assert.assertEquals(t, is.skip(t));\n         Assert.assertEquals(2 * t + 1, is.read());\n         is.close();\n-        Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+        Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n       }\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 434, "bugNodeStartChar": 16234, "bugNodeLength": 77, "fixLineNum": 434, "fixNodeStartChar": 16234, "fixNodeLength": 76, "sourceBeforeFix": "Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)", "sourceAfterFix": "Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ab72c059c55e01140f4c844e32686b1bc1daf591", "fixCommitParentSHA1": "c4cd886db20e8c5f63d0487be98ed6c56b671388", "bugFilePath": "tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\nindex 610bf38..21204df 100644\n--- a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n@@ -431,7 +431,7 @@\n       Assert.assertEquals(k / 2, is.skip(k / 2));\n       Assert.assertEquals(k / 2, is.read());\n       is.close();\n-      Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+      Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n \n       if (k >= 3) {\n         is = mFileSystem.openFile(uri, mReadCache);\n@@ -441,7 +441,7 @@\n         Assert.assertEquals(t, is.skip(t));\n         Assert.assertEquals(2 * t + 1, is.read());\n         is.close();\n-        Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+        Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n       }\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 434, "bugNodeStartChar": 16234, "bugNodeLength": 77, "fixLineNum": 434, "fixNodeStartChar": 16234, "fixNodeLength": 76, "sourceBeforeFix": "Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)", "sourceAfterFix": "Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ab72c059c55e01140f4c844e32686b1bc1daf591", "fixCommitParentSHA1": "c4cd886db20e8c5f63d0487be98ed6c56b671388", "bugFilePath": "tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\nindex 610bf38..21204df 100644\n--- a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n@@ -431,7 +431,7 @@\n       Assert.assertEquals(k / 2, is.skip(k / 2));\n       Assert.assertEquals(k / 2, is.read());\n       is.close();\n-      Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+      Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n \n       if (k >= 3) {\n         is = mFileSystem.openFile(uri, mReadCache);\n@@ -441,7 +441,7 @@\n         Assert.assertEquals(t, is.skip(t));\n         Assert.assertEquals(2 * t + 1, is.read());\n         is.close();\n-        Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+        Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n       }\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 444, "bugNodeStartChar": 16619, "bugNodeLength": 77, "fixLineNum": 444, "fixNodeStartChar": 16619, "fixNodeLength": 76, "sourceBeforeFix": "Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)", "sourceAfterFix": "Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ab72c059c55e01140f4c844e32686b1bc1daf591", "fixCommitParentSHA1": "c4cd886db20e8c5f63d0487be98ed6c56b671388", "bugFilePath": "tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\nindex 610bf38..21204df 100644\n--- a/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/RemoteBlockInStreamIntegrationTest.java\n@@ -431,7 +431,7 @@\n       Assert.assertEquals(k / 2, is.skip(k / 2));\n       Assert.assertEquals(k / 2, is.read());\n       is.close();\n-      Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+      Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n \n       if (k >= 3) {\n         is = mFileSystem.openFile(uri, mReadCache);\n@@ -441,7 +441,7 @@\n         Assert.assertEquals(t, is.skip(t));\n         Assert.assertEquals(2 * t + 1, is.read());\n         is.close();\n-        Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n+        Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n       }\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 444, "bugNodeStartChar": 16619, "bugNodeLength": 77, "fixLineNum": 444, "fixNodeStartChar": 16619, "fixNodeLength": 76, "sourceBeforeFix": "Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)", "sourceAfterFix": "Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "6eaf3674e604c25ec1ffc72e97ae2933209ad971", "fixCommitParentSHA1": "8a386eb107de7eff4b048157f659ab8ab8219084", "bugFilePath": "core/client/src/main/java/alluxio/client/file/FileInStream.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/FileInStream.java b/core/client/src/main/java/alluxio/client/file/FileInStream.java\nindex b263009..5592db2 100644\n--- a/core/client/src/main/java/alluxio/client/file/FileInStream.java\n+++ b/core/client/src/main/java/alluxio/client/file/FileInStream.java\n@@ -454,7 +454,7 @@\n \n     // If this block is read from a remote worker but we don't have a local worker, don't cache\n     if (mCurrentBlockInStream instanceof RemoteBlockInStream\n-        && BlockStoreContext.INSTANCE.hasLocalWorker()) {\n+        && !BlockStoreContext.INSTANCE.hasLocalWorker()) {\n       return;\n     }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 457, "bugNodeStartChar": 16911, "bugNodeLength": 43, "fixLineNum": 457, "fixNodeStartChar": 16911, "fixNodeLength": 44, "sourceBeforeFix": "BlockStoreContext.INSTANCE.hasLocalWorker()", "sourceAfterFix": "!BlockStoreContext.INSTANCE.hasLocalWorker()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "fixCommitParentSHA1": "a4c0fcd9d4b512b0dd095ab57b9e8d56f17ce18a", "bugFilePath": "core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\nindex d689a07..456bdb3 100644\n--- a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n@@ -742,7 +742,7 @@\n     try {\n       mFileSystemMaster\n           .createDirectory(new AlluxioURI(\"alluxio:/a\"), CreateDirectoryOptions.defaults());\n-      Assert.fail();\n+      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n \n@@ -753,7 +753,7 @@\n     // TODO(peis): Avoid this hack by adding an option in getFileInfo to skip loading metadata.\n     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n-      Assert.fail();\n+      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 745, "bugNodeStartChar": 29996, "bugNodeLength": 13, "fixLineNum": 745, "fixNodeStartChar": 29996, "fixNodeLength": 83, "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "fixCommitParentSHA1": "a4c0fcd9d4b512b0dd095ab57b9e8d56f17ce18a", "bugFilePath": "core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\nindex d689a07..456bdb3 100644\n--- a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n@@ -742,7 +742,7 @@\n     try {\n       mFileSystemMaster\n           .createDirectory(new AlluxioURI(\"alluxio:/a\"), CreateDirectoryOptions.defaults());\n-      Assert.fail();\n+      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n \n@@ -753,7 +753,7 @@\n     // TODO(peis): Avoid this hack by adding an option in getFileInfo to skip loading metadata.\n     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n-      Assert.fail();\n+      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 756, "bugNodeStartChar": 30506, "bugNodeLength": 13, "fixLineNum": 756, "fixNodeStartChar": 30506, "fixNodeLength": 83, "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ba477fe6b96b97474adc89e4446858392fc09fb9", "fixCommitParentSHA1": "69ffbad3e7001b7a807e3440650c4845757dc859", "bugFilePath": "core/server/src/main/java/alluxio/master/lineage/LineageMasterClientRestServiceHandler.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/lineage/LineageMasterClientRestServiceHandler.java b/core/server/src/main/java/alluxio/master/lineage/LineageMasterClientRestServiceHandler.java\nindex 5f8bcab..8372b43 100644\n--- a/core/server/src/main/java/alluxio/master/lineage/LineageMasterClientRestServiceHandler.java\n+++ b/core/server/src/main/java/alluxio/master/lineage/LineageMasterClientRestServiceHandler.java\n@@ -57,7 +57,10 @@\n \n   private final LineageMaster mLineageMaster = AlluxioMaster.get().getLineageMaster();\n \n-  private LineageMasterClientRestServiceHandler() {} // prevent instantiation\n+  /**\n+   * Constructs a new {@link LineageMasterClientRestServiceHandler}.\n+   */\n+  public LineageMasterClientRestServiceHandler() {}\n \n   /**\n    * @summary get the service name\n", "projectName": "Alluxio.alluxio", "bugLineNum": 60, "bugNodeStartChar": 2203, "bugNodeLength": 50, "fixLineNum": 60, "fixNodeStartChar": 2203, "fixNodeLength": 130, "sourceBeforeFix": "2", "sourceAfterFix": "1"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6586b6ae0a8cb0660e219a8b2b32ca75a218ddb7", "fixCommitParentSHA1": "16d4314e381df5f2bd208cdea16cea6c7334fc5b", "bugFilePath": "core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java", "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java b/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java\nindex 0073148..ab1d3e6 100644\n--- a/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java\n+++ b/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java\n@@ -117,18 +117,19 @@\n       return false;\n     }\n     InStreamOptions that = (InStreamOptions) o;\n-    return Objects.equal(mLocationPolicy, that.mLocationPolicy) && Objects\n-        .equal(mReadType, that.mReadType);\n+    return Objects.equal(mLocationPolicy, that.mLocationPolicy) &&\n+        Objects.equal(mReadType, that.mReadType) &&\n+        Objects.equal(mCacheIncompleteBlock, that.mCacheIncompleteBlock);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(mLocationPolicy, mReadType);\n+    return Objects.hashCode(mLocationPolicy, mReadType, mCacheIncompleteBlock);\n   }\n \n   @Override\n   public String toString() {\n     return Objects.toStringHelper(this).add(\"locationPolicy\", mLocationPolicy)\n-        .add(\"readType\", mReadType).toString();\n+        .add(\"readType\", mReadType).add(\"cacheIncompleteBlock\", mCacheIncompleteBlock).toString();\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 126, "bugNodeStartChar": 3644, "bugNodeLength": 44, "fixLineNum": 126, "fixNodeStartChar": 3644, "fixNodeLength": 67, "sourceBeforeFix": "Objects.hashCode(mLocationPolicy,mReadType)", "sourceAfterFix": "Objects.hashCode(mLocationPolicy,mReadType,mCacheIncompleteBlock)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "590a70ac4a9bcca08c39cbf63b76756642cde1fc", "fixCommitParentSHA1": "7cabfc5f6792f016a06816df532c895dc5f84aae", "bugFilePath": "core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\nindex d90719d..8c9b119 100644\n--- a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n@@ -259,7 +259,7 @@\n   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n-        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1);\n+        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);\n@@ -282,7 +282,7 @@\n         CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     executeTtlCheckOnce();\n-    // Since no valid TTL is set, the file should not be deleted.\n+    // Since no TTL is set, the file should not be deleted.\n     Assert.assertEquals(fileId, mFileSystemMaster.getFileInfo(NESTED_FILE_URI).getFileId());\n \n     mFileSystemMaster.setAttribute(NESTED_FILE_URI, SetAttributeOptions.defaults().setTtl(0));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 262, "bugNodeStartChar": 10084, "bugNodeLength": 89, "fixLineNum": 262, "fixNodeStartChar": 10084, "fixNodeLength": 89, "sourceBeforeFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)", "sourceAfterFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a27f765d8c91708483d0e1c6fe8a37676b7bd24d", "fixCommitParentSHA1": "a6d73736c177b3c091c36d2d5b8aebc3956e74b2", "bugFilePath": "core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\nindex e2e0dd7..4006680 100644\n--- a/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/FileSystemMasterTest.java\n@@ -258,7 +258,7 @@\n   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n-        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1);\n+        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);\n@@ -280,7 +280,7 @@\n         CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     executeTtlCheckOnce();\n-    // Since no valid TTL is set, the file should not be deleted.\n+    // Since no TTL is set, the file should not be deleted.\n     Assert.assertEquals(fileId, mFileSystemMaster.getFileInfo(NESTED_FILE_URI).getFileId());\n \n     mFileSystemMaster.setAttribute(NESTED_FILE_URI, SetAttributeOptions.defaults().setTtl(0));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 261, "bugNodeStartChar": 10080, "bugNodeLength": 89, "fixLineNum": 261, "fixNodeStartChar": 10080, "fixNodeLength": 89, "sourceBeforeFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)", "sourceAfterFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "45bf0d8715c375f45b21131e5b5bd9e125ebe9c3", "fixCommitParentSHA1": "664a27ab8ecddb9c577f5488915d97b9b257e2f5", "bugFilePath": "core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java b/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java\nindex 7aa8b09..771aeee 100644\n--- a/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java\n@@ -83,7 +83,7 @@\n    */\n   private void singleByteReadInternal(UnderStoreBlockInStream inStream, int startIndex)\n       throws IOException {\n-    long remaining = mBlockStream.remaining();\n+    long remaining = inStream.remaining();\n     for (int i = startIndex; i < startIndex + BLOCK_LENGTH; i++) {\n       Assert.assertEquals(i, inStream.read());\n       remaining--;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 86, "bugNodeStartChar": 2856, "bugNodeLength": 24, "fixLineNum": 86, "fixNodeStartChar": 2856, "fixNodeLength": 20, "sourceBeforeFix": "mBlockStream.remaining()", "sourceAfterFix": "inStream.remaining()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "45bf0d8715c375f45b21131e5b5bd9e125ebe9c3", "fixCommitParentSHA1": "664a27ab8ecddb9c577f5488915d97b9b257e2f5", "bugFilePath": "core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java b/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java\nindex 7aa8b09..771aeee 100644\n--- a/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/UnderStoreBlockInStreamTest.java\n@@ -83,7 +83,7 @@\n    */\n   private void singleByteReadInternal(UnderStoreBlockInStream inStream, int startIndex)\n       throws IOException {\n-    long remaining = mBlockStream.remaining();\n+    long remaining = inStream.remaining();\n     for (int i = startIndex; i < startIndex + BLOCK_LENGTH; i++) {\n       Assert.assertEquals(i, inStream.read());\n       remaining--;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 86, "bugNodeStartChar": 2856, "bugNodeLength": 24, "fixLineNum": 86, "fixNodeStartChar": 2856, "fixNodeLength": 20, "sourceBeforeFix": "mBlockStream.remaining()", "sourceAfterFix": "inStream.remaining()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "18848da6f0af6f89ed66a08e610a1479f6e054c1", "fixCommitParentSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "bugFilePath": "tests/src/test/java/alluxio/master/file/FileSystemMasterIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/master/file/FileSystemMasterIntegrationTest.java b/tests/src/test/java/alluxio/master/file/FileSystemMasterIntegrationTest.java\nindex 1150ffd..03512a2 100644\n--- a/tests/src/test/java/alluxio/master/file/FileSystemMasterIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/master/file/FileSystemMasterIntegrationTest.java\n@@ -324,7 +324,8 @@\n   @Rule\n   public LocalAlluxioClusterResource mLocalAlluxioClusterResource =\n       new LocalAlluxioClusterResource(1000, Constants.GB,\n-          Constants.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName());\n+          Constants.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName(),\n+          Constants.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, \"true\");\n   private Configuration mMasterConfiguration;\n   private FileSystemMaster mFsMaster;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 326, "bugNodeStartChar": 12168, "bugNodeLength": 132, "fixLineNum": 326, "fixNodeStartChar": 12168, "fixNodeLength": 203, "sourceBeforeFix": "new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName())", "sourceAfterFix": "new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName(),Constants.SECURITY_AUTHORIZATION_PERMISSION_ENABLED,\"true\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "fixCommitParentSHA1": "b101a203b2cc36ec2252945a5f89e1936d318247", "bugFilePath": "core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java b/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java\nindex 0ce7b8d..cff3cb9 100644\n--- a/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java\n+++ b/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java\n@@ -90,7 +90,7 @@\n    * @see FileSystemPermission#applyUMask(FileSystemPermission)\n    */\n   public PermissionStatus applyUMask(FileSystemPermission umask, Configuration configuration) {\n-    if (!SecurityUtils.isSecurityEnabled(configuration)) {\n+    if (!SecurityUtils.isAuthorizationEnabled(configuration)) {\n       return new PermissionStatus(mUserName, mGroupName, mPermission);\n     }\n     FileSystemPermission newFileSystemPermission = mPermission.applyUMask(umask);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 93, "bugNodeStartChar": 2819, "bugNodeLength": 46, "fixLineNum": 93, "fixNodeStartChar": 2819, "fixNodeLength": 51, "sourceBeforeFix": "SecurityUtils.isSecurityEnabled(configuration)", "sourceAfterFix": "SecurityUtils.isAuthorizationEnabled(configuration)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "fixCommitParentSHA1": "b101a203b2cc36ec2252945a5f89e1936d318247", "bugFilePath": "core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java b/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java\nindex 0ce7b8d..cff3cb9 100644\n--- a/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java\n+++ b/core/common/src/main/java/alluxio/security/authorization/PermissionStatus.java\n@@ -90,7 +90,7 @@\n    * @see FileSystemPermission#applyUMask(FileSystemPermission)\n    */\n   public PermissionStatus applyUMask(FileSystemPermission umask, Configuration configuration) {\n-    if (!SecurityUtils.isSecurityEnabled(configuration)) {\n+    if (!SecurityUtils.isAuthorizationEnabled(configuration)) {\n       return new PermissionStatus(mUserName, mGroupName, mPermission);\n     }\n     FileSystemPermission newFileSystemPermission = mPermission.applyUMask(umask);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 93, "bugNodeStartChar": 2819, "bugNodeLength": 46, "fixLineNum": 93, "fixNodeStartChar": 2819, "fixNodeLength": 51, "sourceBeforeFix": "SecurityUtils.isSecurityEnabled(configuration)", "sourceAfterFix": "SecurityUtils.isAuthorizationEnabled(configuration)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "fixCommitParentSHA1": "b101a203b2cc36ec2252945a5f89e1936d318247", "bugFilePath": "core/server/src/test/java/alluxio/master/file/meta/InodeDirectoryTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/meta/InodeDirectoryTest.java b/core/server/src/test/java/alluxio/master/file/meta/InodeDirectoryTest.java\nindex 3e3aac9..2f98d4f 100644\n--- a/core/server/src/test/java/alluxio/master/file/meta/InodeDirectoryTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/meta/InodeDirectoryTest.java\n@@ -233,7 +233,7 @@\n     InodeDirectory inode2 = createInodeDirectory();\n     Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());\n     Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());\n-    Assert.assertEquals((short) 0755, inode2.getPermission());\n+    Assert.assertEquals((short) 0777, inode2.getPermission());\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 236, "bugNodeStartChar": 8254, "bugNodeLength": 12, "fixLineNum": 236, "fixNodeStartChar": 8254, "fixNodeLength": 12, "sourceBeforeFix": "(short)0755", "sourceAfterFix": "(short)0777"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b101a203b2cc36ec2252945a5f89e1936d318247", "fixCommitParentSHA1": "7d543e640ff991a14cd87cf49302e58a16fce933", "bugFilePath": "core/server/src/test/java/alluxio/master/file/meta/AbstractInodeTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/meta/AbstractInodeTest.java b/core/server/src/test/java/alluxio/master/file/meta/AbstractInodeTest.java\nindex c78fffb..c603e29 100644\n--- a/core/server/src/test/java/alluxio/master/file/meta/AbstractInodeTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/meta/AbstractInodeTest.java\n@@ -26,7 +26,7 @@\n   public static final String TEST_GROUP_NAME = \"group1\";\n \n   private static PermissionStatus sPermissionStatus =\n-      new PermissionStatus(TEST_USER_NAME, TEST_GROUP_NAME, (short) 0755);\n+      new PermissionStatus(TEST_USER_NAME, TEST_GROUP_NAME, (short) 0777);\n   @Rule\n   public ExpectedException mThrown = ExpectedException.none();\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 29, "bugNodeStartChar": 1055, "bugNodeLength": 12, "fixLineNum": 29, "fixNodeStartChar": 1055, "fixNodeLength": 12, "sourceBeforeFix": "(short)0755", "sourceAfterFix": "(short)0777"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b101a203b2cc36ec2252945a5f89e1936d318247", "fixCommitParentSHA1": "7d543e640ff991a14cd87cf49302e58a16fce933", "bugFilePath": "core/server/src/test/java/alluxio/master/file/meta/InodeFileTest.java", "fixPatch": "diff --git a/core/server/src/test/java/alluxio/master/file/meta/InodeFileTest.java b/core/server/src/test/java/alluxio/master/file/meta/InodeFileTest.java\nindex 85b76bf..e96dfb6 100644\n--- a/core/server/src/test/java/alluxio/master/file/meta/InodeFileTest.java\n+++ b/core/server/src/test/java/alluxio/master/file/meta/InodeFileTest.java\n@@ -150,6 +150,6 @@\n     InodeFile inode1 = createInodeFile(1);\n     Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode1.getUserName());\n     Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode1.getGroupName());\n-    Assert.assertEquals((short) 0644, inode1.getPermission());\n+    Assert.assertEquals((short) 0777, inode1.getPermission());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 153, "bugNodeStartChar": 4689, "bugNodeLength": 12, "fixLineNum": 153, "fixNodeStartChar": 4689, "fixNodeLength": 12, "sourceBeforeFix": "(short)0644", "sourceAfterFix": "(short)0777"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "fixCommitParentSHA1": "bb5ca3bf71dc80922fbec2e366ce734c4d26f446", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 93, "bugNodeStartChar": 3963, "bugNodeLength": 105, "fixLineNum": 93, "fixNodeStartChar": 3963, "fixNodeLength": 105, "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "fixCommitParentSHA1": "bb5ca3bf71dc80922fbec2e366ce734c4d26f446", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 118, "bugNodeStartChar": 5081, "bugNodeLength": 171, "fixLineNum": 118, "fixNodeStartChar": 5081, "fixNodeLength": 171, "sourceBeforeFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())", "sourceAfterFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "fixCommitParentSHA1": "bb5ca3bf71dc80922fbec2e366ce734c4d26f446", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 195, "bugNodeStartChar": 8825, "bugNodeLength": 105, "fixLineNum": 195, "fixNodeStartChar": 8825, "fixNodeLength": 105, "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "fixCommitParentSHA1": "bb5ca3bf71dc80922fbec2e366ce734c4d26f446", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 224, "bugNodeStartChar": 10179, "bugNodeLength": 171, "fixLineNum": 224, "fixNodeStartChar": 10179, "fixNodeLength": 171, "sourceBeforeFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())", "sourceAfterFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "fixCommitParentSHA1": "d9107a081defae15c6d985037fa94c2cb9fc6a83", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 93, "bugNodeStartChar": 3963, "bugNodeLength": 105, "fixLineNum": 93, "fixNodeStartChar": 3963, "fixNodeLength": 105, "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "fixCommitParentSHA1": "d9107a081defae15c6d985037fa94c2cb9fc6a83", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 118, "bugNodeStartChar": 5081, "bugNodeLength": 171, "fixLineNum": 118, "fixNodeStartChar": 5081, "fixNodeLength": 171, "sourceBeforeFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())", "sourceAfterFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "fixCommitParentSHA1": "d9107a081defae15c6d985037fa94c2cb9fc6a83", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 195, "bugNodeStartChar": 8825, "bugNodeLength": 105, "fixLineNum": 195, "fixNodeStartChar": 8825, "fixNodeLength": 105, "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "fixCommitParentSHA1": "d9107a081defae15c6d985037fa94c2cb9fc6a83", "bugFilePath": "tests/src/test/java/alluxio/shell/command/LsCommandTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\nindex da964c5..91d083e 100644\n--- a/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n+++ b/tests/src/test/java/alluxio/shell/command/LsCommandTest.java\n@@ -90,7 +90,7 @@\n     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);\n@@ -115,7 +115,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),\n@@ -192,7 +192,7 @@\n     expected += \"WARNING: lsr is deprecated. Please use ls -R instead.\\n\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n-    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n+    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY);\n@@ -221,7 +221,7 @@\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n-        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n+        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 224, "bugNodeStartChar": 10179, "bugNodeLength": 171, "fixLineNum": 224, "fixNodeStartChar": 10179, "fixNodeLength": 171, "sourceBeforeFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())", "sourceAfterFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ad392b3d40e7e7299f06b969c5f4a90ba90ed2fa", "fixCommitParentSHA1": "1fdc389421dc03d488c224273889f36ebfb04dfc", "bugFilePath": "core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java b/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java\nindex 782f443..d66355a 100644\n--- a/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java\n+++ b/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java\n@@ -72,7 +72,7 @@\n       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n-        return entry.getCompleteStore();\n+        return entry.getCreateStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:\n", "projectName": "Alluxio.alluxio", "bugLineNum": 75, "bugNodeStartChar": 2607, "bugNodeLength": 24, "fixLineNum": 75, "fixNodeStartChar": 2607, "fixNodeLength": 22, "sourceBeforeFix": "entry.getCompleteStore()", "sourceAfterFix": "entry.getCreateStore()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ad392b3d40e7e7299f06b969c5f4a90ba90ed2fa", "fixCommitParentSHA1": "1fdc389421dc03d488c224273889f36ebfb04dfc", "bugFilePath": "core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java b/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java\nindex 782f443..d66355a 100644\n--- a/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java\n+++ b/core/server/src/main/java/alluxio/master/journal/JournalProtoUtils.java\n@@ -72,7 +72,7 @@\n       case COMPLETE_STORE:\n         return entry.getCompleteStore();\n       case CREATE_STORE:\n-        return entry.getCompleteStore();\n+        return entry.getCreateStore();\n       case DELETE_STORE:\n         return entry.getDeleteStore();\n       case MERGE_STORE:\n", "projectName": "Alluxio.alluxio", "bugLineNum": 75, "bugNodeStartChar": 2607, "bugNodeLength": 24, "fixLineNum": 75, "fixNodeStartChar": 2607, "fixNodeLength": 22, "sourceBeforeFix": "entry.getCompleteStore()", "sourceAfterFix": "entry.getCreateStore()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "690320f7cd8ef12532875e64b949eea3cc26115b", "fixCommitParentSHA1": "3bb2d6971c1209f961bf7a5a0ceecac5f45ca644", "bugFilePath": "core/client/src/test/java/alluxio/client/block/AlluxioBlockStoreTest.java", "fixPatch": "diff --git a/core/client/src/test/java/alluxio/client/block/AlluxioBlockStoreTest.java b/core/client/src/test/java/alluxio/client/block/AlluxioBlockStoreTest.java\nindex 435233a..bdf87ac 100644\n--- a/core/client/src/test/java/alluxio/client/block/AlluxioBlockStoreTest.java\n+++ b/core/client/src/test/java/alluxio/client/block/AlluxioBlockStoreTest.java\n@@ -92,7 +92,7 @@\n \n     // Mock block store should return our mock clients\n     sBlockWorkerClient = PowerMockito.mock(BlockWorkerClient.class);\n-    Mockito.when(sBlockStoreContext.acquireWorkerClient(Mockito.anyString()))\n+    Mockito.when(sBlockStoreContext.acquireWorkerClient(Mockito.any(WorkerNetAddress.class)))\n         .thenReturn(sBlockWorkerClient);\n     sMasterClient = PowerMockito.mock(BlockMasterClient.class);\n     Mockito.when(sBlockStoreContext.acquireMasterClientResource()).thenReturn(\n", "projectName": "Alluxio.alluxio", "bugLineNum": 95, "bugNodeStartChar": 4105, "bugNodeLength": 19, "fixLineNum": 95, "fixNodeStartChar": 4105, "fixNodeLength": 35, "sourceBeforeFix": "Mockito.anyString()", "sourceAfterFix": "Mockito.any(WorkerNetAddress.class)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "ebe38aec141cc8fcfd56b71bf167d6370808806a", "fixCommitParentSHA1": "b4309098dccfa611047565fbd34acce1fe1084b5", "bugFilePath": "core/client-internal/src/main/java/alluxio/client/UfsUtils.java", "fixPatch": "diff --git a/core/client-internal/src/main/java/alluxio/client/UfsUtils.java b/core/client-internal/src/main/java/alluxio/client/UfsUtils.java\nindex 26bba94..dfdd469 100644\n--- a/core/client-internal/src/main/java/alluxio/client/UfsUtils.java\n+++ b/core/client-internal/src/main/java/alluxio/client/UfsUtils.java\n@@ -95,7 +95,7 @@\n         AlluxioURI alluxioUriToLoad = alluxioUri.join(file);\n         LOG.debug(\"Loading metadata for Alluxio uri: \" + alluxioUriToLoad);\n         // TODO(calvin): Remove the need for this hack\n-        AlluxioURI alluxioPath = new AlluxioURI(alluxioUri.getPath());\n+        AlluxioURI alluxioPath = new AlluxioURI(alluxioUriToLoad.getPath());\n         if (!fs.exists(alluxioPath)) {\n           fs.loadMetadata(alluxioPath);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 98, "bugNodeStartChar": 4463, "bugNodeLength": 20, "fixLineNum": 98, "fixNodeStartChar": 4463, "fixNodeLength": 26, "sourceBeforeFix": "alluxioUri.getPath()", "sourceAfterFix": "alluxioUriToLoad.getPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ebe38aec141cc8fcfd56b71bf167d6370808806a", "fixCommitParentSHA1": "b4309098dccfa611047565fbd34acce1fe1084b5", "bugFilePath": "core/client-internal/src/main/java/alluxio/client/UfsUtils.java", "fixPatch": "diff --git a/core/client-internal/src/main/java/alluxio/client/UfsUtils.java b/core/client-internal/src/main/java/alluxio/client/UfsUtils.java\nindex 26bba94..dfdd469 100644\n--- a/core/client-internal/src/main/java/alluxio/client/UfsUtils.java\n+++ b/core/client-internal/src/main/java/alluxio/client/UfsUtils.java\n@@ -95,7 +95,7 @@\n         AlluxioURI alluxioUriToLoad = alluxioUri.join(file);\n         LOG.debug(\"Loading metadata for Alluxio uri: \" + alluxioUriToLoad);\n         // TODO(calvin): Remove the need for this hack\n-        AlluxioURI alluxioPath = new AlluxioURI(alluxioUri.getPath());\n+        AlluxioURI alluxioPath = new AlluxioURI(alluxioUriToLoad.getPath());\n         if (!fs.exists(alluxioPath)) {\n           fs.loadMetadata(alluxioPath);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 98, "bugNodeStartChar": 4463, "bugNodeLength": 20, "fixLineNum": 98, "fixNodeStartChar": 4463, "fixNodeLength": 26, "sourceBeforeFix": "alluxioUri.getPath()", "sourceAfterFix": "alluxioUriToLoad.getPath()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "9da2ef35610560af25998d4b0fd238cbc138860b", "fixCommitParentSHA1": "abd91a0acc70f2227910ff21e7f22d2f8faa0f83", "bugFilePath": "tests/src/test/java/alluxio/client/UfsUtilsIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/alluxio/client/UfsUtilsIntegrationTest.java b/tests/src/test/java/alluxio/client/UfsUtilsIntegrationTest.java\nindex d9e5ba5..aa19bf9 100644\n--- a/tests/src/test/java/alluxio/client/UfsUtilsIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/UfsUtilsIntegrationTest.java\n@@ -68,7 +68,7 @@\n           mLocalAlluxioClusterResource.get().getMasterConf());\n     }\n \n-    UfsUtils.loadUfs(mFileSystem, new AlluxioURI(AlluxioURI.SEPARATOR), new AlluxioURI(\n+    UfsUtils.loadUfs(new AlluxioURI(AlluxioURI.SEPARATOR), new AlluxioURI(\n         mUfsRoot + AlluxioURI.SEPARATOR), new PrefixList(\"alluxio;exclusions\", \";\"),\n         mLocalAlluxioClusterResource.get().getMasterConf());\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 71, "bugNodeStartChar": 2373, "bugNodeLength": 228, "fixLineNum": 71, "fixNodeStartChar": 2373, "fixNodeLength": 215, "sourceBeforeFix": "UfsUtils.loadUfs(mFileSystem,new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList(\"alluxio;exclusions\",\";\"),mLocalAlluxioClusterResource.get().getMasterConf())", "sourceAfterFix": "UfsUtils.loadUfs(new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList(\"alluxio;exclusions\",\";\"),mLocalAlluxioClusterResource.get().getMasterConf())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6f58735d7175d63895e334f47ce66ba2fb836817", "fixCommitParentSHA1": "3efcd2dade2f49a1d05ec4a8056d31899cedcb2c", "bugFilePath": "core/server/src/main/java/alluxio/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java b/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java\nindex 6883029..20ecce1 100644\n--- a/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java\n+++ b/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java\n@@ -167,7 +167,7 @@\n    */\n   public Inode getInodeByPath(AlluxioURI path) throws InvalidPathException {\n     TraversalResult traversalResult =\n-        traverseToInode(PathUtils.getPathComponents(path.toString()), false);\n+        traverseToInode(PathUtils.getPathComponents(path.getPath()), false);\n     if (!traversalResult.isFound()) {\n       throw new InvalidPathException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 170, "bugNodeStartChar": 6109, "bugNodeLength": 15, "fixLineNum": 170, "fixNodeStartChar": 6109, "fixNodeLength": 14, "sourceBeforeFix": "path.toString()", "sourceAfterFix": "path.getPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6f58735d7175d63895e334f47ce66ba2fb836817", "fixCommitParentSHA1": "3efcd2dade2f49a1d05ec4a8056d31899cedcb2c", "bugFilePath": "core/server/src/main/java/alluxio/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java b/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java\nindex 6883029..20ecce1 100644\n--- a/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java\n+++ b/core/server/src/main/java/alluxio/master/file/meta/InodeTree.java\n@@ -167,7 +167,7 @@\n    */\n   public Inode getInodeByPath(AlluxioURI path) throws InvalidPathException {\n     TraversalResult traversalResult =\n-        traverseToInode(PathUtils.getPathComponents(path.toString()), false);\n+        traverseToInode(PathUtils.getPathComponents(path.getPath()), false);\n     if (!traversalResult.isFound()) {\n       throw new InvalidPathException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 170, "bugNodeStartChar": 6109, "bugNodeLength": 15, "fixLineNum": 170, "fixNodeStartChar": 6109, "fixNodeLength": 14, "sourceBeforeFix": "path.toString()", "sourceAfterFix": "path.getPath()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c2014d82a6ede8518962a250d1ad7130a93b1575", "fixCommitParentSHA1": "cca9fb11b4d9907f90b3e23f6ba21e179a006677", "bugFilePath": "core/server/src/main/java/alluxio/web/UIFileInfo.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/web/UIFileInfo.java b/core/server/src/main/java/alluxio/web/UIFileInfo.java\nindex d1981f2..6134aa1 100644\n--- a/core/server/src/main/java/alluxio/web/UIFileInfo.java\n+++ b/core/server/src/main/java/alluxio/web/UIFileInfo.java\n@@ -279,7 +279,7 @@\n    * @return the percentage of the file stored in the given tier\n    */\n   public int getOnTierPercentage(String tierAlias) {\n-    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0;\n+    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L;\n     return (int) (100 * sizeOnTier / mSize);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 282, "bugNodeStartChar": 8276, "bugNodeLength": 67, "fixLineNum": 282, "fixNodeStartChar": 8276, "fixNodeLength": 68, "sourceBeforeFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0", "sourceAfterFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "597a1442f49ecbd544e9310bed9e7659d568a103", "fixCommitParentSHA1": "4148de1812285015c8e086e4502969e1fe569ed5", "bugFilePath": "core/server/src/main/java/alluxio/web/UIFileInfo.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/web/UIFileInfo.java b/core/server/src/main/java/alluxio/web/UIFileInfo.java\nindex f4acea2..b80bf48 100644\n--- a/core/server/src/main/java/alluxio/web/UIFileInfo.java\n+++ b/core/server/src/main/java/alluxio/web/UIFileInfo.java\n@@ -279,7 +279,7 @@\n    * @return the percentage of the file stored in the given tier\n    */\n   public int getOnTierPercentage(String tierAlias) {\n-    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0;\n+    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L;\n     return (int) (100 * sizeOnTier / mSize);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 282, "bugNodeStartChar": 8298, "bugNodeLength": 67, "fixLineNum": 282, "fixNodeStartChar": 8298, "fixNodeLength": 68, "sourceBeforeFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0", "sourceAfterFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "41b10e978c454e91df3b6bd472e1fe27ec72e456", "fixCommitParentSHA1": "d2e13098e5373cb09bb4ebffef1a0e1ddf54f350", "bugFilePath": "core/server/src/main/java/alluxio/web/UIFileInfo.java", "fixPatch": "diff --git a/core/server/src/main/java/alluxio/web/UIFileInfo.java b/core/server/src/main/java/alluxio/web/UIFileInfo.java\nindex f4acea2..b80bf48 100644\n--- a/core/server/src/main/java/alluxio/web/UIFileInfo.java\n+++ b/core/server/src/main/java/alluxio/web/UIFileInfo.java\n@@ -279,7 +279,7 @@\n    * @return the percentage of the file stored in the given tier\n    */\n   public int getOnTierPercentage(String tierAlias) {\n-    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0;\n+    Long sizeOnTier = mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L;\n     return (int) (100 * sizeOnTier / mSize);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 282, "bugNodeStartChar": 8298, "bugNodeLength": 67, "fixLineNum": 282, "fixNodeStartChar": 8298, "fixNodeLength": 68, "sourceBeforeFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0", "sourceAfterFix": "mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "175f9f119e75281a4548a35a9b915cbefe270c30", "fixCommitParentSHA1": "58d11953282c324dc36b33f5e4b17dd4b841cd10", "bugFilePath": "core/common/src/test/java/alluxio/ConfigurationTest.java", "fixPatch": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTest.java b/core/common/src/test/java/alluxio/ConfigurationTest.java\nindex b8af727..e4096cf 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTest.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTest.java\n@@ -178,7 +178,7 @@\n     Assert.assertEquals(Constants.SECOND_MS, intValue);\n \n     intValue = sDefaultConfiguration.getInt(Constants.MASTER_WORKER_THREADS_MIN);\n-    Assert.assertEquals(Runtime.getRuntime().availableProcessors(), intValue);\n+    Assert.assertEquals(512, intValue);\n \n     intValue = sDefaultConfiguration.getInt(Constants.MASTER_WORKER_TIMEOUT_MS);\n     Assert.assertEquals(10 * Constants.SECOND_MS, intValue);\n@@ -221,7 +221,7 @@\n     Assert.assertEquals(Constants.SECOND_MS, intValue);\n \n     intValue = sDefaultConfiguration.getInt(Constants.WORKER_WORKER_BLOCK_THREADS_MIN);\n-    Assert.assertEquals(1, intValue);\n+    Assert.assertEquals(256, intValue);\n \n     intValue = sDefaultConfiguration.getInt(Constants.WORKER_SESSION_TIMEOUT_MS);\n     Assert.assertEquals(10 * Constants.SECOND_MS, intValue);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 224, "bugNodeStartChar": 8399, "bugNodeLength": 32, "fixLineNum": 224, "fixNodeStartChar": 8399, "fixNodeLength": 34, "sourceBeforeFix": "Assert.assertEquals(1,intValue)", "sourceAfterFix": "Assert.assertEquals(256,intValue)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "fixCommitParentSHA1": "68b6c7755ed493d96b08dc1bccb1c0246cc11db9", "bugFilePath": "core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java", "fixPatch": "diff --git a/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 3782da2..22a0dce 100644\n--- a/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -322,9 +322,9 @@\n     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n     mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n-    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n   }\n \n   /**\n@@ -337,7 +337,8 @@\n     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n+        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 325, "bugNodeStartChar": 12029, "bugNodeLength": 77, "fixLineNum": 325, "fixNodeStartChar": 12029, "fixNodeLength": 91, "sourceBeforeFix": "Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "fixCommitParentSHA1": "68b6c7755ed493d96b08dc1bccb1c0246cc11db9", "bugFilePath": "core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java", "fixPatch": "diff --git a/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 3782da2..22a0dce 100644\n--- a/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -322,9 +322,9 @@\n     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n     mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n-    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n   }\n \n   /**\n@@ -337,7 +337,8 @@\n     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n+        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 327, "bugNodeStartChar": 12171, "bugNodeLength": 67, "fixLineNum": 327, "fixNodeStartChar": 12171, "fixNodeLength": 81, "sourceBeforeFix": "Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "fixCommitParentSHA1": "68b6c7755ed493d96b08dc1bccb1c0246cc11db9", "bugFilePath": "core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java", "fixPatch": "diff --git a/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 3782da2..22a0dce 100644\n--- a/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client-internal/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -322,9 +322,9 @@\n     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.doNothing().when(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n     mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n-    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.verify(mFileSystemMasterClient).mount(alluxioPath, ufsPath, mountOptions);\n   }\n \n   /**\n@@ -337,7 +337,8 @@\n     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n+        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 340, "bugNodeStartChar": 12615, "bugNodeLength": 84, "fixLineNum": 340, "fixNodeStartChar": 12615, "fixNodeLength": 107, "sourceBeforeFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7ac54f2ebdffe3f182aeba3f5aa0723e02aa7371", "fixCommitParentSHA1": "8b286cf33d6615ecf4889269612435b207e41a29", "bugFilePath": "core/common/src/main/java/alluxio/util/CommonUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/CommonUtils.java b/core/common/src/main/java/alluxio/util/CommonUtils.java\nindex 81ef0b5..1d4c87f 100644\n--- a/core/common/src/main/java/alluxio/util/CommonUtils.java\n+++ b/core/common/src/main/java/alluxio/util/CommonUtils.java\n@@ -81,17 +81,17 @@\n   }\n \n   /**\n-   * Generates a random alphanumeric string of the given length.\n+   * Generates a random string of the given length.\n    *\n    * @param length the length\n-   * @return a random alphanumeric string\n+   * @return a random string\n    */\n   public static String randomString(int length) {\n-    String result = \"\";\n+    StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < length; i++) {\n-      result += sRandom.nextInt(96) + 32; // generates a random alphanumeric symbol\n+      sb.append((char) (sRandom.nextInt(96) + 32)); // generates a random printable character\n     }\n-    return result;\n+    return sb.toString();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 90, "bugNodeStartChar": 2745, "bugNodeLength": 19, "fixLineNum": 90, "fixNodeStartChar": 2745, "fixNodeLength": 39, "sourceBeforeFix": "String result=\"\"; ", "sourceAfterFix": "StringBuilder sb=new StringBuilder(); "}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "6074514548a570cb0865b686ea5754c4e10366ce", "fixCommitParentSHA1": "7a4bb6648bcd58b141818083a73d800102ad0e36", "bugFilePath": "core/client-internal/src/main/java/alluxio/client/file/FileInStream.java", "fixPatch": "diff --git a/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java b/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java\nindex d9587e5..3f8c00e 100644\n--- a/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java\n+++ b/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java\n@@ -286,11 +286,11 @@\n    */\n   private long getCurrentBlockSize() {\n     // If there is only one block in this file.\n-    if (mFileLength < mBlockSize) {\n+    if (mFileLength <= mBlockSize) {\n       return mFileLength;\n     }\n     // If we are not in the last block, return the block size, else return size of the last block.\n-    if (mFileLength - mPos < mBlockSize) {\n+    if (mFileLength - mPos >= mBlockSize) {\n       return mBlockSize;\n     } else {\n       return mFileLength % mBlockSize;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 289, "bugNodeStartChar": 10146, "bugNodeLength": 24, "fixLineNum": 289, "fixNodeStartChar": 10146, "fixNodeLength": 25, "sourceBeforeFix": "mFileLength < mBlockSize", "sourceAfterFix": "mFileLength <= mBlockSize"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "6074514548a570cb0865b686ea5754c4e10366ce", "fixCommitParentSHA1": "7a4bb6648bcd58b141818083a73d800102ad0e36", "bugFilePath": "core/client-internal/src/main/java/alluxio/client/file/FileInStream.java", "fixPatch": "diff --git a/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java b/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java\nindex d9587e5..3f8c00e 100644\n--- a/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java\n+++ b/core/client-internal/src/main/java/alluxio/client/file/FileInStream.java\n@@ -286,11 +286,11 @@\n    */\n   private long getCurrentBlockSize() {\n     // If there is only one block in this file.\n-    if (mFileLength < mBlockSize) {\n+    if (mFileLength <= mBlockSize) {\n       return mFileLength;\n     }\n     // If we are not in the last block, return the block size, else return size of the last block.\n-    if (mFileLength - mPos < mBlockSize) {\n+    if (mFileLength - mPos >= mBlockSize) {\n       return mBlockSize;\n     } else {\n       return mFileLength % mBlockSize;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 293, "bugNodeStartChar": 10313, "bugNodeLength": 31, "fixLineNum": 293, "fixNodeStartChar": 10313, "fixNodeLength": 32, "sourceBeforeFix": "mFileLength - mPos < mBlockSize", "sourceAfterFix": "mFileLength - mPos >= mBlockSize"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "9eac5a72a7dab306277aad5325648b85f88d6fb2", "fixCommitParentSHA1": "677dce9028a94fbaffc238fd4b757570d78d3115", "bugFilePath": "core/server/src/main/java/tachyon/web/WebInterfaceAbstractMetricsServlet.java", "fixPatch": "diff --git a/core/server/src/main/java/tachyon/web/WebInterfaceAbstractMetricsServlet.java b/core/server/src/main/java/tachyon/web/WebInterfaceAbstractMetricsServlet.java\nindex 23ae5cd..2773882 100644\n--- a/core/server/src/main/java/tachyon/web/WebInterfaceAbstractMetricsServlet.java\n+++ b/core/server/src/main/java/tachyon/web/WebInterfaceAbstractMetricsServlet.java\n@@ -43,13 +43,12 @@\n   }\n \n   /**\n-   * Populates key, value pairs for UI display.\n+   * Populates operation metrics for displaying in the UI\n    *\n    * @param request The {@link HttpServletRequest} object\n-   * @throws IOException if an I/O error occurs\n    */\n   protected void populateCountersValues(Map<String, Metric> operations,\n-      Map<String, Counter> rpcInvocations, HttpServletRequest request) throws IOException {\n+      Map<String, Counter> rpcInvocations, HttpServletRequest request){\n \n     for (Map.Entry<String, Metric> entry : operations.entrySet()) {\n       if (entry.getValue() instanceof Gauge) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 45, "bugNodeStartChar": 1675, "bugNodeLength": 848, "fixLineNum": 45, "fixNodeStartChar": 1675, "fixNodeLength": 828, "sourceBeforeFix": "4", "sourceAfterFix": "4"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "fixCommitParentSHA1": "f2773eee696a81aefd01212b86b4f3cc272f57f1", "bugFilePath": "core/common/src/main/java/tachyon/wire/ThriftUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/tachyon/wire/ThriftUtils.java b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\nindex 01afd0d..6cf3d15 100644\n--- a/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n+++ b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n@@ -98,7 +98,7 @@\n     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n-    result.setUfsPath(fileInfo.getPath());\n+    result.setUfsPath(fileInfo.getUfsPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());\n@@ -144,7 +144,7 @@\n     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n-    result.setChildren(lineageInfo.getParents());\n+    result.setChildren(lineageInfo.getChildren());\n     return result;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 101, "bugNodeStartChar": 3749, "bugNodeLength": 18, "fixLineNum": 101, "fixNodeStartChar": 3749, "fixNodeLength": 21, "sourceBeforeFix": "fileInfo.getPath()", "sourceAfterFix": "fileInfo.getUfsPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "fixCommitParentSHA1": "f2773eee696a81aefd01212b86b4f3cc272f57f1", "bugFilePath": "core/common/src/main/java/tachyon/wire/ThriftUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/tachyon/wire/ThriftUtils.java b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\nindex 01afd0d..6cf3d15 100644\n--- a/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n+++ b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n@@ -98,7 +98,7 @@\n     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n-    result.setUfsPath(fileInfo.getPath());\n+    result.setUfsPath(fileInfo.getUfsPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());\n@@ -144,7 +144,7 @@\n     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n-    result.setChildren(lineageInfo.getParents());\n+    result.setChildren(lineageInfo.getChildren());\n     return result;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 101, "bugNodeStartChar": 3749, "bugNodeLength": 18, "fixLineNum": 101, "fixNodeStartChar": 3749, "fixNodeLength": 21, "sourceBeforeFix": "fileInfo.getPath()", "sourceAfterFix": "fileInfo.getUfsPath()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "fixCommitParentSHA1": "f2773eee696a81aefd01212b86b4f3cc272f57f1", "bugFilePath": "core/common/src/main/java/tachyon/wire/ThriftUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/tachyon/wire/ThriftUtils.java b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\nindex 01afd0d..6cf3d15 100644\n--- a/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n+++ b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n@@ -98,7 +98,7 @@\n     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n-    result.setUfsPath(fileInfo.getPath());\n+    result.setUfsPath(fileInfo.getUfsPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());\n@@ -144,7 +144,7 @@\n     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n-    result.setChildren(lineageInfo.getParents());\n+    result.setChildren(lineageInfo.getChildren());\n     return result;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 147, "bugNodeStartChar": 5694, "bugNodeLength": 24, "fixLineNum": 147, "fixNodeStartChar": 5694, "fixNodeLength": 25, "sourceBeforeFix": "lineageInfo.getParents()", "sourceAfterFix": "lineageInfo.getChildren()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "fixCommitParentSHA1": "f2773eee696a81aefd01212b86b4f3cc272f57f1", "bugFilePath": "core/common/src/main/java/tachyon/wire/ThriftUtils.java", "fixPatch": "diff --git a/core/common/src/main/java/tachyon/wire/ThriftUtils.java b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\nindex 01afd0d..6cf3d15 100644\n--- a/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n+++ b/core/common/src/main/java/tachyon/wire/ThriftUtils.java\n@@ -98,7 +98,7 @@\n     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n-    result.setUfsPath(fileInfo.getPath());\n+    result.setUfsPath(fileInfo.getUfsPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());\n@@ -144,7 +144,7 @@\n     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n-    result.setChildren(lineageInfo.getParents());\n+    result.setChildren(lineageInfo.getChildren());\n     return result;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 147, "bugNodeStartChar": 5694, "bugNodeLength": 24, "fixLineNum": 147, "fixNodeStartChar": 5694, "fixNodeLength": 25, "sourceBeforeFix": "lineageInfo.getParents()", "sourceAfterFix": "lineageInfo.getChildren()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "a93cd9224782ac9847d71cdbe6818b9f6ce805dc", "fixCommitParentSHA1": "e255c8a9647e15c4dca51c5b7a77e9460544b400", "bugFilePath": "tests/src/test/java/tachyon/client/keyvalue/hadoop/KeyValueStoreMapReduceIntegrationTest.java", "fixPatch": "diff --git a/tests/src/test/java/tachyon/client/keyvalue/hadoop/KeyValueStoreMapReduceIntegrationTest.java b/tests/src/test/java/tachyon/client/keyvalue/hadoop/KeyValueStoreMapReduceIntegrationTest.java\nindex 9bd8778..b34b8aa 100644\n--- a/tests/src/test/java/tachyon/client/keyvalue/hadoop/KeyValueStoreMapReduceIntegrationTest.java\n+++ b/tests/src/test/java/tachyon/client/keyvalue/hadoop/KeyValueStoreMapReduceIntegrationTest.java\n@@ -50,7 +50,7 @@\n \n   @ClassRule\n   public static LocalTachyonClusterResource sLocalTachyonClusterResource =\n-      new LocalTachyonClusterResource(Constants.GB, Constants.KB, BLOCK_SIZE,\n+      new LocalTachyonClusterResource(Constants.GB, BLOCK_SIZE,\n           /* ensure key-value service is turned on */\n           Constants.KEY_VALUE_ENABLED, \"true\",\n           Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX, Integer.toString(KEY_VALUE_PARTITION_SIZE));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 53, "bugNodeStartChar": 2072, "bugNodeLength": 272, "fixLineNum": 53, "fixNodeStartChar": 2072, "fixNodeLength": 258, "sourceBeforeFix": "new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,\"true\",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))", "sourceAfterFix": "new LocalTachyonClusterResource(Constants.GB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,\"true\",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "71d4ed61463f12c183a72745c92cfc733666970e", "fixCommitParentSHA1": "d1711d8580ddddbfda8b2ff9a97648f228de2fd1", "bugFilePath": "integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java", "fixPatch": "diff --git a/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java b/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java\nindex 429d866..b1f6776 100644\n--- a/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java\n+++ b/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java\n@@ -438,7 +438,7 @@\n     LOG.trace(\"readdir({}) [Tachyon: {}]\", path, turi);\n \n     try {\n-      if (mTFS.exists(turi)) {\n+      if (!mTFS.exists(turi)) {\n         return -ErrorCodes.ENOENT();\n       }\n       final URIStatus status = mTFS.getStatus(turi);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 441, "bugNodeStartChar": 15173, "bugNodeLength": 17, "fixLineNum": 441, "fixNodeStartChar": 15173, "fixNodeLength": 18, "sourceBeforeFix": "mTFS.exists(turi)", "sourceAfterFix": "!mTFS.exists(turi)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "474e0155416b5c568b8c1cea12345f75ecb5ec61", "fixCommitParentSHA1": "d1711d8580ddddbfda8b2ff9a97648f228de2fd1", "bugFilePath": "integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java", "fixPatch": "diff --git a/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java b/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java\nindex 429d866..b1f6776 100644\n--- a/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java\n+++ b/integration/fuse/src/main/java/tachyon/fuse/TachyonFuseFs.java\n@@ -438,7 +438,7 @@\n     LOG.trace(\"readdir({}) [Tachyon: {}]\", path, turi);\n \n     try {\n-      if (mTFS.exists(turi)) {\n+      if (!mTFS.exists(turi)) {\n         return -ErrorCodes.ENOENT();\n       }\n       final URIStatus status = mTFS.getStatus(turi);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 441, "bugNodeStartChar": 15173, "bugNodeLength": 17, "fixLineNum": 441, "fixNodeStartChar": 15173, "fixNodeLength": 18, "sourceBeforeFix": "mTFS.exists(turi)", "sourceAfterFix": "!mTFS.exists(turi)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "d8894542ad7a8c3bece89f1db4108fc2fb5c17ef", "fixCommitParentSHA1": "d2496677f13129561d8dd9f5e5c2f9619d4b5c28", "bugFilePath": "minicluster/src/main/java/tachyon/underfs/UnderFileSystemCluster.java", "fixPatch": "diff --git a/minicluster/src/main/java/tachyon/underfs/UnderFileSystemCluster.java b/minicluster/src/main/java/tachyon/underfs/UnderFileSystemCluster.java\nindex ec92af1..c4bfcb0 100644\n--- a/minicluster/src/main/java/tachyon/underfs/UnderFileSystemCluster.java\n+++ b/minicluster/src/main/java/tachyon/underfs/UnderFileSystemCluster.java\n@@ -128,7 +128,7 @@\n         && sUnderFSClass.equals(\"tachyon.underfs.hdfs.LocalMiniDFSCluster\");\n   }\n \n-  protected final String mBaseDir;\n+  protected String mBaseDir;\n \n   protected final TachyonConf mTachyonConf;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 131, "bugNodeStartChar": 4486, "bugNodeLength": 32, "fixLineNum": 131, "fixNodeStartChar": 4486, "fixNodeLength": 26, "sourceBeforeFix": "20", "sourceAfterFix": "4"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4e5679100979b451b8ced187c19fa53f92536e6f", "fixCommitParentSHA1": "dd2f4a66241e2edab1f74bababf54010d38f1358", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/ClientContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\nindex c6a75f3..e395301 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n@@ -70,7 +70,7 @@\n     sClientMetrics = new ClientMetrics();\n \n     if (sExecutorService != null) {\n-      sExecutorService.shutdown();\n+      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 73, "bugNodeStartChar": 2460, "bugNodeLength": 27, "fixLineNum": 73, "fixNodeStartChar": 2460, "fixNodeLength": 30, "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4e5679100979b451b8ced187c19fa53f92536e6f", "fixCommitParentSHA1": "dd2f4a66241e2edab1f74bababf54010d38f1358", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/ClientContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\nindex c6a75f3..e395301 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n@@ -70,7 +70,7 @@\n     sClientMetrics = new ClientMetrics();\n \n     if (sExecutorService != null) {\n-      sExecutorService.shutdown();\n+      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 73, "bugNodeStartChar": 2460, "bugNodeLength": 27, "fixLineNum": 73, "fixNodeStartChar": 2460, "fixNodeLength": 30, "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "fixCommitParentSHA1": "0442cf1a44985039b3c2846fd74c41d78d8ccd26", "bugFilePath": "servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java b/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java\nindex 538e0fe..23ef45f 100644\n--- a/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java\n+++ b/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java\n@@ -65,7 +65,7 @@\n \n   @Override\n   public void close() {\n-    mFixedExecutionService.shutdown();\n+    mRecomputeLauncherService.shutdown();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 68, "bugNodeStartChar": 2567, "bugNodeLength": 33, "fixLineNum": 68, "fixNodeStartChar": 2567, "fixNodeLength": 36, "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mRecomputeLauncherService.shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "fixCommitParentSHA1": "0442cf1a44985039b3c2846fd74c41d78d8ccd26", "bugFilePath": "servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java b/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java\nindex 538e0fe..23ef45f 100644\n--- a/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java\n+++ b/servers/src/main/java/tachyon/master/lineage/recompute/RecomputeExecutor.java\n@@ -65,7 +65,7 @@\n \n   @Override\n   public void close() {\n-    mFixedExecutionService.shutdown();\n+    mRecomputeLauncherService.shutdown();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 68, "bugNodeStartChar": 2567, "bugNodeLength": 33, "fixLineNum": 68, "fixNodeStartChar": 2567, "fixNodeLength": 36, "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mRecomputeLauncherService.shutdown()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "fixCommitParentSHA1": "0442cf1a44985039b3c2846fd74c41d78d8ccd26", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockMasterSync.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java b/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java\nindex cf01953..28a7195 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java\n@@ -153,7 +153,7 @@\n \n   @Override\n   public void close() {\n-    mFixedExecutionService.shutdown();\n+    mBlockRemovalService.shutdown();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 156, "bugNodeStartChar": 6753, "bugNodeLength": 33, "fixLineNum": 156, "fixNodeStartChar": 6753, "fixNodeLength": 31, "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mBlockRemovalService.shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "fixCommitParentSHA1": "0442cf1a44985039b3c2846fd74c41d78d8ccd26", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockMasterSync.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java b/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java\nindex cf01953..28a7195 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockMasterSync.java\n@@ -153,7 +153,7 @@\n \n   @Override\n   public void close() {\n-    mFixedExecutionService.shutdown();\n+    mBlockRemovalService.shutdown();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 156, "bugNodeStartChar": 6753, "bugNodeLength": 33, "fixLineNum": 156, "fixNodeStartChar": 6753, "fixNodeLength": 31, "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mBlockRemovalService.shutdown()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "fixCommitParentSHA1": "0442cf1a44985039b3c2846fd74c41d78d8ccd26", "bugFilePath": "servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java b/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java\nindex 440d3e6..568e65d 100644\n--- a/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java\n+++ b/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java\n@@ -112,7 +112,7 @@\n \n   @Override\n   public void close() {\n-    mFixedExecutionService.shutdown();\n+    mPersistFileService.shutdown();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 115, "bugNodeStartChar": 4339, "bugNodeLength": 33, "fixLineNum": 115, "fixNodeStartChar": 4339, "fixNodeLength": 30, "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mPersistFileService.shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "42d41d194dd5ff6bc7886f5a167aae9316b814bc", "fixCommitParentSHA1": "0442cf1a44985039b3c2846fd74c41d78d8ccd26", "bugFilePath": "servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java b/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java\nindex 440d3e6..568e65d 100644\n--- a/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java\n+++ b/servers/src/main/java/tachyon/worker/file/FileWorkerMasterSyncExecutor.java\n@@ -112,7 +112,7 @@\n \n   @Override\n   public void close() {\n-    mFixedExecutionService.shutdown();\n+    mPersistFileService.shutdown();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 115, "bugNodeStartChar": 4339, "bugNodeLength": 33, "fixLineNum": 115, "fixNodeStartChar": 4339, "fixNodeLength": 30, "sourceBeforeFix": "mFixedExecutionService.shutdown()", "sourceAfterFix": "mPersistFileService.shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7dbefbb69705e60542031bf5c402d0f0f1bd7955", "fixCommitParentSHA1": "a69c3655d6f2ec76146fd4a51979fd3cfcc04aee", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/ClientContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\nindex c6a75f3..e395301 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n@@ -70,7 +70,7 @@\n     sClientMetrics = new ClientMetrics();\n \n     if (sExecutorService != null) {\n-      sExecutorService.shutdown();\n+      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 73, "bugNodeStartChar": 2460, "bugNodeLength": 27, "fixLineNum": 73, "fixNodeStartChar": 2460, "fixNodeLength": 30, "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7dbefbb69705e60542031bf5c402d0f0f1bd7955", "fixCommitParentSHA1": "a69c3655d6f2ec76146fd4a51979fd3cfcc04aee", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/ClientContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\nindex c6a75f3..e395301 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/ClientContext.java\n@@ -70,7 +70,7 @@\n     sClientMetrics = new ClientMetrics();\n \n     if (sExecutorService != null) {\n-      sExecutorService.shutdown();\n+      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),\n", "projectName": "Alluxio.alluxio", "bugLineNum": 73, "bugNodeStartChar": 2460, "bugNodeLength": 27, "fixLineNum": 73, "fixNodeStartChar": 2460, "fixNodeLength": 30, "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1e2beef03be68c2aae4116db3b5bcd783bb3f858", "fixCommitParentSHA1": "cabc23150772e1ba7124ead95e509c99284475b0", "bugFilePath": "shell/src/main/java/tachyon/shell/command/ChgrpCommand.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/command/ChgrpCommand.java b/shell/src/main/java/tachyon/shell/command/ChgrpCommand.java\nindex 09cac71..0c2afd1 100644\n--- a/shell/src/main/java/tachyon/shell/command/ChgrpCommand.java\n+++ b/shell/src/main/java/tachyon/shell/command/ChgrpCommand.java\n@@ -24,7 +24,7 @@\n /**\n  * Changes the group of a file or directory specified by args.\n  */\n-public final class ChgrpCommand extends AbstractACLCommand {\n+public final class ChgrpCommand extends AbstractAclCommand {\n \n   public ChgrpCommand(TachyonConf conf, TachyonFileSystem tfs) {\n     super(conf, tfs);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 961, "bugNodeLength": 620, "fixLineNum": 24, "fixNodeStartChar": 961, "fixNodeLength": 620, "sourceBeforeFix": "/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractACLCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chgrp\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return \"chgrp <group> <path>\";   } } ", "sourceAfterFix": "/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractAclCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chgrp\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return \"chgrp <group> <path>\";   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1e2beef03be68c2aae4116db3b5bcd783bb3f858", "fixCommitParentSHA1": "cabc23150772e1ba7124ead95e509c99284475b0", "bugFilePath": "shell/src/main/java/tachyon/shell/command/ChgrpRecursiveCommand.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/command/ChgrpRecursiveCommand.java b/shell/src/main/java/tachyon/shell/command/ChgrpRecursiveCommand.java\nindex ff02b6c..172357f 100644\n--- a/shell/src/main/java/tachyon/shell/command/ChgrpRecursiveCommand.java\n+++ b/shell/src/main/java/tachyon/shell/command/ChgrpRecursiveCommand.java\n@@ -24,7 +24,7 @@\n /**\n  * Changes the group of a file or directory specified by args recursively.\n  */\n-public final class ChgrpRecursiveCommand extends AbstractACLCommand {\n+public final class ChgrpRecursiveCommand extends AbstractAclCommand {\n \n   public ChgrpRecursiveCommand(TachyonConf conf, TachyonFileSystem tfs) {\n     super(conf, tfs);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 961, "bugNodeLength": 651, "fixLineNum": 24, "fixNodeStartChar": 961, "fixNodeLength": 651, "sourceBeforeFix": "/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractACLCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chgrpr\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return \"chgrpr <group> <path>\";   } } ", "sourceAfterFix": "/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractAclCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chgrpr\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return \"chgrpr <group> <path>\";   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1e2beef03be68c2aae4116db3b5bcd783bb3f858", "fixCommitParentSHA1": "cabc23150772e1ba7124ead95e509c99284475b0", "bugFilePath": "shell/src/main/java/tachyon/shell/command/ChmodCommand.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/command/ChmodCommand.java b/shell/src/main/java/tachyon/shell/command/ChmodCommand.java\nindex 729bc60..55081a4 100644\n--- a/shell/src/main/java/tachyon/shell/command/ChmodCommand.java\n+++ b/shell/src/main/java/tachyon/shell/command/ChmodCommand.java\n@@ -24,7 +24,7 @@\n /**\n  * Change the permission of a file or directory specified by args.\n  */\n-public final class ChmodCommand extends AbstractACLCommand {\n+public final class ChmodCommand extends AbstractAclCommand {\n \n   public ChmodCommand(TachyonConf conf, TachyonFileSystem tfs) {\n     super(conf, tfs);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 961, "bugNodeLength": 627, "fixLineNum": 24, "fixNodeStartChar": 961, "fixNodeLength": 627, "sourceBeforeFix": "/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractACLCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chmod\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return \"chmod <mode> <path>\";   } } ", "sourceAfterFix": "/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractAclCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chmod\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return \"chmod <mode> <path>\";   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1e2beef03be68c2aae4116db3b5bcd783bb3f858", "fixCommitParentSHA1": "cabc23150772e1ba7124ead95e509c99284475b0", "bugFilePath": "shell/src/main/java/tachyon/shell/command/ChmodRecursiveCommand.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/command/ChmodRecursiveCommand.java b/shell/src/main/java/tachyon/shell/command/ChmodRecursiveCommand.java\nindex 48857c0..8d20de2 100644\n--- a/shell/src/main/java/tachyon/shell/command/ChmodRecursiveCommand.java\n+++ b/shell/src/main/java/tachyon/shell/command/ChmodRecursiveCommand.java\n@@ -24,7 +24,7 @@\n /**\n  * Change the permission of a file or directory specified by args recursively.\n  */\n-public final class ChmodRecursiveCommand extends AbstractACLCommand {\n+public final class ChmodRecursiveCommand extends AbstractAclCommand {\n \n   public ChmodRecursiveCommand(TachyonConf conf, TachyonFileSystem tfs) {\n     super(conf, tfs);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 961, "bugNodeLength": 658, "fixLineNum": 24, "fixNodeStartChar": 961, "fixNodeLength": 658, "sourceBeforeFix": "/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractACLCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chmodr\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return \"chmodr <mode> <path>\";   } } ", "sourceAfterFix": "/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractAclCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chmodr\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return \"chmodr <mode> <path>\";   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1e2beef03be68c2aae4116db3b5bcd783bb3f858", "fixCommitParentSHA1": "cabc23150772e1ba7124ead95e509c99284475b0", "bugFilePath": "shell/src/main/java/tachyon/shell/command/ChownCommand.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/command/ChownCommand.java b/shell/src/main/java/tachyon/shell/command/ChownCommand.java\nindex 375c5fa..376c77e 100644\n--- a/shell/src/main/java/tachyon/shell/command/ChownCommand.java\n+++ b/shell/src/main/java/tachyon/shell/command/ChownCommand.java\n@@ -24,7 +24,7 @@\n /**\n  * Changes the owner of a file or directory specified by args.\n  */\n-public final class ChownCommand extends AbstractACLCommand {\n+public final class ChownCommand extends AbstractAclCommand {\n \n   public ChownCommand(TachyonConf conf, TachyonFileSystem tfs) {\n     super(conf, tfs);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 961, "bugNodeLength": 620, "fixLineNum": 24, "fixNodeStartChar": 961, "fixNodeLength": 620, "sourceBeforeFix": "/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractACLCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chown\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return \"chown <owner> <path>\";   } } ", "sourceAfterFix": "/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractAclCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chown\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return \"chown <owner> <path>\";   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1e2beef03be68c2aae4116db3b5bcd783bb3f858", "fixCommitParentSHA1": "cabc23150772e1ba7124ead95e509c99284475b0", "bugFilePath": "shell/src/main/java/tachyon/shell/command/ChownRecursiveCommand.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/command/ChownRecursiveCommand.java b/shell/src/main/java/tachyon/shell/command/ChownRecursiveCommand.java\nindex 9556ff5..c2c8b29 100644\n--- a/shell/src/main/java/tachyon/shell/command/ChownRecursiveCommand.java\n+++ b/shell/src/main/java/tachyon/shell/command/ChownRecursiveCommand.java\n@@ -24,7 +24,7 @@\n /**\n  * Changes the owner of a file or directory specified by args recursively.\n  */\n-public final class ChownRecursiveCommand extends AbstractACLCommand {\n+public final class ChownRecursiveCommand extends AbstractAclCommand {\n \n   public ChownRecursiveCommand(TachyonConf conf, TachyonFileSystem tfs) {\n     super(conf, tfs);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 961, "bugNodeLength": 651, "fixLineNum": 24, "fixNodeStartChar": 961, "fixNodeLength": 651, "sourceBeforeFix": "/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractACLCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chownr\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return \"chownr <owner> <path>\";   } } ", "sourceAfterFix": "/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractAclCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return \"chownr\";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return \"chownr <owner> <path>\";   } } "}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf", "fixCommitParentSHA1": "6f9b2ac3f82d6565ea543523b8fe62898b150808", "bugFilePath": "integration-tests/src/test/java/tachyon/client/keyvalue/KeyValuePartitionIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/client/keyvalue/KeyValuePartitionIntegrationTest.java b/integration-tests/src/test/java/tachyon/client/keyvalue/KeyValuePartitionIntegrationTest.java\nindex f810995..261f120 100644\n--- a/integration-tests/src/test/java/tachyon/client/keyvalue/KeyValuePartitionIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/client/keyvalue/KeyValuePartitionIntegrationTest.java\n@@ -44,7 +44,9 @@\n \n   @ClassRule\n   public static LocalTachyonClusterResource sLocalTachyonClusterResource =\n-      new LocalTachyonClusterResource(Constants.GB, Constants.KB, BLOCK_SIZE);\n+      new LocalTachyonClusterResource(Constants.GB, Constants.KB, BLOCK_SIZE,\n+          /* ensure key-value service is turned on */\n+          Constants.KEYVALUE_ENABLED, \"true\");\n \n   @BeforeClass\n   public static void beforeClass() throws Exception {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 47, "bugNodeStartChar": 1896, "bugNodeLength": 71, "fixLineNum": 47, "fixNodeStartChar": 1896, "fixNodeLength": 171, "sourceBeforeFix": "new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE)", "sourceAfterFix": "new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEYVALUE_ENABLED,\"true\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf", "fixCommitParentSHA1": "6f9b2ac3f82d6565ea543523b8fe62898b150808", "bugFilePath": "servers/src/main/java/tachyon/master/TachyonMaster.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/TachyonMaster.java b/servers/src/main/java/tachyon/master/TachyonMaster.java\nindex bdc6c10..1b85915 100644\n--- a/servers/src/main/java/tachyon/master/TachyonMaster.java\n+++ b/servers/src/main/java/tachyon/master/TachyonMaster.java\n@@ -199,8 +199,9 @@\n       mAdditionalMasters = Lists.newArrayList();\n       List<? extends  Master> masters = Lists.newArrayList(mBlockMaster, mFileSystemMaster);\n       // Discover and register the available factories\n+      // NOTE, ClassLoader is explicitly specified so we don't need to set ContextClassLoader\n       ServiceLoader<MasterFactory> discoveredMasterFactories =\n-          ServiceLoader.load(MasterFactory.class);\n+          ServiceLoader.load(MasterFactory.class, MasterFactory.class.getClassLoader());\n       for (MasterFactory factory : discoveredMasterFactories) {\n         Master master = factory.create(masters, journalDirectory);\n         if (master != null) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 203, "bugNodeStartChar": 8369, "bugNodeLength": 39, "fixLineNum": 203, "fixNodeStartChar": 8369, "fixNodeLength": 77, "sourceBeforeFix": "ServiceLoader.load(MasterFactory.class)", "sourceAfterFix": "ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf", "fixCommitParentSHA1": "6f9b2ac3f82d6565ea543523b8fe62898b150808", "bugFilePath": "servers/src/main/java/tachyon/worker/TachyonWorker.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/TachyonWorker.java b/servers/src/main/java/tachyon/worker/TachyonWorker.java\nindex 29a2ecf..064162a 100644\n--- a/servers/src/main/java/tachyon/worker/TachyonWorker.java\n+++ b/servers/src/main/java/tachyon/worker/TachyonWorker.java\n@@ -97,8 +97,9 @@\n       mAdditionalWorkers = Lists.newArrayList();\n       List<? extends Worker> workers = Lists.newArrayList(mBlockWorker, mFileSystemWorker);\n       // Discover and register the available factories\n+      // NOTE, ClassLoader is explicitly specified so we don't need to set ContextClassLoader\n       ServiceLoader<WorkerFactory> discoveredMasterFactories =\n-          ServiceLoader.load(WorkerFactory.class);\n+          ServiceLoader.load(WorkerFactory.class, WorkerFactory.class.getClassLoader());\n       for (WorkerFactory factory : discoveredMasterFactories) {\n         Worker worker = factory.create(workers);\n         if (worker != null) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 101, "bugNodeStartChar": 3852, "bugNodeLength": 39, "fixLineNum": 101, "fixNodeStartChar": 3852, "fixNodeLength": 77, "sourceBeforeFix": "ServiceLoader.load(WorkerFactory.class)", "sourceAfterFix": "ServiceLoader.load(WorkerFactory.class,WorkerFactory.class.getClassLoader())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fa04fa8df997e88d5109f9fd6d8ec61167cf5750", "fixCommitParentSHA1": "3bfa53219cb70f86d71e6373b7bd7f7bf345e691", "bugFilePath": "servers/src/main/java/tachyon/worker/file/FileDataManager.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/file/FileDataManager.java b/servers/src/main/java/tachyon/worker/file/FileDataManager.java\nindex 6e05839..a256929 100644\n--- a/servers/src/main/java/tachyon/worker/file/FileDataManager.java\n+++ b/servers/src/main/java/tachyon/worker/file/FileDataManager.java\n@@ -244,7 +244,7 @@\n    */\n   public void clearPersistedFiles(List<Long> persistedFiles) {\n     synchronized (mPersistedFiles) {\n-      mPersistedFiles.removeAll(mPersistedFiles);\n+      mPersistedFiles.removeAll(persistedFiles);\n     }\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 247, "bugNodeStartChar": 8030, "bugNodeLength": 42, "fixLineNum": 247, "fixNodeStartChar": 8030, "fixNodeLength": 41, "sourceBeforeFix": "mPersistedFiles.removeAll(mPersistedFiles)", "sourceAfterFix": "mPersistedFiles.removeAll(persistedFiles)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "0ea48a75db6718c8e6a953495c20971ede930537", "fixCommitParentSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e", "bugFilePath": "integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\nindex edf75e2..373d5f6 100644\n--- a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n@@ -146,7 +146,7 @@\n \n       // worker notifies the master\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n-      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n+      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n           TimeUnit.SECONDS));\n \n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 149, "bugNodeStartChar": 6208, "bugNodeLength": 105, "fixLineNum": 149, "fixNodeStartChar": 6208, "fixNodeLength": 103, "sourceBeforeFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)", "sourceAfterFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e", "fixCommitParentSHA1": "83a61950f79424caccd548888d8b58a59905d379", "bugFilePath": "integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\nindex 056519f..edf75e2 100644\n--- a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n@@ -142,11 +142,11 @@\n           fileInfo.getPersistenceState());\n \n       // sleep and wait for worker to persist the file\n-      CommonUtils.sleepMs(5);\n+      CommonUtils.sleepMs(200);\n \n       // worker notifies the master\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n-      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n+      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n           TimeUnit.SECONDS));\n \n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 145, "bugNodeStartChar": 6038, "bugNodeLength": 22, "fixLineNum": 145, "fixNodeStartChar": 6038, "fixNodeLength": 24, "sourceBeforeFix": "CommonUtils.sleepMs(5)", "sourceAfterFix": "CommonUtils.sleepMs(200)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e", "fixCommitParentSHA1": "83a61950f79424caccd548888d8b58a59905d379", "bugFilePath": "integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\nindex 056519f..edf75e2 100644\n--- a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n@@ -142,11 +142,11 @@\n           fileInfo.getPersistenceState());\n \n       // sleep and wait for worker to persist the file\n-      CommonUtils.sleepMs(5);\n+      CommonUtils.sleepMs(200);\n \n       // worker notifies the master\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n-      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n+      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n           TimeUnit.SECONDS));\n \n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 149, "bugNodeStartChar": 6206, "bugNodeLength": 103, "fixLineNum": 149, "fixNodeStartChar": 6206, "fixNodeLength": 105, "sourceBeforeFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)", "sourceAfterFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "6496c6f426076a7332240cd7348ca144306a8c15", "fixCommitParentSHA1": "6f349eedb1f330855e7339f0eb00b2e0d3269f07", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/keyvalue/KeyValueWorkerClient.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/keyvalue/KeyValueWorkerClient.java b/clients/unshaded/src/main/java/tachyon/client/keyvalue/KeyValueWorkerClient.java\nindex 16d9b08..95b96c6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/keyvalue/KeyValueWorkerClient.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/keyvalue/KeyValueWorkerClient.java\n@@ -33,13 +33,12 @@\n import tachyon.util.network.NetworkAddressUtils;\n \n /**\n- * The client talks to a key-value worker server. It keeps sending keep alive message to the worker\n- * server.\n+ * The client talks to a key-value worker server.\n  *\n  * Since {@link KeyValueWorkerClientService.Client} is not thread safe, this class has to guarantee\n  * thread safety.\n  */\n-public class KeyValueWorkerClient extends ClientBase {\n+public final class KeyValueWorkerClient extends ClientBase {\n   private static final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n \n   private KeyValueWorkerClientService.Client mClient = null;\n@@ -75,7 +74,7 @@\n   }\n \n   /**\n-   * Notifies the worker to checkpoint the file asynchronously.\n+   * Gets the value of a given {@code key}.\n    *\n    * @param blockId The id of the block\n    * @return ByteBuffer of value, or null if not found\n", "projectName": "Alluxio.alluxio", "bugLineNum": 35, "bugNodeStartChar": 1322, "bugNodeLength": 1877, "fixLineNum": 35, "fixNodeStartChar": 1322, "fixNodeLength": 1883, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "244d0b64b446dd9a10b097d696b49894d4058a9e", "fixCommitParentSHA1": "396898e1c9e9d69751de0b263dd85182f12ebd2a", "bugFilePath": "common/src/main/java/tachyon/security/group/UserToGroupsMappingService.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/security/group/UserToGroupsMappingService.java b/common/src/main/java/tachyon/security/group/UserToGroupsMappingService.java\nindex 8a5f740..a6b7a97 100644\n--- a/common/src/main/java/tachyon/security/group/UserToGroupsMappingService.java\n+++ b/common/src/main/java/tachyon/security/group/UserToGroupsMappingService.java\n@@ -33,7 +33,7 @@\n  * mapping and protects against mapping inconsistencies between servers and clients in a Tachyon\n  * cluster.\n  */\n-public class UserToGroupsMappingService {\n+public final class UserToGroupsMappingService {\n   private static final Logger LOG = LoggerFactory.getLogger(UserToGroupsMappingService.class);\n \n   private final GroupMappingService mGroupMappingService;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 28, "bugNodeStartChar": 1029, "bugNodeLength": 1873, "fixLineNum": 28, "fixNodeStartChar": 1029, "fixNodeLength": 1879, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "244d0b64b446dd9a10b097d696b49894d4058a9e", "fixCommitParentSHA1": "396898e1c9e9d69751de0b263dd85182f12ebd2a", "bugFilePath": "common/src/main/java/tachyon/util/ShellUtils.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/util/ShellUtils.java b/common/src/main/java/tachyon/util/ShellUtils.java\nindex ab75d86..134327f 100644\n--- a/common/src/main/java/tachyon/util/ShellUtils.java\n+++ b/common/src/main/java/tachyon/util/ShellUtils.java\n@@ -29,7 +29,7 @@\n /**\n  * A base class for running a Unix command.\n  */\n-public class ShellUtils {\n+public final class ShellUtils {\n \n   private static final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n   /** a Unix command to set permission */\n", "projectName": "Alluxio.alluxio", "bugLineNum": 29, "bugNodeStartChar": 1056, "bugNodeLength": 5378, "fixLineNum": 29, "fixNodeStartChar": 1056, "fixNodeLength": 5384, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "8ffaf70378581b441d38c399fc26a78ffd2858c2", "fixCommitParentSHA1": "6cc8b25d056dda917ff78c0a71e34f2b37a11e71", "bugFilePath": "servers/src/main/java/tachyon/master/file/FileSystemMaster.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/FileSystemMaster.java b/servers/src/main/java/tachyon/master/file/FileSystemMaster.java\nindex 632f736..f7ca2fe 100644\n--- a/servers/src/main/java/tachyon/master/file/FileSystemMaster.java\n+++ b/servers/src/main/java/tachyon/master/file/FileSystemMaster.java\n@@ -1340,7 +1340,7 @@\n       throws FileAlreadyExistsException, InvalidPathException, IOException {\n     synchronized (mInodeTree) {\n       if (mountInternal(tachyonPath, ufsPath)) {\n-        boolean loadMetadataSuceeded = true;\n+        boolean loadMetadataSuceeded = false;\n         try {\n           // This will create the directory at tachyonPath\n           loadMetadataDirectory(tachyonPath, false);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 1343, "bugNodeStartChar": 54094, "bugNodeLength": 27, "fixLineNum": 1343, "fixNodeStartChar": 54094, "fixNodeLength": 28, "sourceBeforeFix": "loadMetadataSuceeded=true", "sourceAfterFix": "loadMetadataSuceeded=false"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "2fd6012fd5710b7f1f73bb7fbcaf8eaf0a927648", "fixCommitParentSHA1": "dbf291651d90e2bd90a4160c0f33b90004bd6b7b", "bugFilePath": "servers/src/main/java/tachyon/worker/nio/NIODataServer.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\nindex ac9ce6f..0043b70 100644\n--- a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n+++ b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n@@ -86,7 +86,7 @@\n       TachyonConf tachyonConf) {\n     LOG.info(\"Starting DataServer @ {}\", address);\n     mTachyonConf = Preconditions.checkNotNull(tachyonConf);\n-    NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address), mTachyonConf);\n+    NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address));\n     mAddress = address;\n     mDataManager = Preconditions.checkNotNull(dataManager);\n     try {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 89, "bugNodeStartChar": 3348, "bugNodeLength": 86, "fixLineNum": 89, "fixNodeStartChar": 3348, "fixNodeLength": 72, "sourceBeforeFix": "NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address),mTachyonConf)", "sourceAfterFix": "NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "303eb811e0432ef3e843c20cbc282a1bf0007d2a", "fixCommitParentSHA1": "335a4624222d73227748d19527adedb4430720be", "bugFilePath": "integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java", "fixPatch": "diff --git a/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java b/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\nindex a66272e..005f315 100644\n--- a/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\n+++ b/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\n@@ -185,7 +185,7 @@\n   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n-    Mockito.verify(mRMClient).start();\n+    Mockito.verify(mRMClient).stop();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 188, "bugNodeStartChar": 7880, "bugNodeLength": 33, "fixLineNum": 188, "fixNodeStartChar": 7880, "fixNodeLength": 32, "sourceBeforeFix": "Mockito.verify(mRMClient).start()", "sourceAfterFix": "Mockito.verify(mRMClient).stop()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "303eb811e0432ef3e843c20cbc282a1bf0007d2a", "fixCommitParentSHA1": "335a4624222d73227748d19527adedb4430720be", "bugFilePath": "integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java", "fixPatch": "diff --git a/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java b/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\nindex a66272e..005f315 100644\n--- a/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\n+++ b/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\n@@ -185,7 +185,7 @@\n   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n-    Mockito.verify(mRMClient).start();\n+    Mockito.verify(mRMClient).stop();\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 188, "bugNodeStartChar": 7880, "bugNodeLength": 33, "fixLineNum": 188, "fixNodeStartChar": 7880, "fixNodeLength": 32, "sourceBeforeFix": "Mockito.verify(mRMClient).start()", "sourceAfterFix": "Mockito.verify(mRMClient).stop()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 531, "bugNodeStartChar": 23537, "bugNodeLength": 54, "fixLineNum": 531, "fixNodeStartChar": 23537, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[0].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[0].getCreationTimeMs())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 531, "bugNodeStartChar": 23537, "bugNodeLength": 54, "fixLineNum": 531, "fixNodeStartChar": 23537, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[0].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[0].getCreationTimeMs())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 534, "bugNodeStartChar": 23727, "bugNodeLength": 54, "fixLineNum": 534, "fixNodeStartChar": 23727, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[1].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[1].getCreationTimeMs())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 534, "bugNodeStartChar": 23727, "bugNodeLength": 54, "fixLineNum": 534, "fixNodeStartChar": 23727, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[1].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[1].getCreationTimeMs())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 536, "bugNodeStartChar": 23899, "bugNodeLength": 54, "fixLineNum": 536, "fixNodeStartChar": 23899, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[2].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[2].getCreationTimeMs())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 536, "bugNodeStartChar": 23899, "bugNodeLength": 54, "fixLineNum": 536, "fixNodeStartChar": 23899, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[2].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[2].getCreationTimeMs())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 539, "bugNodeStartChar": 24098, "bugNodeLength": 54, "fixLineNum": 539, "fixNodeStartChar": 24098, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[3].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[3].getCreationTimeMs())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 539, "bugNodeStartChar": 24098, "bugNodeLength": 54, "fixLineNum": 539, "fixNodeStartChar": 24098, "fixNodeLength": 58, "sourceBeforeFix": "TfsShell.convertMsToDate(files[3].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[3].getCreationTimeMs())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 908, "bugNodeStartChar": 40916, "bugNodeLength": 75, "fixLineNum": 908, "fixNodeStartChar": 40916, "fixNodeLength": 79, "sourceBeforeFix": "TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "fixCommitParentSHA1": "b4ae7f080d6bb0f98e7c62f2143c53aa77041e51", "bugFilePath": "integration-tests/src/test/java/tachyon/shell/TfsShellTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\nindex 84cd38e..af99b9d 100644\n--- a/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n+++ b/integration-tests/src/test/java/tachyon/shell/TfsShellTest.java\n@@ -528,15 +528,16 @@\n     String expected = \"\";\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     expected += String.format(format, FormatUtils.getSizeFromBytes(10),\n-        TfsShell.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[0].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testFileA\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(0),\n-        TfsShell.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser, \"/testRoot/testDir\");\n+        CommandUtils.convertMsToDate(files[1].getCreationTimeMs()), \"\", testUser,\n+        \"/testRoot/testDir\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(20),\n-        TfsShell.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[2].getCreationTimeMs()), \"In Memory\", testUser,\n         \"/testRoot/testDir/testFileB\");\n     expected += String.format(format, FormatUtils.getSizeFromBytes(30),\n-        TfsShell.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n+        CommandUtils.convertMsToDate(files[3].getCreationTimeMs()), \"Not In Memory\", testUser,\n         \"/testRoot/testFileC\");\n     Assert.assertEquals(expected, mOutput.toString());\n     // clear testing username\n@@ -905,8 +906,8 @@\n   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n-        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n-        testUser, tUri.getPath());\n+        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n+        \"In Memory\", testUser, tUri.getPath());\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 908, "bugNodeStartChar": 40916, "bugNodeLength": 75, "fixLineNum": 908, "fixNodeStartChar": 40916, "fixNodeLength": 79, "sourceBeforeFix": "TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "fixCommitParentSHA1": "bf9117495d878ded66f60301df07db886eab0605", "bugFilePath": "clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java", "fixPatch": "diff --git a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\nindex 964fe53..6461108 100644\n--- a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n+++ b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n@@ -111,10 +111,10 @@\n   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n-    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 114, "bugNodeStartChar": 4296, "bugNodeLength": 29, "fixLineNum": 114, "fixNodeStartChar": 4296, "fixNodeLength": 29, "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "fixCommitParentSHA1": "bf9117495d878ded66f60301df07db886eab0605", "bugFilePath": "clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java", "fixPatch": "diff --git a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\nindex 964fe53..6461108 100644\n--- a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n+++ b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n@@ -111,10 +111,10 @@\n   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n-    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 114, "bugNodeStartChar": 4296, "bugNodeLength": 29, "fixLineNum": 114, "fixNodeStartChar": 4296, "fixNodeLength": 29, "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "fixCommitParentSHA1": "bf9117495d878ded66f60301df07db886eab0605", "bugFilePath": "clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java", "fixPatch": "diff --git a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\nindex 964fe53..6461108 100644\n--- a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n+++ b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n@@ -111,10 +111,10 @@\n   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n-    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 116, "bugNodeStartChar": 4381, "bugNodeLength": 29, "fixLineNum": 116, "fixNodeStartChar": 4381, "fixNodeLength": 29, "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "fixCommitParentSHA1": "bf9117495d878ded66f60301df07db886eab0605", "bugFilePath": "clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java", "fixPatch": "diff --git a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\nindex 964fe53..6461108 100644\n--- a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n+++ b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n@@ -111,10 +111,10 @@\n   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n-    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 116, "bugNodeStartChar": 4381, "bugNodeLength": 29, "fixLineNum": 116, "fixNodeStartChar": 4381, "fixNodeLength": 29, "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "fixCommitParentSHA1": "bf9117495d878ded66f60301df07db886eab0605", "bugFilePath": "clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java", "fixPatch": "diff --git a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\nindex 964fe53..6461108 100644\n--- a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n+++ b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n@@ -111,10 +111,10 @@\n   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n-    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 118, "bugNodeStartChar": 4466, "bugNodeLength": 29, "fixLineNum": 118, "fixNodeStartChar": 4466, "fixNodeLength": 29, "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "fixCommitParentSHA1": "bf9117495d878ded66f60301df07db886eab0605", "bugFilePath": "clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java", "fixPatch": "diff --git a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\nindex 964fe53..6461108 100644\n--- a/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n+++ b/clients/unshaded/src/test/java/tachyon/client/block/BufferedBlockOutStreamTest.java\n@@ -111,10 +111,10 @@\n   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n-    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n-    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n+    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 118, "bugNodeStartChar": 4466, "bugNodeLength": 29, "fixLineNum": 118, "fixNodeStartChar": 4466, "fixNodeLength": 29, "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fdc7364eed4eb249360225153c5ced9a036f97f7", "fixCommitParentSHA1": "cf75aef6b17359273687bc110886e8c2af2e2c85", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java b/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java\nindex af29c13..2ee6ca6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java\n@@ -106,7 +106,7 @@\n    *\n    * @param masterClient a block master client to release\n    */\n-  public synchronized void releaseMasterClient(BlockMasterClient masterClient) {\n+  public void releaseMasterClient(BlockMasterClient masterClient) {\n     mBlockMasterClientPool.release(masterClient);\n   }\n \n@@ -193,7 +193,7 @@\n    * @param workerClient the worker client to release, the client should not be accessed after this\n    *        method is called\n    */\n-  public synchronized void releaseWorkerClient(WorkerClient workerClient) {\n+  public void releaseWorkerClient(WorkerClient workerClient) {\n     // If the client is local and the pool exists, release the client to the pool, otherwise just\n     // close the client.\n     if (workerClient.isLocal()) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 104, "bugNodeStartChar": 3621, "bugNodeLength": 278, "fixLineNum": 104, "fixNodeStartChar": 3621, "fixNodeLength": 265, "sourceBeforeFix": "33", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fdc7364eed4eb249360225153c5ced9a036f97f7", "fixCommitParentSHA1": "cf75aef6b17359273687bc110886e8c2af2e2c85", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java b/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java\nindex af29c13..2ee6ca6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/block/BlockStoreContext.java\n@@ -106,7 +106,7 @@\n    *\n    * @param masterClient a block master client to release\n    */\n-  public synchronized void releaseMasterClient(BlockMasterClient masterClient) {\n+  public void releaseMasterClient(BlockMasterClient masterClient) {\n     mBlockMasterClientPool.release(masterClient);\n   }\n \n@@ -193,7 +193,7 @@\n    * @param workerClient the worker client to release, the client should not be accessed after this\n    *        method is called\n    */\n-  public synchronized void releaseWorkerClient(WorkerClient workerClient) {\n+  public void releaseWorkerClient(WorkerClient workerClient) {\n     // If the client is local and the pool exists, release the client to the pool, otherwise just\n     // close the client.\n     if (workerClient.isLocal()) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 190, "bugNodeStartChar": 6991, "bugNodeLength": 748, "fixLineNum": 190, "fixNodeStartChar": 6991, "fixNodeLength": 735, "sourceBeforeFix": "33", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fdc7364eed4eb249360225153c5ced9a036f97f7", "fixCommitParentSHA1": "cf75aef6b17359273687bc110886e8c2af2e2c85", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileSystemContext.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileSystemContext.java b/clients/unshaded/src/main/java/tachyon/client/file/FileSystemContext.java\nindex 3127e70..b01cadf 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileSystemContext.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileSystemContext.java\n@@ -52,7 +52,7 @@\n    *\n    * @param masterClient a block master client to release\n    */\n-  public synchronized void releaseMasterClient(FileSystemMasterClient masterClient) {\n+  public void releaseMasterClient(FileSystemMasterClient masterClient) {\n     mFileSystemMasterClientPool.release(masterClient);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 50, "bugNodeStartChar": 1774, "bugNodeLength": 288, "fixLineNum": 50, "fixNodeStartChar": 1774, "fixNodeLength": 275, "sourceBeforeFix": "33", "sourceAfterFix": "1"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "69495db28bb98a92a4710ba2c86498bfb4005694", "fixCommitParentSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "bugFilePath": "servers/src/main/java/tachyon/worker/nio/NIODataServer.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\nindex 12340df..bf2c483 100644\n--- a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n+++ b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n@@ -157,7 +157,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     } catch (RuntimeException e) {\n@@ -167,7 +167,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 160, "bugNodeStartChar": 5692, "bugNodeLength": 47, "fixLineNum": 160, "fixNodeStartChar": 5692, "fixNodeLength": 43, "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "69495db28bb98a92a4710ba2c86498bfb4005694", "fixCommitParentSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "bugFilePath": "servers/src/main/java/tachyon/worker/nio/NIODataServer.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\nindex 12340df..bf2c483 100644\n--- a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n+++ b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n@@ -157,7 +157,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     } catch (RuntimeException e) {\n@@ -167,7 +167,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 170, "bugNodeStartChar": 6045, "bugNodeLength": 47, "fixLineNum": 170, "fixNodeStartChar": 6045, "fixNodeLength": 43, "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "fixCommitParentSHA1": "cb0dee8b09d8cd27f0b817b0317b68501fbac924", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex 989bda8..92adc88 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -121,7 +121,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -158,7 +158,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -232,7 +232,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -292,7 +292,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -318,14 +318,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 124, "bugNodeStartChar": 4810, "bugNodeLength": 89, "fixLineNum": 124, "fixNodeStartChar": 4810, "fixNodeLength": 84, "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "fixCommitParentSHA1": "cb0dee8b09d8cd27f0b817b0317b68501fbac924", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex 989bda8..92adc88 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -121,7 +121,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -158,7 +158,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -232,7 +232,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -292,7 +292,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -318,14 +318,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 160, "bugNodeStartChar": 5954, "bugNodeLength": 135, "fixLineNum": 160, "fixNodeStartChar": 5954, "fixNodeLength": 130, "sourceBeforeFix": "LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId() + \" will not be in TachyonStorage\",ioe)", "sourceAfterFix": "LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId() + \" will not be in TachyonStorage\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "fixCommitParentSHA1": "cb0dee8b09d8cd27f0b817b0317b68501fbac924", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex 989bda8..92adc88 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -121,7 +121,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -158,7 +158,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -232,7 +232,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -292,7 +292,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -318,14 +318,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 234, "bugNodeStartChar": 8498, "bugNodeLength": 128, "fixLineNum": 234, "fixNodeStartChar": 8498, "fixNodeLength": 123, "sourceBeforeFix": "LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId + \" will not be in TachyonStorage\",ioe)", "sourceAfterFix": "LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId + \" will not be in TachyonStorage\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "fixCommitParentSHA1": "cb0dee8b09d8cd27f0b817b0317b68501fbac924", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex 989bda8..92adc88 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -121,7 +121,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -158,7 +158,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -232,7 +232,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -292,7 +292,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -318,14 +318,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 294, "bugNodeStartChar": 10514, "bugNodeLength": 135, "fixLineNum": 294, "fixNodeStartChar": 10514, "fixNodeLength": 130, "sourceBeforeFix": "LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId() + \" will not be in TachyonStorage.\",ioe)", "sourceAfterFix": "LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId() + \" will not be in TachyonStorage.\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "fixCommitParentSHA1": "cb0dee8b09d8cd27f0b817b0317b68501fbac924", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex 989bda8..92adc88 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -121,7 +121,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -158,7 +158,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -232,7 +232,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -292,7 +292,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -318,14 +318,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 321, "bugNodeStartChar": 11493, "bugNodeLength": 59, "fixLineNum": 321, "fixNodeStartChar": 11493, "fixNodeLength": 54, "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "012b904de4cd02ace4283e9a4ca2ff96d6830dbc", "fixCommitParentSHA1": "9493aaeb411121affd08aeaad031f99d1970eeef", "bugFilePath": "servers/src/main/java/tachyon/web/WebInterfaceGeneralServlet.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/web/WebInterfaceGeneralServlet.java b/servers/src/main/java/tachyon/web/WebInterfaceGeneralServlet.java\nindex 3158d18..b9bca7e 100644\n--- a/servers/src/main/java/tachyon/web/WebInterfaceGeneralServlet.java\n+++ b/servers/src/main/java/tachyon/web/WebInterfaceGeneralServlet.java\n@@ -125,7 +125,7 @@\n \n     for (int ordinal = 0; ordinal < globalStorageTierAssoc.size(); ordinal ++) {\n       String tierAlias = globalStorageTierAssoc.getAlias(ordinal);\n-      if (totalBytesOnTiers.get(tierAlias) > 0) {\n+      if (totalBytesOnTiers.containsKey(tierAlias) && totalBytesOnTiers.get(tierAlias) > 0) {\n         StorageTierInfo info =\n             new StorageTierInfo(tierAlias, totalBytesOnTiers.get(tierAlias),\n                 usedBytesOnTiers.get(tierAlias));\n", "projectName": "Alluxio.alluxio", "bugLineNum": 128, "bugNodeStartChar": 4449, "bugNodeLength": 36, "fixLineNum": 128, "fixNodeStartChar": 4449, "fixNodeLength": 80, "sourceBeforeFix": "totalBytesOnTiers.get(tierAlias) > 0", "sourceAfterFix": "totalBytesOnTiers.containsKey(tierAlias) && totalBytesOnTiers.get(tierAlias) > 0"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "317b247a1fff90a1cc50d51f548d116221caf99a", "fixCommitParentSHA1": "3ec86771c517dcca322b7e327616f9d3cf945344", "bugFilePath": "clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java b/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\nindex 9472871..4b64b50 100644\n--- a/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\n@@ -212,7 +212,7 @@\n     }\n     TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));\n     DeleteOptions options =\n-        new DeleteOptions.Builder(ClientContext.getConf()).setRecursive(recursive).build();\n+        new DeleteOptions.Builder().setRecursive(recursive).build();\n     try {\n       TachyonFile file = mTFS.open(path);\n       mTFS.delete(file, options);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 215, "bugNodeStartChar": 8712, "bugNodeLength": 50, "fixLineNum": 215, "fixNodeStartChar": 8712, "fixNodeLength": 27, "sourceBeforeFix": "new DeleteOptions.Builder(ClientContext.getConf())", "sourceAfterFix": "new DeleteOptions.Builder()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "b7538f86b1c74b5a3931f8913408ec01fa5bff9a", "fixCommitParentSHA1": "27ca72cbf0394f38b591409d8067e39918bf7031", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex e56294b..8c533a3 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -117,7 +117,8 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId()\n+            + \" could not be cached into Tachyon. Exception:\" + ioe.getMessage());\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -154,7 +155,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage. Exception:\" + ioe.getMessage());\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -229,7 +230,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage. Exception:\" + ioe.getMessage());\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -290,7 +291,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage. Exception:\" + ioe.getMessage());\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -316,14 +317,15 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead. Exception:\"\n+          + ioe.getMessage());\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 319, "bugNodeStartChar": 11191, "bugNodeLength": 59, "fixLineNum": 319, "fixNodeStartChar": 11191, "fixNodeLength": 54, "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c52a1c0a05eff87f4f5c36c2979c09513903c262", "fixCommitParentSHA1": "fd7a9a5269161d15c8f305cb47765e12f7bface7", "bugFilePath": "integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\nindex 7f50ea1..a9ad2e0 100644\n--- a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n@@ -83,7 +83,7 @@\n \n     mTfs.setState(file, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // Pinning a folder should recursively pin subfolders.\n     mTfs.setState(dir, mSetPinned);\n@@ -94,7 +94,7 @@\n     // Same with unpinning.\n     mTfs.setState(dir0, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // The last pin command always wins.\n     mTfs.setState(file, mSetPinned);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 86, "bugNodeStartChar": 3319, "bugNodeLength": 26, "fixLineNum": 86, "fixNodeStartChar": 3319, "fixNodeLength": 23, "sourceBeforeFix": "Sets.<Integer>newHashSet()", "sourceAfterFix": "Sets.<Long>newHashSet()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c52a1c0a05eff87f4f5c36c2979c09513903c262", "fixCommitParentSHA1": "fd7a9a5269161d15c8f305cb47765e12f7bface7", "bugFilePath": "integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\nindex 7f50ea1..a9ad2e0 100644\n--- a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n@@ -83,7 +83,7 @@\n \n     mTfs.setState(file, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // Pinning a folder should recursively pin subfolders.\n     mTfs.setState(dir, mSetPinned);\n@@ -94,7 +94,7 @@\n     // Same with unpinning.\n     mTfs.setState(dir0, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // The last pin command always wins.\n     mTfs.setState(file, mSetPinned);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 97, "bugNodeStartChar": 3803, "bugNodeLength": 26, "fixLineNum": 97, "fixNodeStartChar": 3803, "fixNodeLength": 23, "sourceBeforeFix": "Sets.<Integer>newHashSet()", "sourceAfterFix": "Sets.<Long>newHashSet()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53e1975f9795693cfd3819b8462f1fffa5f1ddd1", "fixCommitParentSHA1": "fd7a9a5269161d15c8f305cb47765e12f7bface7", "bugFilePath": "integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\nindex 7f50ea1..a9ad2e0 100644\n--- a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n@@ -83,7 +83,7 @@\n \n     mTfs.setState(file, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // Pinning a folder should recursively pin subfolders.\n     mTfs.setState(dir, mSetPinned);\n@@ -94,7 +94,7 @@\n     // Same with unpinning.\n     mTfs.setState(dir0, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // The last pin command always wins.\n     mTfs.setState(file, mSetPinned);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 86, "bugNodeStartChar": 3319, "bugNodeLength": 26, "fixLineNum": 86, "fixNodeStartChar": 3319, "fixNodeLength": 23, "sourceBeforeFix": "Sets.<Integer>newHashSet()", "sourceAfterFix": "Sets.<Long>newHashSet()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53e1975f9795693cfd3819b8462f1fffa5f1ddd1", "fixCommitParentSHA1": "fd7a9a5269161d15c8f305cb47765e12f7bface7", "bugFilePath": "integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\nindex 7f50ea1..a9ad2e0 100644\n--- a/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/PinIntegrationTest.java\n@@ -83,7 +83,7 @@\n \n     mTfs.setState(file, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // Pinning a folder should recursively pin subfolders.\n     mTfs.setState(dir, mSetPinned);\n@@ -94,7 +94,7 @@\n     // Same with unpinning.\n     mTfs.setState(dir0, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n-    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n+    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n \n     // The last pin command always wins.\n     mTfs.setState(file, mSetPinned);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 97, "bugNodeStartChar": 3803, "bugNodeLength": 26, "fixLineNum": 97, "fixNodeStartChar": 3803, "fixNodeLength": 23, "sourceBeforeFix": "Sets.<Integer>newHashSet()", "sourceAfterFix": "Sets.<Long>newHashSet()"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "fixCommitParentSHA1": "3d69798bd9c72b39558844554a2b2915567d1077", "bugFilePath": "servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java b/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\nindex 81f3310..74ddffa 100644\n--- a/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\n+++ b/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\n@@ -105,12 +105,12 @@\n   }\n \n   @Test\n-  public void reportLostFileTest() {\n+  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n \n-    mLineageStore.requestFilePersistence(fileId);\n+    mLineageStore.reportLostFile(fileId);\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 107, "bugNodeStartChar": 3942, "bugNodeLength": 268, "fixLineNum": 107, "fixNodeStartChar": 3942, "fixNodeLength": 304, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "fixCommitParentSHA1": "3d69798bd9c72b39558844554a2b2915567d1077", "bugFilePath": "servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java b/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\nindex 81f3310..74ddffa 100644\n--- a/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\n+++ b/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\n@@ -105,12 +105,12 @@\n   }\n \n   @Test\n-  public void reportLostFileTest() {\n+  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n \n-    mLineageStore.requestFilePersistence(fileId);\n+    mLineageStore.reportLostFile(fileId);\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 113, "bugNodeStartChar": 4161, "bugNodeLength": 44, "fixLineNum": 113, "fixNodeStartChar": 4161, "fixNodeLength": 36, "sourceBeforeFix": "mLineageStore.requestFilePersistence(fileId)", "sourceAfterFix": "mLineageStore.reportLostFile(fileId)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "fixCommitParentSHA1": "3d69798bd9c72b39558844554a2b2915567d1077", "bugFilePath": "servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java b/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\nindex 81f3310..74ddffa 100644\n--- a/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\n+++ b/servers/src/test/java/tachyon/master/lineage/meta/LineageStoreTest.java\n@@ -105,12 +105,12 @@\n   }\n \n   @Test\n-  public void reportLostFileTest() {\n+  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n \n-    mLineageStore.requestFilePersistence(fileId);\n+    mLineageStore.reportLostFile(fileId);\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 113, "bugNodeStartChar": 4161, "bugNodeLength": 44, "fixLineNum": 113, "fixNodeStartChar": 4161, "fixNodeLength": 36, "sourceBeforeFix": "mLineageStore.requestFilePersistence(fileId)", "sourceAfterFix": "mLineageStore.reportLostFile(fileId)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "cdd0fd89f2781fae8b868c7f11b73179d8847cf3", "fixCommitParentSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "bugFilePath": "servers/src/main/java/tachyon/worker/nio/NIODataServer.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\nindex 12340df..bf2c483 100644\n--- a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n+++ b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n@@ -157,7 +157,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     } catch (RuntimeException e) {\n@@ -167,7 +167,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 160, "bugNodeStartChar": 5692, "bugNodeLength": 47, "fixLineNum": 160, "fixNodeStartChar": 5692, "fixNodeLength": 43, "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "cdd0fd89f2781fae8b868c7f11b73179d8847cf3", "fixCommitParentSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "bugFilePath": "servers/src/main/java/tachyon/worker/nio/NIODataServer.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\nindex 12340df..bf2c483 100644\n--- a/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n+++ b/servers/src/main/java/tachyon/worker/nio/NIODataServer.java\n@@ -157,7 +157,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     } catch (RuntimeException e) {\n@@ -167,7 +167,7 @@\n         socketSelector.close();\n       } catch (IOException ex) {\n         // ignore, we want the other exception\n-        LOG.warn(\"Unable to close socket selector\", ex);\n+        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 170, "bugNodeStartChar": 6045, "bugNodeLength": 47, "fixLineNum": 170, "fixNodeStartChar": 6045, "fixNodeLength": 43, "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "fixCommitParentSHA1": "af38b55b3c5e9bf2bd5fbe08f68e1d659340c66a", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex e56294b..547d8e6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -117,7 +117,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -154,7 +154,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -229,7 +229,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -290,7 +290,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -316,14 +316,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 120, "bugNodeStartChar": 4387, "bugNodeLength": 89, "fixLineNum": 120, "fixNodeStartChar": 4387, "fixNodeLength": 84, "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "fixCommitParentSHA1": "af38b55b3c5e9bf2bd5fbe08f68e1d659340c66a", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex e56294b..547d8e6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -117,7 +117,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -154,7 +154,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -229,7 +229,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -290,7 +290,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -316,14 +316,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 156, "bugNodeStartChar": 5575, "bugNodeLength": 135, "fixLineNum": 156, "fixNodeStartChar": 5575, "fixNodeLength": 130, "sourceBeforeFix": "LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId() + \" will not be in TachyonStorage\",ioe)", "sourceAfterFix": "LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId() + \" will not be in TachyonStorage\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "fixCommitParentSHA1": "af38b55b3c5e9bf2bd5fbe08f68e1d659340c66a", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex e56294b..547d8e6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -117,7 +117,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -154,7 +154,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -229,7 +229,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -290,7 +290,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -316,14 +316,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 231, "bugNodeStartChar": 8168, "bugNodeLength": 128, "fixLineNum": 231, "fixNodeStartChar": 8168, "fixNodeLength": 123, "sourceBeforeFix": "LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId + \" will not be in TachyonStorage\",ioe)", "sourceAfterFix": "LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId + \" will not be in TachyonStorage\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "fixCommitParentSHA1": "af38b55b3c5e9bf2bd5fbe08f68e1d659340c66a", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex e56294b..547d8e6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -117,7 +117,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -154,7 +154,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -229,7 +229,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -290,7 +290,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -316,14 +316,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 292, "bugNodeStartChar": 10212, "bugNodeLength": 135, "fixLineNum": 292, "fixNodeStartChar": 10212, "fixNodeLength": 130, "sourceBeforeFix": "LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId() + \" will not be in TachyonStorage.\",ioe)", "sourceAfterFix": "LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId() + \" will not be in TachyonStorage.\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "fixCommitParentSHA1": "af38b55b3c5e9bf2bd5fbe08f68e1d659340c66a", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\nindex e56294b..547d8e6 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/FileInStream.java\n@@ -117,7 +117,7 @@\n       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n-        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n+        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }\n@@ -154,7 +154,7 @@\n           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -229,7 +229,7 @@\n                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n-              + \" will not be in TachyonStorage\", ioe);\n+              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }\n@@ -290,7 +290,7 @@\n                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n-              + \" will not be in TachyonStorage.\", ioe);\n+              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {\n@@ -316,14 +316,14 @@\n           mContext.getTachyonBlockStore().promote(blockId);\n         } catch (IOException ioe) {\n           // Failed to promote\n-          LOG.warn(\"Promotion of block \" + blockId + \" failed.\", ioe);\n+          LOG.warn(\"Promotion of block \" + blockId + \" failed.\");\n         }\n       }\n       mCurrentBlockInStream = mContext.getTachyonBlockStore().getInStream(blockId);\n       mShouldCacheCurrentBlock =\n           !(mCurrentBlockInStream instanceof LocalBlockInStream) && mTachyonStorageType.isStore();\n     } catch (IOException ioe) {\n-      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead\", ioe);\n+      LOG.debug(\"Failed to get BlockInStream for \" + blockId + \", using ufs instead.\");\n       if (!mFileInfo.isPersisted) {\n         LOG.error(\"Could not obtain data for \" + blockId\n             + \" from Tachyon and data is not persisted in under storage.\");\n", "projectName": "Alluxio.alluxio", "bugLineNum": 319, "bugNodeStartChar": 11191, "bugNodeLength": 59, "fixLineNum": 319, "fixNodeStartChar": 11191, "fixNodeLength": 54, "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "01342c05f2391a5b2c39b44a8ec162b010126911", "fixCommitParentSHA1": "fdc99ae61241e318b4cf0bbe79ee45a693d4e0a1", "bugFilePath": "common/src/main/java/tachyon/security/authorization/FsAction.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/security/authorization/FsAction.java b/common/src/main/java/tachyon/security/authorization/FsAction.java\nindex a35b659..3c2cc4c 100644\n--- a/common/src/main/java/tachyon/security/authorization/FsAction.java\n+++ b/common/src/main/java/tachyon/security/authorization/FsAction.java\n@@ -16,10 +16,9 @@\n package tachyon.security.authorization;\n \n /**\n- * File system actions, e.g. read, write, etc.\n+ * POSIX style file system actions, e.g. read, write, etc.\n  */\n public enum FsAction {\n-  // POSIX style\n   NONE(\"---\"),\n   EXECUTE(\"--x\"),\n   WRITE(\"-w-\"),\n@@ -35,7 +34,7 @@\n   /** Retain reference to value array. */\n   private static final FsAction[] SVALS = values();\n \n-  private FsAction(String s) {\n+  FsAction(String s) {\n     mSymbol = s;\n   }\n \n@@ -44,7 +43,7 @@\n   }\n \n   /**\n-   * Return true if this action implies that action.\n+   * Returns true if this action implies that action.\n    * @param that\n    */\n   public boolean implies(FsAction that) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1239, "bugNodeLength": 49, "fixLineNum": 38, "fixNodeStartChar": 1239, "fixNodeLength": 41, "sourceBeforeFix": "2", "sourceAfterFix": "0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "fixCommitParentSHA1": "d270efec54ded62e16551d067cc6e439bb43f8d4", "bugFilePath": "servers/src/main/java/tachyon/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\nindex 3d98dba..96dd724 100644\n--- a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n+++ b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n@@ -255,7 +255,7 @@\n       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -282,7 +282,7 @@\n               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -545,7 +545,7 @@\n         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n-          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n+          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 258, "bugNodeStartChar": 10127, "bugNodeLength": 43, "fixLineNum": 258, "fixNodeStartChar": 10127, "fixNodeLength": 44, "sourceBeforeFix": "mMountTable.resolve(getPath(dir)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(dir)).toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "fixCommitParentSHA1": "d270efec54ded62e16551d067cc6e439bb43f8d4", "bugFilePath": "servers/src/main/java/tachyon/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\nindex 3d98dba..96dd724 100644\n--- a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n+++ b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n@@ -255,7 +255,7 @@\n       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -282,7 +282,7 @@\n               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -545,7 +545,7 @@\n         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n-          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n+          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 258, "bugNodeStartChar": 10127, "bugNodeLength": 43, "fixLineNum": 258, "fixNodeStartChar": 10127, "fixNodeLength": 44, "sourceBeforeFix": "mMountTable.resolve(getPath(dir)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(dir)).toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "fixCommitParentSHA1": "d270efec54ded62e16551d067cc6e439bb43f8d4", "bugFilePath": "servers/src/main/java/tachyon/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\nindex 3d98dba..96dd724 100644\n--- a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n+++ b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n@@ -255,7 +255,7 @@\n       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -282,7 +282,7 @@\n               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -545,7 +545,7 @@\n         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n-          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n+          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 285, "bugNodeStartChar": 11321, "bugNodeLength": 49, "fixLineNum": 285, "fixNodeStartChar": 11321, "fixNodeLength": 50, "sourceBeforeFix": "mMountTable.resolve(getPath(lastInode)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(lastInode)).toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "fixCommitParentSHA1": "d270efec54ded62e16551d067cc6e439bb43f8d4", "bugFilePath": "servers/src/main/java/tachyon/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\nindex 3d98dba..96dd724 100644\n--- a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n+++ b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n@@ -255,7 +255,7 @@\n       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -282,7 +282,7 @@\n               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -545,7 +545,7 @@\n         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n-          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n+          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 285, "bugNodeStartChar": 11321, "bugNodeLength": 49, "fixLineNum": 285, "fixNodeStartChar": 11321, "fixNodeLength": 50, "sourceBeforeFix": "mMountTable.resolve(getPath(lastInode)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(lastInode)).toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "fixCommitParentSHA1": "d270efec54ded62e16551d067cc6e439bb43f8d4", "bugFilePath": "servers/src/main/java/tachyon/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\nindex 3d98dba..96dd724 100644\n--- a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n+++ b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n@@ -255,7 +255,7 @@\n       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -282,7 +282,7 @@\n               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -545,7 +545,7 @@\n         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n-          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n+          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 548, "bugNodeStartChar": 21158, "bugNodeLength": 44, "fixLineNum": 548, "fixNodeStartChar": 21158, "fixNodeLength": 45, "sourceBeforeFix": "mMountTable.resolve(getPath(next)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(next)).toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "fixCommitParentSHA1": "d270efec54ded62e16551d067cc6e439bb43f8d4", "bugFilePath": "servers/src/main/java/tachyon/master/file/meta/InodeTree.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\nindex 3d98dba..96dd724 100644\n--- a/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n+++ b/servers/src/main/java/tachyon/master/file/meta/InodeTree.java\n@@ -255,7 +255,7 @@\n       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -282,7 +282,7 @@\n               .setParentId(currentInodeDirectory.getId()).setPersisted(options.isPersisted())\n               .build();\n       if (options.isPersisted()) {\n-        String ufsPath = mMountTable.resolve(getPath(lastInode)).getPath();\n+        String ufsPath = mMountTable.resolve(getPath(lastInode)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }\n@@ -545,7 +545,7 @@\n         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n-          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n+          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 548, "bugNodeStartChar": 21158, "bugNodeLength": 44, "fixLineNum": 548, "fixNodeStartChar": 21158, "fixNodeLength": 45, "sourceBeforeFix": "mMountTable.resolve(getPath(next)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(next)).toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "27926aec754ac2e06ec988e82d2a02c858e9a113", "fixCommitParentSHA1": "3209081dbd4f8a77ee498ab1f1440fddb17f9b2e", "bugFilePath": "servers/src/main/java/tachyon/master/block/BlockMaster.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/block/BlockMaster.java b/servers/src/main/java/tachyon/master/block/BlockMaster.java\nindex 8c21c6a..508207b 100644\n--- a/servers/src/main/java/tachyon/master/block/BlockMaster.java\n+++ b/servers/src/main/java/tachyon/master/block/BlockMaster.java\n@@ -613,7 +613,7 @@\n    * @return the lost blocks in Tachyon Storage\n    */\n   public Set<Long> getLostBlocks() {\n-    synchronized (mLostBlocks) {\n+    synchronized (mBlocks) {\n       return ImmutableSet.copyOf(mLostBlocks);\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 616, "bugNodeStartChar": 22953, "bugNodeLength": 81, "fixLineNum": 616, "fixNodeStartChar": 22953, "fixNodeLength": 77, "sourceBeforeFix": "synchronized (mLostBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } ", "sourceAfterFix": "synchronized (mBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c4cdb163930b5890aa5c15f3161baa607545a129", "fixCommitParentSHA1": "c31c9ed0fc9b43bfa472da8d5ff2f5352f2da189", "bugFilePath": "servers/src/main/java/tachyon/worker/block/TieredBlockStore.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\nindex d971cd9..93c0ce1 100644\n--- a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n+++ b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n@@ -292,7 +292,7 @@\n   @Override\n   public void removeBlock(long sessionId, long blockId) throws InvalidStateException,\n       NotFoundException, IOException {\n-    removeBlockInternal(sessionId, blockId, BlockStoreLocation.anyTier());\n+    removeBlock(sessionId, blockId, BlockStoreLocation.anyTier());\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 295, "bugNodeStartChar": 12502, "bugNodeLength": 69, "fixLineNum": 295, "fixNodeStartChar": 12502, "fixNodeLength": 61, "sourceBeforeFix": "removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())", "sourceAfterFix": "removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c4cdb163930b5890aa5c15f3161baa607545a129", "fixCommitParentSHA1": "c31c9ed0fc9b43bfa472da8d5ff2f5352f2da189", "bugFilePath": "servers/src/main/java/tachyon/worker/block/TieredBlockStore.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\nindex d971cd9..93c0ce1 100644\n--- a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n+++ b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n@@ -292,7 +292,7 @@\n   @Override\n   public void removeBlock(long sessionId, long blockId) throws InvalidStateException,\n       NotFoundException, IOException {\n-    removeBlockInternal(sessionId, blockId, BlockStoreLocation.anyTier());\n+    removeBlock(sessionId, blockId, BlockStoreLocation.anyTier());\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 295, "bugNodeStartChar": 12502, "bugNodeLength": 69, "fixLineNum": 295, "fixNodeStartChar": 12502, "fixNodeLength": 61, "sourceBeforeFix": "removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())", "sourceAfterFix": "removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e09fdb31c026b85f72ea1ce930e33fa3a87d2844", "fixCommitParentSHA1": "c31c9ed0fc9b43bfa472da8d5ff2f5352f2da189", "bugFilePath": "servers/src/main/java/tachyon/worker/block/TieredBlockStore.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\nindex d971cd9..93c0ce1 100644\n--- a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n+++ b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n@@ -292,7 +292,7 @@\n   @Override\n   public void removeBlock(long sessionId, long blockId) throws InvalidStateException,\n       NotFoundException, IOException {\n-    removeBlockInternal(sessionId, blockId, BlockStoreLocation.anyTier());\n+    removeBlock(sessionId, blockId, BlockStoreLocation.anyTier());\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 295, "bugNodeStartChar": 12502, "bugNodeLength": 69, "fixLineNum": 295, "fixNodeStartChar": 12502, "fixNodeLength": 61, "sourceBeforeFix": "removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())", "sourceAfterFix": "removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e09fdb31c026b85f72ea1ce930e33fa3a87d2844", "fixCommitParentSHA1": "c31c9ed0fc9b43bfa472da8d5ff2f5352f2da189", "bugFilePath": "servers/src/main/java/tachyon/worker/block/TieredBlockStore.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\nindex d971cd9..93c0ce1 100644\n--- a/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n+++ b/servers/src/main/java/tachyon/worker/block/TieredBlockStore.java\n@@ -292,7 +292,7 @@\n   @Override\n   public void removeBlock(long sessionId, long blockId) throws InvalidStateException,\n       NotFoundException, IOException {\n-    removeBlockInternal(sessionId, blockId, BlockStoreLocation.anyTier());\n+    removeBlock(sessionId, blockId, BlockStoreLocation.anyTier());\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 295, "bugNodeStartChar": 12502, "bugNodeLength": 69, "fixLineNum": 295, "fixNodeStartChar": 12502, "fixNodeLength": 61, "sourceBeforeFix": "removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())", "sourceAfterFix": "removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dccb390a5a84c7125eab016f4e2ce56f5fde55f4", "fixCommitParentSHA1": "5c387a9552c95f3752c0402a8cebc41599a76bb2", "bugFilePath": "integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java b/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java\nindex 996e92a..3f33e0c 100644\n--- a/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java\n@@ -227,13 +227,12 @@\n   /**\n    * Test writing to a file and specify the location to be localhost.\n    *\n-   * @throws IOException\n-   * @throws InterruptedException\n+   * @throws IOException if file can not be opened successfully.\n    */\n   @Test\n-  public void writeSpecifyLocalTest() throws IOException, InterruptedException {\n+  public void writeSpecifyLocalTest() throws IOException {\n     TachyonURI filePath = new TachyonURI(PathUtils.uniqPath());\n-    int len = 2;\n+    final int len = 2;\n     FileOutStream os = mTfs.getOutStream(filePath, sWriteLocal);\n     os.write((byte) 0);\n     os.write((byte) 1);\n@@ -251,7 +250,7 @@\n   @Test\n   public void longWriteChangesSessionId() throws IOException, InterruptedException {\n     TachyonURI filePath = new TachyonURI(PathUtils.uniqPath());\n-    int len = 2;\n+    final int len = 2;\n     FileOutStream os = mTfs.getOutStream(filePath, sWriteUnderStore);\n     os.write((byte) 0);\n     Thread.sleep(mMasterTachyonConf.getInt(Constants.USER_HEARTBEAT_INTERVAL_MS) * 2);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 236, "bugNodeStartChar": 9024, "bugNodeLength": 12, "fixLineNum": 236, "fixNodeStartChar": 9024, "fixNodeLength": 18, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dccb390a5a84c7125eab016f4e2ce56f5fde55f4", "fixCommitParentSHA1": "5c387a9552c95f3752c0402a8cebc41599a76bb2", "bugFilePath": "integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java b/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java\nindex 996e92a..3f33e0c 100644\n--- a/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/client/FileOutStreamIntegrationTest.java\n@@ -227,13 +227,12 @@\n   /**\n    * Test writing to a file and specify the location to be localhost.\n    *\n-   * @throws IOException\n-   * @throws InterruptedException\n+   * @throws IOException if file can not be opened successfully.\n    */\n   @Test\n-  public void writeSpecifyLocalTest() throws IOException, InterruptedException {\n+  public void writeSpecifyLocalTest() throws IOException {\n     TachyonURI filePath = new TachyonURI(PathUtils.uniqPath());\n-    int len = 2;\n+    final int len = 2;\n     FileOutStream os = mTfs.getOutStream(filePath, sWriteLocal);\n     os.write((byte) 0);\n     os.write((byte) 1);\n@@ -251,7 +250,7 @@\n   @Test\n   public void longWriteChangesSessionId() throws IOException, InterruptedException {\n     TachyonURI filePath = new TachyonURI(PathUtils.uniqPath());\n-    int len = 2;\n+    final int len = 2;\n     FileOutStream os = mTfs.getOutStream(filePath, sWriteUnderStore);\n     os.write((byte) 0);\n     Thread.sleep(mMasterTachyonConf.getInt(Constants.USER_HEARTBEAT_INTERVAL_MS) * 2);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 254, "bugNodeStartChar": 9615, "bugNodeLength": 12, "fixLineNum": 254, "fixNodeStartChar": 9615, "fixNodeLength": 18, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f9618973978c704705ba657cf196370c2364c779", "fixCommitParentSHA1": "ffb5c378292b93c99ec3315c619c4090728de1be", "bugFilePath": "shell/src/main/java/tachyon/shell/TFsShell.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/TFsShell.java b/shell/src/main/java/tachyon/shell/TFsShell.java\nindex 76a4aec..d69c776 100644\n--- a/shell/src/main/java/tachyon/shell/TFsShell.java\n+++ b/shell/src/main/java/tachyon/shell/TFsShell.java\n@@ -932,7 +932,7 @@\n    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n-      mTfs.setPin(mTfs.open(path), true);\n+      mTfs.unpin(mTfs.open(path));\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 935, "bugNodeStartChar": 29537, "bugNodeLength": 34, "fixLineNum": 935, "fixNodeStartChar": 29537, "fixNodeLength": 27, "sourceBeforeFix": "mTfs.setPin(mTfs.open(path),true)", "sourceAfterFix": "mTfs.unpin(mTfs.open(path))"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "ad3c1adb1c911a348c35bec42a1ec102de7dfdde", "fixCommitParentSHA1": "eeeb5b726698f1230b45c9eaae9699b4eccb28ed", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\nindex fabf8ea..c30cc34 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n@@ -99,8 +99,8 @@\n   }\n \n   /**\n-   * Convenience method for delete with recursive set. This is the same as calling delete(file,\n-   * true).\n+   * Convenience method for delete without recursive set. This is the same as calling delete(file,\n+   * false).\n    *\n    * @param file the handler for the file to delete recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space\n@@ -111,7 +111,7 @@\n   }\n \n   /**\n-   * Convenience method for free with recursive set. This is the same as calling free(file, true).\n+   * Convenience method for free without recursive set. This is the same as calling free(file, false).\n    *\n    * @param file the handler for the file to free recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space\n@@ -228,7 +228,7 @@\n    * @throws IOException if the master fails to pin the file\n    */\n   public void pin(TachyonFile file) throws FileDoesNotExistException, IOException {\n-    setPin(file, false);\n+    setPin(file, true);\n   }\n \n   // TODO: Move this to lineage client\n", "projectName": "Alluxio.alluxio", "bugLineNum": 231, "bugNodeStartChar": 10071, "bugNodeLength": 19, "fixLineNum": 231, "fixNodeStartChar": 10071, "fixNodeLength": 18, "sourceBeforeFix": "setPin(file,false)", "sourceAfterFix": "setPin(file,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "eeeb5b726698f1230b45c9eaae9699b4eccb28ed", "fixCommitParentSHA1": "cab435fce36bf0c77cc49faccac572f86c2214e8", "bugFilePath": "integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\nindex 45312b5..7b9e29b 100644\n--- a/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\n@@ -193,18 +193,18 @@\n   public void DeleteTest() throws Exception {\n     for (int i = 0; i < 10; i ++) {\n       String dirPath = \"/i\" + i;\n-      mTfs.mkdirs(new TachyonURI(dirPath));\n+      mTfs.mkdirs(new TachyonURI(dirPath), true);\n       for (int j = 0; j < 10; j ++) {\n         ClientOptions option =\n             new ClientOptions.Builder(mMasterTachyonConf).setBlockSize((i + j + 1) * 64).build();\n         String filePath = dirPath + \"/j\" + j;\n         mTfs.getOutStream(new TachyonURI(filePath), option).close();\n         if (j >= 5) {\n-          mTfs.delete(mTfs.open(new TachyonURI(filePath)));\n+          mTfs.delete(mTfs.open(new TachyonURI(filePath)), true);\n         }\n       }\n       if (i >= 5) {\n-        mTfs.delete(mTfs.open(new TachyonURI(dirPath)));\n+        mTfs.delete(mTfs.open(new TachyonURI(dirPath)), true);\n       }\n     }\n     mLocalTachyonCluster.stopTFS();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 196, "bugNodeStartChar": 7427, "bugNodeLength": 36, "fixLineNum": 196, "fixNodeStartChar": 7427, "fixNodeLength": 42, "sourceBeforeFix": "mTfs.mkdirs(new TachyonURI(dirPath))", "sourceAfterFix": "mTfs.mkdirs(new TachyonURI(dirPath),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "eeeb5b726698f1230b45c9eaae9699b4eccb28ed", "fixCommitParentSHA1": "cab435fce36bf0c77cc49faccac572f86c2214e8", "bugFilePath": "integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\nindex 45312b5..7b9e29b 100644\n--- a/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\n@@ -193,18 +193,18 @@\n   public void DeleteTest() throws Exception {\n     for (int i = 0; i < 10; i ++) {\n       String dirPath = \"/i\" + i;\n-      mTfs.mkdirs(new TachyonURI(dirPath));\n+      mTfs.mkdirs(new TachyonURI(dirPath), true);\n       for (int j = 0; j < 10; j ++) {\n         ClientOptions option =\n             new ClientOptions.Builder(mMasterTachyonConf).setBlockSize((i + j + 1) * 64).build();\n         String filePath = dirPath + \"/j\" + j;\n         mTfs.getOutStream(new TachyonURI(filePath), option).close();\n         if (j >= 5) {\n-          mTfs.delete(mTfs.open(new TachyonURI(filePath)));\n+          mTfs.delete(mTfs.open(new TachyonURI(filePath)), true);\n         }\n       }\n       if (i >= 5) {\n-        mTfs.delete(mTfs.open(new TachyonURI(dirPath)));\n+        mTfs.delete(mTfs.open(new TachyonURI(dirPath)), true);\n       }\n     }\n     mLocalTachyonCluster.stopTFS();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 203, "bugNodeStartChar": 7779, "bugNodeLength": 48, "fixLineNum": 203, "fixNodeStartChar": 7779, "fixNodeLength": 54, "sourceBeforeFix": "mTfs.delete(mTfs.open(new TachyonURI(filePath)))", "sourceAfterFix": "mTfs.delete(mTfs.open(new TachyonURI(filePath)),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "eeeb5b726698f1230b45c9eaae9699b4eccb28ed", "fixCommitParentSHA1": "cab435fce36bf0c77cc49faccac572f86c2214e8", "bugFilePath": "integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\nindex 45312b5..7b9e29b 100644\n--- a/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/JournalIntegrationTest.java\n@@ -193,18 +193,18 @@\n   public void DeleteTest() throws Exception {\n     for (int i = 0; i < 10; i ++) {\n       String dirPath = \"/i\" + i;\n-      mTfs.mkdirs(new TachyonURI(dirPath));\n+      mTfs.mkdirs(new TachyonURI(dirPath), true);\n       for (int j = 0; j < 10; j ++) {\n         ClientOptions option =\n             new ClientOptions.Builder(mMasterTachyonConf).setBlockSize((i + j + 1) * 64).build();\n         String filePath = dirPath + \"/j\" + j;\n         mTfs.getOutStream(new TachyonURI(filePath), option).close();\n         if (j >= 5) {\n-          mTfs.delete(mTfs.open(new TachyonURI(filePath)));\n+          mTfs.delete(mTfs.open(new TachyonURI(filePath)), true);\n         }\n       }\n       if (i >= 5) {\n-        mTfs.delete(mTfs.open(new TachyonURI(dirPath)));\n+        mTfs.delete(mTfs.open(new TachyonURI(dirPath)), true);\n       }\n     }\n     mLocalTachyonCluster.stopTFS();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 207, "bugNodeStartChar": 7875, "bugNodeLength": 47, "fixLineNum": 207, "fixNodeStartChar": 7875, "fixNodeLength": 53, "sourceBeforeFix": "mTfs.delete(mTfs.open(new TachyonURI(dirPath)))", "sourceAfterFix": "mTfs.delete(mTfs.open(new TachyonURI(dirPath)),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "fixCommitParentSHA1": "3dc1389f687b886d6c2cff0acdb1dcac0bc8a57c", "bugFilePath": "shell/src/main/java/tachyon/shell/TFsShell.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/TFsShell.java b/shell/src/main/java/tachyon/shell/TFsShell.java\nindex 0f44ed0..76a4aec 100644\n--- a/shell/src/main/java/tachyon/shell/TFsShell.java\n+++ b/shell/src/main/java/tachyon/shell/TFsShell.java\n@@ -497,7 +497,7 @@\n    */\n   public int mkdir(TachyonURI path) {\n     try {\n-      mTfs.mkdirs(path);\n+      mTfs.mkdirs(path, true);\n       System.out.println(\"Successfully created directory \" + path);\n       return 0;\n     } catch (IOException ioe) {\n@@ -717,7 +717,7 @@\n    */\n   public int rmr(TachyonURI path) {\n     try {\n-      mTfs.delete(mTfs.open(path));\n+      mTfs.delete(mTfs.open(path), true);\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {\n@@ -932,7 +932,7 @@\n    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n-      mTfs.setPin(mTfs.open(path), false);\n+      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {\n@@ -943,7 +943,8 @@\n   }\n \n   /**\n-   * Free the file or Folder from tachyon in-memory specified by argv\n+   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n+   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.\n@@ -951,7 +952,7 @@\n    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n-      mTfs.free(mTfs.open(path));\n+      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 500, "bugNodeStartChar": 15740, "bugNodeLength": 17, "fixLineNum": 500, "fixNodeStartChar": 15740, "fixNodeLength": 23, "sourceBeforeFix": "mTfs.mkdirs(path)", "sourceAfterFix": "mTfs.mkdirs(path,true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "fixCommitParentSHA1": "3dc1389f687b886d6c2cff0acdb1dcac0bc8a57c", "bugFilePath": "shell/src/main/java/tachyon/shell/TFsShell.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/TFsShell.java b/shell/src/main/java/tachyon/shell/TFsShell.java\nindex 0f44ed0..76a4aec 100644\n--- a/shell/src/main/java/tachyon/shell/TFsShell.java\n+++ b/shell/src/main/java/tachyon/shell/TFsShell.java\n@@ -497,7 +497,7 @@\n    */\n   public int mkdir(TachyonURI path) {\n     try {\n-      mTfs.mkdirs(path);\n+      mTfs.mkdirs(path, true);\n       System.out.println(\"Successfully created directory \" + path);\n       return 0;\n     } catch (IOException ioe) {\n@@ -717,7 +717,7 @@\n    */\n   public int rmr(TachyonURI path) {\n     try {\n-      mTfs.delete(mTfs.open(path));\n+      mTfs.delete(mTfs.open(path), true);\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {\n@@ -932,7 +932,7 @@\n    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n-      mTfs.setPin(mTfs.open(path), false);\n+      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {\n@@ -943,7 +943,8 @@\n   }\n \n   /**\n-   * Free the file or Folder from tachyon in-memory specified by argv\n+   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n+   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.\n@@ -951,7 +952,7 @@\n    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n-      mTfs.free(mTfs.open(path));\n+      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 720, "bugNodeStartChar": 22594, "bugNodeLength": 28, "fixLineNum": 720, "fixNodeStartChar": 22594, "fixNodeLength": 34, "sourceBeforeFix": "mTfs.delete(mTfs.open(path))", "sourceAfterFix": "mTfs.delete(mTfs.open(path),true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "fixCommitParentSHA1": "3dc1389f687b886d6c2cff0acdb1dcac0bc8a57c", "bugFilePath": "shell/src/main/java/tachyon/shell/TFsShell.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/TFsShell.java b/shell/src/main/java/tachyon/shell/TFsShell.java\nindex 0f44ed0..76a4aec 100644\n--- a/shell/src/main/java/tachyon/shell/TFsShell.java\n+++ b/shell/src/main/java/tachyon/shell/TFsShell.java\n@@ -497,7 +497,7 @@\n    */\n   public int mkdir(TachyonURI path) {\n     try {\n-      mTfs.mkdirs(path);\n+      mTfs.mkdirs(path, true);\n       System.out.println(\"Successfully created directory \" + path);\n       return 0;\n     } catch (IOException ioe) {\n@@ -717,7 +717,7 @@\n    */\n   public int rmr(TachyonURI path) {\n     try {\n-      mTfs.delete(mTfs.open(path));\n+      mTfs.delete(mTfs.open(path), true);\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {\n@@ -932,7 +932,7 @@\n    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n-      mTfs.setPin(mTfs.open(path), false);\n+      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {\n@@ -943,7 +943,8 @@\n   }\n \n   /**\n-   * Free the file or Folder from tachyon in-memory specified by argv\n+   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n+   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.\n@@ -951,7 +952,7 @@\n    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n-      mTfs.free(mTfs.open(path));\n+      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 935, "bugNodeStartChar": 29525, "bugNodeLength": 35, "fixLineNum": 935, "fixNodeStartChar": 29525, "fixNodeLength": 34, "sourceBeforeFix": "mTfs.setPin(mTfs.open(path),false)", "sourceAfterFix": "mTfs.setPin(mTfs.open(path),true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "fixCommitParentSHA1": "3dc1389f687b886d6c2cff0acdb1dcac0bc8a57c", "bugFilePath": "shell/src/main/java/tachyon/shell/TFsShell.java", "fixPatch": "diff --git a/shell/src/main/java/tachyon/shell/TFsShell.java b/shell/src/main/java/tachyon/shell/TFsShell.java\nindex 0f44ed0..76a4aec 100644\n--- a/shell/src/main/java/tachyon/shell/TFsShell.java\n+++ b/shell/src/main/java/tachyon/shell/TFsShell.java\n@@ -497,7 +497,7 @@\n    */\n   public int mkdir(TachyonURI path) {\n     try {\n-      mTfs.mkdirs(path);\n+      mTfs.mkdirs(path, true);\n       System.out.println(\"Successfully created directory \" + path);\n       return 0;\n     } catch (IOException ioe) {\n@@ -717,7 +717,7 @@\n    */\n   public int rmr(TachyonURI path) {\n     try {\n-      mTfs.delete(mTfs.open(path));\n+      mTfs.delete(mTfs.open(path), true);\n       System.out.println(path + \" has been removed\");\n       return 0;\n     } catch (IOException ioe) {\n@@ -932,7 +932,7 @@\n    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n-      mTfs.setPin(mTfs.open(path), false);\n+      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {\n@@ -943,7 +943,8 @@\n   }\n \n   /**\n-   * Free the file or Folder from tachyon in-memory specified by argv\n+   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n+   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.\n@@ -951,7 +952,7 @@\n    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n-      mTfs.free(mTfs.open(path));\n+      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 954, "bugNodeStartChar": 30124, "bugNodeLength": 26, "fixLineNum": 954, "fixNodeStartChar": 30124, "fixNodeLength": 32, "sourceBeforeFix": "mTfs.free(mTfs.open(path))", "sourceAfterFix": "mTfs.free(mTfs.open(path),true)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "c673128035e525cd76564ff824c63bcb14caaf8f", "fixCommitParentSHA1": "30e182ac61c2a4bf03aa2abad34a7c9e4e901ca8", "bugFilePath": "common/src/main/java/tachyon/security/authorization/FsPermission.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/security/authorization/FsPermission.java b/common/src/main/java/tachyon/security/authorization/FsPermission.java\nindex 3b701ce..b992f13 100644\n--- a/common/src/main/java/tachyon/security/authorization/FsPermission.java\n+++ b/common/src/main/java/tachyon/security/authorization/FsPermission.java\n@@ -148,8 +148,7 @@\n   public static FsPermission getUMask(TachyonConf conf) {\n     int umask = Constants.DEFAULT_TFS_PERMISSIONS_UMASK;\n     if (conf != null) {\n-      umask = conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY,\n-          Constants.DEFAULT_TFS_PERMISSIONS_UMASK);\n+      umask = conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY);\n     }\n     return new FsPermission((short)umask);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 151, "bugNodeStartChar": 4058, "bugNodeLength": 99, "fixLineNum": 151, "fixNodeStartChar": 4058, "fixNodeLength": 48, "sourceBeforeFix": "conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY,Constants.DEFAULT_TFS_PERMISSIONS_UMASK)", "sourceAfterFix": "conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "cb2fec4fd92bd8a2f21737e4d1618946ae6170bd", "fixCommitParentSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\nindex 1d84345..a70ef6f 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n@@ -331,7 +331,7 @@\n     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n-      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n+      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 334, "bugNodeStartChar": 13366, "bugNodeLength": 17, "fixLineNum": 334, "fixNodeStartChar": 13366, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cb2fec4fd92bd8a2f21737e4d1618946ae6170bd", "fixCommitParentSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\nindex 1d84345..a70ef6f 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n@@ -331,7 +331,7 @@\n     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n-      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n+      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 334, "bugNodeStartChar": 13366, "bugNodeLength": 17, "fixLineNum": 334, "fixNodeStartChar": 13366, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f5fe5ae0a963ee7db95d1f459280017de281af8f", "fixCommitParentSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\nindex 1d84345..a70ef6f 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n@@ -331,7 +331,7 @@\n     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n-      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n+      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 334, "bugNodeStartChar": 13366, "bugNodeLength": 17, "fixLineNum": 334, "fixNodeStartChar": 13366, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f5fe5ae0a963ee7db95d1f459280017de281af8f", "fixCommitParentSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\nindex 1d84345..a70ef6f 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/TachyonFS.java\n@@ -331,7 +331,7 @@\n     if (blockSizeByte > 0) {\n       return (int) mFSMasterClient.createFile(path.getPath(), blockSizeByte, recursive);\n     } else {\n-      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(),\n+      return (int) mFSMasterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(),\n           blockSizeByte, recursive);\n     }\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 334, "bugNodeStartChar": 13366, "bugNodeLength": 17, "fixLineNum": 334, "fixNodeStartChar": 13366, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "fixCommitParentSHA1": "323f1d590f403e72531c84643e54c0b8ed870fec", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\nindex 370f876..f6d1786 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n@@ -206,7 +206,7 @@\n       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n-      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(), -1L, recursive);\n+      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 209, "bugNodeStartChar": 8584, "bugNodeLength": 17, "fixLineNum": 209, "fixNodeStartChar": 8584, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "fixCommitParentSHA1": "323f1d590f403e72531c84643e54c0b8ed870fec", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\nindex 370f876..f6d1786 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n@@ -206,7 +206,7 @@\n       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n-      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(), -1L, recursive);\n+      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 209, "bugNodeStartChar": 8584, "bugNodeLength": 17, "fixLineNum": 209, "fixNodeStartChar": 8584, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "fixCommitParentSHA1": "323f1d590f403e72531c84643e54c0b8ed870fec", "bugFilePath": "servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\nindex 7061cb6..cecbef8 100644\n--- a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n+++ b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n@@ -35,7 +35,7 @@\n     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n-    mCheckpointPath = checkpointPath.getPath();\n+    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1448, "bugNodeLength": 24, "fixLineNum": 38, "fixNodeStartChar": 1448, "fixNodeLength": 25, "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c", "fixCommitParentSHA1": "323f1d590f403e72531c84643e54c0b8ed870fec", "bugFilePath": "servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\nindex 7061cb6..cecbef8 100644\n--- a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n+++ b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n@@ -35,7 +35,7 @@\n     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n-    mCheckpointPath = checkpointPath.getPath();\n+    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1448, "bugNodeLength": 24, "fixLineNum": 38, "fixNodeStartChar": 1448, "fixNodeLength": 25, "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "fixCommitParentSHA1": "6b8d323e5538c37030c8eb89653e0da61218574c", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\nindex 4f4cfcf..ed86320 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n@@ -206,7 +206,7 @@\n       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n-      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(), -1L, recursive);\n+      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 209, "bugNodeStartChar": 8548, "bugNodeLength": 17, "fixLineNum": 209, "fixNodeStartChar": 8548, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "fixCommitParentSHA1": "6b8d323e5538c37030c8eb89653e0da61218574c", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\nindex 4f4cfcf..ed86320 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/file/TachyonFileSystem.java\n@@ -206,7 +206,7 @@\n       throws IOException {\n     FileSystemMasterClient masterClient = mContext.acquireMasterClient();\n     try {\n-      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.getPath(), -1L, recursive);\n+      return masterClient.loadFileInfoFromUfs(path.getPath(), ufsPath.toString(), -1L, recursive);\n     } finally {\n       mContext.releaseMasterClient(masterClient);\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 209, "bugNodeStartChar": 8548, "bugNodeLength": 17, "fixLineNum": 209, "fixNodeStartChar": 8548, "fixNodeLength": 18, "sourceBeforeFix": "ufsPath.getPath()", "sourceAfterFix": "ufsPath.toString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "fixCommitParentSHA1": "6b8d323e5538c37030c8eb89653e0da61218574c", "bugFilePath": "servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\nindex 7061cb6..cecbef8 100644\n--- a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n+++ b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n@@ -35,7 +35,7 @@\n     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n-    mCheckpointPath = checkpointPath.getPath();\n+    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1448, "bugNodeLength": 24, "fixLineNum": 38, "fixNodeStartChar": 1448, "fixNodeLength": 25, "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "fixCommitParentSHA1": "6b8d323e5538c37030c8eb89653e0da61218574c", "bugFilePath": "servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\nindex 7061cb6..cecbef8 100644\n--- a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n+++ b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n@@ -35,7 +35,7 @@\n     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n-    mCheckpointPath = checkpointPath.getPath();\n+    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 38, "bugNodeStartChar": 1448, "bugNodeLength": 24, "fixLineNum": 38, "fixNodeStartChar": 1448, "fixNodeLength": 25, "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "17c92b0e48ec7cb94ad9a48b00282613acda14d4", "fixCommitParentSHA1": "f39826f46dc163f75aed4d6c952c7c19b0889afc", "bugFilePath": "servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java b/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java\nindex 6523077..6963250 100644\n--- a/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java\n+++ b/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java\n@@ -35,7 +35,7 @@\n /**\n  * Servlet that provides data for displaying detail info of all workers.\n  */\n-final class WebInterfaceWorkersServlet extends HttpServlet {\n+public final class WebInterfaceWorkersServlet extends HttpServlet {\n   /**\n    * Class to make referencing worker nodes more intuitive. Mainly to avoid implicit association by\n    * array indexes.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 35, "bugNodeStartChar": 1281, "bugNodeLength": 4085, "fixLineNum": 35, "fixNodeStartChar": 1281, "fixNodeLength": 4092, "sourceBeforeFix": "16", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bfa064a8c96bd637806252cbc286de024d41f182", "fixCommitParentSHA1": "f39826f46dc163f75aed4d6c952c7c19b0889afc", "bugFilePath": "servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java b/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java\nindex 6523077..6963250 100644\n--- a/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java\n+++ b/servers/src/main/java/tachyon/web/WebInterfaceWorkersServlet.java\n@@ -35,7 +35,7 @@\n /**\n  * Servlet that provides data for displaying detail info of all workers.\n  */\n-final class WebInterfaceWorkersServlet extends HttpServlet {\n+public final class WebInterfaceWorkersServlet extends HttpServlet {\n   /**\n    * Class to make referencing worker nodes more intuitive. Mainly to avoid implicit association by\n    * array indexes.\n", "projectName": "Alluxio.alluxio", "bugLineNum": 35, "bugNodeStartChar": 1281, "bugNodeLength": 4085, "fixLineNum": 35, "fixNodeStartChar": 1281, "fixNodeLength": 4092, "sourceBeforeFix": "16", "sourceAfterFix": "17"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d3f568f0a22670cace0407eef7a5f36ea36294fd", "fixCommitParentSHA1": "d04b5c0c3700ef1ac657a45d5be9dc625c746342", "bugFilePath": "servers/src/main/java/tachyon/master/filesystem/meta/InodeFile.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/filesystem/meta/InodeFile.java b/servers/src/main/java/tachyon/master/filesystem/meta/InodeFile.java\nindex 892ab5a..e832e95 100644\n--- a/servers/src/main/java/tachyon/master/filesystem/meta/InodeFile.java\n+++ b/servers/src/main/java/tachyon/master/filesystem/meta/InodeFile.java\n@@ -234,7 +234,7 @@\n       getNewBlockId();\n       length -= blockSize;\n     }\n-    setComplete(length);\n+    setComplete(mLength);\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 237, "bugNodeStartChar": 7241, "bugNodeLength": 19, "fixLineNum": 237, "fixNodeStartChar": 7241, "fixNodeLength": 20, "sourceBeforeFix": "setComplete(length)", "sourceAfterFix": "setComplete(mLength)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "655c286b7a16a48581b82d63dc3e3b1690e5f1e1", "fixCommitParentSHA1": "df1fdcd1f39d1e3ef7e1a6d698303c0a17996e89", "bugFilePath": "integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java", "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java\nindex 21e199f..482ecf4 100644\n--- a/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java\n@@ -175,7 +175,7 @@\n     System.setProperty(Constants.TACHYON_SECURITY_AUTHENTICATION,\n         AuthType.KERBEROS.getAuthName());\n     //Currently the kerberos authentication doesn't support\n-    mThrown.expect(SaslException.class);\n+    mThrown.expect(UnsupportedOperationException.class);\n     mThrown.expectMessage(\"Kerberos is not supported currently\");\n     //start cluster\n     mLocalTachyonCluster.start();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 178, "bugNodeStartChar": 6537, "bugNodeLength": 19, "fixLineNum": 178, "fixNodeStartChar": 6537, "fixNodeLength": 35, "sourceBeforeFix": "SaslException.class", "sourceAfterFix": "UnsupportedOperationException.class"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "46f7599cfefe47fc9eede1c886e61dda77034df2", "fixCommitParentSHA1": "49c1c27052c0a12b2d5fbe0555f464749a59fbf3", "bugFilePath": "servers/src/test/java/tachyon/master/next/filesystem/meta/InodeFileTests.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/master/next/filesystem/meta/InodeFileTests.java b/servers/src/test/java/tachyon/master/next/filesystem/meta/InodeFileTests.java\nindex a2626ef..272a97f 100644\n--- a/servers/src/test/java/tachyon/master/next/filesystem/meta/InodeFileTests.java\n+++ b/servers/src/test/java/tachyon/master/next/filesystem/meta/InodeFileTests.java\n@@ -25,7 +25,7 @@\n  * Unit tests for tachyon.InodeFile\n  */\n public final class InodeFileTests extends AbstractInodeTests {\n-  private static long LENGTH = 100;\n+  private static final long LENGTH = 100;\n \n   @Test\n   public void equalsTest() {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 28, "bugNodeStartChar": 1074, "bugNodeLength": 33, "fixLineNum": 28, "fixNodeStartChar": 1074, "fixNodeLength": 39, "sourceBeforeFix": "10", "sourceAfterFix": "26"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d737cae77778780237425d41e24966ace83e0766", "fixCommitParentSHA1": "398a4d014161af9fa14e5e2807c7d24f4547b101", "bugFilePath": "servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java b/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\nindex e19367b..8ff913e 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\n@@ -30,7 +30,8 @@\n \n   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n-    mBlockSize = new File(tempBlock.getCommitPath()).length();\n+    // NOTE: TempBlockMeta must be committed before the actual data block file is moved.\n+    mBlockSize = new File(tempBlock.getPath()).length();\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 33, "bugNodeStartChar": 1264, "bugNodeLength": 25, "fixLineNum": 34, "fixNodeStartChar": 1353, "fixNodeLength": 19, "sourceBeforeFix": "tempBlock.getCommitPath()", "sourceAfterFix": "tempBlock.getPath()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d737cae77778780237425d41e24966ace83e0766", "fixCommitParentSHA1": "398a4d014161af9fa14e5e2807c7d24f4547b101", "bugFilePath": "servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java b/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\nindex e19367b..8ff913e 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\n@@ -30,7 +30,8 @@\n \n   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n-    mBlockSize = new File(tempBlock.getCommitPath()).length();\n+    // NOTE: TempBlockMeta must be committed before the actual data block file is moved.\n+    mBlockSize = new File(tempBlock.getPath()).length();\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 33, "bugNodeStartChar": 1264, "bugNodeLength": 25, "fixLineNum": 34, "fixNodeStartChar": 1353, "fixNodeLength": 19, "sourceBeforeFix": "tempBlock.getCommitPath()", "sourceAfterFix": "tempBlock.getPath()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "ad8ad9f32f532c21e865d445f0d5536bf87e7b8b", "fixCommitParentSHA1": "0cce3927329c0df31c67647995deb01c47c01e39", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java b/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java\nindex 6f16c1f..30ab6e1 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java\n@@ -95,7 +95,7 @@\n    */\n   public boolean isBlockLocked(long blockId) {\n     int index = BlockLockManager.blockHashIndex(blockId);\n-    if (index <= mInUseLocks.length()) {\n+    if (index < mInUseLocks.length()) {\n       return mInUseLocks.get(index);\n     } else {\n       return false;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 98, "bugNodeStartChar": 3837, "bugNodeLength": 29, "fixLineNum": 98, "fixNodeStartChar": 3837, "fixNodeLength": 28, "sourceBeforeFix": "index <= mInUseLocks.length()", "sourceAfterFix": "index < mInUseLocks.length()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "0b30d57ac9be7537e2846e2dfefa97ccd7ff7a21", "fixCommitParentSHA1": "3b538acafd8fd936a4634db85d85b8dc8bb66be6", "bugFilePath": "clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java b/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\nindex 1558ce1..db019e4 100644\n--- a/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\n@@ -297,7 +297,8 @@\n       ClientBlockInfo info = blocks.get(k);\n       long offset = info.getOffset();\n       long end = offset + info.getLength();\n-      if ((offset >= start && offset <= start + len) || (end >= start && end <= start + len)) {\n+      if ((offset >= start && offset <= start + len) || (end >= start && end <= start + len)\n+          || (offset <= start && end >= start + len)) {\n         ArrayList<String> names = new ArrayList<String>();\n         ArrayList<String> hosts = new ArrayList<String>();\n         for (NetAddress addr : info.getLocations()) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 300, "bugNodeStartChar": 11963, "bugNodeLength": 82, "fixLineNum": 300, "fixNodeStartChar": 11963, "fixNodeLength": 135, "sourceBeforeFix": "(offset >= start && offset <= start + len) || (end >= start && end <= start + len)", "sourceAfterFix": "(offset >= start && offset <= start + len) || (end >= start && end <= start + len) || (offset <= start && end >= start + len)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "98fbf9e8e06e0dbc35e1d079029dfa32f05b5848", "fixCommitParentSHA1": "5f23054b9739413054aa019af2c56fefeb3d38d5", "bugFilePath": "common/src/main/java/tachyon/security/PlainSaslServer.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/security/PlainSaslServer.java b/common/src/main/java/tachyon/security/PlainSaslServer.java\nindex 5a0bc42..2c013ff 100644\n--- a/common/src/main/java/tachyon/security/PlainSaslServer.java\n+++ b/common/src/main/java/tachyon/security/PlainSaslServer.java\n@@ -72,7 +72,7 @@\n       String[] parts = payload.split(\"\\u0000\", 3);\n       // validate response\n       if (parts.length != 3) {\n-        throw new IllegalArgumentException(\"Received corrupt response\");\n+        throw new IllegalArgumentException(\"Invalid message format, parts must contain 3 items\");\n       }\n       String authzid = parts[0];\n       mAuthcid = parts[1];\n@@ -96,12 +96,12 @@\n       Callback[] cbList = {nameCallback, passwordCallback, authCallback};\n       mHandler.handle(cbList);\n       if (!authCallback.isAuthorized()) {\n-        throw new SaslException(\"Authentication failed\");\n+        throw new SaslException(\"AuthorizeCallback authorized failure\");\n       }\n     } catch (IOException ioe) {\n-      throw new SaslException(\"Error validating the login\", ioe);\n+      throw new SaslException(\"Error validating the response\", ioe);\n     } catch (UnsupportedCallbackException uce) {\n-      throw new SaslException(\"Error validating the login\", uce);\n+      throw new SaslException(\"Error validating the response\", uce);\n     }\n     mCompleted = true;\n     return null;\n@@ -121,13 +121,13 @@\n   @Override\n   public byte[] unwrap(byte[] incoming, int offset, int len) {\n     throwIfNotComplete();\n-    throw new IllegalStateException(\"PLAIN supports neither integrity nor privacy\");\n+    throw new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\");\n   }\n \n   @Override\n   public byte[] wrap(byte[] outgoing, int offset, int len) {\n     throwIfNotComplete();\n-    throw new IllegalStateException(\"PLAIN supports neither integrity nor privacy\");\n+    throw new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\");\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 124, "bugNodeStartChar": 4456, "bugNodeLength": 73, "fixLineNum": 124, "fixNodeStartChar": 4456, "fixNodeLength": 83, "sourceBeforeFix": "new IllegalStateException(\"PLAIN supports neither integrity nor privacy\")", "sourceAfterFix": "new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "98fbf9e8e06e0dbc35e1d079029dfa32f05b5848", "fixCommitParentSHA1": "5f23054b9739413054aa019af2c56fefeb3d38d5", "bugFilePath": "common/src/main/java/tachyon/security/PlainSaslServer.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/security/PlainSaslServer.java b/common/src/main/java/tachyon/security/PlainSaslServer.java\nindex 5a0bc42..2c013ff 100644\n--- a/common/src/main/java/tachyon/security/PlainSaslServer.java\n+++ b/common/src/main/java/tachyon/security/PlainSaslServer.java\n@@ -72,7 +72,7 @@\n       String[] parts = payload.split(\"\\u0000\", 3);\n       // validate response\n       if (parts.length != 3) {\n-        throw new IllegalArgumentException(\"Received corrupt response\");\n+        throw new IllegalArgumentException(\"Invalid message format, parts must contain 3 items\");\n       }\n       String authzid = parts[0];\n       mAuthcid = parts[1];\n@@ -96,12 +96,12 @@\n       Callback[] cbList = {nameCallback, passwordCallback, authCallback};\n       mHandler.handle(cbList);\n       if (!authCallback.isAuthorized()) {\n-        throw new SaslException(\"Authentication failed\");\n+        throw new SaslException(\"AuthorizeCallback authorized failure\");\n       }\n     } catch (IOException ioe) {\n-      throw new SaslException(\"Error validating the login\", ioe);\n+      throw new SaslException(\"Error validating the response\", ioe);\n     } catch (UnsupportedCallbackException uce) {\n-      throw new SaslException(\"Error validating the login\", uce);\n+      throw new SaslException(\"Error validating the response\", uce);\n     }\n     mCompleted = true;\n     return null;\n@@ -121,13 +121,13 @@\n   @Override\n   public byte[] unwrap(byte[] incoming, int offset, int len) {\n     throwIfNotComplete();\n-    throw new IllegalStateException(\"PLAIN supports neither integrity nor privacy\");\n+    throw new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\");\n   }\n \n   @Override\n   public byte[] wrap(byte[] outgoing, int offset, int len) {\n     throwIfNotComplete();\n-    throw new IllegalStateException(\"PLAIN supports neither integrity nor privacy\");\n+    throw new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\");\n   }\n \n   @Override\n", "projectName": "Alluxio.alluxio", "bugLineNum": 130, "bugNodeStartChar": 4645, "bugNodeLength": 73, "fixLineNum": 130, "fixNodeStartChar": 4645, "fixNodeLength": 83, "sourceBeforeFix": "new IllegalStateException(\"PLAIN supports neither integrity nor privacy\")", "sourceAfterFix": "new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9c4101722a079fedba88c9a35d9d838e94396e15", "fixCommitParentSHA1": "23bc6301188398aa05650eaa24b25eaab745ad9d", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockWorker.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockWorker.java b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\nindex ad4badb..76db868 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n@@ -117,7 +117,7 @@\n     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n-            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n+            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n \n     // Set up web server\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 119, "bugNodeStartChar": 4799, "bugNodeLength": 96, "fixLineNum": 119, "fixNodeStartChar": 4799, "fixNodeLength": 90, "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9c4101722a079fedba88c9a35d9d838e94396e15", "fixCommitParentSHA1": "23bc6301188398aa05650eaa24b25eaab745ad9d", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockWorker.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockWorker.java b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\nindex ad4badb..76db868 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n@@ -117,7 +117,7 @@\n     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n-            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n+            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n \n     // Set up web server\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 119, "bugNodeStartChar": 4799, "bugNodeLength": 96, "fixLineNum": 119, "fixNodeStartChar": 4799, "fixNodeLength": 90, "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "014af199ea0cef04b3318460010c7a709d71c0e3", "fixCommitParentSHA1": "becf83ba45c0d512758e62456b3b95e2004209dc", "bugFilePath": "servers/src/main/java/tachyon/master/BlockInfo.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/BlockInfo.java b/servers/src/main/java/tachyon/master/BlockInfo.java\nindex 10f3b21..ec659db 100644\n--- a/servers/src/main/java/tachyon/master/BlockInfo.java\n+++ b/servers/src/main/java/tachyon/master/BlockInfo.java\n@@ -187,7 +187,8 @@\n           } catch (NumberFormatException nfe) {\n             continue;\n           }\n-          ret.add(new NetAddress(resolvedHost, resolvedPort, -1));\n+          // The resolved port is the data transfer port not the rpc port\n+          ret.add(new NetAddress(resolvedHost, -1, resolvedPort));\n         }\n       }\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 190, "bugNodeStartChar": 6622, "bugNodeLength": 46, "fixLineNum": 191, "fixNodeStartChar": 6696, "fixNodeLength": 46, "sourceBeforeFix": "new NetAddress(resolvedHost,resolvedPort,-1)", "sourceAfterFix": "new NetAddress(resolvedHost,-1,resolvedPort)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ea2aedf398263a18ebda9343e97127686a2f61d9", "fixCommitParentSHA1": "152eb6dc897ac585291d65644278f7c0582a3fe1", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockWorker.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockWorker.java b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\nindex ad4badb..76db868 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n@@ -117,7 +117,7 @@\n     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n-            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n+            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n \n     // Set up web server\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 119, "bugNodeStartChar": 4799, "bugNodeLength": 96, "fixLineNum": 119, "fixNodeStartChar": 4799, "fixNodeLength": 90, "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ea2aedf398263a18ebda9343e97127686a2f61d9", "fixCommitParentSHA1": "152eb6dc897ac585291d65644278f7c0582a3fe1", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockWorker.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockWorker.java b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\nindex ad4badb..76db868 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockWorker.java\n@@ -117,7 +117,7 @@\n     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n-            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n+            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n \n     // Set up web server\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 119, "bugNodeStartChar": 4799, "bugNodeLength": 96, "fixLineNum": 119, "fixNodeStartChar": 4799, "fixNodeLength": 90, "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "f09438a872ce5bfcc4c16ef1f434eea640c6341a", "fixCommitParentSHA1": "01f82dbde51a973eeecb7e5b0e49acd99683553a", "bugFilePath": "servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java b/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java\nindex aa1e907..eb5c43f 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java\n@@ -63,9 +63,9 @@\n    * Get a StorageDirView with a dirIndex\n    *\n    * @param dirIndex of the dirView requested\n-   * @throws IOException if dirIndex is out of range\n+   * @throws IndexOutOfBoundsException if dirIndex is out of range\n    */\n-  public StorageDirView getDirView(int dirIndex) throws IOException {\n+  public StorageDirView getDirView(int dirIndex) {\n     return mDirViews.get(dirIndex);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 62, "bugNodeStartChar": 2235, "bugNodeLength": 265, "fixLineNum": 62, "fixNodeStartChar": 2235, "fixNodeLength": 246, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "331cc23f0448033c5695035d1e6a5537fd8a6c37", "fixCommitParentSHA1": "98da5fb15334b5e5043b73c188c91ceee92d2442", "bugFilePath": "servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java b/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java\nindex aa1e907..eb5c43f 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/StorageTierView.java\n@@ -63,9 +63,9 @@\n    * Get a StorageDirView with a dirIndex\n    *\n    * @param dirIndex of the dirView requested\n-   * @throws IOException if dirIndex is out of range\n+   * @throws IndexOutOfBoundsException if dirIndex is out of range\n    */\n-  public StorageDirView getDirView(int dirIndex) throws IOException {\n+  public StorageDirView getDirView(int dirIndex) {\n     return mDirViews.get(dirIndex);\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 62, "bugNodeStartChar": 2235, "bugNodeLength": 265, "fixLineNum": 62, "fixNodeStartChar": 2235, "fixNodeLength": 246, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "158ca9e3d3f7785d2fa3f0aad0d12339a74be2c7", "fixCommitParentSHA1": "98e265a3a74e4c4ae1eb6e762598b9b0f53a6b8f", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java b/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\nindex 2a11f6d..66fb717 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\n@@ -68,7 +68,7 @@\n       LOG.info(\"Data \" + blockId + \" from remote machine \" + address + \" received\");\n \n       if (recvMsg.getStatus() != RPCResponse.Status.SUCCESS) {\n-        LOG.error(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"\n+        LOG.warn(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"\n             + recvMsg.getStatus().getMessage());\n         return null;\n       }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 71, "bugNodeStartChar": 2687, "bugNodeLength": 129, "fixLineNum": 71, "fixNodeStartChar": 2687, "fixNodeLength": 128, "sourceBeforeFix": "LOG.error(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"+ recvMsg.getStatus().getMessage())", "sourceAfterFix": "LOG.warn(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"+ recvMsg.getStatus().getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "158ca9e3d3f7785d2fa3f0aad0d12339a74be2c7", "fixCommitParentSHA1": "98e265a3a74e4c4ae1eb6e762598b9b0f53a6b8f", "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java", "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java b/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\nindex 2a11f6d..66fb717 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\n@@ -68,7 +68,7 @@\n       LOG.info(\"Data \" + blockId + \" from remote machine \" + address + \" received\");\n \n       if (recvMsg.getStatus() != RPCResponse.Status.SUCCESS) {\n-        LOG.error(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"\n+        LOG.warn(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"\n             + recvMsg.getStatus().getMessage());\n         return null;\n       }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 71, "bugNodeStartChar": 2687, "bugNodeLength": 129, "fixLineNum": 71, "fixNodeStartChar": 2687, "fixNodeLength": 128, "sourceBeforeFix": "LOG.error(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"+ recvMsg.getStatus().getMessage())", "sourceAfterFix": "LOG.warn(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"+ recvMsg.getStatus().getMessage())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d837ac1e1fd6d03f22ebd458ddc5bbeb33de9889", "fixCommitParentSHA1": "3ce178f7e3fbcf271b6deae19077807fa8ab3e5d", "bugFilePath": "servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java b/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java\nindex a767905..3e3cee7 100644\n--- a/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java\n+++ b/servers/src/main/java/tachyon/worker/block/BlockMetadataManagerView.java\n@@ -55,7 +55,7 @@\n   public BlockMetadataManagerView(BlockMetadataManager manager, Set<Integer> pinnedInodes,\n       Set<Long> lockedBlocks) throws IOException {\n     mMetadataManager = Preconditions.checkNotNull(manager);\n-    mPinnedInodes.addAll(Preconditions.checkNotNull(mPinnedInodes));\n+    mPinnedInodes.addAll(Preconditions.checkNotNull(pinnedInodes));\n     mLockedBlocks.addAll(Preconditions.checkNotNull(lockedBlocks));\n \n     // iteratively create all StorageTierViews and StorageDirViews\n", "projectName": "Alluxio.alluxio", "bugLineNum": 58, "bugNodeStartChar": 2297, "bugNodeLength": 41, "fixLineNum": 58, "fixNodeStartChar": 2297, "fixNodeLength": 40, "sourceBeforeFix": "Preconditions.checkNotNull(mPinnedInodes)", "sourceAfterFix": "Preconditions.checkNotNull(pinnedInodes)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f", "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 76, "bugNodeStartChar": 3036, "bugNodeLength": 81, "fixLineNum": 76, "fixNodeStartChar": 3036, "fixNodeLength": 81, "sourceBeforeFix": "Assert.assertEquals(masterAddress,new InetSocketAddress(\"RemoteMaster1\",10000))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\",10000),masterAddress)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f", "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 80, "bugNodeStartChar": 3252, "bugNodeLength": 81, "fixLineNum": 80, "fixNodeStartChar": 3252, "fixNodeLength": 81, "sourceBeforeFix": "Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,20000))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,20000),masterAddress)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f", "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 84, "bugNodeStartChar": 3464, "bugNodeLength": 87, "fixLineNum": 84, "fixNodeStartChar": 3464, "fixNodeLength": 87, "sourceBeforeFix": "Assert.assertEquals(masterAddress,new InetSocketAddress(\"RemoteMaster3\",defaultPort))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\",defaultPort),masterAddress)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f", "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 88, "bugNodeStartChar": 3672, "bugNodeLength": 87, "fixLineNum": 88, "fixNodeStartChar": 3672, "fixNodeLength": 87, "sourceBeforeFix": "Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,defaultPort))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),masterAddress)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f", "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 98, "bugNodeStartChar": 4095, "bugNodeLength": 81, "fixLineNum": 98, "fixNodeStartChar": 4095, "fixNodeLength": 81, "sourceBeforeFix": "Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,10001))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,10001),workerAddress)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f", "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java", "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 102, "bugNodeStartChar": 4297, "bugNodeLength": 87, "fixLineNum": 102, "fixNodeStartChar": 4297, "fixNodeLength": 87, "sourceBeforeFix": "Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,defaultPort))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),workerAddress)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a3385db7759264357d7b1a88e736b3b015e0c4bd", "fixCommitParentSHA1": "e301c4602d9eb7361d905e48cf6cd5b6234c016e", "bugFilePath": "servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\nindex 4328f80..3694f09 100644\n--- a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n+++ b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n@@ -52,12 +52,12 @@\n       throws IOException {\n     // 1. Select a StorageDir that has enough capacity for required bytes.\n     StorageDir selectedDir = null;\n-    if (location.belongTo(BlockStoreLocation.anyTier())) {\n+    if (location.equals(BlockStoreLocation.anyTier())) {\n       selectedDir = selectDirToEvictBlocksFromAnyTier(availableBytes);\n     } else {\n       int tierAlias = location.tierAlias();\n       StorageTier tier = mMetaManager.getTier(tierAlias);\n-      if (location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))) {\n+      if (location.equals(BlockStoreLocation.anyDirInTier(tierAlias))) {\n         selectedDir = selectDirToEvictBlocksFromTier(tier, availableBytes);\n       } else {\n         int dirIndex = location.dir();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 55, "bugNodeStartChar": 2128, "bugNodeLength": 47, "fixLineNum": 55, "fixNodeStartChar": 2128, "fixNodeLength": 45, "sourceBeforeFix": "location.belongTo(BlockStoreLocation.anyTier())", "sourceAfterFix": "location.equals(BlockStoreLocation.anyTier())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a3385db7759264357d7b1a88e736b3b015e0c4bd", "fixCommitParentSHA1": "e301c4602d9eb7361d905e48cf6cd5b6234c016e", "bugFilePath": "servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\nindex 4328f80..3694f09 100644\n--- a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n+++ b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n@@ -52,12 +52,12 @@\n       throws IOException {\n     // 1. Select a StorageDir that has enough capacity for required bytes.\n     StorageDir selectedDir = null;\n-    if (location.belongTo(BlockStoreLocation.anyTier())) {\n+    if (location.equals(BlockStoreLocation.anyTier())) {\n       selectedDir = selectDirToEvictBlocksFromAnyTier(availableBytes);\n     } else {\n       int tierAlias = location.tierAlias();\n       StorageTier tier = mMetaManager.getTier(tierAlias);\n-      if (location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))) {\n+      if (location.equals(BlockStoreLocation.anyDirInTier(tierAlias))) {\n         selectedDir = selectDirToEvictBlocksFromTier(tier, availableBytes);\n       } else {\n         int dirIndex = location.dir();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 55, "bugNodeStartChar": 2128, "bugNodeLength": 47, "fixLineNum": 55, "fixNodeStartChar": 2128, "fixNodeLength": 45, "sourceBeforeFix": "location.belongTo(BlockStoreLocation.anyTier())", "sourceAfterFix": "location.equals(BlockStoreLocation.anyTier())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a3385db7759264357d7b1a88e736b3b015e0c4bd", "fixCommitParentSHA1": "e301c4602d9eb7361d905e48cf6cd5b6234c016e", "bugFilePath": "servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\nindex 4328f80..3694f09 100644\n--- a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n+++ b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n@@ -52,12 +52,12 @@\n       throws IOException {\n     // 1. Select a StorageDir that has enough capacity for required bytes.\n     StorageDir selectedDir = null;\n-    if (location.belongTo(BlockStoreLocation.anyTier())) {\n+    if (location.equals(BlockStoreLocation.anyTier())) {\n       selectedDir = selectDirToEvictBlocksFromAnyTier(availableBytes);\n     } else {\n       int tierAlias = location.tierAlias();\n       StorageTier tier = mMetaManager.getTier(tierAlias);\n-      if (location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))) {\n+      if (location.equals(BlockStoreLocation.anyDirInTier(tierAlias))) {\n         selectedDir = selectDirToEvictBlocksFromTier(tier, availableBytes);\n       } else {\n         int dirIndex = location.dir();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 60, "bugNodeStartChar": 2375, "bugNodeLength": 61, "fixLineNum": 60, "fixNodeStartChar": 2375, "fixNodeLength": 59, "sourceBeforeFix": "location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))", "sourceAfterFix": "location.equals(BlockStoreLocation.anyDirInTier(tierAlias))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a3385db7759264357d7b1a88e736b3b015e0c4bd", "fixCommitParentSHA1": "e301c4602d9eb7361d905e48cf6cd5b6234c016e", "bugFilePath": "servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\nindex 4328f80..3694f09 100644\n--- a/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n+++ b/servers/src/main/java/tachyon/worker/block/evictor/GreedyEvictor.java\n@@ -52,12 +52,12 @@\n       throws IOException {\n     // 1. Select a StorageDir that has enough capacity for required bytes.\n     StorageDir selectedDir = null;\n-    if (location.belongTo(BlockStoreLocation.anyTier())) {\n+    if (location.equals(BlockStoreLocation.anyTier())) {\n       selectedDir = selectDirToEvictBlocksFromAnyTier(availableBytes);\n     } else {\n       int tierAlias = location.tierAlias();\n       StorageTier tier = mMetaManager.getTier(tierAlias);\n-      if (location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))) {\n+      if (location.equals(BlockStoreLocation.anyDirInTier(tierAlias))) {\n         selectedDir = selectDirToEvictBlocksFromTier(tier, availableBytes);\n       } else {\n         int dirIndex = location.dir();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 60, "bugNodeStartChar": 2375, "bugNodeLength": 61, "fixLineNum": 60, "fixNodeStartChar": 2375, "fixNodeLength": 59, "sourceBeforeFix": "location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))", "sourceAfterFix": "location.equals(BlockStoreLocation.anyDirInTier(tierAlias))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f103267d37e15a1f2ad7cf09da94b75b53d34c02", "fixCommitParentSHA1": "b60ca4b9c18870b0de0600ba52943d9a0048099c", "bugFilePath": "servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java b/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java\nindex 241dc50..01205cf 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java\n@@ -40,7 +40,7 @@\n    */\n   public BlockStoreLocation getBlockLocation() {\n     StorageTier tier = mDir.getParentTier();\n-    return new BlockStoreLocation(tier.getTierAlias(), mDir.getDirId());\n+    return new BlockStoreLocation(tier.getTierAlias(), mDir.getDirIndex());\n   }\n \n   public StorageDir getParentDir() {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 43, "bugNodeStartChar": 1489, "bugNodeLength": 15, "fixLineNum": 43, "fixNodeStartChar": 1489, "fixNodeLength": 18, "sourceBeforeFix": "mDir.getDirId()", "sourceAfterFix": "mDir.getDirIndex()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f103267d37e15a1f2ad7cf09da94b75b53d34c02", "fixCommitParentSHA1": "b60ca4b9c18870b0de0600ba52943d9a0048099c", "bugFilePath": "servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java", "fixPatch": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java b/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java\nindex 241dc50..01205cf 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/BlockMetaBase.java\n@@ -40,7 +40,7 @@\n    */\n   public BlockStoreLocation getBlockLocation() {\n     StorageTier tier = mDir.getParentTier();\n-    return new BlockStoreLocation(tier.getTierAlias(), mDir.getDirId());\n+    return new BlockStoreLocation(tier.getTierAlias(), mDir.getDirIndex());\n   }\n \n   public StorageDir getParentDir() {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 43, "bugNodeStartChar": 1489, "bugNodeLength": 15, "fixLineNum": 43, "fixNodeStartChar": 1489, "fixNodeLength": 18, "sourceBeforeFix": "mDir.getDirId()", "sourceAfterFix": "mDir.getDirIndex()"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1b50e64ae913b5521dcc38f5eaf7a637acf5ecd2", "fixCommitParentSHA1": "d8ce802d58169c2e0b997de62235ee40e38b8e68", "bugFilePath": "common/src/main/java/tachyon/worker/WorkerClient.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/worker/WorkerClient.java b/common/src/main/java/tachyon/worker/WorkerClient.java\nindex 020af7d..7f374f3 100644\n--- a/common/src/main/java/tachyon/worker/WorkerClient.java\n+++ b/common/src/main/java/tachyon/worker/WorkerClient.java\n@@ -197,7 +197,7 @@\n     if (mConnected) {\n       try {\n         // Heartbeat to send the client metrics.\n-        if (mHeartbeat != null) {\n+        if (mHeartbeatExecutor != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 200, "bugNodeStartChar": 6221, "bugNodeLength": 18, "fixLineNum": 200, "fixNodeStartChar": 6221, "fixNodeLength": 26, "sourceBeforeFix": "mHeartbeat != null", "sourceAfterFix": "mHeartbeatExecutor != null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1b50e64ae913b5521dcc38f5eaf7a637acf5ecd2", "fixCommitParentSHA1": "d8ce802d58169c2e0b997de62235ee40e38b8e68", "bugFilePath": "common/src/main/java/tachyon/worker/WorkerClient.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/worker/WorkerClient.java b/common/src/main/java/tachyon/worker/WorkerClient.java\nindex 020af7d..7f374f3 100644\n--- a/common/src/main/java/tachyon/worker/WorkerClient.java\n+++ b/common/src/main/java/tachyon/worker/WorkerClient.java\n@@ -197,7 +197,7 @@\n     if (mConnected) {\n       try {\n         // Heartbeat to send the client metrics.\n-        if (mHeartbeat != null) {\n+        if (mHeartbeatExecutor != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 200, "bugNodeStartChar": 6221, "bugNodeLength": 18, "fixLineNum": 200, "fixNodeStartChar": 6221, "fixNodeLength": 26, "sourceBeforeFix": "mHeartbeat != null", "sourceAfterFix": "mHeartbeatExecutor != null"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dbd9f9a45041633af588976b833f714e82f3a401", "fixCommitParentSHA1": "1840b11b8e2259932be332c0a87b75492e69bdaa", "bugFilePath": "common/src/main/java/tachyon/worker/DataServerMessage.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/worker/DataServerMessage.java b/common/src/main/java/tachyon/worker/DataServerMessage.java\nindex 4006d91..99ff30f 100644\n--- a/common/src/main/java/tachyon/worker/DataServerMessage.java\n+++ b/common/src/main/java/tachyon/worker/DataServerMessage.java\n@@ -232,7 +232,7 @@\n    *\n    * @return The id of the block's locker\n    */\n-  int getLockId() {\n+  public int getLockId() {\n     return mLockId;\n   }\n \n@@ -343,7 +343,7 @@\n    *\n    * @param lockId The id of the block's locker\n    */\n-  void setLockId(int lockId) {\n+  public void setLockId(int lockId) {\n     mLockId = lockId;\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 230, "bugNodeStartChar": 7565, "bugNodeLength": 139, "fixLineNum": 230, "fixNodeStartChar": 7565, "fixNodeLength": 146, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "dbd9f9a45041633af588976b833f714e82f3a401", "fixCommitParentSHA1": "1840b11b8e2259932be332c0a87b75492e69bdaa", "bugFilePath": "common/src/main/java/tachyon/worker/DataServerMessage.java", "fixPatch": "diff --git a/common/src/main/java/tachyon/worker/DataServerMessage.java b/common/src/main/java/tachyon/worker/DataServerMessage.java\nindex 4006d91..99ff30f 100644\n--- a/common/src/main/java/tachyon/worker/DataServerMessage.java\n+++ b/common/src/main/java/tachyon/worker/DataServerMessage.java\n@@ -232,7 +232,7 @@\n    *\n    * @return The id of the block's locker\n    */\n-  int getLockId() {\n+  public int getLockId() {\n     return mLockId;\n   }\n \n@@ -343,7 +343,7 @@\n    *\n    * @param lockId The id of the block's locker\n    */\n-  void setLockId(int lockId) {\n+  public void setLockId(int lockId) {\n     mLockId = lockId;\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 341, "bugNodeStartChar": 10619, "bugNodeLength": 158, "fixLineNum": 341, "fixNodeStartChar": 10619, "fixNodeLength": 165, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "6424932989d3c6e6144a3ea1c312f3fd08b7c786", "fixCommitParentSHA1": "ddbff0cd53de768c58aa3d87c7a0666e6d1ed336", "bugFilePath": "core/src/test/java/tachyon/command/UtilsTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/command/UtilsTest.java b/core/src/test/java/tachyon/command/UtilsTest.java\nindex 0fb75e5..a02b9fa 100644\n--- a/core/src/test/java/tachyon/command/UtilsTest.java\n+++ b/core/src/test/java/tachyon/command/UtilsTest.java\n@@ -38,7 +38,7 @@\n     String expected = \"/dir\";\n     for (String path : paths) {\n       String result = Utils.getFilePath(path, new TachyonConf());\n-      Assert.assertEquals(result, expected);\n+      Assert.assertEquals(expected, result);\n     }\n   }\n }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 41, "bugNodeStartChar": 1514, "bugNodeLength": 37, "fixLineNum": 41, "fixNodeStartChar": 1514, "fixNodeLength": 37, "sourceBeforeFix": "Assert.assertEquals(result,expected)", "sourceAfterFix": "Assert.assertEquals(expected,result)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "a20fcc53eeddde958fda74f823a6f8ad5db4eb66", "fixCommitParentSHA1": "766a788e352534084c64113b5837fe46088f09f3", "bugFilePath": "core/src/main/java/tachyon/worker/hierarchy/StorageDir.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java b/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java\nindex 606c72f..b2f92c5 100644\n--- a/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java\n+++ b/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java\n@@ -717,7 +717,7 @@\n     }\n     // Check if this blocks is currently hold by other users.\n     if (isBlockLocked(blockId) || !mToRemoveBlockIdSet.contains(blockId)) {\n-      return false;\n+      return true;\n     }\n     try {\n       if (!mFs.delete(getBlockFilePath(blockId), false)) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 720, "bugNodeStartChar": 22795, "bugNodeLength": 13, "fixLineNum": 720, "fixNodeStartChar": 22795, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "42fab35cfd750167e66829b562b0309c8f57802b", "fixCommitParentSHA1": "766a788e352534084c64113b5837fe46088f09f3", "bugFilePath": "core/src/main/java/tachyon/worker/hierarchy/StorageDir.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java b/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java\nindex 606c72f..b2f92c5 100644\n--- a/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java\n+++ b/core/src/main/java/tachyon/worker/hierarchy/StorageDir.java\n@@ -717,7 +717,7 @@\n     }\n     // Check if this blocks is currently hold by other users.\n     if (isBlockLocked(blockId) || !mToRemoveBlockIdSet.contains(blockId)) {\n-      return false;\n+      return true;\n     }\n     try {\n       if (!mFs.delete(getBlockFilePath(blockId), false)) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 720, "bugNodeStartChar": 22795, "bugNodeLength": 13, "fixLineNum": 720, "fixNodeStartChar": 22795, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "87853fcbfe7e562e0f282aa19220c367778fbe25", "fixCommitParentSHA1": "ba947424f901502038b8efcfde2a578e2f2568d8", "bugFilePath": "core/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/client/TachyonFS.java b/core/src/main/java/tachyon/client/TachyonFS.java\nindex e266543..3e85f2c 100644\n--- a/core/src/main/java/tachyon/client/TachyonFS.java\n+++ b/core/src/main/java/tachyon/client/TachyonFS.java\n@@ -577,11 +577,11 @@\n    * @param fileId the id of the queried file. If it is -1, uses path.\n    * @param path the path of the queried file. If fielId is not -1, this parameter is ignored.\n    * @param useCachedMetaData whether to use the cached data or not.\n-   * @return\n+   * @return the clientFileInfo.\n    * @throws IOException\n    */\n-  private synchronized <KeyType> ClientFileInfo getFileStatus(Map<KeyType, ClientFileInfo> cache,\n-      KeyType key, int fileId, String path, boolean useCachedMetaData) throws IOException {\n+  private synchronized <K> ClientFileInfo getFileStatus(Map<K, ClientFileInfo> cache, K key,\n+      int fileId, String path, boolean useCachedMetaData) throws IOException {\n     ClientFileInfo info = null;\n     if (useCachedMetaData) {\n       info = cache.get(key);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 583, "bugNodeStartChar": 19912, "bugNodeLength": 7, "fixLineNum": 583, "fixNodeStartChar": 19912, "fixNodeLength": 1, "sourceBeforeFix": "KeyType", "sourceAfterFix": "K"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b2eec07c6682767e23d09d688fd784afbfee9add", "fixCommitParentSHA1": "55929fd44dbdf69f203d9dacd70ecaa6a30b5b34", "bugFilePath": "core/src/test/java/tachyon/UnderFileSystemCluster.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/UnderFileSystemCluster.java b/core/src/test/java/tachyon/UnderFileSystemCluster.java\nindex d328d60..6094918 100644\n--- a/core/src/test/java/tachyon/UnderFileSystemCluster.java\n+++ b/core/src/test/java/tachyon/UnderFileSystemCluster.java\n@@ -72,8 +72,8 @@\n     if (mUfsClz != null && !mUfsClz.equals(\"\")) {\n       try {\n         UnderFileSystemCluster ufsCluster =\n-            (UnderFileSystemCluster) Class.forName(mUfsClz).getConstructor(String.class)\n-                .newInstance(baseDir);\n+            (UnderFileSystemCluster) Class.forName(mUfsClz).getConstructor(String.class,\n+                TachyonConf.class).newInstance(baseDir, tachyonConf);\n         return ufsCluster;\n       } catch (Exception e) {\n         System.out.println(\"Failed to initialize the ufsCluster of \" + mUfsClz\n", "projectName": "Alluxio.alluxio", "bugLineNum": 75, "bugNodeStartChar": 2404, "bugNodeLength": 51, "fixLineNum": 75, "fixNodeStartChar": 2404, "fixNodeLength": 86, "sourceBeforeFix": "Class.forName(mUfsClz).getConstructor(String.class)", "sourceAfterFix": "Class.forName(mUfsClz).getConstructor(String.class,TachyonConf.class)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "a26ee0d13f1f06b5776eb391ad32fbca77ed1395", "fixCommitParentSHA1": "12dfb4926d82c26923a541d86d1f0cb6a4c2a1ee", "bugFilePath": "core/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/client/TachyonFS.java b/core/src/main/java/tachyon/client/TachyonFS.java\nindex a7dc3ea..0dd6e6d 100644\n--- a/core/src/main/java/tachyon/client/TachyonFS.java\n+++ b/core/src/main/java/tachyon/client/TachyonFS.java\n@@ -257,18 +257,18 @@\n \n   /**\n    * Create a user UnderFileSystem temporary folder and return it\n-   * \n+   * @param ufsConf the configuration of UnderFileSystem\n    * @return the UnderFileSystem temporary folder\n    * @throws IOException\n    */\n-  synchronized String createAndGetUserUfsTempFolder() throws IOException {\n+  synchronized String createAndGetUserUfsTempFolder(Object ufsConf) throws IOException {\n     String tmpFolder = mWorkerClient.getUserUfsTempFolder();\n     if (tmpFolder == null) {\n       return null;\n     }\n \n     if (mUnderFileSystem == null) {\n-      mUnderFileSystem = UnderFileSystem.get(tmpFolder);\n+      mUnderFileSystem = UnderFileSystem.get(tmpFolder, ufsConf);\n     }\n \n     mUnderFileSystem.mkdirs(tmpFolder, true);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 271, "bugNodeStartChar": 9060, "bugNodeLength": 30, "fixLineNum": 271, "fixNodeStartChar": 9060, "fixNodeLength": 39, "sourceBeforeFix": "UnderFileSystem.get(tmpFolder)", "sourceAfterFix": "UnderFileSystem.get(tmpFolder,ufsConf)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f51c3550ad4056238fd2e7063d9c606c6d7beceb", "fixCommitParentSHA1": "ebae5b0a26bfff4ca1edf9fb2dbf6ef8ad589286", "bugFilePath": "core/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/client/TachyonFS.java b/core/src/main/java/tachyon/client/TachyonFS.java\nindex a7dc3ea..0dd6e6d 100644\n--- a/core/src/main/java/tachyon/client/TachyonFS.java\n+++ b/core/src/main/java/tachyon/client/TachyonFS.java\n@@ -257,18 +257,18 @@\n \n   /**\n    * Create a user UnderFileSystem temporary folder and return it\n-   * \n+   * @param ufsConf the configuration of UnderFileSystem\n    * @return the UnderFileSystem temporary folder\n    * @throws IOException\n    */\n-  synchronized String createAndGetUserUfsTempFolder() throws IOException {\n+  synchronized String createAndGetUserUfsTempFolder(Object ufsConf) throws IOException {\n     String tmpFolder = mWorkerClient.getUserUfsTempFolder();\n     if (tmpFolder == null) {\n       return null;\n     }\n \n     if (mUnderFileSystem == null) {\n-      mUnderFileSystem = UnderFileSystem.get(tmpFolder);\n+      mUnderFileSystem = UnderFileSystem.get(tmpFolder, ufsConf);\n     }\n \n     mUnderFileSystem.mkdirs(tmpFolder, true);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 271, "bugNodeStartChar": 9060, "bugNodeLength": 30, "fixLineNum": 271, "fixNodeStartChar": 9060, "fixNodeLength": 39, "sourceBeforeFix": "UnderFileSystem.get(tmpFolder)", "sourceAfterFix": "UnderFileSystem.get(tmpFolder,ufsConf)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0a8713235af5d85e00396cd65fdaef3939e38d60", "fixCommitParentSHA1": "fdc7224c0f85f60a875cce74cf33c5a2c73bf39b", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 265, "bugNodeStartChar": 10302, "bugNodeLength": 50, "fixLineNum": 265, "fixNodeStartChar": 10302, "fixNodeLength": 49, "sourceBeforeFix": "mTfs.createFile(new TachyonURI(\"/root/testFile1\"))", "sourceAfterFix": "tfs.createFile(new TachyonURI(\"/root/testFile1\"))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a8713235af5d85e00396cd65fdaef3939e38d60", "fixCommitParentSHA1": "fdc7224c0f85f60a875cce74cf33c5a2c73bf39b", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 265, "bugNodeStartChar": 10302, "bugNodeLength": 50, "fixLineNum": 265, "fixNodeStartChar": 10302, "fixNodeLength": 49, "sourceBeforeFix": "mTfs.createFile(new TachyonURI(\"/root/testFile1\"))", "sourceAfterFix": "tfs.createFile(new TachyonURI(\"/root/testFile1\"))"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0a8713235af5d85e00396cd65fdaef3939e38d60", "fixCommitParentSHA1": "fdc7224c0f85f60a875cce74cf33c5a2c73bf39b", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 267, "bugNodeStartChar": 10415, "bugNodeLength": 20, "fixLineNum": 267, "fixNodeStartChar": 10415, "fixNodeLength": 19, "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a8713235af5d85e00396cd65fdaef3939e38d60", "fixCommitParentSHA1": "fdc7224c0f85f60a875cce74cf33c5a2c73bf39b", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 267, "bugNodeStartChar": 10415, "bugNodeLength": 20, "fixLineNum": 267, "fixNodeStartChar": 10415, "fixNodeLength": 19, "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "fixCommitParentSHA1": "da1108ccc425babb87d4363d801ef9fb943608e2", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 265, "bugNodeStartChar": 10302, "bugNodeLength": 50, "fixLineNum": 265, "fixNodeStartChar": 10302, "fixNodeLength": 49, "sourceBeforeFix": "mTfs.createFile(new TachyonURI(\"/root/testFile1\"))", "sourceAfterFix": "tfs.createFile(new TachyonURI(\"/root/testFile1\"))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "fixCommitParentSHA1": "da1108ccc425babb87d4363d801ef9fb943608e2", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 265, "bugNodeStartChar": 10302, "bugNodeLength": 50, "fixLineNum": 265, "fixNodeStartChar": 10302, "fixNodeLength": 49, "sourceBeforeFix": "mTfs.createFile(new TachyonURI(\"/root/testFile1\"))", "sourceAfterFix": "tfs.createFile(new TachyonURI(\"/root/testFile1\"))"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "fixCommitParentSHA1": "da1108ccc425babb87d4363d801ef9fb943608e2", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 267, "bugNodeStartChar": 10415, "bugNodeLength": 20, "fixLineNum": 267, "fixNodeStartChar": 10415, "fixNodeLength": 19, "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "fixCommitParentSHA1": "da1108ccc425babb87d4363d801ef9fb943608e2", "bugFilePath": "core/src/test/java/tachyon/client/TachyonFSTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/client/TachyonFSTest.java b/core/src/test/java/tachyon/client/TachyonFSTest.java\nindex df6842d..194f4b1 100644\n--- a/core/src/test/java/tachyon/client/TachyonFSTest.java\n+++ b/core/src/test/java/tachyon/client/TachyonFSTest.java\n@@ -262,9 +262,9 @@\n   }\n \n   private void getTestHelper(TachyonFS tfs) throws IOException {\n-    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n+    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n-    Assert.assertNotNull(mTfs.getFile(fileId));\n+    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n \n   @Test\n", "projectName": "Alluxio.alluxio", "bugLineNum": 267, "bugNodeStartChar": 10415, "bugNodeLength": 20, "fixLineNum": 267, "fixNodeStartChar": 10415, "fixNodeLength": 19, "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "38a43deb5ee7d48ed0ad7dbfbc789a2e82ebbfc2", "fixCommitParentSHA1": "2c3336c23cbce4352547bde7aaaaeb6c7dfdd578", "bugFilePath": "core/src/main/java/tachyon/conf/MasterConf.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/conf/MasterConf.java b/core/src/main/java/tachyon/conf/MasterConf.java\nindex 6037abd..4d274fb 100644\n--- a/core/src/main/java/tachyon/conf/MasterConf.java\n+++ b/core/src/main/java/tachyon/conf/MasterConf.java\n@@ -61,7 +61,7 @@\n         (CommonConf.get().USE_ZOOKEEPER ? Constants.HEADER_FT : Constants.HEADER) + HOSTNAME + \":\"\n             + PORT;\n     WEB_PORT = getIntProperty(\"tachyon.master.web.port\", Constants.DEFAULT_MASTER_WEB_PORT);\n-    WEB_THREAD_COUNT = getIntProperty(\"tachyon.master.web.threads\", 5);\n+    WEB_THREAD_COUNT = getIntProperty(\"tachyon.master.web.threads\", 9);\n     TEMPORARY_FOLDER = getProperty(\"tachyon.master.temporary.folder\", \"/tmp\");\n \n     HEARTBEAT_INTERVAL_MS =\n", "projectName": "Alluxio.alluxio", "bugLineNum": 64, "bugNodeStartChar": 1914, "bugNodeLength": 47, "fixLineNum": 64, "fixNodeStartChar": 1914, "fixNodeLength": 47, "sourceBeforeFix": "getIntProperty(\"tachyon.master.web.threads\",5)", "sourceAfterFix": "getIntProperty(\"tachyon.master.web.threads\",9)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "38a43deb5ee7d48ed0ad7dbfbc789a2e82ebbfc2", "fixCommitParentSHA1": "2c3336c23cbce4352547bde7aaaaeb6c7dfdd578", "bugFilePath": "core/src/test/java/tachyon/master/LocalTachyonCluster.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/master/LocalTachyonCluster.java b/core/src/test/java/tachyon/master/LocalTachyonCluster.java\nindex a135fee..cf2f979 100644\n--- a/core/src/test/java/tachyon/master/LocalTachyonCluster.java\n+++ b/core/src/test/java/tachyon/master/LocalTachyonCluster.java\n@@ -156,7 +156,7 @@\n     System.setProperty(\"tachyon.worker.selector.threads\", Integer.toString(1));\n     System.setProperty(\"tachyon.worker.server.threads\", Integer.toString(2));\n     System.setProperty(\"tachyon.worker.network.netty.worker.threads\", Integer.toString(2));\n-    System.setProperty(\"tachyon.master.web.threads\", Integer.toString(1));\n+    System.setProperty(\"tachyon.master.web.threads\", Integer.toString(9));\n \n     CommonConf.clear();\n     MasterConf.clear();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 159, "bugNodeStartChar": 4703, "bugNodeLength": 19, "fixLineNum": 159, "fixNodeStartChar": 4703, "fixNodeLength": 19, "sourceBeforeFix": "Integer.toString(1)", "sourceAfterFix": "Integer.toString(9)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e8be6b3287a86c3caa153b4adbb84a2d9d006547", "fixCommitParentSHA1": "60cd47c8be95ac17e7cdd26e61a31bc187a2d059", "bugFilePath": "core/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/client/TachyonFS.java b/core/src/main/java/tachyon/client/TachyonFS.java\nindex 15b0498..683786a 100644\n--- a/core/src/main/java/tachyon/client/TachyonFS.java\n+++ b/core/src/main/java/tachyon/client/TachyonFS.java\n@@ -597,7 +597,12 @@\n     return new TachyonURI(scheme, authority, TachyonURI.SEPARATOR);\n   }\n   \n-  synchronized long getUserId() throws IOException {\n+  /**\n+   * Returns the userId of the master client. This is only used for testing.\n+   * @return the userId of the master client\n+   * @throws IOException\n+   */\n+  long getUserId() throws IOException {\n     return mMasterClient.getUserId();\n   }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 600, "bugNodeStartChar": 19486, "bugNodeLength": 92, "fixLineNum": 600, "fixNodeStartChar": 19486, "fixNodeLength": 238, "sourceBeforeFix": "32", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "09cf30fa0023aceb26e7f3ff7315a63fe5ed72ae", "fixCommitParentSHA1": "cff56cf0e1358ffae844d53920a8985bd33486e0", "bugFilePath": "core/src/main/java/tachyon/client/BlockHandlerLocal.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/client/BlockHandlerLocal.java b/core/src/main/java/tachyon/client/BlockHandlerLocal.java\nindex 1a29264..e3b6fe1 100644\n--- a/core/src/main/java/tachyon/client/BlockHandlerLocal.java\n+++ b/core/src/main/java/tachyon/client/BlockHandlerLocal.java\n@@ -21,7 +21,8 @@\n  */\n public final class BlockHandlerLocal extends BlockHandler {\n \n-  private final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n+  private static final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n+\n   private final RandomAccessFile mLocalFile;\n   private final FileChannel mLocalFileChannel;\n   private boolean mPermission = false;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 24, "bugNodeStartChar": 559, "bugNodeLength": 74, "fixLineNum": 24, "fixNodeStartChar": 559, "fixNodeLength": 81, "sourceBeforeFix": "18", "sourceAfterFix": "26"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 55, "bugNodeStartChar": 1788, "bugNodeLength": 11, "fixLineNum": 55, "fixNodeStartChar": 1788, "fixNodeLength": 9, "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 55, "bugNodeStartChar": 1788, "bugNodeLength": 11, "fixLineNum": 55, "fixNodeStartChar": 1788, "fixNodeLength": 9, "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 112, "bugNodeStartChar": 3675, "bugNodeLength": 28, "fixLineNum": 112, "fixNodeStartChar": 3675, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 112, "bugNodeStartChar": 3675, "bugNodeLength": 28, "fixLineNum": 112, "fixNodeStartChar": 3675, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 137, "bugNodeStartChar": 4602, "bugNodeLength": 28, "fixLineNum": 137, "fixNodeStartChar": 4602, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 137, "bugNodeStartChar": 4602, "bugNodeLength": 28, "fixLineNum": 137, "fixNodeStartChar": 4602, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 183, "bugNodeStartChar": 5952, "bugNodeLength": 28, "fixLineNum": 183, "fixNodeStartChar": 5952, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 183, "bugNodeStartChar": 5952, "bugNodeLength": 28, "fixLineNum": 183, "fixNodeStartChar": 5952, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 241, "bugNodeStartChar": 7846, "bugNodeLength": 28, "fixLineNum": 241, "fixNodeStartChar": 7846, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 241, "bugNodeStartChar": 7846, "bugNodeLength": 28, "fixLineNum": 241, "fixNodeStartChar": 7846, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 256, "bugNodeStartChar": 8454, "bugNodeLength": 28, "fixLineNum": 256, "fixNodeStartChar": 8454, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 256, "bugNodeStartChar": 8454, "bugNodeLength": 28, "fixLineNum": 256, "fixNodeStartChar": 8454, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 326, "bugNodeStartChar": 10657, "bugNodeLength": 28, "fixLineNum": 326, "fixNodeStartChar": 10657, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 326, "bugNodeStartChar": 10657, "bugNodeLength": 28, "fixLineNum": 326, "fixNodeStartChar": 10657, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 338, "bugNodeStartChar": 11177, "bugNodeLength": 28, "fixLineNum": 338, "fixNodeStartChar": 11177, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "fixCommitParentSHA1": "ef063203d3f0503e52661a0bad1c27fd23c81f4c", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 3e80eb8..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,12 +109,12 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,10 +180,10 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-          mBuf.array()[0] = (byte) (k + mWorkerId);\n+          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();\n@@ -216,10 +216,10 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n-          intBuf = buf.DATA.asIntBuffer();\n+          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -261,7 +261,7 @@\n           sum += mBuf.get(pId % 16);\n \n           if (DEBUG_MODE) {\n-            buf.DATA.flip();\n+            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();\n@@ -323,10 +323,10 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n-            mBuf.array()[0] = (byte) (k + mWorkerId);\n+            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 338, "bugNodeStartChar": 11177, "bugNodeLength": 28, "fixLineNum": 338, "fixNodeStartChar": 11177, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 55, "bugNodeStartChar": 1788, "bugNodeLength": 11, "fixLineNum": 55, "fixNodeStartChar": 1788, "fixNodeLength": 9, "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 55, "bugNodeStartChar": 1788, "bugNodeLength": 11, "fixLineNum": 55, "fixNodeStartChar": 1788, "fixNodeLength": 9, "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 112, "bugNodeStartChar": 3675, "bugNodeLength": 28, "fixLineNum": 112, "fixNodeStartChar": 3675, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 112, "bugNodeStartChar": 3675, "bugNodeLength": 28, "fixLineNum": 112, "fixNodeStartChar": 3675, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 137, "bugNodeStartChar": 4591, "bugNodeLength": 28, "fixLineNum": 137, "fixNodeStartChar": 4591, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 137, "bugNodeStartChar": 4591, "bugNodeLength": 28, "fixLineNum": 137, "fixNodeStartChar": 4591, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 183, "bugNodeStartChar": 5941, "bugNodeLength": 28, "fixLineNum": 183, "fixNodeStartChar": 5941, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 183, "bugNodeStartChar": 5941, "bugNodeLength": 28, "fixLineNum": 183, "fixNodeStartChar": 5941, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 241, "bugNodeStartChar": 7855, "bugNodeLength": 28, "fixLineNum": 241, "fixNodeStartChar": 7855, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 241, "bugNodeStartChar": 7855, "bugNodeLength": 28, "fixLineNum": 241, "fixNodeStartChar": 7855, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 256, "bugNodeStartChar": 8463, "bugNodeLength": 28, "fixLineNum": 256, "fixNodeStartChar": 8463, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 256, "bugNodeStartChar": 8463, "bugNodeLength": 28, "fixLineNum": 256, "fixNodeStartChar": 8463, "fixNodeLength": 22, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 326, "bugNodeStartChar": 10697, "bugNodeLength": 28, "fixLineNum": 326, "fixNodeStartChar": 10697, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 326, "bugNodeStartChar": 10697, "bugNodeLength": 28, "fixLineNum": 326, "fixNodeStartChar": 10697, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 338, "bugNodeStartChar": 11206, "bugNodeLength": 28, "fixLineNum": 338, "fixNodeStartChar": 11206, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "fixCommitParentSHA1": "37e4372f2e5fb00241ad9514bbd4bee12e24d896", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 31b5ff0..411c7b0 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -52,7 +52,7 @@\n \n   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n-    for (int k = 0; k < THREADS; k ++) {\n+    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }\n@@ -109,7 +109,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -134,7 +134,7 @@\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n-            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n+            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n@@ -180,7 +180,7 @@\n       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n-        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);\n@@ -216,7 +216,7 @@\n         LOG.info(\"Verifying the reading data...\");\n \n         for (int pId = mLeft; pId < mRight; pId ++) {\n-          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n@@ -238,7 +238,7 @@\n       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n@@ -253,7 +253,7 @@\n       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n+          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());\n@@ -323,7 +323,7 @@\n       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);\n@@ -335,7 +335,7 @@\n       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n-          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n+          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 338, "bugNodeStartChar": 11206, "bugNodeLength": 28, "fixLineNum": 338, "fixNodeStartChar": 11206, "fixNodeLength": 24, "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "fixCommitParentSHA1": "7b27f73c9e1df683e959ffe8cbb8a4b6bd858d7f", "bugFilePath": "core/src/main/java/tachyon/master/EditLog.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/master/EditLog.java b/core/src/main/java/tachyon/master/EditLog.java\nindex 713dbaa..e3b12f4 100644\n--- a/core/src/main/java/tachyon/master/EditLog.java\n+++ b/core/src/main/java/tachyon/master/EditLog.java\n@@ -112,7 +112,7 @@\n     UnderFileSystem ufs = UnderFileSystem.get(path);\n \n     DataInputStream is = new DataInputStream(ufs.open(path));\n-    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(is);\n+    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(is);\n \n     while (true) {\n       EditLogOperation op;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 115, "bugNodeStartChar": 3856, "bugNodeLength": 48, "fixLineNum": 115, "fixNodeStartChar": 3856, "fixNodeLength": 44, "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "fixCommitParentSHA1": "7b27f73c9e1df683e959ffe8cbb8a4b6bd858d7f", "bugFilePath": "core/src/main/java/tachyon/master/EditLog.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/master/EditLog.java b/core/src/main/java/tachyon/master/EditLog.java\nindex 713dbaa..e3b12f4 100644\n--- a/core/src/main/java/tachyon/master/EditLog.java\n+++ b/core/src/main/java/tachyon/master/EditLog.java\n@@ -112,7 +112,7 @@\n     UnderFileSystem ufs = UnderFileSystem.get(path);\n \n     DataInputStream is = new DataInputStream(ufs.open(path));\n-    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(is);\n+    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(is);\n \n     while (true) {\n       EditLogOperation op;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 115, "bugNodeStartChar": 3856, "bugNodeLength": 48, "fixLineNum": 115, "fixNodeStartChar": 3856, "fixNodeLength": 44, "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "fixCommitParentSHA1": "7b27f73c9e1df683e959ffe8cbb8a4b6bd858d7f", "bugFilePath": "core/src/main/java/tachyon/master/Image.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/master/Image.java b/core/src/main/java/tachyon/master/Image.java\nindex 35698cf..c14245a 100644\n--- a/core/src/main/java/tachyon/master/Image.java\n+++ b/core/src/main/java/tachyon/master/Image.java\n@@ -85,7 +85,7 @@\n     }\n     LOG.info(\"Loading image \" + path);\n     DataInputStream imageIs = new DataInputStream(ufs.open(path));\n-    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(imageIs);\n+    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(imageIs);\n \n     info.loadImage(parser, path);\n     imageIs.close();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 88, "bugNodeStartChar": 3040, "bugNodeLength": 48, "fixLineNum": 88, "fixNodeStartChar": 3040, "fixNodeLength": 44, "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "fixCommitParentSHA1": "7b27f73c9e1df683e959ffe8cbb8a4b6bd858d7f", "bugFilePath": "core/src/main/java/tachyon/master/Image.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/master/Image.java b/core/src/main/java/tachyon/master/Image.java\nindex 35698cf..c14245a 100644\n--- a/core/src/main/java/tachyon/master/Image.java\n+++ b/core/src/main/java/tachyon/master/Image.java\n@@ -85,7 +85,7 @@\n     }\n     LOG.info(\"Loading image \" + path);\n     DataInputStream imageIs = new DataInputStream(ufs.open(path));\n-    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(imageIs);\n+    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(imageIs);\n \n     info.loadImage(parser, path);\n     imageIs.close();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 88, "bugNodeStartChar": 3040, "bugNodeLength": 48, "fixLineNum": 88, "fixNodeStartChar": 3040, "fixNodeLength": 44, "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "fixCommitParentSHA1": "789c061e49a3f4201e6184c21e3383175a866ff2", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 80612c4..6278c4c 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -74,7 +74,7 @@\n \n   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILE_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }\n \n@@ -410,7 +410,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n \n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n@@ -450,7 +450,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n@@ -486,7 +486,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 77, "bugNodeStartChar": 2957, "bugNodeLength": 18, "fixLineNum": 77, "fixNodeStartChar": 2957, "fixNodeLength": 19, "sourceBeforeFix": "1000L * FILE_BYTES", "sourceAfterFix": "1000.0 * FILE_BYTES"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "fixCommitParentSHA1": "789c061e49a3f4201e6184c21e3383175a866ff2", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 80612c4..6278c4c 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -74,7 +74,7 @@\n \n   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILE_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }\n \n@@ -410,7 +410,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n \n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n@@ -450,7 +450,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n@@ -486,7 +486,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 413, "bugNodeStartChar": 13840, "bugNodeLength": 19, "fixLineNum": 413, "fixNodeStartChar": 13840, "fixNodeLength": 20, "sourceBeforeFix": "1000L * FILES_BYTES", "sourceAfterFix": "1000.0 * FILES_BYTES"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "fixCommitParentSHA1": "789c061e49a3f4201e6184c21e3383175a866ff2", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 80612c4..6278c4c 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -74,7 +74,7 @@\n \n   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILE_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }\n \n@@ -410,7 +410,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n \n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n@@ -450,7 +450,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n@@ -486,7 +486,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 453, "bugNodeStartChar": 15276, "bugNodeLength": 19, "fixLineNum": 453, "fixNodeStartChar": 15276, "fixNodeLength": 20, "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "fixCommitParentSHA1": "789c061e49a3f4201e6184c21e3383175a866ff2", "bugFilePath": "core/src/main/java/tachyon/examples/Performance.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/examples/Performance.java b/core/src/main/java/tachyon/examples/Performance.java\nindex 80612c4..6278c4c 100644\n--- a/core/src/main/java/tachyon/examples/Performance.java\n+++ b/core/src/main/java/tachyon/examples/Performance.java\n@@ -74,7 +74,7 @@\n \n   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILE_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }\n \n@@ -410,7 +410,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n+    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n \n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n@@ -450,7 +450,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n@@ -486,7 +486,7 @@\n       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n-    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n+    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 489, "bugNodeStartChar": 16629, "bugNodeLength": 19, "fixLineNum": 489, "fixNodeStartChar": 16629, "fixNodeLength": 20, "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "fixCommitParentSHA1": "f10e03d91a0fb7afc7ebdbdb128048106a2355b4", "bugFilePath": "core/src/main/java/tachyon/UserInfo.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/UserInfo.java b/core/src/main/java/tachyon/UserInfo.java\nindex 8df6b4d..95adf37 100644\n--- a/core/src/main/java/tachyon/UserInfo.java\n+++ b/core/src/main/java/tachyon/UserInfo.java\n@@ -28,7 +28,7 @@\n   private long mLastHeartbeatMs;\n \n   public UserInfo(long userId) {\n-    Preconditions.checkArgument(userId <= 0, \"Invalid user id \" + userId);\n+    Preconditions.checkArgument(userId > 0, \"Invalid user id \" + userId);\n     USER_ID = userId;\n     mOwnBytes = 0;\n     mLastHeartbeatMs = System.currentTimeMillis();\n", "projectName": "Alluxio.alluxio", "bugLineNum": 31, "bugNodeStartChar": 1151, "bugNodeLength": 11, "fixLineNum": 31, "fixNodeStartChar": 1151, "fixNodeLength": 10, "sourceBeforeFix": "userId <= 0", "sourceAfterFix": "userId > 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "fixCommitParentSHA1": "f10e03d91a0fb7afc7ebdbdb128048106a2355b4", "bugFilePath": "core/src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/client/TachyonFS.java b/core/src/main/java/tachyon/client/TachyonFS.java\nindex 5d4165c..08daccc 100644\n--- a/core/src/main/java/tachyon/client/TachyonFS.java\n+++ b/core/src/main/java/tachyon/client/TachyonFS.java\n@@ -87,7 +87,7 @@\n     if (tempAddress.contains(Constants.PATH_SEPARATOR)) {\n       masterAddress = tempAddress.substring(0, tempAddress.indexOf(Constants.PATH_SEPARATOR));\n     }\n-    Preconditions.checkArgument(masterAddress.split(\":\").length != 2, \"Illegal Tachyon Master Address: \" + tachyonPath);\n+    Preconditions.checkArgument(masterAddress.split(\":\").length == 2, \"Illegal Tachyon Master Address: \" + tachyonPath);\n \n     String masterHost = masterAddress.split(\":\")[0];\n     int masterPort = Integer.parseInt(masterAddress.split(\":\")[1]);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 90, "bugNodeStartChar": 3530, "bugNodeLength": 36, "fixLineNum": 90, "fixNodeStartChar": 3530, "fixNodeLength": 36, "sourceBeforeFix": "masterAddress.split(\":\").length != 2", "sourceAfterFix": "masterAddress.split(\":\").length == 2"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "fixCommitParentSHA1": "f10e03d91a0fb7afc7ebdbdb128048106a2355b4", "bugFilePath": "core/src/main/java/tachyon/conf/Utils.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/conf/Utils.java b/core/src/main/java/tachyon/conf/Utils.java\nindex b9631ea..5e1c00b 100644\n--- a/core/src/main/java/tachyon/conf/Utils.java\n+++ b/core/src/main/java/tachyon/conf/Utils.java\n@@ -51,7 +51,7 @@\n \n   public static String getProperty(String property) {\n     String ret = System.getProperty(property);\n-    Preconditions.checkArgument(ret == null, property + \" is not configured.\");\n+    Preconditions.checkArgument(ret != null, property + \" is not configured.\");\n     LOG.debug(property + \" : \" + ret);\n     return ret;\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 54, "bugNodeStartChar": 1963, "bugNodeLength": 11, "fixLineNum": 54, "fixNodeStartChar": 1963, "fixNodeLength": 11, "sourceBeforeFix": "ret == null", "sourceAfterFix": "ret != null"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "fixCommitParentSHA1": "f10e03d91a0fb7afc7ebdbdb128048106a2355b4", "bugFilePath": "core/src/main/java/tachyon/worker/DataServerMessage.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/worker/DataServerMessage.java b/core/src/main/java/tachyon/worker/DataServerMessage.java\nindex 2c03f6f..e3da84b 100644\n--- a/core/src/main/java/tachyon/worker/DataServerMessage.java\n+++ b/core/src/main/java/tachyon/worker/DataServerMessage.java\n@@ -222,7 +222,7 @@\n    * Check if the message is ready. If not ready, it will throw a runtime exception.\n    */\n   public void checkReady() {\n-    Preconditions.checkState(!mIsMessageReady, \"Message is not ready.\");\n+    Preconditions.checkState(mIsMessageReady, \"Message is not ready.\");\n   }\n \n   /**\n", "projectName": "Alluxio.alluxio", "bugLineNum": 225, "bugNodeStartChar": 7981, "bugNodeLength": 16, "fixLineNum": 225, "fixNodeStartChar": 7981, "fixNodeLength": 15, "sourceBeforeFix": "!mIsMessageReady", "sourceAfterFix": "mIsMessageReady"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "69c6c1e37f0d498cdfaf8d7161d1ad0298683f16", "fixCommitParentSHA1": "a2edc5c6e4e0eb94b5aa0c1088bee3c5de99693f", "bugFilePath": "core/src/test/java/tachyon/LocalMiniDFSCluster.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/LocalMiniDFSCluster.java b/core/src/test/java/tachyon/LocalMiniDFSCluster.java\nindex b88fe58..cfffa7c 100644\n--- a/core/src/test/java/tachyon/LocalMiniDFSCluster.java\n+++ b/core/src/test/java/tachyon/LocalMiniDFSCluster.java\n@@ -195,7 +195,7 @@\n     if (!mIsStarted) {\n \n       delete(mBaseDir, true);\n-      if (mkdirs(mBaseDir)) {\n+      if (!mkdirs(mBaseDir)) {\n         throw new IOException(\"Failed to make folder: \" + mBaseDir);\n       }\n \n", "projectName": "Alluxio.alluxio", "bugLineNum": 198, "bugNodeStartChar": 5926, "bugNodeLength": 16, "fixLineNum": 198, "fixNodeStartChar": 5926, "fixNodeLength": 17, "sourceBeforeFix": "mkdirs(mBaseDir)", "sourceAfterFix": "!mkdirs(mBaseDir)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "ab3350b4d657affb210da0770ab95f12fb576fdf", "fixCommitParentSHA1": "11fd34c2c91b7ba02a807eb5c0e70d7c16f9443e", "bugFilePath": "core/src/test/java/tachyon/master/MasterFaultToleranceTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\nindex 18f9e56..8d1482f 100644\n--- a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n+++ b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n@@ -89,7 +89,7 @@\n    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n-    List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);\n+    List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);\n     if (answer.size() != files.size()) {\n       System.out.println(\"Files===========================\");\n       for (int k = 0; k < files.size(); k ++) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3267, "bugNodeLength": 39, "fixLineNum": 92, "fixNodeStartChar": 3267, "fixNodeLength": 38, "sourceBeforeFix": "mTfs.ls(Constants.PATH_SEPARATOR,true)", "sourceAfterFix": "tfs.ls(Constants.PATH_SEPARATOR,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ab3350b4d657affb210da0770ab95f12fb576fdf", "fixCommitParentSHA1": "11fd34c2c91b7ba02a807eb5c0e70d7c16f9443e", "bugFilePath": "core/src/test/java/tachyon/master/MasterFaultToleranceTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\nindex 18f9e56..8d1482f 100644\n--- a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n+++ b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n@@ -89,7 +89,7 @@\n    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n-    List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);\n+    List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);\n     if (answer.size() != files.size()) {\n       System.out.println(\"Files===========================\");\n       for (int k = 0; k < files.size(); k ++) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3267, "bugNodeLength": 39, "fixLineNum": 92, "fixNodeStartChar": 3267, "fixNodeLength": 38, "sourceBeforeFix": "mTfs.ls(Constants.PATH_SEPARATOR,true)", "sourceAfterFix": "tfs.ls(Constants.PATH_SEPARATOR,true)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "f207bc7996e970fb75d00fd340bcfbc2efd44bfd", "fixCommitParentSHA1": "9bae9f85f1b5f1d478f1b6a7b1e8465753cfca20", "bugFilePath": "core/src/test/java/tachyon/master/MasterFaultToleranceTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\nindex 2afa78f..67e40f8 100644\n--- a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n+++ b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n@@ -89,7 +89,7 @@\n    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n-    List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);\n+    List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);\n     Assert.assertEquals(answer.size(), files.size());\n     for (int k = 0; k < answer.size(); k ++) {\n       Assert.assertEquals(answer.get(k).getSecond(), tfs.getFile(answer.get(k).getFirst())\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3267, "bugNodeLength": 39, "fixLineNum": 92, "fixNodeStartChar": 3267, "fixNodeLength": 38, "sourceBeforeFix": "mTfs.ls(Constants.PATH_SEPARATOR,true)", "sourceAfterFix": "tfs.ls(Constants.PATH_SEPARATOR,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f207bc7996e970fb75d00fd340bcfbc2efd44bfd", "fixCommitParentSHA1": "9bae9f85f1b5f1d478f1b6a7b1e8465753cfca20", "bugFilePath": "core/src/test/java/tachyon/master/MasterFaultToleranceTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\nindex 2afa78f..67e40f8 100644\n--- a/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n+++ b/core/src/test/java/tachyon/master/MasterFaultToleranceTest.java\n@@ -89,7 +89,7 @@\n    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n-    List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);\n+    List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);\n     Assert.assertEquals(answer.size(), files.size());\n     for (int k = 0; k < answer.size(); k ++) {\n       Assert.assertEquals(answer.get(k).getSecond(), tfs.getFile(answer.get(k).getFirst())\n", "projectName": "Alluxio.alluxio", "bugLineNum": 92, "bugNodeStartChar": 3267, "bugNodeLength": 39, "fixLineNum": 92, "fixNodeStartChar": 3267, "fixNodeLength": 38, "sourceBeforeFix": "mTfs.ls(Constants.PATH_SEPARATOR,true)", "sourceAfterFix": "tfs.ls(Constants.PATH_SEPARATOR,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9fe147f0d526ec84399f4b1d1ef58bb996466038", "fixCommitParentSHA1": "37ffae4633399e2f3d884c09b3c870477f713920", "bugFilePath": "core/src/test/java/tachyon/master/MasterInfoTest.java", "fixPatch": "diff --git a/core/src/test/java/tachyon/master/MasterInfoTest.java b/core/src/test/java/tachyon/master/MasterInfoTest.java\nindex 41fccb7..0fac0e5 100644\n--- a/core/src/test/java/tachyon/master/MasterInfoTest.java\n+++ b/core/src/test/java/tachyon/master/MasterInfoTest.java\n@@ -359,7 +359,7 @@\n     mMasterInfo.createFile(\"testFile\", Constants.DEFAULT_BLOCK_SIZE_BYTE);\n   }\n \n-  @Test(expected = InvalidPathException.class)\n+  @Test(expected = FileAlreadyExistException.class)\n   public void createFileInvalidPathTest2() throws InvalidPathException, FileAlreadyExistException,\n       BlockInfoException, TachyonException {\n     mMasterInfo.createFile(\"/\", Constants.DEFAULT_BLOCK_SIZE_BYTE);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 362, "bugNodeStartChar": 13699, "bugNodeLength": 26, "fixLineNum": 362, "fixNodeStartChar": 13699, "fixNodeLength": 31, "sourceBeforeFix": "InvalidPathException.class", "sourceAfterFix": "FileAlreadyExistException.class"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "bafdd0e454099462ae9cebcab8b155eb60db7e9a", "fixCommitParentSHA1": "e1cdc18ced964de6df00a0fa5fdc2574b959a6fa", "bugFilePath": "core/src/main/java/tachyon/TachyonURI.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/TachyonURI.java b/core/src/main/java/tachyon/TachyonURI.java\nindex 57c4685..d45a2bd 100644\n--- a/core/src/main/java/tachyon/TachyonURI.java\n+++ b/core/src/main/java/tachyon/TachyonURI.java\n@@ -104,7 +104,7 @@\n     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n-              parentUri.getPath() + SEPARATOR, null);\n+              parentUri.getPath() + SEPARATOR, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 3680, "bugNodeLength": 109, "fixLineNum": 106, "fixNodeStartChar": 3680, "fixNodeLength": 115, "sourceBeforeFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)", "sourceAfterFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "e644b26706f629425854e325bbb6efb8df6d9862", "fixCommitParentSHA1": "029cc54a934f6cded4b8119c2cf580988873aa35", "bugFilePath": "core/src/main/java/tachyon/TachyonURI.java", "fixPatch": "diff --git a/core/src/main/java/tachyon/TachyonURI.java b/core/src/main/java/tachyon/TachyonURI.java\nindex 57c4685..d45a2bd 100644\n--- a/core/src/main/java/tachyon/TachyonURI.java\n+++ b/core/src/main/java/tachyon/TachyonURI.java\n@@ -104,7 +104,7 @@\n     try {\n       parentUri =\n           new URI(parentUri.getScheme(), parentUri.getAuthority(),\n-              parentUri.getPath() + SEPARATOR, null);\n+              parentUri.getPath() + SEPARATOR, null, null);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 106, "bugNodeStartChar": 3680, "bugNodeLength": 109, "fixLineNum": 106, "fixNodeStartChar": 3680, "fixNodeLength": 115, "sourceBeforeFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)", "sourceAfterFix": "new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "3a75e0ddf165fb153cc741b1a1f4b409443f33e4", "fixCommitParentSHA1": "c96c59a59744fbf99208c46fc8a6437616d24b8d", "bugFilePath": "main/src/main/java/tachyon/web/WebInterfaceBrowseServlet.java", "fixPatch": "diff --git a/main/src/main/java/tachyon/web/WebInterfaceBrowseServlet.java b/main/src/main/java/tachyon/web/WebInterfaceBrowseServlet.java\nindex d2294f9..8a0555f 100644\n--- a/main/src/main/java/tachyon/web/WebInterfaceBrowseServlet.java\n+++ b/main/src/main/java/tachyon/web/WebInterfaceBrowseServlet.java\n@@ -180,7 +180,7 @@\n     request.setAttribute(\"invalidPathError\", \"\");\n     List<ClientFileInfo> filesInfo = null;\n     String currentPath = request.getParameter(\"path\");\n-    if (currentPath.isEmpty()) {\n+    if (currentPath == null || currentPath.isEmpty()) {\n       currentPath = Constants.PATH_SEPARATOR;\n     }\n     request.setAttribute(\"currentPath\", currentPath);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 183, "bugNodeStartChar": 6184, "bugNodeLength": 21, "fixLineNum": 183, "fixNodeStartChar": 6184, "fixNodeLength": 44, "sourceBeforeFix": "currentPath.isEmpty()", "sourceAfterFix": "currentPath == null || currentPath.isEmpty()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "cdf09affa490e617190060402eade8daa292f812", "fixCommitParentSHA1": "acc8674307a2c236448d072277b87327a42b201d", "bugFilePath": "src/main/java/tachyon/client/FileOutStream.java", "fixPatch": "diff --git a/src/main/java/tachyon/client/FileOutStream.java b/src/main/java/tachyon/client/FileOutStream.java\nindex 2db178a..ae8ced2 100644\n--- a/src/main/java/tachyon/client/FileOutStream.java\n+++ b/src/main/java/tachyon/client/FileOutStream.java\n@@ -134,10 +134,10 @@\n         int tLen = len;\n         int tOff = off;\n         while (tLen > 0) {\n-          if (mCurrentBlockLeftByte == 0) {\n+          if (mCurrentBlockLeftByte <= 0 || mCurrentBlockOutStream == null ) {\n             getNextBlock();\n           }\n-          if (mCurrentBlockLeftByte > tLen) {\n+          if (mCurrentBlockLeftByte >= tLen) {\n             mCurrentBlockOutStream.write(b, tOff, tLen);\n             mCurrentBlockLeftByte -= tLen;\n             mCachedBytes += tLen;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 140, "bugNodeStartChar": 4548, "bugNodeLength": 28, "fixLineNum": 140, "fixNodeStartChar": 4548, "fixNodeLength": 29, "sourceBeforeFix": "mCurrentBlockLeftByte > tLen", "sourceAfterFix": "mCurrentBlockLeftByte >= tLen"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "75c681be8612e7176baf439d83b78ec9e81d1b58", "fixCommitParentSHA1": "871677b32d218b367f9dc6d7952837045c69a5bc", "bugFilePath": "src/main/java/tachyon/MasterInfo.java", "fixPatch": "diff --git a/src/main/java/tachyon/MasterInfo.java b/src/main/java/tachyon/MasterInfo.java\nindex 59e1fbd..6d8153e 100644\n--- a/src/main/java/tachyon/MasterInfo.java\n+++ b/src/main/java/tachyon/MasterInfo.java\n@@ -153,7 +153,7 @@\n                       dep.addLostFile(tFile.getId());\n                       LOG.info(\"File \" + tFile.getId() + \" got lost from worker \" + worker.getId() +\n                           \" . Trying to recompute it using dependency \" + dep.ID);\n-                      if (getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)) {\n+                      if (!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)) {\n                         mMustRecomputeDependencies.add(depId);\n                       }\n                     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 156, "bugNodeStartChar": 6085, "bugNodeLength": 55, "fixLineNum": 156, "fixNodeStartChar": 6085, "fixNodeLength": 56, "sourceBeforeFix": "getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)", "sourceAfterFix": "!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 133, "bugNodeStartChar": 3850, "bugNodeLength": 327, "fixLineNum": 133, "fixNodeStartChar": 3850, "fixNodeLength": 340, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 148, "bugNodeStartChar": 4181, "bugNodeLength": 575, "fixLineNum": 148, "fixNodeStartChar": 4181, "fixNodeLength": 588, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 168, "bugNodeStartChar": 4760, "bugNodeLength": 276, "fixLineNum": 168, "fixNodeStartChar": 4760, "fixNodeLength": 289, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 182, "bugNodeStartChar": 5040, "bugNodeLength": 277, "fixLineNum": 182, "fixNodeStartChar": 5040, "fixNodeLength": 290, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 196, "bugNodeStartChar": 5321, "bugNodeLength": 229, "fixLineNum": 196, "fixNodeStartChar": 5321, "fixNodeLength": 242, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 209, "bugNodeStartChar": 5554, "bugNodeLength": 324, "fixLineNum": 209, "fixNodeStartChar": 5554, "fixNodeLength": 337, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "fixCommitParentSHA1": "db7f6d67d54064fc761d65dfcb10c404f33602c1", "bugFilePath": "src/main/java/tachyon/EditLog.java", "fixPatch": "diff --git a/src/main/java/tachyon/EditLog.java b/src/main/java/tachyon/EditLog.java\nindex 24eca53..5d924bf 100644\n--- a/src/main/java/tachyon/EditLog.java\n+++ b/src/main/java/tachyon/EditLog.java\n@@ -130,7 +130,7 @@\n     }\n   }\n \n-  public void addBlock(int fileId, int blockIndex, long blockLength) {\n+  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -145,7 +145,7 @@\n     }\n   }\n \n-  public void createFile(boolean recursive, String path, boolean directory, int columns,\n+  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;\n@@ -165,7 +165,7 @@\n     }\n   }\n \n-  public void delete(int fileId, boolean recursive) {\n+  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -179,7 +179,7 @@\n     }\n   }\n \n-  public void rename(int fileId, String dstPath) {\n+  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -193,7 +193,7 @@\n     }\n   }\n \n-  public void unpinFile(int fileId) {\n+  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -206,7 +206,7 @@\n     }\n   }\n \n-  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n+  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }\n@@ -220,7 +220,7 @@\n     }\n   }\n \n-  public void completeFile(int fileId) {\n+  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 223, "bugNodeStartChar": 5882, "bugNodeLength": 235, "fixLineNum": 223, "fixNodeStartChar": 5882, "fixNodeLength": 248, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "fixCommitParentSHA1": "8ce7e71a223cbbd48d7547d69daebb96c8102b87", "bugFilePath": "src/main/java/tachyon/client/RawColumn.java", "fixPatch": "diff --git a/src/main/java/tachyon/client/RawColumn.java b/src/main/java/tachyon/client/RawColumn.java\nindex 762cbe6..5d1a191 100644\n--- a/src/main/java/tachyon/client/RawColumn.java\n+++ b/src/main/java/tachyon/client/RawColumn.java\n@@ -31,7 +31,7 @@\n   }\n \n   // TODO creating file here should be based on id.\n-  public TachyonFile getPartition(int pId, boolean cachedMetadata) {\n+  public TachyonFile getPartition(int pId, boolean cachedMetadata) throws IOException {\n     return TFS.getFile(RAW_TABLE.getPath() + Constants.PATH_SEPARATOR + MasterInfo.COL +\n         COLUMN_INDEX + Constants.PATH_SEPARATOR + pId, cachedMetadata);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 34, "bugNodeStartChar": 933, "bugNodeLength": 231, "fixLineNum": 34, "fixNodeStartChar": 933, "fixNodeLength": 250, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "fixCommitParentSHA1": "8ce7e71a223cbbd48d7547d69daebb96c8102b87", "bugFilePath": "src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/src/main/java/tachyon/client/TachyonFS.java b/src/main/java/tachyon/client/TachyonFS.java\nindex e644d9b..7c0f70a 100644\n--- a/src/main/java/tachyon/client/TachyonFS.java\n+++ b/src/main/java/tachyon/client/TachyonFS.java\n@@ -455,7 +455,8 @@\n     }\n   }\n \n-  private synchronized ClientFileInfo getClientFileInfo(String path, boolean useCachedMetadata) { \n+  private synchronized ClientFileInfo getClientFileInfo(String path, boolean useCachedMetadata)\n+      throws IOException { \n     connect();\n     if (!mConnected) {\n       return null;\n@@ -566,7 +567,8 @@\n     return getFile(path, false);\n   }\n \n-  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) {\n+  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) \n+      throws IOException {\n     path = CommonUtils.cleanPath(path);\n     ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);\n     if (clientFileInfo == null) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 458, "bugNodeStartChar": 13040, "bugNodeLength": 824, "fixLineNum": 458, "fixNodeStartChar": 13040, "fixNodeLength": 849, "sourceBeforeFix": "34", "sourceAfterFix": "34"}, {"bugType": "ADD_THROWS_EXCEPTION", "fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "fixCommitParentSHA1": "8ce7e71a223cbbd48d7547d69daebb96c8102b87", "bugFilePath": "src/main/java/tachyon/client/TachyonFS.java", "fixPatch": "diff --git a/src/main/java/tachyon/client/TachyonFS.java b/src/main/java/tachyon/client/TachyonFS.java\nindex e644d9b..7c0f70a 100644\n--- a/src/main/java/tachyon/client/TachyonFS.java\n+++ b/src/main/java/tachyon/client/TachyonFS.java\n@@ -455,7 +455,8 @@\n     }\n   }\n \n-  private synchronized ClientFileInfo getClientFileInfo(String path, boolean useCachedMetadata) { \n+  private synchronized ClientFileInfo getClientFileInfo(String path, boolean useCachedMetadata)\n+      throws IOException { \n     connect();\n     if (!mConnected) {\n       return null;\n@@ -566,7 +567,8 @@\n     return getFile(path, false);\n   }\n \n-  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) {\n+  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) \n+      throws IOException {\n     path = CommonUtils.cleanPath(path);\n     ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);\n     if (clientFileInfo == null) {\n", "projectName": "Alluxio.alluxio", "bugLineNum": 569, "bugNodeStartChar": 15981, "bugNodeLength": 388, "fixLineNum": 569, "fixNodeStartChar": 15981, "fixNodeLength": 414, "sourceBeforeFix": "33", "sourceAfterFix": "33"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "fba66d652357d9f116945382b2e3b1e65e295376", "fixCommitParentSHA1": "6a53f0ebc2d8d8e6851006605feb60419fecbf52", "bugFilePath": "src/main/java/tachyon/UnderFileSystemHdfs.java", "fixPatch": "diff --git a/src/main/java/tachyon/UnderFileSystemHdfs.java b/src/main/java/tachyon/UnderFileSystemHdfs.java\nindex 5067b32..c5eac84 100644\n--- a/src/main/java/tachyon/UnderFileSystemHdfs.java\n+++ b/src/main/java/tachyon/UnderFileSystemHdfs.java\n@@ -195,7 +195,7 @@\n         if (mFs.exists(new Path(path))) {\n           return true;\n         }\n-        return mFs.mkdirs(new Path(path), null);\n+        return mFs.mkdirs(new Path(path));\n       } catch (IOException e) {\n         cnt ++;\n         LOG.error(cnt + \" : \" + e.getMessage(), e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 198, "bugNodeStartChar": 5358, "bugNodeLength": 32, "fixLineNum": 198, "fixNodeStartChar": 5358, "fixNodeLength": 26, "sourceBeforeFix": "mFs.mkdirs(new Path(path),null)", "sourceAfterFix": "mFs.mkdirs(new Path(path))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "118cb7b87bde01d6e23a97584087738e90113e8b", "fixCommitParentSHA1": "6a53f0ebc2d8d8e6851006605feb60419fecbf52", "bugFilePath": "src/main/java/tachyon/UnderFileSystemHdfs.java", "fixPatch": "diff --git a/src/main/java/tachyon/UnderFileSystemHdfs.java b/src/main/java/tachyon/UnderFileSystemHdfs.java\nindex 5067b32..c5eac84 100644\n--- a/src/main/java/tachyon/UnderFileSystemHdfs.java\n+++ b/src/main/java/tachyon/UnderFileSystemHdfs.java\n@@ -195,7 +195,7 @@\n         if (mFs.exists(new Path(path))) {\n           return true;\n         }\n-        return mFs.mkdirs(new Path(path), null);\n+        return mFs.mkdirs(new Path(path));\n       } catch (IOException e) {\n         cnt ++;\n         LOG.error(cnt + \" : \" + e.getMessage(), e);\n", "projectName": "Alluxio.alluxio", "bugLineNum": 198, "bugNodeStartChar": 5358, "bugNodeLength": 32, "fixLineNum": 198, "fixNodeStartChar": 5358, "fixNodeLength": 26, "sourceBeforeFix": "mFs.mkdirs(new Path(path),null)", "sourceAfterFix": "mFs.mkdirs(new Path(path))"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/MasterClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/MasterClient.java b/src/main/java/tachyon/MasterClient.java\nindex ff8469d..7f153eb 100644\n--- a/src/main/java/tachyon/MasterClient.java\n+++ b/src/main/java/tachyon/MasterClient.java\n@@ -106,12 +106,12 @@\n     CLIENT.user_deleteById(fileId);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoByPath(String path)\n+  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoById(int id)\n+  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }\n@@ -149,7 +149,7 @@\n     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n \n-  public int user_mkdir(String path) \n+  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }\n@@ -167,13 +167,13 @@\n     CLIENT.user_unpinFile(id);\n   }\n \n-  public void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n+  public synchronized void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n       String checkpointPath) \n           throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_addCheckpoint(workerId, fileId, fileSizeBytes, checkpointPath);\n   }\n \n-  public void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n+  public synchronized void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n       long fileSizeBytes) throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_cacheFile(workerId, workerUsedBytes, fileId, fileSizeBytes);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 109, "bugNodeStartChar": 3378, "bugNodeLength": 196, "fixLineNum": 109, "fixNodeStartChar": 3378, "fixNodeLength": 209, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/MasterClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/MasterClient.java b/src/main/java/tachyon/MasterClient.java\nindex ff8469d..7f153eb 100644\n--- a/src/main/java/tachyon/MasterClient.java\n+++ b/src/main/java/tachyon/MasterClient.java\n@@ -106,12 +106,12 @@\n     CLIENT.user_deleteById(fileId);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoByPath(String path)\n+  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoById(int id)\n+  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }\n@@ -149,7 +149,7 @@\n     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n \n-  public int user_mkdir(String path) \n+  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }\n@@ -167,13 +167,13 @@\n     CLIENT.user_unpinFile(id);\n   }\n \n-  public void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n+  public synchronized void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n       String checkpointPath) \n           throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_addCheckpoint(workerId, fileId, fileSizeBytes, checkpointPath);\n   }\n \n-  public void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n+  public synchronized void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n       long fileSizeBytes) throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_cacheFile(workerId, workerUsedBytes, fileId, fileSizeBytes);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 114, "bugNodeStartChar": 3578, "bugNodeLength": 163, "fixLineNum": 114, "fixNodeStartChar": 3578, "fixNodeLength": 176, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/MasterClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/MasterClient.java b/src/main/java/tachyon/MasterClient.java\nindex ff8469d..7f153eb 100644\n--- a/src/main/java/tachyon/MasterClient.java\n+++ b/src/main/java/tachyon/MasterClient.java\n@@ -106,12 +106,12 @@\n     CLIENT.user_deleteById(fileId);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoByPath(String path)\n+  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoById(int id)\n+  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }\n@@ -149,7 +149,7 @@\n     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n \n-  public int user_mkdir(String path) \n+  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }\n@@ -167,13 +167,13 @@\n     CLIENT.user_unpinFile(id);\n   }\n \n-  public void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n+  public synchronized void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n       String checkpointPath) \n           throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_addCheckpoint(workerId, fileId, fileSizeBytes, checkpointPath);\n   }\n \n-  public void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n+  public synchronized void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n       long fileSizeBytes) throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_cacheFile(workerId, workerUsedBytes, fileId, fileSizeBytes);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 152, "bugNodeStartChar": 5009, "bugNodeLength": 150, "fixLineNum": 152, "fixNodeStartChar": 5009, "fixNodeLength": 163, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/MasterClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/MasterClient.java b/src/main/java/tachyon/MasterClient.java\nindex ff8469d..7f153eb 100644\n--- a/src/main/java/tachyon/MasterClient.java\n+++ b/src/main/java/tachyon/MasterClient.java\n@@ -106,12 +106,12 @@\n     CLIENT.user_deleteById(fileId);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoByPath(String path)\n+  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoById(int id)\n+  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }\n@@ -149,7 +149,7 @@\n     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n \n-  public int user_mkdir(String path) \n+  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }\n@@ -167,13 +167,13 @@\n     CLIENT.user_unpinFile(id);\n   }\n \n-  public void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n+  public synchronized void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n       String checkpointPath) \n           throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_addCheckpoint(workerId, fileId, fileSizeBytes, checkpointPath);\n   }\n \n-  public void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n+  public synchronized void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n       long fileSizeBytes) throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_cacheFile(workerId, workerUsedBytes, fileId, fileSizeBytes);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 170, "bugNodeStartChar": 5635, "bugNodeLength": 281, "fixLineNum": 170, "fixNodeStartChar": 5635, "fixNodeLength": 294, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/MasterClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/MasterClient.java b/src/main/java/tachyon/MasterClient.java\nindex ff8469d..7f153eb 100644\n--- a/src/main/java/tachyon/MasterClient.java\n+++ b/src/main/java/tachyon/MasterClient.java\n@@ -106,12 +106,12 @@\n     CLIENT.user_deleteById(fileId);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoByPath(String path)\n+  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n \n-  public ClientFileInfo user_getClientFileInfoById(int id)\n+  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }\n@@ -149,7 +149,7 @@\n     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n \n-  public int user_mkdir(String path) \n+  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }\n@@ -167,13 +167,13 @@\n     CLIENT.user_unpinFile(id);\n   }\n \n-  public void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n+  public synchronized void worker_addCheckpoint(long workerId, int fileId, long fileSizeBytes, \n       String checkpointPath) \n           throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_addCheckpoint(workerId, fileId, fileSizeBytes, checkpointPath);\n   }\n \n-  public void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n+  public synchronized void worker_cachedFile(long workerId, long workerUsedBytes, int fileId, \n       long fileSizeBytes) throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.worker_cacheFile(workerId, workerUsedBytes, fileId, fileSizeBytes);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 176, "bugNodeStartChar": 5920, "bugNodeLength": 263, "fixLineNum": 176, "fixNodeStartChar": 5920, "fixNodeLength": 276, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/WorkerClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/WorkerClient.java b/src/main/java/tachyon/WorkerClient.java\nindex 9102085..23c3ef2 100644\n--- a/src/main/java/tachyon/WorkerClient.java\n+++ b/src/main/java/tachyon/WorkerClient.java\n@@ -44,13 +44,13 @@\n     CLIENT.accessFile(fileId);\n   }\n \n-  public void addCheckpoint(long userId, int fileId) \n+  public synchronized void addCheckpoint(long userId, int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException,\n       FailedToCheckpointException, TException {\n     CLIENT.addCheckpoint(userId, fileId);\n   }\n \n-  public void cacheFile(long userId, int fileId)\n+  public synchronized void cacheFile(long userId, int fileId)\n       throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.cacheFile(userId, fileId);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 47, "bugNodeStartChar": 1493, "bugNodeLength": 213, "fixLineNum": 47, "fixNodeStartChar": 1493, "fixNodeLength": 226, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/WorkerClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/WorkerClient.java b/src/main/java/tachyon/WorkerClient.java\nindex 9102085..23c3ef2 100644\n--- a/src/main/java/tachyon/WorkerClient.java\n+++ b/src/main/java/tachyon/WorkerClient.java\n@@ -44,13 +44,13 @@\n     CLIENT.accessFile(fileId);\n   }\n \n-  public void addCheckpoint(long userId, int fileId) \n+  public synchronized void addCheckpoint(long userId, int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException,\n       FailedToCheckpointException, TException {\n     CLIENT.addCheckpoint(userId, fileId);\n   }\n \n-  public void cacheFile(long userId, int fileId)\n+  public synchronized void cacheFile(long userId, int fileId)\n       throws FileDoesNotExistException, SuspectedFileSizeException, TException {\n     CLIENT.cacheFile(userId, fileId);\n   }\n", "projectName": "Alluxio.alluxio", "bugLineNum": 53, "bugNodeStartChar": 1710, "bugNodeLength": 169, "fixLineNum": 53, "fixNodeStartChar": 1710, "fixNodeLength": 182, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/client/TachyonClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/client/TachyonClient.java b/src/main/java/tachyon/client/TachyonClient.java\nindex e6f87b8..c22b10f 100644\n--- a/src/main/java/tachyon/client/TachyonClient.java\n+++ b/src/main/java/tachyon/client/TachyonClient.java\n@@ -79,7 +79,7 @@\n     LOG.error(\"TachyonClient accessLocalFile(\" + fileId + \") failed\");\n   }\n \n-  public void addCheckpoint(int fileId) \n+  public synchronized void addCheckpoint(int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {\n@@ -95,7 +95,8 @@\n     }\n   }\n \n-  public void cacheFile(int fileId) throws FileDoesNotExistException, SuspectedFileSizeException {\n+  public synchronized void cacheFile(int fileId) \n+      throws FileDoesNotExistException, SuspectedFileSizeException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {\n       return;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 82, "bugNodeStartChar": 2458, "bugNodeLength": 520, "fixLineNum": 82, "fixNodeStartChar": 2458, "fixNodeLength": 533, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "fixCommitParentSHA1": "757a57c0c45af289718a361a701d0da90058876b", "bugFilePath": "src/main/java/tachyon/client/TachyonClient.java", "fixPatch": "diff --git a/src/main/java/tachyon/client/TachyonClient.java b/src/main/java/tachyon/client/TachyonClient.java\nindex e6f87b8..c22b10f 100644\n--- a/src/main/java/tachyon/client/TachyonClient.java\n+++ b/src/main/java/tachyon/client/TachyonClient.java\n@@ -79,7 +79,7 @@\n     LOG.error(\"TachyonClient accessLocalFile(\" + fileId + \") failed\");\n   }\n \n-  public void addCheckpoint(int fileId) \n+  public synchronized void addCheckpoint(int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {\n@@ -95,7 +95,8 @@\n     }\n   }\n \n-  public void cacheFile(int fileId) throws FileDoesNotExistException, SuspectedFileSizeException {\n+  public synchronized void cacheFile(int fileId) \n+      throws FileDoesNotExistException, SuspectedFileSizeException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {\n       return;\n", "projectName": "Alluxio.alluxio", "bugLineNum": 98, "bugNodeStartChar": 2982, "bugNodeLength": 411, "fixLineNum": 98, "fixNodeStartChar": 2982, "fixNodeLength": 431, "sourceBeforeFix": "1", "sourceAfterFix": "33"}]