[{"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d38eb966db524987cb154e39e7377c18bb5b2569", "fixCommitParentSHA1": "27ad7bde6787da71c81ed69fe92caedffd30fd2d", "bugFilePath": "src/test/java/io/vertx/core/http/HttpTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/core/http/HttpTest.java b/src/test/java/io/vertx/core/http/HttpTest.java\nindex 73b00b0..d2025b2 100644\n--- a/src/test/java/io/vertx/core/http/HttpTest.java\n+++ b/src/test/java/io/vertx/core/http/HttpTest.java\n@@ -5418,7 +5418,7 @@\n \n   private void testCookies(String cookieHeader, Consumer<HttpServerRequest> serverChecker, Consumer<HttpClientResponse> clientChecker) throws Exception {\n     server.requestHandler(serverChecker::accept);\n-    startServer();\n+    startServer(testAddress);\n     client.request(\n       HttpMethod.GET,\n       testAddress,\n", "projectName": "eclipse.vert.x", "bugLineNum": 5421, "bugNodeStartChar": 185110, "bugNodeLength": 13, "fixLineNum": 5421, "fixNodeStartChar": 185110, "fixNodeLength": 24, "sourceBeforeFix": "startServer()", "sourceAfterFix": "startServer(testAddress)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "48041fee0e8a87ebebc32f085634a6cd231dd33d", "fixCommitParentSHA1": "fb8d329ac40fbd05da6e82e1a22e674b70238681", "bugFilePath": "src/main/java/io/vertx/core/http/impl/ConnectionManager.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java\nindex f08d6d2..1117d58 100644\n--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java\n+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java\n@@ -53,13 +53,13 @@\n   }\n \n   synchronized void start(boolean checkExpired) {\n-    this.timerID = checkExpired ? client.getVertx().setTimer(1, id -> checkExpired()) : -1;\n+    this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;\n   }\n \n   private synchronized void checkExpired() {\n     long timestamp = System.currentTimeMillis();\n     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));\n-    timerID = client.getVertx().setTimer(1, id -> checkExpired());\n+    timerID = client.getVertx().setTimer(1000, id -> checkExpired());\n   }\n \n   private static final class EndpointKey {\n", "projectName": "eclipse.vert.x", "bugLineNum": 56, "bugNodeStartChar": 1974, "bugNodeLength": 51, "fixLineNum": 56, "fixNodeStartChar": 1974, "fixNodeLength": 54, "sourceBeforeFix": "client.getVertx().setTimer(1,id -> checkExpired())", "sourceAfterFix": "client.getVertx().setTimer(1000,id -> checkExpired())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "48041fee0e8a87ebebc32f085634a6cd231dd33d", "fixCommitParentSHA1": "fb8d329ac40fbd05da6e82e1a22e674b70238681", "bugFilePath": "src/main/java/io/vertx/core/http/impl/ConnectionManager.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java\nindex f08d6d2..1117d58 100644\n--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java\n+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java\n@@ -53,13 +53,13 @@\n   }\n \n   synchronized void start(boolean checkExpired) {\n-    this.timerID = checkExpired ? client.getVertx().setTimer(1, id -> checkExpired()) : -1;\n+    this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;\n   }\n \n   private synchronized void checkExpired() {\n     long timestamp = System.currentTimeMillis();\n     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));\n-    timerID = client.getVertx().setTimer(1, id -> checkExpired());\n+    timerID = client.getVertx().setTimer(1000, id -> checkExpired());\n   }\n \n   private static final class EndpointKey {\n", "projectName": "eclipse.vert.x", "bugLineNum": 62, "bugNodeStartChar": 2213, "bugNodeLength": 51, "fixLineNum": 62, "fixNodeStartChar": 2213, "fixNodeLength": 54, "sourceBeforeFix": "client.getVertx().setTimer(1,id -> checkExpired())", "sourceAfterFix": "client.getVertx().setTimer(1000,id -> checkExpired())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2b49c3601734e6e5c17e1c797b29015c4ddeee4a", "fixCommitParentSHA1": "22af4f108037e141ce0910a19a0d0c90b9ad2a8d", "bugFilePath": "src/main/java/io/vertx/core/http/impl/HttpClientImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java\nindex 27fd1d1..94b7311 100644\n--- a/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java\n+++ b/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java\n@@ -895,7 +895,7 @@\n   }\n \n   @Override\n-  public synchronized void close() {\n+  public void close() {\n     synchronized (this) {\n       checkClosed();\n       closed = true;\n", "projectName": "eclipse.vert.x", "bugLineNum": 897, "bugNodeStartChar": 34670, "bugNodeLength": 316, "fixLineNum": 897, "fixNodeStartChar": 34670, "fixNodeLength": 303, "sourceBeforeFix": "33", "sourceAfterFix": "1"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "fixCommitParentSHA1": "6ac1f7eeafb3ff20bbd1a93a08c8a49acb6ac42e", "bugFilePath": "src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java", "fixPatch": "diff --git a/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java b/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java\nindex 9e2be18..1aae26a 100644\n--- a/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java\n+++ b/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java\n@@ -84,7 +84,7 @@\n \n     @Override\n     public ByteBuf buffer(int initialCapacity) {\n-      if (initialCapacity < capacity) {\n+      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();\n@@ -93,7 +93,7 @@\n \n     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n-      if (initialCapacity < capacity) {\n+      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();\n", "projectName": "eclipse.vert.x", "bugLineNum": 87, "bugNodeStartChar": 2928, "bugNodeLength": 26, "fixLineNum": 87, "fixNodeStartChar": 2928, "fixNodeLength": 27, "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "fixCommitParentSHA1": "6ac1f7eeafb3ff20bbd1a93a08c8a49acb6ac42e", "bugFilePath": "src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java", "fixPatch": "diff --git a/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java b/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java\nindex 9e2be18..1aae26a 100644\n--- a/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java\n+++ b/src/test/benchmarks/io/vertx/benchmarks/HttpServerHandlerBenchmark.java\n@@ -84,7 +84,7 @@\n \n     @Override\n     public ByteBuf buffer(int initialCapacity) {\n-      if (initialCapacity < capacity) {\n+      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();\n@@ -93,7 +93,7 @@\n \n     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n-      if (initialCapacity < capacity) {\n+      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();\n", "projectName": "eclipse.vert.x", "bugLineNum": 96, "bugNodeStartChar": 3149, "bugNodeLength": 26, "fixLineNum": 96, "fixNodeStartChar": 3149, "fixNodeLength": 27, "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1591487a2f941e354cb9bb8419fc8a946defa216", "fixCommitParentSHA1": "fea92c428bdb18089a0c4b4e2a22d41ef1427025", "bugFilePath": "src/test/java/io/vertx/test/core/NetTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/NetTest.java b/src/test/java/io/vertx/test/core/NetTest.java\nindex 8045ec6..8e9f7d7 100644\n--- a/src/test/java/io/vertx/test/core/NetTest.java\n+++ b/src/test/java/io/vertx/test/core/NetTest.java\n@@ -3103,7 +3103,7 @@\n       assertEquals(200, resp.statusCode());\n       resp.bodyHandler(buff -> {\n         assertEquals(\"Hello World\", buff.toString());\n-        testComplete();\n+        complete();\n       });\n     });\n     await();\n", "projectName": "eclipse.vert.x", "bugLineNum": 3106, "bugNodeStartChar": 108668, "bugNodeLength": 14, "fixLineNum": 3106, "fixNodeStartChar": 108668, "fixNodeLength": 10, "sourceBeforeFix": "testComplete()", "sourceAfterFix": "complete()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1591487a2f941e354cb9bb8419fc8a946defa216", "fixCommitParentSHA1": "fea92c428bdb18089a0c4b4e2a22d41ef1427025", "bugFilePath": "src/test/java/io/vertx/test/core/NetTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/NetTest.java b/src/test/java/io/vertx/test/core/NetTest.java\nindex 8045ec6..8e9f7d7 100644\n--- a/src/test/java/io/vertx/test/core/NetTest.java\n+++ b/src/test/java/io/vertx/test/core/NetTest.java\n@@ -3103,7 +3103,7 @@\n       assertEquals(200, resp.statusCode());\n       resp.bodyHandler(buff -> {\n         assertEquals(\"Hello World\", buff.toString());\n-        testComplete();\n+        complete();\n       });\n     });\n     await();\n", "projectName": "eclipse.vert.x", "bugLineNum": 3106, "bugNodeStartChar": 108668, "bugNodeLength": 14, "fixLineNum": 3106, "fixNodeStartChar": 108668, "fixNodeLength": 10, "sourceBeforeFix": "testComplete()", "sourceAfterFix": "complete()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "c72cd791d1b2073240e2a9a7da80030823bcc331", "fixCommitParentSHA1": "c19dce2ab2149d97422893b472a1597a5d1cdf7a", "bugFilePath": "src/main/java/io/vertx/core/buffer/impl/BufferImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/buffer/impl/BufferImpl.java b/src/main/java/io/vertx/core/buffer/impl/BufferImpl.java\nindex f91c5bf..5845029 100644\n--- a/src/main/java/io/vertx/core/buffer/impl/BufferImpl.java\n+++ b/src/main/java/io/vertx/core/buffer/impl/BufferImpl.java\n@@ -36,7 +36,7 @@\n \n   private ByteBuf buffer;\n \n-  BufferImpl() {\n+  public BufferImpl() {\n     this(0);\n   }\n \n", "projectName": "eclipse.vert.x", "bugLineNum": 39, "bugNodeStartChar": 1063, "bugNodeLength": 31, "fixLineNum": 39, "fixNodeStartChar": 1063, "fixNodeLength": 38, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/FailedFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/FailedFuture.java b/src/main/java/io/vertx/core/impl/FailedFuture.java\nindex 41183f5..22f5bee 100644\n--- a/src/main/java/io/vertx/core/impl/FailedFuture.java\n+++ b/src/main/java/io/vertx/core/impl/FailedFuture.java\n@@ -47,22 +47,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n@@ -107,6 +107,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 50, "bugNodeStartChar": 1307, "bugNodeLength": 27, "fixLineNum": 50, "fixNodeStartChar": 1307, "fixNodeLength": 63, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/FailedFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/FailedFuture.java b/src/main/java/io/vertx/core/impl/FailedFuture.java\nindex 41183f5..22f5bee 100644\n--- a/src/main/java/io/vertx/core/impl/FailedFuture.java\n+++ b/src/main/java/io/vertx/core/impl/FailedFuture.java\n@@ -47,22 +47,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n@@ -107,6 +107,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 55, "bugNodeStartChar": 1390, "bugNodeLength": 27, "fixLineNum": 55, "fixNodeStartChar": 1390, "fixNodeLength": 63, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/FailedFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/FailedFuture.java b/src/main/java/io/vertx/core/impl/FailedFuture.java\nindex 41183f5..22f5bee 100644\n--- a/src/main/java/io/vertx/core/impl/FailedFuture.java\n+++ b/src/main/java/io/vertx/core/impl/FailedFuture.java\n@@ -47,22 +47,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n@@ -107,6 +107,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 60, "bugNodeStartChar": 1484, "bugNodeLength": 27, "fixLineNum": 60, "fixNodeStartChar": 1484, "fixNodeLength": 63, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/FailedFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/FailedFuture.java b/src/main/java/io/vertx/core/impl/FailedFuture.java\nindex 41183f5..22f5bee 100644\n--- a/src/main/java/io/vertx/core/impl/FailedFuture.java\n+++ b/src/main/java/io/vertx/core/impl/FailedFuture.java\n@@ -47,22 +47,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n@@ -107,6 +107,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 65, "bugNodeStartChar": 1584, "bugNodeLength": 27, "fixLineNum": 65, "fixNodeStartChar": 1584, "fixNodeLength": 63, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/FailedFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/FailedFuture.java b/src/main/java/io/vertx/core/impl/FailedFuture.java\nindex 41183f5..22f5bee 100644\n--- a/src/main/java/io/vertx/core/impl/FailedFuture.java\n+++ b/src/main/java/io/vertx/core/impl/FailedFuture.java\n@@ -47,22 +47,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n \n   @Override\n@@ -107,6 +107,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 110, "bugNodeStartChar": 2247, "bugNodeLength": 27, "fixLineNum": 110, "fixNodeStartChar": 2247, "fixNodeLength": 63, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 22, "bugNodeStartChar": 737, "bugNodeLength": 1448, "fixLineNum": 22, "fixNodeStartChar": 737, "fixNodeLength": 1441, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 29, "bugNodeStartChar": 896, "bugNodeLength": 64, "fixLineNum": 29, "fixNodeStartChar": 896, "fixNodeLength": 57, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 46, "bugNodeStartChar": 1210, "bugNodeLength": 27, "fixLineNum": 46, "fixNodeStartChar": 1210, "fixNodeLength": 66, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 51, "bugNodeStartChar": 1293, "bugNodeLength": 27, "fixLineNum": 51, "fixNodeStartChar": 1293, "fixNodeLength": 66, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 56, "bugNodeStartChar": 1387, "bugNodeLength": 27, "fixLineNum": 56, "fixNodeStartChar": 1387, "fixNodeLength": 66, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 61, "bugNodeStartChar": 1487, "bugNodeLength": 27, "fixLineNum": 61, "fixNodeStartChar": 1487, "fixNodeLength": 66, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "fixCommitParentSHA1": "8a3655e490a8ec7a14e2c2457db81ab48836dcae", "bugFilePath": "src/main/java/io/vertx/core/impl/SucceededFuture.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/SucceededFuture.java b/src/main/java/io/vertx/core/impl/SucceededFuture.java\nindex 1561f7c..bd5be09 100644\n--- a/src/main/java/io/vertx/core/impl/SucceededFuture.java\n+++ b/src/main/java/io/vertx/core/impl/SucceededFuture.java\n@@ -22,11 +22,11 @@\n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n  */\n-public class SucceededFuture<T> implements Future<T> {\n+class SucceededFuture<T> implements Future<T> {\n \n   private final T result;\n \n-  public SucceededFuture(T result) {\n+  SucceededFuture(T result) {\n     this.result = result;\n   }\n \n@@ -43,22 +43,22 @@\n \n   @Override\n   public void complete(T result) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void complete() {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(Throwable cause) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n   public void fail(String failureMessage) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n \n   @Override\n@@ -103,6 +103,6 @@\n \n   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n-    throw new IllegalStateException();\n+    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 106, "bugNodeStartChar": 2151, "bugNodeLength": 27, "fixLineNum": 106, "fixNodeStartChar": 2151, "fixNodeLength": 66, "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "fixCommitParentSHA1": "f3be632a57b836560635d4ab97583a363d257e45", "bugFilePath": "src/test/java/io/vertx/test/core/FaultToleranceTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/FaultToleranceTest.java b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\nindex d63519e..b938af1 100644\n--- a/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n+++ b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n@@ -66,12 +66,12 @@\n       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n-    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n+    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n \n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n-    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n \n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();\n@@ -81,17 +81,17 @@\n     pongsReceived.set(0);\n     JsonArray message2 = new JsonArray().add(NODE_COUNT - 1);\n     vertx.eventBus().publish(\"ping\", message2);\n-    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 60_000);\n \n     JsonArray message3 = new JsonArray();\n     IntStream.range(0, NODE_COUNT - 1).forEach(message3::add);\n     vertx.eventBus().publish(\"ping\", message3);\n-    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 60_000);\n   }\n \n   protected void waitForClusterStability(VertxInternal vertx) throws Exception {\n     ClusterManager clusterManager = vertx.getClusterManager();\n-    waitUntil(() -> clusterManager.getNodes().size() == 2, 30_000);\n+    waitUntil(() -> clusterManager.getNodes().size() == 2, 60_000);\n   }\n \n   private Process startExternalNode(int id) throws Exception {\n", "projectName": "eclipse.vert.x", "bugLineNum": 69, "bugNodeStartChar": 2136, "bugNodeLength": 65, "fixLineNum": 69, "fixNodeStartChar": 2136, "fixNodeLength": 65, "sourceBeforeFix": "waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,30_000)", "sourceAfterFix": "waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,60_000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "fixCommitParentSHA1": "f3be632a57b836560635d4ab97583a363d257e45", "bugFilePath": "src/test/java/io/vertx/test/core/FaultToleranceTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/FaultToleranceTest.java b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\nindex d63519e..b938af1 100644\n--- a/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n+++ b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n@@ -66,12 +66,12 @@\n       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n-    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n+    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n \n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n-    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n \n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();\n@@ -81,17 +81,17 @@\n     pongsReceived.set(0);\n     JsonArray message2 = new JsonArray().add(NODE_COUNT - 1);\n     vertx.eventBus().publish(\"ping\", message2);\n-    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 60_000);\n \n     JsonArray message3 = new JsonArray();\n     IntStream.range(0, NODE_COUNT - 1).forEach(message3::add);\n     vertx.eventBus().publish(\"ping\", message3);\n-    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 60_000);\n   }\n \n   protected void waitForClusterStability(VertxInternal vertx) throws Exception {\n     ClusterManager clusterManager = vertx.getClusterManager();\n-    waitUntil(() -> clusterManager.getNodes().size() == 2, 30_000);\n+    waitUntil(() -> clusterManager.getNodes().size() == 2, 60_000);\n   }\n \n   private Process startExternalNode(int id) throws Exception {\n", "projectName": "eclipse.vert.x", "bugLineNum": 74, "bugNodeStartChar": 2357, "bugNodeLength": 89, "fixLineNum": 74, "fixNodeStartChar": 2357, "fixNodeLength": 89, "sourceBeforeFix": "waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,30_000)", "sourceAfterFix": "waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,60_000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "fixCommitParentSHA1": "f3be632a57b836560635d4ab97583a363d257e45", "bugFilePath": "src/test/java/io/vertx/test/core/FaultToleranceTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/FaultToleranceTest.java b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\nindex d63519e..b938af1 100644\n--- a/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n+++ b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n@@ -66,12 +66,12 @@\n       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n-    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n+    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n \n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n-    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n \n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();\n@@ -81,17 +81,17 @@\n     pongsReceived.set(0);\n     JsonArray message2 = new JsonArray().add(NODE_COUNT - 1);\n     vertx.eventBus().publish(\"ping\", message2);\n-    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 60_000);\n \n     JsonArray message3 = new JsonArray();\n     IntStream.range(0, NODE_COUNT - 1).forEach(message3::add);\n     vertx.eventBus().publish(\"ping\", message3);\n-    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 60_000);\n   }\n \n   protected void waitForClusterStability(VertxInternal vertx) throws Exception {\n     ClusterManager clusterManager = vertx.getClusterManager();\n-    waitUntil(() -> clusterManager.getNodes().size() == 2, 30_000);\n+    waitUntil(() -> clusterManager.getNodes().size() == 2, 60_000);\n   }\n \n   private Process startExternalNode(int id) throws Exception {\n", "projectName": "eclipse.vert.x", "bugLineNum": 84, "bugNodeStartChar": 2725, "bugNodeLength": 63, "fixLineNum": 84, "fixNodeStartChar": 2725, "fixNodeLength": 63, "sourceBeforeFix": "waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,30_000)", "sourceAfterFix": "waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,60_000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "fixCommitParentSHA1": "f3be632a57b836560635d4ab97583a363d257e45", "bugFilePath": "src/test/java/io/vertx/test/core/FaultToleranceTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/FaultToleranceTest.java b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\nindex d63519e..b938af1 100644\n--- a/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n+++ b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n@@ -66,12 +66,12 @@\n       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n-    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n+    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n \n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n-    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n \n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();\n@@ -81,17 +81,17 @@\n     pongsReceived.set(0);\n     JsonArray message2 = new JsonArray().add(NODE_COUNT - 1);\n     vertx.eventBus().publish(\"ping\", message2);\n-    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 60_000);\n \n     JsonArray message3 = new JsonArray();\n     IntStream.range(0, NODE_COUNT - 1).forEach(message3::add);\n     vertx.eventBus().publish(\"ping\", message3);\n-    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 60_000);\n   }\n \n   protected void waitForClusterStability(VertxInternal vertx) throws Exception {\n     ClusterManager clusterManager = vertx.getClusterManager();\n-    waitUntil(() -> clusterManager.getNodes().size() == 2, 30_000);\n+    waitUntil(() -> clusterManager.getNodes().size() == 2, 60_000);\n   }\n \n   private Process startExternalNode(int id) throws Exception {\n", "projectName": "eclipse.vert.x", "bugLineNum": 89, "bugNodeStartChar": 2948, "bugNodeLength": 85, "fixLineNum": 89, "fixNodeStartChar": 2948, "fixNodeLength": 85, "sourceBeforeFix": "waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,30_000)", "sourceAfterFix": "waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,60_000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "fixCommitParentSHA1": "f3be632a57b836560635d4ab97583a363d257e45", "bugFilePath": "src/test/java/io/vertx/test/core/FaultToleranceTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/FaultToleranceTest.java b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\nindex d63519e..b938af1 100644\n--- a/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n+++ b/src/test/java/io/vertx/test/core/FaultToleranceTest.java\n@@ -66,12 +66,12 @@\n       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n-    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n+    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n \n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n-    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n \n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();\n@@ -81,17 +81,17 @@\n     pongsReceived.set(0);\n     JsonArray message2 = new JsonArray().add(NODE_COUNT - 1);\n     vertx.eventBus().publish(\"ping\", message2);\n-    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT, 60_000);\n \n     JsonArray message3 = new JsonArray();\n     IntStream.range(0, NODE_COUNT - 1).forEach(message3::add);\n     vertx.eventBus().publish(\"ping\", message3);\n-    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 30_000);\n+    waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT, 60_000);\n   }\n \n   protected void waitForClusterStability(VertxInternal vertx) throws Exception {\n     ClusterManager clusterManager = vertx.getClusterManager();\n-    waitUntil(() -> clusterManager.getNodes().size() == 2, 30_000);\n+    waitUntil(() -> clusterManager.getNodes().size() == 2, 60_000);\n   }\n \n   private Process startExternalNode(int id) throws Exception {\n", "projectName": "eclipse.vert.x", "bugLineNum": 94, "bugNodeStartChar": 3188, "bugNodeLength": 62, "fixLineNum": 94, "fixNodeStartChar": 3188, "fixNodeLength": 62, "sourceBeforeFix": "waitUntil(() -> clusterManager.getNodes().size() == 2,30_000)", "sourceAfterFix": "waitUntil(() -> clusterManager.getNodes().size() == 2,60_000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d2fe78793f8158678660e24b397b23ad2055b396", "fixCommitParentSHA1": "3bab76cdddffb2e5f5bc2bc1e98bce46e4698e1a", "bugFilePath": "src/main/java/io/vertx/core/dns/AddressResolverOptions.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/dns/AddressResolverOptions.java b/src/main/java/io/vertx/core/dns/AddressResolverOptions.java\nindex 3227fc7..7468c54 100644\n--- a/src/main/java/io/vertx/core/dns/AddressResolverOptions.java\n+++ b/src/main/java/io/vertx/core/dns/AddressResolverOptions.java\n@@ -47,7 +47,7 @@\n   public static final int DEFAULT_CACHE_MAX_TIME_TO_LIVE = Integer.MAX_VALUE;\n   public static final int DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE = 0;\n   public static final int DEFAULT_QUERY_TIMEOUT = 5000;\n-  public static final int DEFAULT_MAX_QUERIES = 3;\n+  public static final int DEFAULT_MAX_QUERIES = 4;\n   public static final boolean DEFAULT_RD_FLAG = true;\n   public static final List<String> DEFAULT_SEACH_DOMAINS = null;\n   public static final boolean DEFAULT_ROUND_ROBIN = false;\n", "projectName": "eclipse.vert.x", "bugLineNum": 50, "bugNodeStartChar": 1791, "bugNodeLength": 23, "fixLineNum": 50, "fixNodeStartChar": 1791, "fixNodeLength": 23, "sourceBeforeFix": "DEFAULT_MAX_QUERIES=3", "sourceAfterFix": "DEFAULT_MAX_QUERIES=4"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "f24f07f3cd5f7a1b9fe0ed4606208dbf2cf0f817", "fixCommitParentSHA1": "cb769efcf659c15ed063a40561e92f0bfcd5a4a1", "bugFilePath": "src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java\nindex b340135..5bccab1 100644\n--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java\n+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java\n@@ -323,7 +323,7 @@\n   public S binaryMessageHandler(Handler<Buffer> handler) {\n     synchronized (conn) {\n       checkClosed();\n-      if (frameHandler == null || frameHandler.getClass() == FrameAggregator.class) {\n+      if (frameHandler == null || frameHandler.getClass() != FrameAggregator.class) {\n         frameHandler = new FrameAggregator();\n       }\n       ((FrameAggregator) frameHandler).binaryMessageHandler = handler;\n", "projectName": "eclipse.vert.x", "bugLineNum": 326, "bugNodeStartChar": 10335, "bugNodeLength": 48, "fixLineNum": 326, "fixNodeStartChar": 10335, "fixNodeLength": 48, "sourceBeforeFix": "frameHandler.getClass() == FrameAggregator.class", "sourceAfterFix": "frameHandler.getClass() != FrameAggregator.class"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "685cb6543333bd3bed23d849fa95e1bce6b4e154", "fixCommitParentSHA1": "ca84f6cae7e789c833c61be8f2698cbfe29d1b58", "bugFilePath": "src/main/java/examples/cli/CLIExamples.java", "fixPatch": "diff --git a/src/main/java/examples/cli/CLIExamples.java b/src/main/java/examples/cli/CLIExamples.java\nindex 2a16a17..3aabd20 100644\n--- a/src/main/java/examples/cli/CLIExamples.java\n+++ b/src/main/java/examples/cli/CLIExamples.java\n@@ -43,7 +43,7 @@\n             .setDescription(\"The source\")\n             .setArgName(\"source\"))\n         .addArgument(new Argument()\n-            .setIndex(0)\n+            .setIndex(1)\n             .setDescription(\"The destination\")\n             .setArgName(\"target\"));\n   }\n", "projectName": "eclipse.vert.x", "bugLineNum": 45, "bugNodeStartChar": 1438, "bugNodeLength": 39, "fixLineNum": 45, "fixNodeStartChar": 1438, "fixNodeLength": 39, "sourceBeforeFix": "new Argument().setIndex(0)", "sourceAfterFix": "new Argument().setIndex(1)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "898c6236741d2a46907350d1ad116c9509050bc2", "fixCommitParentSHA1": "02b875e4b9a1af770c32346f649176787a84fdde", "bugFilePath": "src/test/java/io/vertx/test/core/HATest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HATest.java b/src/test/java/io/vertx/test/core/HATest.java\nindex 984e355..7e5558d 100644\n--- a/src/test/java/io/vertx/test/core/HATest.java\n+++ b/src/test/java/io/vertx/test/core/HATest.java\n@@ -424,7 +424,7 @@\n       } catch (Exception e) {\n         fut.fail(e);\n       }\n-    }, ar -> {\n+    }, false, ar -> {\n       if (!ar.succeeded()) {\n         fail(ar.cause());\n       }\n", "projectName": "eclipse.vert.x", "bugLineNum": 420, "bugNodeStartChar": 14779, "bugNodeLength": 232, "fixLineNum": 420, "fixNodeStartChar": 14779, "fixNodeLength": 239, "sourceBeforeFix": "v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )", "sourceAfterFix": "v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "06f566294dcfc66f333156bd40c05d1e75b325ca", "fixCommitParentSHA1": "02b875e4b9a1af770c32346f649176787a84fdde", "bugFilePath": "src/test/java/io/vertx/test/core/HATest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HATest.java b/src/test/java/io/vertx/test/core/HATest.java\nindex 984e355..7e5558d 100644\n--- a/src/test/java/io/vertx/test/core/HATest.java\n+++ b/src/test/java/io/vertx/test/core/HATest.java\n@@ -424,7 +424,7 @@\n       } catch (Exception e) {\n         fut.fail(e);\n       }\n-    }, ar -> {\n+    }, false, ar -> {\n       if (!ar.succeeded()) {\n         fail(ar.cause());\n       }\n", "projectName": "eclipse.vert.x", "bugLineNum": 420, "bugNodeStartChar": 14779, "bugNodeLength": 232, "fixLineNum": 420, "fixNodeStartChar": 14779, "fixNodeLength": 239, "sourceBeforeFix": "v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )", "sourceAfterFix": "v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b3a3ca71bfb8db277af6bf27d6034b799320cce4", "fixCommitParentSHA1": "d953c661186eef3ff802e0e165e77a6bcdd8cbf4", "bugFilePath": "src/test/java/io/vertx/test/core/HttpTLSTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HttpTLSTest.java b/src/test/java/io/vertx/test/core/HttpTLSTest.java\nindex 0014e8a..935bd8a 100644\n--- a/src/test/java/io/vertx/test/core/HttpTLSTest.java\n+++ b/src/test/java/io/vertx/test/core/HttpTLSTest.java\n@@ -245,7 +245,7 @@\n   @Test\n   // Client specifies cert that the server does not trust via a revoked certificate of the CA\n   public void testTLSRevokedClientCertServer() throws Exception {\n-    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl().fail();\n+    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl().fail();\n   }\n \n   @Test\n@@ -569,7 +569,7 @@\n             response.bodyHandler(data -> assertEquals(\"bar\", data.toString()));\n             testComplete();\n           } else {\n-            fail();\n+            HttpTLSTest.this.fail(\"Should not get a response\");\n           }\n         });\n         req.exceptionHandler(t -> {\n@@ -783,7 +783,7 @@\n   // Check that proxy auth fails if it is missing\n   public void testHttpsProxyAuthFail() throws Exception {\n     startProxy(\"username\", ProxyType.HTTP);\n-    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().useProxyAuth().fail();\n+    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().fail();\n   }\n \n   @Test\n", "projectName": "eclipse.vert.x", "bugLineNum": 248, "bugNodeStartChar": 9829, "bugNodeLength": 130, "fixLineNum": 248, "fixNodeStartChar": 9829, "fixNodeLength": 130, "sourceBeforeFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()", "sourceAfterFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b3a3ca71bfb8db277af6bf27d6034b799320cce4", "fixCommitParentSHA1": "d953c661186eef3ff802e0e165e77a6bcdd8cbf4", "bugFilePath": "src/test/java/io/vertx/test/core/HttpTLSTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HttpTLSTest.java b/src/test/java/io/vertx/test/core/HttpTLSTest.java\nindex 0014e8a..935bd8a 100644\n--- a/src/test/java/io/vertx/test/core/HttpTLSTest.java\n+++ b/src/test/java/io/vertx/test/core/HttpTLSTest.java\n@@ -245,7 +245,7 @@\n   @Test\n   // Client specifies cert that the server does not trust via a revoked certificate of the CA\n   public void testTLSRevokedClientCertServer() throws Exception {\n-    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl().fail();\n+    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl().fail();\n   }\n \n   @Test\n@@ -569,7 +569,7 @@\n             response.bodyHandler(data -> assertEquals(\"bar\", data.toString()));\n             testComplete();\n           } else {\n-            fail();\n+            HttpTLSTest.this.fail(\"Should not get a response\");\n           }\n         });\n         req.exceptionHandler(t -> {\n@@ -783,7 +783,7 @@\n   // Check that proxy auth fails if it is missing\n   public void testHttpsProxyAuthFail() throws Exception {\n     startProxy(\"username\", ProxyType.HTTP);\n-    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().useProxyAuth().fail();\n+    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().fail();\n   }\n \n   @Test\n", "projectName": "eclipse.vert.x", "bugLineNum": 248, "bugNodeStartChar": 9829, "bugNodeLength": 130, "fixLineNum": 248, "fixNodeStartChar": 9829, "fixNodeLength": 130, "sourceBeforeFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()", "sourceAfterFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "27b09a2e6ea4a80041ae32d1e253272f18653abb", "fixCommitParentSHA1": "d953c661186eef3ff802e0e165e77a6bcdd8cbf4", "bugFilePath": "src/test/java/io/vertx/test/core/HttpTLSTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HttpTLSTest.java b/src/test/java/io/vertx/test/core/HttpTLSTest.java\nindex 0014e8a..935bd8a 100644\n--- a/src/test/java/io/vertx/test/core/HttpTLSTest.java\n+++ b/src/test/java/io/vertx/test/core/HttpTLSTest.java\n@@ -245,7 +245,7 @@\n   @Test\n   // Client specifies cert that the server does not trust via a revoked certificate of the CA\n   public void testTLSRevokedClientCertServer() throws Exception {\n-    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl().fail();\n+    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl().fail();\n   }\n \n   @Test\n@@ -569,7 +569,7 @@\n             response.bodyHandler(data -> assertEquals(\"bar\", data.toString()));\n             testComplete();\n           } else {\n-            fail();\n+            HttpTLSTest.this.fail(\"Should not get a response\");\n           }\n         });\n         req.exceptionHandler(t -> {\n@@ -783,7 +783,7 @@\n   // Check that proxy auth fails if it is missing\n   public void testHttpsProxyAuthFail() throws Exception {\n     startProxy(\"username\", ProxyType.HTTP);\n-    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().useProxyAuth().fail();\n+    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().fail();\n   }\n \n   @Test\n", "projectName": "eclipse.vert.x", "bugLineNum": 248, "bugNodeStartChar": 9829, "bugNodeLength": 130, "fixLineNum": 248, "fixNodeStartChar": 9829, "fixNodeLength": 130, "sourceBeforeFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()", "sourceAfterFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "27b09a2e6ea4a80041ae32d1e253272f18653abb", "fixCommitParentSHA1": "d953c661186eef3ff802e0e165e77a6bcdd8cbf4", "bugFilePath": "src/test/java/io/vertx/test/core/HttpTLSTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HttpTLSTest.java b/src/test/java/io/vertx/test/core/HttpTLSTest.java\nindex 0014e8a..935bd8a 100644\n--- a/src/test/java/io/vertx/test/core/HttpTLSTest.java\n+++ b/src/test/java/io/vertx/test/core/HttpTLSTest.java\n@@ -245,7 +245,7 @@\n   @Test\n   // Client specifies cert that the server does not trust via a revoked certificate of the CA\n   public void testTLSRevokedClientCertServer() throws Exception {\n-    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl().fail();\n+    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl().fail();\n   }\n \n   @Test\n@@ -569,7 +569,7 @@\n             response.bodyHandler(data -> assertEquals(\"bar\", data.toString()));\n             testComplete();\n           } else {\n-            fail();\n+            HttpTLSTest.this.fail(\"Should not get a response\");\n           }\n         });\n         req.exceptionHandler(t -> {\n@@ -783,7 +783,7 @@\n   // Check that proxy auth fails if it is missing\n   public void testHttpsProxyAuthFail() throws Exception {\n     startProxy(\"username\", ProxyType.HTTP);\n-    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().useProxyAuth().fail();\n+    testTLS(Cert.NONE, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.NONE).useProxy().fail();\n   }\n \n   @Test\n", "projectName": "eclipse.vert.x", "bugLineNum": 248, "bugNodeStartChar": 9829, "bugNodeLength": 130, "fixLineNum": 248, "fixNodeStartChar": 9829, "fixNodeLength": 130, "sourceBeforeFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()", "sourceAfterFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0f8b0553210f71108709aad7361581574f6ba038", "fixCommitParentSHA1": "b4597f3108a4b0723cb9e0016f78c1e7da8b2c89", "bugFilePath": "src/main/java/io/vertx/core/dns/impl/fix/DnsNameResolverContext.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/dns/impl/fix/DnsNameResolverContext.java b/src/main/java/io/vertx/core/dns/impl/fix/DnsNameResolverContext.java\nindex 46e9285..76c0c96 100644\n--- a/src/main/java/io/vertx/core/dns/impl/fix/DnsNameResolverContext.java\n+++ b/src/main/java/io/vertx/core/dns/impl/fix/DnsNameResolverContext.java\n@@ -469,7 +469,7 @@\n         return null;\n       }\n \n-      return name.substring(0, name.length() - 1);\n+      return name.toString();\n     } finally {\n       buf.resetReaderIndex();\n     }\n", "projectName": "eclipse.vert.x", "bugLineNum": 472, "bugNodeStartChar": 15239, "bugNodeLength": 36, "fixLineNum": 472, "fixNodeStartChar": 15239, "fixNodeLength": 15, "sourceBeforeFix": "name.substring(0,name.length() - 1)", "sourceAfterFix": "name.toString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1250118189d8ebdccb06dbcfa874cfeddcb96aac", "fixCommitParentSHA1": "9bdf78609c5c69ef97866771e779d1f93a619385", "bugFilePath": "src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java\nindex d29e624..5dec8bb 100644\n--- a/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java\n+++ b/src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java\n@@ -599,7 +599,7 @@\n \n     HttpClientConnection conn = stream.connection();\n \n-    synchronized (conn) {\n+    synchronized (this) {\n       this.conn = conn;\n       this.stream = stream;\n       stream.beginRequest(this);\n", "projectName": "eclipse.vert.x", "bugLineNum": 602, "bugNodeStartChar": 16246, "bugNodeLength": 4, "fixLineNum": 602, "fixNodeStartChar": 16246, "fixNodeLength": 4, "sourceBeforeFix": "synchronized (conn) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } ", "sourceAfterFix": "synchronized (this) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } "}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "1ec0bbefda8dfe8cb0c5a11005b62c17ab61c121", "fixCommitParentSHA1": "cb8447af2886a43d50cf72a3f6051343c5db645a", "bugFilePath": "src/test/java/io/vertx/core/logging/Recording.java", "fixPatch": "diff --git a/src/test/java/io/vertx/core/logging/Recording.java b/src/test/java/io/vertx/core/logging/Recording.java\nindex 6fb83cc..c393db4 100644\n--- a/src/test/java/io/vertx/core/logging/Recording.java\n+++ b/src/test/java/io/vertx/core/logging/Recording.java\n@@ -74,7 +74,7 @@\n     long now = System.currentTimeMillis();\n     StringBuilder acc = new StringBuilder(get());\n     while (!predicate.test(acc.toString())) {\n-      Assert.assertTrue(\"Was not expecting this output \" + acc, System.currentTimeMillis() - now < 5000);\n+      Assert.assertTrue(System.currentTimeMillis() - now < 5000);\n       try {\n         Thread.sleep(1);\n       } catch (InterruptedException e) {\n", "projectName": "eclipse.vert.x", "bugLineNum": 77, "bugNodeStartChar": 2102, "bugNodeLength": 98, "fixLineNum": 77, "fixNodeStartChar": 2102, "fixNodeLength": 58, "sourceBeforeFix": "Assert.assertTrue(\"Was not expecting this output \" + acc,System.currentTimeMillis() - now < 5000)", "sourceAfterFix": "Assert.assertTrue(System.currentTimeMillis() - now < 5000)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "cb8447af2886a43d50cf72a3f6051343c5db645a", "fixCommitParentSHA1": "cfc0311180c242c8f307fccb6827c980f01ab527", "bugFilePath": "src/test/java/io/vertx/core/logging/Recording.java", "fixPatch": "diff --git a/src/test/java/io/vertx/core/logging/Recording.java b/src/test/java/io/vertx/core/logging/Recording.java\nindex c393db4..6fb83cc 100644\n--- a/src/test/java/io/vertx/core/logging/Recording.java\n+++ b/src/test/java/io/vertx/core/logging/Recording.java\n@@ -74,7 +74,7 @@\n     long now = System.currentTimeMillis();\n     StringBuilder acc = new StringBuilder(get());\n     while (!predicate.test(acc.toString())) {\n-      Assert.assertTrue(System.currentTimeMillis() - now < 5000);\n+      Assert.assertTrue(\"Was not expecting this output \" + acc, System.currentTimeMillis() - now < 5000);\n       try {\n         Thread.sleep(1);\n       } catch (InterruptedException e) {\n", "projectName": "eclipse.vert.x", "bugLineNum": 77, "bugNodeStartChar": 2102, "bugNodeLength": 58, "fixLineNum": 77, "fixNodeStartChar": 2102, "fixNodeLength": 98, "sourceBeforeFix": "Assert.assertTrue(System.currentTimeMillis() - now < 5000)", "sourceAfterFix": "Assert.assertTrue(\"Was not expecting this output \" + acc,System.currentTimeMillis() - now < 5000)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "6a866ed44d70a51dbf6b07a2e075fe4a8b43d798", "fixCommitParentSHA1": "177c4af6efb45acb599dad7cae1853b72e5f2d5e", "bugFilePath": "src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java b/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java\nindex 3d3c48c..b784a5d 100644\n--- a/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java\n+++ b/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java\n@@ -174,7 +174,7 @@\n   }\n \n   @Override\n-  public AsyncFile write(Buffer buffer) {\n+  public synchronized AsyncFile write(Buffer buffer) {\n     int length = buffer.length();\n     doWrite(buffer, writePos, null);\n     writePos += length;\n", "projectName": "eclipse.vert.x", "bugLineNum": 176, "bugNodeStartChar": 6268, "bugNodeLength": 167, "fixLineNum": 176, "fixNodeStartChar": 6268, "fixNodeLength": 180, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "524d763d995df84a9c1ca4992ced1e2d62405261", "fixCommitParentSHA1": "3e4f68b0c1cb71bcfc88a77265c9797a30fec0dc", "bugFilePath": "src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java b/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java\nindex 4dd28cf..e748c8b 100644\n--- a/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java\n+++ b/src/main/java/io/vertx/core/file/impl/AsyncFileImpl.java\n@@ -170,7 +170,7 @@\n   }\n \n   @Override\n-  public AsyncFile write(Buffer buffer) {\n+  public synchronized AsyncFile write(Buffer buffer) {\n     int length = buffer.length();\n     doWrite(buffer, writePos, null);\n     writePos += length;\n", "projectName": "eclipse.vert.x", "bugLineNum": 172, "bugNodeStartChar": 6217, "bugNodeLength": 167, "fixLineNum": 172, "fixNodeStartChar": 6217, "fixNodeLength": 180, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "fixCommitParentSHA1": "419072905a45d00fb2197b33e85a7d260ade24cc", "bugFilePath": "src/test/java/io/vertx/test/core/HttpTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HttpTest.java b/src/test/java/io/vertx/test/core/HttpTest.java\nindex 9f91b91..e2fd7f1 100644\n--- a/src/test/java/io/vertx/test/core/HttpTest.java\n+++ b/src/test/java/io/vertx/test/core/HttpTest.java\n@@ -409,7 +409,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n@@ -615,7 +615,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n", "projectName": "eclipse.vert.x", "bugLineNum": 412, "bugNodeStartChar": 18099, "bugNodeLength": 28, "fixLineNum": 412, "fixNodeStartChar": 18099, "fixNodeLength": 28, "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "fixCommitParentSHA1": "419072905a45d00fb2197b33e85a7d260ade24cc", "bugFilePath": "src/test/java/io/vertx/test/core/HttpTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HttpTest.java b/src/test/java/io/vertx/test/core/HttpTest.java\nindex 9f91b91..e2fd7f1 100644\n--- a/src/test/java/io/vertx/test/core/HttpTest.java\n+++ b/src/test/java/io/vertx/test/core/HttpTest.java\n@@ -409,7 +409,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n@@ -615,7 +615,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n", "projectName": "eclipse.vert.x", "bugLineNum": 618, "bugNodeStartChar": 28605, "bugNodeLength": 28, "fixLineNum": 618, "fixNodeStartChar": 28605, "fixNodeLength": 28, "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "fixCommitParentSHA1": "419072905a45d00fb2197b33e85a7d260ade24cc", "bugFilePath": "src/test/java/io/vertx/test/core/NetTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/NetTest.java b/src/test/java/io/vertx/test/core/NetTest.java\nindex 374f14b..9f23946 100644\n--- a/src/test/java/io/vertx/test/core/NetTest.java\n+++ b/src/test/java/io/vertx/test/core/NetTest.java\n@@ -280,7 +280,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n@@ -369,7 +369,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n", "projectName": "eclipse.vert.x", "bugLineNum": 283, "bugNodeStartChar": 11659, "bugNodeLength": 28, "fixLineNum": 283, "fixNodeStartChar": 11659, "fixNodeLength": 28, "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "fixCommitParentSHA1": "419072905a45d00fb2197b33e85a7d260ade24cc", "bugFilePath": "src/test/java/io/vertx/test/core/NetTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/NetTest.java b/src/test/java/io/vertx/test/core/NetTest.java\nindex 374f14b..9f23946 100644\n--- a/src/test/java/io/vertx/test/core/NetTest.java\n+++ b/src/test/java/io/vertx/test/core/NetTest.java\n@@ -280,7 +280,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n@@ -369,7 +369,7 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;\n+    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n", "projectName": "eclipse.vert.x", "bugLineNum": 372, "bugNodeStartChar": 16104, "bugNodeLength": 28, "fixLineNum": 372, "fixNodeStartChar": 16104, "fixNodeLength": 28, "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f65bc869273495b405fb0a55d2dc68950381c648", "fixCommitParentSHA1": "65645eb24befdb5822a899af0378e63e01a21d30", "bugFilePath": "src/main/java/io/vertx/core/impl/DeploymentManager.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/DeploymentManager.java b/src/main/java/io/vertx/core/impl/DeploymentManager.java\nindex 44c8ebd..26f1a18 100644\n--- a/src/main/java/io/vertx/core/impl/DeploymentManager.java\n+++ b/src/main/java/io/vertx/core/impl/DeploymentManager.java\n@@ -669,7 +669,7 @@\n           undeployed = false;\n           log.trace(\"Redeployed ok\");\n         } else {\n-          log.trace(\"Failed to deploy!!\");\n+          log.trace(\"Failed to deploy!!\", res2.cause());\n           broken = true;\n           doStartRedeployTimer();\n         }\n", "projectName": "eclipse.vert.x", "bugLineNum": 672, "bugNodeStartChar": 25047, "bugNodeLength": 31, "fixLineNum": 672, "fixNodeStartChar": 25047, "fixNodeLength": 45, "sourceBeforeFix": "log.trace(\"Failed to deploy!!\")", "sourceAfterFix": "log.trace(\"Failed to deploy!!\",res2.cause())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "94e9ac021eeec1da9c6120aae07594e3dd6704c0", "fixCommitParentSHA1": "8259069ede27553855269eba85f3c9d3d81d373b", "bugFilePath": "src/main/java/io/vertx/core/impl/DeploymentManager.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/DeploymentManager.java b/src/main/java/io/vertx/core/impl/DeploymentManager.java\nindex 44c8ebd..26f1a18 100644\n--- a/src/main/java/io/vertx/core/impl/DeploymentManager.java\n+++ b/src/main/java/io/vertx/core/impl/DeploymentManager.java\n@@ -669,7 +669,7 @@\n           undeployed = false;\n           log.trace(\"Redeployed ok\");\n         } else {\n-          log.trace(\"Failed to deploy!!\");\n+          log.trace(\"Failed to deploy!!\", res2.cause());\n           broken = true;\n           doStartRedeployTimer();\n         }\n", "projectName": "eclipse.vert.x", "bugLineNum": 672, "bugNodeStartChar": 25047, "bugNodeLength": 31, "fixLineNum": 672, "fixNodeStartChar": 25047, "fixNodeLength": 45, "sourceBeforeFix": "log.trace(\"Failed to deploy!!\")", "sourceAfterFix": "log.trace(\"Failed to deploy!!\",res2.cause())"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "fixCommitParentSHA1": "1147f342d11ff7c79c7b3c8914b403f48c34b4da", "bugFilePath": "src/main/java/io/vertx/core/impl/VertxImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java\nindex 4ddb162..a1a3e9a 100644\n--- a/src/main/java/io/vertx/core/impl/VertxImpl.java\n+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java\n@@ -174,7 +174,7 @@\n                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n-                  log.error(ar.cause());\n+                  log.error(asyncResult.cause());\n                 }\n              }\n             });\n@@ -182,7 +182,7 @@\n             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n-              log.error(ar.cause());\n+              log.error(ar2.cause());\n             }\n           }\n         });\n", "projectName": "eclipse.vert.x", "bugLineNum": 177, "bugNodeStartChar": 8254, "bugNodeLength": 10, "fixLineNum": 177, "fixNodeStartChar": 8254, "fixNodeLength": 19, "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "asyncResult.cause()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "fixCommitParentSHA1": "1147f342d11ff7c79c7b3c8914b403f48c34b4da", "bugFilePath": "src/main/java/io/vertx/core/impl/VertxImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java\nindex 4ddb162..a1a3e9a 100644\n--- a/src/main/java/io/vertx/core/impl/VertxImpl.java\n+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java\n@@ -174,7 +174,7 @@\n                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n-                  log.error(ar.cause());\n+                  log.error(asyncResult.cause());\n                 }\n              }\n             });\n@@ -182,7 +182,7 @@\n             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n-              log.error(ar.cause());\n+              log.error(ar2.cause());\n             }\n           }\n         });\n", "projectName": "eclipse.vert.x", "bugLineNum": 177, "bugNodeStartChar": 8254, "bugNodeLength": 10, "fixLineNum": 177, "fixNodeStartChar": 8254, "fixNodeLength": 19, "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "asyncResult.cause()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "fixCommitParentSHA1": "1147f342d11ff7c79c7b3c8914b403f48c34b4da", "bugFilePath": "src/main/java/io/vertx/core/impl/VertxImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java\nindex 4ddb162..a1a3e9a 100644\n--- a/src/main/java/io/vertx/core/impl/VertxImpl.java\n+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java\n@@ -174,7 +174,7 @@\n                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n-                  log.error(ar.cause());\n+                  log.error(asyncResult.cause());\n                 }\n              }\n             });\n@@ -182,7 +182,7 @@\n             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n-              log.error(ar.cause());\n+              log.error(ar2.cause());\n             }\n           }\n         });\n", "projectName": "eclipse.vert.x", "bugLineNum": 185, "bugNodeStartChar": 8491, "bugNodeLength": 10, "fixLineNum": 185, "fixNodeStartChar": 8491, "fixNodeLength": 11, "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "ar2.cause()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4446595a8d326298e7d3ceda6472c84ababfc2ff", "fixCommitParentSHA1": "1147f342d11ff7c79c7b3c8914b403f48c34b4da", "bugFilePath": "src/main/java/io/vertx/core/impl/VertxImpl.java", "fixPatch": "diff --git a/src/main/java/io/vertx/core/impl/VertxImpl.java b/src/main/java/io/vertx/core/impl/VertxImpl.java\nindex 4ddb162..a1a3e9a 100644\n--- a/src/main/java/io/vertx/core/impl/VertxImpl.java\n+++ b/src/main/java/io/vertx/core/impl/VertxImpl.java\n@@ -174,7 +174,7 @@\n                 if (resultHandler != null) {\n                   resultHandler.handle(Future.failedFuture(asyncResult.cause()));\n                 } else {\n-                  log.error(ar.cause());\n+                  log.error(asyncResult.cause());\n                 }\n              }\n             });\n@@ -182,7 +182,7 @@\n             if (resultHandler != null) {\n               resultHandler.handle(Future.failedFuture(ar2.cause()));\n             } else {\n-              log.error(ar.cause());\n+              log.error(ar2.cause());\n             }\n           }\n         });\n", "projectName": "eclipse.vert.x", "bugLineNum": 185, "bugNodeStartChar": 8491, "bugNodeLength": 10, "fixLineNum": 185, "fixNodeStartChar": 8491, "fixNodeLength": 11, "sourceBeforeFix": "ar.cause()", "sourceAfterFix": "ar2.cause()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "764116349491de21635664f596ad70a0ce009470", "fixCommitParentSHA1": "c8c7b33343d9e9de4dd8ef82e2b19452008cb3aa", "bugFilePath": "src/test/java/io/vertx/test/core/NetTest.java", "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/NetTest.java b/src/test/java/io/vertx/test/core/NetTest.java\nindex 4ce1c2a..4dd8377 100644\n--- a/src/test/java/io/vertx/test/core/NetTest.java\n+++ b/src/test/java/io/vertx/test/core/NetTest.java\n@@ -487,7 +487,8 @@\n     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n-    int trafficClass = TestUtils.randomByte() + 127;boolean tcpNoDelay = rand.nextBoolean();\n+    int trafficClass = TestUtils.randomByte() + 128;\n+    boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();\n     boolean usePooledBuffers = rand.nextBoolean();\n", "projectName": "eclipse.vert.x", "bugLineNum": 490, "bugNodeStartChar": 21992, "bugNodeLength": 28, "fixLineNum": 490, "fixNodeStartChar": 21992, "fixNodeLength": 28, "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a78b4a849de52c109940c50699cf1dad17368a33", "fixCommitParentSHA1": "30365ab386aae80257be273648e2e69b288263da", "bugFilePath": "vertx-core/src/main/java/io/vertx/core/spi/cluster/AsyncMap.java", "fixPatch": "diff --git a/vertx-core/src/main/java/io/vertx/core/spi/cluster/AsyncMap.java b/vertx-core/src/main/java/io/vertx/core/spi/cluster/AsyncMap.java\nindex b23cbc3..cc1ad1c 100644\n--- a/vertx-core/src/main/java/io/vertx/core/spi/cluster/AsyncMap.java\n+++ b/vertx-core/src/main/java/io/vertx/core/spi/cluster/AsyncMap.java\n@@ -52,5 +52,5 @@\n    * @param k The key\n    * @param resultHandler - this will be called some time later to signify the value has been removed\n    */\n-  void remove(K k, Handler<AsyncResult<Boolean>> resultHandler);\n+  void remove(K k, Handler<AsyncResult<Void>> resultHandler);\n }\n", "projectName": "eclipse.vert.x", "bugLineNum": 55, "bugNodeStartChar": 1695, "bugNodeLength": 20, "fixLineNum": 55, "fixNodeStartChar": 1695, "fixNodeLength": 17, "sourceBeforeFix": "AsyncResult<Boolean>", "sourceAfterFix": "AsyncResult<Void>"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "4c66566e398558597a5058384d85a020b2418dab", "fixCommitParentSHA1": "6aec89b242034a79d122d8032b9dd4e90f5f2039", "bugFilePath": "vertx-testsuite/src/test/java/org/vertx/java/tests/core/net/JavaNetTest.java", "fixPatch": "diff --git a/vertx-testsuite/src/test/java/org/vertx/java/tests/core/net/JavaNetTest.java b/vertx-testsuite/src/test/java/org/vertx/java/tests/core/net/JavaNetTest.java\nindex 5eeea03..90940ce 100644\n--- a/vertx-testsuite/src/test/java/org/vertx/java/tests/core/net/JavaNetTest.java\n+++ b/vertx-testsuite/src/test/java/org/vertx/java/tests/core/net/JavaNetTest.java\n@@ -439,7 +439,7 @@\n \n   @Test\n   public void testListenOnWildcardPort() throws Exception {\n-    startTest(getMethodName(), false);\n+    startTest(getMethodName());\n   }\n \n   @Test\n", "projectName": "eclipse.vert.x", "bugLineNum": 442, "bugNodeStartChar": 13911, "bugNodeLength": 33, "fixLineNum": 442, "fixNodeStartChar": 13911, "fixNodeLength": 26, "sourceBeforeFix": "startTest(getMethodName(),false)", "sourceAfterFix": "startTest(getMethodName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "41b3701231164cf35ccd61056c14260df6d93e6a", "fixCommitParentSHA1": "d5a9468736130e8ae147850c7a6fd9b977bbaf0e", "bugFilePath": "vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java", "fixPatch": "diff --git a/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java b/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java\nindex cd3c756..7f2ada1 100644\n--- a/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java\n+++ b/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java\n@@ -342,9 +342,9 @@\n       }\n     });\n \n-    dns.lookup(\"vertx.io\", new Handler<AsyncResult<InetAddress>>() {\n+    dns.lookup4(\"vertx.io\", new Handler<AsyncResult<Inet4Address>>() {\n       @Override\n-      public void handle(AsyncResult<InetAddress> event) {\n+      public void handle(AsyncResult<Inet4Address> event) {\n         InetAddress result = event.result();\n         tu.azzert(result != null);\n         tu.azzert(\"10.0.0.1\".equals(result.getHostAddress()));\n", "projectName": "eclipse.vert.x", "bugLineNum": 347, "bugNodeStartChar": 11744, "bugNodeLength": 24, "fixLineNum": 347, "fixNodeStartChar": 11744, "fixNodeLength": 25, "sourceBeforeFix": "AsyncResult<InetAddress>", "sourceAfterFix": "AsyncResult<Inet4Address>"}]