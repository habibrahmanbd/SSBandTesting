[{"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "android/guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 512, "bugNodeStartChar": 18143, "bugNodeLength": 36, "fixLineNum": 512, "fixNodeStartChar": 18143, "fixNodeLength": 33, "sourceBeforeFix": "hashFunction.hashBytes(littleEndian)", "sourceAfterFix": "hashFunction.hashBytes(bigEndian)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "android/guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 514, "bugNodeStartChar": 18286, "bugNodeLength": 20, "fixLineNum": 514, "fixNodeStartChar": 18286, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "android/guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 514, "bugNodeStartChar": 18286, "bugNodeLength": 20, "fixLineNum": 514, "fixNodeStartChar": 18286, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "android/guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 525, "bugNodeStartChar": 18762, "bugNodeLength": 47, "fixLineNum": 525, "fixNodeStartChar": 18762, "fixNodeLength": 44, "sourceBeforeFix": "hashFunction.newHasher().putBytes(littleEndian)", "sourceAfterFix": "hashFunction.newHasher().putBytes(bigEndian)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "android/guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 527, "bugNodeStartChar": 18923, "bugNodeLength": 20, "fixLineNum": 527, "fixNodeStartChar": 18923, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "android/guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 527, "bugNodeStartChar": 18923, "bugNodeLength": 20, "fixLineNum": 527, "fixNodeStartChar": 18923, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/hash/HashTestUtils.java b/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 512, "bugNodeStartChar": 18143, "bugNodeLength": 36, "fixLineNum": 512, "fixNodeStartChar": 18143, "fixNodeLength": 33, "sourceBeforeFix": "hashFunction.hashBytes(littleEndian)", "sourceAfterFix": "hashFunction.hashBytes(bigEndian)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/hash/HashTestUtils.java b/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 514, "bugNodeStartChar": 18286, "bugNodeLength": 20, "fixLineNum": 514, "fixNodeStartChar": 18286, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/hash/HashTestUtils.java b/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 514, "bugNodeStartChar": 18286, "bugNodeLength": 20, "fixLineNum": 514, "fixNodeStartChar": 18286, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/hash/HashTestUtils.java b/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 525, "bugNodeStartChar": 18762, "bugNodeLength": 47, "fixLineNum": 525, "fixNodeStartChar": 18762, "fixNodeLength": 44, "sourceBeforeFix": "hashFunction.newHasher().putBytes(littleEndian)", "sourceAfterFix": "hashFunction.newHasher().putBytes(bigEndian)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/hash/HashTestUtils.java b/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 527, "bugNodeStartChar": 18923, "bugNodeLength": 20, "fixLineNum": 527, "fixNodeStartChar": 18923, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "fixCommitParentSHA1": "60e108886fcb173ca21f3966965a0b57cf5b5797", "bugFilePath": "guava-tests/test/com/google/common/hash/HashTestUtils.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/hash/HashTestUtils.java b/guava-tests/test/com/google/common/hash/HashTestUtils.java\nindex f2b8971..8dfbdb0 100644\n--- a/guava-tests/test/com/google/common/hash/HashTestUtils.java\n+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java\n@@ -509,9 +509,9 @@\n     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n-    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n+    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {\n@@ -522,9 +522,9 @@\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n-        hashFunction.newHasher().putBytes(littleEndian).hash());\n+        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n-    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n+    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n \n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {\n", "projectName": "google.guava", "bugLineNum": 527, "bugNodeStartChar": 18923, "bugNodeLength": 20, "fixLineNum": 527, "fixNodeStartChar": 18923, "fixNodeLength": 17, "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f1b22619682351923e1d34481e6efe499f41745f", "fixCommitParentSHA1": "79e8351d357383e3b1f85f029883970fac601c46", "bugFilePath": "android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\nindex 30f6477..dff58de 100644\n--- a/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n+++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n@@ -209,8 +209,9 @@\n     fakePool.runAll();\n \n     // Check that the interruption of a SequentialExecutor's task is restored to the thread once\n-    // it is yielded.\n-    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n+    // it is yielded. Clear the bit while checking so that the test doesn't hose JUnit or some other\n+    // test case.\n+    assertThat(Thread.currentThread().interrupted()).isTrue();\n   }\n \n   public void testInterrupt_doesNotStopExecution() {\n", "projectName": "google.guava", "bugLineNum": 213, "bugNodeStartChar": 5997, "bugNodeLength": 38, "fixLineNum": 214, "fixNodeStartChar": 6094, "fixNodeLength": 36, "sourceBeforeFix": "Thread.currentThread().isInterrupted()", "sourceAfterFix": "Thread.currentThread().interrupted()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f1b22619682351923e1d34481e6efe499f41745f", "fixCommitParentSHA1": "79e8351d357383e3b1f85f029883970fac601c46", "bugFilePath": "android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\nindex 30f6477..dff58de 100644\n--- a/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n+++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n@@ -209,8 +209,9 @@\n     fakePool.runAll();\n \n     // Check that the interruption of a SequentialExecutor's task is restored to the thread once\n-    // it is yielded.\n-    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n+    // it is yielded. Clear the bit while checking so that the test doesn't hose JUnit or some other\n+    // test case.\n+    assertThat(Thread.currentThread().interrupted()).isTrue();\n   }\n \n   public void testInterrupt_doesNotStopExecution() {\n", "projectName": "google.guava", "bugLineNum": 213, "bugNodeStartChar": 5997, "bugNodeLength": 38, "fixLineNum": 214, "fixNodeStartChar": 6094, "fixNodeLength": 36, "sourceBeforeFix": "Thread.currentThread().isInterrupted()", "sourceAfterFix": "Thread.currentThread().interrupted()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "f1b22619682351923e1d34481e6efe499f41745f", "fixCommitParentSHA1": "79e8351d357383e3b1f85f029883970fac601c46", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java b/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\nindex 30f6477..dff58de 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n@@ -209,8 +209,9 @@\n     fakePool.runAll();\n \n     // Check that the interruption of a SequentialExecutor's task is restored to the thread once\n-    // it is yielded.\n-    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n+    // it is yielded. Clear the bit while checking so that the test doesn't hose JUnit or some other\n+    // test case.\n+    assertThat(Thread.currentThread().interrupted()).isTrue();\n   }\n \n   public void testInterrupt_doesNotStopExecution() {\n", "projectName": "google.guava", "bugLineNum": 213, "bugNodeStartChar": 5997, "bugNodeLength": 38, "fixLineNum": 214, "fixNodeStartChar": 6094, "fixNodeLength": 36, "sourceBeforeFix": "Thread.currentThread().isInterrupted()", "sourceAfterFix": "Thread.currentThread().interrupted()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f1b22619682351923e1d34481e6efe499f41745f", "fixCommitParentSHA1": "79e8351d357383e3b1f85f029883970fac601c46", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java b/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\nindex 30f6477..dff58de 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java\n@@ -209,8 +209,9 @@\n     fakePool.runAll();\n \n     // Check that the interruption of a SequentialExecutor's task is restored to the thread once\n-    // it is yielded.\n-    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n+    // it is yielded. Clear the bit while checking so that the test doesn't hose JUnit or some other\n+    // test case.\n+    assertThat(Thread.currentThread().interrupted()).isTrue();\n   }\n \n   public void testInterrupt_doesNotStopExecution() {\n", "projectName": "google.guava", "bugLineNum": 213, "bugNodeStartChar": 5997, "bugNodeLength": 38, "fixLineNum": 214, "fixNodeStartChar": 6094, "fixNodeLength": 36, "sourceBeforeFix": "Thread.currentThread().isInterrupted()", "sourceAfterFix": "Thread.currentThread().interrupted()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "android/guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/util/concurrent/Striped.java b/android/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/android/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/android/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 323, "bugNodeStartChar": 13165, "bugNodeLength": 69, "fixLineNum": 323, "fixNodeStartChar": 13165, "fixNodeLength": 84, "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "android/guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/util/concurrent/Striped.java b/android/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/android/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/android/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 326, "bugNodeStartChar": 13268, "bugNodeLength": 22, "fixLineNum": 326, "fixNodeStartChar": 13268, "fixNodeLength": 37, "sourceBeforeFix": "Object strongReference", "sourceAfterFix": "WeakSafeReadWriteLock strongReference"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "android/guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/util/concurrent/Striped.java b/android/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/android/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/android/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 346, "bugNodeStartChar": 13799, "bugNodeLength": 69, "fixLineNum": 346, "fixNodeStartChar": 13799, "fixNodeLength": 84, "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "android/guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/util/concurrent/Striped.java b/android/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/android/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/android/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 349, "bugNodeStartChar": 13912, "bugNodeLength": 22, "fixLineNum": 349, "fixNodeStartChar": 13912, "fixNodeLength": 37, "sourceBeforeFix": "Object strongReference", "sourceAfterFix": "WeakSafeReadWriteLock strongReference"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Striped.java b/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 323, "bugNodeStartChar": 13165, "bugNodeLength": 69, "fixLineNum": 323, "fixNodeStartChar": 13165, "fixNodeLength": 84, "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Striped.java b/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 326, "bugNodeStartChar": 13268, "bugNodeLength": 22, "fixLineNum": 326, "fixNodeStartChar": 13268, "fixNodeLength": 37, "sourceBeforeFix": "Object strongReference", "sourceAfterFix": "WeakSafeReadWriteLock strongReference"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Striped.java b/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 346, "bugNodeStartChar": 13799, "bugNodeLength": 69, "fixLineNum": 346, "fixNodeStartChar": 13799, "fixNodeLength": 84, "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "fixCommitParentSHA1": "2f6370343200faec3de904a5cf2e39345acb33e7", "bugFilePath": "guava/src/com/google/common/util/concurrent/Striped.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Striped.java b/guava/src/com/google/common/util/concurrent/Striped.java\nindex cd43294..36fa929 100644\n--- a/guava/src/com/google/common/util/concurrent/Striped.java\n+++ b/guava/src/com/google/common/util/concurrent/Striped.java\n@@ -321,9 +321,9 @@\n     private final Lock delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeLock(Lock delegate, Object strongReference) {\n+    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n@@ -344,9 +344,9 @@\n     private final Condition delegate;\n \n     @SuppressWarnings(\"unused\")\n-    private final Object strongReference;\n+    private final WeakSafeReadWriteLock strongReference;\n \n-    WeakSafeCondition(Condition delegate, Object strongReference) {\n+    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }\n", "projectName": "google.guava", "bugLineNum": 349, "bugNodeStartChar": 13912, "bugNodeLength": 22, "fixLineNum": 349, "fixNodeStartChar": 13912, "fixNodeLength": 37, "sourceBeforeFix": "Object strongReference", "sourceAfterFix": "WeakSafeReadWriteLock strongReference"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a8373f17c4ea0b2ad87b7bad71f9a2b27c2c28a1", "fixCommitParentSHA1": "4740f24c9aa35cc6c71aa7359018432853e5e7ee", "bugFilePath": "android/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java b/android/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java\nindex 2724581..eac9422 100644\n--- a/android/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java\n+++ b/android/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java\n@@ -233,8 +233,23 @@\n     try {\n       Class.forName(unsafeComparatorClassName());\n       return true;\n-    } catch (ExceptionInInitializerError | ClassNotFoundException tolerable) {\n-      // probably running on Android\n+    } catch (Error | ClassNotFoundException tolerable) {\n+      /*\n+       * We're probably running on Android.\n+       *\n+       * A note on exception types:\n+       *\n+       * Android API level 10 throws ExceptionInInitializerError the first time and\n+       * ClassNotFoundException thereafter.\n+       *\n+       * Android API level 26 and JVM8 both let our Error propagate directly the first time and\n+       * throw NoClassDefFoundError thereafter. This is the proper behavior according to the spec.\n+       * See https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.2 (steps #11 and\n+       * #5).\n+       *\n+       * Note that that \"first time\" might happen in a test other than\n+       * testLexicographicalComparatorChoice!\n+       */\n       return false;\n     }\n   }\n", "projectName": "google.guava", "bugLineNum": 236, "bugNodeStartChar": 7747, "bugNodeLength": 52, "fixLineNum": 236, "fixNodeStartChar": 7747, "fixNodeLength": 30, "sourceBeforeFix": "ExceptionInInitializerError|ClassNotFoundException", "sourceAfterFix": "Error|ClassNotFoundException"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a8373f17c4ea0b2ad87b7bad71f9a2b27c2c28a1", "fixCommitParentSHA1": "4740f24c9aa35cc6c71aa7359018432853e5e7ee", "bugFilePath": "guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java\nindex 2724581..eac9422 100644\n--- a/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java\n+++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java\n@@ -233,8 +233,23 @@\n     try {\n       Class.forName(unsafeComparatorClassName());\n       return true;\n-    } catch (ExceptionInInitializerError | ClassNotFoundException tolerable) {\n-      // probably running on Android\n+    } catch (Error | ClassNotFoundException tolerable) {\n+      /*\n+       * We're probably running on Android.\n+       *\n+       * A note on exception types:\n+       *\n+       * Android API level 10 throws ExceptionInInitializerError the first time and\n+       * ClassNotFoundException thereafter.\n+       *\n+       * Android API level 26 and JVM8 both let our Error propagate directly the first time and\n+       * throw NoClassDefFoundError thereafter. This is the proper behavior according to the spec.\n+       * See https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.2 (steps #11 and\n+       * #5).\n+       *\n+       * Note that that \"first time\" might happen in a test other than\n+       * testLexicographicalComparatorChoice!\n+       */\n       return false;\n     }\n   }\n", "projectName": "google.guava", "bugLineNum": 236, "bugNodeStartChar": 7747, "bugNodeLength": 52, "fixLineNum": 236, "fixNodeStartChar": 7747, "fixNodeLength": 30, "sourceBeforeFix": "ExceptionInInitializerError|ClassNotFoundException", "sourceAfterFix": "Error|ClassNotFoundException"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a4c537ad34b241ba01fd9b0c9326bbcd71e2b60a", "fixCommitParentSHA1": "59dbb4532455eb9a9428025120d926268d48ef01", "bugFilePath": "android/guava/src/com/google/common/cache/CacheBuilder.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/cache/CacheBuilder.java b/android/guava/src/com/google/common/cache/CacheBuilder.java\nindex e453aef..aa7e12f 100644\n--- a/android/guava/src/com/google/common/cache/CacheBuilder.java\n+++ b/android/guava/src/com/google/common/cache/CacheBuilder.java\n@@ -235,8 +235,7 @@\n \n   Supplier<? extends StatsCounter> statsCounterSupplier = NULL_STATS_COUNTER;\n \n-  // TODO(fry): make constructor private and update tests to use newBuilder\n-  CacheBuilder() {}\n+  private CacheBuilder() {}\n \n   /**\n    * Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,\n", "projectName": "google.guava", "bugLineNum": 239, "bugNodeStartChar": 9839, "bugNodeLength": 17, "fixLineNum": 238, "fixNodeStartChar": 9763, "fixNodeLength": 25, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a4c537ad34b241ba01fd9b0c9326bbcd71e2b60a", "fixCommitParentSHA1": "59dbb4532455eb9a9428025120d926268d48ef01", "bugFilePath": "guava/src/com/google/common/cache/CacheBuilder.java", "fixPatch": "diff --git a/guava/src/com/google/common/cache/CacheBuilder.java b/guava/src/com/google/common/cache/CacheBuilder.java\nindex e453aef..aa7e12f 100644\n--- a/guava/src/com/google/common/cache/CacheBuilder.java\n+++ b/guava/src/com/google/common/cache/CacheBuilder.java\n@@ -235,8 +235,7 @@\n \n   Supplier<? extends StatsCounter> statsCounterSupplier = NULL_STATS_COUNTER;\n \n-  // TODO(fry): make constructor private and update tests to use newBuilder\n-  CacheBuilder() {}\n+  private CacheBuilder() {}\n \n   /**\n    * Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,\n", "projectName": "google.guava", "bugLineNum": 239, "bugNodeStartChar": 9839, "bugNodeLength": 17, "fixLineNum": 238, "fixNodeStartChar": 9763, "fixNodeLength": 25, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java\nindex ff5d2c3..a0ac68a 100644\n--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java\n+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java\n@@ -91,7 +91,7 @@\n     // An execution exception holds a runtime exception (from throwables.propogate) that holds our\n     // original exception.\n     assertEquals(service.runException, service.failureCause());\n-    assertEquals(service.state(), Service.State.FAILED);\n+    assertEquals(Service.State.FAILED, service.state());\n   }\n \n   public void testFailOnExceptionFromStartUp() {\n", "projectName": "google.guava", "bugLineNum": 94, "bugNodeStartChar": 3687, "bugNodeLength": 51, "fixLineNum": 94, "fixNodeStartChar": 3687, "fixNodeLength": 51, "sourceBeforeFix": "assertEquals(service.state(),Service.State.FAILED)", "sourceAfterFix": "assertEquals(Service.State.FAILED,service.state())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java\nindex e0d0e3b..910cd61 100644\n--- a/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java\n+++ b/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java\n@@ -323,7 +323,7 @@\n     Thread t2 = newStartedThread(c2);\n     awaitTermination(t1);\n     awaitTermination(t2);\n-    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);\n+    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);\n   }\n \n   /**\n", "projectName": "google.guava", "bugLineNum": 326, "bugNodeStartChar": 8810, "bugNodeLength": 53, "fixLineNum": 326, "fixNodeStartChar": 8810, "fixNodeLength": 53, "sourceBeforeFix": "assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)", "sourceAfterFix": "assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java\nindex 6a14131..c60d469 100644\n--- a/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java\n+++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java\n@@ -42,7 +42,7 @@\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n-    assertEquals(countDownLatch.getCount(), 3L);\n+    assertEquals(3L, countDownLatch.getCount());\n \n     list.execute();\n \n", "projectName": "google.guava", "bugLineNum": 45, "bugNodeStartChar": 1568, "bugNodeLength": 43, "fixLineNum": 45, "fixNodeStartChar": 1568, "fixNodeLength": 43, "sourceBeforeFix": "assertEquals(countDownLatch.getCount(),3L)", "sourceAfterFix": "assertEquals(3L,countDownLatch.getCount())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java", "fixPatch": "diff --git a/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java b/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java\nindex edbcd8c..2da2b16 100644\n--- a/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java\n+++ b/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java\n@@ -1199,7 +1199,7 @@\n             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n-            assertEquals(q.toString(), \"[]\");\n+            assertEquals(\"[]\", q.toString());\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {\n", "projectName": "google.guava", "bugLineNum": 1202, "bugNodeStartChar": 40391, "bugNodeLength": 32, "fixLineNum": 1202, "fixNodeStartChar": 40391, "fixNodeLength": 32, "sourceBeforeFix": "assertEquals(q.toString(),\"[]\")", "sourceAfterFix": "assertEquals(\"[]\",q.toString())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java\nindex ff5d2c3..a0ac68a 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java\n@@ -91,7 +91,7 @@\n     // An execution exception holds a runtime exception (from throwables.propogate) that holds our\n     // original exception.\n     assertEquals(service.runException, service.failureCause());\n-    assertEquals(service.state(), Service.State.FAILED);\n+    assertEquals(Service.State.FAILED, service.state());\n   }\n \n   public void testFailOnExceptionFromStartUp() {\n", "projectName": "google.guava", "bugLineNum": 94, "bugNodeStartChar": 3687, "bugNodeLength": 51, "fixLineNum": 94, "fixNodeStartChar": 3687, "fixNodeLength": 51, "sourceBeforeFix": "assertEquals(service.state(),Service.State.FAILED)", "sourceAfterFix": "assertEquals(Service.State.FAILED,service.state())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java b/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java\nindex e0d0e3b..910cd61 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java\n@@ -323,7 +323,7 @@\n     Thread t2 = newStartedThread(c2);\n     awaitTermination(t1);\n     awaitTermination(t2);\n-    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);\n+    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);\n   }\n \n   /**\n", "projectName": "google.guava", "bugLineNum": 326, "bugNodeStartChar": 8810, "bugNodeLength": 53, "fixLineNum": 326, "fixNodeStartChar": 8810, "fixNodeLength": 53, "sourceBeforeFix": "assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)", "sourceAfterFix": "assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java b/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java\nindex 6a14131..c60d469 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java\n@@ -42,7 +42,7 @@\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n     list.add(new MockRunnable(countDownLatch), exec);\n-    assertEquals(countDownLatch.getCount(), 3L);\n+    assertEquals(3L, countDownLatch.getCount());\n \n     list.execute();\n \n", "projectName": "google.guava", "bugLineNum": 45, "bugNodeStartChar": 1568, "bugNodeLength": 43, "fixLineNum": 45, "fixNodeStartChar": 1568, "fixNodeLength": 43, "sourceBeforeFix": "assertEquals(countDownLatch.getCount(),3L)", "sourceAfterFix": "assertEquals(3L,countDownLatch.getCount())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "fixCommitParentSHA1": "6d8771908c8eb77f8478fb772fcad090a902884f", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java b/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java\nindex edbcd8c..2d200da 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java\n@@ -1199,7 +1199,7 @@\n             assertNull(q.peek());\n             assertNull(q.poll());\n             assertNull(q.poll(0, MILLISECONDS));\n-            assertEquals(q.toString(), \"[]\");\n+      assertEquals(\"[]\", q.toString());\n             assertTrue(Arrays.equals(q.toArray(), new Object[0]));\n             assertFalse(q.iterator().hasNext());\n             try {\n", "projectName": "google.guava", "bugLineNum": 1202, "bugNodeStartChar": 40391, "bugNodeLength": 32, "fixLineNum": 1202, "fixNodeStartChar": 40385, "fixNodeLength": 32, "sourceBeforeFix": "assertEquals(q.toString(),\"[]\")", "sourceAfterFix": "assertEquals(\"[]\",q.toString())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java b/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\nindex 2ba48ba..db4d675 100755\n--- a/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n@@ -96,14 +96,14 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     // Since the reference node is defined to be 'source' for directed graphs,\n     // we can assume this edge lives in the set of outgoing edges.\n     return checkNotNull(outEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (isSelfLoop) {\n       checkNonNegative(--selfLoopCount);\n     }\n@@ -112,7 +112,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = outEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 106, "bugNodeStartChar": 3512, "bugNodeLength": 11, "fixLineNum": 106, "fixNodeStartChar": 3512, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java b/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\nindex 2ba48ba..db4d675 100755\n--- a/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n@@ -96,14 +96,14 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     // Since the reference node is defined to be 'source' for directed graphs,\n     // we can assume this edge lives in the set of outgoing edges.\n     return checkNotNull(outEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (isSelfLoop) {\n       checkNonNegative(--selfLoopCount);\n     }\n@@ -112,7 +112,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = outEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 115, "bugNodeStartChar": 3742, "bugNodeLength": 11, "fixLineNum": 115, "fixNodeStartChar": 3742, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java b/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\nindex e06c6b4..03279d0 100755\n--- a/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n@@ -64,12 +64,12 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -77,7 +77,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 72, "bugNodeStartChar": 1959, "bugNodeLength": 11, "fixLineNum": 72, "fixNodeStartChar": 1959, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java b/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\nindex e06c6b4..03279d0 100755\n--- a/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n@@ -64,12 +64,12 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -77,7 +77,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 80, "bugNodeStartChar": 2116, "bugNodeLength": 11, "fixLineNum": 80, "fixNodeStartChar": 2116, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/DirectedGraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/DirectedGraphConnections.java b/android/guava/src/com/google/common/graph/DirectedGraphConnections.java\nindex 809046b..668b569 100755\n--- a/android/guava/src/com/google/common/graph/DirectedGraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/DirectedGraphConnections.java\n@@ -166,7 +166,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;\n@@ -179,7 +179,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     Object previousValue = adjacentNodeValues.get(node);\n     if (previousValue == PRED) {\n       adjacentNodeValues.remove(node);\n", "projectName": "google.guava", "bugLineNum": 169, "bugNodeStartChar": 5569, "bugNodeLength": 11, "fixLineNum": 169, "fixNodeStartChar": 5569, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/DirectedGraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/DirectedGraphConnections.java b/android/guava/src/com/google/common/graph/DirectedGraphConnections.java\nindex 809046b..668b569 100755\n--- a/android/guava/src/com/google/common/graph/DirectedGraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/DirectedGraphConnections.java\n@@ -166,7 +166,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;\n@@ -179,7 +179,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     Object previousValue = adjacentNodeValues.get(node);\n     if (previousValue == PRED) {\n       adjacentNodeValues.remove(node);\n", "projectName": "google.guava", "bugLineNum": 182, "bugNodeStartChar": 5888, "bugNodeLength": 11, "fixLineNum": 182, "fixNodeStartChar": 5888, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java b/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\nindex e204a71..d882f30 100755\n--- a/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n@@ -104,7 +104,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {\n@@ -114,7 +114,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {\n", "projectName": "google.guava", "bugLineNum": 107, "bugNodeStartChar": 3533, "bugNodeLength": 11, "fixLineNum": 107, "fixNodeStartChar": 3533, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java b/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\nindex e204a71..d882f30 100755\n--- a/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n@@ -104,7 +104,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {\n@@ -114,7 +114,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {\n", "projectName": "google.guava", "bugLineNum": 117, "bugNodeStartChar": 3829, "bugNodeLength": 11, "fixLineNum": 117, "fixNodeStartChar": 3829, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/GraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/GraphConnections.java b/android/guava/src/com/google/common/graph/GraphConnections.java\nindex 0988f71..252a027 100755\n--- a/android/guava/src/com/google/common/graph/GraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/GraphConnections.java\n@@ -41,17 +41,17 @@\n    * if there is no such edge.\n    */\n   @Nullable\n-  V value(Object node);\n+  V value(N node);\n \n   /** Remove {@code node} from the set of predecessors. */\n-  void removePredecessor(Object node);\n+  void removePredecessor(N node);\n \n   /**\n    * Remove {@code node} from the set of successors. Returns the value previously associated with\n    * the edge connecting the two nodes.\n    */\n   @CanIgnoreReturnValue\n-  V removeSuccessor(Object node);\n+  V removeSuccessor(N node);\n \n   /**\n    * Add {@code node} as a predecessor to the origin node. In the case of an undirected graph, it\n", "projectName": "google.guava", "bugLineNum": 44, "bugNodeStartChar": 1259, "bugNodeLength": 11, "fixLineNum": 44, "fixNodeStartChar": 1259, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/GraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/GraphConnections.java b/android/guava/src/com/google/common/graph/GraphConnections.java\nindex 0988f71..252a027 100755\n--- a/android/guava/src/com/google/common/graph/GraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/GraphConnections.java\n@@ -41,17 +41,17 @@\n    * if there is no such edge.\n    */\n   @Nullable\n-  V value(Object node);\n+  V value(N node);\n \n   /** Remove {@code node} from the set of predecessors. */\n-  void removePredecessor(Object node);\n+  void removePredecessor(N node);\n \n   /**\n    * Remove {@code node} from the set of successors. Returns the value previously associated with\n    * the edge connecting the two nodes.\n    */\n   @CanIgnoreReturnValue\n-  V removeSuccessor(Object node);\n+  V removeSuccessor(N node);\n \n   /**\n    * Add {@code node} as a predecessor to the origin node. In the case of an undirected graph, it\n", "projectName": "google.guava", "bugLineNum": 47, "bugNodeStartChar": 1358, "bugNodeLength": 11, "fixLineNum": 47, "fixNodeStartChar": 1358, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/GraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/GraphConnections.java b/android/guava/src/com/google/common/graph/GraphConnections.java\nindex 0988f71..252a027 100755\n--- a/android/guava/src/com/google/common/graph/GraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/GraphConnections.java\n@@ -41,17 +41,17 @@\n    * if there is no such edge.\n    */\n   @Nullable\n-  V value(Object node);\n+  V value(N node);\n \n   /** Remove {@code node} from the set of predecessors. */\n-  void removePredecessor(Object node);\n+  void removePredecessor(N node);\n \n   /**\n    * Remove {@code node} from the set of successors. Returns the value previously associated with\n    * the edge connecting the two nodes.\n    */\n   @CanIgnoreReturnValue\n-  V removeSuccessor(Object node);\n+  V removeSuccessor(N node);\n \n   /**\n    * Add {@code node} as a predecessor to the origin node. In the case of an undirected graph, it\n", "projectName": "google.guava", "bugLineNum": 54, "bugNodeStartChar": 1567, "bugNodeLength": 11, "fixLineNum": 54, "fixNodeStartChar": 1567, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/NetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/NetworkConnections.java b/android/guava/src/com/google/common/graph/NetworkConnections.java\nindex a9ea9f2..16a68d6 100755\n--- a/android/guava/src/com/google/common/graph/NetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/NetworkConnections.java\n@@ -48,11 +48,11 @@\n   Set<E> edgesConnecting(N node);\n \n   /**\n-   * Returns the node that is opposite the origin node along {@code edge}.\n+   * Returns the node that is adjacent to the origin node along {@code edge}.\n    *\n    * <p>In the directed case, {@code edge} is assumed to be an outgoing edge.\n    */\n-  N oppositeNode(Object edge);\n+  N adjacentNode(E edge);\n \n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.\n@@ -60,11 +60,11 @@\n    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n-  N removeInEdge(Object edge, boolean isSelfLoop);\n+  N removeInEdge(E edge, boolean isSelfLoop);\n \n   /** Remove {@code edge} from the set of outgoing edges. Returns the former successor node. */\n   @CanIgnoreReturnValue\n-  N removeOutEdge(Object edge);\n+  N removeOutEdge(E edge);\n \n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.\n", "projectName": "google.guava", "bugLineNum": 63, "bugNodeStartChar": 1782, "bugNodeLength": 11, "fixLineNum": 63, "fixNodeStartChar": 1782, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/NetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/NetworkConnections.java b/android/guava/src/com/google/common/graph/NetworkConnections.java\nindex a9ea9f2..16a68d6 100755\n--- a/android/guava/src/com/google/common/graph/NetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/NetworkConnections.java\n@@ -48,11 +48,11 @@\n   Set<E> edgesConnecting(N node);\n \n   /**\n-   * Returns the node that is opposite the origin node along {@code edge}.\n+   * Returns the node that is adjacent to the origin node along {@code edge}.\n    *\n    * <p>In the directed case, {@code edge} is assumed to be an outgoing edge.\n    */\n-  N oppositeNode(Object edge);\n+  N adjacentNode(E edge);\n \n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.\n@@ -60,11 +60,11 @@\n    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n-  N removeInEdge(Object edge, boolean isSelfLoop);\n+  N removeInEdge(E edge, boolean isSelfLoop);\n \n   /** Remove {@code edge} from the set of outgoing edges. Returns the former successor node. */\n   @CanIgnoreReturnValue\n-  N removeOutEdge(Object edge);\n+  N removeOutEdge(E edge);\n \n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.\n", "projectName": "google.guava", "bugLineNum": 67, "bugNodeStartChar": 1955, "bugNodeLength": 11, "fixLineNum": 67, "fixNodeStartChar": 1955, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/UndirectedGraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java b/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\nindex 9c5187e..bb5ed13 100755\n--- a/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n@@ -65,18 +65,18 @@\n   }\n \n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     return adjacentNodeValues.get(node);\n   }\n \n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     @SuppressWarnings(\"unused\")\n     V unused = removeSuccessor(node);\n   }\n \n   @Override\n-  public V removeSuccessor(Object node) {\n+  public V removeSuccessor(N node) {\n     return adjacentNodeValues.remove(node);\n   }\n \n", "projectName": "google.guava", "bugLineNum": 68, "bugNodeStartChar": 2097, "bugNodeLength": 11, "fixLineNum": 68, "fixNodeStartChar": 2097, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/UndirectedGraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java b/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\nindex 9c5187e..bb5ed13 100755\n--- a/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n@@ -65,18 +65,18 @@\n   }\n \n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     return adjacentNodeValues.get(node);\n   }\n \n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     @SuppressWarnings(\"unused\")\n     V unused = removeSuccessor(node);\n   }\n \n   @Override\n-  public V removeSuccessor(Object node) {\n+  public V removeSuccessor(N node) {\n     return adjacentNodeValues.remove(node);\n   }\n \n", "projectName": "google.guava", "bugLineNum": 73, "bugNodeStartChar": 2202, "bugNodeLength": 11, "fixLineNum": 73, "fixNodeStartChar": 2202, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/UndirectedGraphConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java b/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\nindex 9c5187e..bb5ed13 100755\n--- a/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n+++ b/android/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n@@ -65,18 +65,18 @@\n   }\n \n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     return adjacentNodeValues.get(node);\n   }\n \n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     @SuppressWarnings(\"unused\")\n     V unused = removeSuccessor(node);\n   }\n \n   @Override\n-  public V removeSuccessor(Object node) {\n+  public V removeSuccessor(N node) {\n     return adjacentNodeValues.remove(node);\n   }\n \n", "projectName": "google.guava", "bugLineNum": 79, "bugNodeStartChar": 2331, "bugNodeLength": 11, "fixLineNum": 79, "fixNodeStartChar": 2331, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java b/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\nindex 5be379e..431e724 100755\n--- a/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n@@ -83,7 +83,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -91,7 +91,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {\n", "projectName": "google.guava", "bugLineNum": 86, "bugNodeStartChar": 2851, "bugNodeLength": 11, "fixLineNum": 86, "fixNodeStartChar": 2851, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java b/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\nindex 5be379e..431e724 100755\n--- a/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n+++ b/android/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n@@ -83,7 +83,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -91,7 +91,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {\n", "projectName": "google.guava", "bugLineNum": 94, "bugNodeStartChar": 3008, "bugNodeLength": 11, "fixLineNum": 94, "fixNodeStartChar": 3008, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java b/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\nindex 2ba48ba..db4d675 100644\n--- a/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n@@ -96,14 +96,14 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     // Since the reference node is defined to be 'source' for directed graphs,\n     // we can assume this edge lives in the set of outgoing edges.\n     return checkNotNull(outEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (isSelfLoop) {\n       checkNonNegative(--selfLoopCount);\n     }\n@@ -112,7 +112,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = outEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 106, "bugNodeStartChar": 3512, "bugNodeLength": 11, "fixLineNum": 106, "fixNodeStartChar": 3512, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java b/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\nindex 2ba48ba..db4d675 100644\n--- a/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java\n@@ -96,14 +96,14 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     // Since the reference node is defined to be 'source' for directed graphs,\n     // we can assume this edge lives in the set of outgoing edges.\n     return checkNotNull(outEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (isSelfLoop) {\n       checkNonNegative(--selfLoopCount);\n     }\n@@ -112,7 +112,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = outEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 115, "bugNodeStartChar": 3742, "bugNodeLength": 11, "fixLineNum": 115, "fixNodeStartChar": 3742, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java b/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\nindex e06c6b4..03279d0 100644\n--- a/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n@@ -64,12 +64,12 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -77,7 +77,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 72, "bugNodeStartChar": 1959, "bugNodeLength": 11, "fixLineNum": 72, "fixNodeStartChar": 1959, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java b/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\nindex e06c6b4..03279d0 100644\n--- a/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/AbstractUndirectedNetworkConnections.java\n@@ -64,12 +64,12 @@\n   }\n \n   @Override\n-  public N oppositeNode(Object edge) {\n+  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -77,7 +77,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }\n", "projectName": "google.guava", "bugLineNum": 80, "bugNodeStartChar": 2116, "bugNodeLength": 11, "fixLineNum": 80, "fixNodeStartChar": 2116, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/DirectedGraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/DirectedGraphConnections.java b/guava/src/com/google/common/graph/DirectedGraphConnections.java\nindex 809046b..668b569 100644\n--- a/guava/src/com/google/common/graph/DirectedGraphConnections.java\n+++ b/guava/src/com/google/common/graph/DirectedGraphConnections.java\n@@ -166,7 +166,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;\n@@ -179,7 +179,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     Object previousValue = adjacentNodeValues.get(node);\n     if (previousValue == PRED) {\n       adjacentNodeValues.remove(node);\n", "projectName": "google.guava", "bugLineNum": 169, "bugNodeStartChar": 5569, "bugNodeLength": 11, "fixLineNum": 169, "fixNodeStartChar": 5569, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/DirectedGraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/DirectedGraphConnections.java b/guava/src/com/google/common/graph/DirectedGraphConnections.java\nindex 809046b..668b569 100644\n--- a/guava/src/com/google/common/graph/DirectedGraphConnections.java\n+++ b/guava/src/com/google/common/graph/DirectedGraphConnections.java\n@@ -166,7 +166,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;\n@@ -179,7 +179,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     Object previousValue = adjacentNodeValues.get(node);\n     if (previousValue == PRED) {\n       adjacentNodeValues.remove(node);\n", "projectName": "google.guava", "bugLineNum": 182, "bugNodeStartChar": 5888, "bugNodeLength": 11, "fixLineNum": 182, "fixNodeStartChar": 5888, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java b/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\nindex e204a71..d882f30 100644\n--- a/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n@@ -104,7 +104,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {\n@@ -114,7 +114,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {\n", "projectName": "google.guava", "bugLineNum": 107, "bugNodeStartChar": 3533, "bugNodeLength": 11, "fixLineNum": 107, "fixNodeStartChar": 3533, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java b/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\nindex e204a71..d882f30 100644\n--- a/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java\n@@ -104,7 +104,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {\n@@ -114,7 +114,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {\n", "projectName": "google.guava", "bugLineNum": 117, "bugNodeStartChar": 3829, "bugNodeLength": 11, "fixLineNum": 117, "fixNodeStartChar": 3829, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/GraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/GraphConnections.java b/guava/src/com/google/common/graph/GraphConnections.java\nindex 0988f71..252a027 100644\n--- a/guava/src/com/google/common/graph/GraphConnections.java\n+++ b/guava/src/com/google/common/graph/GraphConnections.java\n@@ -41,17 +41,17 @@\n    * if there is no such edge.\n    */\n   @Nullable\n-  V value(Object node);\n+  V value(N node);\n \n   /** Remove {@code node} from the set of predecessors. */\n-  void removePredecessor(Object node);\n+  void removePredecessor(N node);\n \n   /**\n    * Remove {@code node} from the set of successors. Returns the value previously associated with\n    * the edge connecting the two nodes.\n    */\n   @CanIgnoreReturnValue\n-  V removeSuccessor(Object node);\n+  V removeSuccessor(N node);\n \n   /**\n    * Add {@code node} as a predecessor to the origin node. In the case of an undirected graph, it\n", "projectName": "google.guava", "bugLineNum": 44, "bugNodeStartChar": 1259, "bugNodeLength": 11, "fixLineNum": 44, "fixNodeStartChar": 1259, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/GraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/GraphConnections.java b/guava/src/com/google/common/graph/GraphConnections.java\nindex 0988f71..252a027 100644\n--- a/guava/src/com/google/common/graph/GraphConnections.java\n+++ b/guava/src/com/google/common/graph/GraphConnections.java\n@@ -41,17 +41,17 @@\n    * if there is no such edge.\n    */\n   @Nullable\n-  V value(Object node);\n+  V value(N node);\n \n   /** Remove {@code node} from the set of predecessors. */\n-  void removePredecessor(Object node);\n+  void removePredecessor(N node);\n \n   /**\n    * Remove {@code node} from the set of successors. Returns the value previously associated with\n    * the edge connecting the two nodes.\n    */\n   @CanIgnoreReturnValue\n-  V removeSuccessor(Object node);\n+  V removeSuccessor(N node);\n \n   /**\n    * Add {@code node} as a predecessor to the origin node. In the case of an undirected graph, it\n", "projectName": "google.guava", "bugLineNum": 47, "bugNodeStartChar": 1358, "bugNodeLength": 11, "fixLineNum": 47, "fixNodeStartChar": 1358, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/GraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/GraphConnections.java b/guava/src/com/google/common/graph/GraphConnections.java\nindex 0988f71..252a027 100644\n--- a/guava/src/com/google/common/graph/GraphConnections.java\n+++ b/guava/src/com/google/common/graph/GraphConnections.java\n@@ -41,17 +41,17 @@\n    * if there is no such edge.\n    */\n   @Nullable\n-  V value(Object node);\n+  V value(N node);\n \n   /** Remove {@code node} from the set of predecessors. */\n-  void removePredecessor(Object node);\n+  void removePredecessor(N node);\n \n   /**\n    * Remove {@code node} from the set of successors. Returns the value previously associated with\n    * the edge connecting the two nodes.\n    */\n   @CanIgnoreReturnValue\n-  V removeSuccessor(Object node);\n+  V removeSuccessor(N node);\n \n   /**\n    * Add {@code node} as a predecessor to the origin node. In the case of an undirected graph, it\n", "projectName": "google.guava", "bugLineNum": 54, "bugNodeStartChar": 1567, "bugNodeLength": 11, "fixLineNum": 54, "fixNodeStartChar": 1567, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/NetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/NetworkConnections.java b/guava/src/com/google/common/graph/NetworkConnections.java\nindex a9ea9f2..16a68d6 100644\n--- a/guava/src/com/google/common/graph/NetworkConnections.java\n+++ b/guava/src/com/google/common/graph/NetworkConnections.java\n@@ -48,11 +48,11 @@\n   Set<E> edgesConnecting(N node);\n \n   /**\n-   * Returns the node that is opposite the origin node along {@code edge}.\n+   * Returns the node that is adjacent to the origin node along {@code edge}.\n    *\n    * <p>In the directed case, {@code edge} is assumed to be an outgoing edge.\n    */\n-  N oppositeNode(Object edge);\n+  N adjacentNode(E edge);\n \n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.\n@@ -60,11 +60,11 @@\n    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n-  N removeInEdge(Object edge, boolean isSelfLoop);\n+  N removeInEdge(E edge, boolean isSelfLoop);\n \n   /** Remove {@code edge} from the set of outgoing edges. Returns the former successor node. */\n   @CanIgnoreReturnValue\n-  N removeOutEdge(Object edge);\n+  N removeOutEdge(E edge);\n \n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.\n", "projectName": "google.guava", "bugLineNum": 63, "bugNodeStartChar": 1782, "bugNodeLength": 11, "fixLineNum": 63, "fixNodeStartChar": 1782, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/NetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/NetworkConnections.java b/guava/src/com/google/common/graph/NetworkConnections.java\nindex a9ea9f2..16a68d6 100644\n--- a/guava/src/com/google/common/graph/NetworkConnections.java\n+++ b/guava/src/com/google/common/graph/NetworkConnections.java\n@@ -48,11 +48,11 @@\n   Set<E> edgesConnecting(N node);\n \n   /**\n-   * Returns the node that is opposite the origin node along {@code edge}.\n+   * Returns the node that is adjacent to the origin node along {@code edge}.\n    *\n    * <p>In the directed case, {@code edge} is assumed to be an outgoing edge.\n    */\n-  N oppositeNode(Object edge);\n+  N adjacentNode(E edge);\n \n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.\n@@ -60,11 +60,11 @@\n    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n-  N removeInEdge(Object edge, boolean isSelfLoop);\n+  N removeInEdge(E edge, boolean isSelfLoop);\n \n   /** Remove {@code edge} from the set of outgoing edges. Returns the former successor node. */\n   @CanIgnoreReturnValue\n-  N removeOutEdge(Object edge);\n+  N removeOutEdge(E edge);\n \n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.\n", "projectName": "google.guava", "bugLineNum": 67, "bugNodeStartChar": 1955, "bugNodeLength": 11, "fixLineNum": 67, "fixNodeStartChar": 1955, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/UndirectedGraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/UndirectedGraphConnections.java b/guava/src/com/google/common/graph/UndirectedGraphConnections.java\nindex 9c5187e..bb5ed13 100644\n--- a/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n+++ b/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n@@ -65,18 +65,18 @@\n   }\n \n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     return adjacentNodeValues.get(node);\n   }\n \n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     @SuppressWarnings(\"unused\")\n     V unused = removeSuccessor(node);\n   }\n \n   @Override\n-  public V removeSuccessor(Object node) {\n+  public V removeSuccessor(N node) {\n     return adjacentNodeValues.remove(node);\n   }\n \n", "projectName": "google.guava", "bugLineNum": 68, "bugNodeStartChar": 2097, "bugNodeLength": 11, "fixLineNum": 68, "fixNodeStartChar": 2097, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/UndirectedGraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/UndirectedGraphConnections.java b/guava/src/com/google/common/graph/UndirectedGraphConnections.java\nindex 9c5187e..bb5ed13 100644\n--- a/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n+++ b/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n@@ -65,18 +65,18 @@\n   }\n \n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     return adjacentNodeValues.get(node);\n   }\n \n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     @SuppressWarnings(\"unused\")\n     V unused = removeSuccessor(node);\n   }\n \n   @Override\n-  public V removeSuccessor(Object node) {\n+  public V removeSuccessor(N node) {\n     return adjacentNodeValues.remove(node);\n   }\n \n", "projectName": "google.guava", "bugLineNum": 73, "bugNodeStartChar": 2202, "bugNodeLength": 11, "fixLineNum": 73, "fixNodeStartChar": 2202, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/UndirectedGraphConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/UndirectedGraphConnections.java b/guava/src/com/google/common/graph/UndirectedGraphConnections.java\nindex 9c5187e..bb5ed13 100644\n--- a/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n+++ b/guava/src/com/google/common/graph/UndirectedGraphConnections.java\n@@ -65,18 +65,18 @@\n   }\n \n   @Override\n-  public V value(Object node) {\n+  public V value(N node) {\n     return adjacentNodeValues.get(node);\n   }\n \n   @Override\n-  public void removePredecessor(Object node) {\n+  public void removePredecessor(N node) {\n     @SuppressWarnings(\"unused\")\n     V unused = removeSuccessor(node);\n   }\n \n   @Override\n-  public V removeSuccessor(Object node) {\n+  public V removeSuccessor(N node) {\n     return adjacentNodeValues.remove(node);\n   }\n \n", "projectName": "google.guava", "bugLineNum": 79, "bugNodeStartChar": 2331, "bugNodeLength": 11, "fixLineNum": 79, "fixNodeStartChar": 2331, "fixNodeLength": 6, "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java b/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\nindex 5be379e..431e724 100644\n--- a/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n@@ -83,7 +83,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -91,7 +91,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {\n", "projectName": "google.guava", "bugLineNum": 86, "bugNodeStartChar": 2851, "bugNodeLength": 11, "fixLineNum": 86, "fixNodeStartChar": 2851, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "fixCommitParentSHA1": "511730968ce8b82708c61e74e9c2c2bdaec51d57", "bugFilePath": "guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java b/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\nindex 5be379e..431e724 100644\n--- a/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n+++ b/guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java\n@@ -83,7 +83,7 @@\n   }\n \n   @Override\n-  public N removeInEdge(Object edge, boolean isSelfLoop) {\n+  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }\n@@ -91,7 +91,7 @@\n   }\n \n   @Override\n-  public N removeOutEdge(Object edge) {\n+  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {\n", "projectName": "google.guava", "bugLineNum": 94, "bugNodeStartChar": 3008, "bugNodeLength": 11, "fixLineNum": 94, "fixNodeStartChar": 3008, "fixNodeLength": 6, "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e68c0e674b22b9d49d402e0151aa15e8c645bd4b", "fixCommitParentSHA1": "961061a1de6331881343342d50381b5805918e4d", "bugFilePath": "android/guava/src/com/google/common/collect/EnumCountHashMap.java", "fixPatch": "diff --git a/android/guava/src/com/google/common/collect/EnumCountHashMap.java b/android/guava/src/com/google/common/collect/EnumCountHashMap.java\nindex ebea624..389bffb 100644\n--- a/android/guava/src/com/google/common/collect/EnumCountHashMap.java\n+++ b/android/guava/src/com/google/common/collect/EnumCountHashMap.java\n@@ -31,7 +31,7 @@\n \n /** EnumCountHashMap is an implementation of {@code AbstractObjectCountMap} with enum type keys. */\n @GwtCompatible(serializable = true, emulated = true)\n-public class EnumCountHashMap<K extends Enum<K>> extends AbstractObjectCountMap<K> {\n+class EnumCountHashMap<K extends Enum<K>> extends AbstractObjectCountMap<K> {\n \n   /** Creates an empty {@code EnumCountHashMap} instance. */\n   public static <K extends Enum<K>> EnumCountHashMap<K> create(Class<K> type) {\n", "projectName": "google.guava", "bugLineNum": 32, "bugNodeStartChar": 1173, "bugNodeLength": 6062, "fixLineNum": 32, "fixNodeStartChar": 1173, "fixNodeLength": 6055, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7a68b7bf103b6cd83e60b0d444c63d1a4e6a1479", "fixCommitParentSHA1": "55ea7068c374058ddc6a956957297cd1a881c759", "bugFilePath": "guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java", "fixPatch": "diff --git a/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java b/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java\nindex 395980e..460024e 100644\n--- a/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java\n+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultimapTestSuiteBuilder.java\n@@ -263,7 +263,7 @@\n     return derivedFeatures;\n   }\n \n-  private static final Multimap<Feature<?>, Feature<?>> GET_FEATURE_MAP =\n+  private static final ImmutableMultimap<Feature<?>, Feature<?>> GET_FEATURE_MAP =\n       ImmutableMultimap.<Feature<?>, Feature<?>>builder()\n           .put(\n               MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n", "projectName": "google.guava", "bugLineNum": 266, "bugNodeStartChar": 11377, "bugNodeLength": 32, "fixLineNum": 266, "fixNodeStartChar": 11377, "fixNodeLength": 41, "sourceBeforeFix": "Multimap<Feature<?>,Feature<?>>", "sourceAfterFix": "ImmutableMultimap<Feature<?>,Feature<?>>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "203b3e338e1941cfee5df5a431cd82e44d2c1a66", "fixCommitParentSHA1": "f4d6360c0741d939037b05146627616419451e0c", "bugFilePath": "guava-tests/test/com/google/common/collect/MapsTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/MapsTest.java b/guava-tests/test/com/google/common/collect/MapsTest.java\nindex 1cd37f4..546cff3 100644\n--- a/guava-tests/test/com/google/common/collect/MapsTest.java\n+++ b/guava-tests/test/com/google/common/collect/MapsTest.java\n@@ -494,7 +494,7 @@\n   }\n \n   private static final SortedMap<Integer, Integer> SORTED_EMPTY = Maps.newTreeMap();\n-  private static final SortedMap<Integer, Integer> SORTED_SINGLETON =\n+  private static final ImmutableSortedMap<Integer, Integer> SORTED_SINGLETON =\n       ImmutableSortedMap.of(1, 2);\n \n   public void testMapDifferenceOfSortedMapIsSorted() {\n", "projectName": "google.guava", "bugLineNum": 497, "bugNodeStartChar": 18295, "bugNodeLength": 27, "fixLineNum": 497, "fixNodeStartChar": 18295, "fixNodeLength": 36, "sourceBeforeFix": "SortedMap<Integer,Integer>", "sourceAfterFix": "ImmutableSortedMap<Integer,Integer>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "203b3e338e1941cfee5df5a431cd82e44d2c1a66", "fixCommitParentSHA1": "f4d6360c0741d939037b05146627616419451e0c", "bugFilePath": "guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java b/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java\nindex aea0693..5580750 100644\n--- a/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java\n+++ b/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java\n@@ -221,8 +221,8 @@\n     };\n   }\n \n-  private static final Multiset<String> ELEMENTS_TO_FILTER_OUT = ImmutableMultiset.of(\n-      \"foobar\", \"bazfoo\", \"foobar\", \"foobar\");\n+  private static final ImmutableMultiset<String> ELEMENTS_TO_FILTER_OUT =\n+      ImmutableMultiset.of(\"foobar\", \"bazfoo\", \"foobar\", \"foobar\");\n \n   private static final Predicate<String> PREDICATE =\n       Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));\n", "projectName": "google.guava", "bugLineNum": 224, "bugNodeStartChar": 8393, "bugNodeLength": 16, "fixLineNum": 224, "fixNodeStartChar": 8393, "fixNodeLength": 25, "sourceBeforeFix": "Multiset<String>", "sourceAfterFix": "ImmutableMultiset<String>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f4d6360c0741d939037b05146627616419451e0c", "fixCommitParentSHA1": "4ffdee5fc692bf7b5ab8c95269e3aeec1c806eec", "bugFilePath": "guava-tests/test/com/google/common/math/StatsTesting.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/math/StatsTesting.java b/guava-tests/test/com/google/common/math/StatsTesting.java\nindex ae26f1f..4d4018e 100644\n--- a/guava-tests/test/com/google/common/math/StatsTesting.java\n+++ b/guava-tests/test/com/google/common/math/StatsTesting.java\n@@ -127,7 +127,7 @@\n     }\n   }\n \n-  static final Iterable<ManyValues> ALL_MANY_VALUES = ManyValues.createAll();\n+  static final ImmutableList<ManyValues> ALL_MANY_VALUES = ManyValues.createAll();\n \n   static final ImmutableList<Double> MANY_VALUES =\n       ImmutableList.of(1.1, -44.44, 33.33, 555.555, -2.2);\n", "projectName": "google.guava", "bugLineNum": 130, "bugNodeStartChar": 4618, "bugNodeLength": 20, "fixLineNum": 130, "fixNodeStartChar": 4618, "fixNodeLength": 25, "sourceBeforeFix": "Iterable<ManyValues>", "sourceAfterFix": "ImmutableList<ManyValues>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "fixCommitParentSHA1": "c8765bc9e09df13164a8513efc91141767239eea", "bugFilePath": "guava-tests/test/com/google/common/math/StatsTesting.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/math/StatsTesting.java b/guava-tests/test/com/google/common/math/StatsTesting.java\nindex da9625c..ae26f1f 100644\n--- a/guava-tests/test/com/google/common/math/StatsTesting.java\n+++ b/guava-tests/test/com/google/common/math/StatsTesting.java\n@@ -246,7 +246,7 @@\n     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n \n-  static final List<Stats> ALL_STATS =\n+  static final ImmutableList<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,\n@@ -313,7 +313,7 @@\n     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n \n-  static final List<PairedStats> ALL_PAIRED_STATS =\n+  static final ImmutableList<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,\n", "projectName": "google.guava", "bugLineNum": 249, "bugNodeStartChar": 11074, "bugNodeLength": 11, "fixLineNum": 249, "fixNodeStartChar": 11074, "fixNodeLength": 20, "sourceBeforeFix": "List<Stats>", "sourceAfterFix": "ImmutableList<Stats>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "fixCommitParentSHA1": "c8765bc9e09df13164a8513efc91141767239eea", "bugFilePath": "guava-tests/test/com/google/common/math/StatsTesting.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/math/StatsTesting.java b/guava-tests/test/com/google/common/math/StatsTesting.java\nindex da9625c..ae26f1f 100644\n--- a/guava-tests/test/com/google/common/math/StatsTesting.java\n+++ b/guava-tests/test/com/google/common/math/StatsTesting.java\n@@ -246,7 +246,7 @@\n     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n \n-  static final List<Stats> ALL_STATS =\n+  static final ImmutableList<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,\n@@ -313,7 +313,7 @@\n     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n \n-  static final List<PairedStats> ALL_PAIRED_STATS =\n+  static final ImmutableList<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,\n", "projectName": "google.guava", "bugLineNum": 316, "bugNodeStartChar": 13532, "bugNodeLength": 17, "fixLineNum": 316, "fixNodeStartChar": 13532, "fixNodeLength": 26, "sourceBeforeFix": "List<PairedStats>", "sourceAfterFix": "ImmutableList<PairedStats>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c8765bc9e09df13164a8513efc91141767239eea", "fixCommitParentSHA1": "31985701e877434941c97891ba732478f0e97258", "bugFilePath": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java b/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java\nindex 6af73fe..5d09d10 100644\n--- a/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java\n+++ b/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java\n@@ -491,7 +491,7 @@\n \n     static final StackTraceElement[] EMPTY_STACK_TRACE = new StackTraceElement[0];\n \n-    static final Set<String> EXCLUDED_CLASS_NAMES =\n+    static final ImmutableSet<String> EXCLUDED_CLASS_NAMES =\n         ImmutableSet.of(\n             CycleDetectingLockFactory.class.getName(),\n             ExampleStackTrace.class.getName(),\n", "projectName": "google.guava", "bugLineNum": 494, "bugNodeStartChar": 20296, "bugNodeLength": 11, "fixLineNum": 494, "fixNodeStartChar": 20296, "fixNodeLength": 20, "sourceBeforeFix": "Set<String>", "sourceAfterFix": "ImmutableSet<String>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d86487fa294b1efa9f2b08c5569b9fca5efa1445", "fixCommitParentSHA1": "2162846b059a0aa4729eb6ba9cf6f6a8e73fa9be", "bugFilePath": "guava-tests/test/com/google/common/collect/MapsTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/MapsTest.java b/guava-tests/test/com/google/common/collect/MapsTest.java\nindex 09555e2..1cd37f4 100644\n--- a/guava-tests/test/com/google/common/collect/MapsTest.java\n+++ b/guava-tests/test/com/google/common/collect/MapsTest.java\n@@ -983,7 +983,7 @@\n     }\n   }\n \n-  private static final BiMap<Integer, String> INT_TO_STRING_MAP =\n+  private static final ImmutableBiMap<Integer, String> INT_TO_STRING_MAP =\n       new ImmutableBiMap.Builder<Integer, String>()\n           .put(1, \"one\")\n           .put(2, \"two\")\n", "projectName": "google.guava", "bugLineNum": 986, "bugNodeStartChar": 37418, "bugNodeLength": 22, "fixLineNum": 986, "fixNodeStartChar": 37418, "fixNodeLength": 31, "sourceBeforeFix": "BiMap<Integer,String>", "sourceAfterFix": "ImmutableBiMap<Integer,String>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2162846b059a0aa4729eb6ba9cf6f6a8e73fa9be", "fixCommitParentSHA1": "5b4cd94406bc2ab1c6a1370e5650c8ee9ee64a70", "bugFilePath": "guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java\nindex c15963a..efd25c3 100644\n--- a/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java\n+++ b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java\n@@ -138,8 +138,7 @@\n     checkNatural(queue);\n   }\n \n-  private static final List<Integer> NUMBERS =\n-      ImmutableList.of(4, 8, 15, 16, 23, 42);\n+  private static final ImmutableList<Integer> NUMBERS = ImmutableList.of(4, 8, 15, 16, 23, 42);\n \n   public void testCreation_withContents() {\n     MinMaxPriorityQueue<Integer> queue = MinMaxPriorityQueue\n", "projectName": "google.guava", "bugLineNum": 141, "bugNodeStartChar": 4685, "bugNodeLength": 13, "fixLineNum": 141, "fixNodeStartChar": 4685, "fixNodeLength": 22, "sourceBeforeFix": "List<Integer>", "sourceAfterFix": "ImmutableList<Integer>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2203451442f390f6fb9aeea95a90f790d8a4a061", "fixCommitParentSHA1": "53e2de6e9cbb7fe686c3a28180770b884c02d1e3", "bugFilePath": "guava-tests/test/com/google/common/collect/MapsCollectionTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/MapsCollectionTest.java b/guava-tests/test/com/google/common/collect/MapsCollectionTest.java\nindex 3e232cf..4b72673 100644\n--- a/guava-tests/test/com/google/common/collect/MapsCollectionTest.java\n+++ b/guava-tests/test/com/google/common/collect/MapsCollectionTest.java\n@@ -565,7 +565,7 @@\n     }\n   };\n \n-  static final Map<String, String> ENTRIES_TO_FILTER =\n+  static final ImmutableMap<String, String> ENTRIES_TO_FILTER =\n       ImmutableMap.of(\"banana\", \"toast\", \"eggplant\", \"spam\");\n \n   static final Predicate<Entry<String, String>> NOT_NULL_ENTRY =\n", "projectName": "google.guava", "bugLineNum": 568, "bugNodeStartChar": 21340, "bugNodeLength": 19, "fixLineNum": 568, "fixNodeStartChar": 21340, "fixNodeLength": 28, "sourceBeforeFix": "Map<String,String>", "sourceAfterFix": "ImmutableMap<String,String>"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "fixCommitParentSHA1": "41becc60f5e1d8b121846c890478d39e6ec42979", "bugFilePath": "guava/src/com/google/common/graph/AbstractGraph.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractGraph.java b/guava/src/com/google/common/graph/AbstractGraph.java\nindex ebdcfc7..2d0900b 100644\n--- a/guava/src/com/google/common/graph/AbstractGraph.java\n+++ b/guava/src/com/google/common/graph/AbstractGraph.java\n@@ -90,7 +90,7 @@\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   @Override\n-  public boolean equals(@Nullable Object obj) {\n+  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }\n@@ -116,7 +116,7 @@\n   }\n \n   @Override\n-  public int hashCode() {\n+  public final int hashCode() {\n     return edgeValueMap().hashCode();\n   }\n \n", "projectName": "google.guava", "bugLineNum": 91, "bugNodeStartChar": 2994, "bugNodeLength": 627, "fixLineNum": 91, "fixNodeStartChar": 2994, "fixNodeLength": 633, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "fixCommitParentSHA1": "41becc60f5e1d8b121846c890478d39e6ec42979", "bugFilePath": "guava/src/com/google/common/graph/AbstractGraph.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractGraph.java b/guava/src/com/google/common/graph/AbstractGraph.java\nindex ebdcfc7..2d0900b 100644\n--- a/guava/src/com/google/common/graph/AbstractGraph.java\n+++ b/guava/src/com/google/common/graph/AbstractGraph.java\n@@ -90,7 +90,7 @@\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   @Override\n-  public boolean equals(@Nullable Object obj) {\n+  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }\n@@ -116,7 +116,7 @@\n   }\n \n   @Override\n-  public int hashCode() {\n+  public final int hashCode() {\n     return edgeValueMap().hashCode();\n   }\n \n", "projectName": "google.guava", "bugLineNum": 118, "bugNodeStartChar": 3625, "bugNodeLength": 77, "fixLineNum": 118, "fixNodeStartChar": 3625, "fixNodeLength": 83, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "fixCommitParentSHA1": "41becc60f5e1d8b121846c890478d39e6ec42979", "bugFilePath": "guava/src/com/google/common/graph/AbstractNetwork.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractNetwork.java b/guava/src/com/google/common/graph/AbstractNetwork.java\nindex eee49e6..a1110f5 100644\n--- a/guava/src/com/google/common/graph/AbstractNetwork.java\n+++ b/guava/src/com/google/common/graph/AbstractNetwork.java\n@@ -129,7 +129,7 @@\n   }\n \n   @Override\n-  public boolean equals(@Nullable Object obj) {\n+  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }\n@@ -154,7 +154,7 @@\n   }\n \n   @Override\n-  public int hashCode() {\n+  public final int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {\n", "projectName": "google.guava", "bugLineNum": 131, "bugNodeStartChar": 4028, "bugNodeLength": 528, "fixLineNum": 131, "fixNodeStartChar": 4028, "fixNodeLength": 534, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "fixCommitParentSHA1": "41becc60f5e1d8b121846c890478d39e6ec42979", "bugFilePath": "guava/src/com/google/common/graph/AbstractNetwork.java", "fixPatch": "diff --git a/guava/src/com/google/common/graph/AbstractNetwork.java b/guava/src/com/google/common/graph/AbstractNetwork.java\nindex eee49e6..a1110f5 100644\n--- a/guava/src/com/google/common/graph/AbstractNetwork.java\n+++ b/guava/src/com/google/common/graph/AbstractNetwork.java\n@@ -129,7 +129,7 @@\n   }\n \n   @Override\n-  public boolean equals(@Nullable Object obj) {\n+  public final boolean equals(@Nullable Object obj) {\n     if (obj == this) {\n       return true;\n     }\n@@ -154,7 +154,7 @@\n   }\n \n   @Override\n-  public int hashCode() {\n+  public final int hashCode() {\n     Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {\n       @Override\n       public Set<E> apply(N node) {\n", "projectName": "google.guava", "bugLineNum": 156, "bugNodeStartChar": 4560, "bugNodeLength": 265, "fixLineNum": 156, "fixNodeStartChar": 4560, "fixNodeLength": 271, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "aa242aafb420e623c5f11ae9d952ec359246af43", "fixCommitParentSHA1": "133f276136fb59db96eddfe7a43886af6deeae23", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/TestThread.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/TestThread.java b/guava-tests/test/com/google/common/util/concurrent/TestThread.java\nindex 1a7c1a3..ac38a30 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/TestThread.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/TestThread.java\n@@ -53,7 +53,7 @@\n  */\n public final class TestThread<L> extends Thread implements TearDown {\n \n-  private static final long DUE_DILIGENCE_MILLIS = 50;\n+  private static final long DUE_DILIGENCE_MILLIS = 100;\n   private static final long TIMEOUT_MILLIS = 5000;\n \n   private final L lockLikeObject;\n", "projectName": "google.guava", "bugLineNum": 56, "bugNodeStartChar": 2375, "bugNodeLength": 25, "fixLineNum": 56, "fixNodeStartChar": 2375, "fixNodeLength": 26, "sourceBeforeFix": "DUE_DILIGENCE_MILLIS=50", "sourceAfterFix": "DUE_DILIGENCE_MILLIS=100"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "f506c13369d250027dfe9d5ee09695c839d64270", "fixCommitParentSHA1": "08127e3110bd7ea8e6eb84fccaed501455394f63", "bugFilePath": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java b/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java\nindex 810e539..0818e3b 100644\n--- a/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java\n+++ b/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java\n@@ -753,7 +753,7 @@\n    * including both lock and unlock attempts. Failure to do so can result in\n    * corrupting the acquireLocks set.\n    */\n-  private void lockStateChanged(CycleDetectingLock lock) {\n+  private static void lockStateChanged(CycleDetectingLock lock) {\n     if (!lock.isAcquiredByCurrentThread()) {\n       ArrayList<LockGraphNode> acquiredLockList = acquiredLocks.get();\n       LockGraphNode node = lock.getLockGraphNode();\n", "projectName": "google.guava", "bugLineNum": 750, "bugNodeStartChar": 29540, "bugNodeLength": 779, "fixLineNum": 750, "fixNodeStartChar": 29540, "fixNodeLength": 786, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "08127e3110bd7ea8e6eb84fccaed501455394f63", "fixCommitParentSHA1": "bd0ff5e4fdb97904fca84d57792fddc3f7d96862", "bugFilePath": "guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java", "fixPatch": "diff --git a/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java b/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java\nindex efb2e64..aaca5bb 100644\n--- a/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java\n+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java\n@@ -453,7 +453,7 @@\n     }\n   }\n \n-  private int totalSize(Iterable<? extends Entry<?>> entries) {\n+  private static int totalSize(Iterable<? extends Entry<?>> entries) {\n     int sum = 0;\n     for (Entry<?> entry : entries) {\n       sum += entry.getCount();\n", "projectName": "google.guava", "bugLineNum": 456, "bugNodeStartChar": 18860, "bugNodeLength": 172, "fixLineNum": 456, "fixNodeStartChar": 18860, "fixNodeLength": 179, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bd0ff5e4fdb97904fca84d57792fddc3f7d96862", "fixCommitParentSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "bugFilePath": "guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java", "fixPatch": "diff --git a/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java b/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java\nindex a8c7807..c14060b 100644\n--- a/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java\n+++ b/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java\n@@ -58,7 +58,7 @@\n     lockAndUnlock(factory.newReentrantLock(\"foo\"), reps);\n   }\n \n-  private void lockAndUnlock(Lock lock, int reps) {\n+  private static void lockAndUnlock(Lock lock, int reps) {\n     for (int i = 0; i < reps; i++) {\n       lock.lock();\n       lock.unlock();\n@@ -73,7 +73,7 @@\n     lockAndUnlockNested(detectingLocks, reps);\n   }\n \n-  private void lockAndUnlockNested(Lock[] locks, int reps) {\n+  private static void lockAndUnlockNested(Lock[] locks, int reps) {\n     for (int i = 0; i < reps; i++) {\n       for (int j = 0; j < locks.length; j++) {\n         locks[j].lock();\n", "projectName": "google.guava", "bugLineNum": 61, "bugNodeStartChar": 1858, "bugNodeLength": 136, "fixLineNum": 61, "fixNodeStartChar": 1858, "fixNodeLength": 143, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bd0ff5e4fdb97904fca84d57792fddc3f7d96862", "fixCommitParentSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "bugFilePath": "guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java", "fixPatch": "diff --git a/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java b/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java\nindex a8c7807..c14060b 100644\n--- a/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java\n+++ b/guava-tests/benchmark/com/google/common/util/concurrent/CycleDetectingLockFactoryBenchmark.java\n@@ -58,7 +58,7 @@\n     lockAndUnlock(factory.newReentrantLock(\"foo\"), reps);\n   }\n \n-  private void lockAndUnlock(Lock lock, int reps) {\n+  private static void lockAndUnlock(Lock lock, int reps) {\n     for (int i = 0; i < reps; i++) {\n       lock.lock();\n       lock.unlock();\n@@ -73,7 +73,7 @@\n     lockAndUnlockNested(detectingLocks, reps);\n   }\n \n-  private void lockAndUnlockNested(Lock[] locks, int reps) {\n+  private static void lockAndUnlockNested(Lock[] locks, int reps) {\n     for (int i = 0; i < reps; i++) {\n       for (int j = 0; j < locks.length; j++) {\n         locks[j].lock();\n", "projectName": "google.guava", "bugLineNum": 76, "bugNodeStartChar": 2203, "bugNodeLength": 272, "fixLineNum": 76, "fixNodeStartChar": 2203, "fixNodeLength": 279, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/base/CharMatcherTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/CharMatcherTest.java b/guava-tests/test/com/google/common/base/CharMatcherTest.java\nindex 228d91e..2e52a6e 100644\n--- a/guava-tests/test/com/google/common/base/CharMatcherTest.java\n+++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java\n@@ -198,7 +198,7 @@\n   }\n \n   @GwtIncompatible(\"NullPointerTester\")\n-  private void doTestNull(CharMatcher matcher) throws Exception {\n+  private static void doTestNull(CharMatcher matcher) throws Exception {\n     NullPointerTester tester = new NullPointerTester();\n     tester.testAllPublicInstanceMethods(matcher);\n   }\n", "projectName": "google.guava", "bugLineNum": 200, "bugNodeStartChar": 7065, "bugNodeLength": 213, "fixLineNum": 200, "fixNodeStartChar": 7065, "fixNodeLength": 220, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/cache/CacheEvictionTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/cache/CacheEvictionTest.java b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java\nindex 041a212..e70a5a5 100644\n--- a/guava-tests/test/com/google/common/cache/CacheEvictionTest.java\n+++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java\n@@ -411,7 +411,7 @@\n     assertThat(keySet).containsExactly(5, 6, 7, 8, 9, 10, 11, 12);\n   }\n \n-  private void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n+  private static void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n     for (int i : keys) {\n       cache.getUnchecked(i);\n     }\n", "projectName": "google.guava", "bugLineNum": 414, "bugNodeStartChar": 14906, "bugNodeLength": 143, "fixLineNum": 414, "fixNodeStartChar": 14906, "fixNodeLength": 150, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/cache/CacheExpirationTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/cache/CacheExpirationTest.java b/guava-tests/test/com/google/common/cache/CacheExpirationTest.java\nindex c2c221e..e0c53c6 100644\n--- a/guava-tests/test/com/google/common/cache/CacheExpirationTest.java\n+++ b/guava-tests/test/com/google/common/cache/CacheExpirationTest.java\n@@ -440,7 +440,7 @@\n     assertEquals(10, removalListener.getCount());\n   }\n \n-  private void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n+  private static void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n     for (int i : keys) {\n       cache.getUnchecked(i);\n     }\n", "projectName": "google.guava", "bugLineNum": 443, "bugNodeStartChar": 17184, "bugNodeLength": 143, "fixLineNum": 443, "fixNodeStartChar": 17184, "fixNodeLength": 150, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/cache/EmptyCachesTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/cache/EmptyCachesTest.java b/guava-tests/test/com/google/common/cache/EmptyCachesTest.java\nindex 994f236..38d5945 100644\n--- a/guava-tests/test/com/google/common/cache/EmptyCachesTest.java\n+++ b/guava-tests/test/com/google/common/cache/EmptyCachesTest.java\n@@ -379,7 +379,7 @@\n             DurationSpec.of(1, DAYS)));\n   }\n \n-  private void warmUp(LoadingCache<Object, Object> cache, int minimum, int maximum) {\n+  private static void warmUp(LoadingCache<Object, Object> cache, int minimum, int maximum) {\n     for (int i = minimum; i < maximum; i++) {\n       cache.getUnchecked(i);\n     }\n", "projectName": "google.guava", "bugLineNum": 382, "bugNodeStartChar": 11961, "bugNodeLength": 168, "fixLineNum": 382, "fixNodeStartChar": 11961, "fixNodeLength": 175, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java\nindex 756ba2a..01d5f0d 100644\n--- a/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java\n+++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java\n@@ -63,7 +63,7 @@\n         maker, computingFunction);\n   }\n \n-  private MapMaker createMapMaker() {\n+  private static MapMaker createMapMaker() {\n     MapMaker maker = new MapMaker();\n     maker.useCustomMap = true;\n     return maker;\n", "projectName": "google.guava", "bugLineNum": 66, "bugNodeStartChar": 2741, "bugNodeLength": 125, "fixLineNum": 66, "fixNodeStartChar": 2741, "fixNodeLength": 132, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java\nindex fa1ea97..9634d62 100644\n--- a/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java\n+++ b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java\n@@ -752,8 +752,8 @@\n     return seed;\n   }\n \n-  private void insertRandomly(ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q,\n-      Random random) {\n+  private static void insertRandomly(\n+      ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q, Random random) {\n     while (!elements.isEmpty()) {\n       int selectedIndex = random.nextInt(elements.size());\n       q.offer(elements.remove(selectedIndex));\n", "projectName": "google.guava", "bugLineNum": 755, "bugNodeStartChar": 27434, "bugNodeLength": 261, "fixLineNum": 755, "fixNodeStartChar": 27434, "fixNodeLength": 269, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/collect/TreeRangeMapTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java\nindex d1b77ab..a1fb21f 100644\n--- a/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java\n+++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java\n@@ -573,7 +573,7 @@\n     }\n   }\n \n-  private void putModel(Map<Integer, Integer> model, Range<Integer> range, int value) {\n+  private static void putModel(Map<Integer, Integer> model, Range<Integer> range, int value) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.put(i, value);\n@@ -581,7 +581,7 @@\n     }\n   }\n \n-  private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n+  private static void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);\n", "projectName": "google.guava", "bugLineNum": 576, "bugNodeStartChar": 20688, "bugNodeLength": 222, "fixLineNum": 576, "fixNodeStartChar": 20688, "fixNodeLength": 229, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/collect/TreeRangeMapTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java\nindex d1b77ab..a1fb21f 100644\n--- a/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java\n+++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java\n@@ -573,7 +573,7 @@\n     }\n   }\n \n-  private void putModel(Map<Integer, Integer> model, Range<Integer> range, int value) {\n+  private static void putModel(Map<Integer, Integer> model, Range<Integer> range, int value) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.put(i, value);\n@@ -581,7 +581,7 @@\n     }\n   }\n \n-  private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n+  private static void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);\n", "projectName": "google.guava", "bugLineNum": 584, "bugNodeStartChar": 20914, "bugNodeLength": 210, "fixLineNum": 584, "fixNodeStartChar": 20914, "fixNodeLength": 217, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java b/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java\nindex 36eccdf..4d901c8 100644\n--- a/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java\n+++ b/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java\n@@ -185,7 +185,7 @@\n     }\n   }\n \n-  private String escapeAsString(Escaper e, String s) {\n+  private static String escapeAsString(Escaper e, String s) {\n     return e.escape(s);\n   }\n }\n", "projectName": "google.guava", "bugLineNum": 188, "bugNodeStartChar": 6018, "bugNodeLength": 80, "fixLineNum": 188, "fixNodeStartChar": 6018, "fixNodeLength": 87, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "fixCommitParentSHA1": "37b5f69eecee2350f765ed1d613914e78f514e9a", "bugFilePath": "guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java\nindex f5c5ff0..41b9c84 100644\n--- a/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java\n+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java\n@@ -605,7 +605,7 @@\n     executor.shutdown();\n   }\n \n-  private int awaitUnchecked(final CyclicBarrier barrier) {\n+  private static int awaitUnchecked(final CyclicBarrier barrier) {\n     try {\n       return barrier.await();\n     } catch (Exception e) {\n", "projectName": "google.guava", "bugLineNum": 608, "bugNodeStartChar": 22506, "bugNodeLength": 172, "fixLineNum": 608, "fixNodeStartChar": 22506, "fixNodeLength": 179, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0f19a0653a3fcf208f1722528d362f5eadfb4dc9", "fixCommitParentSHA1": "87caee69fa9a53850ea31a8dd8287e2dacd2083f", "bugFilePath": "guava/src/com/google/common/util/concurrent/Futures.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Futures.java b/guava/src/com/google/common/util/concurrent/Futures.java\nindex 554ce58..effddda 100644\n--- a/guava/src/com/google/common/util/concurrent/Futures.java\n+++ b/guava/src/com/google/common/util/concurrent/Futures.java\n@@ -580,9 +580,11 @@\n    * @param time when to timeout the future\n    * @param unit the time unit of the time parameter\n    * @param scheduledExecutor The executor service to enforce the timeout.\n+   *\n+   * @since 19.0\n    */\n   @GwtIncompatible(\"java.util.concurrent.ScheduledExecutorService\")\n-  static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n+  public static <V> ListenableFuture<V> withTimeout(ListenableFuture<V> delegate,\n       long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {\n     TimeoutFuture<V> result = new TimeoutFuture<V>(delegate);\n     TimeoutFuture.Fire<V> fire = new TimeoutFuture.Fire<V>(result);\n", "projectName": "google.guava", "bugLineNum": 572, "bugNodeStartChar": 21665, "bugNodeLength": 991, "fixLineNum": 572, "fixNodeStartChar": 21665, "fixNodeLength": 998, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "d6ddbb7981b9e5b5c07231f8895bcda133019c63", "fixCommitParentSHA1": "ab9fa8fd1d22e3bf5d345ac2d464e973b664b757", "bugFilePath": "guava/src/com/google/common/util/concurrent/Futures.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Futures.java b/guava/src/com/google/common/util/concurrent/Futures.java\nindex 9987593..2334773 100644\n--- a/guava/src/com/google/common/util/concurrent/Futures.java\n+++ b/guava/src/com/google/common/util/concurrent/Futures.java\n@@ -851,7 +851,7 @@\n       if (super.cancel(mayInterruptIfRunning)) {\n         ListenableFuture<? extends I> localInputFuture = inputFuture;\n         if (localInputFuture != null) {\n-          inputFuture.cancel(mayInterruptIfRunning);\n+          localInputFuture.cancel(mayInterruptIfRunning);\n         }\n         return true;\n       }\n", "projectName": "google.guava", "bugLineNum": 854, "bugNodeStartChar": 33121, "bugNodeLength": 41, "fixLineNum": 854, "fixNodeStartChar": 33121, "fixNodeLength": 46, "sourceBeforeFix": "inputFuture.cancel(mayInterruptIfRunning)", "sourceAfterFix": "localInputFuture.cancel(mayInterruptIfRunning)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d6ddbb7981b9e5b5c07231f8895bcda133019c63", "fixCommitParentSHA1": "ab9fa8fd1d22e3bf5d345ac2d464e973b664b757", "bugFilePath": "guava/src/com/google/common/util/concurrent/Futures.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/Futures.java b/guava/src/com/google/common/util/concurrent/Futures.java\nindex 9987593..2334773 100644\n--- a/guava/src/com/google/common/util/concurrent/Futures.java\n+++ b/guava/src/com/google/common/util/concurrent/Futures.java\n@@ -851,7 +851,7 @@\n       if (super.cancel(mayInterruptIfRunning)) {\n         ListenableFuture<? extends I> localInputFuture = inputFuture;\n         if (localInputFuture != null) {\n-          inputFuture.cancel(mayInterruptIfRunning);\n+          localInputFuture.cancel(mayInterruptIfRunning);\n         }\n         return true;\n       }\n", "projectName": "google.guava", "bugLineNum": 854, "bugNodeStartChar": 33121, "bugNodeLength": 41, "fixLineNum": 854, "fixNodeStartChar": 33121, "fixNodeLength": 46, "sourceBeforeFix": "inputFuture.cancel(mayInterruptIfRunning)", "sourceAfterFix": "localInputFuture.cancel(mayInterruptIfRunning)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "544b57a25702ee58b9b87c3673b8748352a429e3", "fixCommitParentSHA1": "95f7a46fe582c870be38b3bc6d4a1bf9938593f3", "bugFilePath": "guava/src/com/google/common/collect/ImmutableMap.java", "fixPatch": "diff --git a/guava/src/com/google/common/collect/ImmutableMap.java b/guava/src/com/google/common/collect/ImmutableMap.java\nindex 52f5477..8a8c771 100644\n--- a/guava/src/com/google/common/collect/ImmutableMap.java\n+++ b/guava/src/com/google/common/collect/ImmutableMap.java\n@@ -301,7 +301,7 @@\n   }\n \n   private static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(\n-      Map<K, ? extends V> original) {\n+      EnumMap<K, ? extends V> original) {\n     EnumMap<K, V> copy = new EnumMap<K, V>(original);\n     for (Map.Entry<?, ?> entry : copy.entrySet()) {\n       checkEntryNotNull(entry.getKey(), entry.getValue());\n", "projectName": "google.guava", "bugLineNum": 304, "bugNodeStartChar": 10978, "bugNodeLength": 19, "fixLineNum": 304, "fixNodeStartChar": 10978, "fixNodeLength": 23, "sourceBeforeFix": "Map<K,? extends V>", "sourceAfterFix": "EnumMap<K,? extends V>"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "cdcc5397439b2e7441180a4712d7163afa451a6d", "fixCommitParentSHA1": "14d8ae4015e5e686f45d428c7e1879e689f818ff", "bugFilePath": "guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java", "fixPatch": "diff --git a/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java b/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java\nindex 344e374..491fe08 100644\n--- a/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java\n+++ b/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java\n@@ -214,7 +214,7 @@\n   private static TesterRequirements buildTesterRequirements(\n       Annotation testerAnnotation)\n       throws ConflictingRequirementsException {\n-    Class<? extends Annotation> annotationClass = testerAnnotation.getClass();\n+    Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();\n     final Feature<?>[] presentFeatures;\n     final Feature<?>[] absentFeatures;\n     try {\n", "projectName": "google.guava", "bugLineNum": 217, "bugNodeStartChar": 8211, "bugNodeLength": 27, "fixLineNum": 217, "fixNodeStartChar": 8211, "fixNodeLength": 33, "sourceBeforeFix": "testerAnnotation.getClass()", "sourceAfterFix": "testerAnnotation.annotationType()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cdcc5397439b2e7441180a4712d7163afa451a6d", "fixCommitParentSHA1": "14d8ae4015e5e686f45d428c7e1879e689f818ff", "bugFilePath": "guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java", "fixPatch": "diff --git a/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java b/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java\nindex 344e374..491fe08 100644\n--- a/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java\n+++ b/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java\n@@ -214,7 +214,7 @@\n   private static TesterRequirements buildTesterRequirements(\n       Annotation testerAnnotation)\n       throws ConflictingRequirementsException {\n-    Class<? extends Annotation> annotationClass = testerAnnotation.getClass();\n+    Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();\n     final Feature<?>[] presentFeatures;\n     final Feature<?>[] absentFeatures;\n     try {\n", "projectName": "google.guava", "bugLineNum": 217, "bugNodeStartChar": 8211, "bugNodeLength": 27, "fixLineNum": 217, "fixNodeStartChar": 8211, "fixNodeLength": 33, "sourceBeforeFix": "testerAnnotation.getClass()", "sourceAfterFix": "testerAnnotation.annotationType()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3446741f88956b40e904c766242c2075b1ea3b7f", "fixCommitParentSHA1": "3ee51a718ae9905c4643029ca3728081fb99b6e6", "bugFilePath": "guava/src/com/google/common/util/concurrent/RateLimiter.java", "fixPatch": "diff --git a/guava/src/com/google/common/util/concurrent/RateLimiter.java b/guava/src/com/google/common/util/concurrent/RateLimiter.java\nindex eb4ef4e..bba3a84 100644\n--- a/guava/src/com/google/common/util/concurrent/RateLimiter.java\n+++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java\n@@ -248,6 +248,10 @@\n     return create(SleepingStopwatch.createFromSystemTimer(), permitsPerSecond);\n   }\n \n+  /*\n+   * TODO(cpovirk): make SleepingStopwatch the last parameter throughout the class so that the\n+   * overloads follow the usual convention: Foo(int), Foo(int, SleepingStopwatch)\n+   */\n   @VisibleForTesting\n   static RateLimiter create(SleepingStopwatch stopwatch, double permitsPerSecond) {\n     RateLimiter rateLimiter = new SmoothBursty(stopwatch, 1.0 /* maxBurstSeconds */);\n@@ -490,7 +494,7 @@\n     return true;\n   }\n \n-  private final boolean canAcquire(long nowMicros, long timeoutMicros) {\n+  private boolean canAcquire(long nowMicros, long timeoutMicros) {\n     return earliestAvailable(nowMicros) - timeoutMicros <= nowMicros;\n   }\n \n", "projectName": "google.guava", "bugLineNum": 493, "bugNodeStartChar": 23968, "bugNodeLength": 144, "fixLineNum": 493, "fixNodeStartChar": 23968, "fixNodeLength": 138, "sourceBeforeFix": "18", "sourceAfterFix": "2"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b321e8aadca131d89c08bc5e4fc8ee76ac302933", "fixCommitParentSHA1": "f38aa29944527b56013694ab4751f99abca463af", "bugFilePath": "guava/src/com/google/common/net/MediaType.java", "fixPatch": "diff --git a/guava/src/com/google/common/net/MediaType.java b/guava/src/com/google/common/net/MediaType.java\nindex 0a2957d..754482b 100644\n--- a/guava/src/com/google/common/net/MediaType.java\n+++ b/guava/src/com/google/common/net/MediaType.java\n@@ -615,7 +615,7 @@\n       }\n       return create(type, subtype, parameters.build());\n     } catch (IllegalStateException e) {\n-      throw new IllegalArgumentException(e);\n+      throw new IllegalArgumentException(\"Could not parse '\" + input + \"'\", e);\n     }\n   }\n \n", "projectName": "google.guava", "bugLineNum": 618, "bugNodeStartChar": 29315, "bugNodeLength": 31, "fixLineNum": 618, "fixNodeStartChar": 29315, "fixNodeLength": 66, "sourceBeforeFix": "new IllegalArgumentException(e)", "sourceAfterFix": "new IllegalArgumentException(\"Could not parse '\" + input + \"'\",e)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "3a534d35b632476ca1a01520005a63914168d24c", "fixCommitParentSHA1": "c2a4be676394146b6416bea267d13c38d36fed8d", "bugFilePath": "guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java", "fixPatch": "diff --git a/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java b/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\nindex 1e7bbfa..1f4eb6b 100644\n--- a/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\n+++ b/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\n@@ -29,7 +29,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n@@ -55,7 +55,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n@@ -81,7 +81,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n", "projectName": "google.guava", "bugLineNum": 32, "bugNodeStartChar": 1191, "bugNodeLength": 15, "fixLineNum": 32, "fixNodeStartChar": 1191, "fixNodeLength": 15, "sourceBeforeFix": "failure != null", "sourceAfterFix": "failure == null"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "3a534d35b632476ca1a01520005a63914168d24c", "fixCommitParentSHA1": "c2a4be676394146b6416bea267d13c38d36fed8d", "bugFilePath": "guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java", "fixPatch": "diff --git a/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java b/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\nindex 1e7bbfa..1f4eb6b 100644\n--- a/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\n+++ b/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\n@@ -29,7 +29,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n@@ -55,7 +55,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n@@ -81,7 +81,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n", "projectName": "google.guava", "bugLineNum": 58, "bugNodeStartChar": 1795, "bugNodeLength": 15, "fixLineNum": 58, "fixNodeStartChar": 1795, "fixNodeLength": 15, "sourceBeforeFix": "failure != null", "sourceAfterFix": "failure == null"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "3a534d35b632476ca1a01520005a63914168d24c", "fixCommitParentSHA1": "c2a4be676394146b6416bea267d13c38d36fed8d", "bugFilePath": "guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java", "fixPatch": "diff --git a/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java b/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\nindex 1e7bbfa..1f4eb6b 100644\n--- a/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\n+++ b/guava-gwt/test/com/google/common/testing/TearDownStackTest_gwt.java\n@@ -29,7 +29,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n@@ -55,7 +55,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n@@ -81,7 +81,7 @@\n   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n-    if (failure != null) {\n+    if (failure == null) {\n       failure = t;\n     }\n   }\n", "projectName": "google.guava", "bugLineNum": 84, "bugNodeStartChar": 2403, "bugNodeLength": 15, "fixLineNum": 84, "fixNodeStartChar": 2403, "fixNodeLength": 15, "sourceBeforeFix": "failure != null", "sourceAfterFix": "failure == null"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 40, "bugNodeStartChar": 1367, "bugNodeLength": 210, "fixLineNum": 40, "fixNodeStartChar": 1367, "fixNodeLength": 217, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 243, "bugNodeStartChar": 9058, "bugNodeLength": 338, "fixLineNum": 243, "fixNodeStartChar": 9058, "fixNodeLength": 352, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 249, "bugNodeStartChar": 9400, "bugNodeLength": 483, "fixLineNum": 249, "fixNodeStartChar": 9400, "fixNodeLength": 497, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 261, "bugNodeStartChar": 9887, "bugNodeLength": 176, "fixLineNum": 261, "fixNodeStartChar": 9887, "fixNodeLength": 183, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 266, "bugNodeStartChar": 10067, "bugNodeLength": 292, "fixLineNum": 266, "fixNodeStartChar": 10067, "fixNodeLength": 299, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 276, "bugNodeStartChar": 10363, "bugNodeLength": 292, "fixLineNum": 276, "fixNodeStartChar": 10363, "fixNodeLength": 299, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\nindex 9278e70..cbfa51f 100644\n--- a/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-gwt/test-super/com/google/common/io/super/com/google/common/io/BaseEncodingTest.java\n@@ -37,7 +37,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -237,16 +237,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -258,14 +260,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -273,9 +276,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -283,7 +287,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n", "projectName": "google.guava", "bugLineNum": 286, "bugNodeStartChar": 10659, "bugNodeLength": 413, "fixLineNum": 286, "fixNodeStartChar": 10659, "fixNodeLength": 420, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 46, "bugNodeStartChar": 1564, "bugNodeLength": 210, "fixLineNum": 46, "fixNodeStartChar": 1564, "fixNodeLength": 217, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 309, "bugNodeStartChar": 12352, "bugNodeLength": 338, "fixLineNum": 309, "fixNodeStartChar": 12352, "fixNodeLength": 352, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 315, "bugNodeStartChar": 12694, "bugNodeLength": 483, "fixLineNum": 315, "fixNodeStartChar": 12694, "fixNodeLength": 497, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 327, "bugNodeStartChar": 13181, "bugNodeLength": 176, "fixLineNum": 327, "fixNodeStartChar": 13181, "fixNodeLength": 183, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 332, "bugNodeStartChar": 13361, "bugNodeLength": 292, "fixLineNum": 332, "fixNodeStartChar": 13361, "fixNodeLength": 299, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 342, "bugNodeStartChar": 13657, "bugNodeLength": 292, "fixLineNum": 342, "fixNodeStartChar": 13657, "fixNodeLength": 299, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 352, "bugNodeStartChar": 13953, "bugNodeLength": 413, "fixLineNum": 352, "fixNodeStartChar": 13953, "fixNodeLength": 420, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 367, "bugNodeStartChar": 14370, "bugNodeLength": 436, "fixLineNum": 367, "fixNodeStartChar": 14370, "fixNodeLength": 443, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 375, "bugNodeStartChar": 14810, "bugNodeLength": 572, "fixLineNum": 375, "fixNodeStartChar": 14810, "fixNodeLength": 579, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 389, "bugNodeStartChar": 15386, "bugNodeLength": 264, "fixLineNum": 389, "fixNodeStartChar": 15386, "fixNodeLength": 271, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 396, "bugNodeStartChar": 15654, "bugNodeLength": 524, "fixLineNum": 396, "fixNodeStartChar": 15654, "fixNodeLength": 531, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "fixCommitParentSHA1": "95466d0c4b6f4db596676de7fd9fc8004c8610c5", "bugFilePath": "guava-tests/test/com/google/common/io/BaseEncodingTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\nindex 563bd09..9580185 100644\n--- a/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n+++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java\n@@ -43,7 +43,7 @@\n  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n-  public void assertEquals(byte[] expected, byte[] actual) {\n+  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);\n@@ -303,16 +303,18 @@\n   }\n \n   public void testBase16UpperCaseIsNoOp() {\n-    assertSame(base16().upperCase(), base16().upperCase());\n+    assertSame(base16(), base16().upperCase());\n   }\n \n-  private void testEncodingWithCasing(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithCasing(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncodingWithSeparators(encoding, decoded, encoded);\n     testEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n     testEncodingWithSeparators(encoding.lowerCase(), decoded, Ascii.toLowerCase(encoded));\n   }\n \n-  private void testEncodingWithSeparators(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodingWithSeparators(\n+      BaseEncoding encoding, String decoded, String encoded) {\n     testEncoding(encoding, decoded, encoded);\n \n     // test separators work\n@@ -324,14 +326,15 @@\n     }\n   }\n \n-  private void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncoding(BaseEncoding encoding, String decoded, String encoded) {\n     testEncodes(encoding, decoded, encoded);\n     testDecodes(encoding, encoded, decoded);\n   }\n \n-  private void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n+  private static void testEncodes(BaseEncoding encoding, String decoded, String encoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -339,9 +342,10 @@\n     assertEquals(encoded, encoding.encode(bytes));\n   }\n \n-  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n+  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -349,7 +353,7 @@\n     assertEquals(bytes, encoding.decode(encoded));\n   }\n \n-  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n+  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");\n@@ -365,7 +369,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithCasing(\n+  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));\n@@ -373,7 +377,7 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncodingWithSeparators(\n+  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);\n \n@@ -387,17 +391,18 @@\n   }\n \n   @GwtIncompatible(\"Reader/Writer\")\n-  private void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncoding(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     testStreamingEncodes(encoding, decoded, encoded);\n     testStreamingDecodes(encoding, encoded, decoded);\n   }\n \n   @GwtIncompatible(\"Writer\")\n-  private void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n+  private static void testStreamingEncodes(BaseEncoding encoding, String decoded, String encoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n@@ -410,10 +415,11 @@\n   }\n \n   @GwtIncompatible(\"Reader\")\n-  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n+  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n+      // GWT does not support String.getBytes(Charset)\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();\n", "projectName": "google.guava", "bugLineNum": 412, "bugNodeStartChar": 16182, "bugNodeLength": 573, "fixLineNum": 412, "fixNodeStartChar": 16182, "fixNodeLength": 580, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "313f93c8c4ec073158317473dfbfb2aff29b1d65", "fixCommitParentSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "bugFilePath": "guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java", "fixPatch": "diff --git a/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java b/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java\nindex 0caba86..f651052 100644\n--- a/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java\n+++ b/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java\n@@ -35,7 +35,7 @@\n     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n       // here is where you would do something\n-      total += s.elapsedTime(TimeUnit.NANOSECONDS);\n+      total += s.elapsed(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }\n", "projectName": "google.guava", "bugLineNum": 38, "bugNodeStartChar": 1283, "bugNodeLength": 35, "fixLineNum": 38, "fixNodeStartChar": 1283, "fixNodeLength": 31, "sourceBeforeFix": "s.elapsedTime(TimeUnit.NANOSECONDS)", "sourceAfterFix": "s.elapsed(TimeUnit.NANOSECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "313f93c8c4ec073158317473dfbfb2aff29b1d65", "fixCommitParentSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "bugFilePath": "guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java", "fixPatch": "diff --git a/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java b/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java\nindex 0caba86..f651052 100644\n--- a/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java\n+++ b/guava-tests/benchmark/com/google/common/base/StopwatchBenchmark.java\n@@ -35,7 +35,7 @@\n     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n       // here is where you would do something\n-      total += s.elapsedTime(TimeUnit.NANOSECONDS);\n+      total += s.elapsed(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }\n", "projectName": "google.guava", "bugLineNum": 38, "bugNodeStartChar": 1283, "bugNodeLength": 35, "fixLineNum": 38, "fixNodeStartChar": 1283, "fixNodeLength": 31, "sourceBeforeFix": "s.elapsedTime(TimeUnit.NANOSECONDS)", "sourceAfterFix": "s.elapsed(TimeUnit.NANOSECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 163, "bugNodeStartChar": 4330, "bugNodeLength": 25, "fixLineNum": 163, "fixNodeStartChar": 4330, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 165, "bugNodeStartChar": 4401, "bugNodeLength": 25, "fixLineNum": 165, "fixNodeStartChar": 4401, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 171, "bugNodeStartChar": 4556, "bugNodeLength": 25, "fixLineNum": 171, "fixNodeStartChar": 4556, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 174, "bugNodeStartChar": 4638, "bugNodeLength": 25, "fixLineNum": 174, "fixNodeStartChar": 4638, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 183, "bugNodeStartChar": 4870, "bugNodeLength": 25, "fixLineNum": 183, "fixNodeStartChar": 4870, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 194, "bugNodeStartChar": 5105, "bugNodeLength": 25, "fixLineNum": 194, "fixNodeStartChar": 5105, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 196, "bugNodeStartChar": 5184, "bugNodeLength": 25, "fixLineNum": 196, "fixNodeStartChar": 5184, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "fixCommitParentSHA1": "fd6e6dc5922fcbf058911c6b72e21bf8c9c4ed50", "bugFilePath": "guava-tests/test/com/google/common/base/StopwatchTest.java", "fixPatch": "diff --git a/guava-tests/test/com/google/common/base/StopwatchTest.java b/guava-tests/test/com/google/common/base/StopwatchTest.java\nindex eb3436c..da4f15b 100644\n--- a/guava-tests/test/com/google/common/base/StopwatchTest.java\n+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java\n@@ -160,18 +160,18 @@\n   public void testElapsedMillis() {\n     stopwatch.start();\n     ticker.advance(999999);\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(1);\n-    assertEquals(1, stopwatch.elapsedMillis());\n+    assertEquals(1, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_whileRunning() {\n     ticker.advance(78000000);\n     stopwatch.start();\n-    assertEquals(0, stopwatch.elapsedMillis());\n+    assertEquals(0, stopwatch.elapsed(MILLISECONDS));\n \n     ticker.advance(345000000);\n-    assertEquals(345, stopwatch.elapsedMillis());\n+    assertEquals(345, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_notRunning() {\n@@ -180,7 +180,7 @@\n     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n-    assertEquals(4, stopwatch.elapsedMillis());\n+    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   public void testElapsedMillis_multipleSegments() {\n@@ -191,13 +191,13 @@\n     ticker.advance(16000000);\n \n     stopwatch.start();\n-    assertEquals(9, stopwatch.elapsedMillis());\n+    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n \n     stopwatch.stop();\n     ticker.advance(36000000);\n-    assertEquals(34, stopwatch.elapsedMillis());\n+    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n \n   @GwtIncompatible(\"String.format()\")\n", "projectName": "google.guava", "bugLineNum": 200, "bugNodeStartChar": 5286, "bugNodeLength": 25, "fixLineNum": 200, "fixNodeStartChar": 5286, "fixNodeLength": 31, "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "556976f81c236be7798e5d065a0dae09ca0cc1d3", "fixCommitParentSHA1": "6fcf6088fd78018dadc61536f149027247055598", "bugFilePath": "guava-testlib/src/com/google/common/testing/NullPointerTester.java", "fixPatch": "diff --git a/guava-testlib/src/com/google/common/testing/NullPointerTester.java b/guava-testlib/src/com/google/common/testing/NullPointerTester.java\nindex 3f7028a..1142056 100644\n--- a/guava-testlib/src/com/google/common/testing/NullPointerTester.java\n+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java\n@@ -292,7 +292,7 @@\n     for (int i = 0; i < types.length; i++) {\n       if (i != indexOfParamToSetToNull) {\n         params[i] = defaults.get(types[i]);\n-        if (!parameterIsPrimitiveOrNullable(func, indexOfParamToSetToNull)) {\n+        if (!parameterIsPrimitiveOrNullable(func, i)) {\n           Assert.assertTrue(\"No default value found for \" + types[i].getName(),\n               params[i] != null);\n         }\n", "projectName": "google.guava", "bugLineNum": 295, "bugNodeStartChar": 10514, "bugNodeLength": 61, "fixLineNum": 295, "fixNodeStartChar": 10514, "fixNodeLength": 39, "sourceBeforeFix": "parameterIsPrimitiveOrNullable(func,indexOfParamToSetToNull)", "sourceAfterFix": "parameterIsPrimitiveOrNullable(func,i)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53921947d568c284669a95de482579ffe40f329e", "fixCommitParentSHA1": "64f16597f629142dcefc2b914089a22000511802", "bugFilePath": "guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java", "fixPatch": "diff --git a/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java\nindex f9158a3..1299a62 100644\n--- a/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java\n+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java\n@@ -1060,7 +1060,7 @@\n    * @since 11.0\n    */\n   @Beta\n-  public static <T> UnmodifiableIterable<T> mergeSorted(\n+  public static <T> Iterable<T> mergeSorted(\n       final Iterable<? extends Iterable<? extends T>> iterables,\n       final Comparator<? super T> comparator) {\n     checkNotNull(iterables, \"iterables\");\n", "projectName": "google.guava", "bugLineNum": 1063, "bugNodeStartChar": 37667, "bugNodeLength": 23, "fixLineNum": 1063, "fixNodeStartChar": 37667, "fixNodeLength": 11, "sourceBeforeFix": "UnmodifiableIterable<T>", "sourceAfterFix": "Iterable<T>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "53921947d568c284669a95de482579ffe40f329e", "fixCommitParentSHA1": "64f16597f629142dcefc2b914089a22000511802", "bugFilePath": "guava/src/com/google/common/collect/Iterables.java", "fixPatch": "diff --git a/guava/src/com/google/common/collect/Iterables.java b/guava/src/com/google/common/collect/Iterables.java\nindex 55d6fd9..a92c2b2 100644\n--- a/guava/src/com/google/common/collect/Iterables.java\n+++ b/guava/src/com/google/common/collect/Iterables.java\n@@ -1102,7 +1102,7 @@\n    * @since 11.0\n    */\n   @Beta\n-  public static <T> UnmodifiableIterable<T> mergeSorted(\n+  public static <T> Iterable<T> mergeSorted(\n       final Iterable<? extends Iterable<? extends T>> iterables,\n       final Comparator<? super T> comparator) {\n     checkNotNull(iterables, \"iterables\");\n", "projectName": "google.guava", "bugLineNum": 1105, "bugNodeStartChar": 39217, "bugNodeLength": 23, "fixLineNum": 1105, "fixNodeStartChar": 39217, "fixNodeLength": 11, "sourceBeforeFix": "UnmodifiableIterable<T>", "sourceAfterFix": "Iterable<T>"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ad3640c6eec0ccac230a0f9c96b343aa025b89bb", "fixCommitParentSHA1": "f6c76b737c31bbd6089fa9f78fa5cb640c105192", "bugFilePath": "guava/src/com/google/common/net/HostAndPort.java", "fixPatch": "diff --git a/guava/src/com/google/common/net/HostAndPort.java b/guava/src/com/google/common/net/HostAndPort.java\nindex 55ff871..a8d0844 100644\n--- a/guava/src/com/google/common/net/HostAndPort.java\n+++ b/guava/src/com/google/common/net/HostAndPort.java\n@@ -63,7 +63,7 @@\n   private final String host;\n \n   /** Validated port number in the range [0..65535], or NO_PORT */\n-  private int port;\n+  private final int port;\n \n   /** True if the parsed host has colons, but no surrounding brackets. */\n   private final boolean hasBracketlessColons;\n", "projectName": "google.guava", "bugLineNum": 65, "bugNodeStartChar": 2108, "bugNodeLength": 84, "fixLineNum": 65, "fixNodeStartChar": 2108, "fixNodeLength": 90, "sourceBeforeFix": "2", "sourceAfterFix": "18"}]