[{"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7e33296532b5abed5911bf283cac299b155ea2d6", "fixCommitParentSHA1": "4b80533b39039137521af463f68f352437d45503", "bugFilePath": "community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java", "fixPatch": "diff --git a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\nindex 2632ac2..343190e 100644\n--- a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n+++ b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n@@ -91,11 +91,11 @@\n                     }\n                     if ( rng.nextDouble() < 0.1 )\n                     {\n-                        file.flush();\n+                        file.flushAndForce();\n                     }\n                     else if ( rng.nextBoolean() )\n                     {\n-                        cache.flush();\n+                        cache.flushAndForce();\n                     }\n                 }\n                 catch ( Throwable ignore )\n", "projectName": "neo4j.neo4j", "bugLineNum": 94, "bugNodeStartChar": 4167, "bugNodeLength": 12, "fixLineNum": 94, "fixNodeStartChar": 4167, "fixNodeLength": 20, "sourceBeforeFix": "file.flush()", "sourceAfterFix": "file.flushAndForce()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7e33296532b5abed5911bf283cac299b155ea2d6", "fixCommitParentSHA1": "4b80533b39039137521af463f68f352437d45503", "bugFilePath": "community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java", "fixPatch": "diff --git a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\nindex 2632ac2..343190e 100644\n--- a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n+++ b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n@@ -91,11 +91,11 @@\n                     }\n                     if ( rng.nextDouble() < 0.1 )\n                     {\n-                        file.flush();\n+                        file.flushAndForce();\n                     }\n                     else if ( rng.nextBoolean() )\n                     {\n-                        cache.flush();\n+                        cache.flushAndForce();\n                     }\n                 }\n                 catch ( Throwable ignore )\n", "projectName": "neo4j.neo4j", "bugLineNum": 94, "bugNodeStartChar": 4167, "bugNodeLength": 12, "fixLineNum": 94, "fixNodeStartChar": 4167, "fixNodeLength": 20, "sourceBeforeFix": "file.flush()", "sourceAfterFix": "file.flushAndForce()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "7e33296532b5abed5911bf283cac299b155ea2d6", "fixCommitParentSHA1": "4b80533b39039137521af463f68f352437d45503", "bugFilePath": "community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java", "fixPatch": "diff --git a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\nindex 2632ac2..343190e 100644\n--- a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n+++ b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n@@ -91,11 +91,11 @@\n                     }\n                     if ( rng.nextDouble() < 0.1 )\n                     {\n-                        file.flush();\n+                        file.flushAndForce();\n                     }\n                     else if ( rng.nextBoolean() )\n                     {\n-                        cache.flush();\n+                        cache.flushAndForce();\n                     }\n                 }\n                 catch ( Throwable ignore )\n", "projectName": "neo4j.neo4j", "bugLineNum": 98, "bugNodeStartChar": 4299, "bugNodeLength": 13, "fixLineNum": 98, "fixNodeStartChar": 4299, "fixNodeLength": 21, "sourceBeforeFix": "cache.flush()", "sourceAfterFix": "cache.flushAndForce()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7e33296532b5abed5911bf283cac299b155ea2d6", "fixCommitParentSHA1": "4b80533b39039137521af463f68f352437d45503", "bugFilePath": "community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java", "fixPatch": "diff --git a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\nindex 2632ac2..343190e 100644\n--- a/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n+++ b/community/io/src/test/java/org/neo4j/test/LinearHistoryPageCacheTracerTest.java\n@@ -91,11 +91,11 @@\n                     }\n                     if ( rng.nextDouble() < 0.1 )\n                     {\n-                        file.flush();\n+                        file.flushAndForce();\n                     }\n                     else if ( rng.nextBoolean() )\n                     {\n-                        cache.flush();\n+                        cache.flushAndForce();\n                     }\n                 }\n                 catch ( Throwable ignore )\n", "projectName": "neo4j.neo4j", "bugLineNum": 98, "bugNodeStartChar": 4299, "bugNodeLength": 13, "fixLineNum": 98, "fixNodeStartChar": 4299, "fixNodeLength": 21, "sourceBeforeFix": "cache.flush()", "sourceAfterFix": "cache.flushAndForce()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "51dd6b7a8bcbd82502782e8ccfdb4c88fb83b535", "fixCommitParentSHA1": "702aae3605ae69f34f8a43090e968123eef63c8b", "bugFilePath": "community/kernel/src/test/java/org/neo4j/kernel/impl/api/KernelStatementTest.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/KernelStatementTest.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/KernelStatementTest.java\nindex e97e243..0af8236 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/KernelStatementTest.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/KernelStatementTest.java\n@@ -89,7 +89,7 @@\n         KernelStatement statement =\n                 new KernelStatement(\n                         mock( KernelTransactionImplementation.class ),\n-                        mock( IndexReaderFactory.class ), scanStore, null, null, null, null );\n+                        mock( IndexReaderFactory.class ), scanStore, null, null, null );\n \n         statement.acquire();\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 90, "bugNodeStartChar": 3161, "bugNodeLength": 185, "fixLineNum": 90, "fixNodeStartChar": 3161, "fixNodeLength": 179, "sourceBeforeFix": "new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null,null)", "sourceAfterFix": "new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "54e74976040f09efb4a645107f6963ddc5b344ec", "fixCommitParentSHA1": "c9e7abd40e3537647d0f4548bfc75378ca535d74", "bugFilePath": "community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java", "fixPatch": "diff --git a/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java b/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java\nindex b72efff..4f39e1a 100644\n--- a/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java\n+++ b/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java\n@@ -37,7 +37,7 @@\n final class MuninnPagedFile implements PagedFile\n {\n     private static int stripeFactor = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 8 );\n+            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 10 );\n     static final int translationTableStripeLevel = 1 << stripeFactor;\n     static final int translationTableStripeMask = translationTableStripeLevel - 1;\n \n@@ -83,7 +83,7 @@\n         translationTableLocks = new StampedLock[translationTableStripeLevel];\n         for ( int i = 0; i < translationTableStripeLevel; i++ )\n         {\n-            translationTables[i] = Primitive.longObjectMap( 32 );\n+            translationTables[i] = Primitive.longObjectMap( 8 );\n             translationTableLocks[i] = new StampedLock();\n         }\n         PageEvictionCallback onEviction = new MuninnPageEvictionCallback(\n", "projectName": "neo4j.neo4j", "bugLineNum": 39, "bugNodeStartChar": 1533, "bugNodeLength": 102, "fixLineNum": 39, "fixNodeStartChar": 1533, "fixNodeLength": 103, "sourceBeforeFix": "Integer.getInteger(\"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\",8)", "sourceAfterFix": "Integer.getInteger(\"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\",10)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "54e74976040f09efb4a645107f6963ddc5b344ec", "fixCommitParentSHA1": "c9e7abd40e3537647d0f4548bfc75378ca535d74", "bugFilePath": "community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java", "fixPatch": "diff --git a/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java b/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java\nindex b72efff..4f39e1a 100644\n--- a/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java\n+++ b/community/io/src/main/java/org/neo4j/io/pagecache/impl/muninn/MuninnPagedFile.java\n@@ -37,7 +37,7 @@\n final class MuninnPagedFile implements PagedFile\n {\n     private static int stripeFactor = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 8 );\n+            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 10 );\n     static final int translationTableStripeLevel = 1 << stripeFactor;\n     static final int translationTableStripeMask = translationTableStripeLevel - 1;\n \n@@ -83,7 +83,7 @@\n         translationTableLocks = new StampedLock[translationTableStripeLevel];\n         for ( int i = 0; i < translationTableStripeLevel; i++ )\n         {\n-            translationTables[i] = Primitive.longObjectMap( 32 );\n+            translationTables[i] = Primitive.longObjectMap( 8 );\n             translationTableLocks[i] = new StampedLock();\n         }\n         PageEvictionCallback onEviction = new MuninnPageEvictionCallback(\n", "projectName": "neo4j.neo4j", "bugLineNum": 86, "bugNodeStartChar": 3482, "bugNodeLength": 29, "fixLineNum": 86, "fixNodeStartChar": 3482, "fixNodeLength": 28, "sourceBeforeFix": "Primitive.longObjectMap(32)", "sourceAfterFix": "Primitive.longObjectMap(8)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "46296923ac903da634d4789804c84e289ae91297", "fixCommitParentSHA1": "7143d84c82c1030cb2f35d7daa928d44cc7f92fc", "bugFilePath": "community/shell/src/test/java/org/neo4j/shell/TestApps.java", "fixPatch": "diff --git a/community/shell/src/test/java/org/neo4j/shell/TestApps.java b/community/shell/src/test/java/org/neo4j/shell/TestApps.java\nindex 6559fa2..2bbdf67 100644\n--- a/community/shell/src/test/java/org/neo4j/shell/TestApps.java\n+++ b/community/shell/src/test/java/org/neo4j/shell/TestApps.java\n@@ -955,7 +955,7 @@\n     @Test\n     public void shouldAllowExplainAsStartForACypherQuery() throws Exception\n     {\n-        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"DbHits\", \"No data returned\" );\n+        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"No data returned\" );\n     }\n \n     @Test\n", "projectName": "neo4j.neo4j", "bugLineNum": 958, "bugNodeStartChar": 34458, "bugNodeLength": 86, "fixLineNum": 958, "fixNodeStartChar": 34458, "fixNodeLength": 76, "sourceBeforeFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"DbHits\",\"No data returned\")", "sourceAfterFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"No data returned\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "7a66b10e5a608524f0d48911bd3b5165fc3a2d1d", "fixCommitParentSHA1": "7143d84c82c1030cb2f35d7daa928d44cc7f92fc", "bugFilePath": "community/shell/src/test/java/org/neo4j/shell/TestApps.java", "fixPatch": "diff --git a/community/shell/src/test/java/org/neo4j/shell/TestApps.java b/community/shell/src/test/java/org/neo4j/shell/TestApps.java\nindex 6559fa2..2bbdf67 100644\n--- a/community/shell/src/test/java/org/neo4j/shell/TestApps.java\n+++ b/community/shell/src/test/java/org/neo4j/shell/TestApps.java\n@@ -955,7 +955,7 @@\n     @Test\n     public void shouldAllowExplainAsStartForACypherQuery() throws Exception\n     {\n-        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"DbHits\", \"No data returned\" );\n+        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"No data returned\" );\n     }\n \n     @Test\n", "projectName": "neo4j.neo4j", "bugLineNum": 958, "bugNodeStartChar": 34458, "bugNodeLength": 86, "fixLineNum": 958, "fixNodeStartChar": 34458, "fixNodeLength": 76, "sourceBeforeFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"DbHits\",\"No data returned\")", "sourceAfterFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"No data returned\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "23efad96e074ea4d590b15eb16aa38c3f9daec5c", "fixCommitParentSHA1": "71aa3ed67d7d7bac1bf5b0a95a83dd84b3afb40a", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java\nindex 0c34101..f05d2ef 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java\n@@ -87,7 +87,7 @@\n             else if(container instanceof Relationship )\n             {\n                 statement.readOperations().acquireShared( ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() );\n-                return new CoreAPILock(stmtProvider, ResourceTypes.RELATIONSHIP, ((Node) container).getId())\n+                return new CoreAPILock( stmtProvider, ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() )\n                 {\n                     @Override\n                     void release( Statement statement, Locks.ResourceType type, long resourceId )\n", "projectName": "neo4j.neo4j", "bugLineNum": 90, "bugNodeStartChar": 3862, "bugNodeLength": 16, "fixLineNum": 90, "fixNodeStartChar": 3863, "fixNodeLength": 24, "sourceBeforeFix": "(Node)container", "sourceAfterFix": "(Relationship)container"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3490f93f11a790d91fb00ef945f697a6b74acd3a", "fixCommitParentSHA1": "4c12db0f87dadacce401b36e46430639d6a2df5d", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java\nindex 94b6d41..b51a192 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java\n@@ -56,7 +56,7 @@\n     }\n \n     @Override\n-    public void set( long number )\n+    public synchronized void set( long number )\n     {\n         highestGapFreeNumber = number;\n         outOfOrderQueue.clear();\n", "projectName": "neo4j.neo4j", "bugLineNum": 58, "bugNodeStartChar": 1839, "bugNodeLength": 128, "fixLineNum": 58, "fixNodeStartChar": 1839, "fixNodeLength": 141, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "1d9447027bdd9fec67c2ec286ac75e696d75287d", "fixCommitParentSHA1": "4c12db0f87dadacce401b36e46430639d6a2df5d", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java\nindex 94b6d41..b51a192 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/ArrayQueueOutOfOrderSequence.java\n@@ -56,7 +56,7 @@\n     }\n \n     @Override\n-    public void set( long number )\n+    public synchronized void set( long number )\n     {\n         highestGapFreeNumber = number;\n         outOfOrderQueue.clear();\n", "projectName": "neo4j.neo4j", "bugLineNum": 58, "bugNodeStartChar": 1839, "bugNodeLength": 128, "fixLineNum": 58, "fixNodeStartChar": 1839, "fixNodeLength": 141, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4b484774d8da196c30b41d0d20c0274276c94498", "fixCommitParentSHA1": "883675030a546e6335911e01d12bbc7f6fc30825", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\nindex 4aa4052..a9bc3f7 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n@@ -32,7 +32,7 @@\n \n     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n-        return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();\n+        return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();\n     }\n \n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )\n", "projectName": "neo4j.neo4j", "bugLineNum": 35, "bugNodeStartChar": 1200, "bugNodeLength": 34, "fixLineNum": 35, "fixNodeStartChar": 1200, "fixNodeLength": 41, "sourceBeforeFix": "newEmbeddedDatabaseBuilder(path)", "sourceAfterFix": "newHighlyAvailableDatabaseBuilder(path)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4b484774d8da196c30b41d0d20c0274276c94498", "fixCommitParentSHA1": "883675030a546e6335911e01d12bbc7f6fc30825", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\nindex 4aa4052..a9bc3f7 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n@@ -32,7 +32,7 @@\n \n     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n-        return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();\n+        return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();\n     }\n \n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )\n", "projectName": "neo4j.neo4j", "bugLineNum": 35, "bugNodeStartChar": 1200, "bugNodeLength": 34, "fixLineNum": 35, "fixNodeStartChar": 1200, "fixNodeLength": 41, "sourceBeforeFix": "newEmbeddedDatabaseBuilder(path)", "sourceAfterFix": "newHighlyAvailableDatabaseBuilder(path)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e18406f2f4ffdce1cbde05bb5c9555ad36159d39", "fixCommitParentSHA1": "07bf506458c8fd6b0c65043e5f9a8fe5099d9bac", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java\nindex c6532bd..816b011 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java\n@@ -182,7 +182,7 @@\n                 {\n                     cursor.setOffset( offset );\n                     recordIsInUse = isInUse( cursor.getByte() );\n-                } while ( cursor.retry() );\n+                } while ( cursor.shouldRetry() );\n             }\n             return recordIsInUse;\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 185, "bugNodeStartChar": 5594, "bugNodeLength": 14, "fixLineNum": 185, "fixNodeStartChar": 5594, "fixNodeLength": 20, "sourceBeforeFix": "cursor.retry()", "sourceAfterFix": "cursor.shouldRetry()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e18406f2f4ffdce1cbde05bb5c9555ad36159d39", "fixCommitParentSHA1": "07bf506458c8fd6b0c65043e5f9a8fe5099d9bac", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java\nindex c6532bd..816b011 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/RelationshipStore.java\n@@ -182,7 +182,7 @@\n                 {\n                     cursor.setOffset( offset );\n                     recordIsInUse = isInUse( cursor.getByte() );\n-                } while ( cursor.retry() );\n+                } while ( cursor.shouldRetry() );\n             }\n             return recordIsInUse;\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 185, "bugNodeStartChar": 5594, "bugNodeLength": 14, "fixLineNum": 185, "fixNodeStartChar": 5594, "fixNodeLength": 20, "sourceBeforeFix": "cursor.retry()", "sourceAfterFix": "cursor.shouldRetry()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ff8d30b39320046077e8411e7940c038df26bc42", "fixCommitParentSHA1": "654f55bcc810901a7c76762f79e1e5f670f5afdb", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\nindex 4aa4052..a9bc3f7 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n@@ -32,7 +32,7 @@\n \n     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n-        return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();\n+        return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();\n     }\n \n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )\n", "projectName": "neo4j.neo4j", "bugLineNum": 35, "bugNodeStartChar": 1200, "bugNodeLength": 34, "fixLineNum": 35, "fixNodeStartChar": 1200, "fixNodeLength": 41, "sourceBeforeFix": "newEmbeddedDatabaseBuilder(path)", "sourceAfterFix": "newHighlyAvailableDatabaseBuilder(path)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ff8d30b39320046077e8411e7940c038df26bc42", "fixCommitParentSHA1": "654f55bcc810901a7c76762f79e1e5f670f5afdb", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\nindex 4aa4052..a9bc3f7 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/graphdb/factory/HighlyAvailableGraphDatabaseFactory.java\n@@ -32,7 +32,7 @@\n \n     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n-        return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();\n+        return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();\n     }\n \n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )\n", "projectName": "neo4j.neo4j", "bugLineNum": 35, "bugNodeStartChar": 1200, "bugNodeLength": 34, "fixLineNum": 35, "fixNodeStartChar": 1200, "fixNodeLength": 41, "sourceBeforeFix": "newEmbeddedDatabaseBuilder(path)", "sourceAfterFix": "newHighlyAvailableDatabaseBuilder(path)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "e293e1bb9dca26cdcb503294fcada906f809c403", "fixCommitParentSHA1": "f70aa38a5f019bf1c7a2bcad97e4a041ad5f2544", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java\nindex 2960941..98951e7 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java\n@@ -30,6 +30,10 @@\n import org.neo4j.kernel.impl.util.StringLogger;\n import org.neo4j.kernel.logging.Logging;\n \n+/**\n+ * Used on the master to verify that slaves are using the same logical database as the master is running. This is done\n+ * by verifying transaction checksums.\n+ */\n public class BranchDetectingTxVerifier implements TxChecksumVerifier\n {\n     private final StringLogger logger;\n@@ -55,14 +59,16 @@\n             \n             if ( !match )\n             {\n-                throw new BranchedDataException( stringify( txId, masterId, checksum ) +\n-                        \" doesn't match \" + readChecksum );\n+                throw new BranchedDataException(\n+                        \"The cluster contains two logically different versions of the database. \" +\n+                        \"This will be automatically resolved. Details: \" + stringify( txId, masterId, checksum ) +\n+                        \" does not match \" + readChecksum );\n             }\n         }\n         catch ( IOException e )\n         {\n             logger.logMessage( \"Couldn't verify checksum for \" + stringify( txId, masterId, checksum ), e );\n-            throw new BranchedDataException( e );\n+            throw new BranchedDataException( \"Unable to perform a mandatory sanity check due to an IO error.\", e );\n         }\n     }\n     \n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 2670, "bugNodeLength": 30, "fixLineNum": 65, "fixNodeStartChar": 2670, "fixNodeLength": 96, "sourceBeforeFix": "new BranchedDataException(e)", "sourceAfterFix": "new BranchedDataException(\"Unable to perform a mandatory sanity check due to an IO error.\",e)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1240380de604018b96aea02f057215bf6c96a14c", "fixCommitParentSHA1": "f70aa38a5f019bf1c7a2bcad97e4a041ad5f2544", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java\nindex 2960941..98951e7 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/BranchDetectingTxVerifier.java\n@@ -30,6 +30,10 @@\n import org.neo4j.kernel.impl.util.StringLogger;\n import org.neo4j.kernel.logging.Logging;\n \n+/**\n+ * Used on the master to verify that slaves are using the same logical database as the master is running. This is done\n+ * by verifying transaction checksums.\n+ */\n public class BranchDetectingTxVerifier implements TxChecksumVerifier\n {\n     private final StringLogger logger;\n@@ -55,14 +59,16 @@\n             \n             if ( !match )\n             {\n-                throw new BranchedDataException( stringify( txId, masterId, checksum ) +\n-                        \" doesn't match \" + readChecksum );\n+                throw new BranchedDataException(\n+                        \"The cluster contains two logically different versions of the database. \" +\n+                        \"This will be automatically resolved. Details: \" + stringify( txId, masterId, checksum ) +\n+                        \" does not match \" + readChecksum );\n             }\n         }\n         catch ( IOException e )\n         {\n             logger.logMessage( \"Couldn't verify checksum for \" + stringify( txId, masterId, checksum ), e );\n-            throw new BranchedDataException( e );\n+            throw new BranchedDataException( \"Unable to perform a mandatory sanity check due to an IO error.\", e );\n         }\n     }\n     \n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 2670, "bugNodeLength": 30, "fixLineNum": 65, "fixNodeStartChar": 2670, "fixNodeLength": 96, "sourceBeforeFix": "new BranchedDataException(e)", "sourceAfterFix": "new BranchedDataException(\"Unable to perform a mandatory sanity check due to an IO error.\",e)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "40b42074591383a3bda2daabe2646863f783fd47", "fixCommitParentSHA1": "b1aafc51a369a1662d9e4230716fd3501f5ec7bc", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java\nindex 0c34101..ee62fdb 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/coreapi/PropertyContainerLocker.java\n@@ -87,7 +87,7 @@\n             else if(container instanceof Relationship )\n             {\n                 statement.readOperations().acquireShared( ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() );\n-                return new CoreAPILock(stmtProvider, ResourceTypes.RELATIONSHIP, ((Node) container).getId())\n+                return new CoreAPILock(stmtProvider, ResourceTypes.RELATIONSHIP, ((Relationship) container).getId())\n                 {\n                     @Override\n                     void release( Statement statement, Locks.ResourceType type, long resourceId )\n", "projectName": "neo4j.neo4j", "bugLineNum": 90, "bugNodeStartChar": 3862, "bugNodeLength": 16, "fixLineNum": 90, "fixNodeStartChar": 3862, "fixNodeLength": 24, "sourceBeforeFix": "(Node)container", "sourceAfterFix": "(Relationship)container"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ef3d7718bdab734a36fa645a54e9fe6c5f328554", "fixCommitParentSHA1": "dbdfafe1a3e78a3bb1d5c654bb48161e1404fb53", "bugFilePath": "enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java", "fixPatch": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\nindex 28df4b4..8e9908e 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\n@@ -232,7 +232,7 @@\n                     return;\n                 }\n             }\n-            else if ( electorId.equals( lastElector ) && (version < electorVersion && version > 0)  )\n+            else if ( electorId.equals( lastElector ) && (version < electorVersion && version > 1) )\n             {\n                 getLogger( getClass() ).warn( \"Election result for role \" + roleName +\n                         \" received from elector instance \" + electorId + \" with version \" + version +\n", "projectName": "neo4j.neo4j", "bugLineNum": 235, "bugNodeStartChar": 8393, "bugNodeLength": 11, "fixLineNum": 235, "fixNodeStartChar": 8393, "fixNodeLength": 11, "sourceBeforeFix": "version > 0", "sourceAfterFix": "version > 1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "908f9202b6c597464683f0ba642d57d0deeb5c70", "fixCommitParentSHA1": "20f457f9c3aa3bef61c71b064451257292229654", "bugFilePath": "enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java", "fixPatch": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\nindex 8b0f6f0..ceeb353 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\n@@ -249,7 +249,7 @@\n                     return;\n                 }\n             }\n-            else if ( electorId.equals( lastElector ) && (version < electorVersion && version > 0) )\n+            else if ( electorId.equals( lastElector ) && (version < electorVersion && version > 1) )\n             {\n                 getLogger( getClass() ).warn( \"Election result for role \" + roleName +\n                         \" received from elector instance \" + electorId + \" with version \" + version +\n", "projectName": "neo4j.neo4j", "bugLineNum": 252, "bugNodeStartChar": 9329, "bugNodeLength": 11, "fixLineNum": 252, "fixNodeStartChar": 9329, "fixNodeLength": 11, "sourceBeforeFix": "version > 0", "sourceAfterFix": "version > 1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "222497864a3c8b5e27d0d269eecaf46e1e36fe4f", "fixCommitParentSHA1": "34f40f505eee6732a2e801c67d9123823fa6d593", "bugFilePath": "enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java", "fixPatch": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\nindex 8b0f6f0..ceeb353 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/context/ClusterContextImpl.java\n@@ -249,7 +249,7 @@\n                     return;\n                 }\n             }\n-            else if ( electorId.equals( lastElector ) && (version < electorVersion && version > 0) )\n+            else if ( electorId.equals( lastElector ) && (version < electorVersion && version > 1) )\n             {\n                 getLogger( getClass() ).warn( \"Election result for role \" + roleName +\n                         \" received from elector instance \" + electorId + \" with version \" + version +\n", "projectName": "neo4j.neo4j", "bugLineNum": 252, "bugNodeStartChar": 9329, "bugNodeLength": 11, "fixLineNum": 252, "fixNodeStartChar": 9329, "fixNodeLength": 11, "sourceBeforeFix": "version > 0", "sourceAfterFix": "version > 1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9c50b2d46f7ca1268a465be84e0fbac7a0874a35", "fixCommitParentSHA1": "3c4b4c1bba025f12d4864f169aaf29a616f4154f", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java\nindex d03e59a..e3a688b 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java\n@@ -129,13 +129,13 @@\n     @Override\n     public byte[] getGlobalTransactionId()\n     {\n-        return globalId.clone();\n+        return globalId;\n     }\n \n     @Override\n     public byte[] getBranchQualifier()\n     {\n-        return branchId.clone();\n+        return branchId;\n     }\n \n     @Override\n@@ -147,13 +147,13 @@\n     @Override\n     public boolean equals( Object o )\n     {\n-        if ( !(o instanceof Xid) )\n+        if ( !(o instanceof XidImpl) )\n         {\n             return false;\n         }\n         \n-        return Arrays.equals( globalId, ((Xid) o).getGlobalTransactionId() ) &&\n-               Arrays.equals( branchId, ((Xid) o).getBranchQualifier() );\n+        return Arrays.equals( globalId, ((XidImpl) o).globalId ) &&\n+               Arrays.equals( branchId, ((XidImpl) o).branchId );\n     }\n \n     private volatile int hashCode = 0;\n", "projectName": "neo4j.neo4j", "bugLineNum": 150, "bugNodeStartChar": 4290, "bugNodeLength": 16, "fixLineNum": 150, "fixNodeStartChar": 4290, "fixNodeLength": 20, "sourceBeforeFix": "o instanceof Xid", "sourceAfterFix": "o instanceof XidImpl"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "eba886aab5f1ca87407b53b7f3f65011caf981b3", "fixCommitParentSHA1": "8317c364c00dc111c8d86ac5d5c1a831ae146d73", "bugFilePath": "community/server/src/test/java/org/neo4j/server/rest/repr/PathRepresentationTest.java", "fixPatch": "diff --git a/community/server/src/test/java/org/neo4j/server/rest/repr/PathRepresentationTest.java b/community/server/src/test/java/org/neo4j/server/rest/repr/PathRepresentationTest.java\nindex c1092f9..1288cb3 100644\n--- a/community/server/src/test/java/org/neo4j/server/rest/repr/PathRepresentationTest.java\n+++ b/community/server/src/test/java/org/neo4j/server/rest/repr/PathRepresentationTest.java\n@@ -122,7 +122,7 @@\n \n         Relationship ab = relationship( 17, a, \"LOVES\", b );\n         Relationship cb = relationship( 18, c, \"HATES\", b );\n-        Relationship cd = relationship( 18, c, \"KNOWS\", d );\n+        Relationship cd = relationship( 19, c, \"KNOWS\", d );\n \n         return new PathRepresentation<Path>(\n                 path( a, link( ab, b ), link( cb, c ), link( cd, d ) ));\n", "projectName": "neo4j.neo4j", "bugLineNum": 125, "bugNodeStartChar": 4121, "bugNodeLength": 33, "fixLineNum": 125, "fixNodeStartChar": 4121, "fixNodeLength": 33, "sourceBeforeFix": "relationship(18,c,\"KNOWS\",d)", "sourceAfterFix": "relationship(19,c,\"KNOWS\",d)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d96e22a2e18768e593761a4fdff2fb9194540d9b", "fixCommitParentSHA1": "d8ebc36a0fda8089e97333881c7c22db831a000d", "bugFilePath": "enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java", "fixPatch": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java\nindex 0d2975a..0ee636c 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java\n@@ -176,7 +176,7 @@\n                 .getOutgoing() ) );\n \n         context.getHeartbeatContext().addHeartbeatListener( new HeartbeatReelectionListener(\n-                server.newClient( Election.class ), logging.getMessagesLog( ClusterLeaveReelectionListener.class ) ) );\n+                server.newClient( Election.class ), logging.getMessagesLog( HeartbeatReelectionListener.class ) ) );\n         context.getClusterContext().addClusterListener( new ClusterLeaveReelectionListener( server.newClient(\n                 Election.class ),\n                 logging.getMessagesLog( ClusterLeaveReelectionListener.class )\n", "projectName": "neo4j.neo4j", "bugLineNum": 179, "bugNodeStartChar": 9598, "bugNodeLength": 36, "fixLineNum": 179, "fixNodeStartChar": 9598, "fixNodeLength": 33, "sourceBeforeFix": "ClusterLeaveReelectionListener.class", "sourceAfterFix": "HeartbeatReelectionListener.class"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e2283c8ee0b667ad14d017573c1a4da98dedfcac", "fixCommitParentSHA1": "7183fa0ae71d904b5fda0bbf44926b77bc8d567e", "bugFilePath": "community/udc/src/main/java/org/neo4j/ext/udc/impl/DefaultUdcInformationCollector.java", "fixPatch": "diff --git a/community/udc/src/main/java/org/neo4j/ext/udc/impl/DefaultUdcInformationCollector.java b/community/udc/src/main/java/org/neo4j/ext/udc/impl/DefaultUdcInformationCollector.java\nindex 376f9e5..7396a97 100644\n--- a/community/udc/src/main/java/org/neo4j/ext/udc/impl/DefaultUdcInformationCollector.java\n+++ b/community/udc/src/main/java/org/neo4j/ext/udc/impl/DefaultUdcInformationCollector.java\n@@ -114,7 +114,7 @@\n         }\n     }\n \n-    public String filterVersionForUDC( String version )\n+    public static String filterVersionForUDC( String version )\n     {\n         if ( !version.contains( \"+\" ) )\n         {\n", "projectName": "neo4j.neo4j", "bugLineNum": 117, "bugNodeStartChar": 4715, "bugNodeLength": 214, "fixLineNum": 117, "fixNodeStartChar": 4715, "fixNodeLength": 221, "sourceBeforeFix": "1", "sourceAfterFix": "9"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "61572af5c51afa3897afcf177bed5f8fa8dd5b4a", "fixCommitParentSHA1": "9079426036c5cf9f9953c1349717aeea8d21fed3", "bugFilePath": "community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java\nindex 14073cb..7e07ff8 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java\n@@ -34,7 +34,7 @@\n     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n-        final RagManager ragManager = new RagManager( tm );\n+        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );\n@@ -52,7 +52,7 @@\n     public void assertReadLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n-        final RagManager ragManager = new RagManager( tm );\n+        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );\n", "projectName": "neo4j.neo4j", "bugLineNum": 37, "bugNodeStartChar": 1271, "bugNodeLength": 20, "fixLineNum": 37, "fixNodeStartChar": 1271, "fixNodeLength": 16, "sourceBeforeFix": "new RagManager(tm)", "sourceAfterFix": "new RagManager()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "61572af5c51afa3897afcf177bed5f8fa8dd5b4a", "fixCommitParentSHA1": "9079426036c5cf9f9953c1349717aeea8d21fed3", "bugFilePath": "community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java\nindex 14073cb..7e07ff8 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/transaction/RWLockLeakTest.java\n@@ -34,7 +34,7 @@\n     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n-        final RagManager ragManager = new RagManager( tm );\n+        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );\n@@ -52,7 +52,7 @@\n     public void assertReadLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n-        final RagManager ragManager = new RagManager( tm );\n+        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );\n", "projectName": "neo4j.neo4j", "bugLineNum": 55, "bugNodeStartChar": 1923, "bugNodeLength": 20, "fixLineNum": 55, "fixNodeStartChar": 1923, "fixNodeLength": 16, "sourceBeforeFix": "new RagManager(tm)", "sourceAfterFix": "new RagManager()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "eb6bfa811045b748d4c3c2d2f2dd5dc4da3cce67", "fixCommitParentSHA1": "25711fabfb5082e055287300608c859824ae98e3", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java\nindex 6ccf855..0b4b5bc 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/XidImpl.java\n@@ -121,13 +121,13 @@\n     @Override\n     public byte[] getGlobalTransactionId()\n     {\n-        return globalId.clone();\n+        return globalId;\n     }\n \n     @Override\n     public byte[] getBranchQualifier()\n     {\n-        return branchId.clone();\n+        return branchId;\n     }\n \n     @Override\n@@ -139,13 +139,13 @@\n     @Override\n     public boolean equals( Object o )\n     {\n-        if ( !(o instanceof Xid) )\n+        if ( !(o instanceof XidImpl) )\n         {\n             return false;\n         }\n         \n-        return Arrays.equals( globalId, ((Xid) o).getGlobalTransactionId() ) &&\n-               Arrays.equals( branchId, ((Xid) o).getBranchQualifier() );\n+        return Arrays.equals( globalId, ((XidImpl) o).globalId ) &&\n+               Arrays.equals( branchId, ((XidImpl) o).branchId );\n     }\n \n     private volatile int hashCode = 0;\n", "projectName": "neo4j.neo4j", "bugLineNum": 142, "bugNodeStartChar": 4048, "bugNodeLength": 16, "fixLineNum": 142, "fixNodeStartChar": 4048, "fixNodeLength": 20, "sourceBeforeFix": "o instanceof Xid", "sourceAfterFix": "o instanceof XidImpl"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "cba20272ec6fa544cc1cf75fe20387c1bbe11f17", "fixCommitParentSHA1": "be786f2e63fc1466d25329503bbbe7d321adad16", "bugFilePath": "community/kernel/src/test/java/org/neo4j/kernel/impl/util/Neo4jJobSchedulerTest.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/util/Neo4jJobSchedulerTest.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/util/Neo4jJobSchedulerTest.java\nindex f548a8b..ae447fa 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/util/Neo4jJobSchedulerTest.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/util/Neo4jJobSchedulerTest.java\n@@ -86,7 +86,7 @@\n         scheduler = new Neo4jJobScheduler( StringLogger.DEV_NULL );\n \n         scheduler.start();\n-        scheduler.scheduleRecurring( indexPopulation, countInvocationsJob, 1, MILLISECONDS );\n+        scheduler.scheduleRecurring( indexPopulation, countInvocationsJob, 2, MILLISECONDS );\n \n         // When\n         scheduler.cancelRecurring( indexPopulation,  countInvocationsJob);\n", "projectName": "neo4j.neo4j", "bugLineNum": 89, "bugNodeStartChar": 2732, "bugNodeLength": 84, "fixLineNum": 89, "fixNodeStartChar": 2732, "fixNodeLength": 84, "sourceBeforeFix": "scheduler.scheduleRecurring(indexPopulation,countInvocationsJob,1,MILLISECONDS)", "sourceAfterFix": "scheduler.scheduleRecurring(indexPopulation,countInvocationsJob,2,MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e073ea8e8a6a7adbd245c9888f5d47e0f28eeb60", "fixCommitParentSHA1": "1a43b1c94781397f37de293ae23e869e531a5e0a", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java\nindex f380e54..162057f 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java\n@@ -254,7 +254,7 @@\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() + \"[populator:\" + populator + \", descriptor:\" + descriptor + \"]\";\n+        return getClass().getSimpleName() + \"[populator:\" + populator + \", descriptor:\" + indexUserDescription + \"]\";\n     }\n \n     public void awaitCompletion() throws InterruptedException\n", "projectName": "neo4j.neo4j", "bugLineNum": 257, "bugNodeStartChar": 9769, "bugNodeLength": 91, "fixLineNum": 257, "fixNodeStartChar": 9769, "fixNodeLength": 101, "sourceBeforeFix": "getClass().getSimpleName() + \"[populator:\" + populator+ \", descriptor:\"+ descriptor+ \"]\"", "sourceAfterFix": "getClass().getSimpleName() + \"[populator:\" + populator+ \", descriptor:\"+ indexUserDescription+ \"]\""}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d665948a146abc494f84ee16f9a1ba9af1b5f339", "fixCommitParentSHA1": "ec08facb2631f271696c1314c7597bf1d9d7f2a6", "bugFilePath": "community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java", "fixPatch": "diff --git a/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java b/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java\nindex ac4e8de..c9ae870 100644\n--- a/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java\n+++ b/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java\n@@ -171,7 +171,7 @@\n                     {\n                         throw new WebApplicationException( badRequest( e ) );\n                     }\n-                    throw new WebApplicationException( serverError( e ) );\n+                    throw new WebApplicationException( e, serverError( e ) );\n                 }\n                 finally\n                 {\n", "projectName": "neo4j.neo4j", "bugLineNum": 174, "bugNodeStartChar": 6429, "bugNodeLength": 47, "fixLineNum": 174, "fixNodeStartChar": 6429, "fixNodeLength": 50, "sourceBeforeFix": "new WebApplicationException(serverError(e))", "sourceAfterFix": "new WebApplicationException(e,serverError(e))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "fixCommitParentSHA1": "16c0e1023acdb2203feb8cbe98b781e1b9f18124", "bugFilePath": "enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java", "fixPatch": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java\nindex 5cb4db0..7dc4905 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/MultiPaxosServerFactory.java\n@@ -100,7 +100,7 @@\n \n         final MultiPaxosContext context = new MultiPaxosContext( me,\n                 Iterables.<ElectionRole,ElectionRole>iterable( new ElectionRole(ClusterConfiguration.COORDINATOR )),\n-                new ClusterConfiguration( initialConfig.getName(), logging.getMessagesLog( ClusterConfiguration.class ), initialConfig.getMemberURIs() ),executor, logging,\n+                new ClusterConfiguration( initialConfig.getName(), initialConfig.getMemberURIs() ),executor, logging,\n                 objectInputStreamFactory, objectOutputStreamFactory, acceptorInstanceStore, timeouts);\n \n         SnapshotContext snapshotContext = new SnapshotContext( context.getClusterContext(), context.getLearnerContext() );\n", "projectName": "neo4j.neo4j", "bugLineNum": 103, "bugNodeStartChar": 5238, "bugNodeLength": 136, "fixLineNum": 103, "fixNodeStartChar": 5238, "fixNodeLength": 82, "sourceBeforeFix": "new ClusterConfiguration(initialConfig.getName(),logging.getMessagesLog(ClusterConfiguration.class),initialConfig.getMemberURIs())", "sourceAfterFix": "new ClusterConfiguration(initialConfig.getName(),initialConfig.getMemberURIs())"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "fixCommitParentSHA1": "16c0e1023acdb2203feb8cbe98b781e1b9f18124", "bugFilePath": "enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosContext.java", "fixPatch": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosContext.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosContext.java\nindex 3bca13b..2b21a20 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosContext.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosContext.java\n@@ -441,8 +441,7 @@\n         // Implementation\n         public void created( String name )\n         {\n-            configuration = new ClusterConfiguration( name, logging.getMessagesLog( ClusterConfiguration.class ),\n-                    Collections.singleton( boundAt ) );\n+            configuration = new ClusterConfiguration( name, Collections.singleton( boundAt ) );\n             joined();\n         }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 444, "bugNodeStartChar": 15632, "bugNodeLength": 140, "fixLineNum": 444, "fixNodeStartChar": 15632, "fixNodeLength": 66, "sourceBeforeFix": "new ClusterConfiguration(name,logging.getMessagesLog(ClusterConfiguration.class),Collections.singleton(boundAt))", "sourceAfterFix": "new ClusterConfiguration(name,Collections.singleton(boundAt))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "fixCommitParentSHA1": "16c0e1023acdb2203feb8cbe98b781e1b9f18124", "bugFilePath": "enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatContextTest.java", "fixPatch": "diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatContextTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatContextTest.java\nindex f7d0727..fb5e1f3 100644\n--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatContextTest.java\n+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatContextTest.java\n@@ -80,7 +80,7 @@\n         {\n             members.put( instanceIds[i], URI.create( initialHosts[i] ) );\n         }\n-        ClusterConfiguration config = new ClusterConfiguration( \"clusterName\", StringLogger.DEV_NULL, initialHosts );\n+        ClusterConfiguration config = new ClusterConfiguration( \"clusterName\", initialHosts );\n         config.setMembers( members );\n \n         context = mock( ClusterContext.class );\n", "projectName": "neo4j.neo4j", "bugLineNum": 83, "bugNodeStartChar": 3011, "bugNodeLength": 78, "fixLineNum": 83, "fixNodeStartChar": 3011, "fixNodeLength": 55, "sourceBeforeFix": "new ClusterConfiguration(\"clusterName\",StringLogger.DEV_NULL,initialHosts)", "sourceAfterFix": "new ClusterConfiguration(\"clusterName\",initialHosts)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "fixCommitParentSHA1": "16c0e1023acdb2203feb8cbe98b781e1b9f18124", "bugFilePath": "enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java", "fixPatch": "diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java\nindex f41bc41..0209f82 100644\n--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java\n+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java\n@@ -55,8 +55,7 @@\n         // Given\n         InstanceId instanceId = new InstanceId( 1 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\n-        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", StringLogger.DEV_NULL,\n-                                                                       \"cluster://1\", \"cluster://2\" );\n+        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", \"cluster://1\", \"cluster://2\" );\n         configuration.joined( instanceId, URI.create(\"cluster://1\" ) );\n         configuration.joined( new InstanceId( 2 ), URI.create(\"cluster://2\" ));\n \n@@ -88,8 +87,7 @@\n         InstanceId myId = new InstanceId( 1 );\n         InstanceId foreignId = new InstanceId( 3 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\n-        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", StringLogger.DEV_NULL,\n-                                                                      \"cluster://1\", \"cluster://2\" );\n+        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", \"cluster://1\", \"cluster://2\" );\n         configuration.joined( myId, URI.create(\"cluster://1\" ) );\n         configuration.joined( new InstanceId( 2 ), URI.create(\"cluster://2\" ));\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 58, "bugNodeStartChar": 2387, "bugNodeLength": 161, "fixLineNum": 58, "fixNodeStartChar": 2387, "fixNodeLength": 67, "sourceBeforeFix": "new ClusterConfiguration(\"whatever\",StringLogger.DEV_NULL,\"cluster://1\",\"cluster://2\")", "sourceAfterFix": "new ClusterConfiguration(\"whatever\",\"cluster://1\",\"cluster://2\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "fixCommitParentSHA1": "16c0e1023acdb2203feb8cbe98b781e1b9f18124", "bugFilePath": "enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java", "fixPatch": "diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java\nindex f41bc41..0209f82 100644\n--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java\n+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/heartbeat/HeartbeatStateTest.java\n@@ -55,8 +55,7 @@\n         // Given\n         InstanceId instanceId = new InstanceId( 1 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\n-        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", StringLogger.DEV_NULL,\n-                                                                       \"cluster://1\", \"cluster://2\" );\n+        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", \"cluster://1\", \"cluster://2\" );\n         configuration.joined( instanceId, URI.create(\"cluster://1\" ) );\n         configuration.joined( new InstanceId( 2 ), URI.create(\"cluster://2\" ));\n \n@@ -88,8 +87,7 @@\n         InstanceId myId = new InstanceId( 1 );\n         InstanceId foreignId = new InstanceId( 3 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\n-        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", StringLogger.DEV_NULL,\n-                                                                      \"cluster://1\", \"cluster://2\" );\n+        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", \"cluster://1\", \"cluster://2\" );\n         configuration.joined( myId, URI.create(\"cluster://1\" ) );\n         configuration.joined( new InstanceId( 2 ), URI.create(\"cluster://2\" ));\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 91, "bugNodeStartChar": 4212, "bugNodeLength": 160, "fixLineNum": 91, "fixNodeStartChar": 4212, "fixNodeLength": 67, "sourceBeforeFix": "new ClusterConfiguration(\"whatever\",StringLogger.DEV_NULL,\"cluster://1\",\"cluster://2\")", "sourceAfterFix": "new ClusterConfiguration(\"whatever\",\"cluster://1\",\"cluster://2\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "5b3668e005b11c89a6aa481325b1e661243b5eab", "fixCommitParentSHA1": "0ad204241f566684116cb816dc93eb2ebce838de", "bugFilePath": "community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java", "fixPatch": "diff --git a/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java b/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java\nindex ac4e8de..c9ae870 100644\n--- a/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java\n+++ b/community/server/src/main/java/org/neo4j/server/rest/repr/OutputFormat.java\n@@ -171,7 +171,7 @@\n                     {\n                         throw new WebApplicationException( badRequest( e ) );\n                     }\n-                    throw new WebApplicationException( serverError( e ) );\n+                    throw new WebApplicationException( e, serverError( e ) );\n                 }\n                 finally\n                 {\n", "projectName": "neo4j.neo4j", "bugLineNum": 174, "bugNodeStartChar": 6429, "bugNodeLength": 47, "fixLineNum": 174, "fixNodeStartChar": 6429, "fixNodeLength": 50, "sourceBeforeFix": "new WebApplicationException(serverError(e))", "sourceAfterFix": "new WebApplicationException(e,serverError(e))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "fd480244d5a5992eec4fada06e11e67d07494a7c", "fixCommitParentSHA1": "636b12440f155600eb0b781913f01db1ca252947", "bugFilePath": "enterprise/cluster/src/test/java/org/neo4j/cluster/com/message/NetworkSenderReceiverTest.java", "fixPatch": "diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/com/message/NetworkSenderReceiverTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/com/message/NetworkSenderReceiverTest.java\nindex a2875ac..531eb6a 100644\n--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/com/message/NetworkSenderReceiverTest.java\n+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/com/message/NetworkSenderReceiverTest.java\n@@ -124,7 +124,7 @@\n                     sem.release();\n                     return null;\n                 }\n-            } ).when( loggerMock ).warn( anyString(), any( Exception.class ) );\n+            } ).when( loggerMock ).warn( anyString() );\n \n             receiver = new NetworkReceiver( new NetworkReceiver.Configuration()\n             {\n", "projectName": "neo4j.neo4j", "bugLineNum": 119, "bugNodeStartChar": 4086, "bugNodeLength": 338, "fixLineNum": 119, "fixNodeStartChar": 4086, "fixNodeLength": 314, "sourceBeforeFix": "doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString(),any(Exception.class))", "sourceAfterFix": "doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString())"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "a00413fae93619b9d134ddf45b6a86393aea1d28", "fixCommitParentSHA1": "7efbd3623b45aa896589bada4c0976d0de1c10ad", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/IdType.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/IdType.java b/community/kernel/src/main/java/org/neo4j/kernel/IdType.java\nindex 7ff0237..039bec0 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/IdType.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/IdType.java\n@@ -33,7 +33,7 @@\n     LABEL_TOKEN( false ),\n     LABEL_TOKEN_NAME( false ),\n     NEOSTORE_BLOCK( false ),\n-    SCHEMA( 35, true ),\n+    SCHEMA( 35, false ),\n     NODE_LABELS( 35, true );\n \n     private final long max;\n", "projectName": "neo4j.neo4j", "bugLineNum": 36, "bugNodeStartChar": 1230, "bugNodeLength": 18, "fixLineNum": 36, "fixNodeStartChar": 1230, "fixNodeLength": 19, "sourceBeforeFix": "SCHEMA(35,true)", "sourceAfterFix": "SCHEMA(35,false)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2b60a488402df4ccb239e3f1d175675344b09f42", "fixCommitParentSHA1": "571a6ad8c1fdf85aa0b86d4a66f6074d44f7c561", "bugFilePath": "community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java b/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java\nindex 4b9854a..b5ff457 100644\n--- a/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java\n+++ b/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java\n@@ -180,8 +180,8 @@\n     @Description( \"Specifies at which file size the logical log will auto-rotate. \" +\n                   \"0 means that no rotation will automatically occur based on file size. \" +\n                   \"Default is 25M\" )\n-    public static final Setting<Long> logical_log_rotation_threshold = setting( \"logical_log_rotation_threshold\",\n-            Settings.LONG_WITH_OPTIONAL_UNIT, \"25M\" );\n+    public static final GraphDatabaseSetting<Long> logical_log_rotation_threshold = new NumberOfBytesSetting( setting(\n+            \"logical_log_rotation_threshold\", BYTES, \"25M\" ) );\n \n     @Description(\"Use a quick approach for rebuilding the ID generators. This give quicker recovery time, \" +\n             \"but will limit the ability to reuse the space of deleted entities.\")\n", "projectName": "neo4j.neo4j", "bugLineNum": 183, "bugNodeStartChar": 11768, "bugNodeLength": 13, "fixLineNum": 183, "fixNodeStartChar": 11768, "fixNodeLength": 26, "sourceBeforeFix": "Setting<Long>", "sourceAfterFix": "GraphDatabaseSetting<Long>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d90070235a803757a838074a19d7567494af418e", "fixCommitParentSHA1": "571a6ad8c1fdf85aa0b86d4a66f6074d44f7c561", "bugFilePath": "community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java b/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java\nindex 4b9854a..b5ff457 100644\n--- a/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java\n+++ b/community/kernel/src/main/java/org/neo4j/graphdb/factory/GraphDatabaseSettings.java\n@@ -180,8 +180,8 @@\n     @Description( \"Specifies at which file size the logical log will auto-rotate. \" +\n                   \"0 means that no rotation will automatically occur based on file size. \" +\n                   \"Default is 25M\" )\n-    public static final Setting<Long> logical_log_rotation_threshold = setting( \"logical_log_rotation_threshold\",\n-            Settings.LONG_WITH_OPTIONAL_UNIT, \"25M\" );\n+    public static final GraphDatabaseSetting<Long> logical_log_rotation_threshold = new NumberOfBytesSetting( setting(\n+            \"logical_log_rotation_threshold\", BYTES, \"25M\" ) );\n \n     @Description(\"Use a quick approach for rebuilding the ID generators. This give quicker recovery time, \" +\n             \"but will limit the ability to reuse the space of deleted entities.\")\n", "projectName": "neo4j.neo4j", "bugLineNum": 183, "bugNodeStartChar": 11768, "bugNodeLength": 13, "fixLineNum": 183, "fixNodeStartChar": 11768, "fixNodeLength": 26, "sourceBeforeFix": "Setting<Long>", "sourceAfterFix": "GraphDatabaseSetting<Long>"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a833d17370c44664f679109f475504a9d1c1177a", "fixCommitParentSHA1": "b6942168f188de7f6a2292af4730dfe53bd0696a", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/api/scan/LabelScanStoreProvider.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/scan/LabelScanStoreProvider.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/scan/LabelScanStoreProvider.java\nindex d9a6052..fdb09a7 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/scan/LabelScanStoreProvider.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/scan/LabelScanStoreProvider.java\n@@ -101,7 +101,7 @@\n         return getClass().getSimpleName() + \"[\" + labelScanStore + \", prio:\" + priority + \"]\";\n     }\n \n-    interface FullStoreChangeStream extends Iterable<NodeLabelUpdate>\n+    public interface FullStoreChangeStream extends Iterable<NodeLabelUpdate>\n     {\n         PrimitiveLongIterator labelIds();\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 104, "bugNodeStartChar": 4034, "bugNodeLength": 150, "fixLineNum": 104, "fixNodeStartChar": 4034, "fixNodeLength": 157, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "77ac46d3956f3231c8e50da43ceaa0b8ebdc0f1a", "fixCommitParentSHA1": "dfcb102c05c320d3e9ff40ae9c951f4261240458", "bugFilePath": "community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java", "fixPatch": "diff --git a/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java b/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java\nindex c322222..17f3ff9 100644\n--- a/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java\n+++ b/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java\n@@ -475,7 +475,7 @@\n         // when\n         serializer.statementResult( mockExecutionResult(\n                 map( \"node\", node[0], \"rel\", rel[0], \"path\", path, \"map\", map( \"n1\", node[1], \"r1\", rel[1] ) )\n-        ), ResultDataContent.rest );\n+        ), false, ResultDataContent.rest );\n         serializer.finish();\n \n         // then\n", "projectName": "neo4j.neo4j", "bugLineNum": 476, "bugNodeStartChar": 20833, "bugNodeLength": 195, "fixLineNum": 476, "fixNodeStartChar": 20833, "fixNodeLength": 202, "sourceBeforeFix": "serializer.statementResult(mockExecutionResult(map(\"node\",node[0],\"rel\",rel[0],\"path\",path,\"map\",map(\"n1\",node[1],\"r1\",rel[1]))),ResultDataContent.rest)", "sourceAfterFix": "serializer.statementResult(mockExecutionResult(map(\"node\",node[0],\"rel\",rel[0],\"path\",path,\"map\",map(\"n1\",node[1],\"r1\",rel[1]))),false,ResultDataContent.rest)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "39e81c6df2ac7b3afb254e5c36446c7f42150bb0", "fixCommitParentSHA1": "a9a5715f7297a7deb78fa3d363bbb44217c7b5f3", "bugFilePath": "enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java", "fixPatch": "diff --git a/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java b/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java\nindex 15ce55e..6c64aa8 100644\n--- a/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java\n+++ b/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java\n@@ -71,7 +71,7 @@\n                 }\n                 catch ( Throwable failure )\n                 {\n-                    for ( Throwable cause = failure; cause != null; cause = failure.getCause() )\n+                    for ( Throwable cause = failure; cause != null; cause = cause.getCause() )\n                     {\n                         if ( cause instanceof ChannelException )\n                         {\n", "projectName": "neo4j.neo4j", "bugLineNum": 74, "bugNodeStartChar": 2342, "bugNodeLength": 18, "fixLineNum": 74, "fixNodeStartChar": 2342, "fixNodeLength": 16, "sourceBeforeFix": "failure.getCause()", "sourceAfterFix": "cause.getCause()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "39e81c6df2ac7b3afb254e5c36446c7f42150bb0", "fixCommitParentSHA1": "a9a5715f7297a7deb78fa3d363bbb44217c7b5f3", "bugFilePath": "enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java", "fixPatch": "diff --git a/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java b/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java\nindex 15ce55e..6c64aa8 100644\n--- a/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java\n+++ b/enterprise/server-enterprise/src/test/java/org/neo4j/server/enterprise/functional/DumpPortListenerOnNettyBindFailure.java\n@@ -71,7 +71,7 @@\n                 }\n                 catch ( Throwable failure )\n                 {\n-                    for ( Throwable cause = failure; cause != null; cause = failure.getCause() )\n+                    for ( Throwable cause = failure; cause != null; cause = cause.getCause() )\n                     {\n                         if ( cause instanceof ChannelException )\n                         {\n", "projectName": "neo4j.neo4j", "bugLineNum": 74, "bugNodeStartChar": 2342, "bugNodeLength": 18, "fixLineNum": 74, "fixNodeStartChar": 2342, "fixNodeLength": 16, "sourceBeforeFix": "failure.getCause()", "sourceAfterFix": "cause.getCause()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "051f6ab285eb21d16afeb87ed5bd9cfacfc67e47", "fixCommitParentSHA1": "b6501aac03cf70419e94b4cfc160695e4950914a", "bugFilePath": "community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java", "fixPatch": "diff --git a/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java b/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\nindex b48ef15..575e820 100644\n--- a/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\n+++ b/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\n@@ -73,7 +73,7 @@\n      */\n     public int getDeletedRelationships()\n     {\n-        return inner.deletedNodes();\n+        return inner.deletedRelationships();\n     }\n \n     /**\n", "projectName": "neo4j.neo4j", "bugLineNum": 76, "bugNodeStartChar": 2262, "bugNodeLength": 20, "fixLineNum": 76, "fixNodeStartChar": 2262, "fixNodeLength": 28, "sourceBeforeFix": "inner.deletedNodes()", "sourceAfterFix": "inner.deletedRelationships()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "051f6ab285eb21d16afeb87ed5bd9cfacfc67e47", "fixCommitParentSHA1": "b6501aac03cf70419e94b4cfc160695e4950914a", "bugFilePath": "community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java", "fixPatch": "diff --git a/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java b/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\nindex b48ef15..575e820 100644\n--- a/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\n+++ b/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\n@@ -73,7 +73,7 @@\n      */\n     public int getDeletedRelationships()\n     {\n-        return inner.deletedNodes();\n+        return inner.deletedRelationships();\n     }\n \n     /**\n", "projectName": "neo4j.neo4j", "bugLineNum": 76, "bugNodeStartChar": 2262, "bugNodeLength": 20, "fixLineNum": 76, "fixNodeStartChar": 2262, "fixNodeLength": 28, "sourceBeforeFix": "inner.deletedNodes()", "sourceAfterFix": "inner.deletedRelationships()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "fixCommitParentSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "bugFilePath": "community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java", "fixPatch": "diff --git a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\nindex b1a4bf9..dc200c9 100644\n--- a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n+++ b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n@@ -67,7 +67,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n \n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"\n@@ -90,7 +90,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query ).dumpToString() ) ) );\n         fw.close();\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 70, "bugNodeStartChar": 3268, "bugNodeLength": 35, "fixLineNum": 70, "fixNodeStartChar": 3268, "fixNodeLength": 39, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "fixCommitParentSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "bugFilePath": "community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java", "fixPatch": "diff --git a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\nindex b1a4bf9..dc200c9 100644\n--- a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n+++ b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n@@ -67,7 +67,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n \n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"\n@@ -90,7 +90,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query ).dumpToString() ) ) );\n         fw.close();\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 70, "bugNodeStartChar": 3268, "bugNodeLength": 35, "fixLineNum": 70, "fixNodeStartChar": 3268, "fixNodeLength": 39, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "fixCommitParentSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "bugFilePath": "community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java", "fixPatch": "diff --git a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\nindex b1a4bf9..dc200c9 100644\n--- a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n+++ b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n@@ -67,7 +67,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n \n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"\n@@ -90,7 +90,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query ).dumpToString() ) ) );\n         fw.close();\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 93, "bugNodeStartChar": 4611, "bugNodeLength": 34, "fixLineNum": 93, "fixNodeStartChar": 4611, "fixNodeLength": 38, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8cb66861957089a03000c71b66f1e66e8e66d4c1", "fixCommitParentSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "bugFilePath": "community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java", "fixPatch": "diff --git a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\nindex b1a4bf9..dc200c9 100644\n--- a/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n+++ b/community/cypher/src/test/java/org/neo4j/cypher/javacompat/IntroExamplesTest.java\n@@ -67,7 +67,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query  ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query  ).dumpToString() ) ) );\n \n         fw.append( \"\\nNext up we will add filtering to set more parts \"\n                    + \"in motion:\\n\\nIn this next example, we take a list of users \"\n@@ -90,7 +90,7 @@\n                 createCypherSnippet( query ) ) );\n         fw.append( \"\\nResulting in:\\n\\n\" );\n         fw.append( AsciiDocGenerator.dumpToSeparateFileWithType( new File(\"target/docs/dev/\"), \"intro.result\",\n-                createQueryResultSnippet( engine.execute( query ).toString() ) ) );\n+                createQueryResultSnippet( engine.execute( query ).dumpToString() ) ) );\n         fw.close();\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 93, "bugNodeStartChar": 4611, "bugNodeLength": 34, "fixLineNum": 93, "fixNodeStartChar": 4611, "fixNodeLength": 38, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java", "fixPatch": "diff --git a/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java b/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java\nindex 116be2a..25f3973 100644\n--- a/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java\n+++ b/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java\n@@ -562,7 +562,7 @@\n     String executeCypher( String cypher )\n     {\n         return engine.execute( cypher )\n-                .toString();\n+                .dumpToString();\n     }\n \n     String executeSql( String sql ) throws SQLException\n", "projectName": "neo4j.neo4j", "bugLineNum": 564, "bugNodeStartChar": 24201, "bugNodeLength": 52, "fixLineNum": 564, "fixNodeStartChar": 24201, "fixNodeLength": 56, "sourceBeforeFix": "engine.execute(cypher).toString()", "sourceAfterFix": "engine.execute(cypher).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java", "fixPatch": "diff --git a/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java b/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java\nindex 116be2a..25f3973 100644\n--- a/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java\n+++ b/community/embedded-examples/src/main/java/org/neo4j/examples/CypherSql.java\n@@ -562,7 +562,7 @@\n     String executeCypher( String cypher )\n     {\n         return engine.execute( cypher )\n-                .toString();\n+                .dumpToString();\n     }\n \n     String executeSql( String sql ) throws SQLException\n", "projectName": "neo4j.neo4j", "bugLineNum": 564, "bugNodeStartChar": 24201, "bugNodeLength": 52, "fixLineNum": 564, "fixNodeStartChar": 24201, "fixNodeLength": 56, "sourceBeforeFix": "engine.execute(cypher).toString()", "sourceAfterFix": "engine.execute(cypher).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\nindex 605b4dc..803178d 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n@@ -186,7 +186,7 @@\n         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );\n@@ -195,7 +195,7 @@\n         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );\n@@ -212,7 +212,7 @@\n         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );\n", "projectName": "neo4j.neo4j", "bugLineNum": 188, "bugNodeStartChar": 9223, "bugNodeLength": 51, "fixLineNum": 188, "fixNodeStartChar": 9223, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\nindex 605b4dc..803178d 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n@@ -186,7 +186,7 @@\n         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );\n@@ -195,7 +195,7 @@\n         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );\n@@ -212,7 +212,7 @@\n         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );\n", "projectName": "neo4j.neo4j", "bugLineNum": 188, "bugNodeStartChar": 9223, "bugNodeLength": 51, "fixLineNum": 188, "fixNodeStartChar": 9223, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\nindex 605b4dc..803178d 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n@@ -186,7 +186,7 @@\n         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );\n@@ -195,7 +195,7 @@\n         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );\n@@ -212,7 +212,7 @@\n         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );\n", "projectName": "neo4j.neo4j", "bugLineNum": 197, "bugNodeStartChar": 9685, "bugNodeLength": 51, "fixLineNum": 197, "fixNodeStartChar": 9685, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\nindex 605b4dc..803178d 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n@@ -186,7 +186,7 @@\n         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );\n@@ -195,7 +195,7 @@\n         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );\n@@ -212,7 +212,7 @@\n         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );\n", "projectName": "neo4j.neo4j", "bugLineNum": 197, "bugNodeStartChar": 9685, "bugNodeLength": 51, "fixLineNum": 197, "fixNodeStartChar": 9685, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\nindex 605b4dc..803178d 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n@@ -186,7 +186,7 @@\n         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );\n@@ -195,7 +195,7 @@\n         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );\n@@ -212,7 +212,7 @@\n         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );\n", "projectName": "neo4j.neo4j", "bugLineNum": 214, "bugNodeStartChar": 10483, "bugNodeLength": 51, "fixLineNum": 214, "fixNodeStartChar": 10483, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\nindex 605b4dc..803178d 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java\n@@ -186,7 +186,7 @@\n         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );\n@@ -195,7 +195,7 @@\n         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );\n@@ -212,7 +212,7 @@\n         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );\n", "projectName": "neo4j.neo4j", "bugLineNum": 214, "bugNodeStartChar": 10483, "bugNodeLength": 51, "fixLineNum": 214, "fixNodeStartChar": 10483, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 194, "bugNodeStartChar": 7376, "bugNodeLength": 51, "fixLineNum": 194, "fixNodeStartChar": 7376, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 194, "bugNodeStartChar": 7376, "bugNodeLength": 51, "fixLineNum": 194, "fixNodeStartChar": 7376, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 214, "bugNodeStartChar": 8413, "bugNodeLength": 51, "fixLineNum": 214, "fixNodeStartChar": 8413, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 214, "bugNodeStartChar": 8413, "bugNodeLength": 51, "fixLineNum": 214, "fixNodeStartChar": 8413, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 236, "bugNodeStartChar": 9494, "bugNodeLength": 51, "fixLineNum": 236, "fixNodeStartChar": 9494, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 236, "bugNodeStartChar": 9494, "bugNodeLength": 51, "fixLineNum": 236, "fixNodeStartChar": 9494, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 272, "bugNodeStartChar": 11154, "bugNodeLength": 51, "fixLineNum": 272, "fixNodeStartChar": 11154, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "fixCommitParentSHA1": "53e191bd7b603d8bdaf87cca863dfcfdc689721f", "bugFilePath": "community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java", "fixPatch": "diff --git a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\nindex e3b0364..ca3fc92 100644\n--- a/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n+++ b/community/embedded-examples/src/test/java/org/neo4j/examples/RolesTest.java\n@@ -192,7 +192,7 @@\n                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );\n         \n@@ -212,7 +212,7 @@\n                 + \") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name\";\n         gen.get().addSnippet( \"query-get-user-memberships\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-user-memberships\",\n@@ -234,7 +234,7 @@\n                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",\n@@ -270,7 +270,7 @@\n         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n-                .toString();\n+                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",\n", "projectName": "neo4j.neo4j", "bugLineNum": 272, "bugNodeStartChar": 11154, "bugNodeLength": 51, "fixLineNum": 272, "fixNodeStartChar": 11154, "fixNodeLength": 55, "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a77c4414675ac5ff9c3d8b9bcb12ac8866ca4cfc", "fixCommitParentSHA1": "6213cdaff539e5674f26c968c658d2a9ffc6e606", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java\nindex 6ca8218..27052ca 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java\n@@ -135,7 +135,7 @@\n     }\n \n     @Override\n-    public void start()\n+    public synchronized void start()\n             throws Throwable\n     {\n         openLog();\n@@ -174,7 +174,7 @@\n     }\n \n     @Override\n-    public void stop()\n+    public synchronized void stop()\n     {\n         recovered = false;\n         xaDataSourceManager.removeDataSourceRegistrationListener( dataSourceRegistrationListener );\n", "projectName": "neo4j.neo4j", "bugLineNum": 137, "bugNodeStartChar": 4706, "bugNodeLength": 312, "fixLineNum": 137, "fixNodeStartChar": 4706, "fixNodeLength": 325, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a77c4414675ac5ff9c3d8b9bcb12ac8866ca4cfc", "fixCommitParentSHA1": "6213cdaff539e5674f26c968c658d2a9ffc6e606", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java\nindex 6ca8218..27052ca 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxManager.java\n@@ -135,7 +135,7 @@\n     }\n \n     @Override\n-    public void start()\n+    public synchronized void start()\n             throws Throwable\n     {\n         openLog();\n@@ -174,7 +174,7 @@\n     }\n \n     @Override\n-    public void stop()\n+    public synchronized void stop()\n     {\n         recovered = false;\n         xaDataSourceManager.removeDataSourceRegistrationListener( dataSourceRegistrationListener );\n", "projectName": "neo4j.neo4j", "bugLineNum": 176, "bugNodeStartChar": 6050, "bugNodeLength": 191, "fixLineNum": 176, "fixNodeStartChar": 6050, "fixNodeLength": 204, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c110adcc03272be0534b4f89f20d8c6c83352232", "fixCommitParentSHA1": "2d05f8acc2a120441fea692617cf22c9f263a072", "bugFilePath": "enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java", "fixPatch": "diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java\nindex e7384a8..619f203 100644\n--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java\n+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java\n@@ -159,7 +159,7 @@\n \n         LoggerFactory.getLogger( getClass() ).info( \"Joined cluster - set data\" );\n \n-        for ( int i = 0; i < 10000; i++ )\n+        for ( int i = 0; i < 100; i++ )\n         {\n             map.put( \"foo\" + i, \"bar\" + i );\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 162, "bugNodeStartChar": 7412, "bugNodeLength": 9, "fixLineNum": 162, "fixNodeStartChar": 7412, "fixNodeLength": 7, "sourceBeforeFix": "i < 10000", "sourceAfterFix": "i < 100"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2d05f8acc2a120441fea692617cf22c9f263a072", "fixCommitParentSHA1": "42c220bc00666aeb1ab33168d56411b4a5a1ba9b", "bugFilePath": "enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java", "fixPatch": "diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java\nindex 619f203..e7384a8 100644\n--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java\n+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/MultiPaxosNetworkTest.java\n@@ -159,7 +159,7 @@\n \n         LoggerFactory.getLogger( getClass() ).info( \"Joined cluster - set data\" );\n \n-        for ( int i = 0; i < 100; i++ )\n+        for ( int i = 0; i < 10000; i++ )\n         {\n             map.put( \"foo\" + i, \"bar\" + i );\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 162, "bugNodeStartChar": 7412, "bugNodeLength": 7, "fixLineNum": 162, "fixNodeStartChar": 7412, "fixNodeLength": 9, "sourceBeforeFix": "i < 100", "sourceAfterFix": "i < 10000"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "daf23cecbdfa43733374fe5b4f07449ec0668521", "fixCommitParentSHA1": "59640321dc9716f33b8e5bad83390b6199ce898a", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/RagManager.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/RagManager.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/RagManager.java\nindex ba14a4e..c12d5d0 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/RagManager.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/RagManager.java\n@@ -181,7 +181,7 @@\n             {\n                 continue;\n             }\n-            graphStack.push( tx );\n+            graphStack.push( lockingTx );\n             checkWaitOnRecursive( lockingTx, tx, checkedTransactions,\n                 graphStack );\n             graphStack.pop();\n", "projectName": "neo4j.neo4j", "bugLineNum": 184, "bugNodeStartChar": 7466, "bugNodeLength": 21, "fixLineNum": 184, "fixNodeStartChar": 7466, "fixNodeLength": 28, "sourceBeforeFix": "graphStack.push(tx)", "sourceAfterFix": "graphStack.push(lockingTx)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "133868d87a8c53617a4868d9070c5901b919f25d", "fixCommitParentSHA1": "e3fa9e983e9cc5ddd25a3ffc4e1643a8f10e7ff0", "bugFilePath": "community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java", "fixPatch": "diff --git a/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java b/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java\nindex 192820c..785ab00 100644\n--- a/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java\n+++ b/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java\n@@ -197,7 +197,7 @@\n     {\n         TargetDirectory targetDirectory = TargetDirectory.forTest( this.getClass() );\n \n-        final File file = targetDirectory.directory( \"unwritable\" );\n+        final File file = targetDirectory.file( \"unwritable\" );\n         file.setWritable( false, false );\n \n         System.out.println( \"file = \" + file );\n", "projectName": "neo4j.neo4j", "bugLineNum": 200, "bugNodeStartChar": 7494, "bugNodeLength": 41, "fixLineNum": 200, "fixNodeStartChar": 7494, "fixNodeLength": 36, "sourceBeforeFix": "targetDirectory.directory(\"unwritable\")", "sourceAfterFix": "targetDirectory.file(\"unwritable\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "133868d87a8c53617a4868d9070c5901b919f25d", "fixCommitParentSHA1": "e3fa9e983e9cc5ddd25a3ffc4e1643a8f10e7ff0", "bugFilePath": "community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java", "fixPatch": "diff --git a/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java b/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java\nindex 192820c..785ab00 100644\n--- a/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java\n+++ b/community/server/src/functionaltest/java/org/neo4j/server/webadmin/logging/HTTPLoggingFunctionalTest.java\n@@ -197,7 +197,7 @@\n     {\n         TargetDirectory targetDirectory = TargetDirectory.forTest( this.getClass() );\n \n-        final File file = targetDirectory.directory( \"unwritable\" );\n+        final File file = targetDirectory.file( \"unwritable\" );\n         file.setWritable( false, false );\n \n         System.out.println( \"file = \" + file );\n", "projectName": "neo4j.neo4j", "bugLineNum": 200, "bugNodeStartChar": 7494, "bugNodeLength": 41, "fixLineNum": 200, "fixNodeStartChar": 7494, "fixNodeLength": 36, "sourceBeforeFix": "targetDirectory.directory(\"unwritable\")", "sourceAfterFix": "targetDirectory.file(\"unwritable\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ead7c5c75fd253dbeccc62673d180cc620b689c0", "fixCommitParentSHA1": "d185f7b3f6c08b43d6b57c0e0b0a163ad48a2950", "bugFilePath": "enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java", "fixPatch": "diff --git a/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\nindex 95ffc50..1f0500b 100644\n--- a/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n+++ b/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n@@ -569,7 +569,7 @@\n         } );\n         \n         DoubleLatch latch = latchFetcher.fetch();\n-        latch.countDownFirst();\n+        latch.awaitFirst(); // Wait for lockHolder to grab the lock\n         try\n         {\n             executeJob( new CommonJobs.SetNodePropertyWithThrowJob( otherNodeId.longValue(),\n", "projectName": "neo4j.neo4j", "bugLineNum": 572, "bugNodeStartChar": 21276, "bugNodeLength": 22, "fixLineNum": 572, "fixNodeStartChar": 21276, "fixNodeLength": 18, "sourceBeforeFix": "latch.countDownFirst()", "sourceAfterFix": "latch.awaitFirst()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ead7c5c75fd253dbeccc62673d180cc620b689c0", "fixCommitParentSHA1": "d185f7b3f6c08b43d6b57c0e0b0a163ad48a2950", "bugFilePath": "enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java", "fixPatch": "diff --git a/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\nindex 95ffc50..1f0500b 100644\n--- a/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n+++ b/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n@@ -569,7 +569,7 @@\n         } );\n         \n         DoubleLatch latch = latchFetcher.fetch();\n-        latch.countDownFirst();\n+        latch.awaitFirst(); // Wait for lockHolder to grab the lock\n         try\n         {\n             executeJob( new CommonJobs.SetNodePropertyWithThrowJob( otherNodeId.longValue(),\n", "projectName": "neo4j.neo4j", "bugLineNum": 572, "bugNodeStartChar": 21276, "bugNodeLength": 22, "fixLineNum": 572, "fixNodeStartChar": 21276, "fixNodeLength": 18, "sourceBeforeFix": "latch.countDownFirst()", "sourceAfterFix": "latch.awaitFirst()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "7db2869ff594f72df9727513287a0a018d7b9f9d", "fixCommitParentSHA1": "0540dc94d0342b9d7259b99cf6bab931e6d76c6f", "bugFilePath": "community/kernel/src/test/java/org/neo4j/helpers/TestFormat.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/helpers/TestFormat.java b/community/kernel/src/test/java/org/neo4j/helpers/TestFormat.java\nindex 3a9e9c8..7f6bc3e 100644\n--- a/community/kernel/src/test/java/org/neo4j/helpers/TestFormat.java\n+++ b/community/kernel/src/test/java/org/neo4j/helpers/TestFormat.java\n@@ -76,7 +76,7 @@\n \n     private long translateToDate( long timeWithDate, long time, TimeZone timeIsGivenInThisTimeZone )\n     {\n-        Calendar calendar = Calendar.getInstance();\n+        Calendar calendar = Calendar.getInstance(timeIsGivenInThisTimeZone);\n         calendar.setTimeInMillis( timeWithDate );\n         \n         Calendar timeCalendar = Calendar.getInstance();\n", "projectName": "neo4j.neo4j", "bugLineNum": 79, "bugNodeStartChar": 3197, "bugNodeLength": 22, "fixLineNum": 79, "fixNodeStartChar": 3197, "fixNodeLength": 47, "sourceBeforeFix": "Calendar.getInstance()", "sourceAfterFix": "Calendar.getInstance(timeIsGivenInThisTimeZone)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4a1a239acded779b0011ec7b342e2a8d1584f79f", "fixCommitParentSHA1": "27049180e2e4b690c35794837d5b18a78feb991d", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java\nindex 5be5ad8..72b571d 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java\n@@ -40,7 +40,7 @@\n  */\n public class MasterServer extends Server<Master, Void>\n {\n-    static final byte PROTOCOL_VERSION = 1;\n+    static final byte PROTOCOL_VERSION = 2;\n     \n     static final int FRAME_LENGTH = Protocol.DEFAULT_FRAME_LENGTH;\n     \n", "projectName": "neo4j.neo4j", "bugLineNum": 43, "bugNodeStartChar": 1509, "bugNodeLength": 20, "fixLineNum": 43, "fixNodeStartChar": 1509, "fixNodeLength": 20, "sourceBeforeFix": "PROTOCOL_VERSION=1", "sourceAfterFix": "PROTOCOL_VERSION=2"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c6fdb5ffb0bddea0463db6ef4a8277f632cfcc51", "fixCommitParentSHA1": "09d2d21f1ccc66b3ede1e5f6ca944f28e99eadb9", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/HAGraphDb.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/HAGraphDb.java b/enterprise/ha/src/main/java/org/neo4j/kernel/HAGraphDb.java\nindex 6608295..6bf6c1b 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/HAGraphDb.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/HAGraphDb.java\n@@ -427,7 +427,7 @@\n \n     private int getClientLockReadTimeoutFromConfig( Map<String, String> config )\n     {\n-        String value = config.get( CONFIG_KEY_READ_TIMEOUT );\n+        String value = config.get( CONFIG_KEY_LOCK_READ_TIMEOUT );\n         return value != null ? Integer.parseInt( value ) : getClientReadTimeoutFromConfig( config );\n     }\n     \n", "projectName": "neo4j.neo4j", "bugLineNum": 430, "bugNodeStartChar": 18049, "bugNodeLength": 37, "fixLineNum": 430, "fixNodeStartChar": 18049, "fixNodeLength": 42, "sourceBeforeFix": "config.get(CONFIG_KEY_READ_TIMEOUT)", "sourceAfterFix": "config.get(CONFIG_KEY_LOCK_READ_TIMEOUT)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "169a41db1ab014b0d2a10046055ab789c8c763bd", "fixCommitParentSHA1": "242577cb3c55a58c1ea1994cf50937fc0780379f", "bugFilePath": "community/server/src/main/java/org/neo4j/server/webadmin/console/GremlinSession.java", "fixPatch": "diff --git a/community/server/src/main/java/org/neo4j/server/webadmin/console/GremlinSession.java b/community/server/src/main/java/org/neo4j/server/webadmin/console/GremlinSession.java\nindex ef4afe3..6122cba 100644\n--- a/community/server/src/main/java/org/neo4j/server/webadmin/console/GremlinSession.java\n+++ b/community/server/src/main/java/org/neo4j/server/webadmin/console/GremlinSession.java\n@@ -138,6 +138,6 @@\n \n     private TransactionalGraph getGremlinWrappedGraph() throws DatabaseBlockedException\n     {\n-        return new Neo4jGraph( database.graph );\n+        return new Neo4jGraph( database.graph, false );\n     }\n }\n", "projectName": "neo4j.neo4j", "bugLineNum": 141, "bugNodeStartChar": 4287, "bugNodeLength": 32, "fixLineNum": 141, "fixNodeStartChar": 4287, "fixNodeLength": 39, "sourceBeforeFix": "new Neo4jGraph(database.graph)", "sourceAfterFix": "new Neo4jGraph(database.graph,false)"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "4dc84d1cd85a7120a48e337209413cf7387b1d1c", "fixCommitParentSHA1": "24418dcfa1db3efda6041091f36351b03e0dd067", "bugFilePath": "community/server/src/test/java/org/neo4j/server/helpers/FunctionalTestHelper.java", "fixPatch": "diff --git a/community/server/src/test/java/org/neo4j/server/helpers/FunctionalTestHelper.java b/community/server/src/test/java/org/neo4j/server/helpers/FunctionalTestHelper.java\nindex 6be745c..ac0e6d8 100644\n--- a/community/server/src/test/java/org/neo4j/server/helpers/FunctionalTestHelper.java\n+++ b/community/server/src/test/java/org/neo4j/server/helpers/FunctionalTestHelper.java\n@@ -286,7 +286,7 @@\n         {\n             Map<?, ?> innerMap = (Map<?,?>) entry.getValue();\n             String template = innerMap.get( \"template\" ).toString();\n-            if ( !template.contains( PATH_AUTO_NODE_INDEX ) && !template.contains( PATH_AUTO_RELATIONSHIP_INDEX ) )\n+            if ( !template.contains( PATH_AUTO_NODE_INDEX ) && !template.contains( PATH_AUTO_RELATIONSHIP_INDEX ) && !template.contains( \"_auto_\" ) )\n                 result.put( entry.getKey(), entry.getValue() );\n         }\n         return result;\n", "projectName": "neo4j.neo4j", "bugLineNum": 289, "bugNodeStartChar": 7988, "bugNodeLength": 96, "fixLineNum": 289, "fixNodeStartChar": 7988, "fixNodeLength": 130, "sourceBeforeFix": "!template.contains(PATH_AUTO_NODE_INDEX) && !template.contains(PATH_AUTO_RELATIONSHIP_INDEX)", "sourceAfterFix": "!template.contains(PATH_AUTO_NODE_INDEX) && !template.contains(PATH_AUTO_RELATIONSHIP_INDEX) && !template.contains(\"_auto_\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "24418dcfa1db3efda6041091f36351b03e0dd067", "fixCommitParentSHA1": "956bcef32ea419569f12a773d103ff7ce46faa69", "bugFilePath": "community/server/src/functionaltest/java/org/neo4j/server/rest/IndexNodeFunctionalTest.java", "fixPatch": "diff --git a/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexNodeFunctionalTest.java b/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexNodeFunctionalTest.java\nindex 63efcc3..764b24a 100644\n--- a/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexNodeFunctionalTest.java\n+++ b/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexNodeFunctionalTest.java\n@@ -115,7 +115,7 @@\n         Map<String, Object> map = JsonHelper.jsonToMap( entity );\n         assertNotNull( map.get( indexName ) );\n \n-        assertEquals( 1, functionalTestHelper.removeAnyAutoIndex( map ).size() );\n+        assertEquals( \"Was: \" + map + \", no-auto-index:\" + functionalTestHelper.removeAnyAutoIndex( map ), 1, functionalTestHelper.removeAnyAutoIndex( map ).size() );\n     }\n \n     /**\n", "projectName": "neo4j.neo4j", "bugLineNum": 118, "bugNodeStartChar": 3865, "bugNodeLength": 72, "fixLineNum": 118, "fixNodeStartChar": 3865, "fixNodeLength": 157, "sourceBeforeFix": "assertEquals(1,functionalTestHelper.removeAnyAutoIndex(map).size())", "sourceAfterFix": "assertEquals(\"Was: \" + map + \", no-auto-index:\"+ functionalTestHelper.removeAnyAutoIndex(map),1,functionalTestHelper.removeAnyAutoIndex(map).size())"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "3ddb94460ded3c696cc2714b24c7f0c40370162d", "fixCommitParentSHA1": "5b5f79a0ff59d3352b510fb6bceca3aa26d59091", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractNameStore.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractNameStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractNameStore.java\nindex d8070c8..67fefde 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractNameStore.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/AbstractNameStore.java\n@@ -305,7 +305,7 @@\n         {\n             throw new InvalidRecordException( \"Record[\" + id + \"] not in use\" );\n         }\n-        if ( inUseByte != Record.IN_USE.byteValue() )\n+        if ( inUseByte != Record.IN_USE.byteValue() && inUseByte != Record.NOT_IN_USE.byteValue() )\n         {\n             throw new InvalidRecordException( \"Record[\" + id + \"] unknown in use flag[\" + inUse + \"]\" );\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 308, "bugNodeStartChar": 7643, "bugNodeLength": 38, "fixLineNum": 308, "fixNodeStartChar": 7643, "fixNodeLength": 84, "sourceBeforeFix": "inUseByte != Record.IN_USE.byteValue()", "sourceAfterFix": "inUseByte != Record.IN_USE.byteValue() && inUseByte != Record.NOT_IN_USE.byteValue()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "62a4bfb9380fad4992d3e9f6347ad7ff34d904b7", "fixCommitParentSHA1": "a6d6cb7c55723dfa3b3b2f1c54c6bda6269c1d06", "bugFilePath": "enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java", "fixPatch": "diff --git a/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java b/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\nindex 1ddc59c..72bfe89 100644\n--- a/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\n+++ b/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\n@@ -263,7 +263,7 @@\n             PropertyRecord prev = props.forceGetRecord( prevId );\n             if ( !prev.inUse() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record not in use\" );\n-            if ( prev.getPrevProp() != property.getId() )\n+            if ( prev.getNextProp() != property.getId() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record does not reference back\" );\n         }\n         else // property is first in chain\n", "projectName": "neo4j.neo4j", "bugLineNum": 266, "bugNodeStartChar": 11084, "bugNodeLength": 18, "fixLineNum": 266, "fixNodeStartChar": 11084, "fixNodeLength": 18, "sourceBeforeFix": "prev.getPrevProp()", "sourceAfterFix": "prev.getNextProp()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "62a4bfb9380fad4992d3e9f6347ad7ff34d904b7", "fixCommitParentSHA1": "a6d6cb7c55723dfa3b3b2f1c54c6bda6269c1d06", "bugFilePath": "enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java", "fixPatch": "diff --git a/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java b/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\nindex 1ddc59c..72bfe89 100644\n--- a/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\n+++ b/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\n@@ -263,7 +263,7 @@\n             PropertyRecord prev = props.forceGetRecord( prevId );\n             if ( !prev.inUse() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record not in use\" );\n-            if ( prev.getPrevProp() != property.getId() )\n+            if ( prev.getNextProp() != property.getId() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record does not reference back\" );\n         }\n         else // property is first in chain\n", "projectName": "neo4j.neo4j", "bugLineNum": 266, "bugNodeStartChar": 11084, "bugNodeLength": 18, "fixLineNum": 266, "fixNodeStartChar": 11084, "fixNodeLength": 18, "sourceBeforeFix": "prev.getPrevProp()", "sourceAfterFix": "prev.getNextProp()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "cd6dbb2f60e8638505d6d8934c23023b740cfe25", "fixCommitParentSHA1": "1ccd9e483e2a8bca69123db45f4a0f4fcb2a32da", "bugFilePath": "enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java", "fixPatch": "diff --git a/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java b/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\nindex 399e38c..cb1738f 100644\n--- a/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\n+++ b/enterprise/backup/src/main/java/org/neo4j/backup/check/ConsistencyCheck.java\n@@ -331,10 +331,15 @@\n             fail |= inconsistent( record,\n                     \"next record set but length less than maximum\" );\n         }\n-        if ( record.getLength() > store.getRecordSize()\n+        if ( record.getId() != 0\n+             && record.getLength() > store.getRecordSize()\n                                   - store.getRecordHeaderSize() )\n         {\n-            // The length must always be less than or equal to max\n+            /*\n+             *  The length must always be less than or equal to max,\n+             *  except for the first dynamic record in a store, which\n+             *  does not conform to the usual format\n+             */\n             fail |= inconsistent( record,\n                     \"length larger than maximum for store\" );\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 334, "bugNodeStartChar": 13616, "bugNodeLength": 106, "fixLineNum": 334, "fixNodeStartChar": 13616, "fixNodeLength": 142, "sourceBeforeFix": "record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()", "sourceAfterFix": "record.getId() != 0 && record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b69967e5b131efed724e38456dd970b4af4eb539", "fixCommitParentSHA1": "a820f1fb5e427f4ca45d6c533b8758f43858cb6d", "bugFilePath": "community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java", "fixPatch": "diff --git a/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java b/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java\nindex 6f9de2a..632f872 100644\n--- a/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java\n+++ b/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java\n@@ -30,9 +30,9 @@\n \n     private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();\n \n-    public void scheduleAtFixedRate( Runnable job, String jobName, long period )\n+    public void scheduleAtFixedRate( Runnable job, String jobName, long delay, long period )\n     {\n-        ScheduledJob scheduledJob = new ScheduledJob( job, jobName, period );\n+        ScheduledJob scheduledJob = new ScheduledJob( job, jobName, delay, period );\n         scheduledJobs.add( scheduledJob );\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 35, "bugNodeStartChar": 1228, "bugNodeLength": 40, "fixLineNum": 35, "fixNodeStartChar": 1228, "fixNodeLength": 47, "sourceBeforeFix": "new ScheduledJob(job,jobName,period)", "sourceAfterFix": "new ScheduledJob(job,jobName,delay,period)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b69967e5b131efed724e38456dd970b4af4eb539", "fixCommitParentSHA1": "a820f1fb5e427f4ca45d6c533b8758f43858cb6d", "bugFilePath": "community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java", "fixPatch": "diff --git a/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java b/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java\nindex 6f9de2a..632f872 100644\n--- a/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java\n+++ b/community/server/src/main/java/org/neo4j/server/RoundRobinJobScheduler.java\n@@ -30,9 +30,9 @@\n \n     private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();\n \n-    public void scheduleAtFixedRate( Runnable job, String jobName, long period )\n+    public void scheduleAtFixedRate( Runnable job, String jobName, long delay, long period )\n     {\n-        ScheduledJob scheduledJob = new ScheduledJob( job, jobName, period );\n+        ScheduledJob scheduledJob = new ScheduledJob( job, jobName, delay, period );\n         scheduledJobs.add( scheduledJob );\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 35, "bugNodeStartChar": 1228, "bugNodeLength": 40, "fixLineNum": 35, "fixNodeStartChar": 1228, "fixNodeLength": 47, "sourceBeforeFix": "new ScheduledJob(job,jobName,period)", "sourceAfterFix": "new ScheduledJob(job,jobName,delay,period)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "b37bb91fdcabe6e8926b23aaa935200c52c511b7", "fixCommitParentSHA1": "b1aa8a07173a1ffd890d3754189e9c96cfa59fd5", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/HighlyAvailableGraphDatabase.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/HighlyAvailableGraphDatabase.java b/enterprise/ha/src/main/java/org/neo4j/kernel/HighlyAvailableGraphDatabase.java\nindex 85253d3..5d5fbea 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/HighlyAvailableGraphDatabase.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/HighlyAvailableGraphDatabase.java\n@@ -214,7 +214,7 @@\n                     \n                     // Exclude any previous branched-??? directories, otherwise this\n                     // becomes like a linked list of old directories.\n-                    (file.isDirectory() && file.getName().startsWith( \"branched-\" ) ) )\n+                    (file.isDirectory() && !file.getName().startsWith( \"branched-\" ) ) )\n             {\n                 File dest = new File( oldDir, file.getName() );\n                 if ( !file.renameTo( dest ) )\n", "projectName": "neo4j.neo4j", "bugLineNum": 217, "bugNodeStartChar": 8867, "bugNodeLength": 40, "fixLineNum": 217, "fixNodeStartChar": 8867, "fixNodeLength": 41, "sourceBeforeFix": "file.getName().startsWith(\"branched-\")", "sourceAfterFix": "!file.getName().startsWith(\"branched-\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "eb5608cb8dbd747bc03e5487e5a1b87a4154a9da", "fixCommitParentSHA1": "77e04658f4cd0008447fee41b8e3bd81f0720676", "bugFilePath": "community/kernel/src/test/java/org/neo4j/metatest/TestJavaTestDocsGenerator.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/metatest/TestJavaTestDocsGenerator.java b/community/kernel/src/test/java/org/neo4j/metatest/TestJavaTestDocsGenerator.java\nindex 8375f34..249c416 100644\n--- a/community/kernel/src/test/java/org/neo4j/metatest/TestJavaTestDocsGenerator.java\n+++ b/community/kernel/src/test/java/org/neo4j/metatest/TestJavaTestDocsGenerator.java\n@@ -60,7 +60,7 @@\n         data.get();\n         gen.get().setGraph( graphdb );\n         assertNotNull(data.get().get( \"I\" ));\n-        gen.get().document();\n+        gen.get().document(\"target/testdocs\", \"testsection\");\n     }\n \n     @Override\n", "projectName": "neo4j.neo4j", "bugLineNum": 63, "bugNodeStartChar": 2044, "bugNodeLength": 20, "fixLineNum": 63, "fixNodeStartChar": 2044, "fixNodeLength": 52, "sourceBeforeFix": "gen.get().document()", "sourceAfterFix": "gen.get().document(\"target/testdocs\",\"testsection\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "ec709731b83a26e43c22bc6299ea29c180d260d8", "fixCommitParentSHA1": "789a821ffa132a70a729985806442d1c7db3f722", "bugFilePath": "community/server/src/main/java/org/neo4j/server/plugins/PluginPointFactoryImpl.java", "fixPatch": "diff --git a/community/server/src/main/java/org/neo4j/server/plugins/PluginPointFactoryImpl.java b/community/server/src/main/java/org/neo4j/server/plugins/PluginPointFactoryImpl.java\nindex e21165a..7ad1307 100644\n--- a/community/server/src/main/java/org/neo4j/server/plugins/PluginPointFactoryImpl.java\n+++ b/community/server/src/main/java/org/neo4j/server/plugins/PluginPointFactoryImpl.java\n@@ -214,7 +214,7 @@\n         put( TYPES, new BooleanTypeCaster(), boolean.class, Boolean.class );\n         put( TYPES, new FloatTypeCaster(), float.class, Float.class );\n         put( TYPES, new DoubleTypeCaster(), double.class, Double.class );\n-        put( TYPES, new MapTypeCaster(), Map.class, Double.class );\n+        put( TYPES, new MapTypeCaster(), Map.class );\n         put( TYPES, new NodeTypeCaster(), Node.class );\n         put( TYPES, new RelationshipTypeCaster(), Relationship.class );\n         put( TYPES, new RelationshipTypeTypeCaster(), RelationshipType.class );\n", "projectName": "neo4j.neo4j", "bugLineNum": 217, "bugNodeStartChar": 8522, "bugNodeLength": 58, "fixLineNum": 217, "fixNodeStartChar": 8522, "fixNodeLength": 44, "sourceBeforeFix": "put(TYPES,new MapTypeCaster(),Map.class,Double.class)", "sourceAfterFix": "put(TYPES,new MapTypeCaster(),Map.class)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "7d985b79863586d5d5670762cd9440bcfc263d6a", "fixCommitParentSHA1": "cf78377fbb78080e306bc7e2b2de12734ca72450", "bugFilePath": "community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java", "fixPatch": "diff --git a/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java b/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java\nindex dc33e68..b5361fb 100644\n--- a/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java\n+++ b/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java\n@@ -54,7 +54,7 @@\n         {\n             Neo4jMBean bean = new KernelBean( kernel, support );\n             mbs.registerMBean( bean, bean.objectName );\n-            beans.add( 0, bean );\n+            beans.add( bean );\n         }\n         catch ( Exception e )\n         {\n@@ -80,7 +80,7 @@\n         {\n             Neo4jMBean bean = new ConfigurationBean( kernel, support );\n             mbs.registerMBean( bean, bean.objectName );\n-            beans.add( 0, bean );\n+            beans.add( bean );\n         }\n         catch ( Exception e )\n         {\n", "projectName": "neo4j.neo4j", "bugLineNum": 57, "bugNodeStartChar": 1948, "bugNodeLength": 20, "fixLineNum": 57, "fixNodeStartChar": 1948, "fixNodeLength": 17, "sourceBeforeFix": "beans.add(0,bean)", "sourceAfterFix": "beans.add(bean)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "7d985b79863586d5d5670762cd9440bcfc263d6a", "fixCommitParentSHA1": "cf78377fbb78080e306bc7e2b2de12734ca72450", "bugFilePath": "community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java", "fixPatch": "diff --git a/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java b/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java\nindex dc33e68..b5361fb 100644\n--- a/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java\n+++ b/community/jmx/src/main/java/org/neo4j/jmx/impl/JmxExtension.java\n@@ -54,7 +54,7 @@\n         {\n             Neo4jMBean bean = new KernelBean( kernel, support );\n             mbs.registerMBean( bean, bean.objectName );\n-            beans.add( 0, bean );\n+            beans.add( bean );\n         }\n         catch ( Exception e )\n         {\n@@ -80,7 +80,7 @@\n         {\n             Neo4jMBean bean = new ConfigurationBean( kernel, support );\n             mbs.registerMBean( bean, bean.objectName );\n-            beans.add( 0, bean );\n+            beans.add( bean );\n         }\n         catch ( Exception e )\n         {\n", "projectName": "neo4j.neo4j", "bugLineNum": 83, "bugNodeStartChar": 2793, "bugNodeLength": 20, "fixLineNum": 83, "fixNodeStartChar": 2793, "fixNodeLength": 17, "sourceBeforeFix": "beans.add(0,bean)", "sourceAfterFix": "beans.add(bean)"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "fb8fc104115926f045d7898b0c58b647f30fb602", "fixCommitParentSHA1": "4924406fdc1e5a17af9019c5f76014811d8885ce", "bugFilePath": "community/server/src/functionaltest/java/org/neo4j/server/rest/IndexRelationshipFunctionalTest.java", "fixPatch": "diff --git a/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexRelationshipFunctionalTest.java b/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexRelationshipFunctionalTest.java\nindex c61fa2f..4a03e61 100644\n--- a/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexRelationshipFunctionalTest.java\n+++ b/community/server/src/functionaltest/java/org/neo4j/server/rest/IndexRelationshipFunctionalTest.java\n@@ -117,7 +117,7 @@\n         JaxRsResponse response = httpPostIndexRelationshipRoot( JsonHelper.createJsonFrom( indexSpecification ) );\n         assertEquals( 201, response.getStatus() );\n         assertNotNull( response.getHeaders().get( \"Location\" ).get( 0 ) );\n-        assertEquals( helper.getRelationshipIndexes().length, 1 );\n+        assertEquals( 1, helper.getRelationshipIndexes().length);\n         assertNotNull( helper.getRelationshipIndex( indexName ) );\n     }\n \n", "projectName": "neo4j.neo4j", "bugLineNum": 120, "bugNodeStartChar": 3885, "bugNodeLength": 57, "fixLineNum": 120, "fixNodeStartChar": 3885, "fixNodeLength": 56, "sourceBeforeFix": "assertEquals(helper.getRelationshipIndexes().length,1)", "sourceAfterFix": "assertEquals(1,helper.getRelationshipIndexes().length)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c41670d57cf0a5793a079c6ffefa90584f880708", "fixCommitParentSHA1": "d7e0dad9898bec3df6e5550c75445f30539750d2", "bugFilePath": "community/kernel/src/test/java/org/neo4j/test/TestData.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/test/TestData.java b/community/kernel/src/test/java/org/neo4j/test/TestData.java\nindex aafba8c..9945864 100644\n--- a/community/kernel/src/test/java/org/neo4j/test/TestData.java\n+++ b/community/kernel/src/test/java/org/neo4j/test/TestData.java\n@@ -146,13 +146,13 @@\n             }\n             // If there is no title, and the first line looks like a title,\n             // take the first line as title\n-            if ( title == null && lines[start + 1] == EMPTY )\n+            if ( title == null && start < end && lines[start + 1] == EMPTY )\n             {\n                 title = lines[start].trim();\n                 start += 2;\n             }\n             StringBuilder documentation = new StringBuilder();\n-            for ( int i = start; i < end; i++ )\n+            for ( int i = start; i <= end; i++ )\n             {\n                 documentation.append( lines[i] == EMPTY ? lines[i] : lines[i].substring( indent ) ).append( \"\\n\" );\n             }\n", "projectName": "neo4j.neo4j", "bugLineNum": 155, "bugNodeStartChar": 5466, "bugNodeLength": 7, "fixLineNum": 155, "fixNodeStartChar": 5466, "fixNodeLength": 8, "sourceBeforeFix": "i < end", "sourceAfterFix": "i <= end"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "040743693ffbcf226dca01371b4a2d47a75e7511", "fixCommitParentSHA1": "4e833d0b5a2b266532cd6a450948ae1615c64240", "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java", "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java\nindex 2ebbc2a..7a70d7b 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java\n@@ -278,14 +278,14 @@\n             XaDataSource dataSource = graphDbConfig.getTxModule().getXaDataSourceManager()\n                     .getXaDataSource( resource );\n             final long txId = dataSource.applyPreparedTransaction( txGetter.extract() );\n-            Predicate<Long> notThisTx = new Predicate<Long>()\n+            Predicate<Long> upUntilThisTx = new Predicate<Long>()\n             {\n                 public boolean accept( Long item )\n                 {\n-                    return item != txId;\n+                    return item < txId;\n                 }\n             };\n-            return packResponse( context, txId, notThisTx );\n+            return packResponse( context, txId, upUntilThisTx );\n         }\n         catch ( IOException e )\n         {\n", "projectName": "neo4j.neo4j", "bugLineNum": 285, "bugNodeStartChar": 9459, "bugNodeLength": 12, "fixLineNum": 285, "fixNodeStartChar": 9459, "fixNodeLength": 11, "sourceBeforeFix": "item != txId", "sourceAfterFix": "item < txId"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "79f0eb86f6a56f04c139af05ae1e74f04af856cc", "fixCommitParentSHA1": "3763899ecc6d53c9f0d3b23af977ede6dc7f0d62", "bugFilePath": "community/src/main/java/org/neo4j/visualization/graphviz/ConfigurationParser.java", "fixPatch": "diff --git a/community/src/main/java/org/neo4j/visualization/graphviz/ConfigurationParser.java b/community/src/main/java/org/neo4j/visualization/graphviz/ConfigurationParser.java\nindex 1ac26eb..2cad040 100644\n--- a/community/src/main/java/org/neo4j/visualization/graphviz/ConfigurationParser.java\n+++ b/community/src/main/java/org/neo4j/visualization/graphviz/ConfigurationParser.java\n@@ -120,7 +120,7 @@\n         }\n     }\n \n-    private List<StyleParameter> styles = new ArrayList<StyleParameter>();\n+    private final List<StyleParameter> styles = new ArrayList<StyleParameter>();\n \n     public final StyleParameter[] styles( StyleParameter... params )\n     {\n@@ -227,7 +227,7 @@\n         private String untilNonAlfa( int start )\n         {\n             int end = start;\n-            while ( Character.isLetter( pattern.charAt( end ) ) )\n+            while ( end < pattern.length() && Character.isLetter( pattern.charAt( end ) ) )\n             {\n                 end++;\n             }\n", "projectName": "neo4j.neo4j", "bugLineNum": 123, "bugNodeStartChar": 4287, "bugNodeLength": 70, "fixLineNum": 123, "fixNodeStartChar": 4287, "fixNodeLength": 76, "sourceBeforeFix": "2", "sourceAfterFix": "18"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f02bbb70a692cc8ce3789533e5cc0984fabb4299", "fixCommitParentSHA1": "0c7e7c77444247b2c491bab210791e41ccdf0ead", "bugFilePath": "advanced/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java", "fixPatch": "diff --git a/advanced/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java b/advanced/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\nindex 15ec253..819aa61 100644\n--- a/advanced/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\n+++ b/advanced/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\n@@ -219,7 +219,7 @@\n     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n-        String path = path( 11 );\n+        String path = path( 14 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );\n         \n", "projectName": "neo4j.neo4j", "bugLineNum": 222, "bugNodeStartChar": 8165, "bugNodeLength": 10, "fixLineNum": 222, "fixNodeStartChar": 8165, "fixNodeLength": 10, "sourceBeforeFix": "path(11)", "sourceAfterFix": "path(14)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "320421c66bab7fc9670e766769c4a9ec60063fe8", "fixCommitParentSHA1": "d64de19cca5af5532cc185a67af6df14eb7dc468", "bugFilePath": "enterprise/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java", "fixPatch": "diff --git a/enterprise/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java b/enterprise/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\nindex 15ec253..819aa61 100644\n--- a/enterprise/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\n+++ b/enterprise/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\n@@ -219,7 +219,7 @@\n     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n-        String path = path( 11 );\n+        String path = path( 14 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );\n         \n", "projectName": "neo4j.neo4j", "bugLineNum": 222, "bugNodeStartChar": 8165, "bugNodeLength": 10, "fixLineNum": 222, "fixNodeStartChar": 8165, "fixNodeLength": 10, "sourceBeforeFix": "path(11)", "sourceAfterFix": "path(14)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "84ff1f51276634e5feb8daa72ea9693530ba9463", "fixCommitParentSHA1": "bb84c2e9af7c54943751f7832a3a7bb08b689f9f", "bugFilePath": "community/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java", "fixPatch": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\nindex 15ec253..819aa61 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/nioneo/store/TestUpgradeStore.java\n@@ -219,7 +219,7 @@\n     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n-        String path = path( 11 );\n+        String path = path( 14 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );\n         \n", "projectName": "neo4j.neo4j", "bugLineNum": 222, "bugNodeStartChar": 8165, "bugNodeLength": 10, "fixLineNum": 222, "fixNodeStartChar": 8165, "fixNodeLength": 10, "sourceBeforeFix": "path(11)", "sourceAfterFix": "path(14)"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "67d12ee748c936512924fc6e493483be8734acea", "fixCommitParentSHA1": "63e6cf60f2a30aa8febb3561401ea929aed04a0a", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/Version.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/Version.java b/community/kernel/src/main/java/org/neo4j/kernel/Version.java\nindex a3bbc13..a330cfe 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/Version.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/Version.java\n@@ -62,7 +62,7 @@\n      */\n     public String getVersion()\n     {\n-        if ( version == null )\n+        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 1977, "bugNodeLength": 15, "fixLineNum": 65, "fixNodeStartChar": 1977, "fixNodeLength": 39, "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "67d12ee748c936512924fc6e493483be8734acea", "fixCommitParentSHA1": "63e6cf60f2a30aa8febb3561401ea929aed04a0a", "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/Version.java", "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/Version.java b/community/kernel/src/main/java/org/neo4j/kernel/Version.java\nindex a3bbc13..a330cfe 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/Version.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/Version.java\n@@ -62,7 +62,7 @@\n      */\n     public String getVersion()\n     {\n-        if ( version == null )\n+        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 1977, "bugNodeLength": 15, "fixLineNum": 65, "fixNodeStartChar": 1977, "fixNodeLength": 39, "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "c4b0fd69f64869db0c26e9389e4d511c6ce53d1d", "fixCommitParentSHA1": "d168244be355ba605e87b05489d5cf5fcac5fa72", "bugFilePath": "enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java", "fixPatch": "diff --git a/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java b/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java\nindex a3bbc13..a330cfe 100644\n--- a/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java\n+++ b/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java\n@@ -62,7 +62,7 @@\n      */\n     public String getVersion()\n     {\n-        if ( version == null )\n+        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 1977, "bugNodeLength": 15, "fixLineNum": 65, "fixNodeStartChar": 1977, "fixNodeLength": 39, "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "c4b0fd69f64869db0c26e9389e4d511c6ce53d1d", "fixCommitParentSHA1": "d168244be355ba605e87b05489d5cf5fcac5fa72", "bugFilePath": "enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java", "fixPatch": "diff --git a/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java b/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java\nindex a3bbc13..a330cfe 100644\n--- a/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java\n+++ b/enterprise/kernel/src/main/java/org/neo4j/kernel/Version.java\n@@ -62,7 +62,7 @@\n      */\n     public String getVersion()\n     {\n-        if ( version == null )\n+        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 1977, "bugNodeLength": 15, "fixLineNum": 65, "fixNodeStartChar": 1977, "fixNodeLength": 39, "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "ab6298d6feedb99b827f708e1f269d1996894b1d", "fixCommitParentSHA1": "418d3ef5544c6107e04e68c5be42f05bf2e47a0b", "bugFilePath": "advanced/kernel/src/main/java/org/neo4j/kernel/Version.java", "fixPatch": "diff --git a/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java b/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java\nindex a3bbc13..a330cfe 100644\n--- a/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java\n+++ b/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java\n@@ -62,7 +62,7 @@\n      */\n     public String getVersion()\n     {\n-        if ( version == null )\n+        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 1977, "bugNodeLength": 15, "fixLineNum": 65, "fixNodeStartChar": 1977, "fixNodeLength": 39, "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "ab6298d6feedb99b827f708e1f269d1996894b1d", "fixCommitParentSHA1": "418d3ef5544c6107e04e68c5be42f05bf2e47a0b", "bugFilePath": "advanced/kernel/src/main/java/org/neo4j/kernel/Version.java", "fixPatch": "diff --git a/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java b/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java\nindex a3bbc13..a330cfe 100644\n--- a/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java\n+++ b/advanced/kernel/src/main/java/org/neo4j/kernel/Version.java\n@@ -62,7 +62,7 @@\n      */\n     public String getVersion()\n     {\n-        if ( version == null )\n+        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }\n", "projectName": "neo4j.neo4j", "bugLineNum": 65, "bugNodeStartChar": 1977, "bugNodeLength": 15, "fixLineNum": 65, "fixNodeStartChar": 1977, "fixNodeLength": 39, "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a9a99c32bd2041a42b365b97c3cdd8642e0f1662", "fixCommitParentSHA1": "cdc0eecfe3b0d3fd1f25b03009b9236395c6d7ed", "bugFilePath": "community/src/test/java/org/neo4j/test/TargetDirectory.java", "fixPatch": "diff --git a/community/src/test/java/org/neo4j/test/TargetDirectory.java b/community/src/test/java/org/neo4j/test/TargetDirectory.java\nindex c2a29c9..d808800 100644\n--- a/community/src/test/java/org/neo4j/test/TargetDirectory.java\n+++ b/community/src/test/java/org/neo4j/test/TargetDirectory.java\n@@ -76,7 +76,7 @@\n         this.base = base.getAbsoluteFile();\n     }\n \n-    private void recursiveDelete( File file )\n+    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )\n@@ -89,7 +89,7 @@\n         return directory( name, false );\n     }\n \n-    private File directory( String name, boolean clean )\n+    public File directory( String name, boolean clean )\n     {\n         File dir = new File( base(), name );\n         if ( clean && dir.exists() ) recursiveDelete( dir );\n", "projectName": "neo4j.neo4j", "bugLineNum": 79, "bugNodeStartChar": 2367, "bugNodeLength": 209, "fixLineNum": 79, "fixNodeStartChar": 2367, "fixNodeLength": 215, "sourceBeforeFix": "2", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ae59e41fb8dfd5e672edc822fe16f3306ca87002", "fixCommitParentSHA1": "c7b046231164600ca2c28b2eb34c541d60ea5cad", "bugFilePath": "enterprise/src/test/java/org/neo4j/test/TargetDirectory.java", "fixPatch": "diff --git a/enterprise/src/test/java/org/neo4j/test/TargetDirectory.java b/enterprise/src/test/java/org/neo4j/test/TargetDirectory.java\nindex c2a29c9..d808800 100644\n--- a/enterprise/src/test/java/org/neo4j/test/TargetDirectory.java\n+++ b/enterprise/src/test/java/org/neo4j/test/TargetDirectory.java\n@@ -76,7 +76,7 @@\n         this.base = base.getAbsoluteFile();\n     }\n \n-    private void recursiveDelete( File file )\n+    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )\n@@ -89,7 +89,7 @@\n         return directory( name, false );\n     }\n \n-    private File directory( String name, boolean clean )\n+    public File directory( String name, boolean clean )\n     {\n         File dir = new File( base(), name );\n         if ( clean && dir.exists() ) recursiveDelete( dir );\n", "projectName": "neo4j.neo4j", "bugLineNum": 79, "bugNodeStartChar": 2367, "bugNodeLength": 209, "fixLineNum": 79, "fixNodeStartChar": 2367, "fixNodeLength": 215, "sourceBeforeFix": "2", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e6035b9a4040f237a62feb042d68b389f3b6e464", "fixCommitParentSHA1": "60ee6c02a03bc24c1cdc6c4b150832d99f2abc20", "bugFilePath": "advanced/src/test/java/org/neo4j/test/TargetDirectory.java", "fixPatch": "diff --git a/advanced/src/test/java/org/neo4j/test/TargetDirectory.java b/advanced/src/test/java/org/neo4j/test/TargetDirectory.java\nindex c2a29c9..d808800 100644\n--- a/advanced/src/test/java/org/neo4j/test/TargetDirectory.java\n+++ b/advanced/src/test/java/org/neo4j/test/TargetDirectory.java\n@@ -76,7 +76,7 @@\n         this.base = base.getAbsoluteFile();\n     }\n \n-    private void recursiveDelete( File file )\n+    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )\n@@ -89,7 +89,7 @@\n         return directory( name, false );\n     }\n \n-    private File directory( String name, boolean clean )\n+    public File directory( String name, boolean clean )\n     {\n         File dir = new File( base(), name );\n         if ( clean && dir.exists() ) recursiveDelete( dir );\n", "projectName": "neo4j.neo4j", "bugLineNum": 79, "bugNodeStartChar": 2367, "bugNodeLength": 209, "fixLineNum": 79, "fixNodeStartChar": 2367, "fixNodeLength": 215, "sourceBeforeFix": "2", "sourceAfterFix": "9"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "034b27c5e809b6f84f58d3ca0bb6b74de4452d83", "fixCommitParentSHA1": "7d76fffec2c3ec66c3560bd1feb4e0a3f522043f", "bugFilePath": "enterprise/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java", "fixPatch": "diff --git a/enterprise/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java b/enterprise/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\nindex 5236d30..9d42d71 100644\n--- a/enterprise/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\n+++ b/enterprise/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\n@@ -68,7 +68,7 @@\n     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n-        File dataDir = target.directory( \"zk\" + id + \"data\" );\n+        File dataDir = target.directory( \"zk\" + id + \"data\", true );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );\n", "projectName": "neo4j.neo4j", "bugLineNum": 71, "bugNodeStartChar": 2361, "bugNodeLength": 38, "fixLineNum": 71, "fixNodeStartChar": 2361, "fixNodeLength": 44, "sourceBeforeFix": "target.directory(\"zk\" + id + \"data\")", "sourceAfterFix": "target.directory(\"zk\" + id + \"data\",true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "4abd5910bc3d219c5c19a4f5193c1ce4e4fb6b38", "fixCommitParentSHA1": "fa8ab54c81cf79a2caf9585edc058bd2bb445e49", "bugFilePath": "advanced/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java", "fixPatch": "diff --git a/advanced/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java b/advanced/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\nindex 5236d30..9d42d71 100644\n--- a/advanced/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\n+++ b/advanced/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\n@@ -68,7 +68,7 @@\n     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n-        File dataDir = target.directory( \"zk\" + id + \"data\" );\n+        File dataDir = target.directory( \"zk\" + id + \"data\", true );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );\n", "projectName": "neo4j.neo4j", "bugLineNum": 71, "bugNodeStartChar": 2361, "bugNodeLength": 38, "fixLineNum": 71, "fixNodeStartChar": 2361, "fixNodeLength": 44, "sourceBeforeFix": "target.directory(\"zk\" + id + \"data\")", "sourceAfterFix": "target.directory(\"zk\" + id + \"data\",true)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f18d4ef8d7698f6940c72c8c64a923fd9faac418", "fixCommitParentSHA1": "05d0217fbdcfdf996846242727f1afa4cd6ea97e", "bugFilePath": "community/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java", "fixPatch": "diff --git a/community/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java b/community/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\nindex 5236d30..9d42d71 100644\n--- a/community/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\n+++ b/community/test/java/org/neo4j/ha/LocalhostZooKeeperCluster.java\n@@ -68,7 +68,7 @@\n     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n-        File dataDir = target.directory( \"zk\" + id + \"data\" );\n+        File dataDir = target.directory( \"zk\" + id + \"data\", true );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );\n", "projectName": "neo4j.neo4j", "bugLineNum": 71, "bugNodeStartChar": 2361, "bugNodeLength": 38, "fixLineNum": 71, "fixNodeStartChar": 2361, "fixNodeLength": 44, "sourceBeforeFix": "target.directory(\"zk\" + id + \"data\")", "sourceAfterFix": "target.directory(\"zk\" + id + \"data\",true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ab83c919018792167f0a1de5aebaca41432ce7aa", "fixCommitParentSHA1": "afdc8cae97d7ad49e5fb6ef0bfeaccf73f4e76e2", "bugFilePath": "enterprise/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java", "fixPatch": "diff --git a/enterprise/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java b/enterprise/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\nindex 1798b7a..5485c2a 100644\n--- a/enterprise/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n+++ b/enterprise/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n@@ -610,7 +610,7 @@\n     }\n \n     @DELETE\n-    @Path(PATH_NODE_INDEX_ID)\n+    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )\n", "projectName": "neo4j.neo4j", "bugLineNum": 613, "bugNodeStartChar": 19846, "bugNodeLength": 25, "fixLineNum": 613, "fixNodeStartChar": 19846, "fixNodeLength": 33, "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2dfcaeaf25ce13a46289b4917e7e2d4b9cfbc63f", "fixCommitParentSHA1": "5b61776090dc71e4f4f1a6fec09d6bab3b62dcd5", "bugFilePath": "advanced/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java", "fixPatch": "diff --git a/advanced/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java b/advanced/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\nindex 1798b7a..5485c2a 100644\n--- a/advanced/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n+++ b/advanced/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n@@ -610,7 +610,7 @@\n     }\n \n     @DELETE\n-    @Path(PATH_NODE_INDEX_ID)\n+    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )\n", "projectName": "neo4j.neo4j", "bugLineNum": 613, "bugNodeStartChar": 19846, "bugNodeLength": 25, "fixLineNum": 613, "fixNodeStartChar": 19846, "fixNodeLength": 33, "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2d45a874c45b154bd3ab0ce56f2ecc6a2ae6e8e2", "fixCommitParentSHA1": "45460ac1e488d6f2d1fb39f1ecf600642f9e42c9", "bugFilePath": "packaging/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java", "fixPatch": "diff --git a/packaging/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java b/packaging/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\nindex 1798b7a..5485c2a 100644\n--- a/packaging/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n+++ b/packaging/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n@@ -610,7 +610,7 @@\n     }\n \n     @DELETE\n-    @Path(PATH_NODE_INDEX_ID)\n+    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )\n", "projectName": "neo4j.neo4j", "bugLineNum": 613, "bugNodeStartChar": 19846, "bugNodeLength": 25, "fixLineNum": 613, "fixNodeStartChar": 19846, "fixNodeLength": 33, "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3222ef67df50f7655666270cbee52282a7de974c", "fixCommitParentSHA1": "cf040d742a5337d418151b4ec363e6fb62e0755d", "bugFilePath": "community/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java", "fixPatch": "diff --git a/community/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java b/community/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\nindex 1798b7a..5485c2a 100644\n--- a/community/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n+++ b/community/src/main/java/org/neo4j/server/rest/web/RestfulGraphDatabase.java\n@@ -610,7 +610,7 @@\n     }\n \n     @DELETE\n-    @Path(PATH_NODE_INDEX_ID)\n+    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )\n", "projectName": "neo4j.neo4j", "bugLineNum": 613, "bugNodeStartChar": 19846, "bugNodeLength": 25, "fixLineNum": 613, "fixNodeStartChar": 19846, "fixNodeLength": 33, "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2e87cf7e8eba0f34f35f89869eabd4815874d607", "fixCommitParentSHA1": "09a599ec350d0f15d442cc5a4ab5614b211256d4", "bugFilePath": "packaging/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java", "fixPatch": "diff --git a/packaging/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java b/packaging/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\nindex ed126ce..eb2e068 100644\n--- a/packaging/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n+++ b/packaging/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n@@ -39,7 +39,7 @@\n         URI firstNode = createNode();\n         addProperty(firstNode, \"name\", \"Joe Strummer\");\n         URI secondNode = createNode();\n-        addProperty(firstNode, \"band\", \"The Clash\");\n+        addProperty(secondNode, \"band\", \"The Clash\");\n         // END SNIPPET: nodesAndProps    \n         \n         // START SNIPPET: addRel\n", "projectName": "neo4j.neo4j", "bugLineNum": 42, "bugNodeStartChar": 1482, "bugNodeLength": 43, "fixLineNum": 42, "fixNodeStartChar": 1482, "fixNodeLength": 44, "sourceBeforeFix": "addProperty(firstNode,\"band\",\"The Clash\")", "sourceAfterFix": "addProperty(secondNode,\"band\",\"The Clash\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c982dcf082812f4fdae3c7159ab9baad233a1799", "fixCommitParentSHA1": "ffc988c9b7b827234109956342adbd0881ccc9d6", "bugFilePath": "enterprise/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java", "fixPatch": "diff --git a/enterprise/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java b/enterprise/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\nindex ed126ce..eb2e068 100644\n--- a/enterprise/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n+++ b/enterprise/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n@@ -39,7 +39,7 @@\n         URI firstNode = createNode();\n         addProperty(firstNode, \"name\", \"Joe Strummer\");\n         URI secondNode = createNode();\n-        addProperty(firstNode, \"band\", \"The Clash\");\n+        addProperty(secondNode, \"band\", \"The Clash\");\n         // END SNIPPET: nodesAndProps    \n         \n         // START SNIPPET: addRel\n", "projectName": "neo4j.neo4j", "bugLineNum": 42, "bugNodeStartChar": 1482, "bugNodeLength": 43, "fixLineNum": 42, "fixNodeStartChar": 1482, "fixNodeLength": 44, "sourceBeforeFix": "addProperty(firstNode,\"band\",\"The Clash\")", "sourceAfterFix": "addProperty(secondNode,\"band\",\"The Clash\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5bc5353c7899d3a51ffbab8faedd6ebc95587f6f", "fixCommitParentSHA1": "ad21555a812632c192605bb21c5ef53bcb042344", "bugFilePath": "advanced/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java", "fixPatch": "diff --git a/advanced/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java b/advanced/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\nindex ed126ce..eb2e068 100644\n--- a/advanced/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n+++ b/advanced/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n@@ -39,7 +39,7 @@\n         URI firstNode = createNode();\n         addProperty(firstNode, \"name\", \"Joe Strummer\");\n         URI secondNode = createNode();\n-        addProperty(firstNode, \"band\", \"The Clash\");\n+        addProperty(secondNode, \"band\", \"The Clash\");\n         // END SNIPPET: nodesAndProps    \n         \n         // START SNIPPET: addRel\n", "projectName": "neo4j.neo4j", "bugLineNum": 42, "bugNodeStartChar": 1482, "bugNodeLength": 43, "fixLineNum": 42, "fixNodeStartChar": 1482, "fixNodeLength": 44, "sourceBeforeFix": "addProperty(firstNode,\"band\",\"The Clash\")", "sourceAfterFix": "addProperty(secondNode,\"band\",\"The Clash\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "412b8171a48f65da220a9fb2ae790b6c67efbb2b", "fixCommitParentSHA1": "1a6c2844dc99e3a3245138600e112564dd7effb8", "bugFilePath": "community/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java", "fixPatch": "diff --git a/community/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java b/community/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\nindex ed126ce..eb2e068 100644\n--- a/community/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n+++ b/community/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java\n@@ -39,7 +39,7 @@\n         URI firstNode = createNode();\n         addProperty(firstNode, \"name\", \"Joe Strummer\");\n         URI secondNode = createNode();\n-        addProperty(firstNode, \"band\", \"The Clash\");\n+        addProperty(secondNode, \"band\", \"The Clash\");\n         // END SNIPPET: nodesAndProps    \n         \n         // START SNIPPET: addRel\n", "projectName": "neo4j.neo4j", "bugLineNum": 42, "bugNodeStartChar": 1482, "bugNodeLength": 43, "fixLineNum": 42, "fixNodeStartChar": 1482, "fixNodeLength": 44, "sourceBeforeFix": "addProperty(firstNode,\"band\",\"The Clash\")", "sourceAfterFix": "addProperty(secondNode,\"band\",\"The Clash\")"}]