[{"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "93e8c7dc60cbcac6f8ac33996418eba13e5ed64a", "fixCommitParentSHA1": "b6257bdacf2644fea92de8c5e7d3da362a139483", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\nindex 706ebf1..c4f9cfc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n@@ -218,7 +218,7 @@\n             String cityName = i % 2 == 0 ? \"cityname\" : null;\n \n             Employee emp = new Employee(i, \"name\" + i, cityName, 0, true, i);\n-            map.put(i, emp, 0L, SECONDS, 2L, SECONDS);\n+            map.put(i, emp, 0L, SECONDS, 14L, SECONDS);\n         }\n \n         EntryObject entryObject = new PredicateBuilderImpl().getEntryObject();\n@@ -232,7 +232,7 @@\n \n             Collection<Employee> valuesNotNullCity = map.values(Predicates.equal(\"city\", \"cityname\"));\n             assertEquals(3, valuesNotNullCity.size());\n-        }, 5);\n+        }, 30);\n     }\n \n     /**\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 221, "bugNodeStartChar": 8392, "bugNodeLength": 41, "fixLineNum": 221, "fixNodeStartChar": 8392, "fixNodeLength": 42, "sourceBeforeFix": "map.put(i,emp,0L,SECONDS,2L,SECONDS)", "sourceAfterFix": "map.put(i,emp,0L,SECONDS,14L,SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "93e8c7dc60cbcac6f8ac33996418eba13e5ed64a", "fixCommitParentSHA1": "b6257bdacf2644fea92de8c5e7d3da362a139483", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\nindex 706ebf1..c4f9cfc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n@@ -218,7 +218,7 @@\n             String cityName = i % 2 == 0 ? \"cityname\" : null;\n \n             Employee emp = new Employee(i, \"name\" + i, cityName, 0, true, i);\n-            map.put(i, emp, 0L, SECONDS, 2L, SECONDS);\n+            map.put(i, emp, 0L, SECONDS, 14L, SECONDS);\n         }\n \n         EntryObject entryObject = new PredicateBuilderImpl().getEntryObject();\n@@ -232,7 +232,7 @@\n \n             Collection<Employee> valuesNotNullCity = map.values(Predicates.equal(\"city\", \"cityname\"));\n             assertEquals(3, valuesNotNullCity.size());\n-        }, 5);\n+        }, 30);\n     }\n \n     /**\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 228, "bugNodeStartChar": 8720, "bugNodeLength": 378, "fixLineNum": 228, "fixNodeStartChar": 8720, "fixNodeLength": 379, "sourceBeforeFix": "assertTrueAllTheTime(() -> {   assertTrue(map.containsKey(0));   Collection<Employee> valuesNullCity=map.values(predicateCityNull);   assertEquals(2,valuesNullCity.size());   Collection<Employee> valuesNotNullCity=map.values(Predicates.equal(\"city\",\"cityname\"));   assertEquals(3,valuesNotNullCity.size()); } ,5)", "sourceAfterFix": "assertTrueAllTheTime(() -> {   assertTrue(map.containsKey(0));   Collection<Employee> valuesNullCity=map.values(predicateCityNull);   assertEquals(2,valuesNullCity.size());   Collection<Employee> valuesNotNullCity=map.values(Predicates.equal(\"city\",\"cityname\"));   assertEquals(3,valuesNotNullCity.size()); } ,30)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "30f6eccf25ce33da6bd20f4ec8ea99dc5c3f3260", "fixCommitParentSHA1": "d632c70ca2fdfd9cdf174902360e42c869a20cba", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/query/impl/Indexes.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/query/impl/Indexes.java b/hazelcast/src/main/java/com/hazelcast/query/impl/Indexes.java\nindex 8322cee..98ef1f8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/query/impl/Indexes.java\n+++ b/hazelcast/src/main/java/com/hazelcast/query/impl/Indexes.java\n@@ -189,9 +189,9 @@\n      * Creates indexes according to the index definitions stored inside this\n      * indexes.\n      */\n-    public void createIndexesFromRecordedDefinitions() {\n+    public void createIndexesFromRecordedDefinitions(StoreAdapter partitionStoreAdapter) {\n         for (Map.Entry<String, Boolean> definition : definitions.entrySet()) {\n-            addOrGetIndex(definition.getKey(), definition.getValue());\n+            addOrGetIndex(definition.getKey(), definition.getValue(), partitionStoreAdapter);\n         }\n         definitions.clear();\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 194, "bugNodeStartChar": 8288, "bugNodeLength": 57, "fixLineNum": 194, "fixNodeStartChar": 8288, "fixNodeLength": 80, "sourceBeforeFix": "addOrGetIndex(definition.getKey(),definition.getValue())", "sourceAfterFix": "addOrGetIndex(definition.getKey(),definition.getValue(),partitionStoreAdapter)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c465bf58aa9b067eacab42b336530638f63ad420", "fixCommitParentSHA1": "14db55254600cf42aa931a7c5ba73652dcfd40c5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java b/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java\nindex 0ee2ee6..1613920 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java\n@@ -400,7 +400,7 @@\n                 return group.id();\n             }\n \n-            String msg = group.getId() + \" already exists with a different size: \" + group.memberCount();\n+            String msg = group.id() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 403, "bugNodeStartChar": 17622, "bugNodeLength": 13, "fixLineNum": 403, "fixNodeStartChar": 17622, "fixNodeLength": 10, "sourceBeforeFix": "group.getId()", "sourceAfterFix": "group.id()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c465bf58aa9b067eacab42b336530638f63ad420", "fixCommitParentSHA1": "14db55254600cf42aa931a7c5ba73652dcfd40c5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java b/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java\nindex 0ee2ee6..1613920 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java\n@@ -400,7 +400,7 @@\n                 return group.id();\n             }\n \n-            String msg = group.getId() + \" already exists with a different size: \" + group.memberCount();\n+            String msg = group.id() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 403, "bugNodeStartChar": 17622, "bugNodeLength": 13, "fixLineNum": 403, "fixNodeStartChar": 17622, "fixNodeLength": 10, "sourceBeforeFix": "group.getId()", "sourceAfterFix": "group.id()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a41b9673560ac361710e48073a32500b5780497d", "fixCommitParentSHA1": "b6320c635c1c17381e3dca5109a3446edf33e7dc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java b/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java\nindex eecb65c..70b688e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java\n@@ -208,7 +208,7 @@\n             conn.setConnectTimeout(TIMEOUT * 2);\n             conn.setReadTimeout(TIMEOUT * 2);\n             in = new BufferedInputStream(conn.getInputStream());\n-        } catch (IOException ignored) {\n+        } catch (Exception ignored) {\n             ignore(ignored);\n         } finally {\n             closeResource(in);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 211, "bugNodeStartChar": 8366, "bugNodeLength": 19, "fixLineNum": 211, "fixNodeStartChar": 8366, "fixNodeLength": 17, "sourceBeforeFix": "IOException ignored", "sourceAfterFix": "Exception ignored"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "6bd0ee7bd9734e71b9ef61da7c0417770d9d877b", "fixCommitParentSHA1": "9f20474e6f5945dea27dd349a7a4611acf8a42ad", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/BindHandler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/BindHandler.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/BindHandler.java\nindex 69b8907..97b67a6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/BindHandler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/BindHandler.java\n@@ -191,7 +191,7 @@\n         }\n         boolean returnValue = tcpIpEndpointManager.registerConnection(remoteEndpoint, connection);\n \n-        if (remoteAddressAliases != null) {\n+        if (remoteAddressAliases != null && returnValue) {\n             for (Address remoteAddressAlias : remoteAddressAliases) {\n                 if (logger.isLoggable(Level.FINEST)) {\n                     logger.finest(\"Registering connection \" + connection + \" to address alias \" + remoteAddressAlias);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 194, "bugNodeStartChar": 9195, "bugNodeLength": 28, "fixLineNum": 194, "fixNodeStartChar": 9195, "fixNodeLength": 43, "sourceBeforeFix": "remoteAddressAliases != null", "sourceAfterFix": "remoteAddressAliases != null && returnValue"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f1dbffd5fdbd9d374ef6c9cfe897a81335297c8f", "fixCommitParentSHA1": "0c35d333c26ccc856eaed8c635d056c73b238f24", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java\nindex fc40d42..d16ce37 100644\n--- a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java\n@@ -781,7 +781,7 @@\n \n         IScheduledFuture future = s.scheduleAtFixedRate(new ICountdownLatchRunnableTask(\"latch\"), 0, 1, SECONDS);\n \n-        latch.await(10, SECONDS);\n+        latch.await(20, SECONDS);\n         future.cancel(false);\n \n         assertEquals(0, latch.getCount());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 784, "bugNodeStartChar": 31338, "bugNodeLength": 24, "fixLineNum": 784, "fixNodeStartChar": 31338, "fixNodeLength": 24, "sourceBeforeFix": "latch.await(10,SECONDS)", "sourceAfterFix": "latch.await(20,SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e3f23eba73a39d6606d5b980e41ff1a5c59a734b", "fixCommitParentSHA1": "7aa38c511e643c3e299d3e8b41bb1e47cd1c36db", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java\nindex dbef116..941b5b5 100644\n--- a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceBasicTest.java\n@@ -780,7 +780,7 @@\n \n         IScheduledFuture future = s.scheduleAtFixedRate(new ICountdownLatchRunnableTask(\"latch\"), 0, 1, SECONDS);\n \n-        latch.await(10, SECONDS);\n+        latch.await(20, SECONDS);\n         future.cancel(false);\n \n         assertEquals(0, latch.getCount());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 783, "bugNodeStartChar": 31337, "bugNodeLength": 24, "fixLineNum": 783, "fixNodeStartChar": 31337, "fixNodeLength": 24, "sourceBeforeFix": "latch.await(10,SECONDS)", "sourceAfterFix": "latch.await(20,SECONDS)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "add5201faec9cfe762bfd39be3d18c355a5aa728", "fixCommitParentSHA1": "1c336970310c74a80e034af8a03c3ecb4b5eb8e7", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/statistics/ClientStatisticsTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/statistics/ClientStatisticsTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/statistics/ClientStatisticsTest.java\nindex 09b4191..a062c9b 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/statistics/ClientStatisticsTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/statistics/ClientStatisticsTest.java\n@@ -343,7 +343,7 @@\n             public void run() {\n                 getStats(client, clientEngine);\n             }\n-        }, STATS_PERIOD_SECONDS * 3);\n+        });\n     }\n \n     private static void waitForNextStatsCollection(final HazelcastClientInstanceImpl client, final ClientEngineImpl clientEngine,\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 341, "bugNodeStartChar": 15923, "bugNodeLength": 192, "fixLineNum": 341, "fixNodeStartChar": 15923, "fixNodeLength": 166, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run(){     getStats(client,clientEngine);   } } ,STATS_PERIOD_SECONDS * 3)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run(){     getStats(client,clientEngine);   } } )"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "effa9cd38f507623f150ca2dc4d19867b9614162", "fixCommitParentSHA1": "67f43ba99cc1c116c064ba5707ee32100d54e179", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java b/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java\nindex 10014a8..aee54fe 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java\n@@ -102,14 +102,14 @@\n \n     @Test\n     public void testMBeanHasLeaseTime_whenLockedWithLeaseTime_mustHaveRemainingLeaseBeforeItExpires() throws Exception {\n-        lock.lock(1000, TimeUnit.MILLISECONDS);\n+        lock.lock(10000, TimeUnit.MILLISECONDS);\n         long startTime = Clock.currentTimeMillis();\n \n         long remainingLeaseTime = getLongAttribute(\"remainingLeaseTime\");\n         long timePassed = Clock.currentTimeMillis() - startTime;\n         boolean hasLeaseRemaining = remainingLeaseTime > 0;\n \n-        assertTrue(hasLeaseRemaining || timePassed >= 1000);\n+        assertTrue(hasLeaseRemaining || timePassed >= 10000);\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 105, "bugNodeStartChar": 3717, "bugNodeLength": 38, "fixLineNum": 105, "fixNodeStartChar": 3717, "fixNodeLength": 39, "sourceBeforeFix": "lock.lock(1000,TimeUnit.MILLISECONDS)", "sourceAfterFix": "lock.lock(10000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "effa9cd38f507623f150ca2dc4d19867b9614162", "fixCommitParentSHA1": "67f43ba99cc1c116c064ba5707ee32100d54e179", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java b/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java\nindex 10014a8..aee54fe 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/jmx/LockMBeanTest.java\n@@ -102,14 +102,14 @@\n \n     @Test\n     public void testMBeanHasLeaseTime_whenLockedWithLeaseTime_mustHaveRemainingLeaseBeforeItExpires() throws Exception {\n-        lock.lock(1000, TimeUnit.MILLISECONDS);\n+        lock.lock(10000, TimeUnit.MILLISECONDS);\n         long startTime = Clock.currentTimeMillis();\n \n         long remainingLeaseTime = getLongAttribute(\"remainingLeaseTime\");\n         long timePassed = Clock.currentTimeMillis() - startTime;\n         boolean hasLeaseRemaining = remainingLeaseTime > 0;\n \n-        assertTrue(hasLeaseRemaining || timePassed >= 1000);\n+        assertTrue(hasLeaseRemaining || timePassed >= 10000);\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 112, "bugNodeStartChar": 4050, "bugNodeLength": 18, "fixLineNum": 112, "fixNodeStartChar": 4050, "fixNodeLength": 19, "sourceBeforeFix": "timePassed >= 1000", "sourceAfterFix": "timePassed >= 10000"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6569d3735d3e5bc95a0bbe3302a8471d98bd4b11", "fixCommitParentSHA1": "70d9dd211f2043c93385450d4114b30c91baf5b0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java b/hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java\nindex 8d3a842..365b4e9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/ascii/rest/HttpPostCommandProcessor.java\n@@ -847,7 +847,7 @@\n         if (data == null) {\n             return false;\n         }\n-        final String[] strList = bytesToString(data).split(\"&\");\n+        final String[] strList = bytesToString(data).split(\"&\", -1);\n         return authenticate(command, strList[0], strList.length > 1 ? strList[1] : null);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 850, "bugNodeStartChar": 38039, "bugNodeLength": 30, "fixLineNum": 850, "fixNodeStartChar": 38039, "fixNodeLength": 34, "sourceBeforeFix": "bytesToString(data).split(\"&\")", "sourceAfterFix": "bytesToString(data).split(\"&\",-1)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "70d9dd211f2043c93385450d4114b30c91baf5b0", "fixCommitParentSHA1": "1e04252b60d5462b6e3b71cfd5fdd2c357602e9d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationManager.java b/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationManager.java\nindex 1fbfdba..468c99d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationManager.java\n@@ -666,7 +666,7 @@\n         assert node.isMaster();\n         assert partitionStateManager.isInitialized();\n \n-        List<MigrationInfo> migrations = getCompletedMigrationsCopy();\n+        final List<MigrationInfo> migrations = getCompletedMigrationsCopy();\n         if (logger.isFineEnabled()) {\n             logger.fine(\"Publishing completed migrations [\" + migrations.size() + \"]: \" + migrations);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 669, "bugNodeStartChar": 29204, "bugNodeLength": 62, "fixLineNum": 669, "fixNodeStartChar": 29204, "fixNodeLength": 68, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "136b7c96cda18e911189c0ef85af78b57d7922bc", "fixCommitParentSHA1": "7d0f479669f1de0dcf749656df48615959d3eae7", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/RepartitioningStressTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/RepartitioningStressTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/RepartitioningStressTest.java\nindex 351f482..69cc348 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/RepartitioningStressTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/RepartitioningStressTest.java\n@@ -55,7 +55,7 @@\n @Category(NightlyTest.class)\n public class RepartitioningStressTest extends HazelcastTestSupport {\n \n-    private static final int DUPLICATE_OPS_TOLERANCE = 5;\n+    private static final int DUPLICATE_OPS_TOLERANCE = 10;\n \n     private static final int INITIAL_MEMBER_COUNT = 5;\n     private static final int THREAD_COUNT = 10;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 58, "bugNodeStartChar": 2185, "bugNodeLength": 27, "fixLineNum": 58, "fixNodeStartChar": 2185, "fixNodeLength": 28, "sourceBeforeFix": "DUPLICATE_OPS_TOLERANCE=5", "sourceAfterFix": "DUPLICATE_OPS_TOLERANCE=10"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6", "fixCommitParentSHA1": "b8d461f7c0bd7a332b76dc2cbfe07974f822589d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\nindex d5be62c..c89f143 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n@@ -104,10 +104,10 @@\n \n     @Test\n     @SuppressWarnings(\"deprecation\")\n-    public void testQueryWithTTL() throws Exception {\n+    public void testQueryWithTTL() {\n         Config config = getConfig();\n         String mapName = \"default\";\n-        config.getMapConfig(mapName).setTimeToLiveSeconds(5);\n+        config.getMapConfig(mapName).setTimeToLiveSeconds(10);\n \n         HazelcastInstance instance = createHazelcastInstance(config);\n \n@@ -140,7 +140,9 @@\n \n         // check the query result before eviction\n         Collection values = map.values(new SqlPredicate(\"active\"));\n-        assertEquals(activeEmployees, values.size());\n+        assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",\n+                activeEmployees, values.size(), allEmployees - latch.getCount()),\n+                activeEmployees, values.size());\n \n         // wait until eviction is completed\n         assertOpenEventually(latch);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 105, "bugNodeStartChar": 3768, "bugNodeLength": 1683, "fixLineNum": 105, "fixNodeStartChar": 3768, "fixNodeLength": 1666, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6", "fixCommitParentSHA1": "b8d461f7c0bd7a332b76dc2cbfe07974f822589d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\nindex d5be62c..c89f143 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n@@ -104,10 +104,10 @@\n \n     @Test\n     @SuppressWarnings(\"deprecation\")\n-    public void testQueryWithTTL() throws Exception {\n+    public void testQueryWithTTL() {\n         Config config = getConfig();\n         String mapName = \"default\";\n-        config.getMapConfig(mapName).setTimeToLiveSeconds(5);\n+        config.getMapConfig(mapName).setTimeToLiveSeconds(10);\n \n         HazelcastInstance instance = createHazelcastInstance(config);\n \n@@ -140,7 +140,9 @@\n \n         // check the query result before eviction\n         Collection values = map.values(new SqlPredicate(\"active\"));\n-        assertEquals(activeEmployees, values.size());\n+        assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",\n+                activeEmployees, values.size(), allEmployees - latch.getCount()),\n+                activeEmployees, values.size());\n \n         // wait until eviction is completed\n         assertOpenEventually(latch);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 3946, "bugNodeLength": 52, "fixLineNum": 110, "fixNodeStartChar": 3946, "fixNodeLength": 53, "sourceBeforeFix": "config.getMapConfig(mapName).setTimeToLiveSeconds(5)", "sourceAfterFix": "config.getMapConfig(mapName).setTimeToLiveSeconds(10)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6", "fixCommitParentSHA1": "b8d461f7c0bd7a332b76dc2cbfe07974f822589d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\nindex d5be62c..c89f143 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n@@ -104,10 +104,10 @@\n \n     @Test\n     @SuppressWarnings(\"deprecation\")\n-    public void testQueryWithTTL() throws Exception {\n+    public void testQueryWithTTL() {\n         Config config = getConfig();\n         String mapName = \"default\";\n-        config.getMapConfig(mapName).setTimeToLiveSeconds(5);\n+        config.getMapConfig(mapName).setTimeToLiveSeconds(10);\n \n         HazelcastInstance instance = createHazelcastInstance(config);\n \n@@ -140,7 +140,9 @@\n \n         // check the query result before eviction\n         Collection values = map.values(new SqlPredicate(\"active\"));\n-        assertEquals(activeEmployees, values.size());\n+        assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",\n+                activeEmployees, values.size(), allEmployees - latch.getCount()),\n+                activeEmployees, values.size());\n \n         // wait until eviction is completed\n         assertOpenEventually(latch);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 143, "bugNodeStartChar": 5171, "bugNodeLength": 44, "fixLineNum": 143, "fixNodeStartChar": 5171, "fixNodeLength": 222, "sourceBeforeFix": "assertEquals(activeEmployees,values.size())", "sourceAfterFix": "assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",activeEmployees,values.size(),allEmployees - latch.getCount()),activeEmployees,values.size())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f7c8057681e53272f09a59ab04acd07407727470", "fixCommitParentSHA1": "aa8ea82334aad908dd134e8fec388ae42cd5a49d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java b/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java\nindex 3468240..dd0d3cc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java\n@@ -84,11 +84,11 @@\n         IMap<Object, Object> map2 = h2.getMap(mapName);\n         map1.put(\"key1\", \"value\");\n         // prevent updating at the same time\n-        sleepAtLeastMillis(1);\n+        sleepAtLeastMillis(1000);\n         map2.put(\"key1\", \"LatestUpdatedValue\");\n         map2.put(\"key2\", \"value2\");\n         // prevent updating at the same time\n-        sleepAtLeastMillis(1);\n+        sleepAtLeastMillis(1000);\n         map1.put(\"key2\", \"LatestUpdatedValue2\");\n \n         // allow merge process to continue\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 87, "bugNodeStartChar": 3367, "bugNodeLength": 21, "fixLineNum": 87, "fixNodeStartChar": 3367, "fixNodeLength": 24, "sourceBeforeFix": "sleepAtLeastMillis(1)", "sourceAfterFix": "sleepAtLeastMillis(1000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "f7c8057681e53272f09a59ab04acd07407727470", "fixCommitParentSHA1": "aa8ea82334aad908dd134e8fec388ae42cd5a49d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java b/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java\nindex 3468240..dd0d3cc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/MergePolicyTest.java\n@@ -84,11 +84,11 @@\n         IMap<Object, Object> map2 = h2.getMap(mapName);\n         map1.put(\"key1\", \"value\");\n         // prevent updating at the same time\n-        sleepAtLeastMillis(1);\n+        sleepAtLeastMillis(1000);\n         map2.put(\"key1\", \"LatestUpdatedValue\");\n         map2.put(\"key2\", \"value2\");\n         // prevent updating at the same time\n-        sleepAtLeastMillis(1);\n+        sleepAtLeastMillis(1000);\n         map1.put(\"key2\", \"LatestUpdatedValue2\");\n \n         // allow merge process to continue\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 91, "bugNodeStartChar": 3527, "bugNodeLength": 21, "fixLineNum": 91, "fixNodeStartChar": 3527, "fixNodeLength": 24, "sourceBeforeFix": "sleepAtLeastMillis(1)", "sourceAfterFix": "sleepAtLeastMillis(1000)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "fixCommitParentSHA1": "0f230078a8e2d3e298f296855ae1bb00bd7441a9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java\nindex 3ddb54b..4154e17 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java\n@@ -28,7 +28,7 @@\n import static com.hazelcast.internal.nearcache.NearCacheTestUtils.getBaseConfig;\n import static org.mockito.Mockito.mock;\n \n-abstract class AbstractInvalidatorTest extends HazelcastTestSupport {\n+public abstract class AbstractInvalidatorTest extends HazelcastTestSupport {\n \n     private Invalidator invalidator;\n     private Data key;\n@@ -42,7 +42,7 @@\n         key = mock(Data.class);\n     }\n \n-    abstract Invalidator createInvalidator(NodeEngineImpl nodeEngine);\n+    public abstract Invalidator createInvalidator(NodeEngineImpl nodeEngine);\n \n     @Test(expected = NullPointerException.class)\n     public void testInvalidate_withInvalidKey() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 31, "bugNodeStartChar": 1145, "bugNodeLength": 1369, "fixLineNum": 31, "fixNodeStartChar": 1145, "fixNodeLength": 1376, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "fixCommitParentSHA1": "0f230078a8e2d3e298f296855ae1bb00bd7441a9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java\nindex 3ddb54b..4154e17 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/AbstractInvalidatorTest.java\n@@ -28,7 +28,7 @@\n import static com.hazelcast.internal.nearcache.NearCacheTestUtils.getBaseConfig;\n import static org.mockito.Mockito.mock;\n \n-abstract class AbstractInvalidatorTest extends HazelcastTestSupport {\n+public abstract class AbstractInvalidatorTest extends HazelcastTestSupport {\n \n     private Invalidator invalidator;\n     private Data key;\n@@ -42,7 +42,7 @@\n         key = mock(Data.class);\n     }\n \n-    abstract Invalidator createInvalidator(NodeEngineImpl nodeEngine);\n+    public abstract Invalidator createInvalidator(NodeEngineImpl nodeEngine);\n \n     @Test(expected = NullPointerException.class)\n     public void testInvalidate_withInvalidKey() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 45, "bugNodeStartChar": 1582, "bugNodeLength": 66, "fixLineNum": 45, "fixNodeStartChar": 1582, "fixNodeLength": 73, "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "fixCommitParentSHA1": "0f230078a8e2d3e298f296855ae1bb00bd7441a9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/BatchInvalidatorTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/BatchInvalidatorTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/BatchInvalidatorTest.java\nindex a877423..901c849 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/BatchInvalidatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/BatchInvalidatorTest.java\n@@ -33,7 +33,7 @@\n public class BatchInvalidatorTest extends AbstractInvalidatorTest {\n \n     @Override\n-    Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n+    public Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n         return new BatchInvalidator(MapService.SERVICE_NAME, 100, 10, TRUE_FILTER, nodeEngine);\n     }\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 35, "bugNodeStartChar": 1422, "bugNodeLength": 174, "fixLineNum": 35, "fixNodeStartChar": 1422, "fixNodeLength": 181, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "4e24ea071ff17f2b98b47dd42dcb4a0fd0ac74e6", "fixCommitParentSHA1": "0f230078a8e2d3e298f296855ae1bb00bd7441a9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/NonStopInvalidatorTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/NonStopInvalidatorTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/NonStopInvalidatorTest.java\nindex 2a8637e..5f7e91a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/NonStopInvalidatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/NonStopInvalidatorTest.java\n@@ -33,7 +33,7 @@\n public class NonStopInvalidatorTest extends AbstractInvalidatorTest {\n \n     @Override\n-    Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n+    public Invalidator createInvalidator(NodeEngineImpl nodeEngine) {\n         return new NonStopInvalidator(MapService.SERVICE_NAME, TRUE_FILTER, nodeEngine);\n     }\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 35, "bugNodeStartChar": 1426, "bugNodeLength": 167, "fixLineNum": 35, "fixNodeStartChar": 1426, "fixNodeLength": 174, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1ff20529a2099ff20a8d6af0751ee410541c770f", "fixCommitParentSHA1": "13f4d0816620fa0d07ae852c163a873ea9fea7a1", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\nindex 073d4e4..172009a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n@@ -49,7 +49,7 @@\n     @Parameters(name = \"precision:{0}, errorRange:{1}\")\n     public static Collection<Object[]> parameters() {\n         return asList(new Object[][]{\n-                {11, 6.5f},\n+                {11, 7.0f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                 {14, 3.0f},\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 1906, "bugNodeLength": 10, "fixLineNum": 52, "fixNodeStartChar": 1906, "fixNodeLength": 10, "sourceBeforeFix": "{11,6.5f}", "sourceAfterFix": "{11,7.0f}"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "21ca7ec66eb0be7576b62766d4b51fdea7d05110", "fixCommitParentSHA1": "5f937c0864d88852b0decd4492330b05c7da83f5", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\nindex 073d4e4..172009a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n@@ -49,7 +49,7 @@\n     @Parameters(name = \"precision:{0}, errorRange:{1}\")\n     public static Collection<Object[]> parameters() {\n         return asList(new Object[][]{\n-                {11, 6.5f},\n+                {11, 7.0f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                 {14, 3.0f},\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 1906, "bugNodeLength": 10, "fixLineNum": 52, "fixNodeStartChar": 1906, "fixNodeLength": 10, "sourceBeforeFix": "{11,6.5f}", "sourceAfterFix": "{11,7.0f}"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "dd3cd7aa7f719f1ebbd8d191496bf304abd67f20", "fixCommitParentSHA1": "20e1d6e3d1602c10a989f3ad0a834e89295c7236", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java b/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java\nindex 1335e7c..0d28e99 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java\n@@ -72,7 +72,7 @@\n     @Override\n     public void set(K key, V value) {\n         begin();\n-        transactionalMap.put(key, value);\n+        transactionalMap.set(key, value);\n         commit();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 75, "bugNodeStartChar": 2329, "bugNodeLength": 32, "fixLineNum": 75, "fixNodeStartChar": 2329, "fixNodeLength": 32, "sourceBeforeFix": "transactionalMap.put(key,value)", "sourceAfterFix": "transactionalMap.set(key,value)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dd3cd7aa7f719f1ebbd8d191496bf304abd67f20", "fixCommitParentSHA1": "20e1d6e3d1602c10a989f3ad0a834e89295c7236", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java b/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java\nindex 1335e7c..0d28e99 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/adapter/TransactionalMapDataStructureAdapter.java\n@@ -72,7 +72,7 @@\n     @Override\n     public void set(K key, V value) {\n         begin();\n-        transactionalMap.put(key, value);\n+        transactionalMap.set(key, value);\n         commit();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 75, "bugNodeStartChar": 2329, "bugNodeLength": 32, "fixLineNum": 75, "fixNodeStartChar": 2329, "fixNodeLength": 32, "sourceBeforeFix": "transactionalMap.put(key,value)", "sourceAfterFix": "transactionalMap.set(key,value)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "72242e0da27bbde8f9f0c1625c461458177173ee", "fixCommitParentSHA1": "c6145b970f29b926f61c2449c2409b69543b32f2", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex 89627aa..672d00d 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -625,7 +625,7 @@\n         int randomKey = random.nextInt(mapSize);\n         clientMap.submitToKey(randomKey, new IncrementEntryProcessor(), callback);\n \n-        assertOpenEventually(latch, 3);\n+        assertOpenEventually(latch);\n         assertTrueEventually(new AssertTask() {\n             public void run() {\n                 assertThatOwnedEntryCountEquals(clientMap, mapSize - 1);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 628, "bugNodeStartChar": 22564, "bugNodeLength": 30, "fixLineNum": 628, "fixNodeStartChar": 22564, "fixNodeLength": 27, "sourceBeforeFix": "assertOpenEventually(latch,3)", "sourceAfterFix": "assertOpenEventually(latch)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "8c90febbdb081e6464a1d5025e87befb5e5081e5", "fixCommitParentSHA1": "200911c21e1c495a11e0d76a43cb9580ae945b83", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex 68fe060..ef97303 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -607,7 +607,7 @@\n         int randomKey = random.nextInt(mapSize);\n         clientMap.submitToKey(randomKey, new IncrementEntryProcessor(), callback);\n \n-        assertOpenEventually(latch, 3);\n+        assertOpenEventually(latch);\n         assertTrueEventually(new AssertTask() {\n             public void run() {\n                 assertThatOwnedEntryCountEquals(clientMap, mapSize - 1);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 610, "bugNodeStartChar": 21813, "bugNodeLength": 30, "fixLineNum": 610, "fixNodeStartChar": 21813, "fixNodeLength": 27, "sourceBeforeFix": "assertOpenEventually(latch,3)", "sourceAfterFix": "assertOpenEventually(latch)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3d76925f31db8747ba6726e1c0d568441479de6e", "fixCommitParentSHA1": "8459387c93407382b251f01eca24eba5fdcb4d5f", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java\nindex c2f55a6..e92c5ce 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java\n@@ -245,7 +245,7 @@\n     public void testOneMemberWriteBehindFlush() {\n         TestMapStore testMapStore = new TestMapStore(1, 1, 1);\n         testMapStore.setLoadAllKeys(false);\n-        int writeDelaySeconds = 2;\n+        int writeDelaySeconds = 10;\n         Config config = newConfig(testMapStore, writeDelaySeconds);\n         TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);\n         HazelcastInstance instance = nodeFactory.newHazelcastInstance(config);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 248, "bugNodeStartChar": 10294, "bugNodeLength": 21, "fixLineNum": 248, "fixNodeStartChar": 10294, "fixNodeLength": 22, "sourceBeforeFix": "writeDelaySeconds=2", "sourceAfterFix": "writeDelaySeconds=10"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "22735f4e1c7de3c10301d5c8d5ae37980fd5bd5e", "fixCommitParentSHA1": "e7f0c29148a090239ca5cdf431508728edb54882", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\nindex a442ad1..d211c01 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n@@ -53,7 +53,7 @@\n                 {11, 6.5f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n-                {14, 3.0f},\n+                {14, 3.5f},\n                 {15, 2.5f},\n                 {16, 2.0f},\n         });\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 56, "bugNodeStartChar": 2041, "bugNodeLength": 10, "fixLineNum": 56, "fixNodeStartChar": 2041, "fixNodeLength": 10, "sourceBeforeFix": "{14,3.0f}", "sourceAfterFix": "{14,3.5f}"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "220a7265cb4eafdd5fc40895b5822715b4f4461f", "fixCommitParentSHA1": "02f9028d294910d08e432969886ea4e321d91e89", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\nindex 28029f5..1693c76 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\n@@ -90,7 +90,7 @@\n             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n-            publisher.publishWanReplicationUpdate(name, view);\n+            publisher.publishWanReplicationUpdateBackup(name, view);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 93, "bugNodeStartChar": 3502, "bugNodeLength": 49, "fixLineNum": 93, "fixNodeStartChar": 3502, "fixNodeLength": 55, "sourceBeforeFix": "publisher.publishWanReplicationUpdate(name,view)", "sourceAfterFix": "publisher.publishWanReplicationUpdateBackup(name,view)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "220a7265cb4eafdd5fc40895b5822715b4f4461f", "fixCommitParentSHA1": "02f9028d294910d08e432969886ea4e321d91e89", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\nindex 28029f5..1693c76 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\n@@ -90,7 +90,7 @@\n             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n-            publisher.publishWanReplicationUpdate(name, view);\n+            publisher.publishWanReplicationUpdateBackup(name, view);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 93, "bugNodeStartChar": 3502, "bugNodeLength": 49, "fixLineNum": 93, "fixNodeStartChar": 3502, "fixNodeLength": 55, "sourceBeforeFix": "publisher.publishWanReplicationUpdate(name,view)", "sourceAfterFix": "publisher.publishWanReplicationUpdateBackup(name,view)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7a7748e824e86bf5b7bdbfee026288e48913e2bc", "fixCommitParentSHA1": "631b38d1326197538c5f2287c5ca308260c3284f", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java\nindex 0761496..34b6dbe 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java\n@@ -166,7 +166,7 @@\n         private void assertInFlightInvocationsWereNotGrowing() {\n             assertTrue(\"There are no invocations to be observed!\", maxInvocationCountObserved > 0);\n \n-            long maximumTolerableInvocationCount = (long) (maxInvocationCountObservedDuringWarmup * 1.2);\n+            long maximumTolerableInvocationCount = (long) (maxInvocationCountObservedDuringWarmup * 2);\n             assertTrue(\"Apparently number of in-flight invocations is growing.\"\n                     + \" Max. number of in-flight invocation during first fifth of test duration: \"\n                     + maxInvocationCountObservedDuringWarmup\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 169, "bugNodeStartChar": 6631, "bugNodeLength": 44, "fixLineNum": 169, "fixNodeStartChar": 6631, "fixNodeLength": 42, "sourceBeforeFix": "maxInvocationCountObservedDuringWarmup * 1.2", "sourceAfterFix": "maxInvocationCountObservedDuringWarmup * 2"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ab32f6ec6d48470dc1e601b53708831c261a50b0", "fixCommitParentSHA1": "de3f2bc0e10ccf9ff22351c09775272318b35c8b", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java\nindex 21385ea..f2b469e 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientBackpressureBouncingTest.java\n@@ -166,7 +166,7 @@\n         private void assertInFlightInvocationsWereNotGrowing() {\n             assertTrue(\"There are no invocations to be observed!\", maxInvocationCountObserved > 0);\n \n-            long maximumTolerableInvocationCount = (long) (maxInvocationCountObservedDuringWarmup * 1.2);\n+            long maximumTolerableInvocationCount = (long) (maxInvocationCountObservedDuringWarmup * 2);\n             assertTrue(\"Apparently number of in-flight invocations is growing.\"\n                     + \" Max. number of in-flight invocation during first fifth of test duration: \"\n                     + maxInvocationCountObservedDuringWarmup\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 169, "bugNodeStartChar": 6631, "bugNodeLength": 44, "fixLineNum": 169, "fixNodeStartChar": 6631, "fixNodeLength": 42, "sourceBeforeFix": "maxInvocationCountObservedDuringWarmup * 1.2", "sourceAfterFix": "maxInvocationCountObservedDuringWarmup * 2"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "62581b3da3c90956ae832644efb356b77eaf4d31", "fixCommitParentSHA1": "459cec834a92ea1a65b094b77ba07f07c633039c", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\nindex d77fdcf..df3f887 100644\n--- a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n@@ -389,7 +389,7 @@\n         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n \n-    @Test(timeout = 600000)\n+    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 392, "bugNodeStartChar": 15272, "bugNodeLength": 16, "fixLineNum": 392, "fixNodeStartChar": 15272, "fixNodeLength": 17, "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4499b2c0a2cce073e443436838374e9138ab22d7", "fixCommitParentSHA1": "774dfefe2932405b01298f8717fd1fe84ec937cb", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\nindex d77fdcf..df3f887 100644\n--- a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n@@ -389,7 +389,7 @@\n         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n \n-    @Test(timeout = 600000)\n+    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 392, "bugNodeStartChar": 15272, "bugNodeLength": 16, "fixLineNum": 392, "fixNodeStartChar": 15272, "fixNodeLength": 17, "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c33166435d12434470ecc74eb9b969b89e9de695", "fixCommitParentSHA1": "459cec834a92ea1a65b094b77ba07f07c633039c", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\nindex d77fdcf..df3f887 100644\n--- a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n@@ -389,7 +389,7 @@\n         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n \n-    @Test(timeout = 600000)\n+    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 392, "bugNodeStartChar": 15272, "bugNodeLength": 16, "fixLineNum": 392, "fixNodeStartChar": 15272, "fixNodeLength": 17, "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "85b5d8a7ffa38b0be774ecaf2319112dc076c6f2", "fixCommitParentSHA1": "1157d2c55633a7159e8d0eeef7c2e2d3fc7e6f63", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\nindex d77fdcf..df3f887 100644\n--- a/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/scheduledexecutor/ScheduledExecutorServiceSlowTest.java\n@@ -389,7 +389,7 @@\n         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n \n-    @Test(timeout = 600000)\n+    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 392, "bugNodeStartChar": 15272, "bugNodeLength": 16, "fixLineNum": 392, "fixNodeStartChar": 15272, "fixNodeLength": 17, "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "9daa0e6cc98d8dd2cf17f988ec2dd07fc3608d45", "fixCommitParentSHA1": "189ec73f9a8fb08c218b7242e2f09ac4ae5eda4d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9daa0e6cc98d8dd2cf17f988ec2dd07fc3608d45", "fixCommitParentSHA1": "189ec73f9a8fb08c218b7242e2f09ac4ae5eda4d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "469c7f4b816a3fb7952e7ce9ebdf5aa6f4c15346", "fixCommitParentSHA1": "7a4a550234873f589a42618547ab73bf0b8cadd6", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "469c7f4b816a3fb7952e7ce9ebdf5aa6f4c15346", "fixCommitParentSHA1": "7a4a550234873f589a42618547ab73bf0b8cadd6", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "2778cd8ad6b0f126e5250cc3006459f06991d3ef", "fixCommitParentSHA1": "fa46ea813aff49c8c978ebb8ffe58e6a7983e01d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2778cd8ad6b0f126e5250cc3006459f06991d3ef", "fixCommitParentSHA1": "fa46ea813aff49c8c978ebb8ffe58e6a7983e01d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "5c387443a641305b64f25932de36de766d1f541f", "fixCommitParentSHA1": "3ee84b5ac2da10343a88e7c360871d9547ebdcf5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5c387443a641305b64f25932de36de766d1f541f", "fixCommitParentSHA1": "3ee84b5ac2da10343a88e7c360871d9547ebdcf5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\nindex 3b4f8da..8fc8d8e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DelegatingAddressPicker.java\n@@ -60,7 +60,7 @@\n     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n-            logger.info(\"Using bind address: \" + publicAddress);\n+            logger.info(\"Using bind address: \" + bindAddress);\n \n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 63, "bugNodeStartChar": 2318, "bugNodeLength": 38, "fixLineNum": 63, "fixNodeStartChar": 2318, "fixNodeLength": 36, "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3ee84b5ac2da10343a88e7c360871d9547ebdcf5", "fixCommitParentSHA1": "9d3c7e0b95c84d8ff2d430ff08df4dc3db9982f9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/util/SetUtilTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/util/SetUtilTest.java b/hazelcast/src/test/java/com/hazelcast/util/SetUtilTest.java\nindex 36a7a2a..d304d29 100644\n--- a/hazelcast/src/test/java/com/hazelcast/util/SetUtilTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/util/SetUtilTest.java\n@@ -37,7 +37,7 @@\n \n     @Test\n     public void testConstructor() {\n-        assertUtilityConstructor(BitSetUtils.class);\n+        assertUtilityConstructor(SetUtil.class);\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 40, "bugNodeStartChar": 1397, "bugNodeLength": 17, "fixLineNum": 40, "fixNodeStartChar": 1397, "fixNodeLength": 13, "sourceBeforeFix": "BitSetUtils.class", "sourceAfterFix": "SetUtil.class"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "fixCommitParentSHA1": "adf448ce1da07a8a3562b6d84875c3d9f24173f3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java\nindex 57b00fc..391c428 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java\n@@ -63,7 +63,7 @@\n     HazelcastInstance server1;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);\n \n@@ -101,7 +101,7 @@\n     }\n \n     @Test\n-    public void smoke_near_cache_population() throws Exception {\n+    public void smoke_near_cache_population() {\n         int cacheSize = 1000;\n \n         // 1. populate server side cache\n@@ -109,15 +109,15 @@\n             serverCache1.put(i, i);\n         }\n \n-        // 2. add client with near cache\n+        // 2. add client with Near Cache\n         clientCache = createCacheFromNewClient();\n \n-        // 3. populate client near cache\n+        // 3. populate client Near Cache\n         for (int i = 0; i < cacheSize; i++) {\n             assertNotNull(clientCache.get(i));\n         }\n \n-        // 4. assert number of entries in client near cache\n+        // 4. assert number of entries in client Near Cache\n         assertEquals(cacheSize, ((NearCachedClientCacheProxy) clientCache).getNearCache().size());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 65, "bugNodeStartChar": 2556, "bugNodeLength": 837, "fixLineNum": 65, "fixNodeStartChar": 2556, "fixNodeLength": 820, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "fixCommitParentSHA1": "adf448ce1da07a8a3562b6d84875c3d9f24173f3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java\nindex 57b00fc..391c428 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/cache/impl/nearcache/invalidation/ClientCacheNearCacheSmokeTest.java\n@@ -63,7 +63,7 @@\n     HazelcastInstance server1;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);\n \n@@ -101,7 +101,7 @@\n     }\n \n     @Test\n-    public void smoke_near_cache_population() throws Exception {\n+    public void smoke_near_cache_population() {\n         int cacheSize = 1000;\n \n         // 1. populate server side cache\n@@ -109,15 +109,15 @@\n             serverCache1.put(i, i);\n         }\n \n-        // 2. add client with near cache\n+        // 2. add client with Near Cache\n         clientCache = createCacheFromNewClient();\n \n-        // 3. populate client near cache\n+        // 3. populate client Near Cache\n         for (int i = 0; i < cacheSize; i++) {\n             assertNotNull(clientCache.get(i));\n         }\n \n-        // 4. assert number of entries in client near cache\n+        // 4. assert number of entries in client Near Cache\n         assertEquals(cacheSize, ((NearCachedClientCacheProxy) clientCache).getNearCache().size());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 103, "bugNodeStartChar": 3915, "bugNodeLength": 637, "fixLineNum": 103, "fixNodeStartChar": 3915, "fixNodeLength": 620, "sourceBeforeFix": "1", "sourceAfterFix": "1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e96a6fb6d3cbaf82fc011f7f6df80536adb7dc26", "fixCommitParentSHA1": "779b622a357383999a032e2b78716950daa5c37d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java b/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java\nindex dc7be76..8e834f2 100644\n--- a/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java\n@@ -26,11 +26,11 @@\n \n @RunWith(HazelcastSerialClassRunner.class)\n @Category(QuickTest.class)\n-public class UserCodeDeploymentPermissionTest extends AbstractGenericPermissionTest {\n+public class UserCodeDeploymentPermissionTest extends PermissionTestSupport {\n \n     @Override\n     protected Permission createPermission(String name, String... actions) {\n-        return new CardinalityEstimatorPermission(name, actions);\n+        return new UserCodeDeploymentPermission(actions);\n     }\n \n     @Test\n@@ -45,7 +45,7 @@\n \n     @Test\n     public void checkAllPermission_whenDeploy() {\n-        new CheckPermission().of(\"all\").against(\"deploy\").expect(false).run();\n+        new CheckPermission().of(\"all\").against(\"deploy\").expect(true).run();\n     }\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 27, "bugNodeStartChar": 915, "bugNodeLength": 752, "fixLineNum": 27, "fixNodeStartChar": 915, "fixNodeLength": 744, "sourceBeforeFix": "@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends AbstractGenericPermissionTest {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of(\"deploy\").against(\"deploy\").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of(\"deploy\").against(\"all\").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of(\"all\").against(\"deploy\").expect(false).run();   } } ", "sourceAfterFix": "@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends PermissionTestSupport {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of(\"deploy\").against(\"deploy\").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of(\"deploy\").against(\"all\").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of(\"all\").against(\"deploy\").expect(false).run();   } } "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "e96a6fb6d3cbaf82fc011f7f6df80536adb7dc26", "fixCommitParentSHA1": "779b622a357383999a032e2b78716950daa5c37d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java b/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java\nindex dc7be76..8e834f2 100644\n--- a/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/security/permission/UserCodeDeploymentPermissionTest.java\n@@ -26,11 +26,11 @@\n \n @RunWith(HazelcastSerialClassRunner.class)\n @Category(QuickTest.class)\n-public class UserCodeDeploymentPermissionTest extends AbstractGenericPermissionTest {\n+public class UserCodeDeploymentPermissionTest extends PermissionTestSupport {\n \n     @Override\n     protected Permission createPermission(String name, String... actions) {\n-        return new CardinalityEstimatorPermission(name, actions);\n+        return new UserCodeDeploymentPermission(actions);\n     }\n \n     @Test\n@@ -45,7 +45,7 @@\n \n     @Test\n     public void checkAllPermission_whenDeploy() {\n-        new CheckPermission().of(\"all\").against(\"deploy\").expect(false).run();\n+        new CheckPermission().of(\"all\").against(\"deploy\").expect(true).run();\n     }\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 48, "bugNodeStartChar": 1588, "bugNodeLength": 63, "fixLineNum": 48, "fixNodeStartChar": 1588, "fixNodeLength": 62, "sourceBeforeFix": "new CheckPermission().of(\"all\").against(\"deploy\").expect(false)", "sourceAfterFix": "new CheckPermission().of(\"all\").against(\"deploy\").expect(true)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "fixCommitParentSHA1": "721fe0d93a41192ebf828b9b4f1f44d4f674bee0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\nindex 280c903..26503f6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n@@ -34,7 +34,7 @@\n /**\n  * A writer like structure dedicated for the {@link DiagnosticsPlugin} rendering.\n  */\n-class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n+public class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n \n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);\n \n@@ -67,11 +67,11 @@\n     // used to write primitives without causing litter\n     private StringBuilder stringBuilder = new StringBuilder();\n \n-    DiagnosticsLogWriterImpl() {\n+    public DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n \n-    DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n+    public DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 34, "bugNodeStartChar": 1190, "bugNodeLength": 7299, "fixLineNum": 34, "fixNodeStartChar": 1190, "fixNodeLength": 7306, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "fixCommitParentSHA1": "721fe0d93a41192ebf828b9b4f1f44d4f674bee0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\nindex 280c903..26503f6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n@@ -34,7 +34,7 @@\n /**\n  * A writer like structure dedicated for the {@link DiagnosticsPlugin} rendering.\n  */\n-class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n+public class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n \n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);\n \n@@ -67,11 +67,11 @@\n     // used to write primitives without causing litter\n     private StringBuilder stringBuilder = new StringBuilder();\n \n-    DiagnosticsLogWriterImpl() {\n+    public DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n \n-    DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n+    public DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 70, "bugNodeStartChar": 2695, "bugNodeLength": 55, "fixLineNum": 70, "fixNodeStartChar": 2695, "fixNodeLength": 62, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "fixCommitParentSHA1": "721fe0d93a41192ebf828b9b4f1f44d4f674bee0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\nindex 280c903..26503f6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n@@ -34,7 +34,7 @@\n /**\n  * A writer like structure dedicated for the {@link DiagnosticsPlugin} rendering.\n  */\n-class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n+public class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n \n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);\n \n@@ -67,11 +67,11 @@\n     // used to write primitives without causing litter\n     private StringBuilder stringBuilder = new StringBuilder();\n \n-    DiagnosticsLogWriterImpl() {\n+    public DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n \n-    DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n+    public DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 74, "bugNodeStartChar": 2756, "bugNodeLength": 108, "fixLineNum": 74, "fixNodeStartChar": 2756, "fixNodeLength": 115, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3975ee606a2718fc08991a306f3dfa0fcc89e56a", "fixCommitParentSHA1": "ec3e5cad5e6291a7b36ebfbc5a2d6a3c45cf9e4d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueAbstractTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueAbstractTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueAbstractTest.java\nindex 6fb746a..79f3f8c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueAbstractTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueAbstractTest.java\n@@ -550,7 +550,7 @@\n         @Override\n         public void run() {\n             try {\n-                queue.poll(2, TimeUnit.SECONDS);\n+                queue.poll(15, TimeUnit.SECONDS);\n \n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 553, "bugNodeStartChar": 14847, "bugNodeLength": 31, "fixLineNum": 553, "fixNodeStartChar": 14847, "fixNodeLength": 32, "sourceBeforeFix": "queue.poll(2,TimeUnit.SECONDS)", "sourceAfterFix": "queue.poll(15,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "758e81e10294ec1c3c6623b6540505ef4fd46146", "fixCommitParentSHA1": "bb0cbcd599bbb0d34f694c804ebf8ad33b06713f", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\nindex b182fa5..650e22c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/diagnostics/DiagnosticsLogWriterImpl.java\n@@ -51,7 +51,7 @@\n     //32 chars should be more than enough to encode primitives\n     private static final int CHARS_LENGTH = 32;\n \n-    private final StringBuffer tmpSb = new StringBuffer();\n+    private final StringBuilder tmpSb = new StringBuilder();\n     private final boolean includeEpochTime;\n \n     private int sectionLevel = -1;\n@@ -61,10 +61,10 @@\n     private final Calendar calendar = new GregorianCalendar(TimeZone.getDefault());\n     private final Date date = new Date();\n \n-    // used for encoding primitives.\n+    // used for encoding primitives\n     private char[] chars = new char[CHARS_LENGTH];\n \n-    // used to write primitives without causing litter.\n+    // used to write primitives without causing litter\n     private StringBuilder stringBuilder = new StringBuilder();\n \n     public DiagnosticsLogWriterImpl() {\n@@ -149,7 +149,7 @@\n         write(value);\n     }\n \n-    // we can't rely on NumberFormat since it generates a ton of garbage\n+    // we can't rely on NumberFormat, since it generates a ton of garbage\n     @SuppressWarnings(\"checkstyle:magicnumber\")\n     void writeLong(long value) {\n         if (value == Long.MIN_VALUE) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 54, "bugNodeStartChar": 2125, "bugNodeLength": 54, "fixLineNum": 54, "fixNodeStartChar": 2125, "fixNodeLength": 56, "sourceBeforeFix": "private final StringBuffer tmpSb=new StringBuffer(); ", "sourceAfterFix": "private final StringBuilder tmpSb=new StringBuilder(); "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1c1d2f253af23a9e61cae30d311ee6cd257fdac2", "fixCommitParentSHA1": "fcd8d2d9dc32b1162161824306263d2ec3354326", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\nindex 2d62baa..052cc7b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n@@ -190,7 +190,7 @@\n \n     @Test\n     public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {\n-        int callTimeoutMillis = 3000;\n+        int callTimeoutMillis = 6000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMillis);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 193, "bugNodeStartChar": 6816, "bugNodeLength": 24, "fixLineNum": 193, "fixNodeStartChar": 6816, "fixNodeLength": 24, "sourceBeforeFix": "callTimeoutMillis=3000", "sourceAfterFix": "callTimeoutMillis=6000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "659952f35b3acd0579987bb9169a19610df2a6c6", "fixCommitParentSHA1": "72b558b1acfbccd6fbc2a3084228c2eb82bfa4d3", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\nindex 2d62baa..052cc7b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n@@ -190,7 +190,7 @@\n \n     @Test\n     public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {\n-        int callTimeoutMillis = 3000;\n+        int callTimeoutMillis = 6000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMillis);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 193, "bugNodeStartChar": 6816, "bugNodeLength": 24, "fixLineNum": 193, "fixNodeStartChar": 6816, "fixNodeLength": 24, "sourceBeforeFix": "callTimeoutMillis=3000", "sourceAfterFix": "callTimeoutMillis=6000"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "884163c6775a5600123a026c4cd7e0d91b57338e", "fixCommitParentSHA1": "cc021433b0fb4f166081e0e8aef1928d2e57a021", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java b/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java\nindex 9d84fcb..ac4e3d9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java\n@@ -318,7 +318,7 @@\n \n     private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {\n         String mapName = eventJournalConfig.getMapName();\n-        String cacheName = eventJournalConfig.getMapName();\n+        String cacheName = eventJournalConfig.getCacheName();\n         synchronized (journalMutex) {\n             EventJournalConfig currentMapJournalConfig = null;\n             if (mapName != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 321, "bugNodeStartChar": 16058, "bugNodeLength": 31, "fixLineNum": 321, "fixNodeStartChar": 16058, "fixNodeLength": 33, "sourceBeforeFix": "eventJournalConfig.getMapName()", "sourceAfterFix": "eventJournalConfig.getCacheName()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "884163c6775a5600123a026c4cd7e0d91b57338e", "fixCommitParentSHA1": "cc021433b0fb4f166081e0e8aef1928d2e57a021", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java b/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java\nindex 9d84fcb..ac4e3d9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/dynamicconfig/ClusterWideConfigurationService.java\n@@ -318,7 +318,7 @@\n \n     private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {\n         String mapName = eventJournalConfig.getMapName();\n-        String cacheName = eventJournalConfig.getMapName();\n+        String cacheName = eventJournalConfig.getCacheName();\n         synchronized (journalMutex) {\n             EventJournalConfig currentMapJournalConfig = null;\n             if (mapName != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 321, "bugNodeStartChar": 16058, "bugNodeLength": 31, "fixLineNum": 321, "fixNodeStartChar": 16058, "fixNodeLength": 33, "sourceBeforeFix": "eventJournalConfig.getMapName()", "sourceAfterFix": "eventJournalConfig.getCacheName()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c53c472d8a713e37857d9a66f5d1871dacc2c815", "fixCommitParentSHA1": "1d6613f4538350333c5e642804ee7b409a52937a", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/test/TestHazelcastFactory.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/test/TestHazelcastFactory.java b/hazelcast-client/src/test/java/com/hazelcast/client/test/TestHazelcastFactory.java\nindex 8c789cc..bed4ff5 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/test/TestHazelcastFactory.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/test/TestHazelcastFactory.java\n@@ -96,7 +96,7 @@\n                 Collection<InetSocketAddress> inetAddresses = new ArrayList<InetSocketAddress>();\n                 for (Address address : getKnownAddresses()) {\n                     Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getPort(),\n-                            address.getHost(), 3);\n+                            address.getHost(), 1);\n                     inetAddresses.addAll(addresses);\n                 }\n                 return inetAddresses;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 98, "bugNodeStartChar": 4094, "bugNodeLength": 109, "fixLineNum": 98, "fixNodeStartChar": 4094, "fixNodeLength": 109, "sourceBeforeFix": "AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),3)", "sourceAfterFix": "AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),1)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "6d74c7fe901c4279f977a5d9b9f76f833e31cdb6", "fixCommitParentSHA1": "b1e6db2cacc7c0492aa143c5344f17895b2d7147", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\nindex 92f1fa1..b329c47 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n@@ -55,10 +55,10 @@\n     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     // only used for testing\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n \n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 58, "bugNodeStartChar": 2451, "bugNodeLength": 91, "fixLineNum": 58, "fixNodeStartChar": 2451, "fixNodeLength": 92, "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\",60,SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "6d74c7fe901c4279f977a5d9b9f76f833e31cdb6", "fixCommitParentSHA1": "b1e6db2cacc7c0492aa143c5344f17895b2d7147", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\nindex 92f1fa1..b329c47 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n@@ -55,10 +55,10 @@\n     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     // only used for testing\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n \n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 2658, "bugNodeLength": 95, "fixLineNum": 61, "fixNodeStartChar": 2658, "fixNodeLength": 96, "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",30,SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "75d32d68cf130e7d43dfe361a34ebc3c74e61e3b", "fixCommitParentSHA1": "e0908eb296c538962d263112c071830dd51119ee", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\nindex 00f5d02..87c2b8c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n@@ -55,10 +55,10 @@\n     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     // only used for testing\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n \n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 58, "bugNodeStartChar": 2452, "bugNodeLength": 91, "fixLineNum": 58, "fixNodeStartChar": 2452, "fixNodeLength": 92, "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\",60,SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "75d32d68cf130e7d43dfe361a34ebc3c74e61e3b", "fixCommitParentSHA1": "e0908eb296c538962d263112c071830dd51119ee", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\nindex 00f5d02..87c2b8c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/RepairingTask.java\n@@ -55,10 +55,10 @@\n     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     // only used for testing\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n-            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n+            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n \n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 2659, "bugNodeLength": 95, "fixLineNum": 61, "fixNodeStartChar": 2659, "fixNodeLength": 96, "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",30,SECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5703c62d3fdc8cd660e661ef1de9cd21b7a33bf3", "fixCommitParentSHA1": "5f62510ee40ba78f3d5a35549e204841e0a0a1c1", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/MapNearCacheSerializationCountTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/MapNearCacheSerializationCountTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/MapNearCacheSerializationCountTest.java\nindex f312431..857fcd2 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/MapNearCacheSerializationCountTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/MapNearCacheSerializationCountTest.java\n@@ -147,7 +147,7 @@\n         IMap<K, V> nearCacheMap = nearCacheMember.getMap(DEFAULT_NEAR_CACHE_NAME);\n         IMap<K, V> dataMap = dataMember.getMap(DEFAULT_NEAR_CACHE_NAME);\n \n-        NearCacheManager nearCacheManager = getMapNearCacheManager(dataMember);\n+        NearCacheManager nearCacheManager = getMapNearCacheManager(nearCacheMember);\n         NearCache<Data, String> nearCache = nearCacheManager.getNearCache(DEFAULT_NEAR_CACHE_NAME);\n \n         return new NearCacheTestContextBuilder<K, V, Data, String>(nearCacheConfig, getSerializationService(dataMember))\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 150, "bugNodeStartChar": 7232, "bugNodeLength": 34, "fixLineNum": 150, "fixNodeStartChar": 7232, "fixNodeLength": 39, "sourceBeforeFix": "getMapNearCacheManager(dataMember)", "sourceAfterFix": "getMapNearCacheManager(nearCacheMember)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e31566903a1db25e16d5dd82edd2ec5428e78266", "fixCommitParentSHA1": "8be13173f139312e9bcbe1b1ff65269b165fce5d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex 14b27bc..d5df99d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -776,16 +776,16 @@\n \n     public static void assertJoinable(long timeoutSeconds, Thread... threads) {\n         try {\n-            long remainingTimeout = TimeUnit.SECONDS.toNanos(timeoutSeconds);\n+            long remainingTimeout = TimeUnit.SECONDS.toMillis(timeoutSeconds);\n             for (Thread thread : threads) {\n-                long start = System.nanoTime();\n+                long start = System.currentTimeMillis();\n                 thread.join(remainingTimeout);\n \n                 if (thread.isAlive()) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n                 }\n \n-                long duration = System.nanoTime() - start;\n+                long duration = System.currentTimeMillis() - start;\n                 remainingTimeout -= duration;\n                 if (remainingTimeout <= 0) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 779, "bugNodeStartChar": 29674, "bugNodeLength": 40, "fixLineNum": 779, "fixNodeStartChar": 29674, "fixNodeLength": 41, "sourceBeforeFix": "TimeUnit.SECONDS.toNanos(timeoutSeconds)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(timeoutSeconds)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e31566903a1db25e16d5dd82edd2ec5428e78266", "fixCommitParentSHA1": "8be13173f139312e9bcbe1b1ff65269b165fce5d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex 14b27bc..d5df99d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -776,16 +776,16 @@\n \n     public static void assertJoinable(long timeoutSeconds, Thread... threads) {\n         try {\n-            long remainingTimeout = TimeUnit.SECONDS.toNanos(timeoutSeconds);\n+            long remainingTimeout = TimeUnit.SECONDS.toMillis(timeoutSeconds);\n             for (Thread thread : threads) {\n-                long start = System.nanoTime();\n+                long start = System.currentTimeMillis();\n                 thread.join(remainingTimeout);\n \n                 if (thread.isAlive()) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n                 }\n \n-                long duration = System.nanoTime() - start;\n+                long duration = System.currentTimeMillis() - start;\n                 remainingTimeout -= duration;\n                 if (remainingTimeout <= 0) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 779, "bugNodeStartChar": 29674, "bugNodeLength": 40, "fixLineNum": 779, "fixNodeStartChar": 29674, "fixNodeLength": 41, "sourceBeforeFix": "TimeUnit.SECONDS.toNanos(timeoutSeconds)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(timeoutSeconds)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e31566903a1db25e16d5dd82edd2ec5428e78266", "fixCommitParentSHA1": "8be13173f139312e9bcbe1b1ff65269b165fce5d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex 14b27bc..d5df99d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -776,16 +776,16 @@\n \n     public static void assertJoinable(long timeoutSeconds, Thread... threads) {\n         try {\n-            long remainingTimeout = TimeUnit.SECONDS.toNanos(timeoutSeconds);\n+            long remainingTimeout = TimeUnit.SECONDS.toMillis(timeoutSeconds);\n             for (Thread thread : threads) {\n-                long start = System.nanoTime();\n+                long start = System.currentTimeMillis();\n                 thread.join(remainingTimeout);\n \n                 if (thread.isAlive()) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n                 }\n \n-                long duration = System.nanoTime() - start;\n+                long duration = System.currentTimeMillis() - start;\n                 remainingTimeout -= duration;\n                 if (remainingTimeout <= 0) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 781, "bugNodeStartChar": 29789, "bugNodeLength": 17, "fixLineNum": 781, "fixNodeStartChar": 29789, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e31566903a1db25e16d5dd82edd2ec5428e78266", "fixCommitParentSHA1": "8be13173f139312e9bcbe1b1ff65269b165fce5d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex 14b27bc..d5df99d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -776,16 +776,16 @@\n \n     public static void assertJoinable(long timeoutSeconds, Thread... threads) {\n         try {\n-            long remainingTimeout = TimeUnit.SECONDS.toNanos(timeoutSeconds);\n+            long remainingTimeout = TimeUnit.SECONDS.toMillis(timeoutSeconds);\n             for (Thread thread : threads) {\n-                long start = System.nanoTime();\n+                long start = System.currentTimeMillis();\n                 thread.join(remainingTimeout);\n \n                 if (thread.isAlive()) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n                 }\n \n-                long duration = System.nanoTime() - start;\n+                long duration = System.currentTimeMillis() - start;\n                 remainingTimeout -= duration;\n                 if (remainingTimeout <= 0) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 781, "bugNodeStartChar": 29789, "bugNodeLength": 17, "fixLineNum": 781, "fixNodeStartChar": 29789, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e31566903a1db25e16d5dd82edd2ec5428e78266", "fixCommitParentSHA1": "8be13173f139312e9bcbe1b1ff65269b165fce5d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex 14b27bc..d5df99d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -776,16 +776,16 @@\n \n     public static void assertJoinable(long timeoutSeconds, Thread... threads) {\n         try {\n-            long remainingTimeout = TimeUnit.SECONDS.toNanos(timeoutSeconds);\n+            long remainingTimeout = TimeUnit.SECONDS.toMillis(timeoutSeconds);\n             for (Thread thread : threads) {\n-                long start = System.nanoTime();\n+                long start = System.currentTimeMillis();\n                 thread.join(remainingTimeout);\n \n                 if (thread.isAlive()) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n                 }\n \n-                long duration = System.nanoTime() - start;\n+                long duration = System.currentTimeMillis() - start;\n                 remainingTimeout -= duration;\n                 if (remainingTimeout <= 0) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 788, "bugNodeStartChar": 30041, "bugNodeLength": 17, "fixLineNum": 788, "fixNodeStartChar": 30041, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e31566903a1db25e16d5dd82edd2ec5428e78266", "fixCommitParentSHA1": "8be13173f139312e9bcbe1b1ff65269b165fce5d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex 14b27bc..d5df99d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -776,16 +776,16 @@\n \n     public static void assertJoinable(long timeoutSeconds, Thread... threads) {\n         try {\n-            long remainingTimeout = TimeUnit.SECONDS.toNanos(timeoutSeconds);\n+            long remainingTimeout = TimeUnit.SECONDS.toMillis(timeoutSeconds);\n             for (Thread thread : threads) {\n-                long start = System.nanoTime();\n+                long start = System.currentTimeMillis();\n                 thread.join(remainingTimeout);\n \n                 if (thread.isAlive()) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n                 }\n \n-                long duration = System.nanoTime() - start;\n+                long duration = System.currentTimeMillis() - start;\n                 remainingTimeout -= duration;\n                 if (remainingTimeout <= 0) {\n                     fail(\"Timeout waiting for thread \" + thread.getName() + \" to terminate\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 788, "bugNodeStartChar": 30041, "bugNodeLength": 17, "fixLineNum": 788, "fixNodeStartChar": 30041, "fixNodeLength": 26, "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1a8c8a836ac7d98c90bbb2a837e5f902a949213c", "fixCommitParentSHA1": "f27fac8ab7a58c1a7ef55d64cbeac8edab942ef0", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java b/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java\nindex 833bef6..b5e25ee 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java\n@@ -518,7 +518,7 @@\n         closeConnectionBetween(data3, lite1);\n \n         assertClusterSizeEventually(3, lite1, lite2, data1);\n-        assertClusterSize(2, data2, data3);\n+        assertClusterSizeEventually(2, data2, data3);\n \n         data1.getMap(\"default\").put(1, \"cluster1\");\n         data3.getMap(\"default\").put(1, \"cluster2\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 521, "bugNodeStartChar": 22979, "bugNodeLength": 34, "fixLineNum": 521, "fixNodeStartChar": 22979, "fixNodeLength": 44, "sourceBeforeFix": "assertClusterSize(2,data2,data3)", "sourceAfterFix": "assertClusterSizeEventually(2,data2,data3)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1a8c8a836ac7d98c90bbb2a837e5f902a949213c", "fixCommitParentSHA1": "f27fac8ab7a58c1a7ef55d64cbeac8edab942ef0", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java b/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java\nindex 833bef6..b5e25ee 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cluster/SplitBrainHandlerTest.java\n@@ -518,7 +518,7 @@\n         closeConnectionBetween(data3, lite1);\n \n         assertClusterSizeEventually(3, lite1, lite2, data1);\n-        assertClusterSize(2, data2, data3);\n+        assertClusterSizeEventually(2, data2, data3);\n \n         data1.getMap(\"default\").put(1, \"cluster1\");\n         data3.getMap(\"default\").put(1, \"cluster2\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 521, "bugNodeStartChar": 22979, "bugNodeLength": 34, "fixLineNum": 521, "fixNodeStartChar": 22979, "fixNodeLength": 44, "sourceBeforeFix": "assertClusterSize(2,data2,data3)", "sourceAfterFix": "assertClusterSizeEventually(2,data2,data3)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e6329ebed39492e0ffeb243b0430bcc07ece81a0", "fixCommitParentSHA1": "43ed372322106eb31e995ff25730e75705f5fe84", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/NonBlockingIOThreadingModel.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/NonBlockingIOThreadingModel.java b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/NonBlockingIOThreadingModel.java\nindex b9be294..dd2504f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/NonBlockingIOThreadingModel.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/NonBlockingIOThreadingModel.java\n@@ -156,7 +156,7 @@\n         if (logger.isFineEnabled()) {\n             logger.fine(\"TcpIpConnectionManager configured with Non Blocking IO-threading model: \"\n                     + inputThreadCount + \" input threads and \"\n-                    + outputThreads + \" output threads\");\n+                    + outputThreadCount + \" output threads\");\n         }\n \n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 157, "bugNodeStartChar": 6987, "bugNodeLength": 193, "fixLineNum": 157, "fixNodeStartChar": 6987, "fixNodeLength": 197, "sourceBeforeFix": "\"TcpIpConnectionManager configured with Non Blocking IO-threading model: \" + inputThreadCount + \" input threads and \"+ outputThreads+ \" output threads\"", "sourceAfterFix": "\"TcpIpConnectionManager configured with Non Blocking IO-threading model: \" + inputThreadCount + \" input threads and \"+ outputThreadCount+ \" output threads\""}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5b57e3099abcd8d8fd222c327ec52159422e6d9", "fixCommitParentSHA1": "2e18b9d024d7ac777587ec2f8716cd2cefe2935b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\nindex 255bbae..ec2f270 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n@@ -70,7 +70,7 @@\n             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n \n-            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n+            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {\n             // we don't want to print at warning level because it could very well be that the target JVM doesn't\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 73, "bugNodeStartChar": 2686, "bugNodeLength": 67, "fixLineNum": 73, "fixNodeStartChar": 2686, "fixNodeLength": 69, "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5b57e3099abcd8d8fd222c327ec52159422e6d9", "fixCommitParentSHA1": "2e18b9d024d7ac777587ec2f8716cd2cefe2935b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\nindex 255bbae..ec2f270 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n@@ -70,7 +70,7 @@\n             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n \n-            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n+            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {\n             // we don't want to print at warning level because it could very well be that the target JVM doesn't\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 73, "bugNodeStartChar": 2686, "bugNodeLength": 67, "fixLineNum": 73, "fixNodeStartChar": 2686, "fixNodeLength": 69, "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4e184a37363ce309c7419d2fa64d98ebf3df375f", "fixCommitParentSHA1": "c7402c53107772255e5224059244313160119412", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\nindex 255bbae..ec2f270 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n@@ -70,7 +70,7 @@\n             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n \n-            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n+            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {\n             // we don't want to print at warning level because it could very well be that the target JVM doesn't\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 73, "bugNodeStartChar": 2686, "bugNodeLength": 67, "fixLineNum": 73, "fixNodeStartChar": 2686, "fixNodeLength": 69, "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4e184a37363ce309c7419d2fa64d98ebf3df375f", "fixCommitParentSHA1": "c7402c53107772255e5224059244313160119412", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\nindex 255bbae..ec2f270 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/networking/nonblocking/SelectorOptimizer.java\n@@ -70,7 +70,7 @@\n             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n \n-            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n+            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {\n             // we don't want to print at warning level because it could very well be that the target JVM doesn't\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 73, "bugNodeStartChar": 2686, "bugNodeLength": 67, "fixLineNum": 73, "fixNodeStartChar": 2686, "fixNodeLength": 69, "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "06e000affbe9bb0eff559a6322e551a200f9add7", "fixCommitParentSHA1": "e5da0f2e04ca1aea7831fef6c71fcfc06f2a14f1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\nindex 5e4d012..0e3146f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n@@ -396,7 +396,7 @@\n                     895159.952, 901536.143, 907872.631, 914293.672, 920615.14, 927130.974, 933409.404, 939922.178, 946331.47,\n                     952745.93, 959209.264, 965590.224, 972077.284, 978501.961, 984953.19, 991413.271, 997817.479, 1004222.658,\n                     1010725.676, 1017177.138, 1023612.529, 1030098.236, 1036493.719, 1043112.207, 1049537.036, 1056008.096,\n-                    062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n+                    1062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n                     1114423.639, 1120884.602, 1127324.923, 1133794.24, 1140328.886, 1146849.376, 1153346.682, 1159836.502,\n                     1166478.703, 1172953.304, 1179391.502, 1185950.982, 1192544.052, 1198913.41, 1205430.994, 1212015.525,\n                     1218674.042, 1225121.683, 1231551.101, 1238126.379, 1244673.795, 1251260.649, 1257697.86, 1264320.983,\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 37176, "bugNodeLength": 2871, "fixLineNum": 381, "fixNodeStartChar": 37176, "fixNodeLength": 2872, "sourceBeforeFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}", "sourceAfterFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "6a9725f363a572846cc2f9c500938e5d7014099c", "fixCommitParentSHA1": "d3a4f693880a5b4b3a3c0bd8f26ccc35fcd90582", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\nindex 5e4d012..0e3146f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n@@ -396,7 +396,7 @@\n                     895159.952, 901536.143, 907872.631, 914293.672, 920615.14, 927130.974, 933409.404, 939922.178, 946331.47,\n                     952745.93, 959209.264, 965590.224, 972077.284, 978501.961, 984953.19, 991413.271, 997817.479, 1004222.658,\n                     1010725.676, 1017177.138, 1023612.529, 1030098.236, 1036493.719, 1043112.207, 1049537.036, 1056008.096,\n-                    062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n+                    1062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n                     1114423.639, 1120884.602, 1127324.923, 1133794.24, 1140328.886, 1146849.376, 1153346.682, 1159836.502,\n                     1166478.703, 1172953.304, 1179391.502, 1185950.982, 1192544.052, 1198913.41, 1205430.994, 1212015.525,\n                     1218674.042, 1225121.683, 1231551.101, 1238126.379, 1244673.795, 1251260.649, 1257697.86, 1264320.983,\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 37176, "bugNodeLength": 2871, "fixLineNum": 381, "fixNodeStartChar": 37176, "fixNodeLength": 2872, "sourceBeforeFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}", "sourceAfterFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "70ad89f4d156a2ce727f6ae230f8a2ffbbce8531", "fixCommitParentSHA1": "e5da0f2e04ca1aea7831fef6c71fcfc06f2a14f1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\nindex 5e4d012..0e3146f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n@@ -396,7 +396,7 @@\n                     895159.952, 901536.143, 907872.631, 914293.672, 920615.14, 927130.974, 933409.404, 939922.178, 946331.47,\n                     952745.93, 959209.264, 965590.224, 972077.284, 978501.961, 984953.19, 991413.271, 997817.479, 1004222.658,\n                     1010725.676, 1017177.138, 1023612.529, 1030098.236, 1036493.719, 1043112.207, 1049537.036, 1056008.096,\n-                    062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n+                    1062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n                     1114423.639, 1120884.602, 1127324.923, 1133794.24, 1140328.886, 1146849.376, 1153346.682, 1159836.502,\n                     1166478.703, 1172953.304, 1179391.502, 1185950.982, 1192544.052, 1198913.41, 1205430.994, 1212015.525,\n                     1218674.042, 1225121.683, 1231551.101, 1238126.379, 1244673.795, 1251260.649, 1257697.86, 1264320.983,\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 37176, "bugNodeLength": 2871, "fixLineNum": 381, "fixNodeStartChar": 37176, "fixNodeLength": 2872, "sourceBeforeFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}", "sourceAfterFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7c9ae367e2647be784c87c4363ccfa5881561481", "fixCommitParentSHA1": "d3a4f693880a5b4b3a3c0bd8f26ccc35fcd90582", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\nindex 5e4d012..0e3146f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cardinality/impl/hyperloglog/impl/DenseHyperLogLogEncoder.java\n@@ -396,7 +396,7 @@\n                     895159.952, 901536.143, 907872.631, 914293.672, 920615.14, 927130.974, 933409.404, 939922.178, 946331.47,\n                     952745.93, 959209.264, 965590.224, 972077.284, 978501.961, 984953.19, 991413.271, 997817.479, 1004222.658,\n                     1010725.676, 1017177.138, 1023612.529, 1030098.236, 1036493.719, 1043112.207, 1049537.036, 1056008.096,\n-                    062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n+                    1062476.184, 1068942.337, 1075524.95, 1081932.864, 1088426.025, 1094776.005, 1101327.448, 1107901.673,\n                     1114423.639, 1120884.602, 1127324.923, 1133794.24, 1140328.886, 1146849.376, 1153346.682, 1159836.502,\n                     1166478.703, 1172953.304, 1179391.502, 1185950.982, 1192544.052, 1198913.41, 1205430.994, 1212015.525,\n                     1218674.042, 1225121.683, 1231551.101, 1238126.379, 1244673.795, 1251260.649, 1257697.86, 1264320.983,\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 37176, "bugNodeLength": 2871, "fixLineNum": 381, "fixNodeStartChar": 37176, "fixNodeLength": 2872, "sourceBeforeFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}", "sourceAfterFix": "{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "83546b1062b34cc2431812517a1e3723a5e4b508", "fixCommitParentSHA1": "8a659b7348ea62b82e5ee17fe8b66521334ecdfa", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java b/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java\nindex 1f05e00..610d0cb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java\n@@ -36,12 +36,12 @@\n     /**\n      * If this constant is {@code true}, then {@link #UNSAFE} refers to a usable {@link sun.misc.Unsafe} instance.\n      */\n-    static final boolean UNSAFE_AVAILABLE;\n+    public static final boolean UNSAFE_AVAILABLE;\n \n     /**\n      * The {@link sun.misc.Unsafe} instance which is available and ready to use.\n      */\n-    static final Unsafe UNSAFE;\n+    public static final Unsafe UNSAFE;\n \n     private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 36, "bugNodeStartChar": 1116, "bugNodeLength": 169, "fixLineNum": 36, "fixNodeStartChar": 1116, "fixNodeLength": 176, "sourceBeforeFix": "24", "sourceAfterFix": "25"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "83546b1062b34cc2431812517a1e3723a5e4b508", "fixCommitParentSHA1": "8a659b7348ea62b82e5ee17fe8b66521334ecdfa", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java b/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java\nindex 1f05e00..610d0cb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/memory/impl/UnsafeUtil.java\n@@ -36,12 +36,12 @@\n     /**\n      * If this constant is {@code true}, then {@link #UNSAFE} refers to a usable {@link sun.misc.Unsafe} instance.\n      */\n-    static final boolean UNSAFE_AVAILABLE;\n+    public static final boolean UNSAFE_AVAILABLE;\n \n     /**\n      * The {@link sun.misc.Unsafe} instance which is available and ready to use.\n      */\n-    static final Unsafe UNSAFE;\n+    public static final Unsafe UNSAFE;\n \n     private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 41, "bugNodeStartChar": 1291, "bugNodeLength": 124, "fixLineNum": 41, "fixNodeStartChar": 1291, "fixNodeLength": 131, "sourceBeforeFix": "24", "sourceAfterFix": "25"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a5aa24e41ab0cbd325353b84d92d479a2a710775", "fixCommitParentSHA1": "72762d12b54d8e585ca14e6ce4f96476e7bb34f9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java b/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java\nindex 15abe04..4633686 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java\n@@ -251,14 +251,14 @@\n         // without lookup of environment\n         assertEquals(\"value-first\", strategy.getOrNull(first));\n         assertEquals(Boolean.FALSE, strategy.getOrNull(second));\n-        assertEquals(100, ((Long) strategy.getOrNull(third)).longValue());\n+        assertEquals(100, ((Integer) strategy.getOrNull(third)).intValue());\n         assertNull(strategy.getOrNull(fourth));\n \n         // with lookup of environment (workaround to set environment doesn't work on all JDKs)\n         if (System.getenv(\"test.third\") != null) {\n             assertEquals(\"value-first\", strategy.getOrNull(\"test\", first));\n             assertEquals(Boolean.TRUE, strategy.getOrNull(\"test\", second));\n-            assertEquals(300, ((Long) strategy.getOrNull(\"test\", third)).longValue());\n+            assertEquals(300, ((Integer) strategy.getOrNull(\"test\", third)).intValue());\n             assertNull(strategy.getOrNull(\"test\", fourth));\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 254, "bugNodeStartChar": 11376, "bugNodeLength": 32, "fixLineNum": 254, "fixNodeStartChar": 11376, "fixNodeLength": 35, "sourceBeforeFix": "(Long)strategy.getOrNull(third)", "sourceAfterFix": "(Integer)strategy.getOrNull(third)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a5aa24e41ab0cbd325353b84d92d479a2a710775", "fixCommitParentSHA1": "72762d12b54d8e585ca14e6ce4f96476e7bb34f9", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java b/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java\nindex 15abe04..4633686 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/discovery/DiscoverySpiTest.java\n@@ -251,14 +251,14 @@\n         // without lookup of environment\n         assertEquals(\"value-first\", strategy.getOrNull(first));\n         assertEquals(Boolean.FALSE, strategy.getOrNull(second));\n-        assertEquals(100, ((Long) strategy.getOrNull(third)).longValue());\n+        assertEquals(100, ((Integer) strategy.getOrNull(third)).intValue());\n         assertNull(strategy.getOrNull(fourth));\n \n         // with lookup of environment (workaround to set environment doesn't work on all JDKs)\n         if (System.getenv(\"test.third\") != null) {\n             assertEquals(\"value-first\", strategy.getOrNull(\"test\", first));\n             assertEquals(Boolean.TRUE, strategy.getOrNull(\"test\", second));\n-            assertEquals(300, ((Long) strategy.getOrNull(\"test\", third)).longValue());\n+            assertEquals(300, ((Integer) strategy.getOrNull(\"test\", third)).intValue());\n             assertNull(strategy.getOrNull(\"test\", fourth));\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 261, "bugNodeStartChar": 11802, "bugNodeLength": 40, "fixLineNum": 261, "fixNodeStartChar": 11802, "fixNodeLength": 43, "sourceBeforeFix": "(Long)strategy.getOrNull(\"test\",third)", "sourceAfterFix": "(Integer)strategy.getOrNull(\"test\",third)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "e5e53e202cc7d357b787d2e3e4f6b538bdc7c98e", "fixCommitParentSHA1": "ad784b437e8806ada813df31213cbb43864577ff", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java b/hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java\nindex 007b047..684eeda 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/MapContainer.java\n@@ -288,7 +288,7 @@\n     }\n \n     public boolean shouldCloneOnEntryProcessing() {\n-        return getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat());\n+        return getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat());\n     }\n }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 291, "bugNodeStartChar": 10999, "bugNodeLength": 70, "fixLineNum": 291, "fixNodeStartChar": 10999, "fixNodeLength": 71, "sourceBeforeFix": "getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat())", "sourceAfterFix": "getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4e9d1e4eb6f0483df076427853d842f051f06cbf", "fixCommitParentSHA1": "4d1c2ddd586f69084c47ed1cdfb10c94b44012ca", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cardinality/CardinalityEstimatorStressTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cardinality/CardinalityEstimatorStressTest.java b/hazelcast/src/test/java/com/hazelcast/cardinality/CardinalityEstimatorStressTest.java\nindex f54378b..42ef831 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cardinality/CardinalityEstimatorStressTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cardinality/CardinalityEstimatorStressTest.java\n@@ -37,8 +37,8 @@\n         estimator = createHazelcastInstance().getCardinalityEstimator(\"StressTest_Estimator\");\n     }\n \n-    @Test(timeout = 8 * 60000)\n-    public void addBigRange_checkErrorMargin_completeWithinEightMins() {\n+    @Test(timeout = 16 * 60000)\n+    public void addBigRange_checkErrorMargin_completeWithinSixteenMins() {\n         // Sparse encoding would have taken much longer to complete, thus\n         // timeout helps to make sure the encoding engine used is the correct one.\n         long expected = 10 * 1000 * 1000;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 40, "bugNodeStartChar": 1347, "bugNodeLength": 9, "fixLineNum": 40, "fixNodeStartChar": 1347, "fixNodeLength": 10, "sourceBeforeFix": "8 * 60000", "sourceAfterFix": "16 * 60000"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a9c77a04b70e01bc84fef73af28291e7ba5e493b", "fixCommitParentSHA1": "8db95998e1acf2c7c26a309b4fa79da21b3cb306", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java\nindex a17fc65..0d48c0f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java\n@@ -90,14 +90,14 @@\n         return new ExtractedParams(keys, sourceUuids, partitionUuids, sequences);\n     }\n \n-    private final class ExtractedParams {\n+    private static final class ExtractedParams {\n+\n         private final List<Data> keys;\n         private final List<String> sourceUuids;\n         private final List<UUID> partitionUuids;\n         private final List<Long> sequences;\n \n-        public ExtractedParams(List<Data> keys, List<String> sourceUuids,\n-                               List<UUID> partitionUuids, List<Long> sequences) {\n+        ExtractedParams(List<Data> keys, List<String> sourceUuids, List<UUID> partitionUuids, List<Long> sequences) {\n             this.keys = keys;\n             this.sourceUuids = sourceUuids;\n             this.partitionUuids = partitionUuids;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 93, "bugNodeStartChar": 4159, "bugNodeLength": 554, "fixLineNum": 93, "fixNodeStartChar": 4159, "fixNodeLength": 562, "sourceBeforeFix": "18", "sourceAfterFix": "26"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "a9c77a04b70e01bc84fef73af28291e7ba5e493b", "fixCommitParentSHA1": "8db95998e1acf2c7c26a309b4fa79da21b3cb306", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java\nindex a17fc65..0d48c0f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/nearcache/impl/invalidation/AbstractBaseNearCacheInvalidationListener.java\n@@ -90,14 +90,14 @@\n         return new ExtractedParams(keys, sourceUuids, partitionUuids, sequences);\n     }\n \n-    private final class ExtractedParams {\n+    private static final class ExtractedParams {\n+\n         private final List<Data> keys;\n         private final List<String> sourceUuids;\n         private final List<UUID> partitionUuids;\n         private final List<Long> sequences;\n \n-        public ExtractedParams(List<Data> keys, List<String> sourceUuids,\n-                               List<UUID> partitionUuids, List<Long> sequences) {\n+        ExtractedParams(List<Data> keys, List<String> sourceUuids, List<UUID> partitionUuids, List<Long> sequences) {\n             this.keys = keys;\n             this.sourceUuids = sourceUuids;\n             this.partitionUuids = partitionUuids;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 99, "bugNodeStartChar": 4386, "bugNodeLength": 321, "fixLineNum": 99, "fixNodeStartChar": 4386, "fixNodeLength": 283, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "39dbb74a2606ed071ac998b9021f522e7488a372", "fixCommitParentSHA1": "ed9f3fc00d96bfc5a51f1d2b6deddda090496234", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/internal/nearcache/NearCacheTestUtils.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/nearcache/NearCacheTestUtils.java b/hazelcast/src/test/java/com/hazelcast/internal/nearcache/NearCacheTestUtils.java\nindex 2effdf4..4a05723 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/nearcache/NearCacheTestUtils.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/nearcache/NearCacheTestUtils.java\n@@ -88,7 +88,7 @@\n                 long ownedEntryCount = context.stats.getOwnedEntryCount();\n                 assertTrue(format(\"Near Cache owned entry count didn't reach the desired value (%d vs. %d) (%s)\",\n                         ownedEntryCount, nearCacheSize, context.stats),\n-                        ownedEntryCount >= nearCacheSize);\n+                        ownedEntryCount == nearCacheSize);\n             }\n         });\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 91, "bugNodeStartChar": 3880, "bugNodeLength": 32, "fixLineNum": 91, "fixNodeStartChar": 3880, "fixNodeLength": 32, "sourceBeforeFix": "ownedEntryCount >= nearCacheSize", "sourceAfterFix": "ownedEntryCount == nearCacheSize"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b6555180a56d77e9043823160de051498ff480da", "fixCommitParentSHA1": "4e37f07aaad1d895ff0195cf580a28d0cfebe178", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\nindex 87ce4cd..9ed7930 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n@@ -153,7 +153,7 @@\n         //stop threads\n         stopTest.set(true);\n         shadowMember.join();\n-        clearFromMember.start();\n+        clearFromMember.join();\n         populateClientNearCache.join();\n         putFromMember.join();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 156, "bugNodeStartChar": 5641, "bugNodeLength": 23, "fixLineNum": 156, "fixNodeStartChar": 5641, "fixNodeLength": 22, "sourceBeforeFix": "clearFromMember.start()", "sourceAfterFix": "clearFromMember.join()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b6555180a56d77e9043823160de051498ff480da", "fixCommitParentSHA1": "4e37f07aaad1d895ff0195cf580a28d0cfebe178", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\nindex 87ce4cd..9ed7930 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n@@ -153,7 +153,7 @@\n         //stop threads\n         stopTest.set(true);\n         shadowMember.join();\n-        clearFromMember.start();\n+        clearFromMember.join();\n         populateClientNearCache.join();\n         putFromMember.join();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 156, "bugNodeStartChar": 5641, "bugNodeLength": 23, "fixLineNum": 156, "fixNodeStartChar": 5641, "fixNodeLength": 22, "sourceBeforeFix": "clearFromMember.start()", "sourceAfterFix": "clearFromMember.join()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d21d70eadd9b64a4337151b80d9508826c7bcf84", "fixCommitParentSHA1": "39a8097963ce54d19bff2ab9426fe0ab46da1e20", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\nindex 87ce4cd..9ed7930 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n@@ -153,7 +153,7 @@\n         //stop threads\n         stopTest.set(true);\n         shadowMember.join();\n-        clearFromMember.start();\n+        clearFromMember.join();\n         populateClientNearCache.join();\n         putFromMember.join();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 156, "bugNodeStartChar": 5641, "bugNodeLength": 23, "fixLineNum": 156, "fixNodeStartChar": 5641, "fixNodeLength": 22, "sourceBeforeFix": "clearFromMember.start()", "sourceAfterFix": "clearFromMember.join()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d21d70eadd9b64a4337151b80d9508826c7bcf84", "fixCommitParentSHA1": "39a8097963ce54d19bff2ab9426fe0ab46da1e20", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\nindex 87ce4cd..9ed7930 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n@@ -153,7 +153,7 @@\n         //stop threads\n         stopTest.set(true);\n         shadowMember.join();\n-        clearFromMember.start();\n+        clearFromMember.join();\n         populateClientNearCache.join();\n         putFromMember.join();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 156, "bugNodeStartChar": 5641, "bugNodeLength": 23, "fixLineNum": 156, "fixNodeStartChar": 5641, "fixNodeLength": 22, "sourceBeforeFix": "clearFromMember.start()", "sourceAfterFix": "clearFromMember.join()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "64b534913e20c9a76e013e86f6027a3c69a180f5", "fixCommitParentSHA1": "8bfd98e58e082f0fe557c9e9edc4683b1fb446ee", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 94def6f..c9fdacf 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -458,7 +458,7 @@\n                                 logger.warning(\"Error receiving heartbeat for connection: \" + connection, t);\n                             }\n                         }\n-                    });\n+                    }, executionService.getInternalExecutor());\n                 } else {\n                     if (!connection.isHeartBeating()) {\n                         logger.warning(\"Heartbeat is back to healthy for connection : \" + connection);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 447, "bugNodeStartChar": 18492, "bugNodeLength": 706, "fixLineNum": 447, "fixNodeStartChar": 18492, "fixNodeLength": 746, "sourceBeforeFix": "clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(\"Error receiving heartbeat for connection: \" + connection,t);     }   } } )", "sourceAfterFix": "clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(\"Error receiving heartbeat for connection: \" + connection,t);     }   } } ,executionService.getInternalExecutor())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f96e7884535b1966dada9fa2b86c87e85b1a7d29", "fixCommitParentSHA1": "9dbc3c539a4d8279a0d7cf329b1cc1003ce82a33", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 8624579..70a2bf2 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -451,7 +451,7 @@\n                                 logger.warning(\"Error receiving heartbeat for connection: \" + connection, t);\n                             }\n                         }\n-                    });\n+                    }, executionService.getInternalExecutor());\n                 } else {\n                     if (!connection.isHeartBeating()) {\n                         logger.warning(\"Heartbeat is back to healthy for connection : \" + connection);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 440, "bugNodeStartChar": 18634, "bugNodeLength": 706, "fixLineNum": 440, "fixNodeStartChar": 18634, "fixNodeLength": 746, "sourceBeforeFix": "clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(\"Error receiving heartbeat for connection: \" + connection,t);     }   } } )", "sourceAfterFix": "clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning(\"Error receiving heartbeat for connection: \" + connection,t);     }   } } ,executionService.getInternalExecutor())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "860774b8e958fd4bdf90ec9f5d3e7994e1bd80f4", "fixCommitParentSHA1": "f5b5e658ea42c43530cc3fd5e132e2fe503ab8b4", "bugFilePath": "subscriber/ClientQueryCacheEndToEndConstructor.java", "fixPatch": "diff --git a/subscriber/ClientQueryCacheEndToEndConstructor.java b/subscriber/ClientQueryCacheEndToEndConstructor.java\nindex 4dd3a00..bbe7832 100644\n--- a/subscriber/ClientQueryCacheEndToEndConstructor.java\n+++ b/subscriber/ClientQueryCacheEndToEndConstructor.java\n@@ -51,7 +51,7 @@\n         ClientMessage response = (ClientMessage) invokerWrapper.invoke(request);\n \n         Collection<Map.Entry<Data, Data>> result\n-                = EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries;\n+                = EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response;\n \n         populateWithValues(queryCache, result);\n     }\n@@ -67,7 +67,7 @@\n         InvokerWrapper invokerWrapper = context.getInvokerWrapper();\n         ClientMessage response = (ClientMessage) invokerWrapper.invoke(request);\n \n-        Collection<Data> result = EnterpriseMapPublisherCreateCodec.decodeResponse(response).list;\n+        Collection<Data> result = EnterpriseMapPublisherCreateCodec.decodeResponse(response).response;\n \n         populateWithoutValues(queryCache, result);\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 54, "bugNodeStartChar": 2361, "bugNodeLength": 75, "fixLineNum": 54, "fixNodeStartChar": 2361, "fixNodeLength": 76, "sourceBeforeFix": "EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries", "sourceAfterFix": "EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "860774b8e958fd4bdf90ec9f5d3e7994e1bd80f4", "fixCommitParentSHA1": "f5b5e658ea42c43530cc3fd5e132e2fe503ab8b4", "bugFilePath": "subscriber/ClientQueryCacheEndToEndConstructor.java", "fixPatch": "diff --git a/subscriber/ClientQueryCacheEndToEndConstructor.java b/subscriber/ClientQueryCacheEndToEndConstructor.java\nindex 4dd3a00..bbe7832 100644\n--- a/subscriber/ClientQueryCacheEndToEndConstructor.java\n+++ b/subscriber/ClientQueryCacheEndToEndConstructor.java\n@@ -51,7 +51,7 @@\n         ClientMessage response = (ClientMessage) invokerWrapper.invoke(request);\n \n         Collection<Map.Entry<Data, Data>> result\n-                = EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries;\n+                = EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response;\n \n         populateWithValues(queryCache, result);\n     }\n@@ -67,7 +67,7 @@\n         InvokerWrapper invokerWrapper = context.getInvokerWrapper();\n         ClientMessage response = (ClientMessage) invokerWrapper.invoke(request);\n \n-        Collection<Data> result = EnterpriseMapPublisherCreateCodec.decodeResponse(response).list;\n+        Collection<Data> result = EnterpriseMapPublisherCreateCodec.decodeResponse(response).response;\n \n         populateWithoutValues(queryCache, result);\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 70, "bugNodeStartChar": 3129, "bugNodeLength": 63, "fixLineNum": 70, "fixNodeStartChar": 3129, "fixNodeLength": 67, "sourceBeforeFix": "EnterpriseMapPublisherCreateCodec.decodeResponse(response).list", "sourceAfterFix": "EnterpriseMapPublisherCreateCodec.decodeResponse(response).response"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "9f48ebce5cdf47682dc74bcf51581b88527e5f92", "fixCommitParentSHA1": "90a04d7c97c67c72d96e25e6f4b3ab61cdf76a1b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java b/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java\nindex c6f60f1..7a01ce8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java\n@@ -334,7 +334,7 @@\n             nodeState.fromJson(jsonNodeState);\n         }\n         JsonObject jsonHotRestartState = getObject(json, \"hotRestartState\", null);\n-        if (hotRestartState != null) {\n+        if (jsonHotRestartState != null) {\n             hotRestartState = new HotRestartStateImpl();\n             hotRestartState.fromJson(jsonHotRestartState);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 337, "bugNodeStartChar": 12906, "bugNodeLength": 23, "fixLineNum": 337, "fixNodeStartChar": 12906, "fixNodeLength": 27, "sourceBeforeFix": "hotRestartState != null", "sourceAfterFix": "jsonHotRestartState != null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9f48ebce5cdf47682dc74bcf51581b88527e5f92", "fixCommitParentSHA1": "90a04d7c97c67c72d96e25e6f4b3ab61cdf76a1b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java b/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java\nindex c6f60f1..7a01ce8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/monitor/impl/MemberStateImpl.java\n@@ -334,7 +334,7 @@\n             nodeState.fromJson(jsonNodeState);\n         }\n         JsonObject jsonHotRestartState = getObject(json, \"hotRestartState\", null);\n-        if (hotRestartState != null) {\n+        if (jsonHotRestartState != null) {\n             hotRestartState = new HotRestartStateImpl();\n             hotRestartState.fromJson(jsonHotRestartState);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 337, "bugNodeStartChar": 12906, "bugNodeLength": 23, "fixLineNum": 337, "fixNodeStartChar": 12906, "fixNodeLength": 27, "sourceBeforeFix": "hotRestartState != null", "sourceAfterFix": "jsonHotRestartState != null"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c812fec424fdf43025d67cc00a2235a31cd744ec", "fixCommitParentSHA1": "ce26f83aa8863febb0820f933a57add5c2f29ee2", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java\nindex 9c73d42..fd8feb7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java\n@@ -120,7 +120,7 @@\n     public static final int SET_CONTAINER = 41;\n     public static final int LIST_CONTAINER = 42;\n     public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;\n-    public static final int QUEUE_TRANSACTION_LOG_RECORD = 43;\n+    public static final int QUEUE_TRANSACTION_LOG_RECORD = 44;\n \n     @Override\n     public int getFactoryId() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 123, "bugNodeStartChar": 7126, "bugNodeLength": 33, "fixLineNum": 123, "fixNodeStartChar": 7126, "fixNodeLength": 33, "sourceBeforeFix": "QUEUE_TRANSACTION_LOG_RECORD=43", "sourceAfterFix": "QUEUE_TRANSACTION_LOG_RECORD=44"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7f8548a745f0841a35b8d67da18093dbd28df076", "fixCommitParentSHA1": "ce26f83aa8863febb0820f933a57add5c2f29ee2", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java\nindex 9c73d42..fd8feb7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionDataSerializerHook.java\n@@ -120,7 +120,7 @@\n     public static final int SET_CONTAINER = 41;\n     public static final int LIST_CONTAINER = 42;\n     public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;\n-    public static final int QUEUE_TRANSACTION_LOG_RECORD = 43;\n+    public static final int QUEUE_TRANSACTION_LOG_RECORD = 44;\n \n     @Override\n     public int getFactoryId() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 123, "bugNodeStartChar": 7126, "bugNodeLength": 33, "fixLineNum": 123, "fixNodeStartChar": 7126, "fixNodeLength": 33, "sourceBeforeFix": "QUEUE_TRANSACTION_LOG_RECORD=43", "sourceAfterFix": "QUEUE_TRANSACTION_LOG_RECORD=44"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9c540e54077fb7128af78b71ca2715475903f008", "fixCommitParentSHA1": "d5115ac2a2fb233162244c5d76f05d4dbea0f637", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\nindex 712c532..5fae029 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n@@ -80,14 +80,14 @@\n         Matcher matcher = VERSION_PATTERN.matcher(version);\n         if (matcher.matches()) {\n             try {\n-                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1))\n-                        + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));\n+                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1))\n+                        + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));\n \n                 int groupCount = matcher.groupCount();\n                 if (groupCount >= PATCH_GROUP_COUNT) {\n                     String patchVersionString = matcher.group(PATCH_GROUP_COUNT);\n                     if (null != patchVersionString && !patchVersionString.startsWith(\"-\")) {\n-                        calculatedVersion += Integer.valueOf(patchVersionString);\n+                        calculatedVersion += Integer.parseInt(patchVersionString);\n                     }\n                 }\n                 return calculatedVersion;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 83, "bugNodeStartChar": 2560, "bugNodeLength": 33, "fixLineNum": 83, "fixNodeStartChar": 2560, "fixNodeLength": 34, "sourceBeforeFix": "Integer.valueOf(matcher.group(1))", "sourceAfterFix": "Integer.parseInt(matcher.group(1))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9c540e54077fb7128af78b71ca2715475903f008", "fixCommitParentSHA1": "d5115ac2a2fb233162244c5d76f05d4dbea0f637", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\nindex 712c532..5fae029 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n@@ -80,14 +80,14 @@\n         Matcher matcher = VERSION_PATTERN.matcher(version);\n         if (matcher.matches()) {\n             try {\n-                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1))\n-                        + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));\n+                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1))\n+                        + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));\n \n                 int groupCount = matcher.groupCount();\n                 if (groupCount >= PATCH_GROUP_COUNT) {\n                     String patchVersionString = matcher.group(PATCH_GROUP_COUNT);\n                     if (null != patchVersionString && !patchVersionString.startsWith(\"-\")) {\n-                        calculatedVersion += Integer.valueOf(patchVersionString);\n+                        calculatedVersion += Integer.parseInt(patchVersionString);\n                     }\n                 }\n                 return calculatedVersion;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 83, "bugNodeStartChar": 2560, "bugNodeLength": 33, "fixLineNum": 83, "fixNodeStartChar": 2560, "fixNodeLength": 34, "sourceBeforeFix": "Integer.valueOf(matcher.group(1))", "sourceAfterFix": "Integer.parseInt(matcher.group(1))"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9c540e54077fb7128af78b71ca2715475903f008", "fixCommitParentSHA1": "d5115ac2a2fb233162244c5d76f05d4dbea0f637", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\nindex 712c532..5fae029 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n@@ -80,14 +80,14 @@\n         Matcher matcher = VERSION_PATTERN.matcher(version);\n         if (matcher.matches()) {\n             try {\n-                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1))\n-                        + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));\n+                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1))\n+                        + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));\n \n                 int groupCount = matcher.groupCount();\n                 if (groupCount >= PATCH_GROUP_COUNT) {\n                     String patchVersionString = matcher.group(PATCH_GROUP_COUNT);\n                     if (null != patchVersionString && !patchVersionString.startsWith(\"-\")) {\n-                        calculatedVersion += Integer.valueOf(patchVersionString);\n+                        calculatedVersion += Integer.parseInt(patchVersionString);\n                     }\n                 }\n                 return calculatedVersion;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 90, "bugNodeStartChar": 3013, "bugNodeLength": 35, "fixLineNum": 90, "fixNodeStartChar": 3013, "fixNodeLength": 36, "sourceBeforeFix": "Integer.valueOf(patchVersionString)", "sourceAfterFix": "Integer.parseInt(patchVersionString)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9c540e54077fb7128af78b71ca2715475903f008", "fixCommitParentSHA1": "d5115ac2a2fb233162244c5d76f05d4dbea0f637", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\nindex 712c532..5fae029 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n@@ -80,14 +80,14 @@\n         Matcher matcher = VERSION_PATTERN.matcher(version);\n         if (matcher.matches()) {\n             try {\n-                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1))\n-                        + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));\n+                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1))\n+                        + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));\n \n                 int groupCount = matcher.groupCount();\n                 if (groupCount >= PATCH_GROUP_COUNT) {\n                     String patchVersionString = matcher.group(PATCH_GROUP_COUNT);\n                     if (null != patchVersionString && !patchVersionString.startsWith(\"-\")) {\n-                        calculatedVersion += Integer.valueOf(patchVersionString);\n+                        calculatedVersion += Integer.parseInt(patchVersionString);\n                     }\n                 }\n                 return calculatedVersion;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 90, "bugNodeStartChar": 3013, "bugNodeLength": 35, "fixLineNum": 90, "fixNodeStartChar": 3013, "fixNodeLength": 36, "sourceBeforeFix": "Integer.valueOf(patchVersionString)", "sourceAfterFix": "Integer.parseInt(patchVersionString)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapAntiEntropyTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapAntiEntropyTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapAntiEntropyTest.java\nindex d5a8cd4..0013120 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapAntiEntropyTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapAntiEntropyTest.java\n@@ -44,7 +44,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category(value = {QuickTest.class, ParallelTest.class})\n-public class ReplicatedMapAntiEntropyTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest {\n \n     @After\n     public void cleanup() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 45, "bugNodeStartChar": 1637, "bugNodeLength": 2943, "fixLineNum": 45, "fixNodeStartChar": 1637, "fixNodeLength": 2947, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapBaseTest {   @After public void cleanup(){     System.clearProperty(\"hazelcast.serialization.custom.override\");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty(\"hazelcast.serialization.custom.override\",\"true\");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest {   @After public void cleanup(){     System.clearProperty(\"hazelcast.serialization.custom.override\");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty(\"hazelcast.serialization.custom.override\",\"true\");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapHitsAndLastAccessTimeTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapHitsAndLastAccessTimeTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapHitsAndLastAccessTimeTest.java\nindex 7ff57a0..f33bee5 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapHitsAndLastAccessTimeTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapHitsAndLastAccessTimeTest.java\n@@ -40,7 +40,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapAbstractTest {\n \n     @Test\n     public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 41, "bugNodeStartChar": 1466, "bugNodeLength": 11258, "fixLineNum": 41, "fixNodeStartChar": 1466, "fixNodeLength": 11262, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapBaseTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format(\"Hits should be greater than 0: %d > %d\",hits,0),hits > 0);     assertTrue(String.format(\"Hits should be less than 1000: %d < %d\",hits,1000),hits < 1000);     assertTrue(String.format(\"LastAccessTime should be greater than startTime: %d > %d\",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format(\"LastAccessTime should be less or equal than current time: %d <= %d\",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(\"Last access time should be set for \" + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(\"Last access time should be set for \" + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue(\"Last access time should be set for \" + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapAbstractTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format(\"Hits should be greater than 0: %d > %d\",hits,0),hits > 0);     assertTrue(String.format(\"Hits should be less than 1000: %d < %d\",hits,1000),hits < 1000);     assertTrue(String.format(\"LastAccessTime should be greater than startTime: %d > %d\",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format(\"LastAccessTime should be less or equal than current time: %d <= %d\",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(\"Last access time should be set for \" + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue(\"Last access time should be set for \" + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue(\"Last access time should be set for \" + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       map.put(key,\"bar\");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapLoadingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapLoadingTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapLoadingTest.java\nindex 9cea068..4ae6f69 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapLoadingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapLoadingTest.java\n@@ -34,7 +34,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category(value = {QuickTest.class, ParallelTest.class})\n-public class ReplicatedMapLoadingTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapLoadingTest extends ReplicatedMapAbstractTest {\n \n     @Test\n     public void testAsyncFillUp() throws Exception {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 35, "bugNodeStartChar": 1278, "bugNodeLength": 3407, "fixLineNum": 35, "fixNodeStartChar": 1278, "fixNodeLength": 3411, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapBaseTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(\"map1\",first,map1);         assertMapSize(\"map2\",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(\"map1\",second,map1);         assertMapSize(\"map2\",second,map2);         assertMapSize(\"map3\",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(\"map1\",third,map1);         assertMapSize(\"map2\",third,map2);         assertMapSize(\"map3\",third,map3);         assertMapSize(\"map4\",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format(\"%s should contain %d elements\",mapName,expectedMapSize),expectedMapSize,map.size());   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapAbstractTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(\"map1\",first,map1);         assertMapSize(\"map2\",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(\"map1\",second,map1);         assertMapSize(\"map2\",second,map2);         assertMapSize(\"map3\",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize(\"map1\",third,map1);         assertMapSize(\"map2\",third,map2);         assertMapSize(\"map3\",third,map3);         assertMapSize(\"map4\",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format(\"%s should contain %d elements\",mapName,expectedMapSize),expectedMapSize,map.size());   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapReadYourWritesTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapReadYourWritesTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapReadYourWritesTest.java\nindex 06d3225..c20ee10 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapReadYourWritesTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapReadYourWritesTest.java\n@@ -35,7 +35,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category(value = {QuickTest.class, ParallelTest.class})\n-public class ReplicatedMapReadYourWritesTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest {\n \n     @Test\n     public void testReadYourWritesBySize() throws Exception {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 36, "bugNodeStartChar": 1225, "bugNodeLength": 4081, "fixLineNum": 36, "fixNodeStartChar": 1225, "fixNodeLength": 4085, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapBaseTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(\"default\");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(\"default\");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(\"default\");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(\"default\");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(\"default\");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(\"default\");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(\"default\");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(\"default\");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(\"default\");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(\"default\");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(\"default\");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(\"default\");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap(\"default\");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap(\"default\");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java\nindex 7d368ae..8de4f0b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java\n@@ -55,7 +55,7 @@\n \n @RunWith(HazelcastSerialClassRunner.class)\n @Category(QuickTest.class)\n-public class ReplicatedMapTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapTest extends ReplicatedMapAbstractTest {\n \n     @Test\n     public void testEmptyMapIsEmpty() throws Exception {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 56, "bugNodeStartChar": 1991, "bugNodeLength": 31778, "fixLineNum": 56, "fixNodeStartChar": 1991, "fixNodeLength": 31782, "sourceBeforeFix": "@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapBaseTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue(\"map should be empty\",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse(\"map should not be empty\",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,\"bar\");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,\"bar2\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar2\",map1.get(key));           assertEquals(\"bar2\",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,\"bar2\",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar2\",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar2\",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format(\"We do not expect an entry which's key equals to %d in entry set\",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,\"bar\",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     assertFalse(map1.removeEntryListener(\"2\"));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } ", "sourceAfterFix": "@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapAbstractTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue(\"map should be empty\",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse(\"map should not be empty\",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,\"bar\");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,\"bar2\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar2\",map1.get(key));           assertEquals(\"bar2\",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,\"bar2\",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar2\",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar2\",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format(\"We do not expect an entry which's key equals to %d in entry set\",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals(\"bar\",map1.get(key));           assertEquals(\"bar\",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,\"bar\");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(\"default\");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(\"default\");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,\"bar\",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     assertFalse(map1.removeEntryListener(\"2\"));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(\"default\");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap(\"default\");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTtlTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTtlTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTtlTest.java\nindex 6941e1f..8be9bcf 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTtlTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTtlTest.java\n@@ -16,7 +16,7 @@\n \n @RunWith(HazelcastSerialClassRunner.class)\n @Category(SlowTest.class)\n-public class ReplicatedMapTtlTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest {\n \n     @Test\n     public void testPutWithTTL_withMigration() throws Exception {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 17, "bugNodeStartChar": 504, "bugNodeLength": 3165, "fixLineNum": 17, "fixNodeStartChar": 504, "fixNodeLength": 3169, "sourceBeforeFix": "@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapBaseTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=\"foo-\" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } ", "sourceAfterFix": "@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=\"foo-\" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "52f08044d059ecb590df82b98f1f68b9137e2c29", "fixCommitParentSHA1": "2ac40593c435265d10eed940b3d31d98dee43871", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapWriteOrderTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapWriteOrderTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapWriteOrderTest.java\nindex 97f6210..7e9a3ac 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapWriteOrderTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapWriteOrderTest.java\n@@ -37,7 +37,7 @@\n import static org.junit.Assert.assertNotNull;\n \n @RunWith(Parameterized.class)\n-public class ReplicatedMapWriteOrderTest extends ReplicatedMapBaseTest {\n+public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest {\n \n     int nodeCount;\n     int operations;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 39, "bugNodeStartChar": 1281, "bugNodeLength": 5049, "fixLineNum": 39, "fixNodeStartChar": 1281, "fixNodeLength": 5053, "sourceBeforeFix": "@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapBaseTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println(\"nodeCount = \" + nodeCount);     System.out.println(\"operations = \" + operations);     System.out.println(\"keyCount = \" + keyCount);     Config config=new Config();     config.getReplicatedMapConfig(\"test\").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName=\"test\";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key=\"foo-\" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println(\"---------------------\");           System.out.println(\"key = \" + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println(\"value[\" + j + \"] = \"+ map.get(key)+ \" , store version : \"+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=\"foo-\" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } ", "sourceAfterFix": "@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println(\"nodeCount = \" + nodeCount);     System.out.println(\"operations = \" + operations);     System.out.println(\"keyCount = \" + keyCount);     Config config=new Config();     config.getReplicatedMapConfig(\"test\").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName=\"test\";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key=\"foo-\" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println(\"---------------------\");           System.out.println(\"key = \" + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println(\"value[\" + j + \"] = \"+ map.get(key)+ \" , store version : \"+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key=\"foo-\" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } "}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "fixCommitParentSHA1": "ac703759a1cede64d1b718cc8e7be84f6b7916d9", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex c907ba8..6c7dc17 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -997,7 +997,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();\n \n@@ -1019,7 +1019,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1051,7 +1051,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // call evictAll\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();\n \n@@ -1073,7 +1073,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1109,7 +1109,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1000, "bugNodeStartChar": 35519, "bugNodeLength": 37, "fixLineNum": 1000, "fixNodeStartChar": 35519, "fixNodeLength": 54, "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "fixCommitParentSHA1": "ac703759a1cede64d1b718cc8e7be84f6b7916d9", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex c907ba8..6c7dc17 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -997,7 +997,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();\n \n@@ -1019,7 +1019,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1051,7 +1051,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // call evictAll\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();\n \n@@ -1073,7 +1073,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1109,7 +1109,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1022, "bugNodeStartChar": 36391, "bugNodeLength": 39, "fixLineNum": 1022, "fixNodeStartChar": 36391, "fixNodeLength": 50, "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "fixCommitParentSHA1": "ac703759a1cede64d1b718cc8e7be84f6b7916d9", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex c907ba8..6c7dc17 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -997,7 +997,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();\n \n@@ -1019,7 +1019,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1051,7 +1051,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // call evictAll\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();\n \n@@ -1073,7 +1073,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1109,7 +1109,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1054, "bugNodeStartChar": 37744, "bugNodeLength": 37, "fixLineNum": 1054, "fixNodeStartChar": 37744, "fixNodeLength": 54, "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "fixCommitParentSHA1": "ac703759a1cede64d1b718cc8e7be84f6b7916d9", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex c907ba8..6c7dc17 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -997,7 +997,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();\n \n@@ -1019,7 +1019,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1051,7 +1051,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // call evictAll\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();\n \n@@ -1073,7 +1073,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1109,7 +1109,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1076, "bugNodeStartChar": 38622, "bugNodeLength": 39, "fixLineNum": 1076, "fixNodeStartChar": 38622, "fixNodeLength": 50, "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "fixCommitParentSHA1": "ac703759a1cede64d1b718cc8e7be84f6b7916d9", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\nindex c907ba8..6c7dc17 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/impl/nearcache/ClientMapNearCacheTest.java\n@@ -997,7 +997,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();\n \n@@ -1019,7 +1019,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1051,7 +1051,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // call evictAll\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();\n \n@@ -1073,7 +1073,7 @@\n         populateNearCache(clientMap, 1000);\n \n         // member comes\n-        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n+        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n \n         // add test listener to count clear events\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();\n@@ -1109,7 +1109,7 @@\n         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n \n         // create a new client to send events\n-        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n+        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1112, "bugNodeStartChar": 40176, "bugNodeLength": 37, "fixLineNum": 1112, "fixNodeStartChar": 40176, "fixNodeLength": 54, "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b2fe91c9b8394067bccfb56650dbe376b100a890", "fixCommitParentSHA1": "111eec01be5bfce6e8cfdce8de9e4c0628ff9669", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\nindex c6d4fdf..e251ca9 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n@@ -347,7 +347,7 @@\n         new Thread() {\n             public void run() {\n                 try {\n-                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n+                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 350, "bugNodeStartChar": 10869, "bugNodeLength": 36, "fixLineNum": 350, "fixNodeStartChar": 10869, "fixNodeLength": 37, "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1092a1d4b3c5517a7f6352db53557cc5ff4135d5", "fixCommitParentSHA1": "7a063160f3a0891f04f9463f2c4cf82d072f6d8e", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\nindex c6d4fdf..e251ca9 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n@@ -347,7 +347,7 @@\n         new Thread() {\n             public void run() {\n                 try {\n-                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n+                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 350, "bugNodeStartChar": 10869, "bugNodeLength": 36, "fixLineNum": 350, "fixNodeStartChar": 10869, "fixNodeLength": 37, "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "fixCommitParentSHA1": "cf425f63e7c94dcc33eceb86843ff98fb4116ae4", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\nindex 6ac10d8..d1590a7 100644\n--- a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n+++ b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n@@ -39,7 +39,7 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address) {\n+    public synchronized Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;\n@@ -54,11 +54,11 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address, boolean silent) {\n+    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n \n-    public void block(Address address) {\n+    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {\n@@ -66,7 +66,7 @@\n         }\n     }\n \n-    public void unblock(Address address) {\n+    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 41, "bugNodeStartChar": 1460, "bugNodeLength": 497, "fixLineNum": 41, "fixNodeStartChar": 1460, "fixNodeLength": 510, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "fixCommitParentSHA1": "cf425f63e7c94dcc33eceb86843ff98fb4116ae4", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\nindex 6ac10d8..d1590a7 100644\n--- a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n+++ b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n@@ -39,7 +39,7 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address) {\n+    public synchronized Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;\n@@ -54,11 +54,11 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address, boolean silent) {\n+    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n \n-    public void block(Address address) {\n+    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {\n@@ -66,7 +66,7 @@\n         }\n     }\n \n-    public void unblock(Address address) {\n+    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 56, "bugNodeStartChar": 1963, "bugNodeLength": 123, "fixLineNum": 56, "fixNodeStartChar": 1963, "fixNodeLength": 136, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "fixCommitParentSHA1": "cf425f63e7c94dcc33eceb86843ff98fb4116ae4", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\nindex 6ac10d8..d1590a7 100644\n--- a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n+++ b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n@@ -39,7 +39,7 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address) {\n+    public synchronized Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;\n@@ -54,11 +54,11 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address, boolean silent) {\n+    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n \n-    public void block(Address address) {\n+    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {\n@@ -66,7 +66,7 @@\n         }\n     }\n \n-    public void unblock(Address address) {\n+    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 2092, "bugNodeLength": 250, "fixLineNum": 61, "fixNodeStartChar": 2092, "fixNodeLength": 263, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "fixCommitParentSHA1": "cf425f63e7c94dcc33eceb86843ff98fb4116ae4", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\nindex 6ac10d8..d1590a7 100644\n--- a/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n+++ b/hazelcast/src/test/java/com/hazelcast/nio/tcp/FirewallingMockConnectionManager.java\n@@ -39,7 +39,7 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address) {\n+    public synchronized Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;\n@@ -54,11 +54,11 @@\n     }\n \n     @Override\n-    public Connection getOrConnect(Address address, boolean silent) {\n+    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n \n-    public void block(Address address) {\n+    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {\n@@ -66,7 +66,7 @@\n         }\n     }\n \n-    public void unblock(Address address) {\n+    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 69, "bugNodeStartChar": 2348, "bugNodeLength": 250, "fixLineNum": 69, "fixNodeStartChar": 2348, "fixNodeLength": 263, "sourceBeforeFix": "1", "sourceAfterFix": "33"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 84, "bugNodeStartChar": 3673, "bugNodeLength": 90, "fixLineNum": 84, "fixNodeStartChar": 3673, "fixNodeLength": 89, "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 84, "bugNodeStartChar": 3673, "bugNodeLength": 90, "fixLineNum": 84, "fixNodeStartChar": 3673, "fixNodeLength": 89, "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 89, "bugNodeStartChar": 4026, "bugNodeLength": 79, "fixLineNum": 89, "fixNodeStartChar": 4026, "fixNodeLength": 78, "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 89, "bugNodeStartChar": 4026, "bugNodeLength": 79, "fixLineNum": 89, "fixNodeStartChar": 4026, "fixNodeLength": 78, "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 227, "bugNodeStartChar": 10008, "bugNodeLength": 79, "fixLineNum": 227, "fixNodeStartChar": 10008, "fixNodeLength": 78, "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 227, "bugNodeStartChar": 10008, "bugNodeLength": 79, "fixLineNum": 227, "fixNodeStartChar": 10008, "fixNodeLength": 78, "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 267, "bugNodeStartChar": 11520, "bugNodeLength": 90, "fixLineNum": 267, "fixNodeStartChar": 11520, "fixNodeLength": 89, "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "fixCommitParentSHA1": "2d625eb2f7ea6dc46fc4bb9fd35c94f50c944481", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\nindex b427842..00b353a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/IsStillRunningService.java\n@@ -81,12 +81,12 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillExecuting,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, null, true);\n             Future f = inv.invoke();\n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             executing = (Boolean) invocation.nodeEngine.toObject(f.get(IS_EXECUTING_CALL_TIMEOUT, TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             invocation.logger.warning(\"While asking 'is-executing': \" + invocation, e);\n         }\n-        invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+        invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n         return executing;\n     }\n \n@@ -224,7 +224,7 @@\n         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n-            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n+            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }\n@@ -264,7 +264,7 @@\n                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n \n-            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n+            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 267, "bugNodeStartChar": 11520, "bugNodeLength": 90, "fixLineNum": 267, "fixNodeStartChar": 11520, "fixNodeLength": 89, "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "8ad270d80cf8e4743af883b5a7c863cc638bff48", "fixCommitParentSHA1": "c83dfd3a1ebf933b4792a6efb6b40bad5496bb9c", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\nindex c4663ed..e981992 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n@@ -180,7 +180,7 @@\n             }\n         }).start();\n         latch.await();\n-        assertTrue(lock.tryLock(3, TimeUnit.SECONDS));\n+        assertTrue(lock.tryLock(30, TimeUnit.SECONDS));\n \n         assertTrue(lock.isLocked());\n         assertTrue(lock.isLockedByCurrentThread());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 183, "bugNodeStartChar": 5818, "bugNodeLength": 33, "fixLineNum": 183, "fixNodeStartChar": 5818, "fixNodeLength": 34, "sourceBeforeFix": "lock.tryLock(3,TimeUnit.SECONDS)", "sourceAfterFix": "lock.tryLock(30,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a342d002b78a0cfa20c853e8b8df046ab0dc235a", "fixCommitParentSHA1": "82b90a634dbcb386a853ac31948c7e096a1d7d61", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\nindex 3b91208..bdde1fc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n@@ -183,7 +183,7 @@\n \n         final String key = \"key\";\n \n-        map.set(key, \"value\", 1, TimeUnit.SECONDS);\n+        map.set(key, \"value\", 5, TimeUnit.SECONDS);\n         // this `set` operation should not affect existing ttl.\n         // so \"key\" should be expired after 1 seconds.\n         map.set(key, \"value2\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 186, "bugNodeStartChar": 6980, "bugNodeLength": 42, "fixLineNum": 186, "fixNodeStartChar": 6980, "fixNodeLength": 42, "sourceBeforeFix": "map.set(key,\"value\",1,TimeUnit.SECONDS)", "sourceAfterFix": "map.set(key,\"value\",5,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "de91183182b0c8ca6fc82c1a298b82a7e2830dba", "fixCommitParentSHA1": "d3e18d733cae4b169e59b8f5db733de270263915", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorStressTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorStressTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorStressTest.java\nindex e0afd32..1e2f56f 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorStressTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorStressTest.java\n@@ -33,7 +33,7 @@\n \n     private static final int THREAD_COUNT = 32;\n \n-    private static final int NUMBER_OF_IDS_PER_THREAD = 400001;\n+    private static final int NUMBER_OF_IDS_PER_THREAD = 40000;\n \n     private static final int TOTAL_ID_GENERATED = THREAD_COUNT * NUMBER_OF_IDS_PER_THREAD;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 36, "bugNodeStartChar": 1274, "bugNodeLength": 33, "fixLineNum": 36, "fixNodeStartChar": 1274, "fixNodeLength": 32, "sourceBeforeFix": "NUMBER_OF_IDS_PER_THREAD=400001", "sourceAfterFix": "NUMBER_OF_IDS_PER_THREAD=40000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "fixCommitParentSHA1": "de3a4990283f0c543f65b25e3e323c1045dc5025", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\nindex f6a49f8..8ac8fa4 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n@@ -436,12 +436,12 @@\n         final String newValue = \"NEW_VALUE\";\n \n         map.put(key, oldValue);\n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, newValue, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, newValue, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n@@ -456,12 +456,12 @@\n         final String key = \"key\";\n         final String value = \"value\";\n \n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 439, "bugNodeStartChar": 13488, "bugNodeLength": 34, "fixLineNum": 439, "fixNodeStartChar": 13488, "fixNodeLength": 34, "sourceBeforeFix": "map.lock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "map.lock(key,1,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "fixCommitParentSHA1": "de3a4990283f0c543f65b25e3e323c1045dc5025", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\nindex f6a49f8..8ac8fa4 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n@@ -436,12 +436,12 @@\n         final String newValue = \"NEW_VALUE\";\n \n         map.put(key, oldValue);\n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, newValue, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, newValue, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n@@ -456,12 +456,12 @@\n         final String key = \"key\";\n         final String value = \"value\";\n \n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 444, "bugNodeStartChar": 13665, "bugNodeLength": 46, "fixLineNum": 444, "fixNodeStartChar": 13665, "fixNodeLength": 47, "sourceBeforeFix": "map.tryPut(key,newValue,8,TimeUnit.SECONDS)", "sourceAfterFix": "map.tryPut(key,newValue,60,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "fixCommitParentSHA1": "de3a4990283f0c543f65b25e3e323c1045dc5025", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\nindex f6a49f8..8ac8fa4 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n@@ -436,12 +436,12 @@\n         final String newValue = \"NEW_VALUE\";\n \n         map.put(key, oldValue);\n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, newValue, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, newValue, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n@@ -456,12 +456,12 @@\n         final String key = \"key\";\n         final String value = \"value\";\n \n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 459, "bugNodeStartChar": 14105, "bugNodeLength": 34, "fixLineNum": 459, "fixNodeStartChar": 14105, "fixNodeLength": 34, "sourceBeforeFix": "map.lock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "map.lock(key,1,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "fixCommitParentSHA1": "de3a4990283f0c543f65b25e3e323c1045dc5025", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\nindex f6a49f8..8ac8fa4 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapLockTest.java\n@@ -436,12 +436,12 @@\n         final String newValue = \"NEW_VALUE\";\n \n         map.put(key, oldValue);\n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, newValue, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, newValue, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n@@ -456,12 +456,12 @@\n         final String key = \"key\";\n         final String value = \"value\";\n \n-        map.lock(key, 4, TimeUnit.SECONDS);\n+        map.lock(key, 1, TimeUnit.SECONDS);\n \n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n-                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n+                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 464, "bugNodeStartChar": 14282, "bugNodeLength": 43, "fixLineNum": 464, "fixNodeStartChar": 14282, "fixNodeLength": 44, "sourceBeforeFix": "map.tryPut(key,value,8,TimeUnit.SECONDS)", "sourceAfterFix": "map.tryPut(key,value,60,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "d317837764c2af7a4998c3de9c52b68d2b8bc652", "fixCommitParentSHA1": "a8d01090e54c94d76357f5234b83a9e3df9d3577", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java b/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\nindex b7b7ad4..ad20f76 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\n@@ -125,7 +125,7 @@\n     public static String validateIndexAttribute(String attribute) {\n         checkHasText(attribute, \"Map index attribute must contain text\");\n         String keyPrefix = KEY_ATTRIBUTE_NAME.value();\n-        if (attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()) {\n+        if (attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()) {\n             if (attribute.charAt(keyPrefix.length()) != '#') {\n                 LOG.warning(KEY_ATTRIBUTE_NAME.value() + \" used without a following '#' char in index attribute '\"\n                         + attribute + \"'. Don't you want to index a key?\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 128, "bugNodeStartChar": 4118, "bugNodeLength": 73, "fixLineNum": 128, "fixNodeStartChar": 4118, "fixNodeLength": 74, "sourceBeforeFix": "attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()", "sourceAfterFix": "attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "ce9e66ca3737f8eb15884a42c7dd5a090c65fa11", "fixCommitParentSHA1": "a8d01090e54c94d76357f5234b83a9e3df9d3577", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java b/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\nindex b7b7ad4..ad20f76 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\n@@ -125,7 +125,7 @@\n     public static String validateIndexAttribute(String attribute) {\n         checkHasText(attribute, \"Map index attribute must contain text\");\n         String keyPrefix = KEY_ATTRIBUTE_NAME.value();\n-        if (attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()) {\n+        if (attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()) {\n             if (attribute.charAt(keyPrefix.length()) != '#') {\n                 LOG.warning(KEY_ATTRIBUTE_NAME.value() + \" used without a following '#' char in index attribute '\"\n                         + attribute + \"'. Don't you want to index a key?\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 128, "bugNodeStartChar": 4118, "bugNodeLength": 73, "fixLineNum": 128, "fixNodeStartChar": 4118, "fixNodeLength": 74, "sourceBeforeFix": "attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()", "sourceAfterFix": "attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "51164c95bb7e59ae2485dfec6e792a8eccf49398", "fixCommitParentSHA1": "2f5529c622dc1970622f3ba7786def30167f9c01", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java b/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java\nindex 3b1fd17..941b488 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java\n@@ -37,7 +37,7 @@\n     ILogger logger;\n     String group;\n     int port;\n-    private boolean stop;\n+    private volatile boolean stop;\n \n     public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,\n                                     ILogger logger, String group, int port)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 40, "bugNodeStartChar": 1311, "bugNodeLength": 21, "fixLineNum": 40, "fixNodeStartChar": 1311, "fixNodeLength": 30, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2f5529c622dc1970622f3ba7786def30167f9c01", "fixCommitParentSHA1": "5af7fb3836a26085752cdb8edc2078f644808cf5", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\nindex 684de7b..b5ae2ad 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n@@ -176,7 +176,7 @@\n \n     @Test\n     public void async_whenOperationTimeout() {\n-        int callTimeout = 1000;\n+        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 179, "bugNodeStartChar": 8104, "bugNodeLength": 18, "fixLineNum": 179, "fixNodeStartChar": 8104, "fixNodeLength": 18, "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "ca25cb3353b84dbd7cb4266835ebfa771a51c1da", "fixCommitParentSHA1": "5af7fb3836a26085752cdb8edc2078f644808cf5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java b/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java\nindex 3b1fd17..941b488 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/plugin/multicast/MulticastDiscoverySender.java\n@@ -37,7 +37,7 @@\n     ILogger logger;\n     String group;\n     int port;\n-    private boolean stop;\n+    private volatile boolean stop;\n \n     public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,\n                                     ILogger logger, String group, int port)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 40, "bugNodeStartChar": 1311, "bugNodeLength": 21, "fixLineNum": 40, "fixNodeStartChar": 1311, "fixNodeLength": 30, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d68e73c6dd11992150aaeac03ce1a43ddca3ae7c", "fixCommitParentSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\nindex 684de7b..b5ae2ad 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n@@ -176,7 +176,7 @@\n \n     @Test\n     public void async_whenOperationTimeout() {\n-        int callTimeout = 1000;\n+        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 179, "bugNodeStartChar": 8104, "bugNodeLength": 18, "fixLineNum": 179, "fixNodeStartChar": 8104, "fixNodeLength": 18, "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "fixCommitParentSHA1": "7d6e8e06aac1ca273f180c38456922e77443811b", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\nindex 97106e4..17dca90 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n@@ -298,7 +298,7 @@\n \n     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -308,9 +308,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);\n@@ -324,7 +324,7 @@\n \n     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -334,9 +334,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 301, "bugNodeStartChar": 13691, "bugNodeLength": 20, "fixLineNum": 301, "fixNodeStartChar": 13691, "fixNodeLength": 21, "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "fixCommitParentSHA1": "7d6e8e06aac1ca273f180c38456922e77443811b", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\nindex 97106e4..17dca90 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n@@ -298,7 +298,7 @@\n \n     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -308,9 +308,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);\n@@ -324,7 +324,7 @@\n \n     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -334,9 +334,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 327, "bugNodeStartChar": 14877, "bugNodeLength": 20, "fixLineNum": 327, "fixNodeStartChar": 14877, "fixNodeLength": 21, "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7d6e8e06aac1ca273f180c38456922e77443811b", "fixCommitParentSHA1": "f8a20a52fe8617cc5ed774b44766b781c1cda363", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\nindex 0d89c7d..684de7b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n@@ -334,7 +334,7 @@\n      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n-        int callTimeout = 1000;\n+        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 337, "bugNodeStartChar": 15330, "bugNodeLength": 18, "fixLineNum": 337, "fixNodeStartChar": 15330, "fixNodeLength": 18, "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "fixCommitParentSHA1": "4e979b8a74c0c3143aa09a274a1954af03820ffc", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\nindex 97106e4..17dca90 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n@@ -298,7 +298,7 @@\n \n     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -308,9 +308,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);\n@@ -324,7 +324,7 @@\n \n     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -334,9 +334,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 301, "bugNodeStartChar": 13691, "bugNodeLength": 20, "fixLineNum": 301, "fixNodeStartChar": 13691, "fixNodeLength": 21, "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "fixCommitParentSHA1": "4e979b8a74c0c3143aa09a274a1954af03820ffc", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\nindex 97106e4..17dca90 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_TimeoutTest.java\n@@ -298,7 +298,7 @@\n \n     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -308,9 +308,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);\n@@ -324,7 +324,7 @@\n \n     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n-        long callTimeoutMs = 5000;\n+        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);\n@@ -334,9 +334,9 @@\n         OperationService opService = getOperationService(local);\n \n         int partitionId = getPartitionId(remote);\n-        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n+        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n \n-        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n+        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n \n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 327, "bugNodeStartChar": 14877, "bugNodeLength": 20, "fixLineNum": 327, "fixNodeStartChar": 14877, "fixNodeLength": 21, "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "48a6e99829e47be28498f8dffc32e823a5efc648", "fixCommitParentSHA1": "4e979b8a74c0c3143aa09a274a1954af03820ffc", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\nindex 0d89c7d..684de7b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n@@ -334,7 +334,7 @@\n      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n-        int callTimeout = 1000;\n+        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 337, "bugNodeStartChar": 15330, "bugNodeLength": 18, "fixLineNum": 337, "fixNodeStartChar": 15330, "fixNodeLength": 18, "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "bc5195afc618906a469840ca6f51315e7342b56a", "fixCommitParentSHA1": "134876e654ece0e3ae1ceed73fd29774fb1fb161", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\nindex 70132ec..c4451ab 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n@@ -269,7 +269,7 @@\n      */\n     @Test\n     public void sync_whenManyGettersAndLotsOfWaiting() throws Exception {\n-        int callTimeout = 5000;\n+        int callTimeout = 10000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 272, "bugNodeStartChar": 12420, "bugNodeLength": 18, "fixLineNum": 272, "fixNodeStartChar": 12420, "fixNodeLength": 19, "sourceBeforeFix": "callTimeout=5000", "sourceAfterFix": "callTimeout=10000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a5f5d3c0dfe33822c9ff5197424ea40073e279c4", "fixCommitParentSHA1": "134876e654ece0e3ae1ceed73fd29774fb1fb161", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\nindex 70132ec..c4451ab 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/Invocation_BlockingTest.java\n@@ -269,7 +269,7 @@\n      */\n     @Test\n     public void sync_whenManyGettersAndLotsOfWaiting() throws Exception {\n-        int callTimeout = 5000;\n+        int callTimeout = 10000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 272, "bugNodeStartChar": 12420, "bugNodeLength": 18, "fixLineNum": 272, "fixNodeStartChar": 12420, "fixNodeLength": 19, "sourceBeforeFix": "callTimeout=5000", "sourceAfterFix": "callTimeout=10000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3f0fb5b3ed32cf28b5a4ca49b8eac5a4bab3f36b", "fixCommitParentSHA1": "489904bb06ac897638da57c1912e7c38c363c43c", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\nindex c6d4fdf..e251ca9 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n@@ -347,7 +347,7 @@\n         new Thread() {\n             public void run() {\n                 try {\n-                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n+                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 350, "bugNodeStartChar": 10869, "bugNodeLength": 36, "fixLineNum": 350, "fixNodeStartChar": 10869, "fixNodeLength": 37, "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1c9a83a316dcb5c1d304c9c600627df5dc77c3f0", "fixCommitParentSHA1": "7835265ca9ee2324b28ccb315293bcba7c9ec94e", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\nindex a575f02..4e6fe0a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n@@ -175,7 +175,7 @@\n \n     @Test\n     public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {\n-        int callTimeoutMillis = 1000;\n+        int callTimeoutMillis = 3000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMillis);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 178, "bugNodeStartChar": 6241, "bugNodeLength": 24, "fixLineNum": 178, "fixNodeStartChar": 6241, "fixNodeLength": 24, "sourceBeforeFix": "callTimeoutMillis=1000", "sourceAfterFix": "callTimeoutMillis=3000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "62cba9fe2c42bbaea8fef30c85a9e5d7e9bcdb19", "fixCommitParentSHA1": "8400ca8852f129750f8232cdf5db21ffae134e02", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\nindex c6d4fdf..e251ca9 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapLockTest.java\n@@ -347,7 +347,7 @@\n         new Thread() {\n             public void run() {\n                 try {\n-                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n+                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 350, "bugNodeStartChar": 10869, "bugNodeLength": 36, "fixLineNum": 350, "fixNodeStartChar": 10869, "fixNodeLength": 37, "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2bb37d67f77baa0a75775c4fe68f892aab9a9e75", "fixCommitParentSHA1": "8400ca8852f129750f8232cdf5db21ffae134e02", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\nindex a575f02..4e6fe0a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl_timeoutTest.java\n@@ -175,7 +175,7 @@\n \n     @Test\n     public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {\n-        int callTimeoutMillis = 1000;\n+        int callTimeoutMillis = 3000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMillis);\n \n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 178, "bugNodeStartChar": 6241, "bugNodeLength": 24, "fixLineNum": 178, "fixNodeStartChar": 6241, "fixNodeLength": 24, "sourceBeforeFix": "callTimeoutMillis=1000", "sourceAfterFix": "callTimeoutMillis=3000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "3ea1955304241b9d24855766db1691d507137c51", "fixCommitParentSHA1": "1e0954a1dfa0c5a9be7eff340a62978d0cfd9e22", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\nindex 5a58bef..c4663ed 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n@@ -310,7 +310,7 @@\n             public void run() throws Exception {\n                 assertFalse(lock.isLocked());\n             }\n-        }, 5);\n+        }, 20);\n     }\n \n     @Test(expected = NullPointerException.class, timeout = 60000)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 308, "bugNodeStartChar": 9041, "bugNodeLength": 184, "fixLineNum": 308, "fixNodeStartChar": 9041, "fixNodeLength": 185, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "29aa409a4effaab80a748ac6a4d04381a5fc223f", "fixCommitParentSHA1": "b9a513bca4008f6a13c94ec892e7a234f233d308", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\nindex 5a58bef..c4663ed 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n@@ -310,7 +310,7 @@\n             public void run() throws Exception {\n                 assertFalse(lock.isLocked());\n             }\n-        }, 5);\n+        }, 20);\n     }\n \n     @Test(expected = NullPointerException.class, timeout = 60000)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 308, "bugNodeStartChar": 9041, "bugNodeLength": 184, "fixLineNum": 308, "fixNodeStartChar": 9041, "fixNodeLength": 185, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "732060e21eadf6442be6f1cf3c755e3ed1b28c7d", "fixCommitParentSHA1": "1e0954a1dfa0c5a9be7eff340a62978d0cfd9e22", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\nindex 5a58bef..c4663ed 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n@@ -310,7 +310,7 @@\n             public void run() throws Exception {\n                 assertFalse(lock.isLocked());\n             }\n-        }, 5);\n+        }, 20);\n     }\n \n     @Test(expected = NullPointerException.class, timeout = 60000)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 308, "bugNodeStartChar": 9041, "bugNodeLength": 184, "fixLineNum": 308, "fixNodeStartChar": 9041, "fixNodeLength": 185, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "abf7d2328e734a084e2a28d18f67a18b2379566b", "fixCommitParentSHA1": "7a85119779f4e048713f7beb1b13095bcfb5b7e1", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\nindex 5a58bef..c4663ed 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/LockBasicTest.java\n@@ -310,7 +310,7 @@\n             public void run() throws Exception {\n                 assertFalse(lock.isLocked());\n             }\n-        }, 5);\n+        }, 20);\n     }\n \n     @Test(expected = NullPointerException.class, timeout = 60000)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 308, "bugNodeStartChar": 9041, "bugNodeLength": 184, "fixLineNum": 308, "fixNodeStartChar": 9041, "fixNodeLength": 185, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java b/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\nindex 40b8019..209a6c3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\n@@ -40,7 +40,7 @@\n \n     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 43, "bugNodeStartChar": 1401, "bugNodeLength": 47, "fixLineNum": 43, "fixNodeStartChar": 1401, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java b/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\nindex 40b8019..209a6c3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\n@@ -40,7 +40,7 @@\n \n     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 43, "bugNodeStartChar": 1401, "bugNodeLength": 47, "fixLineNum": 43, "fixNodeStartChar": 1401, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java b/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java\nindex fbd3e63..d5cc5c7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java\n@@ -167,7 +167,7 @@\n \n     private void clearLockStore(String name) {\n         final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 170, "bugNodeStartChar": 6699, "bugNodeLength": 47, "fixLineNum": 170, "fixNodeStartChar": 6699, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java b/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java\nindex fbd3e63..d5cc5c7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/PartitionContainer.java\n@@ -167,7 +167,7 @@\n \n     private void clearLockStore(String name) {\n         final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 170, "bugNodeStartChar": 6699, "bugNodeLength": 47, "fixLineNum": 170, "fixNodeStartChar": 6699, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java\nindex d785349..50107b9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java\n@@ -186,7 +186,7 @@\n \n     protected LockStore createLockStore() {\n         NodeEngine nodeEngine = mapServiceContext.getNodeEngine();\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService == null) {\n             return null;\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 189, "bugNodeStartChar": 6954, "bugNodeLength": 47, "fixLineNum": 189, "fixNodeStartChar": 6954, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java\nindex d785349..50107b9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/AbstractRecordStore.java\n@@ -186,7 +186,7 @@\n \n     protected LockStore createLockStore() {\n         NodeEngine nodeEngine = mapServiceContext.getNodeEngine();\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService == null) {\n             return null;\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 189, "bugNodeStartChar": 6954, "bugNodeLength": 47, "fixLineNum": 189, "fixNodeStartChar": 6954, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\nindex 5fd527b..1dd3326 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n@@ -56,7 +56,7 @@\n         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }\n@@ -181,7 +181,7 @@\n     }\n \n     public void destroy() {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 59, "bugNodeStartChar": 1988, "bugNodeLength": 47, "fixLineNum": 59, "fixNodeStartChar": 1988, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\nindex 5fd527b..1dd3326 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n@@ -56,7 +56,7 @@\n         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }\n@@ -181,7 +181,7 @@\n     }\n \n     public void destroy() {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 59, "bugNodeStartChar": 1988, "bugNodeLength": 47, "fixLineNum": 59, "fixNodeStartChar": 1988, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\nindex 5fd527b..1dd3326 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n@@ -56,7 +56,7 @@\n         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }\n@@ -181,7 +181,7 @@\n     }\n \n     public void destroy() {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 184, "bugNodeStartChar": 6602, "bugNodeLength": 47, "fixLineNum": 184, "fixNodeStartChar": 6602, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\nindex 5fd527b..1dd3326 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapContainer.java\n@@ -56,7 +56,7 @@\n         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }\n@@ -181,7 +181,7 @@\n     }\n \n     public void destroy() {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 184, "bugNodeStartChar": 6602, "bugNodeLength": 47, "fixLineNum": 184, "fixNodeStartChar": 6602, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java\nindex d11e2d5..1488b58 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java\n@@ -79,7 +79,7 @@\n \n     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n-        LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 2915, "bugNodeLength": 47, "fixLineNum": 82, "fixNodeStartChar": 2915, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java\nindex d11e2d5..1488b58 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapPartitionContainer.java\n@@ -79,7 +79,7 @@\n \n     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n-        LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 2915, "bugNodeLength": 47, "fixLineNum": 82, "fixNodeStartChar": 2915, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java\nindex 0911387..3bd7e47 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java\n@@ -101,7 +101,7 @@\n         for (int partition = 0; partition < partitionCount; partition++) {\n             partitionContainers[partition] = new MultiMapPartitionContainer(this, partition);\n         }\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(SERVICE_NAME,\n                     new ConstructorFunction<ObjectNamespace, LockStoreInfo>() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 104, "bugNodeStartChar": 4762, "bugNodeLength": 47, "fixLineNum": 104, "fixNodeStartChar": 4762, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java\nindex 0911387..3bd7e47 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/MultiMapService.java\n@@ -101,7 +101,7 @@\n         for (int partition = 0; partition < partitionCount; partition++) {\n             partitionContainers[partition] = new MultiMapPartitionContainer(this, partition);\n         }\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(SERVICE_NAME,\n                     new ConstructorFunction<ObjectNamespace, LockStoreInfo>() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 104, "bugNodeStartChar": 4762, "bugNodeLength": 47, "fixLineNum": 104, "fixNodeStartChar": 4762, "fixNodeLength": 53, "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4239763e8de74d0caf04eda4d9cafc2a182ab7cb", "fixCommitParentSHA1": "b3fea15ee3fd33362811b1c0e720f8ec3884b13c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\nindex 42818f8..131a29c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n@@ -44,9 +44,9 @@\n     static int validateAndGetArrayQuantifierFromCurrentToken(String token, String fullPath) {\n         String quantifier = extractArgumentsFromAttributeName(token);\n         if (quantifier == null) {\n-            throw new IllegalArgumentException(\"Malformed quantifier \" + quantifier + \" in \" + fullPath);\n+            throw new IllegalArgumentException(\"Malformed quantifier in \" + fullPath);\n         }\n-        int index = Integer.valueOf(quantifier);\n+        int index = Integer.parseInt(quantifier);\n         if (index < 0) {\n             throw new IllegalArgumentException(\"Array index \" + index + \" cannot be negative in \" + fullPath);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 49, "bugNodeStartChar": 1798, "bugNodeLength": 27, "fixLineNum": 49, "fixNodeStartChar": 1798, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(quantifier)", "sourceAfterFix": "Integer.parseInt(quantifier)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4239763e8de74d0caf04eda4d9cafc2a182ab7cb", "fixCommitParentSHA1": "b3fea15ee3fd33362811b1c0e720f8ec3884b13c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\nindex 42818f8..131a29c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n@@ -44,9 +44,9 @@\n     static int validateAndGetArrayQuantifierFromCurrentToken(String token, String fullPath) {\n         String quantifier = extractArgumentsFromAttributeName(token);\n         if (quantifier == null) {\n-            throw new IllegalArgumentException(\"Malformed quantifier \" + quantifier + \" in \" + fullPath);\n+            throw new IllegalArgumentException(\"Malformed quantifier in \" + fullPath);\n         }\n-        int index = Integer.valueOf(quantifier);\n+        int index = Integer.parseInt(quantifier);\n         if (index < 0) {\n             throw new IllegalArgumentException(\"Array index \" + index + \" cannot be negative in \" + fullPath);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 49, "bugNodeStartChar": 1798, "bugNodeLength": 27, "fixLineNum": 49, "fixNodeStartChar": 1798, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(quantifier)", "sourceAfterFix": "Integer.parseInt(quantifier)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6b804627dad4f5ba55073fc596dc10513d7bbdf2", "fixCommitParentSHA1": "b3fea15ee3fd33362811b1c0e720f8ec3884b13c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\nindex 42818f8..131a29c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n@@ -44,9 +44,9 @@\n     static int validateAndGetArrayQuantifierFromCurrentToken(String token, String fullPath) {\n         String quantifier = extractArgumentsFromAttributeName(token);\n         if (quantifier == null) {\n-            throw new IllegalArgumentException(\"Malformed quantifier \" + quantifier + \" in \" + fullPath);\n+            throw new IllegalArgumentException(\"Malformed quantifier in \" + fullPath);\n         }\n-        int index = Integer.valueOf(quantifier);\n+        int index = Integer.parseInt(quantifier);\n         if (index < 0) {\n             throw new IllegalArgumentException(\"Array index \" + index + \" cannot be negative in \" + fullPath);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 49, "bugNodeStartChar": 1798, "bugNodeLength": 27, "fixLineNum": 49, "fixNodeStartChar": 1798, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(quantifier)", "sourceAfterFix": "Integer.parseInt(quantifier)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6b804627dad4f5ba55073fc596dc10513d7bbdf2", "fixCommitParentSHA1": "b3fea15ee3fd33362811b1c0e720f8ec3884b13c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\nindex 42818f8..131a29c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/PortableUtils.java\n@@ -44,9 +44,9 @@\n     static int validateAndGetArrayQuantifierFromCurrentToken(String token, String fullPath) {\n         String quantifier = extractArgumentsFromAttributeName(token);\n         if (quantifier == null) {\n-            throw new IllegalArgumentException(\"Malformed quantifier \" + quantifier + \" in \" + fullPath);\n+            throw new IllegalArgumentException(\"Malformed quantifier in \" + fullPath);\n         }\n-        int index = Integer.valueOf(quantifier);\n+        int index = Integer.parseInt(quantifier);\n         if (index < 0) {\n             throw new IllegalArgumentException(\"Array index \" + index + \" cannot be negative in \" + fullPath);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 49, "bugNodeStartChar": 1798, "bugNodeLength": 27, "fixLineNum": 49, "fixNodeStartChar": 1798, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(quantifier)", "sourceAfterFix": "Integer.parseInt(quantifier)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "b407c818d8a8fbc9d2c7e865df67b9ebfde952ae", "fixCommitParentSHA1": "e4d46ca401d9c016252d3cb1c7eeb98da22b123c", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/internal/util/collection/MPSCQueueStressTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/collection/MPSCQueueStressTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/collection/MPSCQueueStressTest.java\nindex bcfea97..014774d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/collection/MPSCQueueStressTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/collection/MPSCQueueStressTest.java\n@@ -107,7 +107,7 @@\n                 itemCount++;\n                 queue.offer(new Item(id, itemCount));\n \n-                while (queue.size() < 100000) {\n+                while (queue.size() > 100000) {\n                     sleepMillis(random.nextInt(100));\n                 }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 3453, "bugNodeLength": 21, "fixLineNum": 110, "fixNodeStartChar": 3453, "fixNodeLength": 21, "sourceBeforeFix": "queue.size() < 100000", "sourceAfterFix": "queue.size() > 100000"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "265bf95ce57989d414abb9296a87093f78ea9492", "fixCommitParentSHA1": "44c1952a6e819da34827f49d1aec7e598d7e7d34", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\nindex b46f8b4..4fba948 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n@@ -44,7 +44,7 @@\n     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n-        shouldBackup = !returnValue;\n+        shouldBackup = returnValue;\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1658, "bugNodeLength": 12, "fixLineNum": 47, "fixNodeStartChar": 1658, "fixNodeLength": 11, "sourceBeforeFix": "!returnValue", "sourceAfterFix": "returnValue"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "7e9f9b4d6a2567af69b9b21c93b8e967cb2cb384", "fixCommitParentSHA1": "97c6e4bfd68accb93e6dfb1bbb8b7c8f30738d33", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\nindex 3184df8..d8ca749 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n@@ -44,7 +44,7 @@\n     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n-        shouldBackup = !returnValue;\n+        shouldBackup = returnValue;\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1658, "bugNodeLength": 12, "fixLineNum": 47, "fixNodeStartChar": 1658, "fixNodeLength": 11, "sourceBeforeFix": "!returnValue", "sourceAfterFix": "returnValue"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "0ff079b4276fa4c7534d0563fd31f6b0826fdc17", "fixCommitParentSHA1": "44c1952a6e819da34827f49d1aec7e598d7e7d34", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\nindex b46f8b4..4fba948 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n@@ -44,7 +44,7 @@\n     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n-        shouldBackup = !returnValue;\n+        shouldBackup = returnValue;\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1658, "bugNodeLength": 12, "fixLineNum": 47, "fixNodeStartChar": 1658, "fixNodeLength": 11, "sourceBeforeFix": "!returnValue", "sourceAfterFix": "returnValue"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "81957f2b062b7f9ee2e3d4b3b4ff420e460f2018", "fixCommitParentSHA1": "5fd18064c16a7b6c67159fb1f6cb7a254ed56274", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\nindex 3184df8..d8ca749 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/CompareAndSetOperation.java\n@@ -44,7 +44,7 @@\n     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n-        shouldBackup = !returnValue;\n+        shouldBackup = returnValue;\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1658, "bugNodeLength": 12, "fixLineNum": 47, "fixNodeStartChar": 1658, "fixNodeLength": 11, "sourceBeforeFix": "!returnValue", "sourceAfterFix": "returnValue"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "fixCommitParentSHA1": "99598f3509b3d4d366844b4e94f17b09b27942de", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\nindex 0c9c6a2..d59f9bc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\n@@ -175,7 +175,7 @@\n             @Override\n             public void run()\n                     throws Exception {\n-                assertTrue(stats.getLastAccessTime() > lastAccessTime);\n+                assertTrue(stats.getLastAccessTime() >= lastAccessTime);\n             }\n         });\n     }\n@@ -194,7 +194,7 @@\n         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n-        assertTrue(lastUpdateTime2 > lastUpdateTime);\n+        assertTrue(lastUpdateTime2 >= lastUpdateTime);\n     }\n \n     @Test\n@@ -222,7 +222,7 @@\n             @Override\n             public void run()\n                     throws Exception {\n-                assertTrue(stats.getLastUpdateTime() > lastUpdateTime);\n+                assertTrue(stats.getLastUpdateTime() >= lastUpdateTime);\n             }\n         });\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 178, "bugNodeStartChar": 6457, "bugNodeLength": 42, "fixLineNum": 178, "fixNodeStartChar": 6457, "fixNodeLength": 43, "sourceBeforeFix": "stats.getLastAccessTime() > lastAccessTime", "sourceAfterFix": "stats.getLastAccessTime() >= lastAccessTime"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "fixCommitParentSHA1": "99598f3509b3d4d366844b4e94f17b09b27942de", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\nindex 0c9c6a2..d59f9bc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\n@@ -175,7 +175,7 @@\n             @Override\n             public void run()\n                     throws Exception {\n-                assertTrue(stats.getLastAccessTime() > lastAccessTime);\n+                assertTrue(stats.getLastAccessTime() >= lastAccessTime);\n             }\n         });\n     }\n@@ -194,7 +194,7 @@\n         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n-        assertTrue(lastUpdateTime2 > lastUpdateTime);\n+        assertTrue(lastUpdateTime2 >= lastUpdateTime);\n     }\n \n     @Test\n@@ -222,7 +222,7 @@\n             @Override\n             public void run()\n                     throws Exception {\n-                assertTrue(stats.getLastUpdateTime() > lastUpdateTime);\n+                assertTrue(stats.getLastUpdateTime() >= lastUpdateTime);\n             }\n         });\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 7130, "bugNodeLength": 32, "fixLineNum": 197, "fixNodeStartChar": 7130, "fixNodeLength": 33, "sourceBeforeFix": "lastUpdateTime2 > lastUpdateTime", "sourceAfterFix": "lastUpdateTime2 >= lastUpdateTime"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "fixCommitParentSHA1": "99598f3509b3d4d366844b4e94f17b09b27942de", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\nindex 0c9c6a2..d59f9bc 100644\n--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapStatsTest.java\n@@ -175,7 +175,7 @@\n             @Override\n             public void run()\n                     throws Exception {\n-                assertTrue(stats.getLastAccessTime() > lastAccessTime);\n+                assertTrue(stats.getLastAccessTime() >= lastAccessTime);\n             }\n         });\n     }\n@@ -194,7 +194,7 @@\n         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n-        assertTrue(lastUpdateTime2 > lastUpdateTime);\n+        assertTrue(lastUpdateTime2 >= lastUpdateTime);\n     }\n \n     @Test\n@@ -222,7 +222,7 @@\n             @Override\n             public void run()\n                     throws Exception {\n-                assertTrue(stats.getLastUpdateTime() > lastUpdateTime);\n+                assertTrue(stats.getLastUpdateTime() >= lastUpdateTime);\n             }\n         });\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 225, "bugNodeStartChar": 8110, "bugNodeLength": 42, "fixLineNum": 225, "fixNodeStartChar": 8110, "fixNodeLength": 43, "sourceBeforeFix": "stats.getLastUpdateTime() > lastUpdateTime", "sourceAfterFix": "stats.getLastUpdateTime() >= lastUpdateTime"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "5d32900cdc433ee792808356695773ca24a4b94c", "fixCommitParentSHA1": "bbdfc98f918db1d58908f9c21378a2772e4f0910", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientMessage.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientMessage.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientMessage.java\nindex 582a38d..8619ab8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientMessage.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/ClientMessage.java\n@@ -64,7 +64,7 @@\n     /**\n      * Current protocol version\n      */\n-    public static final short VERSION = 0;\n+    public static final short VERSION = 1;\n \n     /**\n      * Begin Flag\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 2661, "bugNodeLength": 11, "fixLineNum": 67, "fixNodeStartChar": 2661, "fixNodeLength": 11, "sourceBeforeFix": "VERSION=0", "sourceAfterFix": "VERSION=1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3d785dfc55bb6fdec9c6fcd67b9a2359cc216181", "fixCommitParentSHA1": "0e0de4b5f11e9ead03c1b9fc49d5ee6b51fd3d46", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 298dd66..ec233c6 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -235,7 +235,7 @@\n         }\n     }\n \n-    private class BlockingCallback implements AuthenticationCallback {\n+    private static class BlockingCallback implements AuthenticationCallback {\n \n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 238, "bugNodeStartChar": 9677, "bugNodeLength": 761, "fixLineNum": 238, "fixNodeStartChar": 9677, "fixNodeLength": 768, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b330578175d6cc317cbfea7caf4fab521d66ffaf", "fixCommitParentSHA1": "c669f41dc707af7ec5a282f7f16a894abd5b4e34", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex c726547..78fca91 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -237,7 +237,7 @@\n         }\n     }\n \n-    private class BlockingCallback implements AuthenticationCallback {\n+    private static class BlockingCallback implements AuthenticationCallback {\n \n         private final CountDownLatch countDownLatch = new CountDownLatch(1);\n         private Connection connection;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 240, "bugNodeStartChar": 9815, "bugNodeLength": 761, "fixLineNum": 240, "fixNodeStartChar": 9815, "fixNodeLength": 768, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2106da01e9b791ca7d28dcbd3d68265c25190c95", "fixCommitParentSHA1": "6b2fbbcb689c6b1a6da417d3f63067528bb1ae86", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex e7c293b..fc21382 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -424,7 +424,7 @@\n                 }\n                 try {\n                     initializeConnection(remoteAddress, authenticator);\n-                } catch (IOException e) {\n+                } catch (Exception e) {\n                     logger.finest(e);\n                 } finally {\n                     connectionsInProgress.remove(target);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 427, "bugNodeStartChar": 17576, "bugNodeLength": 13, "fixLineNum": 427, "fixNodeStartChar": 17576, "fixNodeLength": 11, "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9ef24160735f7802ad86b3b98b77c429d6a87475", "fixCommitParentSHA1": "56320e88e687e5353bf7bdcdffde3c499bbdcd0f", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 7209ac1..d7a2f34 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -423,7 +423,7 @@\n                 }\n                 try {\n                     initializeConnection(remoteAddress, authenticator);\n-                } catch (IOException e) {\n+                } catch (Exception e) {\n                     LOGGER.finest(e);\n                 } finally {\n                     connectionsInProgress.remove(target);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 426, "bugNodeStartChar": 17446, "bugNodeLength": 13, "fixLineNum": 426, "fixNodeStartChar": 17446, "fixNodeLength": 11, "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e05cd99b38abbe3bbeb21355f87ca992e4abe92a", "fixCommitParentSHA1": "c253c4bbc79d4ef029004a12f3b07def89b52b88", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 7209ac1..d7a2f34 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -423,7 +423,7 @@\n                 }\n                 try {\n                     initializeConnection(remoteAddress, authenticator);\n-                } catch (IOException e) {\n+                } catch (Exception e) {\n                     LOGGER.finest(e);\n                 } finally {\n                     connectionsInProgress.remove(target);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 426, "bugNodeStartChar": 17446, "bugNodeLength": 13, "fixLineNum": 426, "fixNodeStartChar": 17446, "fixNodeLength": 11, "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e12d6fdf8c008b04c9192c3297b644d245a7bcde", "fixCommitParentSHA1": "09f2fa4112211c2994eedd606fc8d5d0ca7571eb", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex e7c293b..fc21382 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -424,7 +424,7 @@\n                 }\n                 try {\n                     initializeConnection(remoteAddress, authenticator);\n-                } catch (IOException e) {\n+                } catch (Exception e) {\n                     logger.finest(e);\n                 } finally {\n                     connectionsInProgress.remove(target);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 427, "bugNodeStartChar": 17576, "bugNodeLength": 13, "fixLineNum": 427, "fixNodeStartChar": 17576, "fixNodeLength": 11, "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "95160be4d3502c2b87abe26ffb493f1ac49b4bbe", "fixCommitParentSHA1": "68169508cc3ffe85856b9c1571c4ada159600f1c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex a2e98c7..2aba2ac 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -497,7 +497,7 @@\n \n     protected R createRecord(Data key, Object value, long expiryTime,\n                              long now, boolean disableWriteThrough, int completionId, String origin) {\n-        R record = createRecord(value, expiryTime);\n+        R record = createRecord(value, now, expiryTime);\n         try {\n             doPutRecord(key, record);\n         } catch (Throwable error) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 500, "bugNodeStartChar": 21251, "bugNodeLength": 31, "fixLineNum": 500, "fixNodeStartChar": 21251, "fixNodeLength": 36, "sourceBeforeFix": "createRecord(value,expiryTime)", "sourceAfterFix": "createRecord(value,now,expiryTime)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "95160be4d3502c2b87abe26ffb493f1ac49b4bbe", "fixCommitParentSHA1": "68169508cc3ffe85856b9c1571c4ada159600f1c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex a2e98c7..2aba2ac 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -497,7 +497,7 @@\n \n     protected R createRecord(Data key, Object value, long expiryTime,\n                              long now, boolean disableWriteThrough, int completionId, String origin) {\n-        R record = createRecord(value, expiryTime);\n+        R record = createRecord(value, now, expiryTime);\n         try {\n             doPutRecord(key, record);\n         } catch (Throwable error) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 500, "bugNodeStartChar": 21251, "bugNodeLength": 31, "fixLineNum": 500, "fixNodeStartChar": 21251, "fixNodeLength": 36, "sourceBeforeFix": "createRecord(value,expiryTime)", "sourceAfterFix": "createRecord(value,now,expiryTime)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d833421e7191db98224e87b2e322745a4f4d3c80", "fixCommitParentSHA1": "ac6d342c5e9a2c51e6e044cead24df6acdc478f7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex a2e98c7..2aba2ac 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -497,7 +497,7 @@\n \n     protected R createRecord(Data key, Object value, long expiryTime,\n                              long now, boolean disableWriteThrough, int completionId, String origin) {\n-        R record = createRecord(value, expiryTime);\n+        R record = createRecord(value, now, expiryTime);\n         try {\n             doPutRecord(key, record);\n         } catch (Throwable error) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 500, "bugNodeStartChar": 21251, "bugNodeLength": 31, "fixLineNum": 500, "fixNodeStartChar": 21251, "fixNodeLength": 36, "sourceBeforeFix": "createRecord(value,expiryTime)", "sourceAfterFix": "createRecord(value,now,expiryTime)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d833421e7191db98224e87b2e322745a4f4d3c80", "fixCommitParentSHA1": "ac6d342c5e9a2c51e6e044cead24df6acdc478f7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex a2e98c7..2aba2ac 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -497,7 +497,7 @@\n \n     protected R createRecord(Data key, Object value, long expiryTime,\n                              long now, boolean disableWriteThrough, int completionId, String origin) {\n-        R record = createRecord(value, expiryTime);\n+        R record = createRecord(value, now, expiryTime);\n         try {\n             doPutRecord(key, record);\n         } catch (Throwable error) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 500, "bugNodeStartChar": 21251, "bugNodeLength": 31, "fixLineNum": 500, "fixNodeStartChar": 21251, "fixNodeLength": 36, "sourceBeforeFix": "createRecord(value,expiryTime)", "sourceAfterFix": "createRecord(value,now,expiryTime)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dc050d4adc218769b52b57d7bb1263200c945ccf", "fixCommitParentSHA1": "ef6c10d9a1339603cd9d74f1529459241eb12457", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cache/CacheBasicAbstractTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cache/CacheBasicAbstractTest.java b/hazelcast/src/test/java/com/hazelcast/cache/CacheBasicAbstractTest.java\nindex 8336bec..3234b0d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cache/CacheBasicAbstractTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cache/CacheBasicAbstractTest.java\n@@ -821,9 +821,9 @@\n     // https://github.com/hazelcast/hazelcast/issues/7236\n     @Test\n     public void expiryTimeShouldNotBeChangedOnUpdateWhenCreatedExpiryPolicyIsUsed() {\n-        final int CRETAED_EXPIRY_TIME_IN_MSEC = 1000;\n+        final int CREATED_EXPIRY_TIME_IN_MSEC = 100;\n \n-        Duration duration = new Duration(TimeUnit.MILLISECONDS, CRETAED_EXPIRY_TIME_IN_MSEC);\n+        Duration duration = new Duration(TimeUnit.MILLISECONDS, CREATED_EXPIRY_TIME_IN_MSEC);\n         CacheConfig<Integer, String> cacheConfig = new CacheConfig<Integer, String>();\n         cacheConfig.setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(duration));\n \n@@ -831,7 +831,7 @@\n         cache.put(1, \"value\");\n         cache.put(1, \"value\");\n \n-        sleepAtLeastMillis(CRETAED_EXPIRY_TIME_IN_MSEC + 1);\n+        sleepAtLeastMillis(CREATED_EXPIRY_TIME_IN_MSEC + 1);\n \n         assertNull(cache.get(1));\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 826, "bugNodeStartChar": 29688, "bugNodeLength": 64, "fixLineNum": 826, "fixNodeStartChar": 29688, "fixNodeLength": 64, "sourceBeforeFix": "new Duration(TimeUnit.MILLISECONDS,CRETAED_EXPIRY_TIME_IN_MSEC)", "sourceAfterFix": "new Duration(TimeUnit.MILLISECONDS,CREATED_EXPIRY_TIME_IN_MSEC)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "14520904ee7fad852e9c147f7ec2ed6d515f6321", "fixCommitParentSHA1": "4df22c76533b8cdc9e85c91b93d4b5d5a9713aef", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/writebehind/WriteBehindFlushTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/writebehind/WriteBehindFlushTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/writebehind/WriteBehindFlushTest.java\nindex 3e924f4..60ac6c9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/writebehind/WriteBehindFlushTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/writebehind/WriteBehindFlushTest.java\n@@ -72,7 +72,7 @@\n                 .mapName(mapName)\n                 .withMapStore(mapStore)\n                 .withNodeCount(nodeCount)\n-                .withBackupCount(2)\n+                .withBackupCount(1)\n                 .withConfig(getConfig())\n                 .withNodeFactory(factory)\n                 .withWriteDelaySeconds(300);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 71, "bugNodeStartChar": 2813, "bugNodeLength": 188, "fixLineNum": 71, "fixNodeStartChar": 2813, "fixNodeLength": 188, "sourceBeforeFix": "TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(2)", "sourceAfterFix": "TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(1)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "adbc8e2988688b80d6acf089c9ae7662ef1dca34", "fixCommitParentSHA1": "114a51685d143030d19bcc8f4f16c443070d6e86", "bugFilePath": "hazelcast-client-new/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java", "fixPatch": "diff --git a/hazelcast-client-new/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java b/hazelcast-client-new/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\nindex 2b13302..f3eea11 100644\n--- a/hazelcast-client-new/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n+++ b/hazelcast-client-new/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n@@ -87,7 +87,7 @@\n                 assertEquals(\"there should be only one registration\", 1, regs1.size());\n                 assertEquals(\"there should be only one registration\", 1, regs2.size());\n             }\n-        }, 10);\n+        });\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 81, "bugNodeStartChar": 3051, "bugNodeLength": 556, "fixLineNum": 81, "fixNodeStartChar": 3051, "fixNodeLength": 552, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } ,10)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } )"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "adbc8e2988688b80d6acf089c9ae7662ef1dca34", "fixCommitParentSHA1": "114a51685d143030d19bcc8f4f16c443070d6e86", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\nindex b0acefc..3326c3e 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n@@ -87,7 +87,7 @@\n                 assertEquals(\"there should be only one registration\", 1, regs1.size());\n                 assertEquals(\"there should be only one registration\", 1, regs2.size());\n             }\n-        }, 10);\n+        });\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 81, "bugNodeStartChar": 3051, "bugNodeLength": 556, "fixLineNum": 81, "fixNodeStartChar": 3051, "fixNodeLength": 552, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } ,10)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } )"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "b5f179d675b2ab824cf0968ed305cc3a1e88113f", "fixCommitParentSHA1": "3803599dbbe08827ffb03c44ff33b724daea1beb", "bugFilePath": "hazelcast-client-legacy/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java", "fixPatch": "diff --git a/hazelcast-client-legacy/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java b/hazelcast-client-legacy/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\nindex 7313840..982135f 100644\n--- a/hazelcast-client-legacy/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n+++ b/hazelcast-client-legacy/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n@@ -88,7 +88,7 @@\n                 assertEquals(\"there should be only one registration\", 1, regs1.size());\n                 assertEquals(\"there should be only one registration\", 1, regs2.size());\n             }\n-        }, 10);\n+        });\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 3120, "bugNodeLength": 556, "fixLineNum": 82, "fixNodeStartChar": 3120, "fixNodeLength": 552, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } ,10)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } )"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "b5f179d675b2ab824cf0968ed305cc3a1e88113f", "fixCommitParentSHA1": "3803599dbbe08827ffb03c44ff33b724daea1beb", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\nindex f7a21a7..4ae674f 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n@@ -88,7 +88,7 @@\n                 assertEquals(\"there should be only one registration\", 1, regs1.size());\n                 assertEquals(\"there should be only one registration\", 1, regs2.size());\n             }\n-        }, 10);\n+        });\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 3120, "bugNodeLength": 556, "fixLineNum": 82, "fixNodeStartChar": 3120, "fixNodeLength": 552, "sourceBeforeFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } ,10)", "sourceAfterFix": "assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals(\"there should be only one registration\",1,regs1.size());     assertEquals(\"there should be only one registration\",1,regs2.size());   } } )"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6ba4ff2eed6ffb1393a898b642f8f42e0bbff0cf", "fixCommitParentSHA1": "f622591e032c552afd84483fdcab2e9cd5b14065", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java\nindex fafcb67..1918175 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest{\n+public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n         return createHazelcastInstanceFactory(2).newInstances(config);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 368, "bugNodeLength": 335, "fixLineNum": 11, "fixNodeStartChar": 368, "fixNodeLength": 339, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6ba4ff2eed6ffb1393a898b642f8f42e0bbff0cf", "fixCommitParentSHA1": "f622591e032c552afd84483fdcab2e9cd5b14065", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicLocalTest.java\nindex a846d96..8738070 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicLocalTest.java\n@@ -11,7 +11,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class TransactionalSetBasicLocalTest extends TransactionalSetBasicTest{\n+public class TransactionalSetBasicLocalTest extends TransactionalSetAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 12, "bugNodeStartChar": 369, "bugNodeLength": 330, "fixLineNum": 12, "fixNodeStartChar": 369, "fixNodeLength": 334, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f622591e032c552afd84483fdcab2e9cd5b14065", "fixCommitParentSHA1": "8f1349d4f3fb6affc967663a8c8032535735585a", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicDistributedTest.java\nindex e5ac257..49314c0 100644\n--- a/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicDistributedTest.java\n@@ -26,7 +26,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class RingbufferBasicDistributedTest extends RingbufferBasicTest {\n+public class RingbufferBasicDistributedTest extends RingbufferAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 27, "bugNodeStartChar": 988, "bugNodeLength": 325, "fixLineNum": 27, "fixNodeStartChar": 988, "fixNodeLength": 328, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "f622591e032c552afd84483fdcab2e9cd5b14065", "fixCommitParentSHA1": "8f1349d4f3fb6affc967663a8c8032535735585a", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicLocalTest.java\nindex 5852e44..2357553 100644\n--- a/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/ringbuffer/impl/RingbufferBasicLocalTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class RingbufferBasicLocalTest extends RingbufferBasicTest {\n+public class RingbufferBasicLocalTest extends RingbufferAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 361, "bugNodeLength": 319, "fixLineNum": 11, "fixNodeStartChar": 361, "fixNodeLength": 322, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8f1349d4f3fb6affc967663a8c8032535735585a", "fixCommitParentSHA1": "7274d19d3eaeb4bc1ef2a16c0ac08e7447a27003", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicDistributedTest.java\nindex 57651e0..b3e9c6a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicDistributedTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ListBasicDistributedTest extends ListBasicTest {\n+public class ListBasicDistributedTest extends ListAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 366, "bugNodeLength": 313, "fixLineNum": 11, "fixNodeStartChar": 366, "fixNodeLength": 316, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8f1349d4f3fb6affc967663a8c8032535735585a", "fixCommitParentSHA1": "7274d19d3eaeb4bc1ef2a16c0ac08e7447a27003", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicLocalTest.java\nindex 6a556cf..aa0ce64 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListBasicLocalTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ListBasicLocalTest extends ListBasicTest {\n+public class ListBasicLocalTest extends ListAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 366, "bugNodeLength": 307, "fixLineNum": 11, "fixNodeStartChar": 366, "fixNodeLength": 310, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7274d19d3eaeb4bc1ef2a16c0ac08e7447a27003", "fixCommitParentSHA1": "5c98a9a77137ecee6ed62d8f7b0b2a0999051b60", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicDistributedTest.java\nindex fc79c18..b61aefd 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicDistributedTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class SetBasicDistributedTest extends SetBasicTest{\n+public class SetBasicDistributedTest extends SetAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 365, "bugNodeLength": 310, "fixLineNum": 11, "fixNodeStartChar": 365, "fixNodeLength": 314, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7274d19d3eaeb4bc1ef2a16c0ac08e7447a27003", "fixCommitParentSHA1": "5c98a9a77137ecee6ed62d8f7b0b2a0999051b60", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicLocalTest.java\nindex b588b26..9a4c4d3 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetBasicLocalTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class SetBasicLocalTest extends SetBasicTest{\n+public class SetBasicLocalTest extends SetAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n         return createHazelcastInstanceFactory(1).newInstances(config);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 365, "bugNodeLength": 303, "fixLineNum": 11, "fixNodeStartChar": 365, "fixNodeLength": 307, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5c98a9a77137ecee6ed62d8f7b0b2a0999051b60", "fixCommitParentSHA1": "d7cc7dde8f5bc3bf573ec4e7b4e500e5accdcd25", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicDistributedTest.java\nindex 85c7ba1..0948cc1 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicDistributedTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class QueueBasicDistributedTest extends  QueueBasicTest{\n+public class QueueBasicDistributedTest extends QueueAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n         return createHazelcastInstanceFactory(2).newInstances(config);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 367, "bugNodeLength": 314, "fixLineNum": 11, "fixNodeStartChar": 367, "fixNodeLength": 317, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5c98a9a77137ecee6ed62d8f7b0b2a0999051b60", "fixCommitParentSHA1": "d7cc7dde8f5bc3bf573ec4e7b4e500e5accdcd25", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicLocalTest.java\nindex 5a119c8..fc2b56b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/queue/QueueBasicLocalTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class QueueBasicLocalTest extends QueueBasicTest {\n+public class QueueBasicLocalTest extends QueueAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 367, "bugNodeLength": 309, "fixLineNum": 11, "fixNodeStartChar": 367, "fixNodeLength": 312, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicLocalTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicLocalTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d7cc7dde8f5bc3bf573ec4e7b4e500e5accdcd25", "fixCommitParentSHA1": "d37f3d68a339f98055b3f9e82d7ac12171e58fd6", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicDistributedTest.java\nindex 34890eb..006abba 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicDistributedTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class AtomicLongBasicDistributedTest extends AtomicLongBasicTest {\n+public class AtomicLongBasicDistributedTest extends AtomicLongAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 331, "bugNodeLength": 306, "fixLineNum": 10, "fixNodeStartChar": 331, "fixNodeLength": 309, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d7cc7dde8f5bc3bf573ec4e7b4e500e5accdcd25", "fixCommitParentSHA1": "d37f3d68a339f98055b3f9e82d7ac12171e58fd6", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicLocalTest.java\nindex fcf808c..6f82a59 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongBasicLocalTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class AtomicLongBasicLocalTest extends AtomicLongBasicTest {\n+public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 331, "bugNodeLength": 300, "fixLineNum": 10, "fixNodeStartChar": 331, "fixNodeLength": 303, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c32ad40f85061b84724dd9b5b8479eebea8675a0", "fixCommitParentSHA1": "6f74927366d17a4773006a094a7f0bc29c4b674b", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/atomicreference/AtomicReferenceBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/atomicreference/AtomicReferenceBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/atomicreference/AtomicReferenceBasicLocalTest.java\nindex f9522d2..041b6c7 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/atomicreference/AtomicReferenceBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/atomicreference/AtomicReferenceBasicLocalTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class AtomicReferenceBasicLocalTest extends AtomicReferenceBasicTest {\n+public class AtomicReferenceBasicLocalTest extends AtomicReferenceAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 336, "bugNodeLength": 311, "fixLineNum": 10, "fixNodeStartChar": 336, "fixNodeLength": 314, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6f74927366d17a4773006a094a7f0bc29c4b674b", "fixCommitParentSHA1": "9323424d263a1e573ab7edbfc69d67d8782ce36a", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicDistributedTest.java\nindex 3b7a752..d76f73e 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicDistributedTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class IdGeneratorBasicDistributedTest extends IdGeneratorBasicTest {\n+public class IdGeneratorBasicDistributedTest extends IdGeneratorAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 326, "bugNodeLength": 308, "fixLineNum": 10, "fixNodeStartChar": 326, "fixNodeLength": 311, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6f74927366d17a4773006a094a7f0bc29c4b674b", "fixCommitParentSHA1": "9323424d263a1e573ab7edbfc69d67d8782ce36a", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicLocalTest.java\nindex 1694e32..2996c9c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/idgen/IdGeneratorBasicLocalTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class IdGeneratorBasicLocalTest extends IdGeneratorBasicTest {\n+public class IdGeneratorBasicLocalTest extends IdGeneratorAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 326, "bugNodeLength": 302, "fixLineNum": 10, "fixNodeStartChar": 326, "fixNodeLength": 305, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9323424d263a1e573ab7edbfc69d67d8782ce36a", "fixCommitParentSHA1": "4eae69e20692a697a12a705155e972ddf448ca48", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicDistributedTest.java\nindex 3264f27..8dfe4a8 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicDistributedTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ConditionBasicDistributedTest extends ConditionBasicTest {\n+public class ConditionBasicDistributedTest extends ConditionAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances() {\n         return createHazelcastInstanceFactory(2).newInstances();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 325, "bugNodeLength": 303, "fixLineNum": 10, "fixNodeStartChar": 325, "fixNodeLength": 306, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9323424d263a1e573ab7edbfc69d67d8782ce36a", "fixCommitParentSHA1": "4eae69e20692a697a12a705155e972ddf448ca48", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicLocalTest.java\nindex fa2e3ab..40cc2f3 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicLocalTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ConditionBasicLocalTest extends ConditionBasicTest {\n+public class ConditionBasicLocalTest extends ConditionAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances() {\n         return createHazelcastInstanceFactory(1).newInstances();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 325, "bugNodeLength": 297, "fixLineNum": 10, "fixNodeStartChar": 325, "fixNodeLength": 300, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4eae69e20692a697a12a705155e972ddf448ca48", "fixCommitParentSHA1": "0b31e2f4558706b0831744485a80958c93524a44", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicDistributedTest.java\nindex fa7e36d..d4f72c5 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicDistributedTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class CountDownLatchBasicDistributedTest extends CountDownLatchBasicTest {\n+public class CountDownLatchBasicDistributedTest extends CountDownLatchAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 335, "bugNodeLength": 314, "fixLineNum": 10, "fixNodeStartChar": 335, "fixNodeLength": 317, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4eae69e20692a697a12a705155e972ddf448ca48", "fixCommitParentSHA1": "0b31e2f4558706b0831744485a80958c93524a44", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicLocalTest.java\nindex 6c5d30b..f8ff21b 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchBasicLocalTest.java\n@@ -9,7 +9,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {\n+public class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 10, "bugNodeStartChar": 335, "bugNodeLength": 308, "fixLineNum": 10, "fixNodeStartChar": 335, "fixNodeLength": 311, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b31e2f4558706b0831744485a80958c93524a44", "fixCommitParentSHA1": "063bc8616e8322dca47ae4b9d4860b864a61f215", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicDistributedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicDistributedTest.java\nindex a319f96..6457573 100644\n--- a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicDistributedTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ReliableTopicBasicDistributedTest extends ReliableTopicBasicTest {\n+public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 365, "bugNodeLength": 331, "fixLineNum": 11, "fixNodeStartChar": 365, "fixNodeLength": 334, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b31e2f4558706b0831744485a80958c93524a44", "fixCommitParentSHA1": "063bc8616e8322dca47ae4b9d4860b864a61f215", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java\nindex 7bbaa4a..db73b37 100644\n--- a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {\n+public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 11, "bugNodeStartChar": 365, "bugNodeLength": 325, "fixLineNum": 11, "fixNodeStartChar": 365, "fixNodeLength": 328, "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "79bb6f686409644ca32052cb0aa33d4749be6619", "fixCommitParentSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cluster/impl/AdvancedClusterStateTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cluster/impl/AdvancedClusterStateTest.java b/hazelcast/src/test/java/com/hazelcast/cluster/impl/AdvancedClusterStateTest.java\nindex e063d72..67027d9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cluster/impl/AdvancedClusterStateTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cluster/impl/AdvancedClusterStateTest.java\n@@ -222,7 +222,7 @@\n         });\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void changeClusterState_shouldFail_withoutBackup_whenInitiatorDies_afterPrepare() throws Exception {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n         final HazelcastInstance[] instances = factory.newInstances();\n@@ -230,7 +230,7 @@\n         final HazelcastInstance hz = instances[instances.length - 1];\n         TransactionManagerServiceImpl transactionManagerService = spyTransactionManagerService(hz);\n \n-        TransactionOptions options = new TransactionOptions().setDurability(0).setTimeout(10, TimeUnit.SECONDS);\n+        TransactionOptions options = new TransactionOptions().setDurability(0).setTimeout(30, TimeUnit.SECONDS);\n         when(transactionManagerService.newAllowedDuringPassiveStateTransaction(options)).thenAnswer(new TransactionAnswer() {\n             @Override\n             protected void afterPrepare() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 233, "bugNodeStartChar": 10351, "bugNodeLength": 74, "fixLineNum": 233, "fixNodeStartChar": 10351, "fixNodeLength": 74, "sourceBeforeFix": "new TransactionOptions().setDurability(0).setTimeout(10,TimeUnit.SECONDS)", "sourceAfterFix": "new TransactionOptions().setDurability(0).setTimeout(30,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "fixCommitParentSHA1": "73f96d570d4c70290950e136308f9e5104bcf29c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecord.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecord.java b/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecord.java\nindex 8f575c8..4ab8b05 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecord.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecord.java\n@@ -20,7 +20,7 @@\n \n class DataRecord extends AbstractRecord<Data> {\n \n-    protected Data value;\n+    protected volatile Data value;\n \n     DataRecord(Data value) {\n         this.value = value;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 23, "bugNodeStartChar": 766, "bugNodeLength": 21, "fixLineNum": 23, "fixNodeStartChar": 766, "fixNodeLength": 30, "sourceBeforeFix": "4", "sourceAfterFix": "68"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "fixCommitParentSHA1": "73f96d570d4c70290950e136308f9e5104bcf29c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecordWithStats.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecordWithStats.java b/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecordWithStats.java\nindex 11028cc..d0613d1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecordWithStats.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/record/DataRecordWithStats.java\n@@ -20,7 +20,7 @@\n \n class DataRecordWithStats extends AbstractRecordWithStats<Data> {\n \n-    protected Data value;\n+    protected volatile Data value;\n \n     DataRecordWithStats() {\n         super();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 23, "bugNodeStartChar": 784, "bugNodeLength": 21, "fixLineNum": 23, "fixNodeStartChar": 784, "fixNodeLength": 30, "sourceBeforeFix": "4", "sourceAfterFix": "68"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "fixCommitParentSHA1": "73f96d570d4c70290950e136308f9e5104bcf29c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecord.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecord.java b/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecord.java\nindex ac62cd0..ceee534 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecord.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecord.java\n@@ -18,7 +18,7 @@\n \n class ObjectRecord extends AbstractRecord<Object> implements Record<Object> {\n \n-    private Object value;\n+    private volatile Object value;\n \n     ObjectRecord() {\n         super();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 21, "bugNodeStartChar": 750, "bugNodeLength": 21, "fixLineNum": 21, "fixNodeStartChar": 750, "fixNodeLength": 30, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "fixCommitParentSHA1": "73f96d570d4c70290950e136308f9e5104bcf29c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecordWithStats.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecordWithStats.java b/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecordWithStats.java\nindex f59e158..1df5a3e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecordWithStats.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/record/ObjectRecordWithStats.java\n@@ -18,7 +18,7 @@\n \n class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {\n \n-    private Object value;\n+    private volatile Object value;\n \n     public ObjectRecordWithStats() {\n         super();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 21, "bugNodeStartChar": 742, "bugNodeLength": 21, "fixLineNum": 21, "fixNodeStartChar": 742, "fixNodeLength": 30, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "35b36bca468581e8e8b5152a99c562f18a7d44b5", "fixCommitParentSHA1": "1bf2445ea4ac70b2f35655dda0914e1ea2759f5e", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java b/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java\nindex fcccd09..0832f3a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java\n@@ -24,8 +24,10 @@\n \n         h1.shutdown();\n         h1 = Hazelcast.newHazelcastInstance(config);\n+        // when h1 is returned, it's guaranteed that it should see 2 members\n         assertClusterSize(2, h1);\n-        assertClusterSize(2, h2);\n+        // but h2 will report newly joining member eventually\n+        assertClusterSizeEventually(2, h2);\n     }\n \n     protected void testJoin_With_DifferentBuildNumber(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 28, "bugNodeStartChar": 1016, "bugNodeLength": 24, "fixLineNum": 29, "fixNodeStartChar": 1078, "fixNodeLength": 34, "sourceBeforeFix": "assertClusterSize(2,h2)", "sourceAfterFix": "assertClusterSizeEventually(2,h2)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "35b36bca468581e8e8b5152a99c562f18a7d44b5", "fixCommitParentSHA1": "1bf2445ea4ac70b2f35655dda0914e1ea2759f5e", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java b/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java\nindex fcccd09..0832f3a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cluster/AbstractJoinTest.java\n@@ -24,8 +24,10 @@\n \n         h1.shutdown();\n         h1 = Hazelcast.newHazelcastInstance(config);\n+        // when h1 is returned, it's guaranteed that it should see 2 members\n         assertClusterSize(2, h1);\n-        assertClusterSize(2, h2);\n+        // but h2 will report newly joining member eventually\n+        assertClusterSizeEventually(2, h2);\n     }\n \n     protected void testJoin_With_DifferentBuildNumber(Config config) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 28, "bugNodeStartChar": 1016, "bugNodeLength": 24, "fixLineNum": 29, "fixNodeStartChar": 1078, "fixNodeLength": 34, "sourceBeforeFix": "assertClusterSize(2,h2)", "sourceAfterFix": "assertClusterSizeEventually(2,h2)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0ab2704c7ba19c8a41c97910a6adf537c9f38044", "fixCommitParentSHA1": "6d57dde00cd7540dc2a37ed7cd96b7383ecf4169", "bugFilePath": "hazelcast-client-new/src/main/java/com/hazelcast/client/cache/impl/AbstractClientCacheProxy.java", "fixPatch": "diff --git a/hazelcast-client-new/src/main/java/com/hazelcast/client/cache/impl/AbstractClientCacheProxy.java b/hazelcast-client-new/src/main/java/com/hazelcast/client/cache/impl/AbstractClientCacheProxy.java\nindex 8ebbb5f..b2d7aaa 100644\n--- a/hazelcast-client-new/src/main/java/com/hazelcast/client/cache/impl/AbstractClientCacheProxy.java\n+++ b/hazelcast-client-new/src/main/java/com/hazelcast/client/cache/impl/AbstractClientCacheProxy.java\n@@ -398,7 +398,7 @@\n                 int completionId = nextCompletionId();\n                 // TODO If there is a single entry, we could make use of a put operation since that is a bit cheaper\n                 ClientMessage request =\n-                        CachePutAllCodec.encodeRequest(nameWithPrefix, entries, expiryPolicyData, partitionId);\n+                        CachePutAllCodec.encodeRequest(nameWithPrefix, entries, expiryPolicyData, completionId);\n                 Future f = invoke(request, partitionId, completionId);\n                 futureEntriesTuples.add(new FutureEntriesTuple(f, entries));\n                 if (nearCache != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 401, "bugNodeStartChar": 16020, "bugNodeLength": 86, "fixLineNum": 401, "fixNodeStartChar": 16020, "fixNodeLength": 87, "sourceBeforeFix": "CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,partitionId)", "sourceAfterFix": "CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "cdf4227191227faa8f576b40ea825ff89f3fe4c1", "fixCommitParentSHA1": "473ecea6e0dfc6a7b406830ceed65725ebc8244b", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java\nindex c16f2f3..bd33bf5 100644\n--- a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java\n@@ -57,7 +57,7 @@\n         assertEquals(5, localReplicatedMapStats.getOwnedEntryCount());\n         assertEquals(0, localReplicatedMapStats.getBackupEntryCount());\n         assertEquals(0, localReplicatedMapStats.getBackupCount());\n-        assertEquals(0, localReplicatedMapStats.getOwnedEntryMemoryCost());\n+        assertEquals(1234, localReplicatedMapStats.getOwnedEntryMemoryCost());\n         assertEquals(0, localReplicatedMapStats.getBackupEntryMemoryCost());\n         assertEquals(1231241512, localReplicatedMapStats.getLastAccessTime());\n         assertEquals(1341412343, localReplicatedMapStats.getLastUpdateTime());\n@@ -92,7 +92,7 @@\n         assertEquals(5, deserialized.getOwnedEntryCount());\n         assertEquals(0, deserialized.getBackupEntryCount());\n         assertEquals(0, deserialized.getBackupCount());\n-        assertEquals(0, deserialized.getOwnedEntryMemoryCost());\n+        assertEquals(1234, deserialized.getOwnedEntryMemoryCost());\n         assertEquals(0, deserialized.getBackupEntryMemoryCost());\n         assertEquals(1231241512, deserialized.getLastAccessTime());\n         assertEquals(1341412343, deserialized.getLastUpdateTime());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 60, "bugNodeStartChar": 2529, "bugNodeLength": 66, "fixLineNum": 60, "fixNodeStartChar": 2529, "fixNodeLength": 69, "sourceBeforeFix": "assertEquals(0,localReplicatedMapStats.getOwnedEntryMemoryCost())", "sourceAfterFix": "assertEquals(1234,localReplicatedMapStats.getOwnedEntryMemoryCost())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "cdf4227191227faa8f576b40ea825ff89f3fe4c1", "fixCommitParentSHA1": "473ecea6e0dfc6a7b406830ceed65725ebc8244b", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java\nindex c16f2f3..bd33bf5 100644\n--- a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalReplicatedMapStatsImplTest.java\n@@ -57,7 +57,7 @@\n         assertEquals(5, localReplicatedMapStats.getOwnedEntryCount());\n         assertEquals(0, localReplicatedMapStats.getBackupEntryCount());\n         assertEquals(0, localReplicatedMapStats.getBackupCount());\n-        assertEquals(0, localReplicatedMapStats.getOwnedEntryMemoryCost());\n+        assertEquals(1234, localReplicatedMapStats.getOwnedEntryMemoryCost());\n         assertEquals(0, localReplicatedMapStats.getBackupEntryMemoryCost());\n         assertEquals(1231241512, localReplicatedMapStats.getLastAccessTime());\n         assertEquals(1341412343, localReplicatedMapStats.getLastUpdateTime());\n@@ -92,7 +92,7 @@\n         assertEquals(5, deserialized.getOwnedEntryCount());\n         assertEquals(0, deserialized.getBackupEntryCount());\n         assertEquals(0, deserialized.getBackupCount());\n-        assertEquals(0, deserialized.getOwnedEntryMemoryCost());\n+        assertEquals(1234, deserialized.getOwnedEntryMemoryCost());\n         assertEquals(0, deserialized.getBackupEntryMemoryCost());\n         assertEquals(1231241512, deserialized.getLastAccessTime());\n         assertEquals(1341412343, deserialized.getLastUpdateTime());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 95, "bugNodeStartChar": 4531, "bugNodeLength": 55, "fixLineNum": 95, "fixNodeStartChar": 4531, "fixNodeLength": 58, "sourceBeforeFix": "assertEquals(0,deserialized.getOwnedEntryMemoryCost())", "sourceAfterFix": "assertEquals(1234,deserialized.getOwnedEntryMemoryCost())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "fixCommitParentSHA1": "cb839036e3698712b2bca6353a828305cc30ec8f", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex 4d6c201..e7797f1 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 111, "bugNodeStartChar": 3881, "bugNodeLength": 30, "fixLineNum": 111, "fixNodeStartChar": 3881, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "fixCommitParentSHA1": "cb839036e3698712b2bca6353a828305cc30ec8f", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex 4d6c201..e7797f1 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 111, "bugNodeStartChar": 3881, "bugNodeLength": 30, "fixLineNum": 111, "fixNodeStartChar": 3881, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "fixCommitParentSHA1": "cb839036e3698712b2bca6353a828305cc30ec8f", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex 4d6c201..e7797f1 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 135, "bugNodeStartChar": 4877, "bugNodeLength": 30, "fixLineNum": 135, "fixNodeStartChar": 4877, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "fixCommitParentSHA1": "cb839036e3698712b2bca6353a828305cc30ec8f", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex 4d6c201..e7797f1 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 135, "bugNodeStartChar": 4877, "bugNodeLength": 30, "fixLineNum": 135, "fixNodeStartChar": 4877, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "6f4665dccdb6cdaea1da37ea2766171be0323abe", "fixCommitParentSHA1": "2cab9c7f77abcddbb41df97579bcae554c325727", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongAdvancedTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongAdvancedTest.java\nindex 0f3f332..cf027d3 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongAdvancedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/atomiclong/AtomicLongAdvancedTest.java\n@@ -42,7 +42,7 @@\n                 }\n             }.start();\n         }\n-        assertOpenEventually(countDownLatch, 50);\n+        assertOpenEventually(countDownLatch, 300);\n         assertEquals(0, atomicLong.get());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 45, "bugNodeStartChar": 1766, "bugNodeLength": 40, "fixLineNum": 45, "fixNodeStartChar": 1766, "fixNodeLength": 41, "sourceBeforeFix": "assertOpenEventually(countDownLatch,50)", "sourceAfterFix": "assertOpenEventually(countDownLatch,300)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "fixCommitParentSHA1": "0ec0726a810a02c649c0b94ebe2ffd036f1b5816", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex a9a0017..69a0454 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 111, "bugNodeStartChar": 3951, "bugNodeLength": 30, "fixLineNum": 111, "fixNodeStartChar": 3951, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "fixCommitParentSHA1": "0ec0726a810a02c649c0b94ebe2ffd036f1b5816", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex a9a0017..69a0454 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 111, "bugNodeStartChar": 3951, "bugNodeLength": 30, "fixLineNum": 111, "fixNodeStartChar": 3951, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "fixCommitParentSHA1": "0ec0726a810a02c649c0b94ebe2ffd036f1b5816", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex a9a0017..69a0454 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 135, "bugNodeStartChar": 4947, "bugNodeLength": 30, "fixLineNum": 135, "fixNodeStartChar": 4947, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "fixCommitParentSHA1": "0ec0726a810a02c649c0b94ebe2ffd036f1b5816", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\nindex a9a0017..69a0454 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapLoaderFailoverTest.java\n@@ -108,7 +108,7 @@\n         assertSizeAndLoadCount(map);\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n \n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);\n@@ -132,7 +132,7 @@\n         pausingLoader.awaitPause();\n \n         hz3.getLifecycleService().terminate();\n-        assertClusterSize(2, nodes[0]);\n+        assertClusterSizeEventually(2, nodes[0]);\n \n         pausingLoader.resume();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 135, "bugNodeStartChar": 4947, "bugNodeLength": 30, "fixLineNum": 135, "fixNodeStartChar": 4947, "fixNodeLength": 40, "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "fixCommitParentSHA1": "cf64b25570342a622109d739cff7e7b2904b8802", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\nindex 2b16b67..201989e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n@@ -138,7 +138,7 @@\n      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n-    public final void addTaskAndWakeup(Runnable task) {\n+    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();\n@@ -235,7 +235,7 @@\n         if (target == this) {\n             task.run();\n         } else {\n-            target.addTask(task);\n+            target.addTaskAndWakeup(task);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 134, "bugNodeStartChar": 4469, "bugNodeLength": 403, "fixLineNum": 134, "fixNodeStartChar": 4469, "fixNodeLength": 397, "sourceBeforeFix": "17", "sourceAfterFix": "1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "fixCommitParentSHA1": "cf64b25570342a622109d739cff7e7b2904b8802", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\nindex 2b16b67..201989e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n@@ -138,7 +138,7 @@\n      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n-    public final void addTaskAndWakeup(Runnable task) {\n+    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();\n@@ -235,7 +235,7 @@\n         if (target == this) {\n             task.run();\n         } else {\n-            target.addTask(task);\n+            target.addTaskAndWakeup(task);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 238, "bugNodeStartChar": 8070, "bugNodeLength": 20, "fixLineNum": 238, "fixNodeStartChar": 8070, "fixNodeLength": 29, "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "fixCommitParentSHA1": "cf64b25570342a622109d739cff7e7b2904b8802", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\nindex 2b16b67..201989e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n@@ -138,7 +138,7 @@\n      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n-    public final void addTaskAndWakeup(Runnable task) {\n+    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();\n@@ -235,7 +235,7 @@\n         if (target == this) {\n             task.run();\n         } else {\n-            target.addTask(task);\n+            target.addTaskAndWakeup(task);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 238, "bugNodeStartChar": 8070, "bugNodeLength": 20, "fixLineNum": 238, "fixNodeStartChar": 8070, "fixNodeLength": 29, "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0eae7fa42135de96caed38f9e6d0380ffa0237d7", "fixCommitParentSHA1": "5ec4f40614d7e8a0cb526bc2ae604d4d5958ffa6", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java b/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java\nindex f57b329..236e124 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java\n@@ -862,7 +862,7 @@\n                     checkNotNull(entry.getKey(), NULL_KEY_IS_NOT_ALLOWED);\n                     checkNotNull(entry.getValue(), NULL_VALUE_IS_NOT_ALLOWED);\n \n-                    putInternal(mapService.getMapServiceContext().toData(entry.getKey(), partitionStrategy),\n+                    setInternal(mapService.getMapServiceContext().toData(entry.getKey(), partitionStrategy),\n                             mapService.getMapServiceContext().toData(entry.getValue()),\n                             -1,\n                             TimeUnit.MILLISECONDS);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 865, "bugNodeStartChar": 38184, "bugNodeLength": 259, "fixLineNum": 865, "fixNodeStartChar": 38184, "fixNodeLength": 259, "sourceBeforeFix": "putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)", "sourceAfterFix": "setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0eae7fa42135de96caed38f9e6d0380ffa0237d7", "fixCommitParentSHA1": "5ec4f40614d7e8a0cb526bc2ae604d4d5958ffa6", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java b/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java\nindex f57b329..236e124 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java\n@@ -862,7 +862,7 @@\n                     checkNotNull(entry.getKey(), NULL_KEY_IS_NOT_ALLOWED);\n                     checkNotNull(entry.getValue(), NULL_VALUE_IS_NOT_ALLOWED);\n \n-                    putInternal(mapService.getMapServiceContext().toData(entry.getKey(), partitionStrategy),\n+                    setInternal(mapService.getMapServiceContext().toData(entry.getKey(), partitionStrategy),\n                             mapService.getMapServiceContext().toData(entry.getValue()),\n                             -1,\n                             TimeUnit.MILLISECONDS);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 865, "bugNodeStartChar": 38184, "bugNodeLength": 259, "fixLineNum": 865, "fixNodeStartChar": 38184, "fixNodeLength": 259, "sourceBeforeFix": "putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)", "sourceAfterFix": "setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "fixCommitParentSHA1": "cc5efa3d29a7353078b23a40d322e3a7909e87d4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\nindex 2b16b67..201989e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n@@ -138,7 +138,7 @@\n      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n-    public final void addTaskAndWakeup(Runnable task) {\n+    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();\n@@ -235,7 +235,7 @@\n         if (target == this) {\n             task.run();\n         } else {\n-            target.addTask(task);\n+            target.addTaskAndWakeup(task);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 134, "bugNodeStartChar": 4469, "bugNodeLength": 403, "fixLineNum": 134, "fixNodeStartChar": 4469, "fixNodeLength": 397, "sourceBeforeFix": "17", "sourceAfterFix": "1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "fixCommitParentSHA1": "cc5efa3d29a7353078b23a40d322e3a7909e87d4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\nindex 2b16b67..201989e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n@@ -138,7 +138,7 @@\n      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n-    public final void addTaskAndWakeup(Runnable task) {\n+    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();\n@@ -235,7 +235,7 @@\n         if (target == this) {\n             task.run();\n         } else {\n-            target.addTask(task);\n+            target.addTaskAndWakeup(task);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 238, "bugNodeStartChar": 8070, "bugNodeLength": 20, "fixLineNum": 238, "fixNodeStartChar": 8070, "fixNodeLength": 29, "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "fixCommitParentSHA1": "cc5efa3d29a7353078b23a40d322e3a7909e87d4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\nindex 2b16b67..201989e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/nonblocking/NonBlockingIOThread.java\n@@ -138,7 +138,7 @@\n      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n-    public final void addTaskAndWakeup(Runnable task) {\n+    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();\n@@ -235,7 +235,7 @@\n         if (target == this) {\n             task.run();\n         } else {\n-            target.addTask(task);\n+            target.addTaskAndWakeup(task);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 238, "bugNodeStartChar": 8070, "bugNodeLength": 20, "fixLineNum": 238, "fixNodeStartChar": 8070, "fixNodeLength": 29, "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "d89553e7a20e11a9d39bb560acc9e0aea68770e8", "fixCommitParentSHA1": "3bb247e6621e8adf8ecce242fc98e5191ad96b37", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java\nindex 0bfc801..35f21b7 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java\n@@ -126,7 +126,7 @@\n \n     @AfterClass\n     public static void killAllHazelcastInstances() throws IOException {\n-        HazelcastInstanceFactory.terminateAll();\n+        factory.terminateAll();\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 129, "bugNodeStartChar": 5678, "bugNodeLength": 39, "fixLineNum": 129, "fixNodeStartChar": 5678, "fixNodeLength": 22, "sourceBeforeFix": "HazelcastInstanceFactory.terminateAll()", "sourceAfterFix": "factory.terminateAll()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d89553e7a20e11a9d39bb560acc9e0aea68770e8", "fixCommitParentSHA1": "3bb247e6621e8adf8ecce242fc98e5191ad96b37", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java\nindex 0bfc801..35f21b7 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheReadQuorumTest.java\n@@ -126,7 +126,7 @@\n \n     @AfterClass\n     public static void killAllHazelcastInstances() throws IOException {\n-        HazelcastInstanceFactory.terminateAll();\n+        factory.terminateAll();\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 129, "bugNodeStartChar": 5678, "bugNodeLength": 39, "fixLineNum": 129, "fixNodeStartChar": 5678, "fixNodeLength": 22, "sourceBeforeFix": "HazelcastInstanceFactory.terminateAll()", "sourceAfterFix": "factory.terminateAll()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "d89553e7a20e11a9d39bb560acc9e0aea68770e8", "fixCommitParentSHA1": "3bb247e6621e8adf8ecce242fc98e5191ad96b37", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java\nindex d343f43..049869d 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java\n@@ -131,7 +131,7 @@\n \n     @AfterClass\n     public static void killAllHazelcastInstances() throws IOException {\n-        HazelcastInstanceFactory.terminateAll();\n+        factory.terminateAll();\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 134, "bugNodeStartChar": 5855, "bugNodeLength": 39, "fixLineNum": 134, "fixNodeStartChar": 5855, "fixNodeLength": 22, "sourceBeforeFix": "HazelcastInstanceFactory.terminateAll()", "sourceAfterFix": "factory.terminateAll()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d89553e7a20e11a9d39bb560acc9e0aea68770e8", "fixCommitParentSHA1": "3bb247e6621e8adf8ecce242fc98e5191ad96b37", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java\nindex d343f43..049869d 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/quorum/cache/ClientCacheWriteQuorumTest.java\n@@ -131,7 +131,7 @@\n \n     @AfterClass\n     public static void killAllHazelcastInstances() throws IOException {\n-        HazelcastInstanceFactory.terminateAll();\n+        factory.terminateAll();\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 134, "bugNodeStartChar": 5855, "bugNodeLength": 39, "fixLineNum": 134, "fixNodeStartChar": 5855, "fixNodeLength": 22, "sourceBeforeFix": "HazelcastInstanceFactory.terminateAll()", "sourceAfterFix": "factory.terminateAll()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "335f8c0d2af9c55c731dc7b44d18c5e3796f4bd6", "fixCommitParentSHA1": "cd35fc8c917fecde13fedd6c6cf6a43699625bc7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\nindex 623354a..6baf4fb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n@@ -85,7 +85,7 @@\n             this.transactional = transactional;\n             return true;\n         } else if (isLockedBy(owner, threadId)) {\n-            if (this.referenceId == referenceId) {\n+            if (!transactional && this.referenceId == referenceId) {\n                 return true;\n             }\n             this.referenceId = referenceId;\n@@ -134,7 +134,7 @@\n             return false;\n         }\n \n-        if (this.referenceId == referenceId) {\n+        if (!this.transactional && this.referenceId == referenceId) {\n             return true;\n         }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 88, "bugNodeStartChar": 2802, "bugNodeLength": 31, "fixLineNum": 88, "fixNodeStartChar": 2802, "fixNodeLength": 49, "sourceBeforeFix": "this.referenceId == referenceId", "sourceAfterFix": "!transactional && this.referenceId == referenceId"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "335f8c0d2af9c55c731dc7b44d18c5e3796f4bd6", "fixCommitParentSHA1": "cd35fc8c917fecde13fedd6c6cf6a43699625bc7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\nindex 623354a..6baf4fb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n@@ -85,7 +85,7 @@\n             this.transactional = transactional;\n             return true;\n         } else if (isLockedBy(owner, threadId)) {\n-            if (this.referenceId == referenceId) {\n+            if (!transactional && this.referenceId == referenceId) {\n                 return true;\n             }\n             this.referenceId = referenceId;\n@@ -134,7 +134,7 @@\n             return false;\n         }\n \n-        if (this.referenceId == referenceId) {\n+        if (!this.transactional && this.referenceId == referenceId) {\n             return true;\n         }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 137, "bugNodeStartChar": 4226, "bugNodeLength": 31, "fixLineNum": 137, "fixNodeStartChar": 4226, "fixNodeLength": 54, "sourceBeforeFix": "this.referenceId == referenceId", "sourceAfterFix": "!this.transactional && this.referenceId == referenceId"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "fixCommitParentSHA1": "4256555545f49406b00df2f077289e5c9cdb7a0a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 192e1fa..7d061ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16111, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16111, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "fixCommitParentSHA1": "4256555545f49406b00df2f077289e5c9cdb7a0a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 192e1fa..7d061ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16111, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16111, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "fixCommitParentSHA1": "4716e1f79433fd2fb2feee75f598744cbf69524c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 9eaa0bd..bffe645 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16116, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16116, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "fixCommitParentSHA1": "4716e1f79433fd2fb2feee75f598744cbf69524c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 9eaa0bd..bffe645 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16116, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16116, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "fixCommitParentSHA1": "4716e1f79433fd2fb2feee75f598744cbf69524c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 9eaa0bd..bffe645 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16116, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16116, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "fixCommitParentSHA1": "4716e1f79433fd2fb2feee75f598744cbf69524c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 9eaa0bd..bffe645 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16116, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16116, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "fixCommitParentSHA1": "4256555545f49406b00df2f077289e5c9cdb7a0a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 192e1fa..7d061ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16111, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16111, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "fixCommitParentSHA1": "4256555545f49406b00df2f077289e5c9cdb7a0a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\nindex 192e1fa..7d061ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/AbstractCacheRecordStore.java\n@@ -294,7 +294,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;\n@@ -318,7 +319,8 @@\n         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n+                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;\n@@ -378,7 +380,7 @@\n                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n-                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n+                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);\n@@ -493,7 +495,8 @@\n         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n+            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n+                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }\n@@ -514,7 +517,7 @@\n             return record;\n         }\n         if (isEventsEnabled()) {\n-            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;\n@@ -1002,7 +1005,7 @@\n             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,\n@@ -1046,7 +1049,7 @@\n             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1099,7 +1102,7 @@\n             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);\n@@ -1131,7 +1134,7 @@\n                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, completionId));\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,\n@@ -1182,7 +1185,7 @@\n             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n@@ -1235,7 +1238,7 @@\n             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }\n@@ -1284,7 +1287,7 @@\n                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n-                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n+                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 381, "bugNodeStartChar": 16111, "bugNodeLength": 15, "fixLineNum": 381, "fixNodeStartChar": 16111, "fixNodeLength": 16, "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "29df30760cabf94b75aa00035ef75ce465775916", "fixCommitParentSHA1": "55a576c5bbded3efb6e83ab8799ef0e361cb6d13", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java\nindex 756c6a5..b08db03 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java\n@@ -96,7 +96,7 @@\n             responsePacketHandler.handle(responsePacket);\n         } catch (Throwable e) {\n             inspectOutputMemoryError(e);\n-            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName());\n+            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName(), e);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 99, "bugNodeStartChar": 3702, "bugNodeLength": 99, "fixLineNum": 99, "fixNodeStartChar": 3702, "fixNodeLength": 102, "sourceBeforeFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName())", "sourceAfterFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName(),e)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b09c7e0a09669384073adecc4e1048de59a7f8ee", "fixCommitParentSHA1": "ed8b7f65f7b0041e0884ad21251369b64de18829", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java\nindex 756c6a5..b08db03 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/classic/ResponseThread.java\n@@ -96,7 +96,7 @@\n             responsePacketHandler.handle(responsePacket);\n         } catch (Throwable e) {\n             inspectOutputMemoryError(e);\n-            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName());\n+            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName(), e);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 99, "bugNodeStartChar": 3702, "bugNodeLength": 99, "fixLineNum": 99, "fixNodeStartChar": 3702, "fixNodeLength": 102, "sourceBeforeFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName())", "sourceAfterFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName(),e)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "bb94905af696c5c2d4a748a2cafef937999a07ee", "fixCommitParentSHA1": "fcdd8f3a408d4c699a9dbd7bf7c114d40377e0c7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java b/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java\nindex f2447c7..0986624 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java\n@@ -82,7 +82,7 @@\n         }\n     }\n \n-    private class EmptyIterator implements Iterator {\n+    private static class EmptyIterator implements Iterator {\n \n         @Override\n         public boolean hasNext() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2277, "bugNodeLength": 368, "fixLineNum": 85, "fixNodeStartChar": 2277, "fixNodeLength": 375, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fc57b927e19dd54c6c79b4d0987f0d3b97b6c22f", "fixCommitParentSHA1": "96890ef0db15829c87ee2158fb708d9735965c14", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java b/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java\nindex b55f9d4..31e0c13 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/SortedQueryResultSet.java\n@@ -82,7 +82,7 @@\n         }\n     }\n \n-    private class EmptyIterator implements Iterator {\n+    private static class EmptyIterator implements Iterator {\n \n         @Override\n         public boolean hasNext() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2280, "bugNodeLength": 368, "fixLineNum": 85, "fixNodeStartChar": 2280, "fixNodeLength": 375, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b3af9b90cde6d8fd649b5ceb6b0272e0e8f86580", "fixCommitParentSHA1": "58157df6efa4d6429ee0a3a536e32874be3dcdee", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/ClusteredSessionService.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/ClusteredSessionService.java b/hazelcast-wm/src/main/java/com/hazelcast/web/ClusteredSessionService.java\nindex c98b9b1..c4c05fb 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/ClusteredSessionService.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/ClusteredSessionService.java\n@@ -319,7 +319,7 @@\n     /**\n      * Internal ThreadFactory to create threads which checks hazelcast instance\n      */\n-    private class EnsureInstanceThreadFactory implements ThreadFactory {\n+    private static final class EnsureInstanceThreadFactory implements ThreadFactory {\n \n         public Thread newThread(final Runnable r) {\n             final Thread thread = new EnsureInstanceThread(r, \".hazelcast-wm.ensureInstance\");\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 319, "bugNodeStartChar": 12340, "bugNodeLength": 391, "fixLineNum": 319, "fixNodeStartChar": 12340, "fixNodeLength": 404, "sourceBeforeFix": "2", "sourceAfterFix": "26"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "cb69ad55ae896c06a493a334c67c2a2b0451a444", "fixCommitParentSHA1": "c32eaabcab0803cc0b610aaaa244c432f066c496", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientReconnectTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientReconnectTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientReconnectTest.java\nindex 9a873ab..5a3ef48 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientReconnectTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientReconnectTest.java\n@@ -57,7 +57,7 @@\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);\n-        final HazelcastInstance client = HazelcastClient.newHazelcastClient();\n+        final HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig);\n         final CountDownLatch connectedLatch = new CountDownLatch(2);\n         client.getLifecycleService().addLifecycleListener(new LifecycleListener() {\n             @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 60, "bugNodeStartChar": 2174, "bugNodeLength": 36, "fixLineNum": 60, "fixNodeStartChar": 2174, "fixNodeLength": 48, "sourceBeforeFix": "HazelcastClient.newHazelcastClient()", "sourceAfterFix": "HazelcastClient.newHazelcastClient(clientConfig)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "40f3ba0f619f5bac94bb32f6d5746117627dddb6", "fixCommitParentSHA1": "fd32a9faab9426e7b2f607e9ccfce9e204bfe661", "bugFilePath": "hazelcast-client-new/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java", "fixPatch": "diff --git a/hazelcast-client-new/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java b/hazelcast-client-new/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java\nindex c8d3bca..5ec6abb 100644\n--- a/hazelcast-client-new/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java\n+++ b/hazelcast-client-new/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java\n@@ -586,7 +586,7 @@\n             }\n         });\n \n-        assertOpenEventually(\"responseLatch\", responseLatch, 5);\n+        assertOpenEventually(\"responseLatch\", responseLatch);\n         assertEquals(msg + AppendCallable.APPENDAGE, result.get());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 589, "bugNodeStartChar": 21809, "bugNodeLength": 55, "fixLineNum": 589, "fixNodeStartChar": 21809, "fixNodeLength": 52, "sourceBeforeFix": "assertOpenEventually(\"responseLatch\",responseLatch,5)", "sourceAfterFix": "assertOpenEventually(\"responseLatch\",responseLatch)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "40f3ba0f619f5bac94bb32f6d5746117627dddb6", "fixCommitParentSHA1": "fd32a9faab9426e7b2f607e9ccfce9e204bfe661", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java\nindex 9a8bacb..19219c5 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/executor/ClientExecutorServiceSubmitTest.java\n@@ -585,7 +585,7 @@\n             }\n         });\n \n-        assertOpenEventually(\"responseLatch\", responseLatch, 5);\n+        assertOpenEventually(\"responseLatch\", responseLatch);\n         assertEquals(msg + AppendCallable.APPENDAGE, result.get());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 588, "bugNodeStartChar": 21784, "bugNodeLength": 55, "fixLineNum": 588, "fixNodeStartChar": 21784, "fixNodeLength": 52, "sourceBeforeFix": "assertOpenEventually(\"responseLatch\",responseLatch,5)", "sourceAfterFix": "assertOpenEventually(\"responseLatch\",responseLatch)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "2933e220ed5118e606b3d5cf4eabeb77e4b7acf8", "fixCommitParentSHA1": "5bfe67887fdd8a002bbe1919d93687be8b5a56a9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java b/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\nindex 182d5fa..356e758 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\n@@ -112,7 +112,7 @@\n     public Operation getBackupOperation() {\n         final Record record = recordStore.getRecord(dataKey);\n         final RecordInfo replicationInfo = Records.buildRecordInfo(record);\n-        return new PutBackupOperation(name, dataKey, dataValue, replicationInfo, true);\n+        return new PutBackupOperation(name, dataKey, dataValue, replicationInfo, true, false);\n     }\n \n     public void onWaitExpire() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 115, "bugNodeStartChar": 3779, "bugNodeLength": 71, "fixLineNum": 115, "fixNodeStartChar": 3779, "fixNodeLength": 78, "sourceBeforeFix": "new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)", "sourceAfterFix": "new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "8f11a7cc3e1ffddcde72dcd160a264fb2865dc8a", "fixCommitParentSHA1": "4c1b1b779a2a777ec65393b7af9a0dc4e31d82f5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java b/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\nindex 182d5fa..356e758 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\n@@ -112,7 +112,7 @@\n     public Operation getBackupOperation() {\n         final Record record = recordStore.getRecord(dataKey);\n         final RecordInfo replicationInfo = Records.buildRecordInfo(record);\n-        return new PutBackupOperation(name, dataKey, dataValue, replicationInfo, true);\n+        return new PutBackupOperation(name, dataKey, dataValue, replicationInfo, true, false);\n     }\n \n     public void onWaitExpire() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 115, "bugNodeStartChar": 3779, "bugNodeLength": 71, "fixLineNum": 115, "fixNodeStartChar": 3779, "fixNodeLength": 78, "sourceBeforeFix": "new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)", "sourceAfterFix": "new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0443c4d9988380bf9fc61a871e7588b1e106aa44", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 1723, "bugNodeLength": 25, "fixLineNum": 61, "fixNodeStartChar": 1723, "fixNodeLength": 23, "sourceBeforeFix": "out.writeObject(function)", "sourceAfterFix": "out.writeData(function)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0443c4d9988380bf9fc61a871e7588b1e106aa44", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 1723, "bugNodeLength": 25, "fixLineNum": 61, "fixNodeStartChar": 1723, "fixNodeLength": 23, "sourceBeforeFix": "out.writeObject(function)", "sourceAfterFix": "out.writeData(function)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0443c4d9988380bf9fc61a871e7588b1e106aa44", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1895, "bugNodeLength": 15, "fixLineNum": 67, "fixNodeStartChar": 1895, "fixNodeLength": 13, "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0443c4d9988380bf9fc61a871e7588b1e106aa44", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1895, "bugNodeLength": 15, "fixLineNum": 67, "fixNodeStartChar": 1895, "fixNodeLength": 13, "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "37a3bdc4f4661e8c94814a61ad45ea5cbfa67e3d", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 1723, "bugNodeLength": 25, "fixLineNum": 61, "fixNodeStartChar": 1723, "fixNodeLength": 23, "sourceBeforeFix": "out.writeObject(function)", "sourceAfterFix": "out.writeData(function)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a3bdc4f4661e8c94814a61ad45ea5cbfa67e3d", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 1723, "bugNodeLength": 25, "fixLineNum": 61, "fixNodeStartChar": 1723, "fixNodeLength": 23, "sourceBeforeFix": "out.writeObject(function)", "sourceAfterFix": "out.writeData(function)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "37a3bdc4f4661e8c94814a61ad45ea5cbfa67e3d", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1895, "bugNodeLength": 15, "fixLineNum": 67, "fixNodeStartChar": 1895, "fixNodeLength": 13, "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37a3bdc4f4661e8c94814a61ad45ea5cbfa67e3d", "fixCommitParentSHA1": "05a1cccf5925dbb7ae3d30b55b907bd9cf0e9a39", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\nindex 5662272..75b81da 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AbstractAlterOperation.java\n@@ -58,13 +58,13 @@\n     @Override\n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n         super.writeInternal(out);\n-        out.writeObject(function);\n+        out.writeData(function);\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n-        function = in.readObject();\n+        function = in.readData();\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1895, "bugNodeLength": 15, "fixLineNum": 67, "fixNodeStartChar": 1895, "fixNodeLength": 13, "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1086c2b18551fedf8144f1640487ba648e5f80f4", "fixCommitParentSHA1": "d754a855caf4d9c82ec746ad94189748e282046d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/ringbuffer/impl/RingbufferDataSerializerHook.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/ringbuffer/impl/RingbufferDataSerializerHook.java b/hazelcast/src/main/java/com/hazelcast/ringbuffer/impl/RingbufferDataSerializerHook.java\nindex bf2909a..b179aa8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/ringbuffer/impl/RingbufferDataSerializerHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/ringbuffer/impl/RingbufferDataSerializerHook.java\n@@ -34,7 +34,7 @@\n  */\n public class RingbufferDataSerializerHook implements DataSerializerHook {\n \n-    public static final int F_ID = FactoryIdHelper.getFactoryId(FactoryIdHelper.COLLECTION_DS_FACTORY, -26);\n+    public static final int F_ID = FactoryIdHelper.getFactoryId(FactoryIdHelper.COLLECTION_DS_FACTORY, -29);\n \n     public static final int GENERIC_OPERATION = 1;\n     public static final int ADD_BACKUP_OPERATION = 2;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 37, "bugNodeStartChar": 1689, "bugNodeLength": 3, "fixLineNum": 37, "fixNodeStartChar": 1689, "fixNodeLength": 3, "sourceBeforeFix": "-26", "sourceAfterFix": "-29"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "9418ff826024ef85b3a74de9e82951e3157051d4", "fixCommitParentSHA1": "611f7e0f59795f21c3731f7fa65b0f50c4c6f80b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java\nindex f38da46..a90b70c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java\n@@ -157,7 +157,7 @@\n      * This call is only made by the IO thread.\n      */\n     private void unschedule() {\n-        if (dirtyOutputBuffer()) {\n+        if (dirtyOutputBuffer() || currentPacket != null) {\n             // Because not all data was written to the socket, we need to register for OP_WRITE so we get\n             // notified when the socketChannel is ready for more data.\n             registerOp(SelectionKey.OP_WRITE);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 160, "bugNodeStartChar": 5797, "bugNodeLength": 19, "fixLineNum": 160, "fixNodeStartChar": 5797, "fixNodeLength": 44, "sourceBeforeFix": "dirtyOutputBuffer()", "sourceAfterFix": "dirtyOutputBuffer() || currentPacket != null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "371deb9686fc3c325baf5ff295a8b6d63cfae7d4", "fixCommitParentSHA1": "d51949546265101ee7ef1425a45aaa895786f3f4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java\nindex f38da46..a90b70c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/WriteHandler.java\n@@ -157,7 +157,7 @@\n      * This call is only made by the IO thread.\n      */\n     private void unschedule() {\n-        if (dirtyOutputBuffer()) {\n+        if (dirtyOutputBuffer() || currentPacket != null) {\n             // Because not all data was written to the socket, we need to register for OP_WRITE so we get\n             // notified when the socketChannel is ready for more data.\n             registerOp(SelectionKey.OP_WRITE);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 160, "bugNodeStartChar": 5797, "bugNodeLength": 19, "fixLineNum": 160, "fixNodeStartChar": 5797, "fixNodeLength": 44, "sourceBeforeFix": "dirtyOutputBuffer()", "sourceAfterFix": "dirtyOutputBuffer() || currentPacket != null"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 72, "bugNodeStartChar": 2096, "bugNodeLength": 7, "fixLineNum": 72, "fixNodeStartChar": 2096, "fixNodeLength": 7, "sourceBeforeFix": "id=13", "sourceAfterFix": "id=15"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 75, "bugNodeStartChar": 2162, "bugNodeLength": 7, "fixLineNum": 75, "fixNodeStartChar": 2162, "fixNodeLength": 7, "sourceBeforeFix": "id=14", "sourceAfterFix": "id=16"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 78, "bugNodeStartChar": 2240, "bugNodeLength": 7, "fixLineNum": 78, "fixNodeStartChar": 2240, "fixNodeLength": 7, "sourceBeforeFix": "id=15", "sourceAfterFix": "id=17"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 81, "bugNodeStartChar": 2327, "bugNodeLength": 7, "fixLineNum": 81, "fixNodeStartChar": 2327, "fixNodeLength": 7, "sourceBeforeFix": "id=16", "sourceAfterFix": "id=18"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 84, "bugNodeStartChar": 2417, "bugNodeLength": 7, "fixLineNum": 84, "fixNodeStartChar": 2417, "fixNodeLength": 7, "sourceBeforeFix": "id=17", "sourceAfterFix": "id=19"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 87, "bugNodeStartChar": 2492, "bugNodeLength": 7, "fixLineNum": 87, "fixNodeStartChar": 2492, "fixNodeLength": 7, "sourceBeforeFix": "id=18", "sourceAfterFix": "id=20"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 90, "bugNodeStartChar": 2563, "bugNodeLength": 7, "fixLineNum": 90, "fixNodeStartChar": 2563, "fixNodeLength": 7, "sourceBeforeFix": "id=19", "sourceAfterFix": "id=21"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 93, "bugNodeStartChar": 2636, "bugNodeLength": 7, "fixLineNum": 93, "fixNodeStartChar": 2636, "fixNodeLength": 7, "sourceBeforeFix": "id=19", "sourceAfterFix": "id=22"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 86, "bugNodeStartChar": 2782, "bugNodeLength": 7, "fixLineNum": 86, "fixNodeStartChar": 2782, "fixNodeLength": 7, "sourceBeforeFix": "id=21", "sourceAfterFix": "id=20"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 89, "bugNodeStartChar": 2880, "bugNodeLength": 7, "fixLineNum": 89, "fixNodeStartChar": 2880, "fixNodeLength": 7, "sourceBeforeFix": "id=23", "sourceAfterFix": "id=21"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 92, "bugNodeStartChar": 2965, "bugNodeLength": 7, "fixLineNum": 92, "fixNodeStartChar": 2965, "fixNodeLength": 7, "sourceBeforeFix": "id=24", "sourceAfterFix": "id=22"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 95, "bugNodeStartChar": 3063, "bugNodeLength": 7, "fixLineNum": 95, "fixNodeStartChar": 3063, "fixNodeLength": 7, "sourceBeforeFix": "id=25", "sourceAfterFix": "id=23"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 98, "bugNodeStartChar": 3147, "bugNodeLength": 7, "fixLineNum": 98, "fixNodeStartChar": 3147, "fixNodeLength": 7, "sourceBeforeFix": "id=26", "sourceAfterFix": "id=24"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 101, "bugNodeStartChar": 3227, "bugNodeLength": 7, "fixLineNum": 101, "fixNodeStartChar": 3227, "fixNodeLength": 7, "sourceBeforeFix": "id=27", "sourceAfterFix": "id=25"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 104, "bugNodeStartChar": 3361, "bugNodeLength": 7, "fixLineNum": 104, "fixNodeStartChar": 3361, "fixNodeLength": 7, "sourceBeforeFix": "id=28", "sourceAfterFix": "id=26"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 107, "bugNodeStartChar": 3480, "bugNodeLength": 7, "fixLineNum": 107, "fixNodeStartChar": 3480, "fixNodeLength": 7, "sourceBeforeFix": "id=29", "sourceAfterFix": "id=27"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 3585, "bugNodeLength": 7, "fixLineNum": 110, "fixNodeStartChar": 3585, "fixNodeLength": 7, "sourceBeforeFix": "id=30", "sourceAfterFix": "id=28"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 113, "bugNodeStartChar": 3675, "bugNodeLength": 7, "fixLineNum": 113, "fixNodeStartChar": 3675, "fixNodeLength": 7, "sourceBeforeFix": "id=31", "sourceAfterFix": "id=29"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 116, "bugNodeStartChar": 3774, "bugNodeLength": 7, "fixLineNum": 116, "fixNodeStartChar": 3774, "fixNodeLength": 7, "sourceBeforeFix": "id=32", "sourceAfterFix": "id=30"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 119, "bugNodeStartChar": 3868, "bugNodeLength": 7, "fixLineNum": 119, "fixNodeStartChar": 3868, "fixNodeLength": 7, "sourceBeforeFix": "id=33", "sourceAfterFix": "id=31"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 122, "bugNodeStartChar": 3944, "bugNodeLength": 7, "fixLineNum": 122, "fixNodeStartChar": 3944, "fixNodeLength": 7, "sourceBeforeFix": "id=34", "sourceAfterFix": "id=32"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 125, "bugNodeStartChar": 4046, "bugNodeLength": 7, "fixLineNum": 125, "fixNodeStartChar": 4046, "fixNodeLength": 7, "sourceBeforeFix": "id=35", "sourceAfterFix": "id=33"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 128, "bugNodeStartChar": 4135, "bugNodeLength": 7, "fixLineNum": 128, "fixNodeStartChar": 4135, "fixNodeLength": 7, "sourceBeforeFix": "id=36", "sourceAfterFix": "id=34"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 131, "bugNodeStartChar": 4217, "bugNodeLength": 7, "fixLineNum": 131, "fixNodeStartChar": 4217, "fixNodeLength": 7, "sourceBeforeFix": "id=37", "sourceAfterFix": "id=35"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 134, "bugNodeStartChar": 4277, "bugNodeLength": 7, "fixLineNum": 134, "fixNodeStartChar": 4277, "fixNodeLength": 7, "sourceBeforeFix": "id=38", "sourceAfterFix": "id=36"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 137, "bugNodeStartChar": 4367, "bugNodeLength": 7, "fixLineNum": 137, "fixNodeStartChar": 4367, "fixNodeLength": 7, "sourceBeforeFix": "id=39", "sourceAfterFix": "id=37"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 140, "bugNodeStartChar": 4480, "bugNodeLength": 7, "fixLineNum": 140, "fixNodeStartChar": 4480, "fixNodeLength": 7, "sourceBeforeFix": "id=40", "sourceAfterFix": "id=38"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 143, "bugNodeStartChar": 4538, "bugNodeLength": 7, "fixLineNum": 143, "fixNodeStartChar": 4538, "fixNodeLength": 7, "sourceBeforeFix": "id=41", "sourceAfterFix": "id=39"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 146, "bugNodeStartChar": 4612, "bugNodeLength": 7, "fixLineNum": 146, "fixNodeStartChar": 4612, "fixNodeLength": 7, "sourceBeforeFix": "id=42", "sourceAfterFix": "id=40"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 149, "bugNodeStartChar": 4670, "bugNodeLength": 7, "fixLineNum": 149, "fixNodeStartChar": 4670, "fixNodeLength": 7, "sourceBeforeFix": "id=43", "sourceAfterFix": "id=41"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 152, "bugNodeStartChar": 4730, "bugNodeLength": 7, "fixLineNum": 152, "fixNodeStartChar": 4730, "fixNodeLength": 7, "sourceBeforeFix": "id=44", "sourceAfterFix": "id=42"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 155, "bugNodeStartChar": 4817, "bugNodeLength": 7, "fixLineNum": 155, "fixNodeStartChar": 4817, "fixNodeLength": 7, "sourceBeforeFix": "id=45", "sourceAfterFix": "id=43"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 158, "bugNodeStartChar": 4904, "bugNodeLength": 7, "fixLineNum": 158, "fixNodeStartChar": 4904, "fixNodeLength": 7, "sourceBeforeFix": "id=46", "sourceAfterFix": "id=44"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 161, "bugNodeStartChar": 4992, "bugNodeLength": 7, "fixLineNum": 161, "fixNodeStartChar": 4992, "fixNodeLength": 7, "sourceBeforeFix": "id=47", "sourceAfterFix": "id=45"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 164, "bugNodeStartChar": 5087, "bugNodeLength": 7, "fixLineNum": 164, "fixNodeStartChar": 5087, "fixNodeLength": 7, "sourceBeforeFix": "id=48", "sourceAfterFix": "id=46"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 167, "bugNodeStartChar": 5143, "bugNodeLength": 7, "fixLineNum": 167, "fixNodeStartChar": 5143, "fixNodeLength": 7, "sourceBeforeFix": "id=49", "sourceAfterFix": "id=47"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 170, "bugNodeStartChar": 5202, "bugNodeLength": 7, "fixLineNum": 170, "fixNodeStartChar": 5202, "fixNodeLength": 7, "sourceBeforeFix": "id=50", "sourceAfterFix": "id=48"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 173, "bugNodeStartChar": 5296, "bugNodeLength": 7, "fixLineNum": 173, "fixNodeStartChar": 5296, "fixNodeLength": 7, "sourceBeforeFix": "id=51", "sourceAfterFix": "id=49"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 176, "bugNodeStartChar": 5353, "bugNodeLength": 7, "fixLineNum": 176, "fixNodeStartChar": 5353, "fixNodeLength": 7, "sourceBeforeFix": "id=52", "sourceAfterFix": "id=50"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 179, "bugNodeStartChar": 5448, "bugNodeLength": 7, "fixLineNum": 179, "fixNodeStartChar": 5448, "fixNodeLength": 7, "sourceBeforeFix": "id=53", "sourceAfterFix": "id=51"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 182, "bugNodeStartChar": 5542, "bugNodeLength": 7, "fixLineNum": 182, "fixNodeStartChar": 5542, "fixNodeLength": 7, "sourceBeforeFix": "id=54", "sourceAfterFix": "id=52"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 185, "bugNodeStartChar": 5631, "bugNodeLength": 7, "fixLineNum": 185, "fixNodeStartChar": 5631, "fixNodeLength": 7, "sourceBeforeFix": "id=55", "sourceAfterFix": "id=53"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 188, "bugNodeStartChar": 5740, "bugNodeLength": 7, "fixLineNum": 188, "fixNodeStartChar": 5740, "fixNodeLength": 7, "sourceBeforeFix": "id=56", "sourceAfterFix": "id=54"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\nindex 0697ae7..93d337c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n@@ -71,21 +71,21 @@\n     @EncodeMethod(id = 16)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 17)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 20)\n+    @EncodeMethod(id = 18)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 19)\n     void unlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 22)\n+    @EncodeMethod(id = 20)\n     void forceUnlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void removeEntry(String name, Data key, Data value, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void valueCount(String name, Data key, long threadId);\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 74, "bugNodeStartChar": 2246, "bugNodeLength": 7, "fixLineNum": 74, "fixNodeStartChar": 2246, "fixNodeLength": 7, "sourceBeforeFix": "id=19", "sourceAfterFix": "id=17"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\nindex 0697ae7..93d337c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n@@ -71,21 +71,21 @@\n     @EncodeMethod(id = 16)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 17)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 20)\n+    @EncodeMethod(id = 18)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 19)\n     void unlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 22)\n+    @EncodeMethod(id = 20)\n     void forceUnlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void removeEntry(String name, Data key, Data value, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void valueCount(String name, Data key, long threadId);\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 77, "bugNodeStartChar": 2344, "bugNodeLength": 7, "fixLineNum": 77, "fixNodeStartChar": 2344, "fixNodeLength": 7, "sourceBeforeFix": "id=20", "sourceAfterFix": "id=18"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\nindex 0697ae7..93d337c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n@@ -71,21 +71,21 @@\n     @EncodeMethod(id = 16)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 17)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 20)\n+    @EncodeMethod(id = 18)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 19)\n     void unlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 22)\n+    @EncodeMethod(id = 20)\n     void forceUnlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void removeEntry(String name, Data key, Data value, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void valueCount(String name, Data key, long threadId);\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 80, "bugNodeStartChar": 2429, "bugNodeLength": 7, "fixLineNum": 80, "fixNodeStartChar": 2429, "fixNodeLength": 7, "sourceBeforeFix": "id=21", "sourceAfterFix": "id=19"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\nindex 0697ae7..93d337c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n@@ -71,21 +71,21 @@\n     @EncodeMethod(id = 16)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 17)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 20)\n+    @EncodeMethod(id = 18)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 19)\n     void unlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 22)\n+    @EncodeMethod(id = 20)\n     void forceUnlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void removeEntry(String name, Data key, Data value, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void valueCount(String name, Data key, long threadId);\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 83, "bugNodeStartChar": 2512, "bugNodeLength": 7, "fixLineNum": 83, "fixNodeStartChar": 2512, "fixNodeLength": 7, "sourceBeforeFix": "id=22", "sourceAfterFix": "id=20"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\nindex 0697ae7..93d337c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n@@ -71,21 +71,21 @@\n     @EncodeMethod(id = 16)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 17)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 20)\n+    @EncodeMethod(id = 18)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 19)\n     void unlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 22)\n+    @EncodeMethod(id = 20)\n     void forceUnlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void removeEntry(String name, Data key, Data value, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void valueCount(String name, Data key, long threadId);\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 86, "bugNodeStartChar": 2600, "bugNodeLength": 7, "fixLineNum": 86, "fixNodeStartChar": 2600, "fixNodeLength": 7, "sourceBeforeFix": "id=23", "sourceAfterFix": "id=21"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\nindex 0697ae7..93d337c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MultiMapTemplate.java\n@@ -71,21 +71,21 @@\n     @EncodeMethod(id = 16)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 17)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 20)\n+    @EncodeMethod(id = 18)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 19)\n     void unlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 22)\n+    @EncodeMethod(id = 20)\n     void forceUnlock(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void removeEntry(String name, Data key, Data value, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void valueCount(String name, Data key, long threadId);\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 89, "bugNodeStartChar": 2700, "bugNodeLength": 7, "fixLineNum": 89, "fixNodeStartChar": 2700, "fixNodeLength": 7, "sourceBeforeFix": "id=24", "sourceAfterFix": "id=22"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 31, "bugNodeStartChar": 1081, "bugNodeLength": 6, "fixLineNum": 31, "fixNodeStartChar": 1081, "fixNodeLength": 6, "sourceBeforeFix": "id=1", "sourceAfterFix": "id=2"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 34, "bugNodeStartChar": 1147, "bugNodeLength": 6, "fixLineNum": 34, "fixNodeStartChar": 1147, "fixNodeLength": 6, "sourceBeforeFix": "id=2", "sourceAfterFix": "id=3"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 37, "bugNodeStartChar": 1202, "bugNodeLength": 6, "fixLineNum": 37, "fixNodeStartChar": 1202, "fixNodeLength": 6, "sourceBeforeFix": "id=3", "sourceAfterFix": "id=4"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 40, "bugNodeStartChar": 1271, "bugNodeLength": 6, "fixLineNum": 40, "fixNodeStartChar": 1271, "fixNodeLength": 6, "sourceBeforeFix": "id=4", "sourceAfterFix": "id=5"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 43, "bugNodeStartChar": 1346, "bugNodeLength": 6, "fixLineNum": 43, "fixNodeStartChar": 1346, "fixNodeLength": 6, "sourceBeforeFix": "id=4", "sourceAfterFix": "id=6"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 46, "bugNodeStartChar": 1401, "bugNodeLength": 6, "fixLineNum": 46, "fixNodeStartChar": 1401, "fixNodeLength": 6, "sourceBeforeFix": "id=5", "sourceAfterFix": "id=7"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 49, "bugNodeStartChar": 1456, "bugNodeLength": 6, "fixLineNum": 49, "fixNodeStartChar": 1456, "fixNodeLength": 6, "sourceBeforeFix": "id=6", "sourceAfterFix": "id=8"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 1515, "bugNodeLength": 6, "fixLineNum": 52, "fixNodeStartChar": 1515, "fixNodeLength": 6, "sourceBeforeFix": "id=7", "sourceAfterFix": "id=9"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 55, "bugNodeStartChar": 1573, "bugNodeLength": 6, "fixLineNum": 55, "fixNodeStartChar": 1573, "fixNodeLength": 7, "sourceBeforeFix": "id=7", "sourceAfterFix": "id=10"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 58, "bugNodeStartChar": 1651, "bugNodeLength": 6, "fixLineNum": 58, "fixNodeStartChar": 1651, "fixNodeLength": 7, "sourceBeforeFix": "id=8", "sourceAfterFix": "id=11"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 1722, "bugNodeLength": 6, "fixLineNum": 61, "fixNodeStartChar": 1722, "fixNodeLength": 7, "sourceBeforeFix": "id=9", "sourceAfterFix": "id=12"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 64, "bugNodeStartChar": 1811, "bugNodeLength": 7, "fixLineNum": 64, "fixNodeStartChar": 1811, "fixNodeLength": 7, "sourceBeforeFix": "id=10", "sourceAfterFix": "id=13"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1909, "bugNodeLength": 7, "fixLineNum": 67, "fixNodeStartChar": 1909, "fixNodeLength": 7, "sourceBeforeFix": "id=11", "sourceAfterFix": "id=14"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 70, "bugNodeStartChar": 2007, "bugNodeLength": 7, "fixLineNum": 70, "fixNodeStartChar": 2007, "fixNodeLength": 7, "sourceBeforeFix": "id=12", "sourceAfterFix": "id=15"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 73, "bugNodeStartChar": 2064, "bugNodeLength": 7, "fixLineNum": 73, "fixNodeStartChar": 2064, "fixNodeLength": 7, "sourceBeforeFix": "id=13", "sourceAfterFix": "id=16"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 76, "bugNodeStartChar": 2149, "bugNodeLength": 7, "fixLineNum": 76, "fixNodeStartChar": 2149, "fixNodeLength": 7, "sourceBeforeFix": "id=14", "sourceAfterFix": "id=17"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 79, "bugNodeStartChar": 2234, "bugNodeLength": 7, "fixLineNum": 79, "fixNodeStartChar": 2234, "fixNodeLength": 7, "sourceBeforeFix": "id=15", "sourceAfterFix": "id=18"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 2323, "bugNodeLength": 7, "fixLineNum": 82, "fixNodeStartChar": 2323, "fixNodeLength": 7, "sourceBeforeFix": "id=16", "sourceAfterFix": "id=19"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2392, "bugNodeLength": 7, "fixLineNum": 85, "fixNodeStartChar": 2392, "fixNodeLength": 7, "sourceBeforeFix": "id=17", "sourceAfterFix": "id=20"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java\nindex e7c1e44..8ce0047 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java\n@@ -64,10 +64,10 @@\n     @EncodeMethod(id = 13)\n     void addEntryListener(String name);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 14)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 15)\n     void keySet(String name);\n \n     @EncodeMethod(id = 16)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1997, "bugNodeLength": 7, "fixLineNum": 67, "fixNodeStartChar": 1997, "fixNodeLength": 7, "sourceBeforeFix": "id=15", "sourceAfterFix": "id=14"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054", "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java\nindex e7c1e44..8ce0047 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ReplicatedMapTemplate.java\n@@ -64,10 +64,10 @@\n     @EncodeMethod(id = 13)\n     void addEntryListener(String name);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 14)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 15)\n     void keySet(String name);\n \n     @EncodeMethod(id = 16)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 70, "bugNodeStartChar": 2091, "bugNodeLength": 7, "fixLineNum": 70, "fixNodeStartChar": 2091, "fixNodeLength": 7, "sourceBeforeFix": "id=16", "sourceAfterFix": "id=15"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "761193c2f06e121a13c432fd58c347adba3302a7", "fixCommitParentSHA1": "fcf26cf280eae737644910dd3d4919523b982be5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.java\nindex 5b913c8..bdb27de 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.java\n@@ -219,7 +219,7 @@\n         }\n \n         if (partitionId != getPartitionId()) {\n-            throw new IllegalStateException(\"wrong partition, expected: \" + getPartitionId() + \" but found:\" + op);\n+            throw new IllegalStateException(\"wrong partition, expected: \" + getPartitionId() + \" but found:\" + partitionId);\n         }\n \n         if (internalPartition == null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 222, "bugNodeStartChar": 7702, "bugNodeLength": 69, "fixLineNum": 222, "fixNodeStartChar": 7702, "fixNodeLength": 78, "sourceBeforeFix": "\"wrong partition, expected: \" + getPartitionId() + \" but found:\"+ op", "sourceAfterFix": "\"wrong partition, expected: \" + getPartitionId() + \" but found:\"+ partitionId"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b0273c7b8bfb373ab336baae7c981f4a79fe3032", "fixCommitParentSHA1": "189867a5c815221cf07ba163c9259bf634eb8bbc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java\nindex 1e15766..88ea044 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java\n@@ -136,7 +136,7 @@\n                 // this is no good; no logging while holding a lock\n                 ILogger logger = invocation.logger;\n                 if (logger.isFinestEnabled()) {\n-                    logger.info(\"Future response is already set! Current response: \"\n+                    logger.finest(\"Future response is already set! Current response: \"\n                             + response + \", Offered response: \" + offeredResponse + \", Invocation: \" + invocation);\n                 }\n                 return;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 139, "bugNodeStartChar": 5907, "bugNodeLength": 179, "fixLineNum": 139, "fixNodeStartChar": 5907, "fixNodeLength": 181, "sourceBeforeFix": "logger.info(\"Future response is already set! Current response: \" + response + \", Offered response: \"+ offeredResponse+ \", Invocation: \"+ invocation)", "sourceAfterFix": "logger.finest(\"Future response is already set! Current response: \" + response + \", Offered response: \"+ offeredResponse+ \", Invocation: \"+ invocation)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b0273c7b8bfb373ab336baae7c981f4a79fe3032", "fixCommitParentSHA1": "189867a5c815221cf07ba163c9259bf634eb8bbc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java\nindex 1e15766..88ea044 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.java\n@@ -136,7 +136,7 @@\n                 // this is no good; no logging while holding a lock\n                 ILogger logger = invocation.logger;\n                 if (logger.isFinestEnabled()) {\n-                    logger.info(\"Future response is already set! Current response: \"\n+                    logger.finest(\"Future response is already set! Current response: \"\n                             + response + \", Offered response: \" + offeredResponse + \", Invocation: \" + invocation);\n                 }\n                 return;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 139, "bugNodeStartChar": 5907, "bugNodeLength": 179, "fixLineNum": 139, "fixNodeStartChar": 5907, "fixNodeLength": 181, "sourceBeforeFix": "logger.info(\"Future response is already set! Current response: \" + response + \", Offered response: \"+ offeredResponse+ \", Invocation: \"+ invocation)", "sourceAfterFix": "logger.finest(\"Future response is already set! Current response: \" + response + \", Offered response: \"+ offeredResponse+ \", Invocation: \"+ invocation)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "5705c43fc67cbb1ebf19515e6676e4f68f299406", "fixCommitParentSHA1": "03206d98a4287ade342ec386397851a54d849b0f", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheCreateConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheCreateConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheCreateConfigOperation.java\nindex 626cc70..37a4ac2 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheCreateConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheCreateConfigOperation.java\n@@ -73,7 +73,7 @@\n         AbstractCacheService service = getService();\n         response = service.createCacheConfigIfAbsent(config);\n \n-        if (createAlsoOnOthers && response == null) {\n+        if (createAlsoOnOthers) {\n             NodeEngine nodeEngine = getNodeEngine();\n             Collection<MemberImpl> members = nodeEngine.getClusterService().getMemberList();\n             int remoteNodeCount = members.size() - 1;\n@@ -85,7 +85,7 @@\n                 OperationService operationService = nodeEngine.getOperationService();\n                 for (MemberImpl member : members) {\n                     if (!member.localMember()) {\n-                        CacheCreateConfigOperation op = new CacheCreateConfigOperation(config, true);\n+                        CacheCreateConfigOperation op = new CacheCreateConfigOperation(config, false);\n                         operationService\n                                 .createInvocationBuilder(AbstractCacheService.SERVICE_NAME, op, member.getAddress())\n                                 .setCallback(callback)\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 88, "bugNodeStartChar": 3561, "bugNodeLength": 44, "fixLineNum": 88, "fixNodeStartChar": 3561, "fixNodeLength": 45, "sourceBeforeFix": "new CacheCreateConfigOperation(config,true)", "sourceAfterFix": "new CacheCreateConfigOperation(config,false)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "70f070f7158f18eb1396fedc8ae63b3827627219", "fixCommitParentSHA1": "bc30366a975b4df94d37e279ce724d61e942cdcf", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/cache/impl/HazelcastClientCacheManager.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/cache/impl/HazelcastClientCacheManager.java b/hazelcast-client/src/main/java/com/hazelcast/client/cache/impl/HazelcastClientCacheManager.java\nindex c489365..b0e40e6 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/cache/impl/HazelcastClientCacheManager.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/cache/impl/HazelcastClientCacheManager.java\n@@ -126,7 +126,7 @@\n     protected <K, V> CacheConfig<K, V> createConfigOnPartition(CacheConfig<K, V> cacheConfig) {\n         try {\n             int partitionId = clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());\n-            CacheCreateConfigRequest request = new CacheCreateConfigRequest(cacheConfig, true, partitionId);\n+            CacheCreateConfigRequest request = new CacheCreateConfigRequest(cacheConfig, false, partitionId);\n             Future future = clientContext.getInvocationService()\n                                 .invokeOnKeyOwner(request, cacheConfig.getNameWithPrefix());\n             return (CacheConfig<K, V>) clientContext.getSerializationService().toObject(future.get());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 129, "bugNodeStartChar": 5458, "bugNodeLength": 60, "fixLineNum": 129, "fixNodeStartChar": 5458, "fixNodeLength": 61, "sourceBeforeFix": "new CacheCreateConfigRequest(cacheConfig,true,partitionId)", "sourceAfterFix": "new CacheCreateConfigRequest(cacheConfig,false,partitionId)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "70f070f7158f18eb1396fedc8ae63b3827627219", "fixCommitParentSHA1": "bc30366a975b4df94d37e279ce724d61e942cdcf", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/client/CacheCreateConfigRequest.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/client/CacheCreateConfigRequest.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/client/CacheCreateConfigRequest.java\nindex 6312b3c..3851c0c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/client/CacheCreateConfigRequest.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/client/CacheCreateConfigRequest.java\n@@ -44,15 +44,15 @@\n     private static final int TRY_COUNT = 100;\n \n     private CacheConfig cacheConfig;\n-    private boolean create;\n+    private boolean createAlsoOnOthers;\n     private int partitionId;\n \n     public CacheCreateConfigRequest() {\n     }\n \n-    public CacheCreateConfigRequest(CacheConfig cacheConfig, boolean create, int partitionId) {\n+    public CacheCreateConfigRequest(CacheConfig cacheConfig, boolean createAlsoOnOthers, int partitionId) {\n         this.cacheConfig = cacheConfig;\n-        this.create = create;\n+        this.createAlsoOnOthers = createAlsoOnOthers;\n         this.partitionId = partitionId;\n     }\n \n@@ -72,7 +72,7 @@\n     }\n \n     protected Operation prepareOperation() {\n-        return new CacheCreateConfigOperation(cacheConfig, create, false);\n+        return new CacheCreateConfigOperation(cacheConfig, createAlsoOnOthers, false);\n     }\n \n     public final int getFactoryId() {\n@@ -90,7 +90,7 @@\n \n     public void write(PortableWriter writer)\n             throws IOException {\n-        writer.writeBoolean(\"c\", create);\n+        writer.writeBoolean(\"c\", createAlsoOnOthers);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);\n@@ -98,7 +98,7 @@\n \n     public void read(PortableReader reader)\n             throws IOException {\n-        create = reader.readBoolean(\"c\");\n+        createAlsoOnOthers = reader.readBoolean(\"c\");\n         partitionId = reader.readInt(\"p\");\n         final ObjectDataInput in = reader.getRawDataInput();\n         cacheConfig = in.readObject();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 75, "bugNodeStartChar": 2679, "bugNodeLength": 58, "fixLineNum": 75, "fixNodeStartChar": 2679, "fixNodeLength": 70, "sourceBeforeFix": "new CacheCreateConfigOperation(cacheConfig,create,false)", "sourceAfterFix": "new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "785123b79564b38f7133d5f0bac4234d6a52e05d", "fixCommitParentSHA1": "cd8cd6967effe45b6f85b07a9fba0023441a9835", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/client/protocol/MapMessageEncodeDecodeTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/client/protocol/MapMessageEncodeDecodeTest.java b/hazelcast/src/test/java/com/hazelcast/client/protocol/MapMessageEncodeDecodeTest.java\nindex 6fa5ea8..9c50ed6 100644\n--- a/hazelcast/src/test/java/com/hazelcast/client/protocol/MapMessageEncodeDecodeTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/client/protocol/MapMessageEncodeDecodeTest.java\n@@ -55,7 +55,7 @@\n     @Test\n     public void shouldEncodeDecodeWithHeaderCorrectly_PUT() {\n         byteBuffer = ByteBuffer\n-                .allocate(MapPutParameters.encodeSizeCost(NAME, BYTES_DATA, BYTES_DATA, THE_LONG, THE_LONG, THE_BOOLEAN));\n+                .allocate(MapPutParameters.encodeSizeCost(NAME, BYTES_DATA, BYTES_DATA));\n         ClientMessage cmEncode = new ClientMessage();\n         cmEncode.wrapForEncode(byteBuffer, 0);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 58, "bugNodeStartChar": 2048, "bugNodeLength": 94, "fixLineNum": 58, "fixNodeStartChar": 2048, "fixNodeLength": 61, "sourceBeforeFix": "MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA,THE_LONG,THE_LONG,THE_BOOLEAN)", "sourceAfterFix": "MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "9074897ccf35e42710c3078d2e564ba53b6f6f94", "fixCommitParentSHA1": "2dd25569b44ad6063e078029aafdf95aaeca448c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackPressureService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackPressureService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackPressureService.java\nindex bc8a85f..8bade66 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackPressureService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackPressureService.java\n@@ -26,7 +26,7 @@\n  * For information about the implementation see:\n  * https://hazelcast.atlassian.net/wiki/display/EN/Back+Pressure+Design\n  */\n-public class BackPressureService {\n+public final class BackPressureService {\n \n     /**\n      * The percentage above and below a certain sync-window we should randomize.\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 19, "bugNodeStartChar": 588, "bugNodeLength": 7963, "fixLineNum": 19, "fixNodeStartChar": 588, "fixNodeLength": 7969, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "9420ad23cb25d0b48ba5b1f124437176a152f3d5", "fixCommitParentSHA1": "0472093d91ce40bcb04d90f0a8469f5bf5c476a4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/tcp/SocketClientDataReaderNew.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/tcp/SocketClientDataReaderNew.java b/hazelcast/src/main/java/com/hazelcast/nio/tcp/SocketClientDataReaderNew.java\nindex c359ca3..f165973 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/tcp/SocketClientDataReaderNew.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/tcp/SocketClientDataReaderNew.java\n@@ -32,7 +32,6 @@\n     final TcpIpConnection connection;\n     final IOService ioService;\n     Packet packet;\n-//    boolean connectionTypeSet;\n \n     public SocketClientDataReaderNew(TcpIpConnection connection) {\n         this.connection = connection;\n@@ -42,7 +41,7 @@\n     public void read(ByteBuffer inBuffer) throws Exception {\n         while (inBuffer.hasRemaining()) {\n             if (packet == null) {\n-                packet = new Packet(ioService.getPortableContext());\n+                packet = new Packet();\n             }\n             boolean complete = packet.readFrom(inBuffer);\n             if (complete) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 45, "bugNodeStartChar": 1470, "bugNodeLength": 42, "fixLineNum": 45, "fixNodeStartChar": 1470, "fixNodeLength": 12, "sourceBeforeFix": "new Packet(ioService.getPortableContext())", "sourceAfterFix": "new Packet()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b2a8186bd3793d72b868a112512d6a9a087d18c3", "fixCommitParentSHA1": "5b660946594521899f5e5be613e2d52b14021ad7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\nindex 4fa28f8..7c336d7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n@@ -99,7 +99,7 @@\n                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n-                cache.setRecord(key, record);\n+                cache.putRecord(key, record);\n             }\n         }\n         data.clear();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 102, "bugNodeStartChar": 3840, "bugNodeLength": 28, "fixLineNum": 102, "fixNodeStartChar": 3840, "fixNodeLength": 28, "sourceBeforeFix": "cache.setRecord(key,record)", "sourceAfterFix": "cache.putRecord(key,record)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b2a8186bd3793d72b868a112512d6a9a087d18c3", "fixCommitParentSHA1": "5b660946594521899f5e5be613e2d52b14021ad7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\nindex 4fa28f8..7c336d7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n@@ -99,7 +99,7 @@\n                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n-                cache.setRecord(key, record);\n+                cache.putRecord(key, record);\n             }\n         }\n         data.clear();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 102, "bugNodeStartChar": 3840, "bugNodeLength": 28, "fixLineNum": 102, "fixNodeStartChar": 3840, "fixNodeLength": 28, "sourceBeforeFix": "cache.setRecord(key,record)", "sourceAfterFix": "cache.putRecord(key,record)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "59d0db7481bc37754dcfdc845d309c401bac50a9", "fixCommitParentSHA1": "6b7f549245504bfd406ade5d4ee34b6c39c14e40", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\nindex 0715222..e397c77 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n@@ -99,7 +99,7 @@\n                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n-                cache.setRecord(key, record);\n+                cache.putRecord(key, record);\n             }\n         }\n         data.clear();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 102, "bugNodeStartChar": 3840, "bugNodeLength": 28, "fixLineNum": 102, "fixNodeStartChar": 3840, "fixNodeLength": 28, "sourceBeforeFix": "cache.setRecord(key,record)", "sourceAfterFix": "cache.putRecord(key,record)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "59d0db7481bc37754dcfdc845d309c401bac50a9", "fixCommitParentSHA1": "6b7f549245504bfd406ade5d4ee34b6c39c14e40", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\nindex 0715222..e397c77 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheReplicationOperation.java\n@@ -99,7 +99,7 @@\n                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n-                cache.setRecord(key, record);\n+                cache.putRecord(key, record);\n             }\n         }\n         data.clear();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 102, "bugNodeStartChar": 3840, "bugNodeLength": 28, "fixLineNum": 102, "fixNodeStartChar": 3840, "fixNodeLength": 28, "sourceBeforeFix": "cache.setRecord(key,record)", "sourceAfterFix": "cache.putRecord(key,record)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "02c24e596d1f598d1b9bdda6e9eb9ed1c132a1c8", "fixCommitParentSHA1": "63c71caaa9ffc9270e87244e9805a103a35a570d", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/io/ClientExecutionPoolSizeLowTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/io/ClientExecutionPoolSizeLowTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/io/ClientExecutionPoolSizeLowTest.java\nindex c1d320c..13303f5 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/io/ClientExecutionPoolSizeLowTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/io/ClientExecutionPoolSizeLowTest.java\n@@ -94,6 +94,6 @@\n             }\n         }\n \n-        assertSizeEventually(COUNT, map);\n+        assertSizeEventually(COUNT, map, 180);\n     }\n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 97, "bugNodeStartChar": 2998, "bugNodeLength": 32, "fixLineNum": 97, "fixNodeStartChar": 2998, "fixNodeLength": 37, "sourceBeforeFix": "assertSizeEventually(COUNT,map)", "sourceAfterFix": "assertSizeEventually(COUNT,map,180)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "9e49d649081b1a29ef97eaefd92b077cf6365f60", "fixCommitParentSHA1": "c90b2d66e4589f357f9408cf75adb6a06c648965", "bugFilePath": "hazelcast-client-new/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java", "fixPatch": "diff --git a/hazelcast-client-new/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java b/hazelcast-client-new/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java\nindex 6a8b0b4..ba8552e 100644\n--- a/hazelcast-client-new/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java\n+++ b/hazelcast-client-new/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java\n@@ -101,7 +101,7 @@\n \n     private void waitInitialMemberListFetched() throws InterruptedException {\n         boolean success = initialListFetchedLatch.await(INITIAL_MEMBERS_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n-        if (success) {\n+        if (!success) {\n             LOGGER.warning(\"Error while getting initial member list from cluster!\");\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 104, "bugNodeStartChar": 4543, "bugNodeLength": 7, "fixLineNum": 104, "fixNodeStartChar": 4543, "fixNodeLength": 8, "sourceBeforeFix": "success", "sourceAfterFix": "!success"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "9e49d649081b1a29ef97eaefd92b077cf6365f60", "fixCommitParentSHA1": "c90b2d66e4589f357f9408cf75adb6a06c648965", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java\nindex 6a8b0b4..ba8552e 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientMembershipListener.java\n@@ -101,7 +101,7 @@\n \n     private void waitInitialMemberListFetched() throws InterruptedException {\n         boolean success = initialListFetchedLatch.await(INITIAL_MEMBERS_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n-        if (success) {\n+        if (!success) {\n             LOGGER.warning(\"Error while getting initial member list from cluster!\");\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 104, "bugNodeStartChar": 4543, "bugNodeLength": 7, "fixLineNum": 104, "fixNodeStartChar": 4543, "fixNodeLength": 8, "sourceBeforeFix": "success", "sourceAfterFix": "!success"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2852c53fe66e1f321d9af4feba9d01716b29754d", "fixCommitParentSHA1": "e3cf23f2592c54bdb1469e7b061915a5d974a582", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/messagehandlers/AbstractPartitionsMessageHandler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/messagehandlers/AbstractPartitionsMessageHandler.java b/hazelcast/src/main/java/com/hazelcast/client/impl/messagehandlers/AbstractPartitionsMessageHandler.java\nindex c2ae6ba..b3a3fe6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/messagehandlers/AbstractPartitionsMessageHandler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/messagehandlers/AbstractPartitionsMessageHandler.java\n@@ -74,7 +74,7 @@\n         return response;\n     }\n \n-    private class CallbackImpl implements Callback<Object> {\n+    private static class CallbackImpl implements Callback<Object> {\n         private final ClientEndpoint endpoint;\n         private final MessageHandlerContext context;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 77, "bugNodeStartChar": 2715, "bugNodeLength": 401, "fixLineNum": 77, "fixNodeStartChar": 2715, "fixNodeLength": 408, "sourceBeforeFix": "2", "sourceAfterFix": "10"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "aca1355ccb6f11102039d7f98bef51ab88c7df8c", "fixCommitParentSHA1": "08c4c8d9c86d4c97a545f3f4a2d0486f078b344c", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex b72fcb9..db424b0 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -209,7 +209,7 @@\n         for (; ; ) {\n             String id = prefix + randomString();\n             Partition partition = partitionService.getPartition(id);\n-            if (comparePartitionOwnership(false, localMember, partition)) {\n+            if (comparePartitionOwnership(true, localMember, partition)) {\n                 return id;\n             }\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 212, "bugNodeStartChar": 6835, "bugNodeLength": 56, "fixLineNum": 212, "fixNodeStartChar": 6835, "fixNodeLength": 55, "sourceBeforeFix": "comparePartitionOwnership(false,localMember,partition)", "sourceAfterFix": "comparePartitionOwnership(true,localMember,partition)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "08c4c8d9c86d4c97a545f3f4a2d0486f078b344c", "fixCommitParentSHA1": "aa77035da1df1194ad5ed77dd22ab21f91c9235c", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\nindex db424b0..b72fcb9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastTestSupport.java\n@@ -209,7 +209,7 @@\n         for (; ; ) {\n             String id = prefix + randomString();\n             Partition partition = partitionService.getPartition(id);\n-            if (comparePartitionOwnership(true, localMember, partition)) {\n+            if (comparePartitionOwnership(false, localMember, partition)) {\n                 return id;\n             }\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 212, "bugNodeStartChar": 6835, "bugNodeLength": 55, "fixLineNum": 212, "fixNodeStartChar": 6835, "fixNodeLength": 56, "sourceBeforeFix": "comparePartitionOwnership(true,localMember,partition)", "sourceAfterFix": "comparePartitionOwnership(false,localMember,partition)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "fixCommitParentSHA1": "d9c72eadecbf3507c6188e9edae3fb8512597ade", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\nindex 2de2c45..1ef72c9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n@@ -35,7 +35,7 @@\n \n         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n-        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n@@ -56,7 +56,7 @@\n \n         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n@@ -76,7 +76,7 @@\n \n         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 38, "bugNodeStartChar": 1306, "bugNodeLength": 62, "fixLineNum": 38, "fixNodeStartChar": 1306, "fixNodeLength": 19, "sourceBeforeFix": "new Packet(data,0,serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,0)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "fixCommitParentSHA1": "d9c72eadecbf3507c6188e9edae3fb8512597ade", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\nindex 2de2c45..1ef72c9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n@@ -35,7 +35,7 @@\n \n         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n-        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n@@ -56,7 +56,7 @@\n \n         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n@@ -76,7 +76,7 @@\n \n         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 59, "bugNodeStartChar": 2181, "bugNodeLength": 87, "fixLineNum": 59, "fixNodeStartChar": 2181, "fixNodeLength": 44, "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "fixCommitParentSHA1": "d9c72eadecbf3507c6188e9edae3fb8512597ade", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\nindex 2de2c45..1ef72c9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n@@ -35,7 +35,7 @@\n \n         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n-        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n@@ -56,7 +56,7 @@\n \n         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n@@ -76,7 +76,7 @@\n \n         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 79, "bugNodeStartChar": 3045, "bugNodeLength": 87, "fixLineNum": 79, "fixNodeStartChar": 3045, "fixNodeLength": 44, "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "fixCommitParentSHA1": "d9c72eadecbf3507c6188e9edae3fb8512597ade", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/OperationThreadTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/OperationThreadTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/OperationThreadTest.java\nindex 9fb462d..61c0258 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/OperationThreadTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/OperationThreadTest.java\n@@ -29,7 +29,7 @@\n         DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n \n-        Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n \n         doThrow(new OutOfMemoryError()).when(handler).run(packet);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 32, "bugNodeStartChar": 1273, "bugNodeLength": 87, "fixLineNum": 32, "fixNodeStartChar": 1273, "fixNodeLength": 44, "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "b4fde911d3cfb7d45c3264ff553b264486772df8", "fixCommitParentSHA1": "1a020957ad190911bd40330e20a4ac658018b333", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/query/impl/QueryEntryTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/query/impl/QueryEntryTest.java b/hazelcast/src/test/java/com/hazelcast/query/impl/QueryEntryTest.java\nindex b41d44e..9ab4cb6 100644\n--- a/hazelcast/src/test/java/com/hazelcast/query/impl/QueryEntryTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/query/impl/QueryEntryTest.java\n@@ -26,7 +26,7 @@\n @Category(QuickTest.class)\n public class QueryEntryTest extends HazelcastTestSupport {\n \n-    private static SerializationService serializationService;\n+    private SerializationService serializationService;\n \n     @Before\n     public void before() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 29, "bugNodeStartChar": 1012, "bugNodeLength": 57, "fixLineNum": 29, "fixNodeStartChar": 1012, "fixNodeLength": 50, "sourceBeforeFix": "10", "sourceAfterFix": "2"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "aeab4504cd1d7f098475d56f689d07c5df1a4309", "fixCommitParentSHA1": "00606a0f109dd1b183cbc39a6044e67f060cf4a2", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/mapstore/writebehind/DefaultWriteBehindProcessor.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/mapstore/writebehind/DefaultWriteBehindProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/impl/mapstore/writebehind/DefaultWriteBehindProcessor.java\nindex e65552e..3ed843f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/mapstore/writebehind/DefaultWriteBehindProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/mapstore/writebehind/DefaultWriteBehindProcessor.java\n@@ -64,7 +64,7 @@\n         if (writeBatchSize > 1) {\n             failMap = doStoreUsingBatchSize(delayedEntries);\n         } else {\n-            failMap = processInternal((List) delayedEntries);\n+            failMap = processInternal(delayedEntries);\n         }\n         return failMap;\n     }\n@@ -342,11 +342,11 @@\n      * @param sortedDelayedEntries entries to be stored.\n      * @return not-stored entries per partition.\n      */\n-    private Map<Integer, List<DelayedEntry>> doStoreUsingBatchSize(Collection<DelayedEntry> sortedDelayedEntries) {\n+    private Map<Integer, List<DelayedEntry>> doStoreUsingBatchSize(List<DelayedEntry> sortedDelayedEntries) {\n         final Map<Integer, List<DelayedEntry>> failsPerPartition = new HashMap<Integer, List<DelayedEntry>>();\n         int page = 0;\n         List<DelayedEntry> delayedEntryList;\n-        while ((delayedEntryList = getBatchChunk((List) sortedDelayedEntries, writeBatchSize, page++)) != null) {\n+        while ((delayedEntryList = getBatchChunk(sortedDelayedEntries, writeBatchSize, page++)) != null) {\n             final Map<Integer, List<DelayedEntry>> fails = processInternal(delayedEntryList);\n             final Set<Map.Entry<Integer, List<DelayedEntry>>> entries = fails.entrySet();\n             for (Map.Entry<Integer, List<DelayedEntry>> entry : entries) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 345, "bugNodeStartChar": 14178, "bugNodeLength": 24, "fixLineNum": 345, "fixNodeStartChar": 14178, "fixNodeLength": 18, "sourceBeforeFix": "Collection<DelayedEntry>", "sourceAfterFix": "List<DelayedEntry>"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "37e4da4e0ac9c442b60bd18816fd74d68a26116a", "fixCommitParentSHA1": "1294b0e1b713c2a5d482e2df0776cf71dbb11ccb", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/MapUtil.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/MapUtil.java b/hazelcast/src/main/java/com/hazelcast/util/MapUtil.java\nindex 28b53cc..2907eb1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/MapUtil.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/MapUtil.java\n@@ -17,7 +17,7 @@\n      * to minimize rehash operations\n      */\n     public static <K, V> Map<K, V> createHashMap(int expectedMapSize) {\n-        int initialCapacity = (int) (expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR) + 1;\n+        int initialCapacity = (int) (expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR) + 1;\n         return new HashMap<K, V>(initialCapacity);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 20, "bugNodeStartChar": 500, "bugNodeLength": 45, "fixLineNum": 20, "fixNodeStartChar": 500, "fixNodeLength": 45, "sourceBeforeFix": "expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR", "sourceAfterFix": "expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "fixCommitParentSHA1": "1af0e4bcd8878a1e01d2bc0121985d07beddcc63", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\nindex b2449a1..0901dbf 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n@@ -195,7 +195,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -226,7 +226,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 198, "bugNodeStartChar": 7115, "bugNodeLength": 37, "fixLineNum": 198, "fixNodeStartChar": 7115, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "fixCommitParentSHA1": "1af0e4bcd8878a1e01d2bc0121985d07beddcc63", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\nindex b2449a1..0901dbf 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n@@ -195,7 +195,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -226,7 +226,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 198, "bugNodeStartChar": 7115, "bugNodeLength": 37, "fixLineNum": 198, "fixNodeStartChar": 7115, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "fixCommitParentSHA1": "1af0e4bcd8878a1e01d2bc0121985d07beddcc63", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\nindex b2449a1..0901dbf 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n@@ -195,7 +195,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -226,7 +226,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 229, "bugNodeStartChar": 8169, "bugNodeLength": 37, "fixLineNum": 229, "fixNodeStartChar": 8169, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "fixCommitParentSHA1": "1af0e4bcd8878a1e01d2bc0121985d07beddcc63", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\nindex b2449a1..0901dbf 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n@@ -195,7 +195,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -226,7 +226,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 229, "bugNodeStartChar": 8169, "bugNodeLength": 37, "fixLineNum": 229, "fixNodeStartChar": 8169, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "fixCommitParentSHA1": "92e14613559b3cb3c43651bf62262dc2df6c7311", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 7102, "bugNodeLength": 37, "fixLineNum": 197, "fixNodeStartChar": 7102, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "fixCommitParentSHA1": "92e14613559b3cb3c43651bf62262dc2df6c7311", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 7102, "bugNodeLength": 37, "fixLineNum": 197, "fixNodeStartChar": 7102, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "fixCommitParentSHA1": "92e14613559b3cb3c43651bf62262dc2df6c7311", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 228, "bugNodeStartChar": 8156, "bugNodeLength": 37, "fixLineNum": 228, "fixNodeStartChar": 8156, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "fixCommitParentSHA1": "92e14613559b3cb3c43651bf62262dc2df6c7311", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 228, "bugNodeStartChar": 8156, "bugNodeLength": 37, "fixLineNum": 228, "fixNodeStartChar": 8156, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "fixCommitParentSHA1": "cfda335e5bf3a4b554b121f3008a407aa181dbc3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 7102, "bugNodeLength": 37, "fixLineNum": 197, "fixNodeStartChar": 7102, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "fixCommitParentSHA1": "cfda335e5bf3a4b554b121f3008a407aa181dbc3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 7102, "bugNodeLength": 37, "fixLineNum": 197, "fixNodeStartChar": 7102, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "fixCommitParentSHA1": "cfda335e5bf3a4b554b121f3008a407aa181dbc3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 228, "bugNodeStartChar": 8156, "bugNodeLength": 37, "fixLineNum": 228, "fixNodeStartChar": 8156, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "fixCommitParentSHA1": "cfda335e5bf3a4b554b121f3008a407aa181dbc3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\nindex 2baf3f1..1347d97 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientIssueTest.java\n@@ -194,7 +194,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -225,7 +225,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 228, "bugNodeStartChar": 8156, "bugNodeLength": 37, "fixLineNum": 228, "fixNodeStartChar": 8156, "fixNodeLength": 36, "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "998cca82220175171f60cd096ee26f600eabd8dc", "fixCommitParentSHA1": "5f5b80ddd0b8f51525764ffdda9ecc7b0bdf18b5", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "998cca82220175171f60cd096ee26f600eabd8dc", "fixCommitParentSHA1": "5f5b80ddd0b8f51525764ffdda9ecc7b0bdf18b5", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "cc15fd4704866dd9befcf6c709073174985d494e", "fixCommitParentSHA1": "71ef25dfae46f9117c03c070e06845067a2d31d4", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cc15fd4704866dd9befcf6c709073174985d494e", "fixCommitParentSHA1": "71ef25dfae46f9117c03c070e06845067a2d31d4", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "71ca4705df961c60993178197646aee30d3b6311", "fixCommitParentSHA1": "37cec23b0d30c8d15f8583083d4f3f20fc77aa2d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "71ca4705df961c60993178197646aee30d3b6311", "fixCommitParentSHA1": "37cec23b0d30c8d15f8583083d4f3f20fc77aa2d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b3b6a697313c955f83ee0466fd01dff806627d6b", "fixCommitParentSHA1": "e5046f36229214b49ca17d02d08923664c83fa10", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b3b6a697313c955f83ee0466fd01dff806627d6b", "fixCommitParentSHA1": "e5046f36229214b49ca17d02d08923664c83fa10", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\nindex 89cb7f4..61be69c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/modularhelpers/SimpleClusterUtil.java\n@@ -62,9 +62,9 @@\n         return getNode(random.nextInt(cluster.size()));\n     }\n \n-    public void terminateRandomNode(){\n+    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n-        node.getLifecycleService().terminate();\n+        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 1916, "bugNodeLength": 38, "fixLineNum": 67, "fixNodeStartChar": 1916, "fixNodeLength": 37, "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "fixCommitParentSHA1": "9a12d6357cf48534678723286b4741f55eb7009c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 98bc0b6..c33dc62 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -327,11 +327,11 @@\n             throw new IOException(\"Address is required!\");\n         }\n \n-        ClientConnection clientConnection = connections.get(address);\n+        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n-            final Object lock = getLock(address);\n+            final Object lock = getLock(target);\n             synchronized (lock) {\n-                clientConnection = connections.get(address);\n+                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);\n@@ -341,7 +341,7 @@\n                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n-                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n+                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 330, "bugNodeStartChar": 13401, "bugNodeLength": 24, "fixLineNum": 330, "fixNodeStartChar": 13401, "fixNodeLength": 23, "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "fixCommitParentSHA1": "9a12d6357cf48534678723286b4741f55eb7009c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 98bc0b6..c33dc62 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -327,11 +327,11 @@\n             throw new IOException(\"Address is required!\");\n         }\n \n-        ClientConnection clientConnection = connections.get(address);\n+        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n-            final Object lock = getLock(address);\n+            final Object lock = getLock(target);\n             synchronized (lock) {\n-                clientConnection = connections.get(address);\n+                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);\n@@ -341,7 +341,7 @@\n                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n-                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n+                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 332, "bugNodeStartChar": 13499, "bugNodeLength": 16, "fixLineNum": 332, "fixNodeStartChar": 13499, "fixNodeLength": 15, "sourceBeforeFix": "getLock(address)", "sourceAfterFix": "getLock(target)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "fixCommitParentSHA1": "9a12d6357cf48534678723286b4741f55eb7009c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 98bc0b6..c33dc62 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -327,11 +327,11 @@\n             throw new IOException(\"Address is required!\");\n         }\n \n-        ClientConnection clientConnection = connections.get(address);\n+        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n-            final Object lock = getLock(address);\n+            final Object lock = getLock(target);\n             synchronized (lock) {\n-                clientConnection = connections.get(address);\n+                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);\n@@ -341,7 +341,7 @@\n                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n-                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n+                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 334, "bugNodeStartChar": 13586, "bugNodeLength": 24, "fixLineNum": 334, "fixNodeStartChar": 13586, "fixNodeLength": 23, "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "fixCommitParentSHA1": "9a12d6357cf48534678723286b4741f55eb7009c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 98bc0b6..c33dc62 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -327,11 +327,11 @@\n             throw new IOException(\"Address is required!\");\n         }\n \n-        ClientConnection clientConnection = connections.get(address);\n+        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n-            final Object lock = getLock(address);\n+            final Object lock = getLock(target);\n             synchronized (lock) {\n-                clientConnection = connections.get(address);\n+                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);\n@@ -341,7 +341,7 @@\n                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n-                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n+                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 330, "bugNodeStartChar": 13401, "bugNodeLength": 24, "fixLineNum": 330, "fixNodeStartChar": 13401, "fixNodeLength": 23, "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "fixCommitParentSHA1": "9a12d6357cf48534678723286b4741f55eb7009c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 98bc0b6..c33dc62 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -327,11 +327,11 @@\n             throw new IOException(\"Address is required!\");\n         }\n \n-        ClientConnection clientConnection = connections.get(address);\n+        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n-            final Object lock = getLock(address);\n+            final Object lock = getLock(target);\n             synchronized (lock) {\n-                clientConnection = connections.get(address);\n+                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);\n@@ -341,7 +341,7 @@\n                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n-                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n+                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 332, "bugNodeStartChar": 13499, "bugNodeLength": 16, "fixLineNum": 332, "fixNodeStartChar": 13499, "fixNodeLength": 15, "sourceBeforeFix": "getLock(address)", "sourceAfterFix": "getLock(target)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "fixCommitParentSHA1": "9a12d6357cf48534678723286b4741f55eb7009c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 98bc0b6..c33dc62 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -327,11 +327,11 @@\n             throw new IOException(\"Address is required!\");\n         }\n \n-        ClientConnection clientConnection = connections.get(address);\n+        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n-            final Object lock = getLock(address);\n+            final Object lock = getLock(target);\n             synchronized (lock) {\n-                clientConnection = connections.get(address);\n+                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);\n@@ -341,7 +341,7 @@\n                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n-                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n+                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 334, "bugNodeStartChar": 13586, "bugNodeLength": 24, "fixLineNum": 334, "fixNodeStartChar": 13586, "fixNodeLength": 23, "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b7a82854871f76fbc0bda0c5fec2be699fc46b68", "fixCommitParentSHA1": "d2edcae4c5817e007d0ac74541711b44dff1a1b3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\nindex 3eaeb78..217b4ac 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n@@ -29,7 +29,7 @@\n \n     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n-    private static final int THREADS_PER_CLIENT = 8;\n+    private static final int THREADS_PER_CLIENT = 4;\n     private static final String MAP_NAME = randomString();\n \n \n@@ -82,7 +82,7 @@\n     }\n \n     public class PutItemsThread extends Thread {\n-        public static final int MAX_ITEMS = 1000;\n+        public static final int MAX_ITEMS = 100;\n \n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 32, "bugNodeStartChar": 1201, "bugNodeLength": 22, "fixLineNum": 32, "fixNodeStartChar": 1201, "fixNodeLength": 22, "sourceBeforeFix": "THREADS_PER_CLIENT=8", "sourceAfterFix": "THREADS_PER_CLIENT=4"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b7a82854871f76fbc0bda0c5fec2be699fc46b68", "fixCommitParentSHA1": "d2edcae4c5817e007d0ac74541711b44dff1a1b3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\nindex 3eaeb78..217b4ac 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n@@ -29,7 +29,7 @@\n \n     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n-    private static final int THREADS_PER_CLIENT = 8;\n+    private static final int THREADS_PER_CLIENT = 4;\n     private static final String MAP_NAME = randomString();\n \n \n@@ -82,7 +82,7 @@\n     }\n \n     public class PutItemsThread extends Thread {\n-        public static final int MAX_ITEMS = 1000;\n+        public static final int MAX_ITEMS = 100;\n \n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2910, "bugNodeLength": 16, "fixLineNum": 85, "fixNodeStartChar": 2910, "fixNodeLength": 15, "sourceBeforeFix": "MAX_ITEMS=1000", "sourceAfterFix": "MAX_ITEMS=100"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "dad74a846d56bbb7593f8e6ebf388eb9902ff04a", "fixCommitParentSHA1": "90382d5d9e6cb00e27a5305bf9bb40f98f15aaff", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\nindex 3eaeb78..217b4ac 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n@@ -29,7 +29,7 @@\n \n     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n-    private static final int THREADS_PER_CLIENT = 8;\n+    private static final int THREADS_PER_CLIENT = 4;\n     private static final String MAP_NAME = randomString();\n \n \n@@ -82,7 +82,7 @@\n     }\n \n     public class PutItemsThread extends Thread {\n-        public static final int MAX_ITEMS = 1000;\n+        public static final int MAX_ITEMS = 100;\n \n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 32, "bugNodeStartChar": 1201, "bugNodeLength": 22, "fixLineNum": 32, "fixNodeStartChar": 1201, "fixNodeLength": 22, "sourceBeforeFix": "THREADS_PER_CLIENT=8", "sourceAfterFix": "THREADS_PER_CLIENT=4"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "dad74a846d56bbb7593f8e6ebf388eb9902ff04a", "fixCommitParentSHA1": "90382d5d9e6cb00e27a5305bf9bb40f98f15aaff", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\nindex 3eaeb78..217b4ac 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/multimap/ClientMultiMapListenerStressTest.java\n@@ -29,7 +29,7 @@\n \n     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n-    private static final int THREADS_PER_CLIENT = 8;\n+    private static final int THREADS_PER_CLIENT = 4;\n     private static final String MAP_NAME = randomString();\n \n \n@@ -82,7 +82,7 @@\n     }\n \n     public class PutItemsThread extends Thread {\n-        public static final int MAX_ITEMS = 1000;\n+        public static final int MAX_ITEMS = 100;\n \n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2910, "bugNodeLength": 16, "fixLineNum": 85, "fixNodeStartChar": 2910, "fixNodeLength": 15, "sourceBeforeFix": "MAX_ITEMS=1000", "sourceAfterFix": "MAX_ITEMS=100"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "bda977e8bd87caf71a9df9047167f01b81589bbd", "fixCommitParentSHA1": "52c2bbf42f4dd214c4cccd3849097ba507634d89", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java\nindex b147a58..ce576be 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java\n@@ -219,7 +219,7 @@\n             if (!interrupted && longPolling) {\n                 // no response!\n                 Address target = basicInvocation.getTarget();\n-                if (basicInvocation.nodeEngine.getThisAddress().equals(target)) {\n+                if (basicInvocation.remote && basicInvocation.nodeEngine.getThisAddress().equals(target)) {\n                     // target may change during invocation because of migration!\n                     continue;\n                 }\n@@ -264,7 +264,7 @@\n     }\n \n     private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n-        boolean hasResponse = basicInvocation.potentialResponse == null;\n+        boolean hasResponse = basicInvocation.potentialResponse != null;\n         int backupsExpected = basicInvocation.backupsExpected;\n         int backupsCompleted = basicInvocation.backupsCompleted;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 267, "bugNodeStartChar": 10158, "bugNodeLength": 41, "fixLineNum": 267, "fixNodeStartChar": 10158, "fixNodeLength": 41, "sourceBeforeFix": "basicInvocation.potentialResponse == null", "sourceAfterFix": "basicInvocation.potentialResponse != null"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "50adab26654da357afe0079f7831fd1cf0f8f8cd", "fixCommitParentSHA1": "a31862fd2dec4a5dd3079a2c48ef6434e1935a2b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/IterableUtil.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/IterableUtil.java b/hazelcast/src/main/java/com/hazelcast/util/IterableUtil.java\nindex 6130a40..d515d57 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/IterableUtil.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/IterableUtil.java\n@@ -21,7 +21,7 @@\n /**\n  * Utility functions for working with {@link Iterable}\n  */\n-public class IterableUtil {\n+public final class IterableUtil {\n \n     private IterableUtil(){\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 21, "bugNodeStartChar": 684, "bugNodeLength": 410, "fixLineNum": 21, "fixNodeStartChar": 684, "fixNodeLength": 416, "sourceBeforeFix": "1", "sourceAfterFix": "17"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "8561cd53e8c439965aa34c89d0e5016f78ca7e89", "fixCommitParentSHA1": "0d97f81ed03fa08795e1168a3f649bbb8dc2fcff", "bugFilePath": "hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java", "fixPatch": "diff --git a/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java b/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java\nindex 2644317..ac573bf 100644\n--- a/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java\n+++ b/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java\n@@ -42,12 +42,12 @@\n     }\n \n     public Collection<String> getPrivateIpAddresses() throws Exception {\n-        final Map<String, String> result = new DescribeInstances(awsConfig).execute(endpoint);\n+        final Map<String, String> result = new DescribeInstances(awsConfig).execute();\n         return result.keySet();\n     }\n \n     public Map<String, String> getAddresses() throws Exception {\n-        return new DescribeInstances(awsConfig).execute(endpoint);\n+        return new DescribeInstances(awsConfig).execute();\n     }\n \n     public void setEndpoint(String s) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 45, "bugNodeStartChar": 1531, "bugNodeLength": 50, "fixLineNum": 45, "fixNodeStartChar": 1531, "fixNodeLength": 42, "sourceBeforeFix": "new DescribeInstances(awsConfig).execute(endpoint)", "sourceAfterFix": "new DescribeInstances(awsConfig).execute()"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "8561cd53e8c439965aa34c89d0e5016f78ca7e89", "fixCommitParentSHA1": "0d97f81ed03fa08795e1168a3f649bbb8dc2fcff", "bugFilePath": "hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java", "fixPatch": "diff --git a/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java b/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java\nindex 2644317..ac573bf 100644\n--- a/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java\n+++ b/hazelcast-cloud/src/main/java/com/hazelcast/aws/AWSClient.java\n@@ -42,12 +42,12 @@\n     }\n \n     public Collection<String> getPrivateIpAddresses() throws Exception {\n-        final Map<String, String> result = new DescribeInstances(awsConfig).execute(endpoint);\n+        final Map<String, String> result = new DescribeInstances(awsConfig).execute();\n         return result.keySet();\n     }\n \n     public Map<String, String> getAddresses() throws Exception {\n-        return new DescribeInstances(awsConfig).execute(endpoint);\n+        return new DescribeInstances(awsConfig).execute();\n     }\n \n     public void setEndpoint(String s) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 50, "bugNodeStartChar": 1702, "bugNodeLength": 50, "fixLineNum": 50, "fixNodeStartChar": 1702, "fixNodeLength": 42, "sourceBeforeFix": "new DescribeInstances(awsConfig).execute(endpoint)", "sourceAfterFix": "new DescribeInstances(awsConfig).execute()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "7611147e9853bd6ae59498335b8fae3d3f5b759b", "fixCommitParentSHA1": "89f2e5654dac48dc60a48e72d526cdc71487aacf", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java\nindex 7bc5007..bf52375 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java\n@@ -219,7 +219,7 @@\n             if (!interrupted && longPolling) {\n                 // no response!\n                 Address target = invocation.getTarget();\n-                if (invocation.nodeEngine.getThisAddress().equals(target)) {\n+                if (invocation.remote && invocation.nodeEngine.getThisAddress().equals(target)) {\n                     // target may change during invocation because of migration!\n                     continue;\n                 }\n@@ -264,7 +264,7 @@\n     }\n \n     private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n-        boolean hasResponse = invocation.pendingResponse == null;\n+        boolean hasResponse = invocation.pendingResponse != null;\n         int backupsExpected = invocation.backupsExpected;\n         int backupsCompleted = invocation.backupsCompleted;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 267, "bugNodeStartChar": 10114, "bugNodeLength": 34, "fixLineNum": 267, "fixNodeStartChar": 10114, "fixNodeLength": 34, "sourceBeforeFix": "invocation.pendingResponse == null", "sourceAfterFix": "invocation.pendingResponse != null"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "9b65f21aa8be862a861b64cb03dee1d9ae9440a6", "fixCommitParentSHA1": "62b84036b89056a0c9b8ac0d61eb25f1b3a954a5", "bugFilePath": "hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java", "fixPatch": "diff --git a/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java b/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java\nindex 89f1836..8a7c8cb 100644\n--- a/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java\n+++ b/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java\n@@ -104,8 +104,7 @@\n      */\n     @Override\n     public ResultSetInfo getResultSetInfo() throws NotSupportedException {\n-        //as per spec 15.11.3\n-        throw new NotSupportedException();\n+        throw new NotSupportedException(\"getResultSetInfo() is not supported by this resource adapter as per spec 15.11.3\");\n     }\n \n     @Override\n@@ -333,12 +332,12 @@\n \n     @Override\n     public LifecycleService getLifecycleService() {\n-        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JEE Container\");\n+        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JCA Container\");\n     }\n \n     @Override\n     public void shutdown() {\n-        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JEE Container\");\n+        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JCA Container\");\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 108, "bugNodeStartChar": 3831, "bugNodeLength": 27, "fixLineNum": 107, "fixNodeStartChar": 3801, "fixNodeLength": 109, "sourceBeforeFix": "new NotSupportedException()", "sourceAfterFix": "new NotSupportedException(\"getResultSetInfo() is not supported by this resource adapter as per spec 15.11.3\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cdc3ec178ca63ba1cb063986cba2c7b78209aa45", "fixCommitParentSHA1": "e0ba13a65722ac712636b5065561fcd5219ecc94", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java b/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\nindex 6b5cc8e..1ad1645 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\n@@ -81,7 +81,7 @@\n     }\n \n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n-        final HazelcastInstance[] instances = new HazelcastInstance[count];\n+        final HazelcastInstance[] instances = new HazelcastInstance[nodeCount];\n         for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 84, "bugNodeStartChar": 3141, "bugNodeLength": 28, "fixLineNum": 84, "fixNodeStartChar": 3141, "fixNodeLength": 32, "sourceBeforeFix": "new HazelcastInstance[count]", "sourceAfterFix": "new HazelcastInstance[nodeCount]"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "e0ba13a65722ac712636b5065561fcd5219ecc94", "fixCommitParentSHA1": "4a5bc808c12a86115abaf793fd11585a1f5a1344", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java b/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\nindex 9ed4a22..6b5cc8e 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\n@@ -82,7 +82,7 @@\n \n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n         final HazelcastInstance[] instances = new HazelcastInstance[count];\n-        for (int i = 0; i < count; i++) {\n+        for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }\n         return instances;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 3195, "bugNodeLength": 9, "fixLineNum": 85, "fixNodeStartChar": 3195, "fixNodeLength": 13, "sourceBeforeFix": "i < count", "sourceAfterFix": "i < nodeCount"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e0ba13a65722ac712636b5065561fcd5219ecc94", "fixCommitParentSHA1": "4a5bc808c12a86115abaf793fd11585a1f5a1344", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java b/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\nindex 9ed4a22..6b5cc8e 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/TestHazelcastInstanceFactory.java\n@@ -82,7 +82,7 @@\n \n     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n         final HazelcastInstance[] instances = new HazelcastInstance[count];\n-        for (int i = 0; i < count; i++) {\n+        for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }\n         return instances;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 3195, "bugNodeLength": 9, "fixLineNum": 85, "fixNodeStartChar": 3195, "fixNodeLength": 13, "sourceBeforeFix": "i < count", "sourceAfterFix": "i < nodeCount"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "fixCommitParentSHA1": "23c8fa6ea06ea514d0009b6cb37f8af245bef892", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\nindex fc1fd62..02c36ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n@@ -72,7 +72,7 @@\n         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n-            out.writeObject(entry.getValue());\n+            out.writeData(entry.getValue());\n         }\n     }\n \n@@ -82,7 +82,7 @@\n         migrationData = new HashMap<String, Data>(mapSize);\n         for (int i = 0; i < mapSize; i++) {\n             String name = in.readUTF();\n-            Data data = in.readObject();\n+            Data data = in.readData();\n             migrationData.put(name, data);\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 75, "bugNodeStartChar": 2595, "bugNodeLength": 33, "fixLineNum": 75, "fixNodeStartChar": 2595, "fixNodeLength": 31, "sourceBeforeFix": "out.writeObject(entry.getValue())", "sourceAfterFix": "out.writeData(entry.getValue())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "fixCommitParentSHA1": "23c8fa6ea06ea514d0009b6cb37f8af245bef892", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\nindex fc1fd62..02c36ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n@@ -72,7 +72,7 @@\n         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n-            out.writeObject(entry.getValue());\n+            out.writeData(entry.getValue());\n         }\n     }\n \n@@ -82,7 +82,7 @@\n         migrationData = new HashMap<String, Data>(mapSize);\n         for (int i = 0; i < mapSize; i++) {\n             String name = in.readUTF();\n-            Data data = in.readObject();\n+            Data data = in.readData();\n             migrationData.put(name, data);\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 75, "bugNodeStartChar": 2595, "bugNodeLength": 33, "fixLineNum": 75, "fixNodeStartChar": 2595, "fixNodeLength": 31, "sourceBeforeFix": "out.writeObject(entry.getValue())", "sourceAfterFix": "out.writeData(entry.getValue())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "fixCommitParentSHA1": "23c8fa6ea06ea514d0009b6cb37f8af245bef892", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\nindex fc1fd62..02c36ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n@@ -72,7 +72,7 @@\n         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n-            out.writeObject(entry.getValue());\n+            out.writeData(entry.getValue());\n         }\n     }\n \n@@ -82,7 +82,7 @@\n         migrationData = new HashMap<String, Data>(mapSize);\n         for (int i = 0; i < mapSize; i++) {\n             String name = in.readUTF();\n-            Data data = in.readObject();\n+            Data data = in.readData();\n             migrationData.put(name, data);\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2938, "bugNodeLength": 15, "fixLineNum": 85, "fixNodeStartChar": 2938, "fixNodeLength": 13, "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "fixCommitParentSHA1": "23c8fa6ea06ea514d0009b6cb37f8af245bef892", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\nindex fc1fd62..02c36ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/atomicreference/operations/AtomicReferenceReplicationOperation.java\n@@ -72,7 +72,7 @@\n         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n-            out.writeObject(entry.getValue());\n+            out.writeData(entry.getValue());\n         }\n     }\n \n@@ -82,7 +82,7 @@\n         migrationData = new HashMap<String, Data>(mapSize);\n         for (int i = 0; i < mapSize; i++) {\n             String name = in.readUTF();\n-            Data data = in.readObject();\n+            Data data = in.readData();\n             migrationData.put(name, data);\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2938, "bugNodeLength": 15, "fixLineNum": 85, "fixNodeStartChar": 2938, "fixNodeLength": 13, "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "9518e6098309042882113ef36bf7d6a5a61d6349", "fixCommitParentSHA1": "a80105b95c9225090e6597d099abb259e67d5872", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java b/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java\nindex 4197872..0b7e868 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java\n@@ -95,7 +95,7 @@\n      */\n     private static class TargetOperation extends AbstractOperation {\n         public void run() throws InterruptedException {\n-            Thread.sleep(5000);\n+            Thread.sleep(10000);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 98, "bugNodeStartChar": 3790, "bugNodeLength": 18, "fixLineNum": 98, "fixNodeStartChar": 3790, "fixNodeLength": 19, "sourceBeforeFix": "Thread.sleep(5000)", "sourceAfterFix": "Thread.sleep(10000)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "85f06101fa691a3391f4dda25c50cbab6814c542", "fixCommitParentSHA1": "84f7a6e4b1b4ae2b008b145e1efee440f3a812d3", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java b/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java\nindex 4197872..0b7e868 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/InvocationTest.java\n@@ -95,7 +95,7 @@\n      */\n     private static class TargetOperation extends AbstractOperation {\n         public void run() throws InterruptedException {\n-            Thread.sleep(5000);\n+            Thread.sleep(10000);\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 98, "bugNodeStartChar": 3790, "bugNodeLength": 18, "fixLineNum": 98, "fixNodeStartChar": 3790, "fixNodeLength": 19, "sourceBeforeFix": "Thread.sleep(5000)", "sourceAfterFix": "Thread.sleep(10000)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "7e00d8df5cbf268a8b13544d2a132f84166fe033", "fixCommitParentSHA1": "3c69ee4ccfbfbef1c3abf8e1fe91d6d79b30c16a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\nindex 5355448..409731d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n@@ -296,12 +296,12 @@\n         for (;;) {\n             long nanos = removeTimeTakenNanos;\n             if (nanos <= Long.MAX_VALUE - duration) {\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n                     return;\n                 }\n             } else {\n                 //counter full. Just reset.\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, duration)) {\n                     clear();\n                     return;\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 299, "bugNodeStartChar": 9941, "bugNodeLength": 61, "fixLineNum": 299, "fixNodeStartChar": 9941, "fixNodeLength": 76, "sourceBeforeFix": "REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)", "sourceAfterFix": "REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7e00d8df5cbf268a8b13544d2a132f84166fe033", "fixCommitParentSHA1": "3c69ee4ccfbfbef1c3abf8e1fe91d6d79b30c16a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\nindex 5355448..409731d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n@@ -296,12 +296,12 @@\n         for (;;) {\n             long nanos = removeTimeTakenNanos;\n             if (nanos <= Long.MAX_VALUE - duration) {\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n                     return;\n                 }\n             } else {\n                 //counter full. Just reset.\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, duration)) {\n                     clear();\n                     return;\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 299, "bugNodeStartChar": 9941, "bugNodeLength": 61, "fixLineNum": 299, "fixNodeStartChar": 9941, "fixNodeLength": 76, "sourceBeforeFix": "REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)", "sourceAfterFix": "REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "7e00d8df5cbf268a8b13544d2a132f84166fe033", "fixCommitParentSHA1": "3c69ee4ccfbfbef1c3abf8e1fe91d6d79b30c16a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\nindex 5355448..409731d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n@@ -296,12 +296,12 @@\n         for (;;) {\n             long nanos = removeTimeTakenNanos;\n             if (nanos <= Long.MAX_VALUE - duration) {\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n                     return;\n                 }\n             } else {\n                 //counter full. Just reset.\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, duration)) {\n                     clear();\n                     return;\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 304, "bugNodeStartChar": 10137, "bugNodeLength": 53, "fixLineNum": 304, "fixNodeStartChar": 10137, "fixNodeLength": 68, "sourceBeforeFix": "REMOVALS_UPDATER.compareAndSet(this,nanos,duration)", "sourceAfterFix": "REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7e00d8df5cbf268a8b13544d2a132f84166fe033", "fixCommitParentSHA1": "3c69ee4ccfbfbef1c3abf8e1fe91d6d79b30c16a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\nindex 5355448..409731d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n@@ -296,12 +296,12 @@\n         for (;;) {\n             long nanos = removeTimeTakenNanos;\n             if (nanos <= Long.MAX_VALUE - duration) {\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, nanos + duration)) {\n                     return;\n                 }\n             } else {\n                 //counter full. Just reset.\n-                if (REMOVALS_UPDATER.compareAndSet(this, nanos, duration)) {\n+                if (REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this, nanos, duration)) {\n                     clear();\n                     return;\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 304, "bugNodeStartChar": 10137, "bugNodeLength": 53, "fixLineNum": 304, "fixNodeStartChar": 10137, "fixNodeLength": 68, "sourceBeforeFix": "REMOVALS_UPDATER.compareAndSet(this,nanos,duration)", "sourceAfterFix": "REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\nindex 858fe22..4c9f1e2 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n@@ -148,7 +148,7 @@\n                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:\n@@ -157,7 +157,7 @@\n             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 151, "bugNodeStartChar": 5310, "bugNodeLength": 52, "fixLineNum": 151, "fixNodeStartChar": 5310, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\nindex 858fe22..4c9f1e2 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n@@ -148,7 +148,7 @@\n                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:\n@@ -157,7 +157,7 @@\n             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 151, "bugNodeStartChar": 5310, "bugNodeLength": 52, "fixLineNum": 151, "fixNodeStartChar": 5310, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\nindex 858fe22..4c9f1e2 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n@@ -148,7 +148,7 @@\n                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:\n@@ -157,7 +157,7 @@\n             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 160, "bugNodeStartChar": 5650, "bugNodeLength": 52, "fixLineNum": 160, "fixNodeStartChar": 5650, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\nindex 858fe22..4c9f1e2 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheEntryProcessorEntry.java\n@@ -148,7 +148,7 @@\n                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:\n@@ -157,7 +157,7 @@\n             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n-                    statistics.addGetTimeNano(System.nanoTime() - start);\n+                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 160, "bugNodeStartChar": 5650, "bugNodeLength": 52, "fixLineNum": 160, "fixNodeStartChar": 5650, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 191, "bugNodeStartChar": 8183, "bugNodeLength": 52, "fixLineNum": 191, "fixNodeStartChar": 8183, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 191, "bugNodeStartChar": 8183, "bugNodeLength": 52, "fixLineNum": 191, "fixNodeStartChar": 8183, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 199, "bugNodeStartChar": 8482, "bugNodeLength": 52, "fixLineNum": 199, "fixNodeStartChar": 8482, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 199, "bugNodeStartChar": 8482, "bugNodeLength": 52, "fixLineNum": 199, "fixNodeStartChar": 8482, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 233, "bugNodeStartChar": 9953, "bugNodeLength": 52, "fixLineNum": 233, "fixNodeStartChar": 9953, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 233, "bugNodeStartChar": 9953, "bugNodeLength": 52, "fixLineNum": 233, "fixNodeStartChar": 9953, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 255, "bugNodeStartChar": 10642, "bugNodeLength": 52, "fixLineNum": 255, "fixNodeStartChar": 10642, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 255, "bugNodeStartChar": 10642, "bugNodeLength": 52, "fixLineNum": 255, "fixNodeStartChar": 10642, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 259, "bugNodeStartChar": 10848, "bugNodeLength": 55, "fixLineNum": 259, "fixNodeStartChar": 10848, "fixNodeLength": 56, "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 259, "bugNodeStartChar": 10848, "bugNodeLength": 55, "fixLineNum": 259, "fixNodeStartChar": 10848, "fixNodeLength": 56, "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 284, "bugNodeStartChar": 11643, "bugNodeLength": 55, "fixLineNum": 284, "fixNodeStartChar": 11643, "fixNodeLength": 56, "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 284, "bugNodeStartChar": 11643, "bugNodeLength": 55, "fixLineNum": 284, "fixNodeStartChar": 11643, "fixNodeLength": 56, "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 318, "bugNodeStartChar": 12877, "bugNodeLength": 55, "fixLineNum": 318, "fixNodeStartChar": 12877, "fixNodeLength": 56, "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 318, "bugNodeStartChar": 12877, "bugNodeLength": 55, "fixLineNum": 318, "fixNodeStartChar": 12877, "fixNodeLength": 56, "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 360, "bugNodeStartChar": 14474, "bugNodeLength": 52, "fixLineNum": 360, "fixNodeStartChar": 14474, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 360, "bugNodeStartChar": 14474, "bugNodeLength": 52, "fixLineNum": 360, "fixNodeStartChar": 14474, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 364, "bugNodeStartChar": 14668, "bugNodeLength": 52, "fixLineNum": 364, "fixNodeStartChar": 14668, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 364, "bugNodeStartChar": 14668, "bugNodeLength": 52, "fixLineNum": 364, "fixNodeStartChar": 14668, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 403, "bugNodeStartChar": 16125, "bugNodeLength": 52, "fixLineNum": 403, "fixNodeStartChar": 16125, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 403, "bugNodeStartChar": 16125, "bugNodeLength": 52, "fixLineNum": 403, "fixNodeStartChar": 16125, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 405, "bugNodeStartChar": 16205, "bugNodeLength": 52, "fixLineNum": 405, "fixNodeStartChar": 16205, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 405, "bugNodeStartChar": 16205, "bugNodeLength": 52, "fixLineNum": 405, "fixNodeStartChar": 16205, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 431, "bugNodeStartChar": 17205, "bugNodeLength": 52, "fixLineNum": 431, "fixNodeStartChar": 17205, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 431, "bugNodeStartChar": 17205, "bugNodeLength": 52, "fixLineNum": 431, "fixNodeStartChar": 17205, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 435, "bugNodeStartChar": 17407, "bugNodeLength": 52, "fixLineNum": 435, "fixNodeStartChar": 17407, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 435, "bugNodeStartChar": 17407, "bugNodeLength": 52, "fixLineNum": 435, "fixNodeStartChar": 17407, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 590, "bugNodeStartChar": 22514, "bugNodeLength": 52, "fixLineNum": 590, "fixNodeStartChar": 22514, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "fixCommitParentSHA1": "1435dad364fb6547de60d6f142211ccd6649bd06", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\nindex f3ece18..3c2b618 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheRecordStore.java\n@@ -188,7 +188,7 @@\n         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {\n@@ -196,7 +196,7 @@\n                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n-                statistics.addGetTimeNano(System.nanoTime() - start);\n+                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }\n@@ -230,7 +230,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n-            statistics.addPutTimeNano(System.nanoTime() - start);\n+            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -252,11 +252,11 @@\n             deleteRecord(key);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCacheRemovals(1);\n-                statistics.addRemoveTimeNano(System.nanoTime() - start);\n+                statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -281,7 +281,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }\n@@ -315,7 +315,7 @@\n         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n-            statistics.addRemoveTimeNano(System.nanoTime() - start);\n+            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {\n@@ -357,11 +357,11 @@\n             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -400,9 +400,9 @@\n         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {\n@@ -428,11 +428,11 @@\n             updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result != null) {\n                 statistics.increaseCacheHits(1);\n                 statistics.increaseCachePuts(1);\n-                statistics.addPutTimeNano(System.nanoTime() - start);\n+                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }\n@@ -587,7 +587,7 @@\n             }\n         }\n         if (isStatisticsEnabled()) {\n-            statistics.addGetTimeNano(System.nanoTime() - start);\n+            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 590, "bugNodeStartChar": 22514, "bugNodeLength": 52, "fixLineNum": 590, "fixNodeStartChar": 22514, "fixNodeLength": 53, "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "fixCommitParentSHA1": "87f3884035085e1b72bd620506cdb8308963a368", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\nindex 338d994..203d223 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n@@ -20,10 +20,10 @@\n @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n-        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n+        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n \n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");\n@@ -39,7 +39,7 @@\n             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n \n-            instances[i].getLifecycleService().shutdown();\n+            instances[i].shutdown();\n \n             semaphore.acquire(rand);\n             initialPermits -= rand;\n@@ -50,7 +50,7 @@\n         }\n     }\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n \n@@ -74,7 +74,7 @@\n         };\n         thread.start();\n \n-        instance2.getLifecycleService().shutdown();\n+        instance2.shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();\n \n@@ -90,7 +90,7 @@\n     }\n \n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 23, "bugNodeStartChar": 765, "bugNodeLength": 15, "fixLineNum": 23, "fixNodeStartChar": 765, "fixNodeLength": 16, "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "fixCommitParentSHA1": "87f3884035085e1b72bd620506cdb8308963a368", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\nindex 338d994..203d223 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n@@ -20,10 +20,10 @@\n @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n-        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n+        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n \n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");\n@@ -39,7 +39,7 @@\n             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n \n-            instances[i].getLifecycleService().shutdown();\n+            instances[i].shutdown();\n \n             semaphore.acquire(rand);\n             initialPermits -= rand;\n@@ -50,7 +50,7 @@\n         }\n     }\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n \n@@ -74,7 +74,7 @@\n         };\n         thread.start();\n \n-        instance2.getLifecycleService().shutdown();\n+        instance2.shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();\n \n@@ -90,7 +90,7 @@\n     }\n \n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 26, "bugNodeStartChar": 889, "bugNodeLength": 77, "fixLineNum": 26, "fixNodeStartChar": 889, "fixNodeLength": 83, "sourceBeforeFix": "0", "sourceAfterFix": "16"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "fixCommitParentSHA1": "87f3884035085e1b72bd620506cdb8308963a368", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\nindex 338d994..203d223 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n@@ -20,10 +20,10 @@\n @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n-        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n+        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n \n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");\n@@ -39,7 +39,7 @@\n             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n \n-            instances[i].getLifecycleService().shutdown();\n+            instances[i].shutdown();\n \n             semaphore.acquire(rand);\n             initialPermits -= rand;\n@@ -50,7 +50,7 @@\n         }\n     }\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n \n@@ -74,7 +74,7 @@\n         };\n         thread.start();\n \n-        instance2.getLifecycleService().shutdown();\n+        instance2.shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();\n \n@@ -90,7 +90,7 @@\n     }\n \n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 53, "bugNodeStartChar": 1944, "bugNodeLength": 15, "fixLineNum": 53, "fixNodeStartChar": 1944, "fixNodeLength": 16, "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "fixCommitParentSHA1": "87f3884035085e1b72bd620506cdb8308963a368", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\nindex 338d994..203d223 100644\n--- a/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/semaphore/AdvancedSemaphoreTest.java\n@@ -20,10 +20,10 @@\n @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n-        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n+        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n \n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");\n@@ -39,7 +39,7 @@\n             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n \n-            instances[i].getLifecycleService().shutdown();\n+            instances[i].shutdown();\n \n             semaphore.acquire(rand);\n             initialPermits -= rand;\n@@ -50,7 +50,7 @@\n         }\n     }\n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);\n \n@@ -74,7 +74,7 @@\n         };\n         thread.start();\n \n-        instance2.getLifecycleService().shutdown();\n+        instance2.shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();\n \n@@ -90,7 +90,7 @@\n     }\n \n \n-    @Test(timeout = 30000)\n+    @Test(timeout = 120000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 93, "bugNodeStartChar": 3345, "bugNodeLength": 15, "fixLineNum": 93, "fixNodeStartChar": 3345, "fixNodeLength": 16, "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "2b33aa6645b04dddf1100d2aa267b0c1600b431d", "fixCommitParentSHA1": "ba2c87463aceb5b1b59391c054a92ebbe907d040", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\nindex 98c2532..d56c5e1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n@@ -281,7 +281,7 @@\n \n     @Override\n     public long getRemainingLeaseTime() {\n-        if (expirationTime == Long.MAX_VALUE && expirationTime < 0) {\n+        if (expirationTime == Long.MAX_VALUE || expirationTime < 0) {\n             return Long.MAX_VALUE;\n         }\n         long now = Clock.currentTimeMillis();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 284, "bugNodeStartChar": 7771, "bugNodeLength": 54, "fixLineNum": 284, "fixNodeStartChar": 7771, "fixNodeLength": 54, "sourceBeforeFix": "expirationTime == Long.MAX_VALUE && expirationTime < 0", "sourceAfterFix": "expirationTime == Long.MAX_VALUE || expirationTime < 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "afe6dc8a16e2bf30997cca8355aad09f2766ea0b", "fixCommitParentSHA1": "4f33d54933d029d4f442757448104f57426bb4f2", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\nindex 98c2532..d56c5e1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/lock/LockResourceImpl.java\n@@ -281,7 +281,7 @@\n \n     @Override\n     public long getRemainingLeaseTime() {\n-        if (expirationTime == Long.MAX_VALUE && expirationTime < 0) {\n+        if (expirationTime == Long.MAX_VALUE || expirationTime < 0) {\n             return Long.MAX_VALUE;\n         }\n         long now = Clock.currentTimeMillis();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 284, "bugNodeStartChar": 7771, "bugNodeLength": 54, "fixLineNum": 284, "fixNodeStartChar": 7771, "fixNodeLength": 54, "sourceBeforeFix": "expirationTime == Long.MAX_VALUE && expirationTime < 0", "sourceAfterFix": "expirationTime == Long.MAX_VALUE || expirationTime < 0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ea595bcf6038931a7e00b89f77695fc02050ce41", "fixCommitParentSHA1": "fb5604886ae3d834a36c02f79cb5f948fe33e398", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java b/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\nindex d9a3e2c..e7c5530 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\n@@ -152,14 +152,14 @@\n             implements StringValueArrayProviderFactory {\n \n         private static long stringValueFieldOffset = -1;\n-        private static sun.misc.Unsafe UNSAFE;\n+        private static sun.misc.Unsafe unsafe;\n \n         static {\n             if (UnsafeHelper.UNSAFE_AVAILABLE) {\n-                UNSAFE = UnsafeHelper.UNSAFE;\n+                unsafe = UnsafeHelper.UNSAFE;\n                 try {\n                     stringValueFieldOffset =\n-                            UNSAFE.objectFieldOffset(String.class.getDeclaredField(\"value\"));\n+                            unsafe.objectFieldOffset(String.class.getDeclaredField(\"value\"));\n                 } catch (Throwable t) {\n \n                 }\n@@ -168,12 +168,12 @@\n \n         @Override\n         public StringValueArrayProvider create(String str) {\n-            return new UnsafeBasedStringCharProvider(UNSAFE, stringValueFieldOffset, str);\n+            return new UnsafeBasedStringCharProvider(unsafe, stringValueFieldOffset, str);\n         }\n \n         @Override\n         public boolean isAvailable() {\n-            return UNSAFE != null && stringValueFieldOffset != -1;\n+            return unsafe != null && stringValueFieldOffset != -1;\n         }\n \n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 171, "bugNodeStartChar": 6404, "bugNodeLength": 70, "fixLineNum": 171, "fixNodeStartChar": 6404, "fixNodeLength": 70, "sourceBeforeFix": "new UnsafeBasedStringCharProvider(UNSAFE,stringValueFieldOffset,str)", "sourceAfterFix": "new UnsafeBasedStringCharProvider(unsafe,stringValueFieldOffset,str)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "978a048b578f8b64513fc7923ed9dbfc4be0b965", "fixCommitParentSHA1": "7c42a9fcceff9411a566b719b68940958ed2e197", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\nindex 1f32e31..90a5a7c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n@@ -49,7 +49,9 @@\n             op.run();\n             op.afterRun();\n         }\n-        getOrCreateContainer().unlock(dataKey, caller, threadId);\n+        // changed to forceUnlock because replica-sync of lock causes problems, same as IMap\n+        // real solution is to make 'lock-and-get' backup-aware\n+        getOrCreateContainer().forceUnlock(dataKey);\n     }\n \n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 1827, "bugNodeLength": 56, "fixLineNum": 54, "fixNodeStartChar": 1984, "fixNodeLength": 43, "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "32f165cbc33d96609efab90bc4967278c975d0ef", "fixCommitParentSHA1": "628c87fca7a0e84580ea92f8ad9e725c8b64e73c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\nindex 0a1ed49..dbb0fe8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n@@ -50,7 +50,9 @@\n             op.run();\n             op.afterRun();\n         }\n-        getOrCreateContainer().unlock(dataKey, caller, threadId);\n+        // changed to forceUnlock because replica-sync of lock causes problems, same as IMap\n+        // real solution is to make 'lock-and-get' backup-aware\n+        getOrCreateContainer().forceUnlock(dataKey);\n     }\n \n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 53, "bugNodeStartChar": 1846, "bugNodeLength": 56, "fixLineNum": 55, "fixNodeStartChar": 2003, "fixNodeLength": 43, "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e99aac5890b67ae0705b0e970f657239ee9ee1ab", "fixCommitParentSHA1": "624b7e05d70307ae2881d55c81a707723f377a8b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\nindex 0a1ed49..dbb0fe8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n@@ -50,7 +50,9 @@\n             op.run();\n             op.afterRun();\n         }\n-        getOrCreateContainer().unlock(dataKey, caller, threadId);\n+        // changed to forceUnlock because replica-sync of lock causes problems, same as IMap\n+        // real solution is to make 'lock-and-get' backup-aware\n+        getOrCreateContainer().forceUnlock(dataKey);\n     }\n \n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 53, "bugNodeStartChar": 1846, "bugNodeLength": 56, "fixLineNum": 55, "fixNodeStartChar": 2003, "fixNodeLength": 43, "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "20f1014985fa5af16ab7b19248f0b0afcbd00f5c", "fixCommitParentSHA1": "10773b4cd855bdfd84ea80d22b8ed3c977459444", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\nindex 0a1ed49..dbb0fe8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n@@ -50,7 +50,9 @@\n             op.run();\n             op.afterRun();\n         }\n-        getOrCreateContainer().unlock(dataKey, caller, threadId);\n+        // changed to forceUnlock because replica-sync of lock causes problems, same as IMap\n+        // real solution is to make 'lock-and-get' backup-aware\n+        getOrCreateContainer().forceUnlock(dataKey);\n     }\n \n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 53, "bugNodeStartChar": 1846, "bugNodeLength": 56, "fixLineNum": 55, "fixNodeStartChar": 2003, "fixNodeLength": 43, "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "28cabcde96679f2e2f29ad56983f2e51d5b838cd", "fixCommitParentSHA1": "b91cffdd86944eef7e66c180ee13aad222d8381a", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\nindex ce81b72..cf10c7e 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n@@ -1391,7 +1391,7 @@\n         MapConfig writeBehindBackupConfig = config.getMapConfig(name);\n         MapStoreConfig mapStoreConfig = new MapStoreConfig();\n         mapStoreConfig.setWriteDelaySeconds(5);\n-        final MapStoreWithStoreCount mapStore = new MapStoreWithStoreCount(expectedStoreCount, 300, 100);\n+        final MapStoreWithStoreCount mapStore = new MapStoreWithStoreCount(expectedStoreCount, 300, 50);\n         mapStoreConfig.setImplementation(mapStore);\n         writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);\n         // create nodes.\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1394, "bugNodeStartChar": 55720, "bugNodeLength": 56, "fixLineNum": 1394, "fixNodeStartChar": 55720, "fixNodeLength": 55, "sourceBeforeFix": "new MapStoreWithStoreCount(expectedStoreCount,300,100)", "sourceAfterFix": "new MapStoreWithStoreCount(expectedStoreCount,300,50)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "fixCommitParentSHA1": "00dcbee120848b1a2cd84ce3f62ed71e8282e43b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java b/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java\nindex 1d296a2..5761963 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java\n@@ -22,12 +22,12 @@\n \n     protected Data value;\n \n-    public DataRecord(Data keyData, Data value) {\n+    DataRecord(Data keyData, Data value) {\n         super(keyData);\n         this.value = value;\n     }\n \n-    public DataRecord() {\n+    DataRecord() {\n     }\n \n     /*\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 25, "bugNodeStartChar": 788, "bugNodeLength": 103, "fixLineNum": 25, "fixNodeStartChar": 788, "fixNodeLength": 96, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "fixCommitParentSHA1": "00dcbee120848b1a2cd84ce3f62ed71e8282e43b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java b/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java\nindex 1d296a2..5761963 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/record/DataRecord.java\n@@ -22,12 +22,12 @@\n \n     protected Data value;\n \n-    public DataRecord(Data keyData, Data value) {\n+    DataRecord(Data keyData, Data value) {\n         super(keyData);\n         this.value = value;\n     }\n \n-    public DataRecord() {\n+    DataRecord() {\n     }\n \n     /*\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 30, "bugNodeStartChar": 897, "bugNodeLength": 27, "fixLineNum": 30, "fixNodeStartChar": 897, "fixNodeLength": 20, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "fixCommitParentSHA1": "00dcbee120848b1a2cd84ce3f62ed71e8282e43b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/record/DataRecordWithStats.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/record/DataRecordWithStats.java b/hazelcast/src/main/java/com/hazelcast/map/record/DataRecordWithStats.java\nindex 7df635f..33d038c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/record/DataRecordWithStats.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/record/DataRecordWithStats.java\n@@ -22,7 +22,7 @@\n \n     protected Data value;\n \n-    public DataRecordWithStats(Data keyData, Data value) {\n+    DataRecordWithStats(Data keyData, Data value) {\n         super(keyData);\n         this.value = value;\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 25, "bugNodeStartChar": 806, "bugNodeLength": 112, "fixLineNum": 25, "fixNodeStartChar": 806, "fixNodeLength": 105, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "fixCommitParentSHA1": "00dcbee120848b1a2cd84ce3f62ed71e8282e43b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java b/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java\nindex 4123557..3bc66f3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java\n@@ -22,10 +22,10 @@\n \n     private Object value;\n \n-    public ObjectRecord() {\n+    ObjectRecord() {\n     }\n \n-    public ObjectRecord(Data key, Object value) {\n+    ObjectRecord(Data key, Object value) {\n         super(key);\n         this.value = value;\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 25, "bugNodeStartChar": 818, "bugNodeLength": 29, "fixLineNum": 25, "fixNodeStartChar": 818, "fixNodeLength": 22, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "fixCommitParentSHA1": "00dcbee120848b1a2cd84ce3f62ed71e8282e43b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java b/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java\nindex 4123557..3bc66f3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecord.java\n@@ -22,10 +22,10 @@\n \n     private Object value;\n \n-    public ObjectRecord() {\n+    ObjectRecord() {\n     }\n \n-    public ObjectRecord(Data key, Object value) {\n+    ObjectRecord(Data key, Object value) {\n         super(key);\n         this.value = value;\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 28, "bugNodeStartChar": 853, "bugNodeLength": 99, "fixLineNum": 28, "fixNodeStartChar": 853, "fixNodeLength": 92, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e7bf782a17d5972a02f3f196bd72442175881f22", "fixCommitParentSHA1": "b7959f2303f2908cf1d7c7dda22377f8bc1fa208", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheRemoveBackupOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheRemoveBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheRemoveBackupOperation.java\nindex aa9d675..c0db5dc 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheRemoveBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CacheRemoveBackupOperation.java\n@@ -38,7 +38,7 @@\n     public void run()\n             throws Exception {\n         if (cache != null) {\n-            response = cache.remove(key, null);\n+            response = cache.removeRecord(key);\n         } else {\n             response = Boolean.FALSE;\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 41, "bugNodeStartChar": 1238, "bugNodeLength": 23, "fixLineNum": 41, "fixNodeStartChar": 1238, "fixNodeLength": 23, "sourceBeforeFix": "cache.remove(key,null)", "sourceAfterFix": "cache.removeRecord(key)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "fixCommitParentSHA1": "18cedf2d609b2a721f5bbc8c4c8fab2fe875d5fb", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex c3e1c82..6883615 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -742,7 +742,7 @@\n                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n-                getClusterMap().put(buildAttributeName(name), value);\n+                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }\n \n@@ -828,7 +828,7 @@\n                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n-                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n+                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 745, "bugNodeStartChar": 30885, "bugNodeLength": 52, "fixLineNum": 745, "fixNodeStartChar": 30885, "fixNodeLength": 52, "sourceBeforeFix": "getClusterMap().put(buildAttributeName(name),value)", "sourceAfterFix": "getClusterMap().set(buildAttributeName(name),value)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "fixCommitParentSHA1": "18cedf2d609b2a721f5bbc8c4c8fab2fe875d5fb", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex c3e1c82..6883615 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -742,7 +742,7 @@\n                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n-                getClusterMap().put(buildAttributeName(name), value);\n+                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }\n \n@@ -828,7 +828,7 @@\n                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n-                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n+                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 745, "bugNodeStartChar": 30885, "bugNodeLength": 52, "fixLineNum": 745, "fixNodeStartChar": 30885, "fixNodeLength": 52, "sourceBeforeFix": "getClusterMap().put(buildAttributeName(name),value)", "sourceAfterFix": "getClusterMap().set(buildAttributeName(name),value)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "fixCommitParentSHA1": "18cedf2d609b2a721f5bbc8c4c8fab2fe875d5fb", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex c3e1c82..6883615 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -742,7 +742,7 @@\n                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n-                getClusterMap().put(buildAttributeName(name), value);\n+                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }\n \n@@ -828,7 +828,7 @@\n                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n-                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n+                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 831, "bugNodeStartChar": 34046, "bugNodeLength": 68, "fixLineNum": 831, "fixNodeStartChar": 34046, "fixNodeLength": 68, "sourceBeforeFix": "clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)", "sourceAfterFix": "clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "fixCommitParentSHA1": "18cedf2d609b2a721f5bbc8c4c8fab2fe875d5fb", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex c3e1c82..6883615 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -742,7 +742,7 @@\n                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n-                getClusterMap().put(buildAttributeName(name), value);\n+                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }\n \n@@ -828,7 +828,7 @@\n                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n-                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n+                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 831, "bugNodeStartChar": 34046, "bugNodeLength": 68, "fixLineNum": 831, "fixNodeStartChar": 34046, "fixNodeLength": 68, "sourceBeforeFix": "clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)", "sourceAfterFix": "clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "38782cdd828011b64db92c95bb231e80a303c28b", "fixCommitParentSHA1": "7610f4fe77c40cd68f4b9fd16256b790aa7024e5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java b/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java\nindex 6e1b489..926b20d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java\n@@ -52,7 +52,7 @@\n     }\n \n     public boolean setCount(String name, int count) {\n-        if (count <= 0) {\n+        if (count < 0) {\n             latches.remove(name);\n             return false;\n         } else {\n@@ -66,7 +66,7 @@\n     }\n \n     public void setCountDirect(String name, int count) {\n-        if (count <= 0) {\n+        if (count < 0) {\n             latches.remove(name);\n         } else {\n             CountDownLatchInfo latch = latches.get(name);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 55, "bugNodeStartChar": 2064, "bugNodeLength": 10, "fixLineNum": 55, "fixNodeStartChar": 2064, "fixNodeLength": 9, "sourceBeforeFix": "count <= 0", "sourceAfterFix": "count < 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "38782cdd828011b64db92c95bb231e80a303c28b", "fixCommitParentSHA1": "7610f4fe77c40cd68f4b9fd16256b790aa7024e5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java b/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java\nindex 6e1b489..926b20d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/concurrent/countdownlatch/CountDownLatchService.java\n@@ -52,7 +52,7 @@\n     }\n \n     public boolean setCount(String name, int count) {\n-        if (count <= 0) {\n+        if (count < 0) {\n             latches.remove(name);\n             return false;\n         } else {\n@@ -66,7 +66,7 @@\n     }\n \n     public void setCountDirect(String name, int count) {\n-        if (count <= 0) {\n+        if (count < 0) {\n             latches.remove(name);\n         } else {\n             CountDownLatchInfo latch = latches.get(name);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 69, "bugNodeStartChar": 2484, "bugNodeLength": 10, "fixLineNum": 69, "fixNodeStartChar": 2484, "fixNodeLength": 9, "sourceBeforeFix": "count <= 0", "sourceAfterFix": "count < 0"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "e013db0d019952fb54d35a42cb786c8ebb962711", "fixCommitParentSHA1": "59101aa55fd974c1edc8100b424c001864118ed2", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/HealthMonitor.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/HealthMonitor.java b/hazelcast/src/main/java/com/hazelcast/util/HealthMonitor.java\nindex 6cdb403..96c2e38 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/HealthMonitor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/HealthMonitor.java\n@@ -277,7 +277,7 @@\n         }\n     }\n \n-    private final class GcMetrics {\n+    private static final class GcMetrics {\n         final long minorCount;\n         final long minorTime;\n         final long majorCount;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 280, "bugNodeStartChar": 14159, "bugNodeLength": 1480, "fixLineNum": 280, "fixNodeStartChar": 14159, "fixNodeLength": 1487, "sourceBeforeFix": "18", "sourceAfterFix": "26"}, {"bugType": "DELETE_THROWS_EXCEPTION", "fixCommitSHA1": "d43446d30101b7ffb930410311167e8e1a396071", "fixCommitParentSHA1": "2df2091f550c47db4a4dafb1abf4aeaede233daa", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/core/ICountDownLatch.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/core/ICountDownLatch.java b/hazelcast/src/main/java/com/hazelcast/core/ICountDownLatch.java\nindex 2aed349..b2b9430 100644\n--- a/hazelcast/src/main/java/com/hazelcast/core/ICountDownLatch.java\n+++ b/hazelcast/src/main/java/com/hazelcast/core/ICountDownLatch.java\n@@ -118,6 +118,6 @@\n      *         count is not zero\n      * @throws IllegalArgumentException if {@code count} is negative\n      */\n-    boolean trySetCount(int count) throws IllegalArgumentException;\n+    boolean trySetCount(int count);\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 111, "bugNodeStartChar": 4391, "bugNodeLength": 575, "fixLineNum": 111, "fixNodeStartChar": 4391, "fixNodeLength": 543, "sourceBeforeFix": "0", "sourceAfterFix": "0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "100b094aeabeda76bb5d69e3e279727147e7443e", "fixCommitParentSHA1": "6ef74d139b7be8d392d9375ff1c8a55ef0e44f50", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\nindex 91eefc9..8be999c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n@@ -1293,7 +1293,7 @@\n         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n-        instance2.getLifecycleService().terminate();\n+        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1296, "bugNodeStartChar": 52067, "bugNodeLength": 43, "fixLineNum": 1296, "fixNodeStartChar": 52067, "fixNodeLength": 42, "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "100b094aeabeda76bb5d69e3e279727147e7443e", "fixCommitParentSHA1": "6ef74d139b7be8d392d9375ff1c8a55ef0e44f50", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\nindex 91eefc9..8be999c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n@@ -1293,7 +1293,7 @@\n         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n-        instance2.getLifecycleService().terminate();\n+        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1296, "bugNodeStartChar": 52067, "bugNodeLength": 43, "fixLineNum": 1296, "fixNodeStartChar": 52067, "fixNodeLength": 42, "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "4386fa36b154102760ddf440bbbeb4790de65d52", "fixCommitParentSHA1": "75ec3cb5382e06ea4f8e0920f75ea4afe73d7b37", "bugFilePath": "hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java", "fixPatch": "diff --git a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\nindex 65d8824..23a25ee 100644\n--- a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n+++ b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n@@ -310,7 +310,7 @@\n         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n \n-        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n+        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }\n \n //    @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 313, "bugNodeStartChar": 13837, "bugNodeLength": 60, "fixLineNum": 313, "fixNodeStartChar": 13837, "fixNodeLength": 59, "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "4386fa36b154102760ddf440bbbeb4790de65d52", "fixCommitParentSHA1": "75ec3cb5382e06ea4f8e0920f75ea4afe73d7b37", "bugFilePath": "hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java", "fixPatch": "diff --git a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\nindex 65d8824..23a25ee 100644\n--- a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n+++ b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n@@ -310,7 +310,7 @@\n         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n \n-        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n+        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }\n \n //    @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 313, "bugNodeStartChar": 13837, "bugNodeLength": 60, "fixLineNum": 313, "fixNodeStartChar": 13837, "fixNodeLength": 59, "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e530010502964b1815d5dbf9733a248f5e1bc4e1", "fixCommitParentSHA1": "b44b60a6191a06c67c81f11de3b9dac9f7b64244", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\nindex 91eefc9..8be999c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n@@ -1293,7 +1293,7 @@\n         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n-        instance2.getLifecycleService().terminate();\n+        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1296, "bugNodeStartChar": 52067, "bugNodeLength": 43, "fixLineNum": 1296, "fixNodeStartChar": 52067, "fixNodeLength": 42, "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e530010502964b1815d5dbf9733a248f5e1bc4e1", "fixCommitParentSHA1": "b44b60a6191a06c67c81f11de3b9dac9f7b64244", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\nindex 91eefc9..8be999c 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/mapstore/MapStoreTest.java\n@@ -1293,7 +1293,7 @@\n         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n-        instance2.getLifecycleService().terminate();\n+        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1296, "bugNodeStartChar": 52067, "bugNodeLength": 43, "fixLineNum": 1296, "fixNodeStartChar": 52067, "fixNodeLength": 42, "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d97984fe97b0374bc9b4ba271b5aaab08e256fe6", "fixCommitParentSHA1": "268a7290e8e1029e51e7719f7429170a11b6207f", "bugFilePath": "hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java", "fixPatch": "diff --git a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\nindex 5d88a0e..c9b4a30 100644\n--- a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n+++ b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n@@ -313,7 +313,7 @@\n         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n \n-        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n+        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }\n \n //    @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 316, "bugNodeStartChar": 13905, "bugNodeLength": 60, "fixLineNum": 316, "fixNodeStartChar": 13905, "fixNodeLength": 59, "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d97984fe97b0374bc9b4ba271b5aaab08e256fe6", "fixCommitParentSHA1": "268a7290e8e1029e51e7719f7429170a11b6207f", "bugFilePath": "hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java", "fixPatch": "diff --git a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\nindex 5d88a0e..c9b4a30 100644\n--- a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n+++ b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n@@ -313,7 +313,7 @@\n         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n \n-        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n+        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }\n \n //    @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 316, "bugNodeStartChar": 13905, "bugNodeLength": 60, "fixLineNum": 316, "fixNodeStartChar": 13905, "fixNodeLength": 59, "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c701c832f4baffa635088b8e3e57a900eda2aba6", "fixCommitParentSHA1": "d8242863354b1e251caeae82a44183e4c684e5c5", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java\nindex 86269ab..2d7f192 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java\n@@ -417,7 +417,7 @@\n         }\n         private boolean hasRegistrations(String topic) {\n             Collection<Registration> topicRegistrations = registrations.get(topic);\n-            return !(topicRegistrations == null && topicRegistrations.isEmpty());\n+            return !(topicRegistrations == null || topicRegistrations.isEmpty());\n         }\n \n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 420, "bugNodeStartChar": 17817, "bugNodeLength": 58, "fixLineNum": 420, "fixNodeStartChar": 17817, "fixNodeLength": 58, "sourceBeforeFix": "topicRegistrations == null && topicRegistrations.isEmpty()", "sourceAfterFix": "topicRegistrations == null || topicRegistrations.isEmpty()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "7cb7e88237bb1d551d579bc203e2dd0ccc51ce03", "fixCommitParentSHA1": "c5cdf848e531e27fa50586964e6092bd65b6fc93", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java\nindex 86269ab..2d7f192 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/EventServiceImpl.java\n@@ -417,7 +417,7 @@\n         }\n         private boolean hasRegistrations(String topic) {\n             Collection<Registration> topicRegistrations = registrations.get(topic);\n-            return !(topicRegistrations == null && topicRegistrations.isEmpty());\n+            return !(topicRegistrations == null || topicRegistrations.isEmpty());\n         }\n \n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 420, "bugNodeStartChar": 17817, "bugNodeLength": 58, "fixLineNum": 420, "fixNodeStartChar": 17817, "fixNodeLength": 58, "sourceBeforeFix": "topicRegistrations == null && topicRegistrations.isEmpty()", "sourceAfterFix": "topicRegistrations == null || topicRegistrations.isEmpty()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "1cb5e189b07a4808608b4c968273798035be5989", "fixCommitParentSHA1": "40070230c30cc17d076934cf6c4ec0fe68ea84a4", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex 2a569af..e935d41 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -508,7 +508,7 @@\n                 }\n             }\n         }\n-        if (keys.isEmpty()) {\n+        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 511, "bugNodeStartChar": 19900, "bugNodeLength": 14, "fixLineNum": 511, "fixNodeStartChar": 19900, "fixNodeLength": 16, "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1cb5e189b07a4808608b4c968273798035be5989", "fixCommitParentSHA1": "40070230c30cc17d076934cf6c4ec0fe68ea84a4", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex 2a569af..e935d41 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -508,7 +508,7 @@\n                 }\n             }\n         }\n-        if (keys.isEmpty()) {\n+        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 511, "bugNodeStartChar": 19900, "bugNodeLength": 14, "fixLineNum": 511, "fixNodeStartChar": 19900, "fixNodeLength": 16, "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "8d14f34eae4cd9efdd00e7db91785935779087b0", "fixCommitParentSHA1": "3be9d962d2f92f88e675591fa5f1946f950cfcae", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex 1ee1b7c..3e10c93 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -602,7 +602,7 @@\n                 }\n             }\n         }\n-        if (keys.isEmpty()) {\n+        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 605, "bugNodeStartChar": 23077, "bugNodeLength": 14, "fixLineNum": 605, "fixNodeStartChar": 23077, "fixNodeLength": 16, "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8d14f34eae4cd9efdd00e7db91785935779087b0", "fixCommitParentSHA1": "3be9d962d2f92f88e675591fa5f1946f950cfcae", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex 1ee1b7c..3e10c93 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -602,7 +602,7 @@\n                 }\n             }\n         }\n-        if (keys.isEmpty()) {\n+        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 605, "bugNodeStartChar": 23077, "bugNodeLength": 14, "fixLineNum": 605, "fixNodeStartChar": 23077, "fixNodeLength": 16, "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "ee9817dbd92495886965eeecd65325e09a78d5fc", "fixCommitParentSHA1": "ded725c0a2cb7aeb3e97f0bf077153f80a4208e7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/MultipleEntryOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/MultipleEntryOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/MultipleEntryOperation.java\nindex a030979..46cb965 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/MultipleEntryOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/MultipleEntryOperation.java\n@@ -116,7 +116,7 @@\n                            EntryEventType eventType) {\n         final String mapName = name;\n         final MapServiceContext mapServiceContext = getMapServiceContext();\n-        if (mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n+        if (!mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n             return;\n         }\n         final Data oldValue = mapServiceContext.toData(valueBeforeProcess);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 119, "bugNodeStartChar": 5070, "bugNodeLength": 48, "fixLineNum": 119, "fixNodeStartChar": 5070, "fixNodeLength": 49, "sourceBeforeFix": "mapServiceContext.hasRegisteredListener(mapName)", "sourceAfterFix": "!mapServiceContext.hasRegisteredListener(mapName)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "ee9817dbd92495886965eeecd65325e09a78d5fc", "fixCommitParentSHA1": "ded725c0a2cb7aeb3e97f0bf077153f80a4208e7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/PartitionWideEntryOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/PartitionWideEntryOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/PartitionWideEntryOperation.java\nindex fb7f184..20cc279 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/PartitionWideEntryOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/PartitionWideEntryOperation.java\n@@ -132,7 +132,7 @@\n                            Object valueAfterProcess, EntryEventType eventType) {\n         final String mapName = name;\n         final MapServiceContext mapServiceContext = getMapServiceContext();\n-        if (mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n+        if (!mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n             return;\n         }\n         final Data oldValue = mapServiceContext.toData(valueBeforeProcess);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 135, "bugNodeStartChar": 5912, "bugNodeLength": 48, "fixLineNum": 135, "fixNodeStartChar": 5912, "fixNodeLength": 49, "sourceBeforeFix": "mapServiceContext.hasRegisteredListener(mapName)", "sourceAfterFix": "!mapServiceContext.hasRegisteredListener(mapName)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "d0d65aa1c8bf54b797318ab87e83b64159181d35", "fixCommitParentSHA1": "a8d612ab196b81ed2754ce27df22c2f4a8f1299b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStoreLoader.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStoreLoader.java b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStoreLoader.java\nindex b8d3f82..531e8f6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStoreLoader.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStoreLoader.java\n@@ -168,7 +168,7 @@\n         if (entries == null || entries.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        final List<Data> keyValueSequence = new ArrayList<Data>();\n+        final List<Data> keyValueSequence = new ArrayList<Data>(entries.size());\n         for (final Map.Entry<Object, Object> entry : entries.entrySet()) {\n             final Object key = entry.getKey();\n             final Object value = entry.getValue();\n@@ -268,7 +268,7 @@\n     }\n \n     private void doChunkedLoad(Map<Data, Object> loadedKeys, NodeEngine nodeEngine) {\n-        final int mapLoadChunkSize = nodeEngine.getGroupProperties().MAP_LOAD_CHUNK_SIZE.getInteger();\n+        final int mapLoadChunkSize = getLoadBatchSize();\n         final Queue<Map> chunks = new LinkedList<Map>();\n         Map<Data, Object> partitionKeys = new HashMap<Data, Object>();\n         Iterator<Map.Entry<Data, Object>> iterator = loadedKeys.entrySet().iterator();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 171, "bugNodeStartChar": 5901, "bugNodeLength": 21, "fixLineNum": 171, "fixNodeStartChar": 5901, "fixNodeLength": 35, "sourceBeforeFix": "new ArrayList<Data>()", "sourceAfterFix": "new ArrayList<Data>(entries.size())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "fixCommitParentSHA1": "5f73be1a21973f740dc87efe332f45e0c5bad7d1", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex 08eaa16..b34677a 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -546,7 +546,7 @@\n         if (keys.isEmpty()) {\n             return;\n         }\n-        final Collection<Data> dataKeys = convertKeysToData(keys);\n+        final List<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }\n@@ -555,7 +555,7 @@\n     }\n \n     // todo duplicate code.\n-    private <K> Collection<Data> convertKeysToData(Set<K> keys) {\n+    private <K> List<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 549, "bugNodeStartChar": 21057, "bugNodeLength": 16, "fixLineNum": 549, "fixNodeStartChar": 21057, "fixNodeLength": 10, "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "fixCommitParentSHA1": "5f73be1a21973f740dc87efe332f45e0c5bad7d1", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex 08eaa16..b34677a 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -546,7 +546,7 @@\n         if (keys.isEmpty()) {\n             return;\n         }\n-        final Collection<Data> dataKeys = convertKeysToData(keys);\n+        final List<Data> dataKeys = convertKeysToData(keys);\n         if (replaceExistingValues) {\n             invalidateNearCache(dataKeys);\n         }\n@@ -555,7 +555,7 @@\n     }\n \n     // todo duplicate code.\n-    private <K> Collection<Data> convertKeysToData(Set<K> keys) {\n+    private <K> List<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 558, "bugNodeStartChar": 21392, "bugNodeLength": 16, "fixLineNum": 558, "fixNodeStartChar": 21392, "fixNodeLength": 10, "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "cffa2d9c2a33800708e8835ac6be9ccdbcfdc7ae", "fixCommitParentSHA1": "6011c8baf644ce8d0fa8c670d4806740267efefb", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\nindex 87bf583..776f804 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/connection/nio/ClientConnectionManagerImpl.java\n@@ -91,7 +91,7 @@\n \n public class ClientConnectionManagerImpl extends MembershipAdapter implements ClientConnectionManager, MembershipListener {\n \n-    static final int BUFFER_SIZE = 16 << 10;\n+    static final int BUFFER_SIZE = 32 << 10;\n     // 32k\n \n     static final int KILO_BYTE = 1024;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 94, "bugNodeStartChar": 4175, "bugNodeLength": 8, "fixLineNum": 94, "fixNodeStartChar": 4175, "fixNodeLength": 8, "sourceBeforeFix": "16 << 10", "sourceAfterFix": "32 << 10"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ee2feaf9a6c87f753e3e4e6be46752d21494bda3", "fixCommitParentSHA1": "c5788100c7496b9736a3df88e7bbfe64367665c7", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/serialization/SerializationContextImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/serialization/SerializationContextImpl.java b/hazelcast/src/main/java/com/hazelcast/nio/serialization/SerializationContextImpl.java\nindex 9293dcc..12725d3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/serialization/SerializationContextImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/serialization/SerializationContextImpl.java\n@@ -183,7 +183,7 @@\n     }\n \n     static long combineToLong(int x, int y) {\n-        return ((long) x << 32) | ((long) y & 0xFFFFFFFL);\n+        return ((long) x << 32) | ((long) y & 0xFFFFFFFFL);\n     }\n \n     static int extractInt(long value, boolean lowerBits) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 186, "bugNodeStartChar": 7382, "bugNodeLength": 21, "fixLineNum": 186, "fixNodeStartChar": 7382, "fixNodeLength": 22, "sourceBeforeFix": "(long)y & 0xFFFFFFFL", "sourceAfterFix": "(long)y & 0xFFFFFFFFL"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "0c76b564cffde70b893bc9135c0acc03fcbe69ee", "fixCommitParentSHA1": "68229464a87177569351d174b827a6502caec9fc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/ByteUtil.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/ByteUtil.java b/hazelcast/src/main/java/com/hazelcast/util/ByteUtil.java\nindex d195b84..2233cae 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/ByteUtil.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/ByteUtil.java\n@@ -131,7 +131,7 @@\n     }\n \n     public static long combineToLong(int x, int y) {\n-        return ((long) x << 32) | ((long) y & 0xFFFFFFFL);\n+        return ((long) x << 32) | ((long) y & 0xFFFFFFFFL);\n     }\n \n     public static int extractInt(long value, boolean lowerBits) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 134, "bugNodeStartChar": 4038, "bugNodeLength": 21, "fixLineNum": 134, "fixNodeStartChar": 4038, "fixNodeLength": 22, "sourceBeforeFix": "(long)y & 0xFFFFFFFL", "sourceAfterFix": "(long)y & 0xFFFFFFFFL"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "30b97b0595f6fd31ca129306da3e1f266b3e7681", "fixCommitParentSHA1": "8aa463a16007637832f632e4ce8813c946890e88", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/BasicOperationService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicOperationService.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicOperationService.java\nindex 5c7968b..800e71d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicOperationService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicOperationService.java\n@@ -95,7 +95,7 @@\n final class BasicOperationService implements InternalOperationService {\n \n     private static final int INITIAL_CAPACITY = 1000;\n-    private static final float LOAD_FACTOR = 1000;\n+    private static final float LOAD_FACTOR = 0.75f;\n     private static final long SLEEP_TIME = 100;\n     private static final int TRY_COUNT = 10;\n     private static final long TRY_PAUSE_MILLIS = 300;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 98, "bugNodeStartChar": 4406, "bugNodeLength": 18, "fixLineNum": 98, "fixNodeStartChar": 4406, "fixNodeLength": 19, "sourceBeforeFix": "LOAD_FACTOR=1000", "sourceAfterFix": "LOAD_FACTOR=0.75f"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "04a9a6c7b384192c93813053ba1a2e102f2bdf74", "fixCommitParentSHA1": "85c5d2affc7d22925038146d95038b70d3db2049", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java b/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java\nindex 22ee8a9..75ea459 100644\n--- a/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java\n+++ b/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java\n@@ -107,7 +107,7 @@\n         try {\n             Getter parent = null;\n             List<String> possibleMethodNames = new ArrayList<String>(INITIAL_CAPACITY);\n-            for (final String name : attribute.split(\"\\\\.\")) {\n+            for (final String name : paramAttribute.split(\"\\\\.\")) {\n                 Getter localGetter = null;\n                 possibleMethodNames.clear();\n                 possibleMethodNames.add(name);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 4188, "bugNodeLength": 22, "fixLineNum": 110, "fixNodeStartChar": 4188, "fixNodeLength": 27, "sourceBeforeFix": "attribute.split(\"\\\\.\")", "sourceAfterFix": "paramAttribute.split(\"\\\\.\")"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "04a9a6c7b384192c93813053ba1a2e102f2bdf74", "fixCommitParentSHA1": "85c5d2affc7d22925038146d95038b70d3db2049", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java b/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java\nindex 22ee8a9..75ea459 100644\n--- a/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java\n+++ b/hazelcast/src/main/java/com/hazelcast/query/impl/ReflectionHelper.java\n@@ -107,7 +107,7 @@\n         try {\n             Getter parent = null;\n             List<String> possibleMethodNames = new ArrayList<String>(INITIAL_CAPACITY);\n-            for (final String name : attribute.split(\"\\\\.\")) {\n+            for (final String name : paramAttribute.split(\"\\\\.\")) {\n                 Getter localGetter = null;\n                 possibleMethodNames.clear();\n                 possibleMethodNames.add(name);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 4188, "bugNodeLength": 22, "fixLineNum": 110, "fixNodeStartChar": 4188, "fixNodeLength": 27, "sourceBeforeFix": "attribute.split(\"\\\\.\")", "sourceAfterFix": "paramAttribute.split(\"\\\\.\")"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "35ae055794f875bdf3f4e54605ee1ca4daac028a", "fixCommitParentSHA1": "4741fe28f237cec8d38f687d5a3eb1fc5b179706", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java b/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java\nindex 946dd59..f4d2d2f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java\n@@ -128,7 +128,7 @@\n \n     public PortableFactory createFactory() {\n         return new PortableFactory() {\n-            final ConstructorFunction<Integer, Portable>[] constructors = new ConstructorFunction[EVICT_ALL + 1];\n+            final ConstructorFunction<Integer, Portable>[] constructors = new ConstructorFunction[IS_EMPTY + 1];\n \n             {\n                 constructors[GET] = new ConstructorFunction<Integer, Portable>() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 131, "bugNodeStartChar": 5949, "bugNodeLength": 13, "fixLineNum": 131, "fixNodeStartChar": 5949, "fixNodeLength": 12, "sourceBeforeFix": "EVICT_ALL + 1", "sourceAfterFix": "IS_EMPTY + 1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "35ae055794f875bdf3f4e54605ee1ca4daac028a", "fixCommitParentSHA1": "4741fe28f237cec8d38f687d5a3eb1fc5b179706", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java b/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java\nindex 946dd59..f4d2d2f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapPortableHook.java\n@@ -128,7 +128,7 @@\n \n     public PortableFactory createFactory() {\n         return new PortableFactory() {\n-            final ConstructorFunction<Integer, Portable>[] constructors = new ConstructorFunction[EVICT_ALL + 1];\n+            final ConstructorFunction<Integer, Portable>[] constructors = new ConstructorFunction[IS_EMPTY + 1];\n \n             {\n                 constructors[GET] = new ConstructorFunction<Integer, Portable>() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 131, "bugNodeStartChar": 5949, "bugNodeLength": 13, "fixLineNum": 131, "fixNodeStartChar": 5949, "fixNodeLength": 12, "sourceBeforeFix": "EVICT_ALL + 1", "sourceAfterFix": "IS_EMPTY + 1"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "cf66836208a0532253d602721b3279db0b3e457d", "fixCommitParentSHA1": "c2ef444d97e9948cfc8425a11ea2f0434c3f16a0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\nindex b9c26af..4546714 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n@@ -52,7 +52,7 @@\n         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n-        newConfig.setBackupCount(mapConfig.getTotalBackupCount());\n+        newConfig.setBackupCount(mapConfig.getBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 55, "bugNodeStartChar": 1954, "bugNodeLength": 31, "fixLineNum": 55, "fixNodeStartChar": 1954, "fixNodeLength": 26, "sourceBeforeFix": "mapConfig.getTotalBackupCount()", "sourceAfterFix": "mapConfig.getBackupCount()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "cf66836208a0532253d602721b3279db0b3e457d", "fixCommitParentSHA1": "c2ef444d97e9948cfc8425a11ea2f0434c3f16a0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\nindex b9c26af..4546714 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n@@ -52,7 +52,7 @@\n         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n-        newConfig.setBackupCount(mapConfig.getTotalBackupCount());\n+        newConfig.setBackupCount(mapConfig.getBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 55, "bugNodeStartChar": 1954, "bugNodeLength": 31, "fixLineNum": 55, "fixNodeStartChar": 1954, "fixNodeLength": 26, "sourceBeforeFix": "mapConfig.getTotalBackupCount()", "sourceAfterFix": "mapConfig.getBackupCount()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "639ca0c8d5f1e74a3dad3bb0014602bdd57dc602", "fixCommitParentSHA1": "4982ac053c3401d14d74431a6e574a98163c5b74", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\nindex f750949..7c8fda7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n@@ -54,7 +54,7 @@\n         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n-        newConfig.setBackupCount(mapConfig.getTotalBackupCount());\n+        newConfig.setBackupCount(mapConfig.getBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 57, "bugNodeStartChar": 2026, "bugNodeLength": 31, "fixLineNum": 57, "fixNodeStartChar": 2026, "fixNodeLength": 26, "sourceBeforeFix": "mapConfig.getTotalBackupCount()", "sourceAfterFix": "mapConfig.getBackupCount()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "639ca0c8d5f1e74a3dad3bb0014602bdd57dc602", "fixCommitParentSHA1": "4982ac053c3401d14d74431a6e574a98163c5b74", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\nindex f750949..7c8fda7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n@@ -54,7 +54,7 @@\n         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n-        newConfig.setBackupCount(mapConfig.getTotalBackupCount());\n+        newConfig.setBackupCount(mapConfig.getBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 57, "bugNodeStartChar": 2026, "bugNodeLength": 31, "fixLineNum": 57, "fixNodeStartChar": 2026, "fixNodeLength": 26, "sourceBeforeFix": "mapConfig.getTotalBackupCount()", "sourceAfterFix": "mapConfig.getBackupCount()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "37d7224334e940fff9d521eaf6850ef23bfd7da6", "fixCommitParentSHA1": "3bb173a9860053ec5dc3dab42deb594d89338444", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecordFactory.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecordFactory.java b/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecordFactory.java\nindex 9fb4c70..36adc3e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecordFactory.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/record/ObjectRecordFactory.java\n@@ -42,7 +42,7 @@\n         if (value instanceof Data) {\n             v = serializationService.toObject(value);\n         }\n-        return statisticsEnabled ? new ObjectRecordWithStats(key, v) : new ObjectRecord(key, v);\n+        return statisticsEnabled ? new ObjectRecordWithStats(key, value) : new ObjectRecord(key, v);\n     }\n \n     @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 45, "bugNodeStartChar": 1594, "bugNodeLength": 33, "fixLineNum": 45, "fixNodeStartChar": 1594, "fixNodeLength": 37, "sourceBeforeFix": "new ObjectRecordWithStats(key,v)", "sourceAfterFix": "new ObjectRecordWithStats(key,value)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "10aa6c4006fbe06a06d8d7616bf7d052eb8d49af", "fixCommitParentSHA1": "4de4e7f2cf65e0f34314f8f2c3f87b6759db03c4", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\nindex 95b4478..e2b35ea 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\n@@ -65,7 +65,7 @@\n         if (ctx == null) {\n             throw new HazelcastInstanceNotActiveException();\n         }\n-        return context;\n+        return ctx;\n     }\n \n     protected final void setContext(ClientContext context) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 68, "bugNodeStartChar": 2454, "bugNodeLength": 15, "fixLineNum": 68, "fixNodeStartChar": 2454, "fixNodeLength": 11, "sourceBeforeFix": "return context; ", "sourceAfterFix": "return ctx; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5b296167dee65b2fee152c72edecacc609996015", "fixCommitParentSHA1": "ac309f921f99cc7896ec73079295aed9facfcb4c", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\nindex 9bdd7ad..4477b1d 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\n@@ -65,7 +65,7 @@\n         if (ctx == null) {\n             throw new HazelcastInstanceNotActiveException();\n         }\n-        return context;\n+        return ctx;\n     }\n \n     protected final void setContext(ClientContext context) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 68, "bugNodeStartChar": 2457, "bugNodeLength": 15, "fixLineNum": 68, "fixNodeStartChar": 2457, "fixNodeLength": 11, "sourceBeforeFix": "return context; ", "sourceAfterFix": "return ctx; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9395821fc9da62820bf2786b62d2a75c3d6fe236", "fixCommitParentSHA1": "08768c76a96730652a7fb6c987ccd3d90f7e2391", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\nindex 9bdd7ad..4477b1d 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/ClientProxy.java\n@@ -65,7 +65,7 @@\n         if (ctx == null) {\n             throw new HazelcastInstanceNotActiveException();\n         }\n-        return context;\n+        return ctx;\n     }\n \n     protected final void setContext(ClientContext context) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 68, "bugNodeStartChar": 2457, "bugNodeLength": 15, "fixLineNum": 68, "fixNodeStartChar": 2457, "fixNodeLength": 11, "sourceBeforeFix": "return context; ", "sourceAfterFix": "return ctx; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "466bf63f35eee009f11ed069892907c7057ce1b7", "fixCommitParentSHA1": "e542a53535cfb6d780a478823c4f56a83ef999f1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/writebehind/store/DeleteStoreHandler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/DeleteStoreHandler.java b/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/DeleteStoreHandler.java\nindex 5d7f3f2..ce8a529 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/DeleteStoreHandler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/DeleteStoreHandler.java\n@@ -25,7 +25,7 @@\n /**\n  * Handles map store delete operations.\n  */\n-class DeleteStoreHandler extends AbstactStoreHandler<DelayedEntry> {\n+class DeleteStoreHandler extends AbstractStoreHandler<DelayedEntry> {\n \n     protected DeleteStoreHandler(MapStoreWrapper storeWrapper) {\n         super(storeWrapper);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 28, "bugNodeStartChar": 879, "bugNodeLength": 33, "fixLineNum": 28, "fixNodeStartChar": 879, "fixNodeLength": 34, "sourceBeforeFix": "AbstactStoreHandler<DelayedEntry>", "sourceAfterFix": "AbstractStoreHandler<DelayedEntry>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "466bf63f35eee009f11ed069892907c7057ce1b7", "fixCommitParentSHA1": "e542a53535cfb6d780a478823c4f56a83ef999f1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/writebehind/store/WriteStoreHandler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/WriteStoreHandler.java b/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/WriteStoreHandler.java\nindex f60c49a..7feeb27 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/WriteStoreHandler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/writebehind/store/WriteStoreHandler.java\n@@ -25,7 +25,7 @@\n /**\n  * Handles map store write operations.\n  */\n-class WriteStoreHandler extends AbstactStoreHandler<DelayedEntry> {\n+class WriteStoreHandler extends AbstractStoreHandler<DelayedEntry> {\n \n     protected WriteStoreHandler(MapStoreWrapper storeWrapper) {\n         super(storeWrapper);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 28, "bugNodeStartChar": 877, "bugNodeLength": 33, "fixLineNum": 28, "fixNodeStartChar": 877, "fixNodeLength": 34, "sourceBeforeFix": "AbstactStoreHandler<DelayedEntry>", "sourceAfterFix": "AbstractStoreHandler<DelayedEntry>"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d66fb461f31376f2470d93ec8c5ad2a03aeed86d", "fixCommitParentSHA1": "91fb7a0ab174514b790d8e54dac69e843032064d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java\nindex db43e6a..30c21ef 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java\n@@ -41,7 +41,8 @@\n     @Override\n     public void run() throws Exception {\n         final PartitionContainer partitionContainer = mapService.getPartitionContainer(getPartitionId());\n-        final RecordStore recordStore = partitionContainer.getRecordStore(name);\n+        // this should be existing record store since we don't want to trigger record store creation.\n+        final RecordStore recordStore = partitionContainer.getExistingRecordStore(name);\n         evictedKeyValueSequence = recordStore.clearUnLockedExpiredRecords();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 44, "bugNodeStartChar": 1473, "bugNodeLength": 39, "fixLineNum": 45, "fixNodeStartChar": 1575, "fixNodeLength": 47, "sourceBeforeFix": "partitionContainer.getRecordStore(name)", "sourceAfterFix": "partitionContainer.getExistingRecordStore(name)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d66fb461f31376f2470d93ec8c5ad2a03aeed86d", "fixCommitParentSHA1": "91fb7a0ab174514b790d8e54dac69e843032064d", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java\nindex db43e6a..30c21ef 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/ClearExpiredOperation.java\n@@ -41,7 +41,8 @@\n     @Override\n     public void run() throws Exception {\n         final PartitionContainer partitionContainer = mapService.getPartitionContainer(getPartitionId());\n-        final RecordStore recordStore = partitionContainer.getRecordStore(name);\n+        // this should be existing record store since we don't want to trigger record store creation.\n+        final RecordStore recordStore = partitionContainer.getExistingRecordStore(name);\n         evictedKeyValueSequence = recordStore.clearUnLockedExpiredRecords();\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 44, "bugNodeStartChar": 1473, "bugNodeLength": 39, "fixLineNum": 45, "fixNodeStartChar": 1575, "fixNodeLength": 47, "sourceBeforeFix": "partitionContainer.getRecordStore(name)", "sourceAfterFix": "partitionContainer.getExistingRecordStore(name)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6cc7f821a67636c81bf219662e3fa2c74eba0aad", "fixCommitParentSHA1": "c856797b8036214f09325b5bcf24b5ad4db4be47", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex 35fba9a..e57a025 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -240,7 +240,7 @@\n                         }\n                     }\n \n-                    connectionManager.markOwnerAddressAsClosed();\n+                    connectionManager.markOwnerConnectionAsClosed();\n                     IOUtil.closeResource(conn);\n                     conn = null;\n                     fireConnectionEvent(true);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 243, "bugNodeStartChar": 9611, "bugNodeLength": 44, "fixLineNum": 243, "fixNodeStartChar": 9611, "fixNodeLength": 47, "sourceBeforeFix": "connectionManager.markOwnerAddressAsClosed()", "sourceAfterFix": "connectionManager.markOwnerConnectionAsClosed()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6cc7f821a67636c81bf219662e3fa2c74eba0aad", "fixCommitParentSHA1": "c856797b8036214f09325b5bcf24b5ad4db4be47", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex 35fba9a..e57a025 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -240,7 +240,7 @@\n                         }\n                     }\n \n-                    connectionManager.markOwnerAddressAsClosed();\n+                    connectionManager.markOwnerConnectionAsClosed();\n                     IOUtil.closeResource(conn);\n                     conn = null;\n                     fireConnectionEvent(true);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 243, "bugNodeStartChar": 9611, "bugNodeLength": 44, "fixLineNum": 243, "fixNodeStartChar": 9611, "fixNodeLength": 47, "sourceBeforeFix": "connectionManager.markOwnerAddressAsClosed()", "sourceAfterFix": "connectionManager.markOwnerConnectionAsClosed()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "adb55e4806f0f4df52f9fff937ca9785b79228bb", "fixCommitParentSHA1": "16c8f2ccd1c8c0487b2de0eaee0b1eea72f575a0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 9d3384d..6c914bb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -412,12 +412,12 @@\n         if (shouldSchedule) {\n             // if ttl is 0 then no eviction. if ttl is -1 then default configured eviction is applied\n             if (ttl < 0 && mapContainer.getMapConfig().getTimeToLiveSeconds() > 0) {\n-                scheduleTtlEviction(name, record, mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000);\n+                scheduleTtlEviction(name, record, mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L);\n             } else if (ttl > 0) {\n                 scheduleTtlEviction(name, record, ttl);\n             }\n             if (mapContainer.getMapConfig().getMaxIdleSeconds() > 0) {\n-                scheduleIdleEviction(name, dataKey, mapContainer.getMapConfig().getMaxIdleSeconds() * 1000);\n+                scheduleIdleEviction(name, dataKey, mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L);\n             }\n         }\n         return record;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 415, "bugNodeStartChar": 19030, "bugNodeLength": 57, "fixLineNum": 415, "fixNodeStartChar": 19030, "fixNodeLength": 58, "sourceBeforeFix": "mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000", "sourceAfterFix": "mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "adb55e4806f0f4df52f9fff937ca9785b79228bb", "fixCommitParentSHA1": "16c8f2ccd1c8c0487b2de0eaee0b1eea72f575a0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 9d3384d..6c914bb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -412,12 +412,12 @@\n         if (shouldSchedule) {\n             // if ttl is 0 then no eviction. if ttl is -1 then default configured eviction is applied\n             if (ttl < 0 && mapContainer.getMapConfig().getTimeToLiveSeconds() > 0) {\n-                scheduleTtlEviction(name, record, mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000);\n+                scheduleTtlEviction(name, record, mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L);\n             } else if (ttl > 0) {\n                 scheduleTtlEviction(name, record, ttl);\n             }\n             if (mapContainer.getMapConfig().getMaxIdleSeconds() > 0) {\n-                scheduleIdleEviction(name, dataKey, mapContainer.getMapConfig().getMaxIdleSeconds() * 1000);\n+                scheduleIdleEviction(name, dataKey, mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L);\n             }\n         }\n         return record;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 420, "bugNodeStartChar": 19317, "bugNodeLength": 54, "fixLineNum": 420, "fixNodeStartChar": 19317, "fixNodeLength": 55, "sourceBeforeFix": "mapContainer.getMapConfig().getMaxIdleSeconds() * 1000", "sourceAfterFix": "mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6d4e9989f7d371e2871210eb285562ac4821d856", "fixCommitParentSHA1": "9b222476dbedd35556aea4505afe36814a09dd33", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java\nindex 9ccbcf8..7b3281b 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java\n@@ -75,7 +75,7 @@\n     @Override\n     public <T> ICompletableFuture<T> submitInternal(final Callable<T> command) {\n         CompletableFutureTask futureTask = new CompletableFutureTask(command, internalExecutor);\n-        internalExecutor.submit(command);\n+        internalExecutor.submit(futureTask);\n         return futureTask;\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 78, "bugNodeStartChar": 3460, "bugNodeLength": 32, "fixLineNum": 78, "fixNodeStartChar": 3460, "fixNodeLength": 35, "sourceBeforeFix": "internalExecutor.submit(command)", "sourceAfterFix": "internalExecutor.submit(futureTask)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "208c7fbcf5f2d49ae1a0b986679cbe6dd3933403", "fixCommitParentSHA1": "b58506b8406821ee0c349356359a4562d7398ffc", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java\nindex 9ccbcf8..7b3281b 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java\n@@ -75,7 +75,7 @@\n     @Override\n     public <T> ICompletableFuture<T> submitInternal(final Callable<T> command) {\n         CompletableFutureTask futureTask = new CompletableFutureTask(command, internalExecutor);\n-        internalExecutor.submit(command);\n+        internalExecutor.submit(futureTask);\n         return futureTask;\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 78, "bugNodeStartChar": 3460, "bugNodeLength": 32, "fixLineNum": 78, "fixNodeStartChar": 3460, "fixNodeLength": 35, "sourceBeforeFix": "internalExecutor.submit(command)", "sourceAfterFix": "internalExecutor.submit(futureTask)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "3138105b24ae8e2e42f17343118fe801abc355dd", "fixCommitParentSHA1": "08e45240cce04a85f93de7f34cec4b1dceb0c4f0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocation.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocation.java\nindex 774097d..caebfe7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocation.java\n@@ -763,7 +763,7 @@\n         }\n \n         private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n-            boolean hasResponse = potentialResponse == null;\n+            boolean hasResponse = potentialResponse != null;\n             int backupsExpected = expectedBackupCount;\n             int backupsCompleted = availableBackups;\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 766, "bugNodeStartChar": 29380, "bugNodeLength": 25, "fixLineNum": 766, "fixNodeStartChar": 29380, "fixNodeLength": 25, "sourceBeforeFix": "potentialResponse == null", "sourceAfterFix": "potentialResponse != null"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "0e4f46022ea79029ee6b74f98073c788b80e0e84", "fixCommitParentSHA1": "2418a47d34c4a8c44b66294a475da73df368c816", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java\nindex 7b23ac2..3d6a6e6 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java\n@@ -63,7 +63,7 @@\n             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n \n-        assertOpenEventually(countDownLatch, 30);\n+        assertOpenEventually(countDownLatch);\n     }\n \n     @Test(timeout = 120000)\n@@ -183,7 +183,7 @@\n         m1.setIntAttribute(\"Test2\", 321);\n \n         // Force sleep to distribute value\n-        latch.await(2, TimeUnit.SECONDS);\n+        assertOpenEventually(latch);\n \n         assertNotNull(member.getIntAttribute(\"Test2\"));\n         assertEquals(321, (int) member.getIntAttribute(\"Test2\"));\n@@ -239,7 +239,7 @@\n         m1.setIntAttribute(\"Test\", 321);\n \n         // Force sleep to distribute value\n-        latch.await(2, TimeUnit.SECONDS);\n+        assertOpenEventually(latch);\n \n         assertNotNull(member.getIntAttribute(\"Test\"));\n         assertEquals(321, (int) member.getIntAttribute(\"Test\"));\n@@ -295,7 +295,7 @@\n         m1.removeAttribute(\"Test\");\n \n         // Force sleep to distribute value\n-        latch.await(2, TimeUnit.SECONDS);\n+        assertOpenEventually(latch);\n \n         assertNull(member.getIntAttribute(\"Test\"));\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 66, "bugNodeStartChar": 2426, "bugNodeLength": 40, "fixLineNum": 66, "fixNodeStartChar": 2426, "fixNodeLength": 36, "sourceBeforeFix": "assertOpenEventually(countDownLatch,30)", "sourceAfterFix": "assertOpenEventually(countDownLatch)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "75d3a0dec751780b96b1941fc00fbb8e47e34665", "fixCommitParentSHA1": "e340cd1fdf7682900acd30d4c2793536f6bc7fac", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java\nindex 7b23ac2..3d6a6e6 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientMemberAttributeTest.java\n@@ -63,7 +63,7 @@\n             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n \n-        assertOpenEventually(countDownLatch, 30);\n+        assertOpenEventually(countDownLatch);\n     }\n \n     @Test(timeout = 120000)\n@@ -183,7 +183,7 @@\n         m1.setIntAttribute(\"Test2\", 321);\n \n         // Force sleep to distribute value\n-        latch.await(2, TimeUnit.SECONDS);\n+        assertOpenEventually(latch);\n \n         assertNotNull(member.getIntAttribute(\"Test2\"));\n         assertEquals(321, (int) member.getIntAttribute(\"Test2\"));\n@@ -239,7 +239,7 @@\n         m1.setIntAttribute(\"Test\", 321);\n \n         // Force sleep to distribute value\n-        latch.await(2, TimeUnit.SECONDS);\n+        assertOpenEventually(latch);\n \n         assertNotNull(member.getIntAttribute(\"Test\"));\n         assertEquals(321, (int) member.getIntAttribute(\"Test\"));\n@@ -295,7 +295,7 @@\n         m1.removeAttribute(\"Test\");\n \n         // Force sleep to distribute value\n-        latch.await(2, TimeUnit.SECONDS);\n+        assertOpenEventually(latch);\n \n         assertNull(member.getIntAttribute(\"Test\"));\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 66, "bugNodeStartChar": 2426, "bugNodeLength": 40, "fixLineNum": 66, "fixNodeStartChar": 2426, "fixNodeLength": 36, "sourceBeforeFix": "assertOpenEventually(countDownLatch,30)", "sourceAfterFix": "assertOpenEventually(countDownLatch)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "c4d1a9b3fde355c8cdfb6fcdc1d30c1fa38625d4", "fixCommitParentSHA1": "ce97445f0f81a6f22fea6cd944735e64e04ee8b5", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java b/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java\nindex 666db8c..55e3c94 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java\n@@ -56,7 +56,7 @@\n \n         final IMap<Integer, Long> map = h.getMap(MAP_NAME);\n         map.put(0, 10L);\n-        assertEquals(148, map.getLocalMapStats().getHeapCost());\n+        assertEquals(156, map.getLocalMapStats().getHeapCost());\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 59, "bugNodeStartChar": 2002, "bugNodeLength": 55, "fixLineNum": 59, "fixNodeStartChar": 2002, "fixNodeLength": 55, "sourceBeforeFix": "assertEquals(148,map.getLocalMapStats().getHeapCost())", "sourceAfterFix": "assertEquals(156,map.getLocalMapStats().getHeapCost())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "98f6b35ce69cf3fcaf74e8e657e657dcfc80d58f", "fixCommitParentSHA1": "36240a5b94dfb5d24bd3d2e31ddb9a0876057522", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/MultiMapDataSerializerHook.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/MultiMapDataSerializerHook.java b/hazelcast/src/main/java/com/hazelcast/multimap/MultiMapDataSerializerHook.java\nindex fbfd0b7..bd55b61 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/MultiMapDataSerializerHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/MultiMapDataSerializerHook.java\n@@ -211,7 +211,7 @@\n                 return new TxnRemoveAllOperation();\n             }\n         };\n-        constructors[TXN_REMOVE_ALL] = new ConstructorFunction<Integer, IdentifiedDataSerializable>() {\n+        constructors[TXN_REMOVE_ALL_BACKUP] = new ConstructorFunction<Integer, IdentifiedDataSerializable>() {\n             public IdentifiedDataSerializable createNew(Integer arg) {\n                 return new TxnRemoveAllBackupOperation();\n             }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 214, "bugNodeStartChar": 9629, "bugNodeLength": 28, "fixLineNum": 214, "fixNodeStartChar": 9629, "fixNodeLength": 35, "sourceBeforeFix": "constructors[TXN_REMOVE_ALL]", "sourceAfterFix": "constructors[TXN_REMOVE_ALL_BACKUP]"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex 6a1062d..f6f6cca 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -119,7 +119,7 @@\n             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n-                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n+                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 122, "bugNodeStartChar": 4163, "bugNodeLength": 27, "fixLineNum": 122, "fixNodeStartChar": 4163, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex 6a1062d..f6f6cca 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -119,7 +119,7 @@\n             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n-                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n+                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 122, "bugNodeStartChar": 4163, "bugNodeLength": 27, "fixLineNum": 122, "fixNodeStartChar": 4163, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\nindex c7d803b..5dcc1ca 100644\n--- a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n+++ b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n@@ -44,7 +44,7 @@\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n-            flag = Integer.valueOf(st.nextToken());\n+            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1645, "bugNodeLength": 31, "fixLineNum": 47, "fixNodeStartChar": 1645, "fixNodeLength": 32, "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\nindex c7d803b..5dcc1ca 100644\n--- a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n+++ b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n@@ -44,7 +44,7 @@\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n-            flag = Integer.valueOf(st.nextToken());\n+            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1645, "bugNodeLength": 31, "fixLineNum": 47, "fixNodeStartChar": 1645, "fixNodeLength": 32, "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 634, "bugNodeStartChar": 22531, "bugNodeLength": 21, "fixLineNum": 634, "fixNodeStartChar": 22531, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 634, "bugNodeStartChar": 22531, "bugNodeLength": 21, "fixLineNum": 634, "fixNodeStartChar": 22531, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 851, "bugNodeStartChar": 29651, "bugNodeLength": 21, "fixLineNum": 851, "fixNodeStartChar": 29651, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 851, "bugNodeStartChar": 29651, "bugNodeLength": 21, "fixLineNum": 851, "fixNodeStartChar": 29651, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 974, "bugNodeStartChar": 33032, "bugNodeLength": 21, "fixLineNum": 974, "fixNodeStartChar": 33032, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 974, "bugNodeStartChar": 33032, "bugNodeLength": 21, "fixLineNum": 974, "fixNodeStartChar": 33032, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1022, "bugNodeStartChar": 34680, "bugNodeLength": 21, "fixLineNum": 1022, "fixNodeStartChar": 34680, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1022, "bugNodeStartChar": 34680, "bugNodeLength": 21, "fixLineNum": 1022, "fixNodeStartChar": 34680, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1235, "bugNodeStartChar": 42192, "bugNodeLength": 21, "fixLineNum": 1235, "fixNodeStartChar": 42192, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1235, "bugNodeStartChar": 42192, "bugNodeLength": 21, "fixLineNum": 1235, "fixNodeStartChar": 42192, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1256, "bugNodeStartChar": 42768, "bugNodeLength": 21, "fixLineNum": 1256, "fixNodeStartChar": 42768, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1256, "bugNodeStartChar": 42768, "bugNodeLength": 21, "fixLineNum": 1256, "fixNodeStartChar": 42768, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ca32273968cb9c7fe9de09d4004f650bd46969c4", "fixCommitParentSHA1": "5fb1c4e776b7bd118b6c3931fa2987385914dede", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java\nindex d550014..f16a450 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java\n@@ -36,9 +36,6 @@\n \n import static org.junit.Assert.*;\n \n-/**\n- * @author ali 6/6/13\n- */\n @RunWith(HazelcastSerialClassRunner.class)\n @Category(QuickTest.class)\n public class ClientTxnTest {\n@@ -77,7 +74,7 @@\n \n             context.commitTransaction();\n             fail(\"commit should throw exception!!!\");\n-        } catch (TransactionException e){\n+        } catch (Exception e){\n             context.rollbackTransaction();\n             latch.countDown();\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 80, "bugNodeStartChar": 2648, "bugNodeLength": 22, "fixLineNum": 80, "fixNodeStartChar": 2648, "fixNodeLength": 11, "sourceBeforeFix": "TransactionException e", "sourceAfterFix": "Exception e"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex 6a1062d..f6f6cca 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -119,7 +119,7 @@\n             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n-                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n+                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 122, "bugNodeStartChar": 4163, "bugNodeLength": 27, "fixLineNum": 122, "fixNodeStartChar": 4163, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex 6a1062d..f6f6cca 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -119,7 +119,7 @@\n             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n-                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n+                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 122, "bugNodeStartChar": 4163, "bugNodeLength": 27, "fixLineNum": 122, "fixNodeStartChar": 4163, "fixNodeLength": 28, "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\nindex c7d803b..5dcc1ca 100644\n--- a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n+++ b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n@@ -44,7 +44,7 @@\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n-            flag = Integer.valueOf(st.nextToken());\n+            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1645, "bugNodeLength": 31, "fixLineNum": 47, "fixNodeStartChar": 1645, "fixNodeLength": 32, "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\nindex c7d803b..5dcc1ca 100644\n--- a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n+++ b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n@@ -44,7 +44,7 @@\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n-            flag = Integer.valueOf(st.nextToken());\n+            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 47, "bugNodeStartChar": 1645, "bugNodeLength": 31, "fixLineNum": 47, "fixNodeStartChar": 1645, "fixNodeLength": 32, "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 634, "bugNodeStartChar": 22531, "bugNodeLength": 21, "fixLineNum": 634, "fixNodeStartChar": 22531, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 634, "bugNodeStartChar": 22531, "bugNodeLength": 21, "fixLineNum": 634, "fixNodeStartChar": 22531, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 851, "bugNodeStartChar": 29651, "bugNodeLength": 21, "fixLineNum": 851, "fixNodeStartChar": 29651, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 851, "bugNodeStartChar": 29651, "bugNodeLength": 21, "fixLineNum": 851, "fixNodeStartChar": 29651, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 974, "bugNodeStartChar": 33032, "bugNodeLength": 21, "fixLineNum": 974, "fixNodeStartChar": 33032, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 974, "bugNodeStartChar": 33032, "bugNodeLength": 21, "fixLineNum": 974, "fixNodeStartChar": 33032, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1022, "bugNodeStartChar": 34680, "bugNodeLength": 21, "fixLineNum": 1022, "fixNodeStartChar": 34680, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1022, "bugNodeStartChar": 34680, "bugNodeLength": 21, "fixLineNum": 1022, "fixNodeStartChar": 34680, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1235, "bugNodeStartChar": 42192, "bugNodeLength": 21, "fixLineNum": 1235, "fixNodeStartChar": 42192, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1235, "bugNodeStartChar": 42192, "bugNodeLength": 21, "fixLineNum": 1235, "fixNodeStartChar": 42192, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1256, "bugNodeStartChar": 42768, "bugNodeLength": 21, "fixLineNum": 1256, "fixNodeStartChar": 42768, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "fixCommitParentSHA1": "4fdc0567a14d2b879998e151e001480512508993", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/examples/TestApp.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\nindex c8b085e..e583dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n+++ b/hazelcast/src/main/java/com/hazelcast/examples/TestApp.java\n@@ -631,7 +631,7 @@\n     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n-            v = Long.valueOf(args[1]);\n+            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());\n@@ -848,7 +848,7 @@\n \n     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);\n@@ -971,7 +971,7 @@\n \n     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n-        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n+        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);\n@@ -1019,7 +1019,7 @@\n             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n-                long time = Long.valueOf(timeout);\n+                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {\n@@ -1232,7 +1232,7 @@\n     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n-            timeout = Long.valueOf(args[2]);\n+            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);\n@@ -1253,7 +1253,7 @@\n     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n-            timeout = Long.valueOf(args[1]);\n+            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1256, "bugNodeStartChar": 42768, "bugNodeLength": 21, "fixLineNum": 1256, "fixNodeStartChar": 42768, "fixNodeLength": 23, "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0b16787d9e5afdb12015e3142fd16a46e8008557", "fixCommitParentSHA1": "4f53530205eb65de2553937d4e9660869556fa8d", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java\nindex 16e4a67..d550014 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/txn/ClientTxnTest.java\n@@ -106,7 +106,7 @@\n         try{\n             context.commitTransaction();\n             fail(\"commit should throw exception !\");\n-        } catch (TransactionException e){\n+        } catch (Exception e){\n             context.rollbackTransaction();\n             latch.countDown();\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 109, "bugNodeStartChar": 3589, "bugNodeLength": 22, "fixLineNum": 109, "fixNodeStartChar": 3589, "fixNodeLength": 11, "sourceBeforeFix": "TransactionException e", "sourceAfterFix": "Exception e"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "117cc1a32b6dc1a65bcc269a5962047ade56f4a7", "fixCommitParentSHA1": "ea0d0d8c28b3b18e380d9c14f6731a1d879318a1", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex 49468dd..26741a7 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -456,7 +456,7 @@\n                         cacheEntry.value = value;\n                         cacheEntry.reload = false;\n                     }\n-                    localCache.put(name, NULL_ENTRY);\n+                    localCache.put(name, cacheEntry);\n                 }\n                 return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;\n             }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 459, "bugNodeStartChar": 18347, "bugNodeLength": 32, "fixLineNum": 459, "fixNodeStartChar": 18347, "fixNodeLength": 32, "sourceBeforeFix": "localCache.put(name,NULL_ENTRY)", "sourceAfterFix": "localCache.put(name,cacheEntry)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e38702915ee95c95013fdf6ec56c0ed7f4667342", "fixCommitParentSHA1": "407966350b6e8b41adbc3b9d2389133b6fb83409", "bugFilePath": "hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\nindex 49468dd..26741a7 100644\n--- a/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n+++ b/hazelcast-wm/src/main/java/com/hazelcast/web/WebFilter.java\n@@ -456,7 +456,7 @@\n                         cacheEntry.value = value;\n                         cacheEntry.reload = false;\n                     }\n-                    localCache.put(name, NULL_ENTRY);\n+                    localCache.put(name, cacheEntry);\n                 }\n                 return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;\n             }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 459, "bugNodeStartChar": 18347, "bugNodeLength": 32, "fixLineNum": 459, "fixNodeStartChar": 18347, "fixNodeLength": 32, "sourceBeforeFix": "localCache.put(name,NULL_ENTRY)", "sourceAfterFix": "localCache.put(name,cacheEntry)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "dc3e306e42f482e9fc8a92963a50c7546ffeda4c", "fixCommitParentSHA1": "811ac210bbc4b763b186548315a001edd7f6622d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java\nindex 4fbdf06..1010df6 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java\n@@ -47,7 +47,7 @@\n \n     @Override\n     protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {\n-        while (numThreads.get() > MAX_THREADS) {\n+        while (numThreads.get() >= MAX_THREADS) {\n             try {\n                 Thread.sleep(25);\n             } catch (InterruptedException e) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 50, "bugNodeStartChar": 1626, "bugNodeLength": 30, "fixLineNum": 50, "fixNodeStartChar": 1626, "fixNodeLength": 31, "sourceBeforeFix": "numThreads.get() > MAX_THREADS", "sourceAfterFix": "numThreads.get() >= MAX_THREADS"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "1896987807f7186958ac057fb0f79034ddc7b947", "fixCommitParentSHA1": "9841c20286abf13982adc5bd8218589e3cf34070", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java b/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java\nindex 4188e52..4bc71c9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java\n@@ -49,7 +49,7 @@\n     }\n \n     public boolean returnsResponse() {\n-        return true;\n+        return false;\n     }\n \n     public Object getResponse() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 1611, "bugNodeLength": 12, "fixLineNum": 52, "fixNodeStartChar": 1611, "fixNodeLength": 13, "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "8b8f4af8d8c097c1bdc34ad2660521c655341f52", "fixCommitParentSHA1": "390e6627f765363d61fbbd0d80dd43eefd5c91d3", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java b/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java\nindex 4188e52..4bc71c9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/ClientReAuthOperation.java\n@@ -49,7 +49,7 @@\n     }\n \n     public boolean returnsResponse() {\n-        return true;\n+        return false;\n     }\n \n     public Object getResponse() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 1611, "bugNodeLength": 12, "fixLineNum": 52, "fixNodeStartChar": 1611, "fixNodeLength": 13, "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "27e39646c2e19bba26c29f6ddb1df925e036471f", "fixCommitParentSHA1": "026b7072c00b04cab118b700a7ffeec5a8c1f46e", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/mapreduce/impl/task/JobSupervisor.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/mapreduce/impl/task/JobSupervisor.java b/hazelcast/src/main/java/com/hazelcast/mapreduce/impl/task/JobSupervisor.java\nindex 8f232e4..ca91859 100644\n--- a/hazelcast/src/main/java/com/hazelcast/mapreduce/impl/task/JobSupervisor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/mapreduce/impl/task/JobSupervisor.java\n@@ -382,7 +382,7 @@\n         String jobId = getConfiguration().getJobId();\n         for (Address address : addresses) {\n             try {\n-                CancelJobSupervisorOperation operation = new CancelJobSupervisorOperation(name, jobId, jobOwner);\n+                CancelJobSupervisorOperation operation = new CancelJobSupervisorOperation(name, jobId);\n                 mapReduceService.processRequest(address, operation, name);\n             } catch (Exception ignore) {\n                 // We can ignore this exception since we just want to cancel the job\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 385, "bugNodeStartChar": 15441, "bugNodeLength": 55, "fixLineNum": 385, "fixNodeStartChar": 15441, "fixNodeLength": 45, "sourceBeforeFix": "new CancelJobSupervisorOperation(name,jobId,jobOwner)", "sourceAfterFix": "new CancelJobSupervisorOperation(name,jobId)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0258fcc52329833429a7c745c610f3b8aaf57ce7", "fixCommitParentSHA1": "92b4a0df7a7428b0fe6ae2da9b89e90be2d23162", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java b/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\nindex 81d3255..4004adb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\n@@ -274,7 +274,7 @@\n \n         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n-            this.useOldStringConstructor = constructor.getTypeParameters().length == 3;\n+            this.useOldStringConstructor = constructor.getParameterTypes().length == 3;\n         }\n \n         @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 277, "bugNodeStartChar": 10849, "bugNodeLength": 31, "fixLineNum": 277, "fixNodeStartChar": 10849, "fixNodeLength": 31, "sourceBeforeFix": "constructor.getTypeParameters()", "sourceAfterFix": "constructor.getParameterTypes()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0258fcc52329833429a7c745c610f3b8aaf57ce7", "fixCommitParentSHA1": "92b4a0df7a7428b0fe6ae2da9b89e90be2d23162", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java b/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\nindex 81d3255..4004adb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/UTFEncoderDecoder.java\n@@ -274,7 +274,7 @@\n \n         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n-            this.useOldStringConstructor = constructor.getTypeParameters().length == 3;\n+            this.useOldStringConstructor = constructor.getParameterTypes().length == 3;\n         }\n \n         @Override\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 277, "bugNodeStartChar": 10849, "bugNodeLength": 31, "fixLineNum": 277, "fixNodeStartChar": 10849, "fixNodeLength": 31, "sourceBeforeFix": "constructor.getTypeParameters()", "sourceAfterFix": "constructor.getParameterTypes()"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "fb82039126e694553eb3cd13820ea446f4d0dec9", "fixCommitParentSHA1": "d735c2d311dd52dc22778fd1bf02478d534063bc", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\nindex 5552111..1253ae5 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/map/ClientMapIssueTest.java\n@@ -25,7 +25,7 @@\n public class ClientMapIssueTest {\n \n     @After\n-    public static void destroy() {\n+    public void destroy() {\n         HazelcastClient.shutdownAll();\n         Hazelcast.shutdownAll();\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 27, "bugNodeStartChar": 740, "bugNodeLength": 119, "fixLineNum": 27, "fixNodeStartChar": 740, "fixNodeLength": 112, "sourceBeforeFix": "9", "sourceAfterFix": "1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "667c862136aca9f153784063f12355567dc99c4b", "fixCommitParentSHA1": "d948290fa12247cdc31d548dc945c57cfb830719", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java b/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java\nindex 498481d..e92eee4 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java\n@@ -284,7 +284,7 @@\n         map.put(key, 0);\n         new Thread(new TxnIncrementor(count1, h1, latch)).start();\n         new Thread(new TxnIncrementor(count2, h2, latch)).start();\n-        latch.await(100, TimeUnit.SECONDS);\n+        latch.await(600, TimeUnit.SECONDS);\n         assertEquals(new Integer(count1 + count2), map.get(key));\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 287, "bugNodeStartChar": 12143, "bugNodeLength": 34, "fixLineNum": 287, "fixNodeStartChar": 12143, "fixNodeLength": 34, "sourceBeforeFix": "latch.await(100,TimeUnit.SECONDS)", "sourceAfterFix": "latch.await(600,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "b06cd886290c6ff0c6f0a398b31c30d92c6e8fbf", "fixCommitParentSHA1": "38d82a2613803d238499e13b7b8615ff2d852561", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\nindex 480f067..ad84d51 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n@@ -49,7 +49,7 @@\n         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n \n-        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n+        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 2017, "bugNodeLength": 41, "fixLineNum": 52, "fixNodeStartChar": 2017, "fixNodeLength": 39, "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b06cd886290c6ff0c6f0a398b31c30d92c6e8fbf", "fixCommitParentSHA1": "38d82a2613803d238499e13b7b8615ff2d852561", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\nindex 480f067..ad84d51 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n@@ -49,7 +49,7 @@\n         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n \n-        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n+        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 2017, "bugNodeLength": 41, "fixLineNum": 52, "fixNodeStartChar": 2017, "fixNodeLength": 39, "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "382391ddb05d6a76ddd1e42f8392ce0e288b10b3", "fixCommitParentSHA1": "ec9e4ebd1a53595dd9832b98f7041b17e7337b48", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\nindex 480f067..ad84d51 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n@@ -49,7 +49,7 @@\n         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n \n-        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n+        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 2017, "bugNodeLength": 41, "fixLineNum": 52, "fixNodeStartChar": 2017, "fixNodeLength": 39, "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "382391ddb05d6a76ddd1e42f8392ce0e288b10b3", "fixCommitParentSHA1": "ec9e4ebd1a53595dd9832b98f7041b17e7337b48", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\nindex 480f067..ad84d51 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/ssl/BasicSSLContextFactory.java\n@@ -49,7 +49,7 @@\n         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n \n-        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n+        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 52, "bugNodeStartChar": 2017, "bugNodeLength": 41, "fixLineNum": 52, "fixNodeStartChar": 2017, "fixNodeLength": 39, "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "c4bf8d3ca79eb82117cafe675e00ecee65f64be6", "fixCommitParentSHA1": "bad9403366d86e4c458a7c4cd14b3a048dc1caea", "bugFilePath": "hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java", "fixPatch": "diff --git a/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java b/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java\nindex e94f636..06c3dce 100644\n--- a/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java\n+++ b/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java\n@@ -217,7 +217,7 @@\n \n     private void validateTx(Xid xid,Transaction.State state) throws XAException {\n         final Transaction tx = getTransaction(xid);\n-        if(tx == null) {\n+        if(tx != null) {\n             switch (state){\n                 case ACTIVE:\n                     if(tx.getState() != Transaction.State.ACTIVE){\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 220, "bugNodeStartChar": 6810, "bugNodeLength": 10, "fixLineNum": 220, "fixNodeStartChar": 6810, "fixNodeLength": 10, "sourceBeforeFix": "tx == null", "sourceAfterFix": "tx != null"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "75655f1848bd22e798f10de84bb6caffa9d6bf2c", "fixCommitParentSHA1": "bad9403366d86e4c458a7c4cd14b3a048dc1caea", "bugFilePath": "hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java", "fixPatch": "diff --git a/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java b/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java\nindex e94f636..06c3dce 100644\n--- a/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java\n+++ b/hazelcast-ra/src/main/java/com/hazelcast/jca/XAResourceImpl.java\n@@ -217,7 +217,7 @@\n \n     private void validateTx(Xid xid,Transaction.State state) throws XAException {\n         final Transaction tx = getTransaction(xid);\n-        if(tx == null) {\n+        if(tx != null) {\n             switch (state){\n                 case ACTIVE:\n                     if(tx.getState() != Transaction.State.ACTIVE){\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 220, "bugNodeStartChar": 6810, "bugNodeLength": 10, "fixLineNum": 220, "fixNodeStartChar": 6810, "fixNodeLength": 10, "sourceBeforeFix": "tx == null", "sourceAfterFix": "tx != null"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "ba6e7eedc76cc914f66b30dddedc8a87d1493276", "fixCommitParentSHA1": "48f8c056bdba29d3ded9afa410e56cc5e7b3ff30", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/replicatedmap/client/AbstractReplicatedMapClientRequest.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/replicatedmap/client/AbstractReplicatedMapClientRequest.java b/hazelcast/src/main/java/com/hazelcast/replicatedmap/client/AbstractReplicatedMapClientRequest.java\nindex c6bcdd0..269ead7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/replicatedmap/client/AbstractReplicatedMapClientRequest.java\n+++ b/hazelcast/src/main/java/com/hazelcast/replicatedmap/client/AbstractReplicatedMapClientRequest.java\n@@ -66,7 +66,7 @@\n \n     protected ReplicatedRecordStore getReplicatedRecordStore() {\n         ReplicatedMapService replicatedMapService = getService();\n-        return replicatedMapService.getReplicatedRecordStore(mapName, false);\n+        return replicatedMapService.getReplicatedRecordStore(mapName, true);\n     }\n \n }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 69, "bugNodeStartChar": 2137, "bugNodeLength": 61, "fixLineNum": 69, "fixNodeStartChar": 2137, "fixNodeLength": 60, "sourceBeforeFix": "replicatedMapService.getReplicatedRecordStore(mapName,false)", "sourceAfterFix": "replicatedMapService.getReplicatedRecordStore(mapName,true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "fixCommitParentSHA1": "5865636ba3d6173230bc1740ecc1aec91282ac5c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java b/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\nindex 9461750..9cc3fd8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\n@@ -37,7 +37,7 @@\n \n public class ReplicatedMapService implements ManagedService, RemoteService,\n         PostJoinAwareService, SplitBrainHandlerService,\n-        EventPublishingService<ReplicationMessage, ReplicatedMessageListener>{\n+        EventPublishingService<IdentifiedDataSerializable, ReplicatedMessageListener>{\n \n     public static final String SERVICE_NAME = \"hz:impl:replicatedMapService\";\n     public static final String EVENT_TOPIC_NAME = SERVICE_NAME + \".replication\";\n@@ -140,7 +140,7 @@\n     }\n \n     @Override\n-    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n+    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 40, "bugNodeStartChar": 1579, "bugNodeLength": 69, "fixLineNum": 40, "fixNodeStartChar": 1579, "fixNodeLength": 77, "sourceBeforeFix": "EventPublishingService<ReplicationMessage,ReplicatedMessageListener>", "sourceAfterFix": "EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "fixCommitParentSHA1": "5865636ba3d6173230bc1740ecc1aec91282ac5c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java b/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\nindex 9461750..9cc3fd8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\n@@ -37,7 +37,7 @@\n \n public class ReplicatedMapService implements ManagedService, RemoteService,\n         PostJoinAwareService, SplitBrainHandlerService,\n-        EventPublishingService<ReplicationMessage, ReplicatedMessageListener>{\n+        EventPublishingService<IdentifiedDataSerializable, ReplicatedMessageListener>{\n \n     public static final String SERVICE_NAME = \"hz:impl:replicatedMapService\";\n     public static final String EVENT_TOPIC_NAME = SERVICE_NAME + \".replication\";\n@@ -140,7 +140,7 @@\n     }\n \n     @Override\n-    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n+    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 143, "bugNodeStartChar": 5737, "bugNodeLength": 24, "fixLineNum": 143, "fixNodeStartChar": 5737, "fixNodeLength": 32, "sourceBeforeFix": "ReplicationMessage event", "sourceAfterFix": "IdentifiedDataSerializable event"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "09cce2bc0e34463091c482049914f37399b37204", "fixCommitParentSHA1": "68e2bde0e098378e60387fa1de6fbecd26fcb9b6", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java\nindex a4e6491..8188003 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java\n@@ -65,10 +65,10 @@\n             String name = entry.getKey();\n             // adding if initial data is loaded for the only maps that has mapstore behind\n             if(mapContainer.getStore() != null) {\n-                mapInitialLoadInfo.put(name, recordStore.isLoaded());\n+                mapInitialLoadInfo.put(name, replicaIndex > 0 || recordStore.isLoaded());\n             }\n             // now prepare data to migrate records\n-            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>(recordStore.size());\n+            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>();\n             for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {\n                 Data key = recordEntry.getKey();\n                 Record record = recordEntry.getValue();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 71, "bugNodeStartChar": 2884, "bugNodeLength": 54, "fixLineNum": 71, "fixNodeStartChar": 2884, "fixNodeLength": 36, "sourceBeforeFix": "new HashSet<RecordReplicationInfo>(recordStore.size())", "sourceAfterFix": "new HashSet<RecordReplicationInfo>()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "68e2bde0e098378e60387fa1de6fbecd26fcb9b6", "fixCommitParentSHA1": "01a32d6361e24469516d1b440bd0b7841ef1bd28", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java\nindex 844d3e8..a4e6491 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/MapReplicationOperation.java\n@@ -68,7 +68,7 @@\n                 mapInitialLoadInfo.put(name, recordStore.isLoaded());\n             }\n             // now prepare data to migrate records\n-            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>();\n+            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>(recordStore.size());\n             for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {\n                 Data key = recordEntry.getKey();\n                 Record record = recordEntry.getValue();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 71, "bugNodeStartChar": 2884, "bugNodeLength": 36, "fixLineNum": 71, "fixNodeStartChar": 2884, "fixNodeLength": 54, "sourceBeforeFix": "new HashSet<RecordReplicationInfo>()", "sourceAfterFix": "new HashSet<RecordReplicationInfo>(recordStore.size())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "25ab2615a8237104ff679c956ae237891b9b176c", "fixCommitParentSHA1": "4fa7372aa5ae1ce57c518bf07ee91cad8c7142c9", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/util/scheduler/SecondsBasedEntryTaskScheduler.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/scheduler/SecondsBasedEntryTaskScheduler.java b/hazelcast/src/main/java/com/hazelcast/util/scheduler/SecondsBasedEntryTaskScheduler.java\nindex d34dc0b..6c90530 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/scheduler/SecondsBasedEntryTaskScheduler.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/scheduler/SecondsBasedEntryTaskScheduler.java\n@@ -144,7 +144,7 @@\n             if (second != null) {\n                 final ConcurrentMap<Object, ScheduledEntry<K, V>> entries = scheduledEntries.get(second);\n                 if (entries != null) {\n-                    result = entries.remove(key);\n+                    result = entries.remove(timeKey);\n                 }\n             }\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 147, "bugNodeStartChar": 6177, "bugNodeLength": 19, "fixLineNum": 147, "fixNodeStartChar": 6177, "fixNodeLength": 23, "sourceBeforeFix": "entries.remove(key)", "sourceAfterFix": "entries.remove(timeKey)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "7fa8196f36c80922289924134acfd975270c6c4c", "fixCommitParentSHA1": "40e6cdc402e5a17d7fc61504aef983be3c7c44a0", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\nindex 84418ca..3012e8f 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n@@ -503,7 +503,7 @@\n         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n-        assertTrue(latch.await(5, TimeUnit.MINUTES));\n+        assertTrue(\"map size is : \" + map.size(), latch.await(5, TimeUnit.MINUTES));\n         assertEquals(0, map.size());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 506, "bugNodeStartChar": 19042, "bugNodeLength": 44, "fixLineNum": 506, "fixNodeStartChar": 19042, "fixNodeLength": 75, "sourceBeforeFix": "assertTrue(latch.await(5,TimeUnit.MINUTES))", "sourceAfterFix": "assertTrue(\"map size is : \" + map.size(),latch.await(5,TimeUnit.MINUTES))"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "18563f01c5a013657dbde3b245f0e735d1e86cec", "fixCommitParentSHA1": "58789ff69f21bd133ea27230fc5abd40914603a5", "bugFilePath": "hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java", "fixPatch": "diff --git a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\nindex cb63096..2971cad 100644\n--- a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n+++ b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n@@ -123,7 +123,7 @@\n     @Test\n     public void testMapConfig() {\n         assertNotNull(config);\n-        assertEquals(8, config.getMapConfigs().size());\n+        assertEquals(6, config.getMapConfigs().size());\n         MapConfig testMapConfig = config.getMapConfig(\"testMap\");\n         assertNotNull(testMapConfig);\n         assertEquals(\"testMap\", testMapConfig.getName());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 126, "bugNodeStartChar": 3344, "bugNodeLength": 46, "fixLineNum": 126, "fixNodeStartChar": 3344, "fixNodeLength": 46, "sourceBeforeFix": "assertEquals(8,config.getMapConfigs().size())", "sourceAfterFix": "assertEquals(6,config.getMapConfigs().size())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "e01cc95227e3c3f3a7f09a04b388c9faaafeff05", "fixCommitParentSHA1": "5e6c85d11a74a9fe258d53265519942c15cc3fbf", "bugFilePath": "hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java", "fixPatch": "diff --git a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\nindex cb63096..2971cad 100644\n--- a/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n+++ b/hazelcast-spring/src/test/java/com/hazelcast/spring/TestFullApplicationContext.java\n@@ -123,7 +123,7 @@\n     @Test\n     public void testMapConfig() {\n         assertNotNull(config);\n-        assertEquals(8, config.getMapConfigs().size());\n+        assertEquals(6, config.getMapConfigs().size());\n         MapConfig testMapConfig = config.getMapConfig(\"testMap\");\n         assertNotNull(testMapConfig);\n         assertEquals(\"testMap\", testMapConfig.getName());\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 126, "bugNodeStartChar": 3344, "bugNodeLength": 46, "fixLineNum": 126, "fixNodeStartChar": 3344, "fixNodeLength": 46, "sourceBeforeFix": "assertEquals(8,config.getMapConfigs().size())", "sourceAfterFix": "assertEquals(6,config.getMapConfigs().size())"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2f167f23f7360e2a909e3047838b59ee0e2a5cb4", "fixCommitParentSHA1": "7d4ba1332d4e71ebe7dc6647ae6a74ac55dfb6f5", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/QueryTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/QueryTest.java b/hazelcast/src/test/java/com/hazelcast/map/QueryTest.java\nindex cfff904..93d4aaa 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/QueryTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/QueryTest.java\n@@ -1592,7 +1592,7 @@\n             }.start();\n         }\n \n-        Assert.assertTrue(latch.await(1, TimeUnit.MINUTES));\n+        Assert.assertTrue(latch.await(5, TimeUnit.MINUTES));\n         Collection<HazelcastInstance> instances = factory.getAllHazelcastInstances();\n         Assert.assertEquals(nodes, instances.size());\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1595, "bugNodeStartChar": 69010, "bugNodeLength": 32, "fixLineNum": 1595, "fixNodeStartChar": 69010, "fixNodeLength": 32, "sourceBeforeFix": "latch.await(1,TimeUnit.MINUTES)", "sourceAfterFix": "latch.await(5,TimeUnit.MINUTES)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "287327fefa4c3393270a30a9ed3797752bb05b54", "fixCommitParentSHA1": "6d486790ac074146800d14fa71d2dbb25146c4dd", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/operation/ClearOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/operation/ClearOperation.java b/hazelcast/src/main/java/com/hazelcast/map/operation/ClearOperation.java\nindex 4043ede..1444174 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/operation/ClearOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/operation/ClearOperation.java\n@@ -29,7 +29,7 @@\n \n public class ClearOperation extends AbstractMapOperation implements BackupAwareOperation, PartitionAwareOperation {\n \n-    boolean shouldBackup = false;\n+    boolean shouldBackup = true;\n \n     public ClearOperation() {\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 32, "bugNodeStartChar": 1138, "bugNodeLength": 20, "fixLineNum": 32, "fixNodeStartChar": 1138, "fixNodeLength": 19, "sourceBeforeFix": "shouldBackup=false", "sourceAfterFix": "shouldBackup=true"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "85081893d8afd856a9a9e10d5f99255d45bce79a", "fixCommitParentSHA1": "daaaaa485920ffbda3766bf7a1f702b2280b24fc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java\nindex 9e241e9..494bd6d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java\n@@ -383,7 +383,7 @@\n \n         if (store != null) {\n             store.deleteAll(keysObject);\n-            toBeRemovedKeys.clear();\n+            toBeRemovedKeys.removeAll(keysToDelete);\n         }\n \n         clearRecordsMap(lockedRecords);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 386, "bugNodeStartChar": 14263, "bugNodeLength": 23, "fixLineNum": 386, "fixNodeStartChar": 14263, "fixNodeLength": 39, "sourceBeforeFix": "toBeRemovedKeys.clear()", "sourceAfterFix": "toBeRemovedKeys.removeAll(keysToDelete)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1b7db61b0e56c54c771ab34206774a6b5a992430", "fixCommitParentSHA1": "76957b67fceb8c237729f486b36def4b2e508004", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java\nindex 568c162..4e4cb0f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java\n@@ -384,7 +384,7 @@\n \n         if (store != null) {\n             store.deleteAll(keysObject);\n-            toBeRemovedKeys.clear();\n+            toBeRemovedKeys.removeAll(keysToDelete);\n         }\n \n         clearRecordsMap(lockedRecords);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 387, "bugNodeStartChar": 14264, "bugNodeLength": 23, "fixLineNum": 387, "fixNodeStartChar": 14264, "fixNodeLength": 39, "sourceBeforeFix": "toBeRemovedKeys.clear()", "sourceAfterFix": "toBeRemovedKeys.removeAll(keysToDelete)"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "ae9233fffeff545d037c55373eeeed5d4f7577a2", "fixCommitParentSHA1": "8ce1d49a45ecf2a8aec0f8815b30c8ef7776cb8b", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java b/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\nindex 7cb4aab..87f500e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\n@@ -292,7 +292,7 @@\n                 throw new HazelcastException(e);\n             }\n         }\n-        if (list.isEmpty()){\n+        if (!list.isEmpty()){\n             getItemQueue().addAll(list);\n             cancelEvictionIfExists();\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 295, "bugNodeStartChar": 9750, "bugNodeLength": 14, "fixLineNum": 295, "fixNodeStartChar": 9750, "fixNodeLength": 15, "sourceBeforeFix": "list.isEmpty()", "sourceAfterFix": "!list.isEmpty()"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "a575c08d308a20cfbd3714c11b590105f3af68d1", "fixCommitParentSHA1": "acf6c159ca34c81f37d025322b857406355161ba", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java b/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\nindex 7cb4aab..87f500e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\n@@ -292,7 +292,7 @@\n                 throw new HazelcastException(e);\n             }\n         }\n-        if (list.isEmpty()){\n+        if (!list.isEmpty()){\n             getItemQueue().addAll(list);\n             cancelEvictionIfExists();\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 295, "bugNodeStartChar": 9750, "bugNodeLength": 14, "fixLineNum": 295, "fixNodeStartChar": 9750, "fixNodeLength": 15, "sourceBeforeFix": "list.isEmpty()", "sourceAfterFix": "!list.isEmpty()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "b56f19ce0b5f70196abe2313e97b0a70f76b31ad", "fixCommitParentSHA1": "29a532c691292b57576df51654cf1b9c65bea0be", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/queue/tx/TransactionalQueueProxySupport.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/queue/tx/TransactionalQueueProxySupport.java b/hazelcast/src/main/java/com/hazelcast/queue/tx/TransactionalQueueProxySupport.java\nindex 9b545c8..ede5dc4 100644\n--- a/hazelcast/src/main/java/com/hazelcast/queue/tx/TransactionalQueueProxySupport.java\n+++ b/hazelcast/src/main/java/com/hazelcast/queue/tx/TransactionalQueueProxySupport.java\n@@ -112,7 +112,7 @@\n \n     public Data peekInternal(long timeout) {\n         final QueueItem offer = offeredQueue.peek();\n-        final TxnPeekOperation operation = new TxnPeekOperation(name, timeout, offer == null ? -1L : offer.getItemId(), tx.getTxnId());\n+        final TxnPeekOperation operation = new TxnPeekOperation(name, timeout, offer == null ? -1 : offer.getItemId(), tx.getTxnId());\n         try {\n             final Invocation invocation = getNodeEngine().getOperationService().createInvocationBuilder(QueueService.SERVICE_NAME, operation, partitionId).build();\n             final Future<QueueItem> f = invocation.invoke();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 115, "bugNodeStartChar": 5156, "bugNodeLength": 3, "fixLineNum": 115, "fixNodeStartChar": 5156, "fixNodeLength": 2, "sourceBeforeFix": "-1L", "sourceAfterFix": "-1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "29a532c691292b57576df51654cf1b9c65bea0be", "fixCommitParentSHA1": "a75554f4fb0a19ce71f7b95363e7ed7452b81a0a", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java b/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\nindex 69d334e..9f055a5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/queue/QueueContainer.java\n@@ -224,7 +224,7 @@\n     public QueueItem txnPeek(long offerId, String transactionId) {\n         QueueItem item = getItemQueue().peek();\n         if (item == null) {\n-            if ( offerId == -1L ){\n+            if ( offerId == -1 ){\n                 return null;\n             }\n             TxQueueItem txItem = txMap.get(offerId);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 227, "bugNodeStartChar": 7502, "bugNodeLength": 3, "fixLineNum": 227, "fixNodeStartChar": 7502, "fixNodeLength": 2, "sourceBeforeFix": "-1L", "sourceAfterFix": "-1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c2823f038abf5a036107e48508eceaedb0aa845", "fixCommitParentSHA1": "2f9e0647f02894a23a5d68e1c5fcb6a7c1d7a702", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java b/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java\nindex 3bc5b48..1aee17e 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java\n@@ -227,7 +227,7 @@\n         return this;\n     }\n \n-    public Collection<String> getAddressList() {\n+    public List<String> getAddresses() {\n         if (addressList.size() == 0) {\n             addAddress(\"localhost\");\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 230, "bugNodeStartChar": 7905, "bugNodeLength": 18, "fixLineNum": 230, "fixNodeStartChar": 7905, "fixNodeLength": 12, "sourceBeforeFix": "Collection<String>", "sourceAfterFix": "List<String>"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "2c2823f038abf5a036107e48508eceaedb0aa845", "fixCommitParentSHA1": "2f9e0647f02894a23a5d68e1c5fcb6a7c1d7a702", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex e1e253f..20ca110 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -560,7 +560,7 @@\n \n     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n-        for (String address : getClientConfig().getAddressList()) {\n+        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 563, "bugNodeStartChar": 22919, "bugNodeLength": 34, "fixLineNum": 563, "fixNodeStartChar": 22919, "fixNodeLength": 32, "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2c2823f038abf5a036107e48508eceaedb0aa845", "fixCommitParentSHA1": "2f9e0647f02894a23a5d68e1c5fcb6a7c1d7a702", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex e1e253f..20ca110 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -560,7 +560,7 @@\n \n     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n-        for (String address : getClientConfig().getAddressList()) {\n+        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 563, "bugNodeStartChar": 22919, "bugNodeLength": 34, "fixLineNum": 563, "fixNodeStartChar": 22919, "fixNodeLength": 32, "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "fixCommitParentSHA1": "14e34f95f0c497c731e8dae484bb371790d61d66", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java b/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java\nindex 9087608..51de350 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/config/ClientConfig.java\n@@ -229,7 +229,7 @@\n         return this;\n     }\n \n-    public Collection<String> getAddressList() {\n+    public List<String> getAddresses() {\n         if (addressList.size() == 0) {\n             addAddress(\"localhost\");\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 232, "bugNodeStartChar": 8093, "bugNodeLength": 18, "fixLineNum": 232, "fixNodeStartChar": 8093, "fixNodeLength": 12, "sourceBeforeFix": "Collection<String>", "sourceAfterFix": "List<String>"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "fixCommitParentSHA1": "14e34f95f0c497c731e8dae484bb371790d61d66", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex e1e253f..20ca110 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -560,7 +560,7 @@\n \n     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n-        for (String address : getClientConfig().getAddressList()) {\n+        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 563, "bugNodeStartChar": 22919, "bugNodeLength": 34, "fixLineNum": 563, "fixNodeStartChar": 22919, "fixNodeLength": 32, "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "fixCommitParentSHA1": "14e34f95f0c497c731e8dae484bb371790d61d66", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex e1e253f..20ca110 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -560,7 +560,7 @@\n \n     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n-        for (String address : getClientConfig().getAddressList()) {\n+        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 563, "bugNodeStartChar": 22919, "bugNodeLength": 34, "fixLineNum": 563, "fixNodeStartChar": 22919, "fixNodeLength": 32, "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "e78b610375a31d161665d2990bb6baa41933e0ee", "fixCommitParentSHA1": "8fc3e597b75f0e65a156200a9a40838e08d87f29", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 9334f31..80200f3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -196,7 +196,7 @@\n             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                 // add your owned entries to the map so they will be merged\n-                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n+                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 199, "bugNodeStartChar": 8704, "bugNodeLength": 32, "fixLineNum": 199, "fixNodeStartChar": 8704, "fixNodeLength": 30, "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "e78b610375a31d161665d2990bb6baa41933e0ee", "fixCommitParentSHA1": "8fc3e597b75f0e65a156200a9a40838e08d87f29", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 9334f31..80200f3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -196,7 +196,7 @@\n             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                 // add your owned entries to the map so they will be merged\n-                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n+                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 199, "bugNodeStartChar": 8704, "bugNodeLength": 32, "fixLineNum": 199, "fixNodeStartChar": 8704, "fixNodeLength": 30, "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "61e865ebbc51c172589f7f1ec9ef4ca4de62aa53", "fixCommitParentSHA1": "21ce480b22dff644396058dee23f1641d2ca99af", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 4bb21f0..87c51cf 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -194,7 +194,7 @@\n             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                 // add your owned entries to the map so they will be merged\n-                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n+                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 8590, "bugNodeLength": 32, "fixLineNum": 197, "fixNodeStartChar": 8590, "fixNodeLength": 30, "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "61e865ebbc51c172589f7f1ec9ef4ca4de62aa53", "fixCommitParentSHA1": "21ce480b22dff644396058dee23f1641d2ca99af", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 4bb21f0..87c51cf 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -194,7 +194,7 @@\n             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                 // add your owned entries to the map so they will be merged\n-                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n+                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 197, "bugNodeStartChar": 8590, "bugNodeLength": 32, "fixLineNum": 197, "fixNodeStartChar": 8590, "fixNodeLength": 30, "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "fc319b0ad3b3163f7c20be7900d975fa7b9d59a0", "fixCommitParentSHA1": "b0ae186774c86c05b8b598b8386daefb11a58e9d", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java b/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java\nindex 5c51100..866c716 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java\n@@ -581,7 +581,7 @@\n                     final TransactionalMap<Object, Object> txMap = context.getMap(\"default\");\n                     txMap.put(\"5\", \"5\");\n                     assertEquals(3, txMap.keySet().size());\n-                    assertEquals(3, map2.keySet().size());\n+                    assertEquals(2, map2.keySet().size());\n \n                     throw new DummyUncheckedHazelcastTestException();\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 584, "bugNodeStartChar": 24555, "bugNodeLength": 37, "fixLineNum": 584, "fixNodeStartChar": 24555, "fixNodeLength": 37, "sourceBeforeFix": "assertEquals(3,map2.keySet().size())", "sourceAfterFix": "assertEquals(2,map2.keySet().size())"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "1c7750f426c0b90c0ac107b404ecbb8b7d33553d", "fixCommitParentSHA1": "77c6d31553d0e23f45032e700ca4a8c398240e1e", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex 23490af..f9915a2 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -250,7 +250,7 @@\n     private void _sendAndHandle(ConnectionFactory connectionFactory, Object obj, ResponseHandler handler) throws IOException {\n         ResponseStream stream = null;\n         while (stream == null) {\n-            if (active){\n+            if (!active){\n                 throw new HazelcastInstanceNotActiveException();\n             }\n             Connection conn = null;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 253, "bugNodeStartChar": 9804, "bugNodeLength": 6, "fixLineNum": 253, "fixNodeStartChar": 9804, "fixNodeLength": 7, "sourceBeforeFix": "active", "sourceAfterFix": "!active"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "09cb37c536745c61d35b892946d539cb7b0a3713", "fixCommitParentSHA1": "334c15fdd9bef5575d943d97f7b97042e5c6b021", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\nindex 23490af..f9915a2 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientClusterServiceImpl.java\n@@ -250,7 +250,7 @@\n     private void _sendAndHandle(ConnectionFactory connectionFactory, Object obj, ResponseHandler handler) throws IOException {\n         ResponseStream stream = null;\n         while (stream == null) {\n-            if (active){\n+            if (!active){\n                 throw new HazelcastInstanceNotActiveException();\n             }\n             Connection conn = null;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 253, "bugNodeStartChar": 9804, "bugNodeLength": 6, "fixLineNum": 253, "fixNodeStartChar": 9804, "fixNodeLength": 7, "sourceBeforeFix": "active", "sourceAfterFix": "!active"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "fd00b428998b79347ff7bd3489d73603a4fd0f8b", "fixCommitParentSHA1": "d284aea3cb9eeed47dcda65369e4bcf61eccfb03", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\nindex 52605b9..7a59187 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n@@ -64,7 +64,7 @@\n     }\n \n     public boolean returnsResponse() {\n-        return false;\n+        return true;\n     }\n \n     public Object getResponse() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 2182, "bugNodeLength": 13, "fixLineNum": 67, "fixNodeStartChar": 2182, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "16cc2fd8518fd13cfd72f84e8e6f469cc590d11c", "fixCommitParentSHA1": "0424ff7fc3e0443914cc26d007d3570d5158e2f0", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\nindex 52605b9..7a59187 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/operation/UpdateMapConfigOperation.java\n@@ -64,7 +64,7 @@\n     }\n \n     public boolean returnsResponse() {\n-        return false;\n+        return true;\n     }\n \n     public Object getResponse() {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 67, "bugNodeStartChar": 2182, "bugNodeLength": 13, "fixLineNum": 67, "fixNodeStartChar": 2182, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "4f002d28bb8061ff5eb5ce3b1f41c2e7c1ae69fc", "fixCommitParentSHA1": "d53b36c4a8781aaa4b7c5e1876b6d2253ece7d2c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 877, "bugNodeStartChar": 41202, "bugNodeLength": 30, "fixLineNum": 877, "fixNodeStartChar": 41202, "fixNodeLength": 30, "sourceBeforeFix": "maxSize > (used / 1024 / 1024)", "sourceAfterFix": "maxSize < (used / 1024 / 1024)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "4f002d28bb8061ff5eb5ce3b1f41c2e7c1ae69fc", "fixCommitParentSHA1": "d53b36c4a8781aaa4b7c5e1876b6d2253ece7d2c", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 879, "bugNodeStartChar": 41286, "bugNodeLength": 24, "fixLineNum": 879, "fixNodeStartChar": 41286, "fixNodeLength": 24, "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "5ecca6532856178f8802d0a1adde51b0632bc043", "fixCommitParentSHA1": "6fc7ad3cde0de261ef3e963c728a8dc6616d63db", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 877, "bugNodeStartChar": 41202, "bugNodeLength": 30, "fixLineNum": 877, "fixNodeStartChar": 41202, "fixNodeLength": 30, "sourceBeforeFix": "maxSize > (used / 1024 / 1024)", "sourceAfterFix": "maxSize < (used / 1024 / 1024)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "5ecca6532856178f8802d0a1adde51b0632bc043", "fixCommitParentSHA1": "6fc7ad3cde0de261ef3e963c728a8dc6616d63db", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 879, "bugNodeStartChar": 41286, "bugNodeLength": 24, "fixLineNum": 879, "fixNodeStartChar": 41286, "fixNodeLength": 24, "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "62bef4ce7538572206d1f689d60a5a45d88f26af", "fixCommitParentSHA1": "52191d194f2a2429cc036a483b7aebb041a7b533", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 877, "bugNodeStartChar": 41202, "bugNodeLength": 30, "fixLineNum": 877, "fixNodeStartChar": 41202, "fixNodeLength": 30, "sourceBeforeFix": "maxSize > (used / 1024 / 1024)", "sourceAfterFix": "maxSize < (used / 1024 / 1024)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "62bef4ce7538572206d1f689d60a5a45d88f26af", "fixCommitParentSHA1": "52191d194f2a2429cc036a483b7aebb041a7b533", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 879, "bugNodeStartChar": 41286, "bugNodeLength": 24, "fixLineNum": 879, "fixNodeStartChar": 41286, "fixNodeLength": 24, "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "463a98f7c53d6c46d2a8e20d744298644ca6880c", "fixCommitParentSHA1": "1237ff6232ff87ac65126ad4e9c779e2f5455720", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 877, "bugNodeStartChar": 41202, "bugNodeLength": 30, "fixLineNum": 877, "fixNodeStartChar": 41202, "fixNodeLength": 30, "sourceBeforeFix": "maxSize > (used / 1024 / 1024)", "sourceAfterFix": "maxSize < (used / 1024 / 1024)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "463a98f7c53d6c46d2a8e20d744298644ca6880c", "fixCommitParentSHA1": "1237ff6232ff87ac65126ad4e9c779e2f5455720", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 2fde1d3..fa78d49 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -874,9 +874,9 @@\n                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n-                    return maxSize > (used / 1024 / 1024);\n+                    return maxSize < (used / 1024 / 1024);\n                 } else {\n-                    return maxSize > (used / total);\n+                    return maxSize < (used / total);\n                 }\n             }\n             return false;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 879, "bugNodeStartChar": 41286, "bugNodeLength": 24, "fixLineNum": 879, "fixNodeStartChar": 41286, "fixNodeLength": 24, "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "950656a1fa6775e52d13648e6646bdadbfb4e173", "fixCommitParentSHA1": "c9f7bbfd83f0daf94c36cc5b246afa9153fb8fd4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java b/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java\nindex 9059937..3fc88fd 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java\n@@ -83,7 +83,7 @@\n                 return map.putIfAbsent(key, value);\n             case REPLACE:\n                 return map.replace(key, value);\n-            case REPLACE_IS_SAME:\n+            case REPLACE_IF_SAME:\n                 return map.replace(key, value, newValue);\n             case SET:\n                 map.set(key, value);\n@@ -142,7 +142,7 @@\n         PUT(4),\n         PUT_IF_ABSENT(5),\n         REPLACE(6),\n-        REPLACE_IS_SAME(7),\n+        REPLACE_IF_SAME(7),\n         SET(8),\n         REMOVE(9),\n         DELETE(10),\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 86, "bugNodeStartChar": 2866, "bugNodeLength": 21, "fixLineNum": 86, "fixNodeStartChar": 2866, "fixNodeLength": 21, "sourceBeforeFix": "case REPLACE_IS_SAME: ", "sourceAfterFix": "case REPLACE_IF_SAME: "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "950656a1fa6775e52d13648e6646bdadbfb4e173", "fixCommitParentSHA1": "c9f7bbfd83f0daf94c36cc5b246afa9153fb8fd4", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java b/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java\nindex 9059937..3fc88fd 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/client/TxnMapRequest.java\n@@ -83,7 +83,7 @@\n                 return map.putIfAbsent(key, value);\n             case REPLACE:\n                 return map.replace(key, value);\n-            case REPLACE_IS_SAME:\n+            case REPLACE_IF_SAME:\n                 return map.replace(key, value, newValue);\n             case SET:\n                 map.set(key, value);\n@@ -142,7 +142,7 @@\n         PUT(4),\n         PUT_IF_ABSENT(5),\n         REPLACE(6),\n-        REPLACE_IS_SAME(7),\n+        REPLACE_IF_SAME(7),\n         SET(8),\n         REMOVE(9),\n         DELETE(10),\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 145, "bugNodeStartChar": 4524, "bugNodeLength": 18, "fixLineNum": 145, "fixNodeStartChar": 4524, "fixNodeLength": 18, "sourceBeforeFix": "REPLACE_IS_SAME(7)", "sourceAfterFix": "REPLACE_IF_SAME(7)"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "32f07f740b72a03fa16285f76cc70f3f3b45d14e", "fixCommitParentSHA1": "f1e667193683689ef8ded2eb6016dc314680d5f2", "bugFilePath": "hazelcast-spring/src/main/java/com/hazelcast/spring/cache/HazelcastCache.java", "fixPatch": "diff --git a/hazelcast-spring/src/main/java/com/hazelcast/spring/cache/HazelcastCache.java b/hazelcast-spring/src/main/java/com/hazelcast/spring/cache/HazelcastCache.java\nindex f532ab8..619f181 100644\n--- a/hazelcast-spring/src/main/java/com/hazelcast/spring/cache/HazelcastCache.java\n+++ b/hazelcast-spring/src/main/java/com/hazelcast/spring/cache/HazelcastCache.java\n@@ -57,7 +57,7 @@\n \n     public void put(final Object key, final Object value) {\n         if (key != null) {\n-            map.set(key, toStoreValue(value), 0, TimeUnit.SECONDS);\n+            map.set(key, toStoreValue(value));\n         }\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 60, "bugNodeStartChar": 1724, "bugNodeLength": 54, "fixLineNum": 60, "fixNodeStartChar": 1724, "fixNodeLength": 33, "sourceBeforeFix": "map.set(key,toStoreValue(value),0,TimeUnit.SECONDS)", "sourceAfterFix": "map.set(key,toStoreValue(value))"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "a508cf63f42fb7cff448b7d9cb9db296eb701dd4", "fixCommitParentSHA1": "73b2d7ece0ff4e8316dcb8cd984ac85822cea9da", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/concurrentmap/PutAllCallable.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/concurrentmap/PutAllCallable.java b/hazelcast/src/main/java/com/hazelcast/impl/concurrentmap/PutAllCallable.java\nindex a3721ca..2e921f0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/concurrentmap/PutAllCallable.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/concurrentmap/PutAllCallable.java\n@@ -63,7 +63,7 @@\n             for (KeyValue keyValue : pairs.getKeyValues()) {\n                 Object value = (cmap.getMapIndexService().hasIndexedAttributes()) ?\n                         keyValue.getValue() : keyValue.getValueData();\n-                map.set(keyValue.getKeyData(), value, 0, TimeUnit.SECONDS);\n+                map.set(keyValue.getKeyData(), value);\n             }\n         }\n         return Boolean.TRUE;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 66, "bugNodeStartChar": 2356, "bugNodeLength": 58, "fixLineNum": 66, "fixNodeStartChar": 2356, "fixNodeLength": 37, "sourceBeforeFix": "map.set(keyValue.getKeyData(),value,0,TimeUnit.SECONDS)", "sourceAfterFix": "map.set(keyValue.getKeyData(),value)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "fixCommitParentSHA1": "1a44d58d58cd9602a52a8aacf757eea98d05e975", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java b/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java\nindex 628f2e2..ef40c24 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java\n@@ -665,7 +665,7 @@\n         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n \n         public void processCall(Node node, Packet packet) {\n-            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);\n+            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);\n@@ -688,7 +688,7 @@\n     private class SemaphoreCancelAcquireHandler extends ClientOperationHandler {\n         public void processCall(Node node, Packet packet) {\n             ConcurrentMapManager.MSemaphore msemaphore = node.concurrentMapManager.new MSemaphore();\n-            packet.setValue(toData(msemaphore.cancelAcquire(toData(packet.name))));\n+            packet.setValue(toData(msemaphore.cancelAcquire(toData(packet.name.substring(Prefix.SEMAPHORE.length())))));\n         }\n     }\n \n@@ -720,7 +720,7 @@\n         void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer permits, boolean detach) {\n             if (detach) {\n                 semaphoreProxy.releaseDetach(permits);\n-                getClientEndpoint(packet.conn).attachDetachPermits(packet.name, -permits);\n+                getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), -permits);\n             } else {\n                 semaphoreProxy.release(permits);\n             }\n@@ -734,7 +734,7 @@\n                 if (attach) {\n                     acquired = semaphoreProxy.tryAcquireAttach(permits, packet.timeout, TimeUnit.MILLISECONDS);\n                     if (acquired) {\n-                        getClientEndpoint(packet.conn).attachDetachPermits(packet.name, permits);\n+                        getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), permits);\n                     }\n                 } else {\n                     acquired = semaphoreProxy.tryAcquire(permits, packet.timeout, TimeUnit.MILLISECONDS);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 668, "bugNodeStartChar": 31349, "bugNodeLength": 33, "fixLineNum": 668, "fixNodeStartChar": 31349, "fixNodeLength": 43, "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "fixCommitParentSHA1": "1a44d58d58cd9602a52a8aacf757eea98d05e975", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java b/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java\nindex 628f2e2..ef40c24 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ClientHandlerService.java\n@@ -665,7 +665,7 @@\n         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n \n         public void processCall(Node node, Packet packet) {\n-            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);\n+            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);\n@@ -688,7 +688,7 @@\n     private class SemaphoreCancelAcquireHandler extends ClientOperationHandler {\n         public void processCall(Node node, Packet packet) {\n             ConcurrentMapManager.MSemaphore msemaphore = node.concurrentMapManager.new MSemaphore();\n-            packet.setValue(toData(msemaphore.cancelAcquire(toData(packet.name))));\n+            packet.setValue(toData(msemaphore.cancelAcquire(toData(packet.name.substring(Prefix.SEMAPHORE.length())))));\n         }\n     }\n \n@@ -720,7 +720,7 @@\n         void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer permits, boolean detach) {\n             if (detach) {\n                 semaphoreProxy.releaseDetach(permits);\n-                getClientEndpoint(packet.conn).attachDetachPermits(packet.name, -permits);\n+                getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), -permits);\n             } else {\n                 semaphoreProxy.release(permits);\n             }\n@@ -734,7 +734,7 @@\n                 if (attach) {\n                     acquired = semaphoreProxy.tryAcquireAttach(permits, packet.timeout, TimeUnit.MILLISECONDS);\n                     if (acquired) {\n-                        getClientEndpoint(packet.conn).attachDetachPermits(packet.name, permits);\n+                        getClientEndpoint(packet.conn).attachDetachPermits(semaphoreProxy.getName(), permits);\n                     }\n                 } else {\n                     acquired = semaphoreProxy.tryAcquire(permits, packet.timeout, TimeUnit.MILLISECONDS);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 668, "bugNodeStartChar": 31349, "bugNodeLength": 33, "fixLineNum": 668, "fixNodeStartChar": 31349, "fixNodeLength": 43, "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "1fc5a3d567e5854f3cfe9a2e3f0cb8b808515db0", "fixCommitParentSHA1": "59ad8e00cc15985fa6ab170f5c5a256439009287", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\nindex 93812f9..b19b7db 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/EvictionTest.java\n@@ -503,7 +503,7 @@\n         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n-        assertTrue(latch.await(1, TimeUnit.MINUTES));\n+        assertTrue(latch.await(5, TimeUnit.MINUTES));\n         assertEquals(0, map.size());\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 506, "bugNodeStartChar": 19053, "bugNodeLength": 32, "fixLineNum": 506, "fixNodeStartChar": 19053, "fixNodeLength": 32, "sourceBeforeFix": "latch.await(1,TimeUnit.MINUTES)", "sourceAfterFix": "latch.await(5,TimeUnit.MINUTES)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "12ba6c7f97598778c6034c58616508b843bc4ea7", "fixCommitParentSHA1": "ce5767d6e2538e77e949d0c4d539d2a61c4719f6", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/util/QueueBasedObjectPool.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/util/QueueBasedObjectPool.java b/hazelcast-client/src/main/java/com/hazelcast/client/util/QueueBasedObjectPool.java\nindex 8e7fb80..504ab09 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/util/QueueBasedObjectPool.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/util/QueueBasedObjectPool.java\n@@ -62,7 +62,7 @@\n     }\n \n     public void destroy() {\n-        active = true;\n+        active = false;\n         final Collection<E> c = new LinkedList<E>();\n         queue.drainTo(c);\n         for (E e : c) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 65, "bugNodeStartChar": 1871, "bugNodeLength": 13, "fixLineNum": 65, "fixNodeStartChar": 1871, "fixNodeLength": 14, "sourceBeforeFix": "active=true", "sourceAfterFix": "active=false"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "048c1d20bae99c00f76b088fc9fdd7c286deb7b8", "fixCommitParentSHA1": "b844a7400cdd9f4961ba30ebb1439390aac9fd61", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex ec449b8..39f7144 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -561,10 +561,9 @@\n                     void invalidate(EntryEvent<K, V> event){\n                         System.err.println(\"invalidate\");\n                         final Data key = toData(event.getKey());\n-//                        nearCache.invalidate(key);\n-                        nearCache.put(key, event.getValue());\n+                        nearCache.invalidate(key);\n                     }\n-                }, true);\n+                }, false);\n             }\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 565, "bugNodeStartChar": 21523, "bugNodeLength": 36, "fixLineNum": 564, "fixNodeStartChar": 21470, "fixNodeLength": 25, "sourceBeforeFix": "nearCache.put(key,event.getValue())", "sourceAfterFix": "nearCache.invalidate(key)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "048c1d20bae99c00f76b088fc9fdd7c286deb7b8", "fixCommitParentSHA1": "b844a7400cdd9f4961ba30ebb1439390aac9fd61", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex ec449b8..39f7144 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -561,10 +561,9 @@\n                     void invalidate(EntryEvent<K, V> event){\n                         System.err.println(\"invalidate\");\n                         final Data key = toData(event.getKey());\n-//                        nearCache.invalidate(key);\n-                        nearCache.put(key, event.getValue());\n+                        nearCache.invalidate(key);\n                     }\n-                }, true);\n+                }, false);\n             }\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 544, "bugNodeStartChar": 20671, "bugNodeLength": 936, "fixLineNum": 544, "fixNodeStartChar": 20671, "fixNodeLength": 937, "sourceBeforeFix": "addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println(\"invalidate\");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,true)", "sourceAfterFix": "addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println(\"invalidate\");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,false)"}, {"bugType": "CHANGE_OPERAND", "fixCommitSHA1": "fceec74c60a1d72c1582f9d8871cbe1a0eb37fcf", "fixCommitParentSHA1": "b67cbebd9a050c7abb1bd2ef090199af06008b7e", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java b/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java\nindex e843b07..8a934b9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java\n@@ -148,7 +148,7 @@\n     }\n \n     public ILock getLock(Object key) {\n-        if (name == null) {\n+        if (key == null) {\n             throw new NullPointerException(\"Retrieving a lock instance with a null key is not allowed!\");\n         }\n         return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 151, "bugNodeStartChar": 5804, "bugNodeLength": 12, "fixLineNum": 151, "fixNodeStartChar": 5804, "fixNodeLength": 11, "sourceBeforeFix": "name == null", "sourceAfterFix": "key == null"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fceec74c60a1d72c1582f9d8871cbe1a0eb37fcf", "fixCommitParentSHA1": "b67cbebd9a050c7abb1bd2ef090199af06008b7e", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java b/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java\nindex e843b07..8a934b9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/HazelcastInstanceImpl.java\n@@ -148,7 +148,7 @@\n     }\n \n     public ILock getLock(Object key) {\n-        if (name == null) {\n+        if (key == null) {\n             throw new NullPointerException(\"Retrieving a lock instance with a null key is not allowed!\");\n         }\n         return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 151, "bugNodeStartChar": 5804, "bugNodeLength": 12, "fixLineNum": 151, "fixNodeStartChar": 5804, "fixNodeLength": 11, "sourceBeforeFix": "name == null", "sourceAfterFix": "key == null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "aa82999d9d18f5c818216aac842929c02ab86be9", "fixCommitParentSHA1": "3051b9f3ec52f11f3eee60f62da85b47b3760557", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java\nindex 09f0853..4037115 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java\n@@ -74,7 +74,7 @@\n             Throwable error = null;\n             for (int i = 0; i < 100; i++) {\n                 /**\n-                 * Instead of reusing the ServerSocket/ServerSocketChannel, we are going to close replace them on\n+                 * Instead of reusing the ServerSocket/ServerSocketChannel, we are going to close and replace them on\n                  * every attempt to find a free port. The reason to do this is because in some cases, when concurrent\n                  * threads/processes try to acquire the same port, the ServerSocket gets corrupted and isn't able to find\n                  * any free port at all (no matter if there are more than enough free ports available). We have seen this\n@@ -110,7 +110,7 @@\n                     }\n                 }\n             }\n-            if (serverSocket == null) {\n+            if (serverSocket == null || !serverSocket.isBound()) {\n                 throw new HazelcastException(\"ServerSocket bind has failed. Hazelcast cannot start! \" +\n                         \"config-port: \" + networkConfig.getPort() + \", latest-port: \" + port, error);\n             }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 113, "bugNodeStartChar": 5029, "bugNodeLength": 20, "fixLineNum": 113, "fixNodeStartChar": 5029, "fixNodeLength": 47, "sourceBeforeFix": "serverSocket == null", "sourceAfterFix": "serverSocket == null || !serverSocket.isBound()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "aa82999d9d18f5c818216aac842929c02ab86be9", "fixCommitParentSHA1": "3051b9f3ec52f11f3eee60f62da85b47b3760557", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java b/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java\nindex 09f0853..4037115 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/DefaultAddressPicker.java\n@@ -74,7 +74,7 @@\n             Throwable error = null;\n             for (int i = 0; i < 100; i++) {\n                 /**\n-                 * Instead of reusing the ServerSocket/ServerSocketChannel, we are going to close replace them on\n+                 * Instead of reusing the ServerSocket/ServerSocketChannel, we are going to close and replace them on\n                  * every attempt to find a free port. The reason to do this is because in some cases, when concurrent\n                  * threads/processes try to acquire the same port, the ServerSocket gets corrupted and isn't able to find\n                  * any free port at all (no matter if there are more than enough free ports available). We have seen this\n@@ -110,7 +110,7 @@\n                     }\n                 }\n             }\n-            if (serverSocket == null) {\n+            if (serverSocket == null || !serverSocket.isBound()) {\n                 throw new HazelcastException(\"ServerSocket bind has failed. Hazelcast cannot start! \" +\n                         \"config-port: \" + networkConfig.getPort() + \", latest-port: \" + port, error);\n             }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 113, "bugNodeStartChar": 5029, "bugNodeLength": 20, "fixLineNum": 113, "fixNodeStartChar": 5029, "fixNodeLength": 47, "sourceBeforeFix": "serverSocket == null", "sourceAfterFix": "serverSocket == null || !serverSocket.isBound()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "2ee3a88dcc211304bd91f236a5e09c98971a59a0", "fixCommitParentSHA1": "7eb50e6c353bb90114db55870b43832a67592299", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/management/ManagementCenterService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/management/ManagementCenterService.java b/hazelcast/src/main/java/com/hazelcast/management/ManagementCenterService.java\nindex f1c1f27..5132ddf 100644\n--- a/hazelcast/src/main/java/com/hazelcast/management/ManagementCenterService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/management/ManagementCenterService.java\n@@ -531,7 +531,7 @@\n                 GroupConfig groupConfig = instance.getConfig().getGroupConfig();\n                 while (running.get()) {\n                     if (versionMismatch) {\n-                        Thread.sleep(1000 * 5);\n+                        Thread.sleep(1000 * 60);\n                         versionMismatch = false;\n                     }\n                     try {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 534, "bugNodeStartChar": 25046, "bugNodeLength": 8, "fixLineNum": 534, "fixNodeStartChar": 25046, "fixNodeLength": 9, "sourceBeforeFix": "1000 * 5", "sourceAfterFix": "1000 * 60"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "4a58fb4210d1220403a0c275dedb64b6467664e5", "fixCommitParentSHA1": "cf6f5dfde05d72dbb37fd817a6e2df1cd97ed7a7", "bugFilePath": "hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java", "fixPatch": "diff --git a/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java b/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java\nindex a10a802..5ea97bc 100644\n--- a/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java\n+++ b/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java\n@@ -193,7 +193,7 @@\n                 if (v.getLock() == LOCK_SUCCESS) {\n                     continue;\n                 }\n-                if (v.getCreationTime() + timeToLive > now) {\n+                if (v.getCreationTime() + timeToLive < now) {\n                     iter.remove();\n                 } else if (maxSize > 0 && maxSize != Integer.MAX_VALUE) {\n                     if (entries == null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 196, "bugNodeStartChar": 7051, "bugNodeLength": 38, "fixLineNum": 196, "fixNodeStartChar": 7051, "fixNodeLength": 38, "sourceBeforeFix": "v.getCreationTime() + timeToLive > now", "sourceAfterFix": "v.getCreationTime() + timeToLive < now"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "21186d3c4cf243e383215d106b2228cc09231bc4", "fixCommitParentSHA1": "415a68b4284c9b27f12bc593c3c87b42aca08dac", "bugFilePath": "hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java", "fixPatch": "diff --git a/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java b/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java\nindex 428c489..fb45dce 100644\n--- a/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java\n+++ b/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/local/LocalRegionCache.java\n@@ -193,7 +193,7 @@\n                 if (v.getLock() == LOCK_SUCCESS) {\n                     continue;\n                 }\n-                if (v.getCreationTime() + timeToLive > now) {\n+                if (v.getCreationTime() + timeToLive < now) {\n                     iter.remove();\n                 } else if (maxSize > 0 && maxSize != Integer.MAX_VALUE) {\n                     if (entries == null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 196, "bugNodeStartChar": 7060, "bugNodeLength": 38, "fixLineNum": 196, "fixNodeStartChar": 7060, "fixNodeLength": 38, "sourceBeforeFix": "v.getCreationTime() + timeToLive > now", "sourceAfterFix": "v.getCreationTime() + timeToLive < now"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "fd7865e44d4101c9d625c5835e14a2851a8b34bc", "fixCommitParentSHA1": "073807a1fc8a473d69d96f1ff8b8e706ad2810da", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ExecutorServiceClientProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ExecutorServiceClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ExecutorServiceClientProxy.java\nindex 10e9c08..634354b 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ExecutorServiceClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ExecutorServiceClientProxy.java\n@@ -234,7 +234,7 @@\n     }\n \n     public <T> Future<T> submit(Runnable task, T result) {\n-        return submit(new RunnableAdapter<T>(task, result));\n+        return submit(new RunnableAdapter<T>(task));\n     }\n \n     public Future<?> submit(Runnable task) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 237, "bugNodeStartChar": 8489, "bugNodeLength": 36, "fixLineNum": 237, "fixNodeStartChar": 8489, "fixNodeLength": 28, "sourceBeforeFix": "new RunnableAdapter<T>(task,result)", "sourceAfterFix": "new RunnableAdapter<T>(task)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a93c474127690f174eb2c027e6fde61eba3d993a", "fixCommitParentSHA1": "cbbd7d1657b7460ae5ce1000375c66ab68017f4f", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 148c195..0482f7a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -586,7 +586,7 @@\n                     oldValue = oldValue != null ? oldValue : toObject(dataOldValue);\n                     testValue = oldValue;\n                 } else {\n-                    value = value != null ? value : toObject(value);\n+                    value = value != null ? value : toObject(dataValue);\n                     testValue = value;\n                 }\n                 key = key != null ? key : toObject(key);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 589, "bugNodeStartChar": 26285, "bugNodeLength": 15, "fixLineNum": 589, "fixNodeStartChar": 26285, "fixNodeLength": 19, "sourceBeforeFix": "toObject(value)", "sourceAfterFix": "toObject(dataValue)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "fixCommitParentSHA1": "cf15cd3b10e44f32f711918ce2644c92e1404492", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\nindex 86ad42e..a6dafbb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n@@ -97,7 +97,7 @@\n     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n@@ -107,7 +107,7 @@\n     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 100, "bugNodeStartChar": 3306, "bugNodeLength": 39, "fixLineNum": 100, "fixNodeStartChar": 3306, "fixNodeLength": 36, "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "fixCommitParentSHA1": "cf15cd3b10e44f32f711918ce2644c92e1404492", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\nindex 86ad42e..a6dafbb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n@@ -97,7 +97,7 @@\n     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n@@ -107,7 +107,7 @@\n     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 100, "bugNodeStartChar": 3306, "bugNodeLength": 39, "fixLineNum": 100, "fixNodeStartChar": 3306, "fixNodeLength": 36, "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "fixCommitParentSHA1": "cf15cd3b10e44f32f711918ce2644c92e1404492", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\nindex 86ad42e..a6dafbb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n@@ -97,7 +97,7 @@\n     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n@@ -107,7 +107,7 @@\n     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 3633, "bugNodeLength": 39, "fixLineNum": 110, "fixNodeStartChar": 3633, "fixNodeLength": 36, "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "fixCommitParentSHA1": "cf15cd3b10e44f32f711918ce2644c92e1404492", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\nindex 86ad42e..a6dafbb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/LifecycleServiceImpl.java\n@@ -97,7 +97,7 @@\n     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n@@ -107,7 +107,7 @@\n     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n-            instance.managementService.unregister();\n+            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 110, "bugNodeStartChar": 3633, "bugNodeLength": 39, "fixLineNum": 110, "fixNodeStartChar": 3633, "fixNodeLength": 36, "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ed4c6f40f0d1383f7457677f1899903d764eaf17", "fixCommitParentSHA1": "a6e93b4eb714011e524df69fa6414a4951d16e55", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java b/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java\nindex 972001e..08a72f8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java\n@@ -330,7 +330,7 @@\n         map.put(Command.MMCONTAINSENTRY, new ContainsEntryHandler(this));\n         map.put(Command.MMKEYS, new MMKeysHandler(this));\n         map.put(Command.MMLOCK, new LockHandler(this));\n-        map.put(Command.MMUNLOCK, new MMUnlockHandler(this));\n+        map.put(Command.MMUNLOCK, new UnlockHandler(this));\n         map.put(Command.MMTRYLOCK, new TryLockHandler(this));\n         map.put(Command.MMLISTEN, new ListenHandler(this));\n         return map;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 333, "bugNodeStartChar": 15244, "bugNodeLength": 25, "fixLineNum": 333, "fixNodeStartChar": 15244, "fixNodeLength": 23, "sourceBeforeFix": "new MMUnlockHandler(this)", "sourceAfterFix": "new UnlockHandler(this)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a6e93b4eb714011e524df69fa6414a4951d16e55", "fixCommitParentSHA1": "41ed786a70e506815be9422547b82d230f29b2af", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java b/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java\nindex 08a72f8..972001e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/CollectionService.java\n@@ -330,7 +330,7 @@\n         map.put(Command.MMCONTAINSENTRY, new ContainsEntryHandler(this));\n         map.put(Command.MMKEYS, new MMKeysHandler(this));\n         map.put(Command.MMLOCK, new LockHandler(this));\n-        map.put(Command.MMUNLOCK, new UnlockHandler(this));\n+        map.put(Command.MMUNLOCK, new MMUnlockHandler(this));\n         map.put(Command.MMTRYLOCK, new TryLockHandler(this));\n         map.put(Command.MMLISTEN, new ListenHandler(this));\n         return map;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 333, "bugNodeStartChar": 15244, "bugNodeLength": 23, "fixLineNum": 333, "fixNodeStartChar": 15244, "fixNodeLength": 25, "sourceBeforeFix": "new UnlockHandler(this)", "sourceAfterFix": "new MMUnlockHandler(this)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "a29ed0be3c5df8794550d92906237cb2d7349104", "fixCommitParentSHA1": "fa4c035e1ea96010a7b01ee908fa4c7f45ac4826", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/management/ManagementCenterService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/management/ManagementCenterService.java b/hazelcast/src/main/java/com/hazelcast/impl/management/ManagementCenterService.java\nindex 11a1590..2fcd3e6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/management/ManagementCenterService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/management/ManagementCenterService.java\n@@ -308,7 +308,7 @@\n             register(new RunGcRequest());\n             register(new GetMemberSystemPropertiesRequest());\n             register(new GetMapEntryRequest());\n-            register(new LogVersionMismatchRequest());\n+            register(new VersionMismatchLogRequest());\n             register(new ShutdownMemberRequest());\n         }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 311, "bugNodeStartChar": 13750, "bugNodeLength": 31, "fixLineNum": 311, "fixNodeStartChar": 13750, "fixNodeLength": 31, "sourceBeforeFix": "new LogVersionMismatchRequest()", "sourceAfterFix": "new VersionMismatchLogRequest()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3dc118f61cd547d7679d562fc8038c59372795af", "fixCommitParentSHA1": "90a42f2576515e870e49cd66d4b973609cf1e312", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java\nindex 40bb342..3160244 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java\n@@ -1784,7 +1784,7 @@\n                     if (oldObject == null) {\n                         return Boolean.FALSE;\n                     } else {\n-                        if (expectedValue.equals(oldValue)) {\n+                        if (expectedValue.equals(oldObject)) {\n                             txn.attachPutOp(name, key, toData(newValue), false);\n                             return Boolean.TRUE;\n                         } else {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1787, "bugNodeStartChar": 76498, "bugNodeLength": 30, "fixLineNum": 1787, "fixNodeStartChar": 76498, "fixNodeLength": 31, "sourceBeforeFix": "expectedValue.equals(oldValue)", "sourceAfterFix": "expectedValue.equals(oldObject)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "1aca2ceab66757dabb1d5bd8cff6c5f793ce4669", "fixCommitParentSHA1": "4e5a327e42c2c978808d6e2c1adfba745c947d84", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/FactoryImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/FactoryImpl.java b/hazelcast/src/main/java/com/hazelcast/impl/FactoryImpl.java\nindex 499ac7a..02b9726 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/FactoryImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/FactoryImpl.java\n@@ -592,7 +592,7 @@\n                         if (mapStoreConfig != null && mapStoreConfig.isEnabled()) {\n                             cmap.setInitState(InitializationState.INITIALIZING);\n                             try {\n-                                ExecutorService es = getExecutorService();\n+                                ExecutorService es = getExecutorService(\"hz.initialization\");\n                                 final Set<Member> members = new HashSet<Member>(getCluster().getMembers());\n                                 members.remove(node.localMember);\n                                 final MultiTask task = new MultiTask(new InitializeMap(mProxy.getName()), members);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 595, "bugNodeStartChar": 21357, "bugNodeLength": 20, "fixLineNum": 595, "fixNodeStartChar": 21357, "fixNodeLength": 39, "sourceBeforeFix": "getExecutorService()", "sourceAfterFix": "getExecutorService(\"hz.initialization\")"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "c65e2059e3fcb08b36e492ad659f602575bc86d3", "fixCommitParentSHA1": "ab35dc22dd375ee685e18ae6651d30d7b18abd86", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/partition/MigrationOperation.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/partition/MigrationOperation.java b/hazelcast/src/main/java/com/hazelcast/impl/partition/MigrationOperation.java\nindex 2824628..339135f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/partition/MigrationOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/partition/MigrationOperation.java\n@@ -114,7 +114,7 @@\n                         + \", replica: \" + replicaIndex);\n             }\n //            pm.doMigrate(partitionId, replicaIndex, recordSet, from);\n-            final boolean result = pm.runMigrationTasks(this, tasks, partitionId, replicaIndex, from);\n+            final boolean result = pm.runMigrationTasks(tasks, partitionId, replicaIndex, from);\n             getResponseHandler().sendResponse(result);\n //            getNodeService().send(PartitionManager.PARTITION_SERVICE_NAME, new Response(result), -1, 0, getCallId(), getCaller());\n         } catch (Throwable e) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 117, "bugNodeStartChar": 5006, "bugNodeLength": 66, "fixLineNum": 117, "fixNodeStartChar": 5006, "fixNodeLength": 60, "sourceBeforeFix": "pm.runMigrationTasks(this,tasks,partitionId,replicaIndex,from)", "sourceAfterFix": "pm.runMigrationTasks(tasks,partitionId,replicaIndex,from)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "0d79b0c19f09da30d00d5e5f2f7b492db0529123", "fixCommitParentSHA1": "6260b1cfa6b1726b94d61d0bce9d3e0dc1e7d662", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/BlockingQueueManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/BlockingQueueManager.java b/hazelcast/src/main/java/com/hazelcast/impl/BlockingQueueManager.java\nindex 30b475e..543d2e4 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/BlockingQueueManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/BlockingQueueManager.java\n@@ -477,7 +477,7 @@\n     public Iterator iterate(final String name) {\n         MasterOp op = new MasterOp(ClusterOperation.BLOCKING_ITERATE, name, 0);\n         op.initOp();\n-        Keys keys = (Keys) op.getResultAsObject();\n+        Keys keys = (Keys) op.getResultAsObject(false);\n         final Collection<Data> dataKeys = keys.getKeys();\n         final Collection allKeys = new ArrayList(dataKeys);\n         TransactionImpl txn = ThreadContext.get().getCallContext().getTransaction();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 480, "bugNodeStartChar": 17757, "bugNodeLength": 22, "fixLineNum": 480, "fixNodeStartChar": 17757, "fixNodeLength": 27, "sourceBeforeFix": "op.getResultAsObject()", "sourceAfterFix": "op.getResultAsObject(false)"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "7110cf09f5b521187eeb06fca3849ef269d02c6b", "fixCommitParentSHA1": "52e1a37ac8c110f877d67fbdddecca838e7ef4e6", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java\nindex baddae0..0ef94a5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java\n@@ -154,7 +154,7 @@\n         unpark();\n     }\n \n-    void unpark() {\n+    private void unpark() {\n         LockSupport.unpark(serviceThread);\n     }\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 157, "bugNodeStartChar": 5425, "bugNodeLength": 64, "fixLineNum": 157, "fixNodeStartChar": 5425, "fixNodeLength": 72, "sourceBeforeFix": "0", "sourceAfterFix": "2"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "7c54e3710121a7694222951294d08eb9780e4816", "fixCommitParentSHA1": "8c8be1e96574c03ec40a4553465506c3f68e3393", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java\nindex 0e08a46..4afa000 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java\n@@ -73,7 +73,7 @@\n         ClassLoader classLoader = node.getConfig().getClassLoader();\n         threadPoolExecutor = new ThreadPoolExecutor(\n                 5, Integer.MAX_VALUE,\n-                6L,\n+                60L,\n                 TimeUnit.SECONDS,\n                 new SynchronousQueue(),\n                 new ExecutorThreadFactory(node.threadGroup, node.getThreadPoolNamePrefix(\"cached\"), classLoader),\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 74, "bugNodeStartChar": 3221, "bugNodeLength": 447, "fixLineNum": 74, "fixNodeStartChar": 3221, "fixNodeLength": 448, "sourceBeforeFix": "new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(\"cached\"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } ", "sourceAfterFix": "new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(\"cached\"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "dc0683a8d810f245454fb125042c35afffd779ef", "fixCommitParentSHA1": "852e8753e3aeae95862d94a0306ea246a2c39a60", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java\nindex 0e08a46..4afa000 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ExecutorManager.java\n@@ -73,7 +73,7 @@\n         ClassLoader classLoader = node.getConfig().getClassLoader();\n         threadPoolExecutor = new ThreadPoolExecutor(\n                 5, Integer.MAX_VALUE,\n-                6L,\n+                60L,\n                 TimeUnit.SECONDS,\n                 new SynchronousQueue(),\n                 new ExecutorThreadFactory(node.threadGroup, node.getThreadPoolNamePrefix(\"cached\"), classLoader),\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 74, "bugNodeStartChar": 3221, "bugNodeLength": 447, "fixLineNum": 74, "fixNodeStartChar": 3221, "fixNodeLength": 448, "sourceBeforeFix": "new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(\"cached\"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } ", "sourceAfterFix": "new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix(\"cached\"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } "}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "b66741edf56e097d77248c2d1b59ea19843586ce", "fixCommitParentSHA1": "1fc2a6980425d0132caa26c61980c9ef8f05b184", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java b/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java\nindex f652170..dc3bae1 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java\n@@ -123,7 +123,7 @@\n         request.setOperation(operation);\n         request.setKey(key);\n         request.setValue(value);\n-        if (ttl > 0 && timeunit != null) {\n+        if (ttl >= 0 && timeunit != null) {\n             request.setTimeout(timeunit.toMillis(ttl));\n         }\n         return request;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 126, "bugNodeStartChar": 4130, "bugNodeLength": 7, "fixLineNum": 126, "fixNodeStartChar": 4130, "fixNodeLength": 8, "sourceBeforeFix": "ttl > 0", "sourceAfterFix": "ttl >= 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "47c6a38b50e58d16475615f81af0f343f1401d3b", "fixCommitParentSHA1": "f037b0427c88d9c31a50246d32a7038105be081e", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java b/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java\nindex f652170..dc3bae1 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/ProxyHelper.java\n@@ -123,7 +123,7 @@\n         request.setOperation(operation);\n         request.setKey(key);\n         request.setValue(value);\n-        if (ttl > 0 && timeunit != null) {\n+        if (ttl >= 0 && timeunit != null) {\n             request.setTimeout(timeunit.toMillis(ttl));\n         }\n         return request;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 126, "bugNodeStartChar": 4130, "bugNodeLength": 7, "fixLineNum": 126, "fixNodeStartChar": 4130, "fixNodeLength": 8, "sourceBeforeFix": "ttl > 0", "sourceAfterFix": "ttl >= 0"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "d8ce9e1d831b349c9df1bfd9428a7d9c1e600d54", "fixCommitParentSHA1": "48ce354dbad81e64c340d22eb7c767f0e7d19b49", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java\nindex 23f9db8..2a57598 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java\n@@ -83,12 +83,12 @@\n         Callable<Boolean> callable = new Callable<Boolean>() {\n             public Boolean call() {\n                 synchronized (lifecycleLock) {\n-                    if (paused.get()) {\n+                    if (!paused.get()) {\n                         fireLifecycleEvent(PAUSING);\n                     } else {\n                         return false;\n                     }\n-                    paused.set(false);\n+                    paused.set(true);\n                     fireLifecycleEvent(PAUSED);\n                     return true;\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 86, "bugNodeStartChar": 3273, "bugNodeLength": 12, "fixLineNum": 86, "fixNodeStartChar": 3273, "fixNodeLength": 13, "sourceBeforeFix": "paused.get()", "sourceAfterFix": "!paused.get()"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "d8ce9e1d831b349c9df1bfd9428a7d9c1e600d54", "fixCommitParentSHA1": "48ce354dbad81e64c340d22eb7c767f0e7d19b49", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java b/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java\nindex 23f9db8..2a57598 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/LifecycleServiceClientImpl.java\n@@ -83,12 +83,12 @@\n         Callable<Boolean> callable = new Callable<Boolean>() {\n             public Boolean call() {\n                 synchronized (lifecycleLock) {\n-                    if (paused.get()) {\n+                    if (!paused.get()) {\n                         fireLifecycleEvent(PAUSING);\n                     } else {\n                         return false;\n                     }\n-                    paused.set(false);\n+                    paused.set(true);\n                     fireLifecycleEvent(PAUSED);\n                     return true;\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 91, "bugNodeStartChar": 3451, "bugNodeLength": 17, "fixLineNum": 91, "fixNodeStartChar": 3451, "fixNodeLength": 16, "sourceBeforeFix": "paused.set(false)", "sourceAfterFix": "paused.set(true)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0af154afd196d10f969a1cb9adb01b04cbdba2ad", "fixCommitParentSHA1": "1ea49f4fec5cc54b4e0b839b3599a1ee32dac690", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java b/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\nindex 3d472d9..1b29b8d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\n@@ -100,7 +100,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h1, h2),\n                 new MultiCallBuilder(h1));\n         t.run();\n@@ -112,7 +112,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h2, h1),\n                 new MultiCallBuilder(h2));\n         t.run();\n@@ -139,7 +139,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h2, h1),\n                 new QueueCallBuilder(h2));\n         t.run();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 103, "bugNodeStartChar": 3994, "bugNodeLength": 138, "fixLineNum": 103, "fixNodeStartChar": 3994, "fixNodeLength": 126, "sourceBeforeFix": "BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); ", "sourceAfterFix": "Runnable t=new RunAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0af154afd196d10f969a1cb9adb01b04cbdba2ad", "fixCommitParentSHA1": "1ea49f4fec5cc54b4e0b839b3599a1ee32dac690", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java b/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\nindex 3d472d9..1b29b8d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\n@@ -100,7 +100,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h1, h2),\n                 new MultiCallBuilder(h1));\n         t.run();\n@@ -112,7 +112,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h2, h1),\n                 new MultiCallBuilder(h2));\n         t.run();\n@@ -139,7 +139,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h2, h1),\n                 new QueueCallBuilder(h2));\n         t.run();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 115, "bugNodeStartChar": 4540, "bugNodeLength": 138, "fixLineNum": 115, "fixNodeStartChar": 4540, "fixNodeLength": 126, "sourceBeforeFix": "BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); ", "sourceAfterFix": "Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0af154afd196d10f969a1cb9adb01b04cbdba2ad", "fixCommitParentSHA1": "1ea49f4fec5cc54b4e0b839b3599a1ee32dac690", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java b/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\nindex 3d472d9..1b29b8d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/impl/RedoNoConnectionTest.java\n@@ -100,7 +100,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h1, h2),\n                 new MultiCallBuilder(h1));\n         t.run();\n@@ -112,7 +112,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h2, h1),\n                 new MultiCallBuilder(h2));\n         t.run();\n@@ -139,7 +139,7 @@\n         config.setProperty(GroupProperties.PROP_HEARTBEAT_INTERVAL_SECONDS, \"6\");\n         final HazelcastInstance h1 = Hazelcast.newHazelcastInstance(config);\n         final HazelcastInstance h2 = Hazelcast.newHazelcastInstance(config);\n-        BeforeAfterTester t = new BeforeAfterTester(\n+        Runnable t = new RunAfterTester(\n                 new DisconnectionBehavior(h2, h1),\n                 new QueueCallBuilder(h2));\n         t.run();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 142, "bugNodeStartChar": 5678, "bugNodeLength": 138, "fixLineNum": 142, "fixNodeStartChar": 5678, "fixNodeLength": 126, "sourceBeforeFix": "BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); ", "sourceAfterFix": "Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "1ed2dc07807972afe507a33ec9a92004b1cfaaa0", "fixCommitParentSHA1": "62ae69ab8deec8e54bcfe1a5d956870218ee94c4", "bugFilePath": "hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java", "fixPatch": "diff --git a/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java b/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java\nindex db5aa61..1484302 100644\n--- a/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java\n+++ b/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java\n@@ -85,10 +85,10 @@\n     public void testSuperClient() throws Exception {\n         HazelcastInstance main = Hazelcast.newHazelcastInstance(new ClasspathXmlConfig(\"hazelcast-custom.xml\"));\n         Properties props = getDefaultProperties();\n-        props.setProperty(CacheEnvironment.USE_SUPER_CLIENT, \"true\");\n+        props.setProperty(CacheEnvironment.USE_LITE_MEMBER, \"true\");\n         SessionFactory sf = createSessionFactory(props);\n         HazelcastInstance hz = HazelcastAccessor.getHazelcastInstance(sf);\n-        assertTrue(hz.getCluster().getLocalMember().isSuperClient());\n+        assertTrue(hz.getCluster().getLocalMember().isLiteMember());\n         assertEquals(2, main.getCluster().getMembers().size());\n         sf.close();\n         main.getLifecycleService().shutdown();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 91, "bugNodeStartChar": 3388, "bugNodeLength": 48, "fixLineNum": 91, "fixNodeStartChar": 3388, "fixNodeLength": 47, "sourceBeforeFix": "hz.getCluster().getLocalMember().isSuperClient()", "sourceAfterFix": "hz.getCluster().getLocalMember().isLiteMember()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "1ed2dc07807972afe507a33ec9a92004b1cfaaa0", "fixCommitParentSHA1": "62ae69ab8deec8e54bcfe1a5d956870218ee94c4", "bugFilePath": "hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java", "fixPatch": "diff --git a/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java b/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java\nindex db5aa61..1484302 100644\n--- a/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java\n+++ b/hazelcast-hibernate/src/test/java/com/hazelcast/hibernate/CustomPropertiesTest.java\n@@ -85,10 +85,10 @@\n     public void testSuperClient() throws Exception {\n         HazelcastInstance main = Hazelcast.newHazelcastInstance(new ClasspathXmlConfig(\"hazelcast-custom.xml\"));\n         Properties props = getDefaultProperties();\n-        props.setProperty(CacheEnvironment.USE_SUPER_CLIENT, \"true\");\n+        props.setProperty(CacheEnvironment.USE_LITE_MEMBER, \"true\");\n         SessionFactory sf = createSessionFactory(props);\n         HazelcastInstance hz = HazelcastAccessor.getHazelcastInstance(sf);\n-        assertTrue(hz.getCluster().getLocalMember().isSuperClient());\n+        assertTrue(hz.getCluster().getLocalMember().isLiteMember());\n         assertEquals(2, main.getCluster().getMembers().size());\n         sf.close();\n         main.getLifecycleService().shutdown();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 91, "bugNodeStartChar": 3388, "bugNodeLength": 48, "fixLineNum": 91, "fixNodeStartChar": 3388, "fixNodeLength": 47, "sourceBeforeFix": "hz.getCluster().getLocalMember().isSuperClient()", "sourceAfterFix": "hz.getCluster().getLocalMember().isLiteMember()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "5856078799d2bfc99513d30334f43da6df8f3885", "fixCommitParentSHA1": "cb71ccd12e5385e00fabecd197f4e9e4fc670d92", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/longrunning/DynamicClusterTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/longrunning/DynamicClusterTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/longrunning/DynamicClusterTest.java\nindex 5dcd49b..60b8a47 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/longrunning/DynamicClusterTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/longrunning/DynamicClusterTest.java\n@@ -234,7 +234,7 @@\n         final CountDownLatch latch = new CountDownLatch(3);\n         final String message = \"Hazelcast Rocks!\";\n         topic.addMessageListener(new MessageListener<String>() {\n-            public void onMessage(String msg) {\n+            public void onMessage(Message<String> msg) {\n                 if (msg.equals(message)) {\n                     latch.countDown();\n                 }\n@@ -1013,7 +1013,7 @@\n         HazelcastInstance h2 = Hazelcast.newHazelcastInstance(c2);\n         HazelcastClient client2 = HazelcastClient.newHazelcastClient(c2.getGroupConfig().getName(), c2.getGroupConfig().getPassword(), \"127.0.0.1:5702\");\n         client2.getTopic(\"def\").addMessageListener(new MessageListener<Object>() {\n-            public void onMessage(Object message) {\n+            public void onMessage(Message message) {\n             }\n         });\n         LifecycleCountingListener l = new LifecycleCountingListener();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1016, "bugNodeStartChar": 44367, "bugNodeLength": 14, "fixLineNum": 1016, "fixNodeStartChar": 44367, "fixNodeLength": 15, "sourceBeforeFix": "Object message", "sourceAfterFix": "Message message"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "81b9ce51dd9cf748fe4ad4219f7857449bf10f9a", "fixCommitParentSHA1": "448090ecde2bb494e14bff85105c9fbfd5eabd41", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java\nindex cce1e9c..b071bab 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterService.java\n@@ -59,7 +59,7 @@\n \n     private long lastCheck = 0;\n \n-    private boolean running = true;\n+    private volatile boolean running = true;\n \n     private final ThreadWatcher threadWatcher = new ThreadWatcher();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 62, "bugNodeStartChar": 1956, "bugNodeLength": 31, "fixLineNum": 62, "fixNodeStartChar": 1956, "fixNodeLength": 40, "sourceBeforeFix": "2", "sourceAfterFix": "66"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "3dfd27af41174f918e19e449e40f873689d539fa", "fixCommitParentSHA1": "f0a83d8270efb69bd5d39402521d6261eaf9dc2e", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/monitor/OperationsCounterSupport.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/monitor/OperationsCounterSupport.java b/hazelcast/src/main/java/com/hazelcast/impl/monitor/OperationsCounterSupport.java\nindex dca87ff..5597ef3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/monitor/OperationsCounterSupport.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/monitor/OperationsCounterSupport.java\n@@ -29,7 +29,7 @@\n \tfinal Object lock = new Object();\n \tlong startTime = now();\n \tlong endTime = Long.MAX_VALUE;\n-\ttransient T published = null;\n+\ttransient volatile T published = null;\n \n \tfinal List listOfSubCounters = new ArrayList();\n \n", "projectName": "hazelcast.hazelcast", "bugLineNum": 32, "bugNodeStartChar": 1022, "bugNodeLength": 29, "fixLineNum": 32, "fixNodeStartChar": 1022, "fixNodeLength": 38, "sourceBeforeFix": "128", "sourceAfterFix": "192"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9cc9147adcd5143e5b1253b279f2e436adcbe7a3", "fixCommitParentSHA1": "becc961ecab5db5f66c9bcc4291f6c56e862fea3", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java b/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java\nindex d2dfa3b..ce7120b 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java\n@@ -863,9 +863,9 @@\n     \tfor (org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n     \t\tfinal String nodeName = cleanNodeName(child.getNodeName());\n     \t\tif(\"endpoints\".equals(nodeName)) {\n-    \t\t\thandleSecurityPermissionEndpoints(principalNode, permConfig);\n+    \t\t\thandleSecurityPermissionEndpoints(child, permConfig);\n     \t\t} else if(\"actions\".equals(nodeName)) {\n-    \t\t\thandleSecurityPermissionActions(principalNode, permConfig);\n+    \t\t\thandleSecurityPermissionActions(child, permConfig);\n     \t\t}\n     \t}\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 866, "bugNodeStartChar": 41250, "bugNodeLength": 60, "fixLineNum": 866, "fixNodeStartChar": 41250, "fixNodeLength": 52, "sourceBeforeFix": "handleSecurityPermissionEndpoints(principalNode,permConfig)", "sourceAfterFix": "handleSecurityPermissionEndpoints(child,permConfig)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "9cc9147adcd5143e5b1253b279f2e436adcbe7a3", "fixCommitParentSHA1": "becc961ecab5db5f66c9bcc4291f6c56e862fea3", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java b/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java\nindex d2dfa3b..ce7120b 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java\n@@ -863,9 +863,9 @@\n     \tfor (org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n     \t\tfinal String nodeName = cleanNodeName(child.getNodeName());\n     \t\tif(\"endpoints\".equals(nodeName)) {\n-    \t\t\thandleSecurityPermissionEndpoints(principalNode, permConfig);\n+    \t\t\thandleSecurityPermissionEndpoints(child, permConfig);\n     \t\t} else if(\"actions\".equals(nodeName)) {\n-    \t\t\thandleSecurityPermissionActions(principalNode, permConfig);\n+    \t\t\thandleSecurityPermissionActions(child, permConfig);\n     \t\t}\n     \t}\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 868, "bugNodeStartChar": 41365, "bugNodeLength": 58, "fixLineNum": 868, "fixNodeStartChar": 41365, "fixNodeLength": 50, "sourceBeforeFix": "handleSecurityPermissionActions(principalNode,permConfig)", "sourceAfterFix": "handleSecurityPermissionActions(child,permConfig)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "c107859092914bf1f6c684ee202f309eb60330e2", "fixCommitParentSHA1": "2487f9dfdaf775038adfdaa9e66c12ec5401bcaf", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java b/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java\nindex f9effc8..64922d7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java\n@@ -135,7 +135,7 @@\n \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n-\t\t\txml.append(\"<read-backup-data>\").append(m.isCacheValue()).append(\"</read-backup-data>\");\n+\t\t\txml.append(\"<read-backup-data>\").append(m.isReadBackupData()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\t\n \t\t\tif(m.getMapStoreConfig() != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 138, "bugNodeStartChar": 6560, "bugNodeLength": 16, "fixLineNum": 138, "fixNodeStartChar": 6560, "fixNodeLength": 20, "sourceBeforeFix": "m.isCacheValue()", "sourceAfterFix": "m.isReadBackupData()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c107859092914bf1f6c684ee202f309eb60330e2", "fixCommitParentSHA1": "2487f9dfdaf775038adfdaa9e66c12ec5401bcaf", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java b/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java\nindex f9effc8..64922d7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/ConfigXmlGenerator.java\n@@ -135,7 +135,7 @@\n \t\t\txml.append(\"<time-to-live-seconds>\").append(m.getTimeToLiveSeconds()).append(\"</time-to-live-seconds>\");\n \t\t\txml.append(\"<max-idle-seconds>\").append(m.getMaxIdleSeconds()).append(\"</max-idle-seconds>\");\n \t\t\txml.append(\"<cache-value>\").append(m.isCacheValue()).append(\"</cache-value>\");\n-\t\t\txml.append(\"<read-backup-data>\").append(m.isCacheValue()).append(\"</read-backup-data>\");\n+\t\t\txml.append(\"<read-backup-data>\").append(m.isReadBackupData()).append(\"</read-backup-data>\");\n \t\t\txml.append(\"<merge-policy>\").append(m.getMergePolicy()).append(\"</merge-policy>\");\n \t\t\t\n \t\t\tif(m.getMapStoreConfig() != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 138, "bugNodeStartChar": 6560, "bugNodeLength": 16, "fixLineNum": 138, "fixNodeStartChar": 6560, "fixNodeLength": 20, "sourceBeforeFix": "m.isCacheValue()", "sourceAfterFix": "m.isReadBackupData()"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "0b64c9c15f46376af519c35d98fb56e227190b48", "fixCommitParentSHA1": "bb39262031409930d18a7019aa5425b7f112f6bd", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/MulticastService.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/MulticastService.java b/hazelcast/src/main/java/com/hazelcast/impl/MulticastService.java\nindex 089fc11..56ded15 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/MulticastService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/MulticastService.java\n@@ -51,7 +51,7 @@\n         logger = node.getLogger(MulticastService.class.getName());\n         Config config = node.getConfig();\n         this.multicastSocket = multicastSocket;\n-        int bufferSize = 1024 * 1024;\n+        int bufferSize = 64 * 1024;\n         this.datagramPacketReceive = new DatagramPacket(new byte[bufferSize], bufferSize);\n         this.datagramPacketSend = new DatagramPacket(new byte[bufferSize], bufferSize, InetAddress\n                 .getByName(config.getNetworkConfig().getJoin().getMulticastConfig().getMulticastGroup()),\n@@ -127,7 +127,7 @@\n                 joinInfo.writeToPacket(datagramPacketSend);\n                 multicastSocket.send(datagramPacketSend);\n             } catch (IOException e) {\n-                logger.log(Level.WARNING, e.getMessage(), e);\n+                logger.log(Level.WARNING, \"You probably have too long Hazelcast configuration!\", e);\n             }\n         }\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 54, "bugNodeStartChar": 2072, "bugNodeLength": 11, "fixLineNum": 54, "fixNodeStartChar": 2072, "fixNodeLength": 9, "sourceBeforeFix": "1024 * 1024", "sourceAfterFix": "64 * 1024"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "b4dd066af8d780844f20f35c892476f6b35ff1b2", "fixCommitParentSHA1": "ca69317371eb16049456d0efd0f418031420613e", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java\nindex b01c711..85eb787 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java\n@@ -546,7 +546,7 @@\n         }\n         for (Future<Pairs> future : lsFutures) {\n             Pairs pairs = future.get();\n-            if (pairs != null) {\n+            if (pairs != null && pairs.getKeyValues()!=null) {\n                 for (KeyValue keyValue : pairs.getKeyValues()) {\n                     results.addKeyValue(keyValue);\n                 }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 549, "bugNodeStartChar": 23157, "bugNodeLength": 13, "fixLineNum": 549, "fixNodeStartChar": 23157, "fixNodeLength": 43, "sourceBeforeFix": "pairs != null", "sourceAfterFix": "pairs != null && pairs.getKeyValues() != null"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a74d72d93563fd47ecb3846e594fa5476da6f555", "fixCommitParentSHA1": "1aec40ff9d21fe9372da13dda0dad566ec2059bc", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java b/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java\nindex bfda127..1351da0 100644\n--- a/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java\n@@ -1394,7 +1394,7 @@\n         latch.await();\n         es.shutdown();\n         assertTrue(es.awaitTermination(5, TimeUnit.SECONDS));\n-        for (int i = 0; i < 50; i++) {\n+        for (int i = 0; i < 100; i++) {\n             sleep(1000);\n             Runtime.getRuntime().gc();\n             long usedMemoryEnd = getUsedMemoryAsMB();\n@@ -1446,7 +1446,7 @@\n         latch.await();\n         es.shutdown();\n         assertTrue(es.awaitTermination(5, TimeUnit.SECONDS));\n-        for (int i = 0; i < 50; i++) {\n+        for (int i = 0; i < 100; i++) {\n             sleep(1000);\n             Runtime.getRuntime().gc();\n             long usedMemoryEnd = getUsedMemoryAsMB();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1397, "bugNodeStartChar": 57995, "bugNodeLength": 6, "fixLineNum": 1397, "fixNodeStartChar": 57995, "fixNodeLength": 7, "sourceBeforeFix": "i < 50", "sourceAfterFix": "i < 100"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "a74d72d93563fd47ecb3846e594fa5476da6f555", "fixCommitParentSHA1": "1aec40ff9d21fe9372da13dda0dad566ec2059bc", "bugFilePath": "hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java", "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java b/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java\nindex bfda127..1351da0 100644\n--- a/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java\n@@ -1394,7 +1394,7 @@\n         latch.await();\n         es.shutdown();\n         assertTrue(es.awaitTermination(5, TimeUnit.SECONDS));\n-        for (int i = 0; i < 50; i++) {\n+        for (int i = 0; i < 100; i++) {\n             sleep(1000);\n             Runtime.getRuntime().gc();\n             long usedMemoryEnd = getUsedMemoryAsMB();\n@@ -1446,7 +1446,7 @@\n         latch.await();\n         es.shutdown();\n         assertTrue(es.awaitTermination(5, TimeUnit.SECONDS));\n-        for (int i = 0; i < 50; i++) {\n+        for (int i = 0; i < 100; i++) {\n             sleep(1000);\n             Runtime.getRuntime().gc();\n             long usedMemoryEnd = getUsedMemoryAsMB();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 1449, "bugNodeStartChar": 60169, "bugNodeLength": 6, "fixLineNum": 1449, "fixNodeStartChar": 60169, "fixNodeLength": 7, "sourceBeforeFix": "i < 50", "sourceAfterFix": "i < 100"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "0c74987fbdcf9f8b6156286462731c172594ff9d", "fixCommitParentSHA1": "19a999ed3ac804d321de3b22dc43e0ef14d818b2", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java\nindex 2bd5bc9..f69c49b 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java\n@@ -132,7 +132,7 @@\n             return Boolean.TRUE;\n         }\n \n-        class AddListenerAtTarget extends TargetAwareOp {\n+        private final class AddListenerAtTarget extends TargetAwareOp {\n             public AddListenerAtTarget(Address target) {\n                 request.reset();\n                 this.target = target;\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 135, "bugNodeStartChar": 4906, "bugNodeLength": 649, "fixLineNum": 135, "fixNodeStartChar": 4906, "fixNodeLength": 663, "sourceBeforeFix": "0", "sourceAfterFix": "18"}, {"bugType": "CHANGE_UNARY_OPERATOR", "fixCommitSHA1": "bb6c3712d2affb21c47407165e3cc1540e2c4c1a", "fixCommitParentSHA1": "1d56def06e3da6beede7b23ec401dcd65a346a92", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/Record.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/Record.java b/hazelcast/src/main/java/com/hazelcast/impl/Record.java\nindex a40063b..43c0d70 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/Record.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/Record.java\n@@ -343,7 +343,7 @@\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n-        if ((o instanceof Record)) return false;\n+        if (!(o instanceof Record)) return false;\n         Record record = (Record) o;\n         return record.getId().equals(getId());\n     }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 346, "bugNodeStartChar": 10224, "bugNodeLength": 21, "fixLineNum": 346, "fixNodeStartChar": 10224, "fixNodeLength": 22, "sourceBeforeFix": "(o instanceof Record)", "sourceAfterFix": "!(o instanceof Record)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "fixCommitParentSHA1": "1096ea847536d8e0f3539f4c6e142422a11cfe9e", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java\nindex 80f592b..5bb7368 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java\n@@ -40,7 +40,7 @@\n         new Thread(new Runnable() {\n             public void run() {\n                 try {\n-                    Thread.sleep(10);\n+                    Thread.sleep(50);\n                     clientRunnable.running = false;\n                     synchronized (clientRunnable.monitor) {\n                         clientRunnable.monitor.wait();\n@@ -52,7 +52,7 @@\n         }).start();\n         clientRunnable.run();\n         assertTrue(counter.get() > 1);\n-        assertTrue(\"Not notified\", latch.await(5, TimeUnit.SECONDS));\n+        assertTrue(\"Not notified\", latch.await(25, TimeUnit.SECONDS));\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 43, "bugNodeStartChar": 1448, "bugNodeLength": 16, "fixLineNum": 43, "fixNodeStartChar": 1448, "fixNodeLength": 16, "sourceBeforeFix": "Thread.sleep(10)", "sourceAfterFix": "Thread.sleep(50)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "fixCommitParentSHA1": "1096ea847536d8e0f3539f4c6e142422a11cfe9e", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java\nindex 80f592b..5bb7368 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRunnableTest.java\n@@ -40,7 +40,7 @@\n         new Thread(new Runnable() {\n             public void run() {\n                 try {\n-                    Thread.sleep(10);\n+                    Thread.sleep(50);\n                     clientRunnable.running = false;\n                     synchronized (clientRunnable.monitor) {\n                         clientRunnable.monitor.wait();\n@@ -52,7 +52,7 @@\n         }).start();\n         clientRunnable.run();\n         assertTrue(counter.get() > 1);\n-        assertTrue(\"Not notified\", latch.await(5, TimeUnit.SECONDS));\n+        assertTrue(\"Not notified\", latch.await(25, TimeUnit.SECONDS));\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 55, "bugNodeStartChar": 1901, "bugNodeLength": 32, "fixLineNum": 55, "fixNodeStartChar": 1901, "fixNodeLength": 33, "sourceBeforeFix": "latch.await(5,TimeUnit.SECONDS)", "sourceAfterFix": "latch.await(25,TimeUnit.SECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "fixCommitParentSHA1": "1096ea847536d8e0f3539f4c6e142422a11cfe9e", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ValueCollectionTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ValueCollectionTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ValueCollectionTest.java\nindex 66087b8..c23030a 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ValueCollectionTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ValueCollectionTest.java\n@@ -133,7 +133,7 @@\n         assertFalse(valueCollection.retainAll(new ArrayList()));\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testToArrayWithArgument() throws Exception {\n         EntryHolder entryHolder = mock(EntryHolder.class);\n         Set set = new HashSet();\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 136, "bugNodeStartChar": 4762, "bugNodeLength": 35, "fixLineNum": 136, "fixNodeStartChar": 4762, "fixNodeLength": 26, "sourceBeforeFix": "UnsupportedOperationException.class", "sourceAfterFix": "NullPointerException.class"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6cf86311e8d061d65c3b8c70d705b69a9d205127", "fixCommitParentSHA1": "c2c5bfecaa440f04bc39f21d6f68a840105496bb", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\nindex 675dddb..b9d8a6c 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\n@@ -135,7 +135,7 @@\n             private void handle(Object response) {\n                 Object result = response;\n                 if (response == null) {\n-                    inner.innerSetException(new TimeoutException());\n+                    inner.innerSetException(new TimeoutException(), false);\n                 } else {\n                     if (response instanceof Packet) {\n                         Packet responsePacket = (Packet) response;\n@@ -145,7 +145,7 @@\n                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n-                        inner.innerSetException((Throwable) result);\n+                        inner.innerSetException((Throwable) result, true);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 138, "bugNodeStartChar": 4885, "bugNodeLength": 47, "fixLineNum": 138, "fixNodeStartChar": 4885, "fixNodeLength": 54, "sourceBeforeFix": "inner.innerSetException(new TimeoutException())", "sourceAfterFix": "inner.innerSetException(new TimeoutException(),false)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "6cf86311e8d061d65c3b8c70d705b69a9d205127", "fixCommitParentSHA1": "c2c5bfecaa440f04bc39f21d6f68a840105496bb", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\nindex 675dddb..b9d8a6c 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\n@@ -135,7 +135,7 @@\n             private void handle(Object response) {\n                 Object result = response;\n                 if (response == null) {\n-                    inner.innerSetException(new TimeoutException());\n+                    inner.innerSetException(new TimeoutException(), false);\n                 } else {\n                     if (response instanceof Packet) {\n                         Packet responsePacket = (Packet) response;\n@@ -145,7 +145,7 @@\n                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n-                        inner.innerSetException((Throwable) result);\n+                        inner.innerSetException((Throwable) result, true);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 148, "bugNodeStartChar": 5502, "bugNodeLength": 43, "fixLineNum": 148, "fixNodeStartChar": 5502, "fixNodeLength": 49, "sourceBeforeFix": "inner.innerSetException((Throwable)result)", "sourceAfterFix": "inner.innerSetException((Throwable)result,true)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "fixCommitParentSHA1": "667d009963614e9da347ea7ee1d69f273a2cfdbc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\nindex 889d70f..f544f3e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n@@ -38,7 +38,7 @@\n             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n-            out.writeDouble((Float) obj);\n+            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);\n@@ -66,7 +66,7 @@\n         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n-            return in.readInt();\n+            return in.readLong();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 41, "bugNodeStartChar": 1419, "bugNodeLength": 28, "fixLineNum": 41, "fixNodeStartChar": 1419, "fixNodeLength": 27, "sourceBeforeFix": "out.writeDouble((Float)obj)", "sourceAfterFix": "out.writeFloat((Float)obj)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "fixCommitParentSHA1": "667d009963614e9da347ea7ee1d69f273a2cfdbc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\nindex 889d70f..f544f3e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n@@ -38,7 +38,7 @@\n             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n-            out.writeDouble((Float) obj);\n+            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);\n@@ -66,7 +66,7 @@\n         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n-            return in.readInt();\n+            return in.readLong();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 41, "bugNodeStartChar": 1419, "bugNodeLength": 28, "fixLineNum": 41, "fixNodeStartChar": 1419, "fixNodeLength": 27, "sourceBeforeFix": "out.writeDouble((Float)obj)", "sourceAfterFix": "out.writeFloat((Float)obj)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "fixCommitParentSHA1": "667d009963614e9da347ea7ee1d69f273a2cfdbc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\nindex 889d70f..f544f3e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n@@ -38,7 +38,7 @@\n             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n-            out.writeDouble((Float) obj);\n+            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);\n@@ -66,7 +66,7 @@\n         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n-            return in.readInt();\n+            return in.readLong();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 69, "bugNodeStartChar": 2456, "bugNodeLength": 12, "fixLineNum": 69, "fixNodeStartChar": 2456, "fixNodeLength": 13, "sourceBeforeFix": "in.readInt()", "sourceAfterFix": "in.readLong()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "fixCommitParentSHA1": "667d009963614e9da347ea7ee1d69f273a2cfdbc", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\nindex 889d70f..f544f3e 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/SerializationHelper.java\n@@ -38,7 +38,7 @@\n             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n-            out.writeDouble((Float) obj);\n+            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);\n@@ -66,7 +66,7 @@\n         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n-            return in.readInt();\n+            return in.readLong();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 69, "bugNodeStartChar": 2456, "bugNodeLength": 12, "fixLineNum": 69, "fixNodeStartChar": 2456, "fixNodeLength": 13, "sourceBeforeFix": "in.readInt()", "sourceAfterFix": "in.readLong()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fc15aaea0f40bbaee18973d64d8f599484d7c7ae", "fixCommitParentSHA1": "e4ed7cde6a7921ddf3cb2a12c7e348d3de02485f", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/impl/EntryListenerManager.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/impl/EntryListenerManager.java b/hazelcast-client/src/main/java/com/hazelcast/client/impl/EntryListenerManager.java\nindex d7f723b..7954764 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/impl/EntryListenerManager.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/impl/EntryListenerManager.java\n@@ -66,7 +66,7 @@\n         }\n \n         public void notifyEntryListeners(Packet packet) {\n-            EntryEvent event = new EntryEvent(packet.getName(), (int) packet.getLongValue(), toObject(packet.getKey()), toObject(packet.getValue()));\n+        EntryEvent event = new EntryEvent(packet.getName(), null, (int) packet.getLongValue(), toObject(packet.getKey()), toObject(packet.getValue()));\n             String name = event.getName();\n             Object key = event.getKey();\n             if (entryListeners.get(name) != null) {\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 69, "bugNodeStartChar": 2768, "bugNodeLength": 117, "fixLineNum": 69, "fixNodeStartChar": 2764, "fixNodeLength": 123, "sourceBeforeFix": "new EntryEvent(packet.getName(),(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))", "sourceAfterFix": "new EntryEvent(packet.getName(),null,(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2155f66a2a44fa9057bed99e91e8ccded7a006f4", "fixCommitParentSHA1": "6e4c84483397a3fc48ee58b112dd0d3294a3a320", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java b/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\nindex 4ad4190..43a49cf 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\n@@ -99,7 +99,7 @@\n                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n-                entryListeners.get(name).put(key, new ArrayList<EntryListener<?, ?>>());\n+                entryListeners.get(name).put(key, new CopyOnWriteArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }\n@@ -207,7 +207,7 @@\n \n         public synchronized void registerMessageListener(String name, MessageListener messageListener) {\n             if (!messageListeners.containsKey(name)) {\n-                messageListeners.put(name, new ArrayList<MessageListener<Object>>());\n+                messageListeners.put(name, new CopyOnWriteArrayList<MessageListener<Object>>());\n             }\n             messageListeners.get(name).add(messageListener);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 102, "bugNodeStartChar": 4082, "bugNodeLength": 30, "fixLineNum": 102, "fixNodeStartChar": 4082, "fixNodeLength": 41, "sourceBeforeFix": "ArrayList<EntryListener<?,?>>", "sourceAfterFix": "CopyOnWriteArrayList<EntryListener<?,?>>"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "2155f66a2a44fa9057bed99e91e8ccded7a006f4", "fixCommitParentSHA1": "6e4c84483397a3fc48ee58b112dd0d3294a3a320", "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java", "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java b/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\nindex 4ad4190..43a49cf 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\n@@ -99,7 +99,7 @@\n                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n-                entryListeners.get(name).put(key, new ArrayList<EntryListener<?, ?>>());\n+                entryListeners.get(name).put(key, new CopyOnWriteArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }\n@@ -207,7 +207,7 @@\n \n         public synchronized void registerMessageListener(String name, MessageListener messageListener) {\n             if (!messageListeners.containsKey(name)) {\n-                messageListeners.put(name, new ArrayList<MessageListener<Object>>());\n+                messageListeners.put(name, new CopyOnWriteArrayList<MessageListener<Object>>());\n             }\n             messageListeners.get(name).add(messageListener);\n         }\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 210, "bugNodeStartChar": 8759, "bugNodeLength": 34, "fixLineNum": 210, "fixNodeStartChar": 8759, "fixNodeLength": 45, "sourceBeforeFix": "ArrayList<MessageListener<Object>>", "sourceAfterFix": "CopyOnWriteArrayList<MessageListener<Object>>"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "2495de4bdb4f644f5d5e254678ffd63d6a609876", "fixCommitParentSHA1": "17908f6f0d9750a11c595aa3b9c4af66eba82561", "bugFilePath": "hazelcast-ra/src/main/java/com/hazelcast/jca/JcaBase.java", "fixPatch": "diff --git a/hazelcast-ra/src/main/java/com/hazelcast/jca/JcaBase.java b/hazelcast-ra/src/main/java/com/hazelcast/jca/JcaBase.java\nindex e70b7e1..03ab273 100644\n--- a/hazelcast-ra/src/main/java/com/hazelcast/jca/JcaBase.java\n+++ b/hazelcast-ra/src/main/java/com/hazelcast/jca/JcaBase.java\n@@ -21,7 +21,7 @@\n import java.util.logging.Logger;\n \n public class JcaBase {\n-    protected static Logger logger = Logger.getLogger(JcaBase.class.getName());\n+    protected static final Logger logger = Logger.getLogger(JcaBase.class.getName());\n \n     public void log(final Object caller, final Object msg) {\n         logger.log(Level.FINEST, caller + \" : \" + msg);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 24, "bugNodeStartChar": 751, "bugNodeLength": 75, "fixLineNum": 24, "fixNodeStartChar": 751, "fixNodeLength": 81, "sourceBeforeFix": "12", "sourceAfterFix": "28"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "63e47d927e70c83a170b0d2f93deb7f460ef54a3", "fixCommitParentSHA1": "ef3d8f93aa93fbbc5f34fd9798b83fdd06dcfe8f", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\nindex e200a19..b46a178 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\n@@ -82,7 +82,7 @@\n             }\n         });\n         topic.publish(message);\n-        assertTrue(latch.await(100, TimeUnit.MILLISECONDS));\n+        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n \n     @Test\n@@ -102,7 +102,7 @@\n         topic.publish(message);\n         topic.removeMessageListener(messageListener);\n         topic.publish(message);\n-        assertFalse(latch.await(100, TimeUnit.MILLISECONDS));\n+        assertFalse(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n \n     @AfterClass\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 85, "bugNodeStartChar": 2992, "bugNodeLength": 39, "fixLineNum": 85, "fixNodeStartChar": 2992, "fixNodeLength": 41, "sourceBeforeFix": "latch.await(100,TimeUnit.MILLISECONDS)", "sourceAfterFix": "latch.await(10000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "63e47d927e70c83a170b0d2f93deb7f460ef54a3", "fixCommitParentSHA1": "ef3d8f93aa93fbbc5f34fd9798b83fdd06dcfe8f", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\nindex e200a19..b46a178 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\n@@ -82,7 +82,7 @@\n             }\n         });\n         topic.publish(message);\n-        assertTrue(latch.await(100, TimeUnit.MILLISECONDS));\n+        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n \n     @Test\n@@ -102,7 +102,7 @@\n         topic.publish(message);\n         topic.removeMessageListener(messageListener);\n         topic.publish(message);\n-        assertFalse(latch.await(100, TimeUnit.MILLISECONDS));\n+        assertFalse(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n \n     @AfterClass\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 105, "bugNodeStartChar": 3806, "bugNodeLength": 39, "fixLineNum": 105, "fixNodeStartChar": 3806, "fixNodeLength": 41, "sourceBeforeFix": "latch.await(100,TimeUnit.MILLISECONDS)", "sourceAfterFix": "latch.await(10000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "ef3d8f93aa93fbbc5f34fd9798b83fdd06dcfe8f", "fixCommitParentSHA1": "a8ce02bc5611df0790140f0a4c27c92872f843b3", "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java", "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\nindex 40c5c36..e200a19 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/HazelcastClientTopicTest.java\n@@ -58,7 +58,7 @@\n             }\n         });\n         topic.publish(message);\n-        assertTrue(latch.await(10, TimeUnit.MILLISECONDS));\n+        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n \n     @Test\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 2091, "bugNodeLength": 38, "fixLineNum": 61, "fixNodeStartChar": 2091, "fixNodeLength": 41, "sourceBeforeFix": "latch.await(10,TimeUnit.MILLISECONDS)", "sourceAfterFix": "latch.await(10000,TimeUnit.MILLISECONDS)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0d033264d0139a1080c54706d5681d4876a8f881", "fixCommitParentSHA1": "f5f134fe08151b1d5592dd81a38c4851012b76e1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/core/MapLoader.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java b/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java\nindex 5d54cd5..73d69df 100644\n--- a/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java\n+++ b/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java\n@@ -32,7 +32,7 @@\n  * will be placed into the distributed map and they will stay in-memory until they are\n  * explicitly removed or implicitly evicted (if eviction is configured).\n  */\n-public interface MapLoader {\n+public interface MapLoader<K, V> {\n     /**\n      * Loads the value of a given key. If distributed map doesn't contain the value\n      * for the given key then Hazelcast will call implementation's load (key) method\n@@ -42,7 +42,7 @@\n      * @param key\n      * @return value of the key\n      */\n-    Object load(Object key);\n+    V load(K key);\n \n     /**\n      * Loads given keys. This is batch load operation so that implementation can\n@@ -51,5 +51,5 @@\n      * @param keys keys of the values entries to load\n      * @return map of loaded key-value pairs.\n      */\n-    Map loadAll(Collection keys);\n+    Map<K, V> loadAll(Collection<K> keys);\n }\n\\ No newline at end of file\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 36, "bugNodeStartChar": 1436, "bugNodeLength": 423, "fixLineNum": 36, "fixNodeStartChar": 1436, "fixNodeLength": 413, "sourceBeforeFix": "/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ Object load(Object key); ", "sourceAfterFix": "/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ V load(K key); "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0d033264d0139a1080c54706d5681d4876a8f881", "fixCommitParentSHA1": "f5f134fe08151b1d5592dd81a38c4851012b76e1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/core/MapStore.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/core/MapStore.java b/hazelcast/src/main/java/com/hazelcast/core/MapStore.java\nindex bf2de23..48993c6 100644\n--- a/hazelcast/src/main/java/com/hazelcast/core/MapStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/core/MapStore.java\n@@ -36,14 +36,14 @@\n  * Store implementation can be called synchronously (write-through)\n  * or asynchronously (write-behind) depending on the configuration.\n  */\n-public interface MapStore {\n+public interface MapStore<K, V> {\n     /**\n      * Stores the key-value pair.\n      *\n      * @param key   key of the entry to store\n      * @param value value of the entry to store\n      */\n-    void store(Object key, Object value);\n+    void store(K key, V value);\n \n     /**\n      * Stores multiple entries. Implementation of this method can optimize the\n@@ -51,19 +51,19 @@\n      *\n      * @param map map of entries to store\n      */\n-    void storeAll(Map map);\n+    void storeAll(Map<K, V> map);\n \n     /**\n      * Deletes the entry with a given key from the store.\n      *\n      * @param key key to delete from the store.\n      */\n-    void delete(Object key);\n+    void delete(K key);\n \n     /**\n      * Deletes multiple entries from the store.\n      *\n      * @param keys keys of the entries to delete.\n      */\n-    void deleteAll(Collection keys);\n+    void deleteAll(Collection<K> keys);\n }\n\\ No newline at end of file\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 61, "bugNodeStartChar": 2071, "bugNodeLength": 10, "fixLineNum": 61, "fixNodeStartChar": 2071, "fixNodeLength": 5, "sourceBeforeFix": "Object key", "sourceAfterFix": "K key"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "fixCommitParentSHA1": "439d31cd7be03ad1c2c1b4b3cf04ec57549aaaa1", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterManager.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterManager.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterManager.java\nindex b743d4b..c1c8299 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterManager.java\n@@ -28,9 +28,9 @@\n \r\n public final class ClusterManager extends BaseManager implements ConnectionListener {\r\n \r\n-    private final int WAIT_SECONDS_BEFORE_JOIN = ConfigProperty.WAIT_SECONDS_BEFORE_JOIN.getInteger();\r\n+    private final long WAIT_MILLIS_BEFORE_JOIN = ConfigProperty.WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;\r\n \r\n-    private final int MAX_NO_HEARTBEAT_SECONDS = ConfigProperty.MAX_NO_HEARTBEAT_SECONDS.getInteger();\r\n+    private final long MAX_NO_HEARTBEAT_MILLIS = ConfigProperty.MAX_NO_HEARTBEAT_SECONDS.getInteger() * 1000L;\r\n \r\n     Set<ScheduledAction> setScheduledActions = new HashSet<ScheduledAction>(1000);\r\n \r\n@@ -156,7 +156,7 @@\n                     try {\r\n                         Connection conn = node.connectionManager.getConnection(address);\r\n                         if (conn != null && conn.live()) {\r\n-                            if ((now - memberImpl.getLastRead()) >= (MAX_NO_HEARTBEAT_SECONDS * 1000L)) {\r\n+                            if ((now - memberImpl.getLastRead()) >= (MAX_NO_HEARTBEAT_MILLIS)) {\r\n                                 conn = null;\r\n                                 if (lsDeadAddresses == null) {\r\n                                     lsDeadAddresses = new ArrayList<Address>();\r\n@@ -189,7 +189,7 @@\n                 MemberImpl masterMember = getMember(getMasterAddress());\r\n                 boolean removed = false;\r\n                 if (masterMember != null) {\r\n-                    if ((now - masterMember.getLastRead()) >= (MAX_NO_HEARTBEAT_SECONDS * 1000L)) {\r\n+                    if ((now - masterMember.getLastRead()) >= (MAX_NO_HEARTBEAT_MILLIS)) {\r\n                         doRemoveAddress(getMasterAddress());\r\n                         removed = true;\r\n                     }\r\n@@ -339,7 +339,7 @@\n                 if (setJoins.add(newMemberInfo)) {\r\n                     sendProcessableTo(new Master(node.getMasterAddress()), conn);\r\n                     // sendAddRemoveToAllConns(newAddress);\r\n-                    timeToStartJoin = System.currentTimeMillis() + (WAIT_SECONDS_BEFORE_JOIN * 1000L);\r\n+                    timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n                 } else {\r\n                     if (System.currentTimeMillis() > timeToStartJoin) {\r\n                         startJoin();\r\n@@ -401,7 +401,7 @@\n     void joinReset() {\r\n         joinInProgress = false;\r\n         setJoins.clear();\r\n-        timeToStartJoin = System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000;\r\n+        timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n     }\r\n \r\n     public class AsyncRemotelyObjectCallable extends TargetAwareOp {\r\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 404, "bugNodeStartChar": 16823, "bugNodeLength": 60, "fixLineNum": 404, "fixNodeStartChar": 16420, "fixNodeLength": 52, "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6e015f738dbc659ea0b840f302de9b46a0497719", "fixCommitParentSHA1": "5c9bb59dfea3fb151ca37b1e1cc1beef15555191", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\nindex 8309ee5..1ee73ff 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n@@ -59,7 +59,7 @@\n             if (clusterMember == null) {\n                 clusterMember = dummy; \n                 if (listenerSet != null && listenerSet.size() > 0) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     dummy, MembershipEvent.MEMBER_ADDED);\n@@ -79,7 +79,7 @@\n             Set<Member> it = clusterMembers.keySet();\n             for (final Member cm : it) {\n                 if (!setNew.contains(cm)) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     cm, MembershipEvent.MEMBER_REMOVED);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 62, "bugNodeStartChar": 2444, "bugNodeLength": 497, "fixLineNum": 62, "fixNodeStartChar": 2444, "fixNodeLength": 498, "sourceBeforeFix": "node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )", "sourceAfterFix": "node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6e015f738dbc659ea0b840f302de9b46a0497719", "fixCommitParentSHA1": "5c9bb59dfea3fb151ca37b1e1cc1beef15555191", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\nindex 8309ee5..1ee73ff 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n@@ -59,7 +59,7 @@\n             if (clusterMember == null) {\n                 clusterMember = dummy; \n                 if (listenerSet != null && listenerSet.size() > 0) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     dummy, MembershipEvent.MEMBER_ADDED);\n@@ -79,7 +79,7 @@\n             Set<Member> it = clusterMembers.keySet();\n             for (final Member cm : it) {\n                 if (!setNew.contains(cm)) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     cm, MembershipEvent.MEMBER_REMOVED);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 62, "bugNodeStartChar": 2444, "bugNodeLength": 497, "fixLineNum": 62, "fixNodeStartChar": 2444, "fixNodeLength": 498, "sourceBeforeFix": "node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )", "sourceAfterFix": "node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "6e015f738dbc659ea0b840f302de9b46a0497719", "fixCommitParentSHA1": "5c9bb59dfea3fb151ca37b1e1cc1beef15555191", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\nindex 8309ee5..1ee73ff 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n@@ -59,7 +59,7 @@\n             if (clusterMember == null) {\n                 clusterMember = dummy; \n                 if (listenerSet != null && listenerSet.size() > 0) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     dummy, MembershipEvent.MEMBER_ADDED);\n@@ -79,7 +79,7 @@\n             Set<Member> it = clusterMembers.keySet();\n             for (final Member cm : it) {\n                 if (!setNew.contains(cm)) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     cm, MembershipEvent.MEMBER_REMOVED);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 3353, "bugNodeLength": 498, "fixLineNum": 82, "fixNodeStartChar": 3353, "fixNodeLength": 499, "sourceBeforeFix": "node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )", "sourceAfterFix": "node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "6e015f738dbc659ea0b840f302de9b46a0497719", "fixCommitParentSHA1": "5c9bb59dfea3fb151ca37b1e1cc1beef15555191", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\nindex 8309ee5..1ee73ff 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/ClusterImpl.java\n@@ -59,7 +59,7 @@\n             if (clusterMember == null) {\n                 clusterMember = dummy; \n                 if (listenerSet != null && listenerSet.size() > 0) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     dummy, MembershipEvent.MEMBER_ADDED);\n@@ -79,7 +79,7 @@\n             Set<Member> it = clusterMembers.keySet();\n             for (final Member cm : it) {\n                 if (!setNew.contains(cm)) {\n-                    node.executorManager.executeLocaly(new Runnable() {\n+                    node.executorManager.executeLocally(new Runnable() {\n                         public void run() {\n                             MembershipEvent membershipEvent = new MembershipEvent(ClusterImpl.this,\n                                     cm, MembershipEvent.MEMBER_REMOVED);\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 82, "bugNodeStartChar": 3353, "bugNodeLength": 498, "fixLineNum": 82, "fixNodeStartChar": 3353, "fixNodeLength": 499, "sourceBeforeFix": "node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )", "sourceAfterFix": "node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "fdb0411ff888217d8accbe07c1b916bbb780bd68", "fixCommitParentSHA1": "8a912b42ee5398c202cb8b0b41f60023e367ce63", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java b/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java\nindex f362e52..b79d1ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java\n@@ -208,7 +208,16 @@\n             }\r\n             final InetAddress inetAddress = InetAddress.getByName(currentAddress);\r\n             ServerSocket serverSocket = serverSocketChannel.socket();\r\n-            serverSocket.setReuseAddress(false);\r\n+            /**\r\n+             * why setReuseAddress(true)?\r\n+             * when the member is shutdown,\r\n+             * the serversocket port will be in TIME_WAIT state for the next\r\n+             * 2 minutes or so. If you start the member right after shutting it down\r\n+             * you may not able able to bind to the same port because it is in TIME_WAIT\r\n+             * state. if you set reuseaddress=true then TIME_WAIT will be ignored and\r\n+             * you will be able to bind to the same port again.\r\n+             */\r\n+            serverSocket.setReuseAddress(true);\r\n             InetSocketAddress isa;\r\n \r\n             int port = config.getPort();\r\n@@ -219,7 +228,7 @@\n                     break;\r\n                 } catch (final Exception e) {\r\n                     serverSocket = serverSocketChannel.socket();\r\n-                    serverSocket.setReuseAddress(false);\r\n+                    serverSocket.setReuseAddress(true);\r\n                     port++;\r\n                 }\r\n             }\r\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 211, "bugNodeStartChar": 9275, "bugNodeLength": 35, "fixLineNum": 220, "fixNodeStartChar": 9584, "fixNodeLength": 34, "sourceBeforeFix": "serverSocket.setReuseAddress(false)", "sourceAfterFix": "serverSocket.setReuseAddress(true)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "fdb0411ff888217d8accbe07c1b916bbb780bd68", "fixCommitParentSHA1": "8a912b42ee5398c202cb8b0b41f60023e367ce63", "bugFilePath": "hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java", "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java b/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java\nindex f362e52..b79d1ee 100644\n--- a/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java\n+++ b/hazelcast/src/main/java/com/hazelcast/impl/AddressPicker.java\n@@ -208,7 +208,16 @@\n             }\r\n             final InetAddress inetAddress = InetAddress.getByName(currentAddress);\r\n             ServerSocket serverSocket = serverSocketChannel.socket();\r\n-            serverSocket.setReuseAddress(false);\r\n+            /**\r\n+             * why setReuseAddress(true)?\r\n+             * when the member is shutdown,\r\n+             * the serversocket port will be in TIME_WAIT state for the next\r\n+             * 2 minutes or so. If you start the member right after shutting it down\r\n+             * you may not able able to bind to the same port because it is in TIME_WAIT\r\n+             * state. if you set reuseaddress=true then TIME_WAIT will be ignored and\r\n+             * you will be able to bind to the same port again.\r\n+             */\r\n+            serverSocket.setReuseAddress(true);\r\n             InetSocketAddress isa;\r\n \r\n             int port = config.getPort();\r\n@@ -219,7 +228,7 @@\n                     break;\r\n                 } catch (final Exception e) {\r\n                     serverSocket = serverSocketChannel.socket();\r\n-                    serverSocket.setReuseAddress(false);\r\n+                    serverSocket.setReuseAddress(true);\r\n                     port++;\r\n                 }\r\n             }\r\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 222, "bugNodeStartChar": 9741, "bugNodeLength": 35, "fixLineNum": 222, "fixNodeStartChar": 9520, "fixNodeLength": 34, "sourceBeforeFix": "serverSocket.setReuseAddress(false)", "sourceAfterFix": "serverSocket.setReuseAddress(true)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "22d6101cbd3c821cdbb3faa50c5f59700fe2b8e7", "fixCommitParentSHA1": "1f62be0ed15eacf6d4b98ff150e2051d1f0e6b02", "bugFilePath": "src/com/hazelcast/web/WebFilter.java", "fixPatch": "diff --git a/src/com/hazelcast/web/WebFilter.java b/src/com/hazelcast/web/WebFilter.java\nindex 9ac7fd3..1aef7c6 100644\n--- a/src/com/hazelcast/web/WebFilter.java\n+++ b/src/com/hazelcast/web/WebFilter.java\n@@ -415,7 +415,7 @@\n \r\n         private String encodeURL(final String url, final String sessionURLPhrase) {\r\n             // should not encode if cookies in evidence\r\n-            if (url == null || req == null || req.isRequestedSessionIdFromCookie()) {\r\n+            if (url != null || req == null || req.isRequestedSessionIdFromCookie()) {\r\n                 final int prefix = url.indexOf(sessionURLPhrase);\r\n                 if (prefix != -1) {\r\n                     int suffix = url.indexOf(\"?\", prefix);\r\n", "projectName": "hazelcast.hazelcast", "bugLineNum": 418, "bugNodeStartChar": 16266, "bugNodeLength": 11, "fixLineNum": 418, "fixNodeStartChar": 15849, "fixNodeLength": 11, "sourceBeforeFix": "url == null", "sourceAfterFix": "url != null"}]