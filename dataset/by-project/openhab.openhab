[
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "6550ca67932a2e1ea9400bc020024742e937e2b6",
    "fixCommitParentSHA1": "9cb660ea9ec37721f62b79d727358fa4636f8fa0",
    "bugFilePath": "bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java b/bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java\nindex eecc57c..5f48f69 100644\n--- a/bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java\n+++ b/bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java\n@@ -115,7 +115,7 @@\n         if (!checkPrerequisites()) {\n             return false;\n         }\n-        return doSendTweet(tweetTxt, null);\n+        return sendTweet(tweetTxt, (File)null);\n     }\n \n     /**\n@@ -167,7 +167,7 @@\n         }\n     \n         // send the Tweet\n-        final boolean result = sendTweet(tweetTxt, fileToAttach);\n+        boolean result = sendTweet(tweetTxt, fileToAttach);\n         // delete temp file (if needed)\n         if (deleteTemporaryFile) {\n         \tFileUtils.deleteQuietly(fileToAttach);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 170,
    "bugNodeStartChar": 6666,
    "bugNodeLength": 57,
    "fixLineNum": 170,
    "fixNodeStartChar": 6666,
    "fixNodeLength": 51,
    "sourceBeforeFix": "16",
    "sourceAfterFix": "0"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "f134246ed9ef17b49dfed0367b1c1e9f575745d9",
    "fixCommitParentSHA1": "a2a8ce4c2c548aec39644a79d4d0de1a600726bd",
    "bugFilePath": "bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java b/bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java\nindex 90763e3..99f9fa7 100644\n--- a/bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java\n@@ -108,7 +108,7 @@\n         /* Configuration string should be in the form \"pin:NUMBER [debounse:NUMBER] [activelow:yes|no]\" */\r\n         String[] properties = bindingConfig.split(\" \");\r\n \r\n-        if (properties.length > 3) {\r\n+        if (properties.length > 4) {\r\n             logger.error(\"Wrong number of arguments (\" + properties.length + \") in configuration string '\"\r\n                     + bindingConfig + \"'\");\r\n             throw new BindingConfigParseException(\"Wrong number of agruments (\" + properties.length\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 111,
    "bugNodeStartChar": 4131,
    "bugNodeLength": 21,
    "fixLineNum": 111,
    "fixNodeStartChar": 4021,
    "fixNodeLength": 21,
    "sourceBeforeFix": "properties.length > 3",
    "sourceAfterFix": "properties.length > 4"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "604d099376ed4466ba7f73521953e2eea734b93d",
    "fixCommitParentSHA1": "fa0710985c6520b8569be312364fe1cc36b1bdcd",
    "bugFilePath": "bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/ConfigDeviceStore.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/ConfigDeviceStore.java b/bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/ConfigDeviceStore.java\nindex 8fe86e4..efc1e85 100644\n--- a/bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/ConfigDeviceStore.java\n+++ b/bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/ConfigDeviceStore.java\n@@ -54,7 +54,7 @@\n         val[7] = (byte) (prodId);\n         if (map.containsKey(address)) {\n             byte oldVal[] = map.get(address);\n-            if (Arrays.equals(oldVal, val)) {\n+            if (!Arrays.equals(oldVal, val)) {\n                 logger.warn(\"Product code for device {} re-assigned from {}/{} to {}/{}.\", address,\n                         bytesToInt(oldVal, 0, 4), bytesToInt(oldVal, 4, 4), manId, prodId);\n             }\n@@ -81,7 +81,7 @@\n \n     private int bytesToInt(byte bytes[], int idx, int len) {\n         int val = 0;\n-        for (int i = 0; i < len; ++len) {\n+        for (int i = 0; i < len; i++) {\n             val = val << 8;\n             val = val | bytes[idx + i];\n         }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 57,
    "bugNodeStartChar": 1726,
    "bugNodeLength": 26,
    "fixLineNum": 57,
    "fixNodeStartChar": 1726,
    "fixNodeLength": 27,
    "sourceBeforeFix": "Arrays.equals(oldVal,val)",
    "sourceAfterFix": "!Arrays.equals(oldVal,val)"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "5f5cd45dfa66a816f86995a9540a536c55141ca4",
    "fixCommitParentSHA1": "1ee76e90338de7f3d692e4ea9fdda813cfef2eba",
    "bugFilePath": "bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java\nindex d745763..a855a3f 100644\n--- a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java\n+++ b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java\n@@ -973,7 +973,7 @@\n \n         private int extractValue(Msg msg, int group) throws FieldException {\n             String lowByte = getStringParameter(\"low_byte\", \"\");\n-            if (!lowByte.equals(\"\")) {\n+            if (lowByte.equals(\"\")) {\n                 logger.error(\"{} handler misconfigured, missing low_byte!\", nm());\n                 return 0;\n             }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 976,
    "bugNodeStartChar": 39045,
    "bugNodeLength": 19,
    "fixLineNum": 976,
    "fixNodeStartChar": 39045,
    "fixNodeLength": 18,
    "sourceBeforeFix": "!lowByte.equals(\"\")",
    "sourceAfterFix": "lowByte.equals(\"\")"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "a4980ba44a28ec8a5e6f0eef348ca94ac2438d68",
    "fixCommitParentSHA1": "d16d4a02a30e1dedb36874d8bb8847d4602c84e5",
    "bugFilePath": "bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java b/bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java\nindex 2e7c1da..3eb1d01 100644\n--- a/bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java\n+++ b/bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java\n@@ -220,7 +220,7 @@\n         for (String item : bindingProvider.getItemNames()) {\n             CalDavConfig config = bindingProvider.getConfig(item);\n             List<CalDavEvent> events = eventCache.get(config.getUniqueEventListKey());\n-            if (events == null) {\n+            if (events == null && this.calDavLoader != null) {\n                 CalDavQuery query = getQueryForConfig(config);\n                 events = this.calDavLoader.getEvents(query);\n                 eventCache.put(config.getUniqueEventListKey(), events);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 223,
    "bugNodeStartChar": 7038,
    "bugNodeLength": 14,
    "fixLineNum": 223,
    "fixNodeStartChar": 7038,
    "fixNodeLength": 43,
    "sourceBeforeFix": "events == null",
    "sourceAfterFix": "events == null && this.calDavLoader != null"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "c818c799fcc7a2a922892754dfd62611bea1123a",
    "fixCommitParentSHA1": "8b7a6bda79aa127b3ca9c12ceceed1a4f2588d5e",
    "bugFilePath": "bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcDataConverter.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcDataConverter.java b/bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcDataConverter.java\nindex c4163b7..f74705c 100644\n--- a/bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcDataConverter.java\n+++ b/bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcDataConverter.java\n@@ -184,7 +184,7 @@\n             short month = date.getMonth();\n             short day = date.getDay();\n \n-            cal.set(year, month, day, 0, 0, 0);\n+            cal.set(year, month - 1, day, 0, 0, 0);\n         }\n \n         if (time != null) {\n@@ -192,7 +192,7 @@\n             int minute = time.getMinutes();\n             int second = time.getSeconds();\n \n-            cal.set(1900, 1, 1, hour, minute, second);\n+            cal.set(1900, 0, 1, hour, minute, second);\n         }\n \n         return cal;\n@@ -292,7 +292,7 @@\n                 Calendar c = ((DateTimeType) type).getCalendar();\n \n                 short year = (short) c.get(Calendar.YEAR);\n-                byte month = (byte) c.get(Calendar.MONTH);\n+                byte month = (byte) (c.get(Calendar.MONTH) + 1);\n                 byte day = (byte) c.get(Calendar.DAY_OF_MONTH);\n \n                 ((WSDateValue) value).setYear(year);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 195,
    "bugNodeStartChar": 7271,
    "bugNodeLength": 41,
    "fixLineNum": 195,
    "fixNodeStartChar": 7271,
    "fixNodeLength": 41,
    "sourceBeforeFix": "cal.set(1900,1,1,hour,minute,second)",
    "sourceAfterFix": "cal.set(1900,0,1,hour,minute,second)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "0d0ab352fa9a8ac9cb2dcb543ba1705a4e187eb1",
    "fixCommitParentSHA1": "db119f1740f3517172081541e211de940b3d2f9c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\nindex 040270e..312092d 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\n@@ -100,7 +100,7 @@\n                 if (batteryLevel == 255) {\n                     batteryLevel = 0;\n                     batteryLow = true;\n-                    logger.warn(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n+                    logger.debug(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n                 } else {\n                     batteryLow = false;\n                 }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 103,
    "bugNodeStartChar": 3928,
    "bugNodeLength": 64,
    "fixLineNum": 103,
    "fixNodeStartChar": 3928,
    "fixNodeLength": 65,
    "sourceBeforeFix": "logger.warn(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())",
    "sourceAfterFix": "logger.debug(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0d0ab352fa9a8ac9cb2dcb543ba1705a4e187eb1",
    "fixCommitParentSHA1": "db119f1740f3517172081541e211de940b3d2f9c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\nindex 040270e..312092d 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\n@@ -100,7 +100,7 @@\n                 if (batteryLevel == 255) {\n                     batteryLevel = 0;\n                     batteryLow = true;\n-                    logger.warn(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n+                    logger.debug(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n                 } else {\n                     batteryLow = false;\n                 }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 103,
    "bugNodeStartChar": 3928,
    "bugNodeLength": 64,
    "fixLineNum": 103,
    "fixNodeStartChar": 3928,
    "fixNodeLength": 65,
    "sourceBeforeFix": "logger.warn(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())",
    "sourceAfterFix": "logger.debug(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "363b7fa22f42bde9ccec8b66b8bc554e9b710a1b",
    "fixCommitParentSHA1": "da5e03aa314c78ef06666de61f609ece8fc41446",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java\nindex 29450ba..5f02034 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java\n@@ -210,7 +210,8 @@\n \n                 // the config-key enumeration contains additional keys that we\n                 // don't want to process here ...\n-                if (CONFIG_REFRESH.equals(configKey) || \"service.pid\".equals(configKey)) {\n+                if (CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey)\n+                        || \"service.pid\".equals(configKey)) {\n                     continue;\n                 }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 213,
    "bugNodeStartChar": 7891,
    "bugNodeLength": 67,
    "fixLineNum": 213,
    "fixNodeStartChar": 7891,
    "fixNodeLength": 131,
    "sourceBeforeFix": "CONFIG_REFRESH.equals(configKey) || \"service.pid\".equals(configKey)",
    "sourceAfterFix": "CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey) || \"service.pid\".equals(configKey)"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 602,
    "bugNodeStartChar": 16406,
    "bugNodeLength": 30,
    "fixLineNum": 602,
    "fixNodeStartChar": 16406,
    "fixNodeLength": 29,
    "sourceBeforeFix": "level <= RF_STATUS_FULL_SIGNAL",
    "sourceAfterFix": "level < RF_STATUS_FULL_SIGNAL"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 604,
    "bugNodeStartChar": 16491,
    "bugNodeLength": 30,
    "fixLineNum": 604,
    "fixNodeStartChar": 16491,
    "fixNodeLength": 29,
    "sourceBeforeFix": "level <= RF_STATUS_HIGH_SIGNAL",
    "sourceAfterFix": "level < RF_STATUS_HIGH_SIGNAL"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 606,
    "bugNodeStartChar": 16576,
    "bugNodeLength": 32,
    "fixLineNum": 606,
    "fixNodeStartChar": 16576,
    "fixNodeLength": 31,
    "sourceBeforeFix": "level <= RF_STATUS_MEDIUM_SIGNAL",
    "sourceAfterFix": "level < RF_STATUS_MEDIUM_SIGNAL"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 608,
    "bugNodeStartChar": 16663,
    "bugNodeLength": 29,
    "fixLineNum": 608,
    "fixNodeStartChar": 16663,
    "fixNodeLength": 28,
    "sourceBeforeFix": "level <= RF_STATUS_LOW_SIGNAL",
    "sourceAfterFix": "level < RF_STATUS_LOW_SIGNAL"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 646,
    "bugNodeStartChar": 18015,
    "bugNodeLength": 17,
    "fixLineNum": 646,
    "fixNodeStartChar": 18015,
    "fixNodeLength": 16,
    "sourceBeforeFix": "batteryVp >= full",
    "sourceAfterFix": "batteryVp > full"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 648,
    "bugNodeStartChar": 18087,
    "bugNodeLength": 17,
    "fixLineNum": 648,
    "fixNodeStartChar": 18087,
    "fixNodeLength": 16,
    "sourceBeforeFix": "batteryVp >= high",
    "sourceAfterFix": "batteryVp > high"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 650,
    "bugNodeStartChar": 18159,
    "bugNodeLength": 19,
    "fixLineNum": 650,
    "fixNodeStartChar": 18159,
    "fixNodeLength": 18,
    "sourceBeforeFix": "batteryVp >= medium",
    "sourceAfterFix": "batteryVp > medium"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
    "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
    "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 652,
    "bugNodeStartChar": 18233,
    "bugNodeLength": 16,
    "fixLineNum": 652,
    "fixNodeStartChar": 18233,
    "fixNodeLength": 15,
    "sourceBeforeFix": "batteryVp >= low",
    "sourceAfterFix": "batteryVp > low"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "623a0ead3cbcf3a722365aedcbcecc4fbbc74131",
    "fixCommitParentSHA1": "fb59dd68aeaf0f9518239c683ceb0d78bebee017",
    "bugFilePath": "bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java b/bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java\nindex 3eed230..86e9ada 100644\n--- a/bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java\n+++ b/bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java\n@@ -60,7 +60,7 @@\n     /**\n      * Restarts the JobScheduler after a short delay.\n      */\n-    public void restart() {\n+    public synchronized void restart() {\n         delayedExecutor.cancel();\n         delayedExecutor.schedule(new TimerTask() {\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 60,
    "bugNodeStartChar": 2112,
    "bugNodeLength": 320,
    "fixLineNum": 60,
    "fixNodeStartChar": 2112,
    "fixNodeLength": 333,
    "sourceBeforeFix": "1",
    "sourceAfterFix": "33"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "de0619f9a5ddaae3c2b3248dc82bca1d0f8c11aa",
    "fixCommitParentSHA1": "5a13d649839aa5652e51dfaa2d023ca5108b3d73",
    "bugFilePath": "bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java b/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java\nindex e8a84a9..4c99ce4 100644\n--- a/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java\n+++ b/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java\n@@ -66,16 +66,16 @@\n      *\n      * @param module reference to set\n      */\n-    public static void setSatelCommModule(SatelCommModule module) {\n+    public void setSatelCommModule(SatelCommModule module) {\n         satelCommModule = module;\n     }\n \n     /**\n-     * Removes reference to Satel communication module service/\n+     * Removes reference to Satel communication module service.\n      *\n      * @param module reference to remove\n      */\n-    public static void unsetSatelCommModule(SatelCommModule module) {\n+    public void unsetSatelCommModule(SatelCommModule module) {\n         if (satelCommModule == module) {\n             satelCommModule = null;\n         }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 64,
    "bugNodeStartChar": 1702,
    "bugNodeLength": 227,
    "fixLineNum": 64,
    "fixNodeStartChar": 1702,
    "fixNodeLength": 220,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "de0619f9a5ddaae3c2b3248dc82bca1d0f8c11aa",
    "fixCommitParentSHA1": "5a13d649839aa5652e51dfaa2d023ca5108b3d73",
    "bugFilePath": "bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java b/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java\nindex e8a84a9..4c99ce4 100644\n--- a/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java\n+++ b/bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java\n@@ -66,16 +66,16 @@\n      *\n      * @param module reference to set\n      */\n-    public static void setSatelCommModule(SatelCommModule module) {\n+    public void setSatelCommModule(SatelCommModule module) {\n         satelCommModule = module;\n     }\n \n     /**\n-     * Removes reference to Satel communication module service/\n+     * Removes reference to Satel communication module service.\n      *\n      * @param module reference to remove\n      */\n-    public static void unsetSatelCommModule(SatelCommModule module) {\n+    public void unsetSatelCommModule(SatelCommModule module) {\n         if (satelCommModule == module) {\n             satelCommModule = null;\n         }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 73,
    "bugNodeStartChar": 1935,
    "bugNodeLength": 286,
    "fixLineNum": 73,
    "fixNodeStartChar": 1935,
    "fixNodeLength": 279,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "fa829ec763703ed534b7fa1d79271857a28f4142",
    "fixCommitParentSHA1": "20f2e3ba56c27ab9afe4acb59dce86b639bbdd78",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentEnergyMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentEnergyMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentEnergyMessage.java\nindex 5ddaf07..089b46b 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentEnergyMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentEnergyMessage.java\n@@ -147,9 +147,9 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[19];\n+        byte[] data = new byte[20];\n \n-        data[0] = 0x13;\n+        data[0] = (byte)(data.length-1);\n         data[1] = RFXComBaseMessage.PacketType.CURRENT_ENERGY.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 150,
    "bugNodeStartChar": 4406,
    "bugNodeLength": 12,
    "fixLineNum": 150,
    "fixNodeStartChar": 4406,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[19]",
    "sourceAfterFix": "new byte[20]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "fa829ec763703ed534b7fa1d79271857a28f4142",
    "fixCommitParentSHA1": "20f2e3ba56c27ab9afe4acb59dce86b639bbdd78",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComDateTimeMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComDateTimeMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComDateTimeMessage.java\nindex 0e33b63..d082447 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComDateTimeMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComDateTimeMessage.java\n@@ -163,9 +163,9 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[13];\n+        byte[] data = new byte[14];\n \n-        data[0] = 0x0D;\n+        data[0] = (byte)(data.length-1);\n         data[1] = RFXComBaseMessage.PacketType.DATE_TIME.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 166,
    "bugNodeStartChar": 4331,
    "bugNodeLength": 12,
    "fixLineNum": 166,
    "fixNodeStartChar": 4331,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[13]",
    "sourceAfterFix": "new byte[14]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "fa829ec763703ed534b7fa1d79271857a28f4142",
    "fixCommitParentSHA1": "20f2e3ba56c27ab9afe4acb59dce86b639bbdd78",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureRainMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureRainMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureRainMessage.java\nindex 8410fb9..0012bf3 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureRainMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureRainMessage.java\n@@ -108,9 +108,9 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[10];\n+        byte[] data = new byte[11];\n \n-        data[0] = 0x0B;\n+        data[0] = (byte)(data.length-1);\n         data[1] = RFXComBaseMessage.PacketType.TEMPERATURE_RAIN.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 111,
    "bugNodeStartChar": 3288,
    "bugNodeLength": 12,
    "fixLineNum": 111,
    "fixNodeStartChar": 3288,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[10]",
    "sourceAfterFix": "new byte[11]"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e",
    "fixCommitParentSHA1": "3b76f51ab2bbd4ae86dc7b333fc78bee52c1ec0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\nindex 5b3eeb8..909cfad 100644\n--- a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n+++ b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n@@ -224,7 +224,7 @@\n         // check if special \"soap value parser\" handler for extracting SOAP value is defined. If yes, use svp\n         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 // extract value from soap response\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {\n@@ -734,7 +734,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);\n@@ -799,7 +799,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             // only get missed calls of the last x days\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 227,
    "bugNodeStartChar": 9285,
    "bugNodeLength": 55,
    "fixLineNum": 227,
    "fixNodeStartChar": 9285,
    "fixNodeLength": 56,
    "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0",
    "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e",
    "fixCommitParentSHA1": "3b76f51ab2bbd4ae86dc7b333fc78bee52c1ec0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\nindex 5b3eeb8..909cfad 100644\n--- a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n+++ b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n@@ -224,7 +224,7 @@\n         // check if special \"soap value parser\" handler for extracting SOAP value is defined. If yes, use svp\n         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 // extract value from soap response\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {\n@@ -734,7 +734,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);\n@@ -799,7 +799,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             // only get missed calls of the last x days\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 737,
    "bugNodeStartChar": 34848,
    "bugNodeLength": 55,
    "fixLineNum": 737,
    "fixNodeStartChar": 34848,
    "fixNodeLength": 56,
    "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0",
    "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e",
    "fixCommitParentSHA1": "3b76f51ab2bbd4ae86dc7b333fc78bee52c1ec0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\nindex 5b3eeb8..909cfad 100644\n--- a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n+++ b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n@@ -224,7 +224,7 @@\n         // check if special \"soap value parser\" handler for extracting SOAP value is defined. If yes, use svp\n         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 // extract value from soap response\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {\n@@ -734,7 +734,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);\n@@ -799,7 +799,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             // only get missed calls of the last x days\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 802,
    "bugNodeStartChar": 38546,
    "bugNodeLength": 55,
    "fixLineNum": 802,
    "fixNodeStartChar": 38546,
    "fixNodeLength": 56,
    "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0",
    "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1",
    "fixCommitParentSHA1": "3b76f51ab2bbd4ae86dc7b333fc78bee52c1ec0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\nindex 5b3eeb8..909cfad 100644\n--- a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n+++ b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n@@ -224,7 +224,7 @@\n         // check if special \"soap value parser\" handler for extracting SOAP value is defined. If yes, use svp\n         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 // extract value from soap response\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {\n@@ -734,7 +734,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);\n@@ -799,7 +799,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             // only get missed calls of the last x days\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 227,
    "bugNodeStartChar": 9285,
    "bugNodeLength": 55,
    "fixLineNum": 227,
    "fixNodeStartChar": 9285,
    "fixNodeLength": 56,
    "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0",
    "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1",
    "fixCommitParentSHA1": "3b76f51ab2bbd4ae86dc7b333fc78bee52c1ec0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\nindex 5b3eeb8..909cfad 100644\n--- a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n+++ b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n@@ -224,7 +224,7 @@\n         // check if special \"soap value parser\" handler for extracting SOAP value is defined. If yes, use svp\n         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 // extract value from soap response\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {\n@@ -734,7 +734,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);\n@@ -799,7 +799,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             // only get missed calls of the last x days\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 737,
    "bugNodeStartChar": 34848,
    "bugNodeLength": 55,
    "fixLineNum": 737,
    "fixNodeStartChar": 34848,
    "fixNodeLength": 56,
    "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0",
    "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1",
    "fixCommitParentSHA1": "3b76f51ab2bbd4ae86dc7b333fc78bee52c1ec0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\nindex 5b3eeb8..909cfad 100644\n--- a/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n+++ b/bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java\n@@ -224,7 +224,7 @@\n         // check if special \"soap value parser\" handler for extracting SOAP value is defined. If yes, use svp\n         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 // extract value from soap response\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {\n@@ -734,7 +734,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             Document xmlTamInfo = getFboxXmlResponse(url);\n@@ -799,7 +799,7 @@\n                         }\n                     } else {\n                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL\n-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             // extract URL from soap response\n                             String url = nlDataOutNodes.item(0).getTextContent();\n                             // only get missed calls of the last x days\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 802,
    "bugNodeStartChar": 38546,
    "bugNodeLength": 55,
    "fixLineNum": 802,
    "fixNodeStartChar": 38546,
    "fixNodeLength": 56,
    "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0",
    "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "d2ef1a77b447f376d25a9ce03662fc4c2a27ad25",
    "fixCommitParentSHA1": "3f5e4342744b357775c461f34662c107d5d3983b",
    "bugFilePath": "bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java b/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java\nindex be4a92b..a3b7657 100644\n--- a/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java\n+++ b/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java\n@@ -193,7 +193,7 @@\n             handleEventType(new StringType(formatHours(heatpumpValues[63])), HeatpumpCommandType.TYPE_HOURS_HETPUMP);\n             handleEventType(new StringType(formatHours(heatpumpValues[64])), HeatpumpCommandType.TYPE_HOURS_HEATING);\n             handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_WARMWATER);\n-            handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_COOLING);\n+            handleEventType(new StringType(formatHours(heatpumpValues[66])), HeatpumpCommandType.TYPE_HOURS_COOLING);\n             handleEventType(new DecimalType((double) heatpumpValues[151] / 10),\n                     HeatpumpCommandType.TYPE_THERMALENERGY_HEATING);\n             handleEventType(new DecimalType((double) heatpumpValues[152] / 10),\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 196,
    "bugNodeStartChar": 9653,
    "bugNodeLength": 18,
    "fixLineNum": 196,
    "fixNodeStartChar": 9653,
    "fixNodeLength": 18,
    "sourceBeforeFix": "heatpumpValues[65]",
    "sourceAfterFix": "heatpumpValues[66]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "c6f1ef95e0c2d48cbeb3d6e88a271b2df6399494",
    "fixCommitParentSHA1": "ceade0423a2bd82464f41977ba28c45fc9539d89",
    "bugFilePath": "bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java b/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java\nindex be4a92b..a3b7657 100644\n--- a/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java\n+++ b/bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java\n@@ -193,7 +193,7 @@\n             handleEventType(new StringType(formatHours(heatpumpValues[63])), HeatpumpCommandType.TYPE_HOURS_HETPUMP);\n             handleEventType(new StringType(formatHours(heatpumpValues[64])), HeatpumpCommandType.TYPE_HOURS_HEATING);\n             handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_WARMWATER);\n-            handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_COOLING);\n+            handleEventType(new StringType(formatHours(heatpumpValues[66])), HeatpumpCommandType.TYPE_HOURS_COOLING);\n             handleEventType(new DecimalType((double) heatpumpValues[151] / 10),\n                     HeatpumpCommandType.TYPE_THERMALENERGY_HEATING);\n             handleEventType(new DecimalType((double) heatpumpValues[152] / 10),\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 196,
    "bugNodeStartChar": 9653,
    "bugNodeLength": 18,
    "fixLineNum": 196,
    "fixNodeStartChar": 9653,
    "fixNodeLength": 18,
    "sourceBeforeFix": "heatpumpValues[65]",
    "sourceAfterFix": "heatpumpValues[66]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244",
    "fixCommitParentSHA1": "4a8eb0aac0677a6aeb66472f4cac1c0e3cdf0fcc",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java\nindex 995c6cd..7852203 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java\n@@ -128,7 +128,7 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[13];\n+        byte[] data = new byte[14];\n \n         data[0] = 0x0D;\n         data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 131,
    "bugNodeStartChar": 3814,
    "bugNodeLength": 12,
    "fixLineNum": 131,
    "fixNodeStartChar": 3814,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[13]",
    "sourceAfterFix": "new byte[14]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244",
    "fixCommitParentSHA1": "4a8eb0aac0677a6aeb66472f4cac1c0e3cdf0fcc",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java\nindex 694f6c4..6a48072 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java\n@@ -139,7 +139,7 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[17];\n+        byte[] data = new byte[18];\n \n         data[0] = 0x11;\n         data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 142,
    "bugNodeStartChar": 4296,
    "bugNodeLength": 12,
    "fixLineNum": 142,
    "fixNodeStartChar": 4296,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[17]",
    "sourceAfterFix": "new byte[18]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244",
    "fixCommitParentSHA1": "4a8eb0aac0677a6aeb66472f4cac1c0e3cdf0fcc",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java\nindex e457558..7e03019 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java\n@@ -112,7 +112,7 @@\n \r\n     @Override\r\n     public byte[] decodeMessage() {\r\n-        byte[] data = new byte[10];\r\n+        byte[] data = new byte[12];\r\n \r\n         data[0] = 0x0B;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 115,
    "bugNodeStartChar": 3428,
    "bugNodeLength": 12,
    "fixLineNum": 115,
    "fixNodeStartChar": 3314,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[10]",
    "sourceAfterFix": "new byte[12]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244",
    "fixCommitParentSHA1": "4a8eb0aac0677a6aeb66472f4cac1c0e3cdf0fcc",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java\nindex ba32214..d89eb87 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java\n@@ -126,7 +126,7 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[9];\n+        byte[] data = new byte[10];\n \n         data[0] = 0x09;\n         data[1] = RFXComBaseMessage.PacketType.UV.toByte();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 129,
    "bugNodeStartChar": 3525,
    "bugNodeLength": 11,
    "fixLineNum": 129,
    "fixNodeStartChar": 3525,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[9]",
    "sourceAfterFix": "new byte[10]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244",
    "fixCommitParentSHA1": "4a8eb0aac0677a6aeb66472f4cac1c0e3cdf0fcc",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\nindex 54b8255..1c8d002 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\n@@ -137,7 +137,7 @@\n \r\n     @Override\r\n     public byte[] decodeMessage() {\r\n-        byte[] data = new byte[16];\r\n+        byte[] data = new byte[17];\r\n \r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 140,
    "bugNodeStartChar": 4505,
    "bugNodeLength": 12,
    "fixLineNum": 140,
    "fixNodeStartChar": 4366,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[16]",
    "sourceAfterFix": "new byte[17]"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f234c4b35a51ebc8950e2817ef8472d6971e9b85",
    "fixCommitParentSHA1": "4871b5c29b658585697b58b1a63735290c98a270",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex 9a689ac..7eba696 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -390,7 +390,7 @@\n                     records.add(record);\n                 }\n \n-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {\n+                if ((ZWaveWakeUpCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"wakeup/\", \"Wakeup Period\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 393,
    "bugNodeStartChar": 19327,
    "bugNodeLength": 75,
    "fixLineNum": 393,
    "fixNodeStartChar": 19327,
    "fixNodeLength": 68,
    "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)",
    "sourceAfterFix": "(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "fdf006472803475925acac0b66e57225254d8d4e",
    "fixCommitParentSHA1": "acd7e159d2b9ce1cad742ebadce8ce1804553ad1",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex 9a689ac..7eba696 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -390,7 +390,7 @@\n                     records.add(record);\n                 }\n \n-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {\n+                if ((ZWaveWakeUpCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"wakeup/\", \"Wakeup Period\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 393,
    "bugNodeStartChar": 19327,
    "bugNodeLength": 75,
    "fixLineNum": 393,
    "fixNodeStartChar": 19327,
    "fixNodeLength": 68,
    "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)",
    "sourceAfterFix": "(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6b1aa819b0f3ce0b5dee0e70470738f22d81af38",
    "fixCommitParentSHA1": "732d9051d4be10de3b8f42771af2d08d0c14da7a",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex 75c4b8b..9a689ac 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -384,7 +384,7 @@\n                     records.add(record);\n                 }\n \n-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n+                if ((ZWaveAssociationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"associations/\", \"Association Groups\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 387,
    "bugNodeStartChar": 18989,
    "bugNodeLength": 79,
    "fixLineNum": 387,
    "fixNodeStartChar": 18989,
    "fixNodeLength": 77,
    "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)",
    "sourceAfterFix": "(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "acd7e159d2b9ce1cad742ebadce8ce1804553ad1",
    "fixCommitParentSHA1": "e2e553cb5bd4d7239da8b8e58f7af7f210d18b1e",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex 75c4b8b..9a689ac 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -384,7 +384,7 @@\n                     records.add(record);\n                 }\n \n-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n+                if ((ZWaveAssociationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"associations/\", \"Association Groups\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 387,
    "bugNodeStartChar": 18989,
    "bugNodeLength": 79,
    "fixLineNum": 387,
    "fixNodeStartChar": 18989,
    "fixNodeLength": 77,
    "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)",
    "sourceAfterFix": "(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb",
    "fixCommitParentSHA1": "693a52814c462eb0f3b96e6c6c1c381892406c42",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java\nindex 995c6cd..7852203 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java\n@@ -128,7 +128,7 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[13];\n+        byte[] data = new byte[14];\n \n         data[0] = 0x0D;\n         data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 131,
    "bugNodeStartChar": 3814,
    "bugNodeLength": 12,
    "fixLineNum": 131,
    "fixNodeStartChar": 3814,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[13]",
    "sourceAfterFix": "new byte[14]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb",
    "fixCommitParentSHA1": "693a52814c462eb0f3b96e6c6c1c381892406c42",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java\nindex d2fc092..01d6d0c 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java\n@@ -139,7 +139,7 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[17];\n+        byte[] data = new byte[18];\n \n         data[0] = 0x11;\n         data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 142,
    "bugNodeStartChar": 4274,
    "bugNodeLength": 12,
    "fixLineNum": 142,
    "fixNodeStartChar": 4274,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[17]",
    "sourceAfterFix": "new byte[18]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb",
    "fixCommitParentSHA1": "693a52814c462eb0f3b96e6c6c1c381892406c42",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java\nindex e457558..7e03019 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java\n@@ -112,7 +112,7 @@\n \r\n     @Override\r\n     public byte[] decodeMessage() {\r\n-        byte[] data = new byte[10];\r\n+        byte[] data = new byte[12];\r\n \r\n         data[0] = 0x0B;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 115,
    "bugNodeStartChar": 3428,
    "bugNodeLength": 12,
    "fixLineNum": 115,
    "fixNodeStartChar": 3314,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[10]",
    "sourceAfterFix": "new byte[12]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb",
    "fixCommitParentSHA1": "693a52814c462eb0f3b96e6c6c1c381892406c42",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java\nindex ba32214..d89eb87 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java\n@@ -126,7 +126,7 @@\n \n     @Override\n     public byte[] decodeMessage() {\n-        byte[] data = new byte[9];\n+        byte[] data = new byte[10];\n \n         data[0] = 0x09;\n         data[1] = RFXComBaseMessage.PacketType.UV.toByte();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 129,
    "bugNodeStartChar": 3525,
    "bugNodeLength": 11,
    "fixLineNum": 129,
    "fixNodeStartChar": 3525,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[9]",
    "sourceAfterFix": "new byte[10]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb",
    "fixCommitParentSHA1": "693a52814c462eb0f3b96e6c6c1c381892406c42",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\nindex 54b8255..1c8d002 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\n@@ -137,7 +137,7 @@\n \r\n     @Override\r\n     public byte[] decodeMessage() {\r\n-        byte[] data = new byte[16];\r\n+        byte[] data = new byte[17];\r\n \r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 140,
    "bugNodeStartChar": 4505,
    "bugNodeLength": 12,
    "fixLineNum": 140,
    "fixNodeStartChar": 4366,
    "fixNodeLength": 12,
    "sourceBeforeFix": "new byte[16]",
    "sourceAfterFix": "new byte[17]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd",
    "fixCommitParentSHA1": "aedb000cb50d123d7c13ba89fbd6b8c51e1fd80a",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 222,
    "bugNodeStartChar": 10388,
    "bugNodeLength": 16,
    "fixLineNum": 222,
    "fixNodeStartChar": 10167,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd",
    "fixCommitParentSHA1": "aedb000cb50d123d7c13ba89fbd6b8c51e1fd80a",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 231,
    "bugNodeStartChar": 10883,
    "bugNodeLength": 16,
    "fixLineNum": 231,
    "fixNodeStartChar": 10653,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd",
    "fixCommitParentSHA1": "aedb000cb50d123d7c13ba89fbd6b8c51e1fd80a",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 719,
    "bugNodeStartChar": 29883,
    "bugNodeLength": 16,
    "fixLineNum": 719,
    "fixNodeStartChar": 29165,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd",
    "fixCommitParentSHA1": "aedb000cb50d123d7c13ba89fbd6b8c51e1fd80a",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 742,
    "bugNodeStartChar": 30849,
    "bugNodeLength": 16,
    "fixLineNum": 742,
    "fixNodeStartChar": 30108,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf",
    "fixCommitParentSHA1": "b5a457613183b4042f93f25bb0b375bf5de4f4ee",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 222,
    "bugNodeStartChar": 10388,
    "bugNodeLength": 16,
    "fixLineNum": 222,
    "fixNodeStartChar": 10167,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf",
    "fixCommitParentSHA1": "b5a457613183b4042f93f25bb0b375bf5de4f4ee",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 231,
    "bugNodeStartChar": 10883,
    "bugNodeLength": 16,
    "fixLineNum": 231,
    "fixNodeStartChar": 10653,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf",
    "fixCommitParentSHA1": "b5a457613183b4042f93f25bb0b375bf5de4f4ee",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 719,
    "bugNodeStartChar": 29883,
    "bugNodeLength": 16,
    "fixLineNum": 719,
    "fixNodeStartChar": 29165,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf",
    "fixCommitParentSHA1": "b5a457613183b4042f93f25bb0b375bf5de4f4ee",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex 0758542..b3938ed 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -178,8 +178,7 @@\n                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n-                }\r\n-                if (command instanceof PercentType) {\r\n+                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r\n@@ -219,7 +218,7 @@\n                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -228,7 +227,7 @@\n                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n-                        Thread.sleep(50);\r\n+                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r\n@@ -716,7 +715,7 @@\n             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n-                    Thread.sleep(50);\r\n+                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r\n@@ -739,7 +738,7 @@\n             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n-                Thread.sleep(50);\r\n+                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 742,
    "bugNodeStartChar": 30849,
    "bugNodeLength": 16,
    "fixLineNum": 742,
    "fixNodeStartChar": 30108,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(50)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\nindex ebbcfdb..52ffb6d 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n@@ -46,7 +46,7 @@\n \t\t\tthrow new InvalidDataException(\n \t\t\t\t\t\"Could not find SecurityToken in JSON data\");\n \t\tsecurityToken = data.toString();\n-\t\tlogger.debug(\"myq securityToken: {}\", securityToken);\n+\t\tlogger.trace(\"myq securityToken: {}\", securityToken);\n \t}\n \n \t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 49,
    "bugNodeStartChar": 1417,
    "bugNodeLength": 52,
    "fixLineNum": 49,
    "fixNodeStartChar": 1417,
    "fixNodeLength": 52,
    "sourceBeforeFix": "logger.debug(\"myq securityToken: {}\",securityToken)",
    "sourceAfterFix": "logger.trace(\"myq securityToken: {}\",securityToken)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\nindex ebbcfdb..52ffb6d 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n@@ -46,7 +46,7 @@\n \t\t\tthrow new InvalidDataException(\n \t\t\t\t\t\"Could not find SecurityToken in JSON data\");\n \t\tsecurityToken = data.toString();\n-\t\tlogger.debug(\"myq securityToken: {}\", securityToken);\n+\t\tlogger.trace(\"myq securityToken: {}\", securityToken);\n \t}\n \n \t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 49,
    "bugNodeStartChar": 1417,
    "bugNodeLength": 52,
    "fixLineNum": 49,
    "fixNodeStartChar": 1417,
    "fixNodeLength": 52,
    "sourceBeforeFix": "logger.debug(\"myq securityToken: {}\",securityToken)",
    "sourceAfterFix": "logger.trace(\"myq securityToken: {}\",securityToken)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 6117,
    "bugNodeLength": 43,
    "fixLineNum": 192,
    "fixNodeStartChar": 6117,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")",
    "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 6117,
    "bugNodeLength": 43,
    "fixLineNum": 192,
    "fixNodeStartChar": 6117,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")",
    "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 281,
    "bugNodeStartChar": 8765,
    "bugNodeLength": 86,
    "fixLineNum": 281,
    "fixNodeStartChar": 8765,
    "fixNodeLength": 86,
    "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)",
    "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 281,
    "bugNodeStartChar": 8765,
    "bugNodeLength": 86,
    "fixLineNum": 281,
    "fixNodeStartChar": 8765,
    "fixNodeLength": 86,
    "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)",
    "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 360,
    "bugNodeStartChar": 11053,
    "bugNodeLength": 68,
    "fixLineNum": 360,
    "fixNodeStartChar": 11053,
    "fixNodeLength": 68,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 360,
    "bugNodeStartChar": 11053,
    "bugNodeLength": 68,
    "fixLineNum": 360,
    "fixNodeStartChar": 11053,
    "fixNodeLength": 68,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 377,
    "bugNodeStartChar": 11590,
    "bugNodeLength": 46,
    "fixLineNum": 377,
    "fixNodeStartChar": 11590,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 377,
    "bugNodeStartChar": 11590,
    "bugNodeLength": 46,
    "fixLineNum": 377,
    "fixNodeStartChar": 11590,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 101,
    "bugNodeStartChar": 2769,
    "bugNodeLength": 37,
    "fixLineNum": 101,
    "fixNodeStartChar": 2769,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")",
    "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 101,
    "bugNodeStartChar": 2769,
    "bugNodeLength": 37,
    "fixLineNum": 101,
    "fixNodeStartChar": 2769,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")",
    "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 115,
    "bugNodeStartChar": 3206,
    "bugNodeLength": 35,
    "fixLineNum": 115,
    "fixNodeStartChar": 3206,
    "fixNodeLength": 35,
    "sourceBeforeFix": "logger.debug(\"attempting to login\")",
    "sourceAfterFix": "logger.trace(\"attempting to login\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 115,
    "bugNodeStartChar": 3206,
    "bugNodeLength": 35,
    "fixLineNum": 115,
    "fixNodeStartChar": 3206,
    "fixNodeLength": 35,
    "sourceBeforeFix": "logger.debug(\"attempting to login\")",
    "sourceAfterFix": "logger.trace(\"attempting to login\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 186,
    "bugNodeStartChar": 5662,
    "bugNodeLength": 37,
    "fixLineNum": 186,
    "fixNodeStartChar": 5662,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)",
    "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 186,
    "bugNodeStartChar": 5662,
    "bugNodeLength": 37,
    "fixLineNum": 186,
    "fixNodeStartChar": 5662,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)",
    "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 5847,
    "bugNodeLength": 50,
    "fixLineNum": 192,
    "fixNodeStartChar": 5847,
    "fixNodeLength": 50,
    "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)",
    "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 5847,
    "bugNodeLength": 50,
    "fixLineNum": 192,
    "fixNodeStartChar": 5847,
    "fixNodeLength": 50,
    "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)",
    "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 202,
    "bugNodeStartChar": 6156,
    "bugNodeLength": 46,
    "fixLineNum": 202,
    "fixNodeStartChar": 6156,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)",
    "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
    "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 202,
    "bugNodeStartChar": 6156,
    "bugNodeLength": 46,
    "fixLineNum": 202,
    "fixNodeStartChar": 6156,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)",
    "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\nindex ebbcfdb..52ffb6d 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n@@ -46,7 +46,7 @@\n \t\t\tthrow new InvalidDataException(\n \t\t\t\t\t\"Could not find SecurityToken in JSON data\");\n \t\tsecurityToken = data.toString();\n-\t\tlogger.debug(\"myq securityToken: {}\", securityToken);\n+\t\tlogger.trace(\"myq securityToken: {}\", securityToken);\n \t}\n \n \t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 49,
    "bugNodeStartChar": 1417,
    "bugNodeLength": 52,
    "fixLineNum": 49,
    "fixNodeStartChar": 1417,
    "fixNodeLength": 52,
    "sourceBeforeFix": "logger.debug(\"myq securityToken: {}\",securityToken)",
    "sourceAfterFix": "logger.trace(\"myq securityToken: {}\",securityToken)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\nindex ebbcfdb..52ffb6d 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java\n@@ -46,7 +46,7 @@\n \t\t\tthrow new InvalidDataException(\n \t\t\t\t\t\"Could not find SecurityToken in JSON data\");\n \t\tsecurityToken = data.toString();\n-\t\tlogger.debug(\"myq securityToken: {}\", securityToken);\n+\t\tlogger.trace(\"myq securityToken: {}\", securityToken);\n \t}\n \n \t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 49,
    "bugNodeStartChar": 1417,
    "bugNodeLength": 52,
    "fixLineNum": 49,
    "fixNodeStartChar": 1417,
    "fixNodeLength": 52,
    "sourceBeforeFix": "logger.debug(\"myq securityToken: {}\",securityToken)",
    "sourceAfterFix": "logger.trace(\"myq securityToken: {}\",securityToken)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 6117,
    "bugNodeLength": 43,
    "fixLineNum": 192,
    "fixNodeStartChar": 6117,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")",
    "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 6117,
    "bugNodeLength": 43,
    "fixLineNum": 192,
    "fixNodeStartChar": 6117,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")",
    "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 281,
    "bugNodeStartChar": 8765,
    "bugNodeLength": 86,
    "fixLineNum": 281,
    "fixNodeStartChar": 8765,
    "fixNodeLength": 86,
    "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)",
    "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 281,
    "bugNodeStartChar": 8765,
    "bugNodeLength": 86,
    "fixLineNum": 281,
    "fixNodeStartChar": 8765,
    "fixNodeLength": 86,
    "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)",
    "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 360,
    "bugNodeStartChar": 11053,
    "bugNodeLength": 68,
    "fixLineNum": 360,
    "fixNodeStartChar": 11053,
    "fixNodeLength": 68,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 360,
    "bugNodeStartChar": 11053,
    "bugNodeLength": 68,
    "fixLineNum": 360,
    "fixNodeStartChar": 11053,
    "fixNodeLength": 68,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 377,
    "bugNodeStartChar": 11590,
    "bugNodeLength": 46,
    "fixLineNum": 377,
    "fixNodeStartChar": 11590,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 377,
    "bugNodeStartChar": 11590,
    "bugNodeLength": 46,
    "fixLineNum": 377,
    "fixNodeStartChar": 11590,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")",
    "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 101,
    "bugNodeStartChar": 2769,
    "bugNodeLength": 37,
    "fixLineNum": 101,
    "fixNodeStartChar": 2769,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")",
    "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 101,
    "bugNodeStartChar": 2769,
    "bugNodeLength": 37,
    "fixLineNum": 101,
    "fixNodeStartChar": 2769,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")",
    "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 115,
    "bugNodeStartChar": 3206,
    "bugNodeLength": 35,
    "fixLineNum": 115,
    "fixNodeStartChar": 3206,
    "fixNodeLength": 35,
    "sourceBeforeFix": "logger.debug(\"attempting to login\")",
    "sourceAfterFix": "logger.trace(\"attempting to login\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 115,
    "bugNodeStartChar": 3206,
    "bugNodeLength": 35,
    "fixLineNum": 115,
    "fixNodeStartChar": 3206,
    "fixNodeLength": 35,
    "sourceBeforeFix": "logger.debug(\"attempting to login\")",
    "sourceAfterFix": "logger.trace(\"attempting to login\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 186,
    "bugNodeStartChar": 5662,
    "bugNodeLength": 37,
    "fixLineNum": 186,
    "fixNodeStartChar": 5662,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)",
    "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 186,
    "bugNodeStartChar": 5662,
    "bugNodeLength": 37,
    "fixLineNum": 186,
    "fixNodeStartChar": 5662,
    "fixNodeLength": 37,
    "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)",
    "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 5847,
    "bugNodeLength": 50,
    "fixLineNum": 192,
    "fixNodeStartChar": 5847,
    "fixNodeLength": 50,
    "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)",
    "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 192,
    "bugNodeStartChar": 5847,
    "bugNodeLength": 50,
    "fixLineNum": 192,
    "fixNodeStartChar": 5847,
    "fixNodeLength": 50,
    "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)",
    "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 202,
    "bugNodeStartChar": 6156,
    "bugNodeLength": 46,
    "fixLineNum": 202,
    "fixNodeStartChar": 6156,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)",
    "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5",
    "fixCommitParentSHA1": "17380150434ec1f8ab8a8caff3f9af5e2bbdaa9a",
    "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 202,
    "bugNodeStartChar": 6156,
    "bugNodeLength": 46,
    "fixLineNum": 202,
    "fixNodeStartChar": 6156,
    "fixNodeLength": 46,
    "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)",
    "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "b343db0e694992c3f6c037bcc5eefae4c10db61f",
    "fixCommitParentSHA1": "5091fef77997d84f0940a4be797541a40e9d4054",
    "bugFilePath": "bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java b/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java\nindex b3992ff..1fd65b3 100644\n--- a/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java\n@@ -47,7 +47,7 @@\n \t\tMeasureType measureType = null;\n \t\t\n \t\tif (configElements.length == 1) {\n-\t\t\tmeasureType = MeasureType.valueOf(configElements[1].toUpperCase());\n+\t\t\tmeasureType = MeasureType.valueOf(configElements[0].toUpperCase());\n \t\t}\n \t\telse if (configElements.length == 2) {\n \t\t\taccountId = configElements[0];\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 50,
    "bugNodeStartChar": 1653,
    "bugNodeLength": 17,
    "fixLineNum": 50,
    "fixNodeStartChar": 1653,
    "fixNodeLength": 17,
    "sourceBeforeFix": "configElements[1]",
    "sourceAfterFix": "configElements[0]"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ec6db0e0ab4948c4056a7c13da54f67c26c1ccaf",
    "fixCommitParentSHA1": "9f33838169e4c3165d5ab75b879a7b1e6fa96bab",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex 0123361..fa2ec1a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -747,7 +747,7 @@\n \n \t\t\t\t// If there are no configuration entries for this node, then continue.\n \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n-\t\t\t\tif(configList.size() == 0) {\n+\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 750,
    "bugNodeStartChar": 32462,
    "bugNodeLength": 22,
    "fixLineNum": 750,
    "fixNodeStartChar": 32462,
    "fixNodeLength": 44,
    "sourceBeforeFix": "configList.size() == 0",
    "sourceAfterFix": "configList == null || configList.size() == 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "ec6db0e0ab4948c4056a7c13da54f67c26c1ccaf",
    "fixCommitParentSHA1": "9f33838169e4c3165d5ab75b879a7b1e6fa96bab",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex 0123361..fa2ec1a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -747,7 +747,7 @@\n \n \t\t\t\t// If there are no configuration entries for this node, then continue.\n \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n-\t\t\t\tif(configList.size() == 0) {\n+\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 750,
    "bugNodeStartChar": 32462,
    "bugNodeLength": 22,
    "fixLineNum": 750,
    "fixNodeStartChar": 32462,
    "fixNodeLength": 44,
    "sourceBeforeFix": "configList.size() == 0",
    "sourceAfterFix": "configList == null || configList.size() == 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a2e9823d1c81937fea9a5a72f6ee8c073eeeb100",
    "fixCommitParentSHA1": "9f33838169e4c3165d5ab75b879a7b1e6fa96bab",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex 0123361..fa2ec1a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -747,7 +747,7 @@\n \n \t\t\t\t// If there are no configuration entries for this node, then continue.\n \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n-\t\t\t\tif(configList.size() == 0) {\n+\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 750,
    "bugNodeStartChar": 32462,
    "bugNodeLength": 22,
    "fixLineNum": 750,
    "fixNodeStartChar": 32462,
    "fixNodeLength": 44,
    "sourceBeforeFix": "configList.size() == 0",
    "sourceAfterFix": "configList == null || configList.size() == 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a2e9823d1c81937fea9a5a72f6ee8c073eeeb100",
    "fixCommitParentSHA1": "9f33838169e4c3165d5ab75b879a7b1e6fa96bab",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex 0123361..fa2ec1a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -747,7 +747,7 @@\n \n \t\t\t\t// If there are no configuration entries for this node, then continue.\n \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n-\t\t\t\tif(configList.size() == 0) {\n+\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 750,
    "bugNodeStartChar": 32462,
    "bugNodeLength": 22,
    "fixLineNum": 750,
    "fixNodeStartChar": 32462,
    "fixNodeLength": 44,
    "sourceBeforeFix": "configList.size() == 0",
    "sourceAfterFix": "configList == null || configList.size() == 0"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "6b76d27c535a56fb1060f8e89870a5b6764812c3",
    "fixCommitParentSHA1": "9f33838169e4c3165d5ab75b879a7b1e6fa96bab",
    "bugFilePath": "bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java b/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java\nindex b3992ff..1fd65b3 100644\n--- a/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java\n@@ -47,7 +47,7 @@\n \t\tMeasureType measureType = null;\n \t\t\n \t\tif (configElements.length == 1) {\n-\t\t\tmeasureType = MeasureType.valueOf(configElements[1].toUpperCase());\n+\t\t\tmeasureType = MeasureType.valueOf(configElements[0].toUpperCase());\n \t\t}\n \t\telse if (configElements.length == 2) {\n \t\t\taccountId = configElements[0];\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 50,
    "bugNodeStartChar": 1653,
    "bugNodeLength": 17,
    "fixLineNum": 50,
    "fixNodeStartChar": 1653,
    "fixNodeLength": 17,
    "sourceBeforeFix": "configElements[1]",
    "sourceAfterFix": "configElements[0]"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "8038c106a246401ddf7690a004d6daa3ee098299",
    "fixCommitParentSHA1": "de187c4ac29dbbbf3b3859a88fdc341a2748bbf5",
    "bugFilePath": "bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\nindex eaa696e..2e107e5 100644\n--- a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n+++ b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n@@ -371,7 +371,7 @@\n \t\t\t\t\t\t\tm_address, -dt);\n \t\t\t\t\treturn (timeNow + 2000L); // retry soon\n \t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n+\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\n \t\t\tQEntry qe = m_requestQueue.poll(); // take it off the queue!\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 374,
    "bugNodeStartChar": 12160,
    "bugNodeLength": 72,
    "fixLineNum": 374,
    "fixNodeStartChar": 12160,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)",
    "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8038c106a246401ddf7690a004d6daa3ee098299",
    "fixCommitParentSHA1": "de187c4ac29dbbbf3b3859a88fdc341a2748bbf5",
    "bugFilePath": "bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\nindex eaa696e..2e107e5 100644\n--- a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n+++ b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n@@ -371,7 +371,7 @@\n \t\t\t\t\t\t\tm_address, -dt);\n \t\t\t\t\treturn (timeNow + 2000L); // retry soon\n \t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n+\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\n \t\t\tQEntry qe = m_requestQueue.poll(); // take it off the queue!\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 374,
    "bugNodeStartChar": 12160,
    "bugNodeLength": 72,
    "fixLineNum": 374,
    "fixNodeStartChar": 12160,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)",
    "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "198d4ef1420ba1c306b33cd48061c37d79fc8098",
    "fixCommitParentSHA1": "0146da4c0a6accfe1df79ee77593f1ab1388333e",
    "bugFilePath": "bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\nindex eaa696e..2e107e5 100644\n--- a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n+++ b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n@@ -371,7 +371,7 @@\n \t\t\t\t\t\t\tm_address, -dt);\n \t\t\t\t\treturn (timeNow + 2000L); // retry soon\n \t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n+\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\n \t\t\tQEntry qe = m_requestQueue.poll(); // take it off the queue!\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 374,
    "bugNodeStartChar": 12160,
    "bugNodeLength": 72,
    "fixLineNum": 374,
    "fixNodeStartChar": 12160,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)",
    "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "198d4ef1420ba1c306b33cd48061c37d79fc8098",
    "fixCommitParentSHA1": "0146da4c0a6accfe1df79ee77593f1ab1388333e",
    "bugFilePath": "bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\nindex eaa696e..2e107e5 100644\n--- a/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n+++ b/bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java\n@@ -371,7 +371,7 @@\n \t\t\t\t\t\t\tm_address, -dt);\n \t\t\t\t\treturn (timeNow + 2000L); // retry soon\n \t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n+\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\n \t\t\tQEntry qe = m_requestQueue.poll(); // take it off the queue!\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 374,
    "bugNodeStartChar": 12160,
    "bugNodeLength": 72,
    "fixLineNum": 374,
    "fixNodeStartChar": 12160,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)",
    "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "fee49a6279223da125be367228089d901dbaba28",
    "fixCommitParentSHA1": "191f34beebd9e55608d1dd5634457152c5da3939",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java\nindex 81911ef..c41d859 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java\n@@ -367,7 +367,7 @@\n \t\tZIP_SERVER(0x24,\"ZIP_SERVER\",null),\n \t\tSWITCH_BINARY(0x25,\"SWITCH_BINARY\",ZWaveBinarySwitchCommandClass.class),\n \t\tSWITCH_MULTILEVEL(0x26,\"SWITCH_MULTILEVEL\",ZWaveMultiLevelSwitchCommandClass.class),\n-\t\tSWITCH_ALL(0x27,\"SWITCH_ALL\",ZWaveSwithcAllCommandClass.class),\n+\t\tSWITCH_ALL(0x27,\"SWITCH_ALL\",ZWaveSwitchAllCommandClass.class),\n \t\tSWITCH_TOGGLE_BINARY(0x28,\"SWITCH_TOGGLE_BINARY\",null),\n \t\tSWITCH_TOGGLE_MULTILEVEL(0x29,\"SWITCH_TOGGLE_MULTILEVEL\",null),\n \t\tCHIMNEY_FAN(0x2A,\"CHIMNEY_FAN\",null),\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 370,
    "bugNodeStartChar": 12124,
    "bugNodeLength": 32,
    "fixLineNum": 370,
    "fixNodeStartChar": 12124,
    "fixNodeLength": 32,
    "sourceBeforeFix": "ZWaveSwithcAllCommandClass.class",
    "sourceAfterFix": "ZWaveSwitchAllCommandClass.class"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "86be57325cc9593d2ff5cf6fd0d16c2e692e4933",
    "fixCommitParentSHA1": "beaa7eef392715a1ce6fd3663450c2bea604b933",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java\nindex bfd7d6b..3f051a0 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java\n@@ -111,7 +111,7 @@\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlogger.debug(\"NODE {}: Calling handleApplicationCommandRequest.\", this.getNode().getNodeId());\n-\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 1);\n+\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);\n \t\t\t\t}\n \t\t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 114,
    "bugNodeStartChar": 4196,
    "bugNodeLength": 79,
    "fixLineNum": 114,
    "fixNodeStartChar": 4196,
    "fixNodeLength": 79,
    "sourceBeforeFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)",
    "sourceAfterFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "647bac3a8b28b15a6d3fec9456f8062f1a2b8b3c",
    "fixCommitParentSHA1": "575d36a15dfacbbf04bff3baaefea13604cbdd42",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java\nindex bfd7d6b..3f051a0 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java\n@@ -111,7 +111,7 @@\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlogger.debug(\"NODE {}: Calling handleApplicationCommandRequest.\", this.getNode().getNodeId());\n-\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 1);\n+\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);\n \t\t\t\t}\n \t\t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 114,
    "bugNodeStartChar": 4196,
    "bugNodeLength": 79,
    "fixLineNum": 114,
    "fixNodeStartChar": 4196,
    "fixNodeLength": 79,
    "sourceBeforeFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)",
    "sourceAfterFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f4ef5cb8de13c00684bb38c6ac4360aee9e98a55",
    "fixCommitParentSHA1": "31adf1c4b2ecf78540e71354ca1598a7f4c62a74",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java\nindex 69b01a4..d8d4713 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java\n@@ -244,7 +244,10 @@\n \t\tfor (PlexBindingProvider provider : providers) {\n \t\t\tfor (String itemName : provider.getItemNames()) {\n \t\t\t\tPlexBindingConfig config = provider.getConfig(itemName);\n-\t\t\t\tif (session.getMachineIdentifier().equals(config.getMachineIdentifier()))\n+\t\t\t\t// In newer PMS versions, the machine identifier in the session also contains the type \n+\t\t\t\t// of media that is playing (<id>_Video for example). We'll keep it backwards compatible\n+\t\t\t\t// by only matching the first part of the machine identifier.\n+\t\t\t\tif (session.getMachineIdentifier().startsWith(config.getMachineIdentifier()))\n \t\t\t\t\tupdateConfigFromSession(config, session);\n \t\t\t}\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 247,
    "bugNodeStartChar": 6951,
    "bugNodeLength": 68,
    "fixLineNum": 250,
    "fixNodeStartChar": 7202,
    "fixNodeLength": 72,
    "sourceBeforeFix": "session.getMachineIdentifier().equals(config.getMachineIdentifier())",
    "sourceAfterFix": "session.getMachineIdentifier().startsWith(config.getMachineIdentifier())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f4ef5cb8de13c00684bb38c6ac4360aee9e98a55",
    "fixCommitParentSHA1": "31adf1c4b2ecf78540e71354ca1598a7f4c62a74",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java\nindex 69b01a4..d8d4713 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java\n@@ -244,7 +244,10 @@\n \t\tfor (PlexBindingProvider provider : providers) {\n \t\t\tfor (String itemName : provider.getItemNames()) {\n \t\t\t\tPlexBindingConfig config = provider.getConfig(itemName);\n-\t\t\t\tif (session.getMachineIdentifier().equals(config.getMachineIdentifier()))\n+\t\t\t\t// In newer PMS versions, the machine identifier in the session also contains the type \n+\t\t\t\t// of media that is playing (<id>_Video for example). We'll keep it backwards compatible\n+\t\t\t\t// by only matching the first part of the machine identifier.\n+\t\t\t\tif (session.getMachineIdentifier().startsWith(config.getMachineIdentifier()))\n \t\t\t\t\tupdateConfigFromSession(config, session);\n \t\t\t}\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 247,
    "bugNodeStartChar": 6951,
    "bugNodeLength": 68,
    "fixLineNum": 250,
    "fixNodeStartChar": 7202,
    "fixNodeLength": 72,
    "sourceBeforeFix": "session.getMachineIdentifier().equals(config.getMachineIdentifier())",
    "sourceAfterFix": "session.getMachineIdentifier().startsWith(config.getMachineIdentifier())"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "1f360832f203ae6f9f5f674059f1a195b18db39c",
    "fixCommitParentSHA1": "affdf50f82063ab78ce4527f158450cd1d3cfe2e",
    "bugFilePath": "bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java b/bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java\nindex 8d14eb0..b9a60b7 100644\n--- a/bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java\n+++ b/bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java\n@@ -114,7 +114,7 @@\n \t\t\t\t\t\t\n \t\t\t\t\t\tString stateResponseSearch = \"var sockstates = \";\n \t\t\t\t\t\tint findState=loginResponseString.lastIndexOf(stateResponseSearch);\n-\t\t\t\t\t\tif (findState !=0) {\n+\t\t\t\t\t\tif (findState > 0) {\n \t\t\t\t\t\t\tlogger.trace(\"searchstring sockstates found at position {}\", findState);\n \t\t\t\t\t\t\t\n \t\t\t\t\t\t\tString slicedResponse = loginResponseString.substring(findState+18, findState+25);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 117,
    "bugNodeStartChar": 3490,
    "bugNodeLength": 13,
    "fixLineNum": 117,
    "fixNodeStartChar": 3490,
    "fixNodeLength": 13,
    "sourceBeforeFix": "findState != 0",
    "sourceAfterFix": "findState > 0"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "3a1be8e56587d0c4665f54f0cc2536cbe0a375f7",
    "fixCommitParentSHA1": "8124e1d28ce858c77350bc4000e7805581583457",
    "bugFilePath": "bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\nindex 3a2f6cc..94c6c83 100644\n--- a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n+++ b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n@@ -68,7 +68,7 @@\n \tprivate boolean mKNXConnectionEstablished;\n \n \tpublic void activate(ComponentContext componentContext) {\n-\t\tlogger.info(\"Calimero library version {}\", Settings.getLibraryVersion());\n+\t\tlogger.debug(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 71,
    "bugNodeStartChar": 2666,
    "bugNodeLength": 72,
    "fixLineNum": 71,
    "fixNodeStartChar": 2666,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.info(\"Calimero library version {}\",Settings.getLibraryVersion())",
    "sourceAfterFix": "logger.debug(\"Calimero library version {}\",Settings.getLibraryVersion())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3a1be8e56587d0c4665f54f0cc2536cbe0a375f7",
    "fixCommitParentSHA1": "8124e1d28ce858c77350bc4000e7805581583457",
    "bugFilePath": "bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\nindex 3a2f6cc..94c6c83 100644\n--- a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n+++ b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n@@ -68,7 +68,7 @@\n \tprivate boolean mKNXConnectionEstablished;\n \n \tpublic void activate(ComponentContext componentContext) {\n-\t\tlogger.info(\"Calimero library version {}\", Settings.getLibraryVersion());\n+\t\tlogger.debug(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 71,
    "bugNodeStartChar": 2666,
    "bugNodeLength": 72,
    "fixLineNum": 71,
    "fixNodeStartChar": 2666,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.info(\"Calimero library version {}\",Settings.getLibraryVersion())",
    "sourceAfterFix": "logger.debug(\"Calimero library version {}\",Settings.getLibraryVersion())"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "c3d4ff240dc74621d12e89e24133b5cd928635ca",
    "fixCommitParentSHA1": "664965e95ea96e695b677d8c633ac47a05aebb8e",
    "bugFilePath": "bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java b/bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java\nindex d487457..78d1377 100644\n--- a/bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java\n+++ b/bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java\n@@ -339,7 +339,8 @@\n \t\t// Iterate through bindings and update all inbound values.\n \t\tfor (final EcobeeBindingProvider provider : this.providers) {\n \t\t\tfor (final String itemName : provider.getItemNames()) {\n-\t\t\t\tif (provider.isInBound(itemName) && credentialsMatch(provider, itemName, oauthCredentials)) {\n+\t\t\t\tif (provider.isInBound(itemName) && credentialsMatch(provider, itemName, oauthCredentials)\n+\t\t\t\t\t\t&& thermostats.containsKey(provider.getThermostatIdentifier(itemName))) {\n \t\t\t\t\tfinal State newState = getState(provider, thermostats, itemName);\n \n \t\t\t\t\tlogger.debug(\"readEcobee: Updating itemName '{}' with newState '{}'\", itemName, newState);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 342,
    "bugNodeStartChar": 11241,
    "bugNodeLength": 86,
    "fixLineNum": 342,
    "fixNodeStartChar": 11241,
    "fixNodeLength": 163,
    "sourceBeforeFix": "provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials)",
    "sourceAfterFix": "provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials) && thermostats.containsKey(provider.getThermostatIdentifier(itemName))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "7b7249ad2cc3f33406ab319cdf53ad86121fe177",
    "fixCommitParentSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "bugFilePath": "bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\nindex 3a2f6cc..94c6c83 100644\n--- a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n+++ b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n@@ -68,7 +68,7 @@\n \tprivate boolean mKNXConnectionEstablished;\n \n \tpublic void activate(ComponentContext componentContext) {\n-\t\tlogger.info(\"Calimero library version {}\", Settings.getLibraryVersion());\n+\t\tlogger.debug(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 71,
    "bugNodeStartChar": 2666,
    "bugNodeLength": 72,
    "fixLineNum": 71,
    "fixNodeStartChar": 2666,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.info(\"Calimero library version {}\",Settings.getLibraryVersion())",
    "sourceAfterFix": "logger.debug(\"Calimero library version {}\",Settings.getLibraryVersion())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7b7249ad2cc3f33406ab319cdf53ad86121fe177",
    "fixCommitParentSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "bugFilePath": "bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\nindex 3a2f6cc..94c6c83 100644\n--- a/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n+++ b/bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java\n@@ -68,7 +68,7 @@\n \tprivate boolean mKNXConnectionEstablished;\n \n \tpublic void activate(ComponentContext componentContext) {\n-\t\tlogger.info(\"Calimero library version {}\", Settings.getLibraryVersion());\n+\t\tlogger.debug(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 71,
    "bugNodeStartChar": 2666,
    "bugNodeLength": 72,
    "fixLineNum": 71,
    "fixNodeStartChar": 2666,
    "fixNodeLength": 73,
    "sourceBeforeFix": "logger.info(\"Calimero library version {}\",Settings.getLibraryVersion())",
    "sourceAfterFix": "logger.debug(\"Calimero library version {}\",Settings.getLibraryVersion())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 359,
    "bugNodeStartChar": 11260,
    "bugNodeLength": 43,
    "fixLineNum": 359,
    "fixNodeStartChar": 11260,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 359,
    "bugNodeStartChar": 11260,
    "bugNodeLength": 43,
    "fixLineNum": 359,
    "fixNodeStartChar": 11260,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 363,
    "bugNodeStartChar": 11446,
    "bugNodeLength": 43,
    "fixLineNum": 363,
    "fixNodeStartChar": 11446,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 363,
    "bugNodeStartChar": 11446,
    "bugNodeLength": 43,
    "fixLineNum": 363,
    "fixNodeStartChar": 11446,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 392,
    "bugNodeStartChar": 12280,
    "bugNodeLength": 79,
    "fixLineNum": 392,
    "fixNodeStartChar": 12280,
    "fixNodeLength": 79,
    "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())",
    "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
    "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 392,
    "bugNodeStartChar": 12280,
    "bugNodeLength": 79,
    "fixLineNum": 392,
    "fixNodeStartChar": 12280,
    "fixNodeLength": 79,
    "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())",
    "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af",
    "fixCommitParentSHA1": "66c0ba83d19939203b0154caa28f1f90e3aeffd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 359,
    "bugNodeStartChar": 11260,
    "bugNodeLength": 43,
    "fixLineNum": 359,
    "fixNodeStartChar": 11260,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af",
    "fixCommitParentSHA1": "66c0ba83d19939203b0154caa28f1f90e3aeffd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 359,
    "bugNodeStartChar": 11260,
    "bugNodeLength": 43,
    "fixLineNum": 359,
    "fixNodeStartChar": 11260,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af",
    "fixCommitParentSHA1": "66c0ba83d19939203b0154caa28f1f90e3aeffd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 363,
    "bugNodeStartChar": 11446,
    "bugNodeLength": 43,
    "fixLineNum": 363,
    "fixNodeStartChar": 11446,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af",
    "fixCommitParentSHA1": "66c0ba83d19939203b0154caa28f1f90e3aeffd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 363,
    "bugNodeStartChar": 11446,
    "bugNodeLength": 43,
    "fixLineNum": 363,
    "fixNodeStartChar": 11446,
    "fixNodeLength": 43,
    "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)",
    "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af",
    "fixCommitParentSHA1": "66c0ba83d19939203b0154caa28f1f90e3aeffd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 392,
    "bugNodeStartChar": 12280,
    "bugNodeLength": 79,
    "fixLineNum": 392,
    "fixNodeStartChar": 12280,
    "fixNodeLength": 79,
    "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())",
    "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af",
    "fixCommitParentSHA1": "66c0ba83d19939203b0154caa28f1f90e3aeffd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 392,
    "bugNodeStartChar": 12280,
    "bugNodeLength": 79,
    "fixLineNum": 392,
    "fixNodeStartChar": 12280,
    "fixNodeLength": 79,
    "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())",
    "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ec666401f3cf68fd5c5f5b4009deec12ab6e3f45",
    "fixCommitParentSHA1": "351c32722321f87f36fd8014dbaf7b28774a7574",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\nindex 190cb8f..fd8bc4e 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n@@ -225,7 +225,7 @@\n \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n+\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 228,
    "bugNodeStartChar": 7348,
    "bugNodeLength": 97,
    "fixLineNum": 228,
    "fixNodeStartChar": 7348,
    "fixNodeLength": 97,
    "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())",
    "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ec666401f3cf68fd5c5f5b4009deec12ab6e3f45",
    "fixCommitParentSHA1": "351c32722321f87f36fd8014dbaf7b28774a7574",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\nindex 190cb8f..fd8bc4e 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n@@ -225,7 +225,7 @@\n \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n+\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 228,
    "bugNodeStartChar": 7348,
    "bugNodeLength": 97,
    "fixLineNum": 228,
    "fixNodeStartChar": 7348,
    "fixNodeLength": 97,
    "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())",
    "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "72b86ae3aa6b084fc0cacf3ad86506ac9cf6486b",
    "fixCommitParentSHA1": "351c32722321f87f36fd8014dbaf7b28774a7574",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\nindex 190cb8f..fd8bc4e 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n@@ -225,7 +225,7 @@\n \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n+\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 228,
    "bugNodeStartChar": 7348,
    "bugNodeLength": 97,
    "fixLineNum": 228,
    "fixNodeStartChar": 7348,
    "fixNodeLength": 97,
    "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())",
    "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "72b86ae3aa6b084fc0cacf3ad86506ac9cf6486b",
    "fixCommitParentSHA1": "351c32722321f87f36fd8014dbaf7b28774a7574",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\nindex 190cb8f..fd8bc4e 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java\n@@ -225,7 +225,7 @@\n \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n+\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 228,
    "bugNodeStartChar": 7348,
    "bugNodeLength": 97,
    "fixLineNum": 228,
    "fixNodeStartChar": 7348,
    "fixNodeLength": 97,
    "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())",
    "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "f8946ee2b640061a35a4c16bf2588242f27053d7",
    "fixCommitParentSHA1": "11f20fcf5e1fb4cc2cf7ddf1a2d01ee737f7fcb4",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex d49d5a3..004c4e6 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -203,7 +203,7 @@\n \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r\n@@ -218,7 +218,7 @@\n \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 206,
    "bugNodeStartChar": 7984,
    "bugNodeLength": 16,
    "fixLineNum": 206,
    "fixNodeStartChar": 7779,
    "fixNodeLength": 15,
    "sourceBeforeFix": "i <= repeatCount",
    "sourceAfterFix": "i < repeatCount"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "f8946ee2b640061a35a4c16bf2588242f27053d7",
    "fixCommitParentSHA1": "11f20fcf5e1fb4cc2cf7ddf1a2d01ee737f7fcb4",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex d49d5a3..004c4e6 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -203,7 +203,7 @@\n \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r\n@@ -218,7 +218,7 @@\n \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 221,
    "bugNodeStartChar": 8606,
    "bugNodeLength": 16,
    "fixLineNum": 221,
    "fixNodeStartChar": 8386,
    "fixNodeLength": 15,
    "sourceBeforeFix": "i <= repeatCount",
    "sourceAfterFix": "i < repeatCount"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "d5db9f7ce7f4b2c3bfeed3e421213d03b19a8fdd",
    "fixCommitParentSHA1": "11f20fcf5e1fb4cc2cf7ddf1a2d01ee737f7fcb4",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex d49d5a3..004c4e6 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -203,7 +203,7 @@\n \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r\n@@ -218,7 +218,7 @@\n \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 206,
    "bugNodeStartChar": 7984,
    "bugNodeLength": 16,
    "fixLineNum": 206,
    "fixNodeStartChar": 7779,
    "fixNodeLength": 15,
    "sourceBeforeFix": "i <= repeatCount",
    "sourceAfterFix": "i < repeatCount"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "d5db9f7ce7f4b2c3bfeed3e421213d03b19a8fdd",
    "fixCommitParentSHA1": "11f20fcf5e1fb4cc2cf7ddf1a2d01ee737f7fcb4",
    "bugFilePath": "bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\nindex d49d5a3..004c4e6 100644\n--- a/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n+++ b/bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java\n@@ -203,7 +203,7 @@\n \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r\n@@ -218,7 +218,7 @@\n \t\t\t\t\t}\r\n \t\t\t\t} else if (command.compareTo(oldPercent) < 0) {\r\n \t\t\t\t\tint repeatCount = (oldPercent.intValue() - command.intValue()) / 10;\r\n-\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n+\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendDecrease(bulb, rgbwSteps, bridgeId);\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 221,
    "bugNodeStartChar": 8606,
    "bugNodeLength": 16,
    "fixLineNum": 221,
    "fixNodeStartChar": 8386,
    "fixNodeLength": 15,
    "sourceBeforeFix": "i <= repeatCount",
    "sourceAfterFix": "i < repeatCount"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex a9bd733..a1bffcb 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -255,10 +255,11 @@\n \t\t\t\t\trecord = new OpenHABConfigurationRecord(\"nodes/\" + \"node\" + node.getNodeId() + \"/\", node.getNodeId() + \": \" + node.getName());\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\t// If we can't find the product, then try and find just the\n-\t\t\t\t// manufacturer\n+\t\t\t\t// If we can't find the product, then try and find just the manufacturer\n \t\t\t\tif (node.getManufacturer() == Integer.MAX_VALUE) {\n-\t\t\t\t} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\t// The device isn't know, print nothing!\n+\t\t\t\t}\n+\t\t\t\telse if(database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\tif (database.FindManufacturer(node.getManufacturer()) == false) {\n \t\t\t\t\t\trecord.value = \"Manufacturer:\" + node.getManufacturer() + \" [ID:\"\n \t\t\t\t\t\t\t\t+ Integer.toHexString(node.getDeviceId()) + \",Type:\"\n@@ -353,7 +354,7 @@\n \t\t\t\trecords.add(record);\n \n \t\t\t\tif(node.getManufacturer() != Integer.MAX_VALUE) {\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\t// Add links to configuration if the node supports the various command classes\n \t\t\t\t\t\tif(database.doesProductImplementCommandClass(ZWaveCommandClass.CommandClass.CONFIGURATION.getKey()) == true) {\n \t\t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain + \"parameters/\", \"Configuration Parameters\");\n@@ -402,7 +403,7 @@\n \t\t\t\t\t\trecords.add(record);\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain, \"Product\", \"Product\", true);\n \t\t\t\t\t\trecord.value = database.getProductName();\n \t\t\t\t\t\trecords.add(record);\n@@ -621,7 +622,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.equals(\"associations/\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \t\t\t\t\tList<ZWaveDbAssociationGroup> groupList = database.getProductAssociationGroups();\n \n \t\t\t\t\tif (groupList != null) {\n@@ -652,7 +653,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.startsWith(\"associations/association\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \n \t\t\t\t\tString groupString = arg.substring(24);\n \t\t\t\t\tint nextDelimiter = groupString.indexOf('/');\n@@ -1025,7 +1026,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: Refresh associations\", nodeId);\n \n \t\t\t\t\tZWaveProductDatabase database = new ZWaveProductDatabase();\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\t\tlogger.error(\"NODE {}: Error in doAction - no database found\", nodeId);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 261,
    "bugNodeStartChar": 10107,
    "bugNodeLength": 86,
    "fixLineNum": 263,
    "fixNodeStartChar": 10156,
    "fixNodeLength": 116,
    "sourceBeforeFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())",
    "sourceAfterFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex a9bd733..a1bffcb 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -255,10 +255,11 @@\n \t\t\t\t\trecord = new OpenHABConfigurationRecord(\"nodes/\" + \"node\" + node.getNodeId() + \"/\", node.getNodeId() + \": \" + node.getName());\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\t// If we can't find the product, then try and find just the\n-\t\t\t\t// manufacturer\n+\t\t\t\t// If we can't find the product, then try and find just the manufacturer\n \t\t\t\tif (node.getManufacturer() == Integer.MAX_VALUE) {\n-\t\t\t\t} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\t// The device isn't know, print nothing!\n+\t\t\t\t}\n+\t\t\t\telse if(database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\tif (database.FindManufacturer(node.getManufacturer()) == false) {\n \t\t\t\t\t\trecord.value = \"Manufacturer:\" + node.getManufacturer() + \" [ID:\"\n \t\t\t\t\t\t\t\t+ Integer.toHexString(node.getDeviceId()) + \",Type:\"\n@@ -353,7 +354,7 @@\n \t\t\t\trecords.add(record);\n \n \t\t\t\tif(node.getManufacturer() != Integer.MAX_VALUE) {\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\t// Add links to configuration if the node supports the various command classes\n \t\t\t\t\t\tif(database.doesProductImplementCommandClass(ZWaveCommandClass.CommandClass.CONFIGURATION.getKey()) == true) {\n \t\t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain + \"parameters/\", \"Configuration Parameters\");\n@@ -402,7 +403,7 @@\n \t\t\t\t\t\trecords.add(record);\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain, \"Product\", \"Product\", true);\n \t\t\t\t\t\trecord.value = database.getProductName();\n \t\t\t\t\t\trecords.add(record);\n@@ -621,7 +622,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.equals(\"associations/\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \t\t\t\t\tList<ZWaveDbAssociationGroup> groupList = database.getProductAssociationGroups();\n \n \t\t\t\t\tif (groupList != null) {\n@@ -652,7 +653,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.startsWith(\"associations/association\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \n \t\t\t\t\tString groupString = arg.substring(24);\n \t\t\t\t\tint nextDelimiter = groupString.indexOf('/');\n@@ -1025,7 +1026,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: Refresh associations\", nodeId);\n \n \t\t\t\t\tZWaveProductDatabase database = new ZWaveProductDatabase();\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\t\tlogger.error(\"NODE {}: Error in doAction - no database found\", nodeId);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 356,
    "bugNodeStartChar": 13412,
    "bugNodeLength": 86,
    "fixLineNum": 356,
    "fixNodeStartChar": 13412,
    "fixNodeLength": 116,
    "sourceBeforeFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())",
    "sourceAfterFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex a9bd733..a1bffcb 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -255,10 +255,11 @@\n \t\t\t\t\trecord = new OpenHABConfigurationRecord(\"nodes/\" + \"node\" + node.getNodeId() + \"/\", node.getNodeId() + \": \" + node.getName());\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\t// If we can't find the product, then try and find just the\n-\t\t\t\t// manufacturer\n+\t\t\t\t// If we can't find the product, then try and find just the manufacturer\n \t\t\t\tif (node.getManufacturer() == Integer.MAX_VALUE) {\n-\t\t\t\t} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\t// The device isn't know, print nothing!\n+\t\t\t\t}\n+\t\t\t\telse if(database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\tif (database.FindManufacturer(node.getManufacturer()) == false) {\n \t\t\t\t\t\trecord.value = \"Manufacturer:\" + node.getManufacturer() + \" [ID:\"\n \t\t\t\t\t\t\t\t+ Integer.toHexString(node.getDeviceId()) + \",Type:\"\n@@ -353,7 +354,7 @@\n \t\t\t\trecords.add(record);\n \n \t\t\t\tif(node.getManufacturer() != Integer.MAX_VALUE) {\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\t// Add links to configuration if the node supports the various command classes\n \t\t\t\t\t\tif(database.doesProductImplementCommandClass(ZWaveCommandClass.CommandClass.CONFIGURATION.getKey()) == true) {\n \t\t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain + \"parameters/\", \"Configuration Parameters\");\n@@ -402,7 +403,7 @@\n \t\t\t\t\t\trecords.add(record);\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain, \"Product\", \"Product\", true);\n \t\t\t\t\t\trecord.value = database.getProductName();\n \t\t\t\t\t\trecords.add(record);\n@@ -621,7 +622,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.equals(\"associations/\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \t\t\t\t\tList<ZWaveDbAssociationGroup> groupList = database.getProductAssociationGroups();\n \n \t\t\t\t\tif (groupList != null) {\n@@ -652,7 +653,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.startsWith(\"associations/association\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \n \t\t\t\t\tString groupString = arg.substring(24);\n \t\t\t\t\tint nextDelimiter = groupString.indexOf('/');\n@@ -1025,7 +1026,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: Refresh associations\", nodeId);\n \n \t\t\t\t\tZWaveProductDatabase database = new ZWaveProductDatabase();\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\t\tlogger.error(\"NODE {}: Error in doAction - no database found\", nodeId);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 405,
    "bugNodeStartChar": 15550,
    "bugNodeLength": 86,
    "fixLineNum": 405,
    "fixNodeStartChar": 15550,
    "fixNodeLength": 116,
    "sourceBeforeFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())",
    "sourceAfterFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex a9bd733..a1bffcb 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -255,10 +255,11 @@\n \t\t\t\t\trecord = new OpenHABConfigurationRecord(\"nodes/\" + \"node\" + node.getNodeId() + \"/\", node.getNodeId() + \": \" + node.getName());\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\t// If we can't find the product, then try and find just the\n-\t\t\t\t// manufacturer\n+\t\t\t\t// If we can't find the product, then try and find just the manufacturer\n \t\t\t\tif (node.getManufacturer() == Integer.MAX_VALUE) {\n-\t\t\t\t} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\t// The device isn't know, print nothing!\n+\t\t\t\t}\n+\t\t\t\telse if(database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\tif (database.FindManufacturer(node.getManufacturer()) == false) {\n \t\t\t\t\t\trecord.value = \"Manufacturer:\" + node.getManufacturer() + \" [ID:\"\n \t\t\t\t\t\t\t\t+ Integer.toHexString(node.getDeviceId()) + \",Type:\"\n@@ -353,7 +354,7 @@\n \t\t\t\trecords.add(record);\n \n \t\t\t\tif(node.getManufacturer() != Integer.MAX_VALUE) {\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\t// Add links to configuration if the node supports the various command classes\n \t\t\t\t\t\tif(database.doesProductImplementCommandClass(ZWaveCommandClass.CommandClass.CONFIGURATION.getKey()) == true) {\n \t\t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain + \"parameters/\", \"Configuration Parameters\");\n@@ -402,7 +403,7 @@\n \t\t\t\t\t\trecords.add(record);\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain, \"Product\", \"Product\", true);\n \t\t\t\t\t\trecord.value = database.getProductName();\n \t\t\t\t\t\trecords.add(record);\n@@ -621,7 +622,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.equals(\"associations/\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \t\t\t\t\tList<ZWaveDbAssociationGroup> groupList = database.getProductAssociationGroups();\n \n \t\t\t\t\tif (groupList != null) {\n@@ -652,7 +653,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.startsWith(\"associations/association\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \n \t\t\t\t\tString groupString = arg.substring(24);\n \t\t\t\t\tint nextDelimiter = groupString.indexOf('/');\n@@ -1025,7 +1026,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: Refresh associations\", nodeId);\n \n \t\t\t\t\tZWaveProductDatabase database = new ZWaveProductDatabase();\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\t\tlogger.error(\"NODE {}: Error in doAction - no database found\", nodeId);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 624,
    "bugNodeStartChar": 24023,
    "bugNodeLength": 86,
    "fixLineNum": 624,
    "fixNodeStartChar": 24023,
    "fixNodeLength": 116,
    "sourceBeforeFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())",
    "sourceAfterFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex a9bd733..a1bffcb 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -255,10 +255,11 @@\n \t\t\t\t\trecord = new OpenHABConfigurationRecord(\"nodes/\" + \"node\" + node.getNodeId() + \"/\", node.getNodeId() + \": \" + node.getName());\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\t// If we can't find the product, then try and find just the\n-\t\t\t\t// manufacturer\n+\t\t\t\t// If we can't find the product, then try and find just the manufacturer\n \t\t\t\tif (node.getManufacturer() == Integer.MAX_VALUE) {\n-\t\t\t\t} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\t// The device isn't know, print nothing!\n+\t\t\t\t}\n+\t\t\t\telse if(database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\tif (database.FindManufacturer(node.getManufacturer()) == false) {\n \t\t\t\t\t\trecord.value = \"Manufacturer:\" + node.getManufacturer() + \" [ID:\"\n \t\t\t\t\t\t\t\t+ Integer.toHexString(node.getDeviceId()) + \",Type:\"\n@@ -353,7 +354,7 @@\n \t\t\t\trecords.add(record);\n \n \t\t\t\tif(node.getManufacturer() != Integer.MAX_VALUE) {\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\t// Add links to configuration if the node supports the various command classes\n \t\t\t\t\t\tif(database.doesProductImplementCommandClass(ZWaveCommandClass.CommandClass.CONFIGURATION.getKey()) == true) {\n \t\t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain + \"parameters/\", \"Configuration Parameters\");\n@@ -402,7 +403,7 @@\n \t\t\t\t\t\trecords.add(record);\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain, \"Product\", \"Product\", true);\n \t\t\t\t\t\trecord.value = database.getProductName();\n \t\t\t\t\t\trecords.add(record);\n@@ -621,7 +622,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.equals(\"associations/\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \t\t\t\t\tList<ZWaveDbAssociationGroup> groupList = database.getProductAssociationGroups();\n \n \t\t\t\t\tif (groupList != null) {\n@@ -652,7 +653,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.startsWith(\"associations/association\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \n \t\t\t\t\tString groupString = arg.substring(24);\n \t\t\t\t\tint nextDelimiter = groupString.indexOf('/');\n@@ -1025,7 +1026,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: Refresh associations\", nodeId);\n \n \t\t\t\t\tZWaveProductDatabase database = new ZWaveProductDatabase();\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\t\tlogger.error(\"NODE {}: Error in doAction - no database found\", nodeId);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 655,
    "bugNodeStartChar": 25318,
    "bugNodeLength": 86,
    "fixLineNum": 655,
    "fixNodeStartChar": 25318,
    "fixNodeLength": 116,
    "sourceBeforeFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())",
    "sourceAfterFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex a9bd733..a1bffcb 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -255,10 +255,11 @@\n \t\t\t\t\trecord = new OpenHABConfigurationRecord(\"nodes/\" + \"node\" + node.getNodeId() + \"/\", node.getNodeId() + \": \" + node.getName());\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\t// If we can't find the product, then try and find just the\n-\t\t\t\t// manufacturer\n+\t\t\t\t// If we can't find the product, then try and find just the manufacturer\n \t\t\t\tif (node.getManufacturer() == Integer.MAX_VALUE) {\n-\t\t\t\t} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\t// The device isn't know, print nothing!\n+\t\t\t\t}\n+\t\t\t\telse if(database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\tif (database.FindManufacturer(node.getManufacturer()) == false) {\n \t\t\t\t\t\trecord.value = \"Manufacturer:\" + node.getManufacturer() + \" [ID:\"\n \t\t\t\t\t\t\t\t+ Integer.toHexString(node.getDeviceId()) + \",Type:\"\n@@ -353,7 +354,7 @@\n \t\t\t\trecords.add(record);\n \n \t\t\t\tif(node.getManufacturer() != Integer.MAX_VALUE) {\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\t// Add links to configuration if the node supports the various command classes\n \t\t\t\t\t\tif(database.doesProductImplementCommandClass(ZWaveCommandClass.CommandClass.CONFIGURATION.getKey()) == true) {\n \t\t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain + \"parameters/\", \"Configuration Parameters\");\n@@ -402,7 +403,7 @@\n \t\t\t\t\t\trecords.add(record);\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == true) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == true) {\n \t\t\t\t\t\trecord = new OpenHABConfigurationRecord(domain, \"Product\", \"Product\", true);\n \t\t\t\t\t\trecord.value = database.getProductName();\n \t\t\t\t\t\trecords.add(record);\n@@ -621,7 +622,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.equals(\"associations/\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \t\t\t\t\tList<ZWaveDbAssociationGroup> groupList = database.getProductAssociationGroups();\n \n \t\t\t\t\tif (groupList != null) {\n@@ -652,7 +653,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else if (arg.startsWith(\"associations/association\")) {\n-\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {\n+\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) != false) {\n \n \t\t\t\t\tString groupString = arg.substring(24);\n \t\t\t\t\tint nextDelimiter = groupString.indexOf('/');\n@@ -1025,7 +1026,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: Refresh associations\", nodeId);\n \n \t\t\t\t\tZWaveProductDatabase database = new ZWaveProductDatabase();\n-\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {\n+\t\t\t\t\tif (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId(), node.getApplicationVersion()) == false) {\n \t\t\t\t\t\tlogger.error(\"NODE {}: Error in doAction - no database found\", nodeId);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 1028,
    "bugNodeStartChar": 38268,
    "bugNodeLength": 86,
    "fixLineNum": 1028,
    "fixNodeStartChar": 38268,
    "fixNodeLength": 116,
    "sourceBeforeFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())",
    "sourceAfterFix": "database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\nindex 5ff300c..28a8b51 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n@@ -1178,7 +1178,7 @@\n \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n-\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n+\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \n \t\t    \t\thandleIncomingMessage(recvMessage);\n@@ -1420,7 +1420,7 @@\n     \t\t}\n \n     \t\trecvQueue.add(recvMessage);\n-\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n+\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \n \t\t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 1181,
    "bugNodeStartChar": 41260,
    "bugNodeLength": 63,
    "fixLineNum": 1181,
    "fixNodeStartChar": 41260,
    "fixNodeLength": 63,
    "sourceBeforeFix": "logger.trace(\"Receive queue TAKE: Length={}\",recvQueue.size())",
    "sourceAfterFix": "logger.debug(\"Receive queue TAKE: Length={}\",recvQueue.size())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\nindex 5ff300c..28a8b51 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n@@ -1178,7 +1178,7 @@\n \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n-\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n+\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \n \t\t    \t\thandleIncomingMessage(recvMessage);\n@@ -1420,7 +1420,7 @@\n     \t\t}\n \n     \t\trecvQueue.add(recvMessage);\n-\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n+\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \n \t\t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 1181,
    "bugNodeStartChar": 41260,
    "bugNodeLength": 63,
    "fixLineNum": 1181,
    "fixNodeStartChar": 41260,
    "fixNodeLength": 63,
    "sourceBeforeFix": "logger.trace(\"Receive queue TAKE: Length={}\",recvQueue.size())",
    "sourceAfterFix": "logger.debug(\"Receive queue TAKE: Length={}\",recvQueue.size())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\nindex 5ff300c..28a8b51 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n@@ -1178,7 +1178,7 @@\n \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n-\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n+\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \n \t\t    \t\thandleIncomingMessage(recvMessage);\n@@ -1420,7 +1420,7 @@\n     \t\t}\n \n     \t\trecvQueue.add(recvMessage);\n-\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n+\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \n \t\t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 1423,
    "bugNodeStartChar": 50805,
    "bugNodeLength": 62,
    "fixLineNum": 1423,
    "fixNodeStartChar": 50805,
    "fixNodeLength": 62,
    "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())",
    "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\nindex 5ff300c..28a8b51 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java\n@@ -1178,7 +1178,7 @@\n \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n-\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n+\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \n \t\t    \t\thandleIncomingMessage(recvMessage);\n@@ -1420,7 +1420,7 @@\n     \t\t}\n \n     \t\trecvQueue.add(recvMessage);\n-\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n+\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \n \t\t/**\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 1423,
    "bugNodeStartChar": 50805,
    "bugNodeLength": 62,
    "fixLineNum": 1423,
    "fixNodeStartChar": 50805,
    "fixNodeLength": 62,
    "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())",
    "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\nindex 80c8e6b..5a27139 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n@@ -407,13 +407,13 @@\n \tpublic double getApplicationVersion() {\n \t\tZWaveVersionCommandClass versionCmdClass = (ZWaveVersionCommandClass) this.getCommandClass(CommandClass.VERSION);\n \t\tif(versionCmdClass == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n \t\t\treturn 0.0;\n \t\t}\n \n \t\tDouble appVersion = versionCmdClass.getApplicationVersion();\n \t\tif(appVersion == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n \t\t\treturn 0.0;\t\t\t\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 410,
    "bugNodeStartChar": 10803,
    "bugNodeLength": 96,
    "fixLineNum": 410,
    "fixNodeStartChar": 10803,
    "fixNodeLength": 96,
    "sourceBeforeFix": "logger.debug(\"NODE {}: App version requested but Version class not supported\",this.getNodeId())",
    "sourceAfterFix": "logger.trace(\"NODE {}: App version requested but Version class not supported\",this.getNodeId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\nindex 80c8e6b..5a27139 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n@@ -407,13 +407,13 @@\n \tpublic double getApplicationVersion() {\n \t\tZWaveVersionCommandClass versionCmdClass = (ZWaveVersionCommandClass) this.getCommandClass(CommandClass.VERSION);\n \t\tif(versionCmdClass == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n \t\t\treturn 0.0;\n \t\t}\n \n \t\tDouble appVersion = versionCmdClass.getApplicationVersion();\n \t\tif(appVersion == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n \t\t\treturn 0.0;\t\t\t\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 410,
    "bugNodeStartChar": 10803,
    "bugNodeLength": 96,
    "fixLineNum": 410,
    "fixNodeStartChar": 10803,
    "fixNodeLength": 96,
    "sourceBeforeFix": "logger.debug(\"NODE {}: App version requested but Version class not supported\",this.getNodeId())",
    "sourceAfterFix": "logger.trace(\"NODE {}: App version requested but Version class not supported\",this.getNodeId())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\nindex 80c8e6b..5a27139 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n@@ -407,13 +407,13 @@\n \tpublic double getApplicationVersion() {\n \t\tZWaveVersionCommandClass versionCmdClass = (ZWaveVersionCommandClass) this.getCommandClass(CommandClass.VERSION);\n \t\tif(versionCmdClass == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n \t\t\treturn 0.0;\n \t\t}\n \n \t\tDouble appVersion = versionCmdClass.getApplicationVersion();\n \t\tif(appVersion == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n \t\t\treturn 0.0;\t\t\t\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 416,
    "bugNodeStartChar": 11014,
    "bugNodeLength": 87,
    "fixLineNum": 416,
    "fixNodeStartChar": 11014,
    "fixNodeLength": 87,
    "sourceBeforeFix": "logger.debug(\"NODE {}: App version requested but version is unknown\",this.getNodeId())",
    "sourceAfterFix": "logger.trace(\"NODE {}: App version requested but version is unknown\",this.getNodeId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b",
    "fixCommitParentSHA1": "c15acce17f82e2b055c66c179ea82367a30dee1c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\nindex 80c8e6b..5a27139 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n@@ -407,13 +407,13 @@\n \tpublic double getApplicationVersion() {\n \t\tZWaveVersionCommandClass versionCmdClass = (ZWaveVersionCommandClass) this.getCommandClass(CommandClass.VERSION);\n \t\tif(versionCmdClass == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but Version class not supported\", this.getNodeId());\n \t\t\treturn 0.0;\n \t\t}\n \n \t\tDouble appVersion = versionCmdClass.getApplicationVersion();\n \t\tif(appVersion == null) {\n-\t\t\tlogger.debug(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n+\t\t\tlogger.trace(\"NODE {}: App version requested but version is unknown\", this.getNodeId());\n \t\t\treturn 0.0;\t\t\t\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 416,
    "bugNodeStartChar": 11014,
    "bugNodeLength": 87,
    "fixLineNum": 416,
    "fixNodeStartChar": 11014,
    "fixNodeLength": 87,
    "sourceBeforeFix": "logger.debug(\"NODE {}: App version requested but version is unknown\",this.getNodeId())",
    "sourceAfterFix": "logger.trace(\"NODE {}: App version requested but version is unknown\",this.getNodeId())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "b7a9f743db97d9925edf634525a7c8e6a6cc1dd1",
    "fixCommitParentSHA1": "71ecabd15322f7ca8a0a8cbb88965a0e1249dbd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex 5bde0b0..10cc81c 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -316,7 +316,7 @@\n \t\t\t\t\tif(currentStage.isStaticComplete()) {\n \t\t\t\t\t\t// If static stages are complete, then we skip forward to the next\n \t\t\t\t\t\t// stage.\n-\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Advancing\");\n+\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Advancing\", node.getNodeId());\n \t\t\t\t\t\tsetCurrentStage(currentStage.getNextStage());\n \t\t\t\t\t}\n \t\t\t\t\telse {\n@@ -324,7 +324,7 @@\n \t\t\t\t\t\t// up with incomplete information about the device.\n \t\t\t\t\t\t// During the static stages, we use the back off timer to pace things\n \t\t\t\t\t\t// and retry until the stage is complete\n-\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\");\n+\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\", node.getNodeId());\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 319,
    "bugNodeStartChar": 13568,
    "bugNodeLength": 48,
    "fixLineNum": 319,
    "fixNodeStartChar": 13568,
    "fixNodeLength": 66,
    "sourceBeforeFix": "logger.debug(\"NODE {}: Retry timout: Advancing\")",
    "sourceAfterFix": "logger.debug(\"NODE {}: Retry timout: Advancing\",node.getNodeId())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "b7a9f743db97d9925edf634525a7c8e6a6cc1dd1",
    "fixCommitParentSHA1": "71ecabd15322f7ca8a0a8cbb88965a0e1249dbd9",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex 5bde0b0..10cc81c 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -316,7 +316,7 @@\n \t\t\t\t\tif(currentStage.isStaticComplete()) {\n \t\t\t\t\t\t// If static stages are complete, then we skip forward to the next\n \t\t\t\t\t\t// stage.\n-\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Advancing\");\n+\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Advancing\", node.getNodeId());\n \t\t\t\t\t\tsetCurrentStage(currentStage.getNextStage());\n \t\t\t\t\t}\n \t\t\t\t\telse {\n@@ -324,7 +324,7 @@\n \t\t\t\t\t\t// up with incomplete information about the device.\n \t\t\t\t\t\t// During the static stages, we use the back off timer to pace things\n \t\t\t\t\t\t// and retry until the stage is complete\n-\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\");\n+\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\", node.getNodeId());\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 327,
    "bugNodeStartChar": 13948,
    "bugNodeLength": 52,
    "fixLineNum": 327,
    "fixNodeStartChar": 13948,
    "fixNodeLength": 70,
    "sourceBeforeFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\")",
    "sourceAfterFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\",node.getNodeId())"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a4cae6ead26ae138ea6e073bae5636326027a53d",
    "fixCommitParentSHA1": "9a2f220380a974b4920cffae3f7685c56f8a8ffe",
    "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java\nindex 8d0b680..c914c79 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java\n@@ -61,7 +61,7 @@\n \n \tpublic void processMessage(Chat chat, Message msg) {\n \t\tlogger.debug(\"Received XMPP message: {} of type {}\", msg.getBody(), msg.getType());\n-\t\tif (msg.getType() == Message.Type.error) {\n+\t\tif (msg.getType() == Message.Type.error || msg.getBody() == null) {\n \t\t\treturn;\n \t\t}\n \t\tString cmd = msg.getBody();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 64,
    "bugNodeStartChar": 2302,
    "bugNodeLength": 35,
    "fixLineNum": 64,
    "fixNodeStartChar": 2302,
    "fixNodeLength": 60,
    "sourceBeforeFix": "msg.getType() == Message.Type.error",
    "sourceAfterFix": "msg.getType() == Message.Type.error || msg.getBody() == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "a4cae6ead26ae138ea6e073bae5636326027a53d",
    "fixCommitParentSHA1": "9a2f220380a974b4920cffae3f7685c56f8a8ffe",
    "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java\nindex 8d0b680..c914c79 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java\n@@ -61,7 +61,7 @@\n \n \tpublic void processMessage(Chat chat, Message msg) {\n \t\tlogger.debug(\"Received XMPP message: {} of type {}\", msg.getBody(), msg.getType());\n-\t\tif (msg.getType() == Message.Type.error) {\n+\t\tif (msg.getType() == Message.Type.error || msg.getBody() == null) {\n \t\t\treturn;\n \t\t}\n \t\tString cmd = msg.getBody();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 64,
    "bugNodeStartChar": 2302,
    "bugNodeLength": 35,
    "fixLineNum": 64,
    "fixNodeStartChar": 2302,
    "fixNodeLength": 60,
    "sourceBeforeFix": "msg.getType() == Message.Type.error",
    "sourceAfterFix": "msg.getType() == Message.Type.error || msg.getBody() == null"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "036c682e1ad7ebb1de1639c5eb5337306a20bbb1",
    "fixCommitParentSHA1": "ada499af1f1dd40395f06873488a4e06adfe5554",
    "bugFilePath": "bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\nindex ebc6d24..fae1592 100644\n--- a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n+++ b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n@@ -606,7 +606,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == HighLowValue.HIGH ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue instanceof OnOffValue) {\n@@ -619,7 +619,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == OnOffValue.ON ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue == UnDefValue.UNDEF || sensorValue == null) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 609,
    "bugNodeStartChar": 26839,
    "bugNodeLength": 138,
    "fixLineNum": 609,
    "fixNodeStartChar": 26839,
    "fixNodeLength": 138,
    "sourceBeforeFix": "logger.error(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)",
    "sourceAfterFix": "logger.trace(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "036c682e1ad7ebb1de1639c5eb5337306a20bbb1",
    "fixCommitParentSHA1": "ada499af1f1dd40395f06873488a4e06adfe5554",
    "bugFilePath": "bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\nindex ebc6d24..fae1592 100644\n--- a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n+++ b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n@@ -606,7 +606,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == HighLowValue.HIGH ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue instanceof OnOffValue) {\n@@ -619,7 +619,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == OnOffValue.ON ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue == UnDefValue.UNDEF || sensorValue == null) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 609,
    "bugNodeStartChar": 26839,
    "bugNodeLength": 138,
    "fixLineNum": 609,
    "fixNodeStartChar": 26839,
    "fixNodeLength": 138,
    "sourceBeforeFix": "logger.error(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)",
    "sourceAfterFix": "logger.trace(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "036c682e1ad7ebb1de1639c5eb5337306a20bbb1",
    "fixCommitParentSHA1": "ada499af1f1dd40395f06873488a4e06adfe5554",
    "bugFilePath": "bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\nindex ebc6d24..fae1592 100644\n--- a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n+++ b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n@@ -606,7 +606,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == HighLowValue.HIGH ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue instanceof OnOffValue) {\n@@ -619,7 +619,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == OnOffValue.ON ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue == UnDefValue.UNDEF || sensorValue == null) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 622,
    "bugNodeStartChar": 27610,
    "bugNodeLength": 138,
    "fixLineNum": 622,
    "fixNodeStartChar": 27610,
    "fixNodeLength": 138,
    "sourceBeforeFix": "logger.error(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)",
    "sourceAfterFix": "logger.trace(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "036c682e1ad7ebb1de1639c5eb5337306a20bbb1",
    "fixCommitParentSHA1": "ada499af1f1dd40395f06873488a4e06adfe5554",
    "bugFilePath": "bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\nindex ebc6d24..fae1592 100644\n--- a/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n+++ b/bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java\n@@ -606,7 +606,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == HighLowValue.HIGH ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue instanceof OnOffValue) {\n@@ -619,7 +619,7 @@\n         } else if (itemType.isAssignableFrom(SwitchItem.class)) {\n           value = sensorValue == OnOffValue.ON ? OnOffType.ON : OnOffType.OFF;\n         } else {\n-          logger.error(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n+          logger.trace(\"{} unsupported item type {} for item {}\", LoggerConstants.TFMODELUPDATE,\n               provider.getItem(itemName), itemName);\n         }\n       } else if (sensorValue == UnDefValue.UNDEF || sensorValue == null) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 622,
    "bugNodeStartChar": 27610,
    "bugNodeLength": 138,
    "fixLineNum": 622,
    "fixNodeStartChar": 27610,
    "fixNodeLength": 138,
    "sourceBeforeFix": "logger.error(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)",
    "sourceAfterFix": "logger.trace(\"{} unsupported item type {} for item {}\",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "e69f5321a7a2a446599b1b8e6a7f3d45dfbfa9eb",
    "fixCommitParentSHA1": "48ca8ffcfc0e0860ecb735bd4c2c6e76c32c74a1",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java\nindex d204c20..98b8258 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java\n@@ -53,7 +53,7 @@\n \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n \n-\t\tswitch(incomingMessage.getMessagePayloadByte(1)) {\n+\t\tswitch(incomingMessage.getMessagePayloadByte(0)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 56,
    "bugNodeStartChar": 2581,
    "bugNodeLength": 40,
    "fixLineNum": 56,
    "fixNodeStartChar": 2581,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(1)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(0)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 175,
    "bugNodeStartChar": 5776,
    "bugNodeLength": 68,
    "fixLineNum": 175,
    "fixNodeStartChar": 5776,
    "fixNodeLength": 67,
    "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")",
    "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 175,
    "bugNodeStartChar": 5776,
    "bugNodeLength": 68,
    "fixLineNum": 175,
    "fixNodeStartChar": 5776,
    "fixNodeLength": 67,
    "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")",
    "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 180,
    "bugNodeStartChar": 5899,
    "bugNodeLength": 45,
    "fixLineNum": 180,
    "fixNodeStartChar": 5899,
    "fixNodeLength": 44,
    "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")",
    "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 180,
    "bugNodeStartChar": 5899,
    "bugNodeLength": 45,
    "fixLineNum": 180,
    "fixNodeStartChar": 5899,
    "fixNodeLength": 44,
    "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")",
    "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 267,
    "bugNodeStartChar": 8732,
    "bugNodeLength": 68,
    "fixLineNum": 267,
    "fixNodeStartChar": 8732,
    "fixNodeLength": 67,
    "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")",
    "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 267,
    "bugNodeStartChar": 8732,
    "bugNodeLength": 68,
    "fixLineNum": 267,
    "fixNodeStartChar": 8732,
    "fixNodeLength": 67,
    "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")",
    "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 272,
    "bugNodeStartChar": 8879,
    "bugNodeLength": 45,
    "fixLineNum": 272,
    "fixNodeStartChar": 8879,
    "fixNodeLength": 44,
    "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")",
    "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371",
    "fixCommitParentSHA1": "22e30006db815a302631e823d4fbd95a9d030105",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 04e3b8a..9b86925 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -172,12 +172,12 @@\n     }\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }\n \n@@ -210,7 +210,7 @@\n       // e.g. raised by authentication errors\n       logger\n           .error(\n-              \"database connection error may be wrong password, username or dbname: {}\",\n+              \"database error: {}\",\n               e.getMessage());\n     }\n   }\n@@ -264,12 +264,12 @@\n     logger.debug(\"got a query\");\n \n     if (!isProperlyConfigured) {\n-      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n+      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n \n     if (!isConnected()) {\n-      logger.error(\"InfluxDB is not yet connected\");\n+      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 272,
    "bugNodeStartChar": 8879,
    "bugNodeLength": 45,
    "fixLineNum": 272,
    "fixNodeStartChar": 8879,
    "fixNodeLength": 44,
    "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")",
    "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "acc9d3961e1d0d8ebf12269a08566222ec382cf2",
    "fixCommitParentSHA1": "e19a3546c35eefddc429be2c0eb6193b72f719e6",
    "bugFilePath": "bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java b/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java\nindex a815be2..341907b 100644\n--- a/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java\n+++ b/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java\n@@ -125,7 +125,7 @@\n \t\tput(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n \t\tput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));   // Unit: none\n \t\tput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));   // Unit: none\n-\t\tput(43420, new VariableInformation(10,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n+\t\tput(43420, new VariableInformation(1,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n \t\tput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n \t\tput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping \n \t\tput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));   // Unit: none \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 128,
    "bugNodeStartChar": 9753,
    "bugNodeLength": 94,
    "fixLineNum": 128,
    "fixNodeStartChar": 9753,
    "fixNodeLength": 93,
    "sourceBeforeFix": "new VariableInformation(10,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)",
    "sourceAfterFix": "new VariableInformation(1,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "ab9be0fd8eafec78ecec4f228ff1101658ea6d49",
    "fixCommitParentSHA1": "e19a3546c35eefddc429be2c0eb6193b72f719e6",
    "bugFilePath": "bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java b/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java\nindex a815be2..341907b 100644\n--- a/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java\n+++ b/bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java\n@@ -125,7 +125,7 @@\n \t\tput(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n \t\tput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));   // Unit: none\n \t\tput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));   // Unit: none\n-\t\tput(43420, new VariableInformation(10,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n+\t\tput(43420, new VariableInformation(1,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n \t\tput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));   // Unit: hours\n \t\tput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping \n \t\tput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));   // Unit: none \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 128,
    "bugNodeStartChar": 9753,
    "bugNodeLength": 94,
    "fixLineNum": 128,
    "fixNodeStartChar": 9753,
    "fixNodeLength": 93,
    "sourceBeforeFix": "new VariableInformation(10,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)",
    "sourceAfterFix": "new VariableInformation(1,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d9fdfaf3134f4a1968f3d643369b76dae9c55560",
    "fixCommitParentSHA1": "f64254dfc52488385a7342b178000d7739cac9b7",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\nindex 1ac3481..a747e8c 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n@@ -48,7 +48,7 @@\n \t\t\tlogger.error(\"NODE {}: AssignReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n-\t\t\tincomingMessage.setTransActionCanceled(true);\n+\t\t\tincomingMessage.setTransactionCanceled(true);\n \t\t}\n \t\t\n \t\treturn true;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 51,
    "bugNodeStartChar": 2351,
    "bugNodeLength": 44,
    "fixLineNum": 51,
    "fixNodeStartChar": 2351,
    "fixNodeLength": 44,
    "sourceBeforeFix": "incomingMessage.setTransActionCanceled(true)",
    "sourceAfterFix": "incomingMessage.setTransactionCanceled(true)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d9fdfaf3134f4a1968f3d643369b76dae9c55560",
    "fixCommitParentSHA1": "f64254dfc52488385a7342b178000d7739cac9b7",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\nindex 1ac3481..a747e8c 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n@@ -48,7 +48,7 @@\n \t\t\tlogger.error(\"NODE {}: AssignReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n-\t\t\tincomingMessage.setTransActionCanceled(true);\n+\t\t\tincomingMessage.setTransactionCanceled(true);\n \t\t}\n \t\t\n \t\treturn true;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 51,
    "bugNodeStartChar": 2351,
    "bugNodeLength": 44,
    "fixLineNum": 51,
    "fixNodeStartChar": 2351,
    "fixNodeLength": 44,
    "sourceBeforeFix": "incomingMessage.setTransActionCanceled(true)",
    "sourceAfterFix": "incomingMessage.setTransactionCanceled(true)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d5b318132a1f6c792c153abe354f51d1054bab81",
    "fixCommitParentSHA1": "7cdab45a30d3678569f1b09911684ee673ab6f91",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\nindex a800e1b..b7a9289 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\n@@ -246,9 +246,9 @@\n \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n+\t\t\tlogger.info(\"Item not found error while generating chart: {}\", e);\n \t\t} catch (IllegalArgumentException e) {\n-\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n+\t\t\tlogger.info(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 251,
    "bugNodeStartChar": 8495,
    "bugNodeLength": 48,
    "fixLineNum": 251,
    "fixNodeStartChar": 8495,
    "fixNodeLength": 47,
    "sourceBeforeFix": "logger.debug(\"Illegal argument in chart: {}\",e)",
    "sourceAfterFix": "logger.info(\"Illegal argument in chart: {}\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d5b318132a1f6c792c153abe354f51d1054bab81",
    "fixCommitParentSHA1": "7cdab45a30d3678569f1b09911684ee673ab6f91",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\nindex a800e1b..b7a9289 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\n@@ -246,9 +246,9 @@\n \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n+\t\t\tlogger.info(\"Item not found error while generating chart: {}\", e);\n \t\t} catch (IllegalArgumentException e) {\n-\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n+\t\t\tlogger.info(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 251,
    "bugNodeStartChar": 8495,
    "bugNodeLength": 48,
    "fixLineNum": 251,
    "fixNodeStartChar": 8495,
    "fixNodeLength": 47,
    "sourceBeforeFix": "logger.debug(\"Illegal argument in chart: {}\",e)",
    "sourceAfterFix": "logger.info(\"Illegal argument in chart: {}\",e)"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "b46a613b6fc479896edcd659db9369d26063a00f",
    "fixCommitParentSHA1": "d4074a8a32de6a576c9dddac052f059cb0c7849e",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\nindex 10700c5..930f98e 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n@@ -324,7 +324,7 @@\n \t\t\t\t}\n \t\t\t\t// Use the last sent time for comparisson.\n \t\t\t\t// This avoids the situation where we only poll a dead node if we use the received time!\n-\t\t\t\tif (oldestNode == null) {\n+\t\t\t\tif (oldestNode == null || oldestNode.getLastSent() == null) {\n \t\t\t\t\toldestNode = node;\n \t\t\t\t} else if (node.getLastSent() == null || node.getLastSent().getTime() < oldestNode.getLastSent().getTime()) {\n \t\t\t\t\toldestNode = node;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 327,
    "bugNodeStartChar": 10168,
    "bugNodeLength": 18,
    "fixLineNum": 327,
    "fixNodeStartChar": 10168,
    "fixNodeLength": 54,
    "sourceBeforeFix": "oldestNode == null",
    "sourceAfterFix": "oldestNode == null || oldestNode.getLastSent() == null"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "b46a613b6fc479896edcd659db9369d26063a00f",
    "fixCommitParentSHA1": "d4074a8a32de6a576c9dddac052f059cb0c7849e",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\nindex 10700c5..930f98e 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n@@ -324,7 +324,7 @@\n \t\t\t\t}\n \t\t\t\t// Use the last sent time for comparisson.\n \t\t\t\t// This avoids the situation where we only poll a dead node if we use the received time!\n-\t\t\t\tif (oldestNode == null) {\n+\t\t\t\tif (oldestNode == null || oldestNode.getLastSent() == null) {\n \t\t\t\t\toldestNode = node;\n \t\t\t\t} else if (node.getLastSent() == null || node.getLastSent().getTime() < oldestNode.getLastSent().getTime()) {\n \t\t\t\t\toldestNode = node;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 327,
    "bugNodeStartChar": 10168,
    "bugNodeLength": 18,
    "fixLineNum": 327,
    "fixNodeStartChar": 10168,
    "fixNodeLength": 54,
    "sourceBeforeFix": "oldestNode == null",
    "sourceAfterFix": "oldestNode == null || oldestNode.getLastSent() == null"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718",
    "fixCommitParentSHA1": "919146994feb63d842e414be882d7543bcbedcde",
    "bugFilePath": "bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\nindex b3fd47b..89ae9cc 100644\n--- a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n+++ b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n@@ -461,7 +461,7 @@\n \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n@@ -503,7 +503,7 @@\n \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 464,
    "bugNodeStartChar": 16179,
    "bugNodeLength": 30,
    "fixLineNum": 464,
    "fixNodeStartChar": 16179,
    "fixNodeLength": 43,
    "sourceBeforeFix": "historicState(item,timestamp)",
    "sourceAfterFix": "historicState(item,timestamp,serviceName)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718",
    "fixCommitParentSHA1": "919146994feb63d842e414be882d7543bcbedcde",
    "bugFilePath": "bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\nindex b3fd47b..89ae9cc 100644\n--- a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n+++ b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n@@ -461,7 +461,7 @@\n \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n@@ -503,7 +503,7 @@\n \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 506,
    "bugNodeStartChar": 17916,
    "bugNodeLength": 30,
    "fixLineNum": 506,
    "fixNodeStartChar": 17916,
    "fixNodeLength": 43,
    "sourceBeforeFix": "historicState(item,timestamp)",
    "sourceAfterFix": "historicState(item,timestamp,serviceName)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "296ba4ff8db020176e5b6abe058052a1314cd2ee",
    "fixCommitParentSHA1": "2d9bd1d254352036fa02be9a5bb378003a82256a",
    "bugFilePath": "bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\nindex b3fd47b..89ae9cc 100644\n--- a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n+++ b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n@@ -461,7 +461,7 @@\n \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n@@ -503,7 +503,7 @@\n \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 464,
    "bugNodeStartChar": 16179,
    "bugNodeLength": 30,
    "fixLineNum": 464,
    "fixNodeStartChar": 16179,
    "fixNodeLength": 43,
    "sourceBeforeFix": "historicState(item,timestamp)",
    "sourceAfterFix": "historicState(item,timestamp,serviceName)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "296ba4ff8db020176e5b6abe058052a1314cd2ee",
    "fixCommitParentSHA1": "2d9bd1d254352036fa02be9a5bb378003a82256a",
    "bugFilePath": "bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\nindex b3fd47b..89ae9cc 100644\n--- a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n+++ b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n@@ -461,7 +461,7 @@\n \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n@@ -503,7 +503,7 @@\n \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n-\t\tHistoricItem itemThen = historicState(item, timestamp);\n+\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 506,
    "bugNodeStartChar": 17916,
    "bugNodeLength": 30,
    "fixLineNum": 506,
    "fixNodeStartChar": 17916,
    "fixNodeLength": 43,
    "sourceBeforeFix": "historicState(item,timestamp)",
    "sourceAfterFix": "historicState(item,timestamp,serviceName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d338970323b86d631a5c1a786768133a0aabff46",
    "fixCommitParentSHA1": "c78edb0afc398057a6ce3e29c2670ccb4b8938b1",
    "bugFilePath": "bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java",
    "fixPatch": "diff --git a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\nindex a800e1b..51a622e 100644\n--- a/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\n+++ b/bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java\n@@ -246,9 +246,9 @@\n \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n-\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n+\t\t\tlogger.error(\"Item not found error while generating chart.\", e);\n \t\t} catch (IllegalArgumentException e) {\n-\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n+\t\t\tlogger.error(\"Illegal argument in chart\", e);\n \t\t}\n \t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 249,
    "bugNodeStartChar": 8389,
    "bugNodeLength": 60,
    "fixLineNum": 249,
    "fixNodeStartChar": 8389,
    "fixNodeLength": 63,
    "sourceBeforeFix": "logger.debug(\"Item not found error while generating chart.\")",
    "sourceAfterFix": "logger.error(\"Item not found error while generating chart.\",e)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1d1489d03c272a0df15aea38b91088eed696786b",
    "fixCommitParentSHA1": "6d9f9648e97aca3be6537a79aca534af1cc6d4ee",
    "bugFilePath": "bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java b/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java\nindex 8f98cb6..70d0136 100644\n--- a/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java\n+++ b/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java\n@@ -41,9 +41,9 @@\n \t\tlogger.debug(\"about to transform '{}' by the function '{}'\", source, JSonPathExpression);\n \n \t\ttry {\n-\t\t\tString transformationResult = JsonPath.read(source, JSonPathExpression);\n+\t\t\tObject transformationResult = JsonPath.read(source, JSonPathExpression);\n \t\t\tlogger.debug(\"transformation resulted in '{}'\", transformationResult);\n-\t\t\treturn transformationResult;\n+\t\t\treturn (transformationResult != null) ? transformationResult.toString() : null;\n \t\t} catch(InvalidPathException e) {\n \t\t\tthrow new TransformationException(\"An error occured while transforming JSON expression.\", e);\n \t\t} \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 44,
    "bugNodeStartChar": 1367,
    "bugNodeLength": 72,
    "fixLineNum": 44,
    "fixNodeStartChar": 1367,
    "fixNodeLength": 72,
    "sourceBeforeFix": "String transformationResult=JsonPath.read(source,JSonPathExpression); ",
    "sourceAfterFix": "Object transformationResult=JsonPath.read(source,JSonPathExpression); "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b0500e90373a5e606758f857329d576a4a1a3265",
    "fixCommitParentSHA1": "9925cfd15f220fe15bdf85d57ccfbdaa22971d78",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java\nindex b67696b..986ca97 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java\n@@ -82,7 +82,7 @@\n \t\tCalendar cal = DateTimeUtils.truncateToMidnight(calendar);\n \t\tSun sun = new Sun();\n \t\tfor (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {\n-\t\t\tsetSunPosition(calendar, latitude, longitude, sun);\n+\t\t\tsetSunPosition(cal, latitude, longitude, sun);\n \t\t\tif (sun.getPosition().getElevation() < SUN_ANGLE) {\n \t\t\t\treturn false;\n \t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 85,
    "bugNodeStartChar": 3395,
    "bugNodeLength": 50,
    "fixLineNum": 85,
    "fixNodeStartChar": 3395,
    "fixNodeLength": 45,
    "sourceBeforeFix": "setSunPosition(calendar,latitude,longitude,sun)",
    "sourceAfterFix": "setSunPosition(cal,latitude,longitude,sun)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "147f64aa12e7491eea259d886f14818b227dadd0",
    "fixCommitParentSHA1": "a6d3148505ef870cacc0527667f53520802a971d",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\nindex 7d772a4..73e0dd9 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n@@ -59,7 +59,7 @@\n \n \t\tlogger.debug(\"NODE {}: Got AssignReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n-\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n+\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 62,
    "bugNodeStartChar": 2793,
    "bugNodeLength": 40,
    "fixLineNum": 62,
    "fixNodeStartChar": 2793,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "147f64aa12e7491eea259d886f14818b227dadd0",
    "fixCommitParentSHA1": "a6d3148505ef870cacc0527667f53520802a971d",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\nindex 9292405..4d26a51 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n@@ -59,7 +59,7 @@\n \n \t\tlogger.debug(\"NODE {}: Got DeleteReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n-\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n+\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 62,
    "bugNodeStartChar": 2681,
    "bugNodeLength": 40,
    "fixLineNum": 62,
    "fixNodeStartChar": 2681,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "d3073dc1096ba35fa3ad849f0fb3870475bc9eff",
    "fixCommitParentSHA1": "dfe8d520fbb77ffaa6d907a6db025928240153fb",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\nindex 17f52ef..0723f8b 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n@@ -45,7 +45,7 @@\n \t\tif(incomingMessage.getMessagePayloadByte(0) != 0x00) {\n \t\t\tlogger.debug(\"NODE {}: DeleteReturnRoute command in progress.\", nodeId);\n \t\t} else {\n-\t\t\tlogger.error(\"NODE {}: DeleteReturnRoute command failed.\");\n+\t\t\tlogger.error(\"NODE {}: DeleteReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 48,
    "bugNodeStartChar": 2029,
    "bugNodeLength": 58,
    "fixLineNum": 48,
    "fixNodeStartChar": 2029,
    "fixNodeLength": 66,
    "sourceBeforeFix": "logger.error(\"NODE {}: DeleteReturnRoute command failed.\")",
    "sourceAfterFix": "logger.error(\"NODE {}: DeleteReturnRoute command failed.\",nodeId)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "dfe8d520fbb77ffaa6d907a6db025928240153fb",
    "fixCommitParentSHA1": "2028f391750c568787000a3e6cf9af1b1f2c9cd7",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\nindex f87dbd2..17f52ef 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n@@ -59,7 +59,7 @@\n \n \t\tlogger.debug(\"NODE {}: Got DeleteReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n-\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n+\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 62,
    "bugNodeStartChar": 2680,
    "bugNodeLength": 40,
    "fixLineNum": 62,
    "fixNodeStartChar": 2680,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "4d0a4731c1d324b15b40d273001839dbada87375",
    "fixCommitParentSHA1": "221d4dab452f59f7fe2c9463db09f0f83c688a0b",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\nindex 9292405..4d26a51 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n@@ -59,7 +59,7 @@\n \n \t\tlogger.debug(\"NODE {}: Got DeleteReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n-\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n+\t\t\tlogger.error(\"NODE {}: Delete return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 62,
    "bugNodeStartChar": 2681,
    "bugNodeLength": 40,
    "fixLineNum": 62,
    "fixNodeStartChar": 2681,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "2028f391750c568787000a3e6cf9af1b1f2c9cd7",
    "fixCommitParentSHA1": "328ae872f891522badd54af6908537fc486c2284",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\nindex d12816c..4a942b7 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n@@ -59,7 +59,7 @@\n \n \t\tlogger.debug(\"NODE {}: Got AssignReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n-\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n+\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 62,
    "bugNodeStartChar": 2792,
    "bugNodeLength": 40,
    "fixLineNum": 62,
    "fixNodeStartChar": 2792,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "221d4dab452f59f7fe2c9463db09f0f83c688a0b",
    "fixCommitParentSHA1": "a6d3148505ef870cacc0527667f53520802a971d",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\nindex 7d772a4..73e0dd9 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java\n@@ -59,7 +59,7 @@\n \n \t\tlogger.debug(\"NODE {}: Got AssignReturnRoute request.\", nodeId);\n \t\tif(incomingMessage.getMessagePayloadByte(1) != 0x00) {\n-\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));\n+\t\t\tlogger.error(\"NODE {}: Assign return routes failed with error 0x{}.\", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 62,
    "bugNodeStartChar": 2793,
    "bugNodeLength": 40,
    "fixLineNum": 62,
    "fixNodeStartChar": 2793,
    "fixNodeLength": 40,
    "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(0)",
    "sourceAfterFix": "incomingMessage.getMessagePayloadByte(1)"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "ec850bd48804a670b56d49d9e3d8d36c26f7674b",
    "fixCommitParentSHA1": "fbdc8f67cfd7f659e599283f8cf69c3c9ec47c54",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex a6917cc..b661e6a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -537,7 +537,7 @@\n \t\t\t// If we have all the data, set stageAdvanced to true to tell the\n \t\t\t// system\n \t\t\t// that we're starting again, then loop around again.\n-\t\t\tif (sendMessage() == false) {\n+\t\t\tif (currentStage != NodeStage.DONE && sendMessage() == false) {\n \t\t\t\t// Move on to the next stage\n \t\t\t\tcurrentStage = currentStage.getNextStage();\n \t\t\t\tstageAdvanced = true;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 540,
    "bugNodeStartChar": 23254,
    "bugNodeLength": 22,
    "fixLineNum": 540,
    "fixNodeStartChar": 23254,
    "fixNodeLength": 56,
    "sourceBeforeFix": "sendMessage() == false",
    "sourceAfterFix": "currentStage != NodeStage.DONE && sendMessage() == false"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "4aff5e0b2a9a8ba3b5b151efe57c5ef574c04c82",
    "fixCommitParentSHA1": "fbdc8f67cfd7f659e599283f8cf69c3c9ec47c54",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex a6917cc..b661e6a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -537,7 +537,7 @@\n \t\t\t// If we have all the data, set stageAdvanced to true to tell the\n \t\t\t// system\n \t\t\t// that we're starting again, then loop around again.\n-\t\t\tif (sendMessage() == false) {\n+\t\t\tif (currentStage != NodeStage.DONE && sendMessage() == false) {\n \t\t\t\t// Move on to the next stage\n \t\t\t\tcurrentStage = currentStage.getNextStage();\n \t\t\t\tstageAdvanced = true;\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 540,
    "bugNodeStartChar": 23254,
    "bugNodeLength": 22,
    "fixLineNum": 540,
    "fixNodeStartChar": 23254,
    "fixNodeLength": 56,
    "sourceBeforeFix": "sendMessage() == false",
    "sourceAfterFix": "currentStage != NodeStage.DONE && sendMessage() == false"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "363544a4d4697d9de2391c31f4c61caf4deb8d8e",
    "fixCommitParentSHA1": "ead09c24d2d6a1c6fad5e0cc065df3211ed26478",
    "bugFilePath": "bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickController.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickController.java b/bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickController.java\nindex efd8bd2..3735aaf 100644\n--- a/bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickController.java\n+++ b/bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickController.java\n@@ -72,14 +72,14 @@\n \t\tif (strValue != null) {\r\n \t\t\t value = Double.valueOf(strValue);\r\n \t\t}\r\n-\t\tint precent = (int) Math.round((value / 255) * 100);\r\n+\t\tint percent = (int) Math.round((value / 255) * 100);\r\n \t\tif (IncreaseDecreaseType.INCREASE == increaseDecreaseType) {\t\t\t\r\n-\t\t\tprecent = Math.min(precent + 10, 100);\t\t\t\r\n+\t\t\tpercent = Math.min(percent + 10, 100);\t\t\t\r\n \t\t} else if (IncreaseDecreaseType.DECREASE == increaseDecreaseType) {\r\n-\t\t\tprecent = Math.max(precent - 10, 0);\t\t\t\t\r\n+\t\t\tpercent = Math.max(percent - 10, 0);\t\t\t\t\r\n \t\t}\r\n \t\t\r\n-\t\tdim(dev, new PercentType(precent));\r\n+\t\tdim(dev, new PercentType(percent));\r\n \t}\r\n \r\n \tprivate void dim(TellstickDevice dev, PercentType command) throws TellstickException {\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 82,
    "bugNodeStartChar": 2777,
    "bugNodeLength": 24,
    "fixLineNum": 82,
    "fixNodeStartChar": 2696,
    "fixNodeLength": 24,
    "sourceBeforeFix": "new PercentType(precent)",
    "sourceAfterFix": "new PercentType(percent)"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "8e1a7fa4aa2a70e51f6a68a88a31e39d9eae6215",
    "fixCommitParentSHA1": "33138a3051ad49279a16234f1994835cf96defe6",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\nindex 287f8ed..eccb45a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java\n@@ -535,7 +535,7 @@\n \t\t}\n \t\telse if (multiInstanceCommandClass.getVersion() == 1) {\n \t\t\tZWaveCommandClass result = getCommandClass(commandClass);\n-\t\t\tif (endpointId <= result.getInstances()) {\n+\t\t\tif (result != null && endpointId <= result.getInstances()) {\n \t\t\t\treturn result;\n \t\t\t}\n \t\t} else {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 538,
    "bugNodeStartChar": 14715,
    "bugNodeLength": 35,
    "fixLineNum": 538,
    "fixNodeStartChar": 14715,
    "fixNodeLength": 53,
    "sourceBeforeFix": "endpointId <= result.getInstances()",
    "sourceAfterFix": "result != null && endpointId <= result.getInstances()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "347894fc4ee82d26280c3a95665fdee04fb48966",
    "fixCommitParentSHA1": "d9559d3f29568c720cd967b2abf0e47745a33a36",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\nindex e8e5fe4..c67449e 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n@@ -88,14 +88,14 @@\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_DONE:\n \t\t\tlogger.debug(\"Done.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\t// If the node ID is 0, ignore!\n \t\t\tif(incomingMessage.getMessagePayloadByte(2) != 0)\n \t\t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone, incomingMessage.getMessagePayloadByte(2)));\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_FAILED:\n \t\t\tlogger.debug(\"Failed.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeFail));\n \t\t\tbreak;\n \t\tdefault:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 91,
    "bugNodeStartChar": 4003,
    "bugNodeLength": 37,
    "fixLineNum": 91,
    "fixNodeStartChar": 4003,
    "fixNodeLength": 36,
    "sourceBeforeFix": "zController.sendData(doRequestStop())",
    "sourceAfterFix": "zController.enqueue(doRequestStop())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "347894fc4ee82d26280c3a95665fdee04fb48966",
    "fixCommitParentSHA1": "d9559d3f29568c720cd967b2abf0e47745a33a36",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\nindex e8e5fe4..c67449e 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n@@ -88,14 +88,14 @@\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_DONE:\n \t\t\tlogger.debug(\"Done.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\t// If the node ID is 0, ignore!\n \t\t\tif(incomingMessage.getMessagePayloadByte(2) != 0)\n \t\t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone, incomingMessage.getMessagePayloadByte(2)));\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_FAILED:\n \t\t\tlogger.debug(\"Failed.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeFail));\n \t\t\tbreak;\n \t\tdefault:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 91,
    "bugNodeStartChar": 4003,
    "bugNodeLength": 37,
    "fixLineNum": 91,
    "fixNodeStartChar": 4003,
    "fixNodeLength": 36,
    "sourceBeforeFix": "zController.sendData(doRequestStop())",
    "sourceAfterFix": "zController.enqueue(doRequestStop())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "347894fc4ee82d26280c3a95665fdee04fb48966",
    "fixCommitParentSHA1": "d9559d3f29568c720cd967b2abf0e47745a33a36",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\nindex e8e5fe4..c67449e 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n@@ -88,14 +88,14 @@\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_DONE:\n \t\t\tlogger.debug(\"Done.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\t// If the node ID is 0, ignore!\n \t\t\tif(incomingMessage.getMessagePayloadByte(2) != 0)\n \t\t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone, incomingMessage.getMessagePayloadByte(2)));\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_FAILED:\n \t\t\tlogger.debug(\"Failed.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeFail));\n \t\t\tbreak;\n \t\tdefault:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 98,
    "bugNodeStartChar": 4345,
    "bugNodeLength": 37,
    "fixLineNum": 98,
    "fixNodeStartChar": 4345,
    "fixNodeLength": 36,
    "sourceBeforeFix": "zController.sendData(doRequestStop())",
    "sourceAfterFix": "zController.enqueue(doRequestStop())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "347894fc4ee82d26280c3a95665fdee04fb48966",
    "fixCommitParentSHA1": "d9559d3f29568c720cd967b2abf0e47745a33a36",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\nindex e8e5fe4..c67449e 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java\n@@ -88,14 +88,14 @@\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_DONE:\n \t\t\tlogger.debug(\"Done.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\t// If the node ID is 0, ignore!\n \t\t\tif(incomingMessage.getMessagePayloadByte(2) != 0)\n \t\t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone, incomingMessage.getMessagePayloadByte(2)));\n \t\t\tbreak;\n \t\tcase ADD_NODE_STATUS_FAILED:\n \t\t\tlogger.debug(\"Failed.\");\n-\t\t\tzController.sendData(doRequestStop());\n+\t\t\tzController.enqueue(doRequestStop());\n \t\t\tzController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeFail));\n \t\t\tbreak;\n \t\tdefault:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 98,
    "bugNodeStartChar": 4345,
    "bugNodeLength": 37,
    "fixLineNum": 98,
    "fixNodeStartChar": 4345,
    "fixNodeLength": 36,
    "sourceBeforeFix": "zController.sendData(doRequestStop())",
    "sourceAfterFix": "zController.enqueue(doRequestStop())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "175ce3aa1fdf3ce5d8c4a6965edbfc6254d1488b",
    "fixCommitParentSHA1": "eb39fb1e727512e2ef938e9d4903c5ef15a4ceb8",
    "bugFilePath": "bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\nindex f76d1bf..c906bc0 100644\n--- a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n+++ b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n@@ -539,7 +539,7 @@\n \t\t\tfilter.setItemName(item.getName());\n \t\t\tfilter.setOrdering(Ordering.DESCENDING);\n \n-\t\t\tfilter.setPageSize(3);\n+\t\t\tfilter.setPageSize(1000);\n \t\t\tint startPage = 0;\n \t\t\tfilter.setPageNumber(startPage);\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 542,
    "bugNodeStartChar": 19416,
    "bugNodeLength": 21,
    "fixLineNum": 542,
    "fixNodeStartChar": 19416,
    "fixNodeLength": 24,
    "sourceBeforeFix": "filter.setPageSize(3)",
    "sourceAfterFix": "filter.setPageSize(1000)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "5324bb65a6b5d94652f950f2b03fd6345fb6f66d",
    "fixCommitParentSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
    "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\nindex 6416058..b6b762c 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n@@ -138,7 +138,7 @@\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n-\t\t\t\t\tIOUtils.closeQuitely(is);\n+\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 141,
    "bugNodeStartChar": 4832,
    "bugNodeLength": 24,
    "fixLineNum": 141,
    "fixNodeStartChar": 4832,
    "fixNodeLength": 24,
    "sourceBeforeFix": "IOUtils.closeQuitely(is)",
    "sourceAfterFix": "IOUtils.closeQuietly(is)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5324bb65a6b5d94652f950f2b03fd6345fb6f66d",
    "fixCommitParentSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
    "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\nindex 6416058..b6b762c 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n@@ -138,7 +138,7 @@\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n-\t\t\t\t\tIOUtils.closeQuitely(is);\n+\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 141,
    "bugNodeStartChar": 4832,
    "bugNodeLength": 24,
    "fixLineNum": 141,
    "fixNodeStartChar": 4832,
    "fixNodeLength": 24,
    "sourceBeforeFix": "IOUtils.closeQuitely(is)",
    "sourceAfterFix": "IOUtils.closeQuietly(is)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
    "fixCommitParentSHA1": "affaf7a4b7a13dc0a9051389de0935f1a94dfd70",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java\nindex 84e4240..81122ee 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java\n@@ -92,7 +92,8 @@\n \tprivate final static List<RFXComValueSelector> supportedValueSelectors = Arrays\n \t\t\t.asList(RFXComValueSelector.RAW_DATA,\n \t\t\t\t\tRFXComValueSelector.SIGNAL_LEVEL,\n-\t\t\t\t\tRFXComValueSelector.COMMAND);\n+\t\t\t\t\tRFXComValueSelector.COMMAND,\n+\t\t\t\t\tRFXComValueSelector.CONTACT);\n \n \tpublic SubType subType = SubType.X10;\n \tpublic char sensorId = 'A';\n@@ -225,23 +226,23 @@\n \n \t\t} else if (valueSelector.getItemClass() == ContactItem.class) {\n \n-\t\t\tif (valueSelector == RFXComValueSelector.COMMAND) {\n+\t\t\tif (valueSelector == RFXComValueSelector.CONTACT) {\n \n \t\t\t\tswitch (command) {\n \t\t\t\tcase OFF:\n \t\t\t\tcase GROUP_OFF:\n \t\t\t\tcase DIM:\n-\t\t\t\t\tstate = OpenClosedType.OPEN;\n+\t\t\t\t\tstate = OpenClosedType.CLOSED;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase ON:\n \t\t\t\tcase GROUP_ON:\n \t\t\t\tcase BRIGHT:\n-\t\t\t\t\tstate = OpenClosedType.CLOSED;\n+\t\t\t\t\tstate = OpenClosedType.OPEN;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase CHIME:\n-\t\t\t\t\tstate = OpenClosedType.CLOSED;\n+\t\t\t\t\tstate = OpenClosedType.OPEN;\n \t\t\t\t\tbreak;\n \t\t\t\t\t\n \t\t\t\tdefault:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 92,
    "bugNodeStartChar": 2064,
    "bugNodeLength": 120,
    "fixLineNum": 92,
    "fixNodeStartChar": 2064,
    "fixNodeLength": 154,
    "sourceBeforeFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)",
    "sourceAfterFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
    "fixCommitParentSHA1": "affaf7a4b7a13dc0a9051389de0935f1a94dfd70",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java\nindex e1f535e..83c6d02 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java\n@@ -91,7 +91,8 @@\n \t\t\t.asList(RFXComValueSelector.RAW_DATA,\n \t\t\t\t\tRFXComValueSelector.SIGNAL_LEVEL,\n \t\t\t\t\tRFXComValueSelector.COMMAND,\n-\t\t\t\t\tRFXComValueSelector.DIMMING_LEVEL);\n+\t\t\t\t\tRFXComValueSelector.DIMMING_LEVEL,\n+\t\t\t\t\tRFXComValueSelector.CONTACT);\n \n \tpublic SubType subType = SubType.AC;\n \tpublic int sensorId = 0;\n@@ -269,17 +270,17 @@\n \n \t\t} else if (valueSelector.getItemClass() == ContactItem.class) {\n \n-\t\t\tif (valueSelector == RFXComValueSelector.COMMAND) {\n+\t\t\tif (valueSelector == RFXComValueSelector.CONTACT) {\n \n \t\t\t\tswitch (command) {\n \t\t\t\tcase OFF:\n \t\t\t\tcase GROUP_OFF:\n-\t\t\t\t\tstate = OpenClosedType.OPEN;\n+\t\t\t\t\tstate = OpenClosedType.CLOSED;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase ON:\n \t\t\t\tcase GROUP_ON:\n-\t\t\t\t\tstate = OpenClosedType.CLOSED;\n+\t\t\t\t\tstate = OpenClosedType.OPEN;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase SET_GROUP_LEVEL:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 90,
    "bugNodeStartChar": 2199,
    "bugNodeLength": 160,
    "fixLineNum": 90,
    "fixNodeStartChar": 2199,
    "fixNodeLength": 194,
    "sourceBeforeFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL)",
    "sourceAfterFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
    "fixCommitParentSHA1": "affaf7a4b7a13dc0a9051389de0935f1a94dfd70",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java\nindex e560ce3..1b5bc9b 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java\n@@ -106,7 +106,8 @@\n \t\t\t\t\tRFXComValueSelector.SIGNAL_LEVEL,\n \t\t\t\t\tRFXComValueSelector.COMMAND,\n \t\t\t\t\tRFXComValueSelector.MOOD,\n-\t\t\t\t\tRFXComValueSelector.DIMMING_LEVEL);\n+\t\t\t\t\tRFXComValueSelector.DIMMING_LEVEL,\n+\t\t\t\t\tRFXComValueSelector.CONTACT);\n \n \tpublic SubType subType = SubType.LIGHTWAVERF;\n \tpublic int sensorId = 0;\n@@ -300,16 +301,16 @@\n \n \t\t} else if (valueSelector.getItemClass() == ContactItem.class) {\n \n-\t\t\tif (valueSelector == RFXComValueSelector.COMMAND) {\n+\t\t\tif (valueSelector == RFXComValueSelector.CONTACT) {\n \n \t\t\t\tswitch (command) {\n \t\t\t\tcase OFF:\n \t\t\t\tcase GROUP_OFF:\n-\t\t\t\t\tstate = OpenClosedType.OPEN;\n+\t\t\t\t\tstate = OpenClosedType.CLOSED;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase ON:\t\t\t\t\n-\t\t\t\t\tstate = OpenClosedType.CLOSED;\n+\t\t\t\t\tstate = OpenClosedType.OPEN;\n \t\t\t\t\tbreak;\n \t\t\t\t\n \t\t\t\tcase SET_LEVEL:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 104,
    "bugNodeStartChar": 2415,
    "bugNodeLength": 191,
    "fixLineNum": 104,
    "fixNodeStartChar": 2415,
    "fixNodeLength": 225,
    "sourceBeforeFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL)",
    "sourceAfterFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
    "fixCommitParentSHA1": "affaf7a4b7a13dc0a9051389de0935f1a94dfd70",
    "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting6Message.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting6Message.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting6Message.java\nindex d38a574..ff402b8 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting6Message.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting6Message.java\n@@ -81,7 +81,8 @@\n \tprivate final static List<RFXComValueSelector> supportedValueSelectors = Arrays\n \t\t\t.asList(RFXComValueSelector.RAW_DATA,\n \t\t\t\t\tRFXComValueSelector.SIGNAL_LEVEL,\n-\t\t\t\t\tRFXComValueSelector.COMMAND);\n+\t\t\t\t\tRFXComValueSelector.COMMAND,\n+\t\t\t\t\tRFXComValueSelector.CONTACT);\n \n \tpublic SubType subType = SubType.BLYSS;\n \tpublic int sensorId = 0;\n@@ -210,17 +211,17 @@\n \n \t\t} else if (valueSelector.getItemClass() == ContactItem.class) {\n \n-\t\t\tif (valueSelector == RFXComValueSelector.COMMAND) {\n+\t\t\tif (valueSelector == RFXComValueSelector.CONTACT) {\n \n \t\t\t\tswitch (command) {\n \t\t\t\tcase OFF:\n \t\t\t\tcase GROUP_OFF:\n-\t\t\t\t\tstate = OpenClosedType.OPEN;\n+\t\t\t\t\tstate = OpenClosedType.CLOSED;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase ON:\n \t\t\t\tcase GROUP_ON:\n-\t\t\t\t\tstate = OpenClosedType.CLOSED;\n+\t\t\t\t\tstate = OpenClosedType.OPEN;\n \t\t\t\t\tbreak;\n \t\t\t\t\t\n \t\t\t\tdefault:\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 81,
    "bugNodeStartChar": 1897,
    "bugNodeLength": 120,
    "fixLineNum": 81,
    "fixNodeStartChar": 1897,
    "fixNodeLength": 154,
    "sourceBeforeFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)",
    "sourceAfterFix": "Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "5753a956fa6ddc6e3d41edef4f32af4d7be0d90e",
    "fixCommitParentSHA1": "affaf7a4b7a13dc0a9051389de0935f1a94dfd70",
    "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\nindex 6416058..b6b762c 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n@@ -138,7 +138,7 @@\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n-\t\t\t\t\tIOUtils.closeQuitely(is);\n+\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 141,
    "bugNodeStartChar": 4832,
    "bugNodeLength": 24,
    "fixLineNum": 141,
    "fixNodeStartChar": 4832,
    "fixNodeLength": 24,
    "sourceBeforeFix": "IOUtils.closeQuitely(is)",
    "sourceAfterFix": "IOUtils.closeQuietly(is)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "5753a956fa6ddc6e3d41edef4f32af4d7be0d90e",
    "fixCommitParentSHA1": "affaf7a4b7a13dc0a9051389de0935f1a94dfd70",
    "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java",
    "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\nindex 6416058..b6b762c 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n@@ -138,7 +138,7 @@\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n-\t\t\t\t\tIOUtils.closeQuitely(is);\n+\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 141,
    "bugNodeStartChar": 4832,
    "bugNodeLength": 24,
    "fixLineNum": 141,
    "fixNodeStartChar": 4832,
    "fixNodeLength": 24,
    "sourceBeforeFix": "IOUtils.closeQuitely(is)",
    "sourceAfterFix": "IOUtils.closeQuietly(is)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ef856da1a07d02a91bc3a02d9b04c604d1f5e1a1",
    "fixCommitParentSHA1": "4dead217efa9594effb6d341c50bb0acfdbd9ffb",
    "bugFilePath": "bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java\nindex 4fc5f47..8ab97ff 100644\n--- a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java\n+++ b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java\n@@ -253,7 +253,7 @@\n \t\tHmVariable var = new HmVariable();\n \t\tvar.setName(name);\n \t\tvar.setWriteable(true);\n-\t\tvar.setValue(guessType(value));\n+\t\tvar.setValueType(guessType(value));\n \t\tvar.setValue(value);\n \t\treturn var;\n \t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 256,
    "bugNodeStartChar": 7554,
    "bugNodeLength": 30,
    "fixLineNum": 256,
    "fixNodeStartChar": 7554,
    "fixNodeLength": 34,
    "sourceBeforeFix": "var.setValue(guessType(value))",
    "sourceAfterFix": "var.setValueType(guessType(value))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ef856da1a07d02a91bc3a02d9b04c604d1f5e1a1",
    "fixCommitParentSHA1": "4dead217efa9594effb6d341c50bb0acfdbd9ffb",
    "bugFilePath": "bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java\nindex 4fc5f47..8ab97ff 100644\n--- a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java\n+++ b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java\n@@ -253,7 +253,7 @@\n \t\tHmVariable var = new HmVariable();\n \t\tvar.setName(name);\n \t\tvar.setWriteable(true);\n-\t\tvar.setValue(guessType(value));\n+\t\tvar.setValueType(guessType(value));\n \t\tvar.setValue(value);\n \t\treturn var;\n \t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 256,
    "bugNodeStartChar": 7554,
    "bugNodeLength": 30,
    "fixLineNum": 256,
    "fixNodeStartChar": 7554,
    "fixNodeLength": 34,
    "sourceBeforeFix": "var.setValue(guessType(value))",
    "sourceAfterFix": "var.setValueType(guessType(value))"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ca588103009cd6ffe00ee721ac9bb9832d3a182f",
    "fixCommitParentSHA1": "0694aa13c8328956aa79d0c5ac86cd314a10b10b",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java\nindex 6bb8b5e..b9ba834 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java\n@@ -38,7 +38,7 @@\n \tpublic static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {\n \t\tCalendar start = Calendar.getInstance();\n \t\tstart.set(Calendar.MONTH, startMonth);\n-\t\tstart.set(Calendar.DAY_OF_MONTH, startMonth);\n+\t\tstart.set(Calendar.DAY_OF_MONTH, startDay);\n \t\tstart = truncateToMidnight(start);\n \n \t\tCalendar end = Calendar.getInstance();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 41,
    "bugNodeStartChar": 1254,
    "bugNodeLength": 44,
    "fixLineNum": 41,
    "fixNodeStartChar": 1254,
    "fixNodeLength": 42,
    "sourceBeforeFix": "start.set(Calendar.DAY_OF_MONTH,startMonth)",
    "sourceAfterFix": "start.set(Calendar.DAY_OF_MONTH,startDay)"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "68f75a89c554dc819e7a0c9afa8bd2fe7fe5777d",
    "fixCommitParentSHA1": "4875094030e36ce271c1800b20ec413497d90052",
    "bugFilePath": "bundles/binding/org.openhab.binding.opensprinkler/src/main/java/org/openhab/binding/opensprinkler/internal/OpenSprinklerBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.opensprinkler/src/main/java/org/openhab/binding/opensprinkler/internal/OpenSprinklerBinding.java b/bundles/binding/org.openhab.binding.opensprinkler/src/main/java/org/openhab/binding/opensprinkler/internal/OpenSprinklerBinding.java\nindex a935212..b568434 100644\n--- a/bundles/binding/org.openhab.binding.opensprinkler/src/main/java/org/openhab/binding/opensprinkler/internal/OpenSprinklerBinding.java\n+++ b/bundles/binding/org.openhab.binding.opensprinkler/src/main/java/org/openhab/binding/opensprinkler/internal/OpenSprinklerBinding.java\n@@ -103,7 +103,7 @@\n \t\t\tString stationItemName = findFirstMatchingItemName(station);\r\n \t\t\tlogger.debug(\"Checking state of item: \" + stationItemName);\r\n \t\t\t\r\n-\t\t\tif ( stationItemName != null ) {\r\n+\t\t\tif ( stationItemName != null && openSprinkler != null ) {\r\n \t\t\t\tif ( openSprinkler.isStationOpen(station) ) {\r\n \t\t\t\t\teventPublisher.postUpdate(stationItemName, OnOffType.ON);\r\n \t\t\t\t} else {\r\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 106,
    "bugNodeStartChar": 3075,
    "bugNodeLength": 23,
    "fixLineNum": 106,
    "fixNodeStartChar": 2970,
    "fixNodeLength": 48,
    "sourceBeforeFix": "stationItemName != null",
    "sourceAfterFix": "stationItemName != null && openSprinkler != null"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4830b54a225ecadc65476d0431f71be0d30ad258",
    "fixCommitParentSHA1": "b69b24af96bf85b6b42271f021618c84571293d6",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java\nindex 6bb8b5e..b9ba834 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java\n@@ -38,7 +38,7 @@\n \tpublic static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {\n \t\tCalendar start = Calendar.getInstance();\n \t\tstart.set(Calendar.MONTH, startMonth);\n-\t\tstart.set(Calendar.DAY_OF_MONTH, startMonth);\n+\t\tstart.set(Calendar.DAY_OF_MONTH, startDay);\n \t\tstart = truncateToMidnight(start);\n \n \t\tCalendar end = Calendar.getInstance();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 41,
    "bugNodeStartChar": 1254,
    "bugNodeLength": 44,
    "fixLineNum": 41,
    "fixNodeStartChar": 1254,
    "fixNodeLength": 42,
    "sourceBeforeFix": "start.set(Calendar.DAY_OF_MONTH,startMonth)",
    "sourceAfterFix": "start.set(Calendar.DAY_OF_MONTH,startDay)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "5625c762fd70e1a630ab64da8772c2ef611b16f7",
    "fixCommitParentSHA1": "82555d3d1bc71f713ad22937d980b700d072e727",
    "bugFilePath": "bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java b/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java\nindex 14dea73..33f0318 100644\n--- a/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java\n+++ b/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java\n@@ -434,7 +434,7 @@\n \t\t\tthrow new MessageParseException(\"need 2 comma separated fields in msg\");\n \t\t}\n \t\ttry {\n-\t\t\tint numeric = Integer.parseInt(parts[1]);\n+\t\t\tint numeric = Integer.parseInt(parts[1], 16);\n \t\t\tArrayList<AlarmDecoderBindingConfig> bcl = getItems(ADMsgType.RFX, parts[0], null);\n \t\t\tfor (AlarmDecoderBindingConfig c : bcl) {\n \t\t\t\tif (c.hasFeature(\"data\")) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 437,
    "bugNodeStartChar": 14865,
    "bugNodeLength": 26,
    "fixLineNum": 437,
    "fixNodeStartChar": 14865,
    "fixNodeLength": 30,
    "sourceBeforeFix": "Integer.parseInt(parts[1])",
    "sourceAfterFix": "Integer.parseInt(parts[1],16)"
  },
  {
    "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
    "fixCommitSHA1": "c0fc1a0d3ae085658408d3644e9a676478ee696b",
    "fixCommitParentSHA1": "f9ae3ed39b2902debf74bf0d584882bbf80940e4",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/MaxCulMsgHandler.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/MaxCulMsgHandler.java b/bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/MaxCulMsgHandler.java\nindex a1eb593..9d655ff 100644\n--- a/bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/MaxCulMsgHandler.java\n+++ b/bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/MaxCulMsgHandler.java\n@@ -230,7 +230,7 @@\n \t */\n \tpublic void sendPairPong(String dstAddr)\n \t{\n-\t\tPairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, MaxCulMsgType.PAIR_PONG, (byte) 0, this.srcAddr, dstAddr);\n+\t\tPairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, (byte) 0, this.srcAddr, dstAddr);\n \t\tsendMessage(pp);\n \t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 233,
    "bugNodeStartChar": 7221,
    "bugNodeLength": 101,
    "fixLineNum": 233,
    "fixNodeStartChar": 7221,
    "fixNodeLength": 76,
    "sourceBeforeFix": "new PairPongMsg(getMessageCount(),(byte)0,MaxCulMsgType.PAIR_PONG,(byte)0,this.srcAddr,dstAddr)",
    "sourceAfterFix": "new PairPongMsg(getMessageCount(),(byte)0,(byte)0,this.srcAddr,dstAddr)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "93b0ac77e59d936e91684ba016978a315d50d055",
    "fixCommitParentSHA1": "d9bc9431441ca3e0069a5082d846a795e366c9f0",
    "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\nindex 8ccade9..ea17163 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n@@ -72,7 +72,7 @@\n \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n-\t\t\t\tif(item.getName().matches(name)) {\n+\t\t\t\tif(item.getName().equals(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 75,
    "bugNodeStartChar": 2815,
    "bugNodeLength": 28,
    "fixLineNum": 75,
    "fixNodeStartChar": 2815,
    "fixNodeLength": 27,
    "sourceBeforeFix": "item.getName().matches(name)",
    "sourceAfterFix": "item.getName().equals(name)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "93b0ac77e59d936e91684ba016978a315d50d055",
    "fixCommitParentSHA1": "d9bc9431441ca3e0069a5082d846a795e366c9f0",
    "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\nindex 8ccade9..ea17163 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n@@ -72,7 +72,7 @@\n \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n-\t\t\t\tif(item.getName().matches(name)) {\n+\t\t\t\tif(item.getName().equals(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 75,
    "bugNodeStartChar": 2815,
    "bugNodeLength": 28,
    "fixLineNum": 75,
    "fixNodeStartChar": 2815,
    "fixNodeLength": 27,
    "sourceBeforeFix": "item.getName().matches(name)",
    "sourceAfterFix": "item.getName().equals(name)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "a1977e8e8dccb0e73d05be1e84e7919525b9b413",
    "fixCommitParentSHA1": "a36238c41dd2fbaeb61212b2dac12e0e305f83cf",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 4ac6fab..17f9e35 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -317,7 +317,7 @@\n     Object convertedValue;\n     if (value.scale() == 0) {\n       logger.trace(\"found no fractional part\");\n-      convertedValue = value.doubleValue();\n+      convertedValue = value.toBigInteger();\n     } else {\n       logger.trace(\"found fractional part\");\n       convertedValue = value.doubleValue();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 320,
    "bugNodeStartChar": 10875,
    "bugNodeLength": 19,
    "fixLineNum": 320,
    "fixNodeStartChar": 10875,
    "fixNodeLength": 20,
    "sourceBeforeFix": "value.doubleValue()",
    "sourceAfterFix": "value.toBigInteger()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a1977e8e8dccb0e73d05be1e84e7919525b9b413",
    "fixCommitParentSHA1": "a36238c41dd2fbaeb61212b2dac12e0e305f83cf",
    "bugFilePath": "bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java",
    "fixPatch": "diff --git a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\nindex 4ac6fab..17f9e35 100644\n--- a/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n+++ b/bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java\n@@ -317,7 +317,7 @@\n     Object convertedValue;\n     if (value.scale() == 0) {\n       logger.trace(\"found no fractional part\");\n-      convertedValue = value.doubleValue();\n+      convertedValue = value.toBigInteger();\n     } else {\n       logger.trace(\"found fractional part\");\n       convertedValue = value.doubleValue();\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 320,
    "bugNodeStartChar": 10875,
    "bugNodeLength": 19,
    "fixLineNum": 320,
    "fixNodeStartChar": 10875,
    "fixNodeLength": 20,
    "sourceBeforeFix": "value.doubleValue()",
    "sourceAfterFix": "value.toBigInteger()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "556b9e45e830a0b78912baf9e1217e92e683306d",
    "fixCommitParentSHA1": "4e6c7b2e9e3a62f4ded011c57e302d75cf07dd6c",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\nindex 3611dbb..5a11dbe 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n@@ -64,7 +64,7 @@\n   }\n \n   private int getTimeZone() {\n-    return calendar.getTimeZone().getDSTSavings() / 3600000;\n+    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n \n   private boolean isDaylightSavingTime() {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 67,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 38,
    "fixLineNum": 67,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 37,
    "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()",
    "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "556b9e45e830a0b78912baf9e1217e92e683306d",
    "fixCommitParentSHA1": "4e6c7b2e9e3a62f4ded011c57e302d75cf07dd6c",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\nindex 3611dbb..5a11dbe 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n@@ -64,7 +64,7 @@\n   }\n \n   private int getTimeZone() {\n-    return calendar.getTimeZone().getDSTSavings() / 3600000;\n+    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n \n   private boolean isDaylightSavingTime() {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 67,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 38,
    "fixLineNum": 67,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 37,
    "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()",
    "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "bae26ad317c876853159a7a2af7429c0d9d73455",
    "fixCommitParentSHA1": "4e6c7b2e9e3a62f4ded011c57e302d75cf07dd6c",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\nindex 3611dbb..5a11dbe 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n@@ -64,7 +64,7 @@\n   }\n \n   private int getTimeZone() {\n-    return calendar.getTimeZone().getDSTSavings() / 3600000;\n+    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n \n   private boolean isDaylightSavingTime() {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 67,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 38,
    "fixLineNum": 67,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 37,
    "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()",
    "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bae26ad317c876853159a7a2af7429c0d9d73455",
    "fixCommitParentSHA1": "4e6c7b2e9e3a62f4ded011c57e302d75cf07dd6c",
    "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\nindex 3611dbb..5a11dbe 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n@@ -64,7 +64,7 @@\n   }\n \n   private int getTimeZone() {\n-    return calendar.getTimeZone().getDSTSavings() / 3600000;\n+    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n \n   private boolean isDaylightSavingTime() {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 67,
    "bugNodeStartChar": 2082,
    "bugNodeLength": 38,
    "fixLineNum": 67,
    "fixNodeStartChar": 2082,
    "fixNodeLength": 37,
    "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()",
    "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d33a3d853e6465ec8985d1a1b36b7d64f066c130",
    "fixCommitParentSHA1": "7f3d64372b182310a1fc76ef8260b22171d798a4",
    "bugFilePath": "bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\nindex 3eb189c..a9b8f7b 100644\n--- a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\n+++ b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\n@@ -329,7 +329,7 @@\n \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n-\t\t\t\tstateHolder.reloadVariables();\n+\t\t\t\tstateHolder.reloadDatapoints();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 332,
    "bugNodeStartChar": 11505,
    "bugNodeLength": 29,
    "fixLineNum": 332,
    "fixNodeStartChar": 11505,
    "fixNodeLength": 30,
    "sourceBeforeFix": "stateHolder.reloadVariables()",
    "sourceAfterFix": "stateHolder.reloadDatapoints()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d33a3d853e6465ec8985d1a1b36b7d64f066c130",
    "fixCommitParentSHA1": "7f3d64372b182310a1fc76ef8260b22171d798a4",
    "bugFilePath": "bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\nindex 3eb189c..a9b8f7b 100644\n--- a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\n+++ b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\n@@ -329,7 +329,7 @@\n \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n-\t\t\t\tstateHolder.reloadVariables();\n+\t\t\t\tstateHolder.reloadDatapoints();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 332,
    "bugNodeStartChar": 11505,
    "bugNodeLength": 29,
    "fixLineNum": 332,
    "fixNodeStartChar": 11505,
    "fixNodeLength": 30,
    "sourceBeforeFix": "stateHolder.reloadVariables()",
    "sourceAfterFix": "stateHolder.reloadDatapoints()"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "8e837d44d58c55a2bb1f84d779f855c7b8ddf057",
    "fixCommitParentSHA1": "77e232d22102058ff91a8dcb00cc229d2fe5f994",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\nindex 8b7b028..530df7d 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n@@ -250,7 +250,7 @@\n \tpublic void execute() {\n \t\t// Don't start the next node if there's a queue\n \t\tif(zController.getSendQueueLength() > 1) {\n-\t\t\tlogger.debug(\"Queue length is {} - deferring HEAL.\");\n+\t\t\tlogger.debug(\"Queue length is {} - deferring HEAL.\", zController.getSendQueueLength());\n \t\t\treturn;\n \t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 253,
    "bugNodeStartChar": 8252,
    "bugNodeLength": 52,
    "fixLineNum": 253,
    "fixNodeStartChar": 8252,
    "fixNodeLength": 86,
    "sourceBeforeFix": "logger.debug(\"Queue length is {} - deferring HEAL.\")",
    "sourceAfterFix": "logger.debug(\"Queue length is {} - deferring HEAL.\",zController.getSendQueueLength())"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "5d40c31aa7c36597ce311bca7da61a0e2773e7d2",
    "fixCommitParentSHA1": "a30db7c29a77131e5f4bc422dd35fe4d4392dcaa",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\nindex e3d67fb..2ac2c1a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java\n@@ -265,7 +265,7 @@\n \t\t\t\t\tlogger.debug(\"NODE {}: DEAD node.\", node.getNodeId());\n \t\t\t\t\t// The node is dead, but we may have already started a Heal\n \t\t\t\t\t// If so, don't start it again!\n-\t\t\t\t\tif(isNodeHealing(node.getNodeId())) {\n+\t\t\t\t\tif(!isNodeHealing(node.getNodeId())) {\n \t\t\t\t\t\tlogger.debug(\"NODE {}: DEAD node - requesting network heal.\", node.getNodeId());\n \n \t\t\t\t\t\thealNode(node.getNodeId());\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 268,
    "bugNodeStartChar": 8791,
    "bugNodeLength": 31,
    "fixLineNum": 268,
    "fixNodeStartChar": 8791,
    "fixNodeLength": 32,
    "sourceBeforeFix": "isNodeHealing(node.getNodeId())",
    "sourceAfterFix": "!isNodeHealing(node.getNodeId())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "004f81971e27dec7bc7af3531c2d09dbe255702c",
    "fixCommitParentSHA1": "b9f793a5a5ae78380c3a8948e3b7fcc5c2634e92",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex d6c1ad0..88db7f2 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -69,8 +69,8 @@\n \t */\n \tpublic void advanceNodeStage(NodeStage targetStage) {\n \t\tif (targetStage.getStage() <= this.node.getNodeStage().getStage() && targetStage != NodeStage.DONE) {\n-\t\t\tlogger.warn(String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\", this.node\n-\t\t\t\t\t.getNodeStage().getLabel(), targetStage.getLabel()));\n+\t\t\tlogger.warn(String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\", this.node.getNodeId(),\n+\t\t\t\t\tthis.node.getNodeStage().getLabel(), targetStage.getLabel()));\n \t\t\treturn;\n \t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 72,
    "bugNodeStartChar": 3164,
    "bugNodeLength": 164,
    "fixLineNum": 72,
    "fixNodeStartChar": 3164,
    "fixNodeLength": 186,
    "sourceBeforeFix": "String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\",this.node.getNodeStage().getLabel(),targetStage.getLabel())",
    "sourceAfterFix": "String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "cabb0556773c6e13c1932c38eebed5ddb58c1350",
    "fixCommitParentSHA1": "af34270e5ee51f602c5b54d117bd3db5f0b7d7d2",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\nindex d6c1ad0..88db7f2 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java\n@@ -69,8 +69,8 @@\n \t */\n \tpublic void advanceNodeStage(NodeStage targetStage) {\n \t\tif (targetStage.getStage() <= this.node.getNodeStage().getStage() && targetStage != NodeStage.DONE) {\n-\t\t\tlogger.warn(String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\", this.node\n-\t\t\t\t\t.getNodeStage().getLabel(), targetStage.getLabel()));\n+\t\t\tlogger.warn(String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\", this.node.getNodeId(),\n+\t\t\t\t\tthis.node.getNodeStage().getLabel(), targetStage.getLabel()));\n \t\t\treturn;\n \t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 72,
    "bugNodeStartChar": 3164,
    "bugNodeLength": 164,
    "fixLineNum": 72,
    "fixNodeStartChar": 3164,
    "fixNodeLength": 186,
    "sourceBeforeFix": "String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\",this.node.getNodeStage().getLabel(),targetStage.getLabel())",
    "sourceAfterFix": "String.format(\"NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s\",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "a780dfa013624609ebbbeae48086c07b251bf0e8",
    "fixCommitParentSHA1": "79e618160efa0ee24ce3c98a165b21acf5c46b75",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSwitchCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSwitchCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSwitchCommandClass.java\nindex 48872cc..7f3eca5 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSwitchCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSwitchCommandClass.java\n@@ -161,7 +161,7 @@\n \t\tlogger.debug(\"Creating new message for application command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE for node {}\", this.getNode().getNodeId());\n \t\tSerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Set);\n     \tbyte[] newPayload = { \t(byte) this.getNode().getNodeId(), \n-    \t\t\t\t\t\t\t3, \n+    \t\t\t\t\t\t\t2, \n \t\t\t\t\t\t\t\t(byte) getCommandClass().getKey(), \n \t\t\t\t\t\t\t\t(byte) SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE };\n     \tresult.setMessagePayload(newPayload);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 163,
    "bugNodeStartChar": 7020,
    "bugNodeLength": 150,
    "fixLineNum": 163,
    "fixNodeStartChar": 7020,
    "fixNodeLength": 150,
    "sourceBeforeFix": "{(byte)this.getNode().getNodeId(),3,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}",
    "sourceAfterFix": "{(byte)this.getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "339f3ee107cdfd72dbee9201de4b5c1994168b5b",
    "fixCommitParentSHA1": "345389a8a106a9405248e03e54224bc453f504c4",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\nindex 3615998..eb5c42e 100644\n--- a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n+++ b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n@@ -115,13 +115,13 @@\n \t\tcase HeatingThermostatPlus:\n \t\t\tHeatingThermostat heatingThermostat = (HeatingThermostat) device;\n \t\t\t// \"xxxx xx00 = automatic, xxxx xx01 = manual, xxxx xx10 = vacation, xxxx xx11 = boost\":\n-\t\t\tif (bits2[0] == false && bits2[0] == false) {\n+\t\t\tif (bits2[1] == false && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.AUTOMATIC);\n-\t\t\t} else if (bits2[0] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == false && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.MANUAL);\n-\t\t\t} else if (bits2[1] == false && bits2[0] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.VACATION);\n-\t\t\t} else if (bits2[1] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.BOOST);\n \t\t\t} else {\n \t\t\t\t// TODO: handel malformed message\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 118,
    "bugNodeStartChar": 3491,
    "bugNodeLength": 8,
    "fixLineNum": 118,
    "fixNodeStartChar": 3491,
    "fixNodeLength": 8,
    "sourceBeforeFix": "bits2[0]",
    "sourceAfterFix": "bits2[1]"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "339f3ee107cdfd72dbee9201de4b5c1994168b5b",
    "fixCommitParentSHA1": "345389a8a106a9405248e03e54224bc453f504c4",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\nindex 3615998..eb5c42e 100644\n--- a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n+++ b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n@@ -115,13 +115,13 @@\n \t\tcase HeatingThermostatPlus:\n \t\t\tHeatingThermostat heatingThermostat = (HeatingThermostat) device;\n \t\t\t// \"xxxx xx00 = automatic, xxxx xx01 = manual, xxxx xx10 = vacation, xxxx xx11 = boost\":\n-\t\t\tif (bits2[0] == false && bits2[0] == false) {\n+\t\t\tif (bits2[1] == false && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.AUTOMATIC);\n-\t\t\t} else if (bits2[0] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == false && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.MANUAL);\n-\t\t\t} else if (bits2[1] == false && bits2[0] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.VACATION);\n-\t\t\t} else if (bits2[1] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.BOOST);\n \t\t\t} else {\n \t\t\t\t// TODO: handel malformed message\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 120,
    "bugNodeStartChar": 3608,
    "bugNodeLength": 8,
    "fixLineNum": 120,
    "fixNodeStartChar": 3608,
    "fixNodeLength": 8,
    "sourceBeforeFix": "bits2[0]",
    "sourceAfterFix": "bits2[1]"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "339f3ee107cdfd72dbee9201de4b5c1994168b5b",
    "fixCommitParentSHA1": "345389a8a106a9405248e03e54224bc453f504c4",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\nindex 3615998..eb5c42e 100644\n--- a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n+++ b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n@@ -115,13 +115,13 @@\n \t\tcase HeatingThermostatPlus:\n \t\t\tHeatingThermostat heatingThermostat = (HeatingThermostat) device;\n \t\t\t// \"xxxx xx00 = automatic, xxxx xx01 = manual, xxxx xx10 = vacation, xxxx xx11 = boost\":\n-\t\t\tif (bits2[0] == false && bits2[0] == false) {\n+\t\t\tif (bits2[1] == false && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.AUTOMATIC);\n-\t\t\t} else if (bits2[0] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == false && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.MANUAL);\n-\t\t\t} else if (bits2[1] == false && bits2[0] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.VACATION);\n-\t\t\t} else if (bits2[1] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.BOOST);\n \t\t\t} else {\n \t\t\t\t// TODO: handel malformed message\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 122,
    "bugNodeStartChar": 3722,
    "bugNodeLength": 17,
    "fixLineNum": 122,
    "fixNodeStartChar": 3722,
    "fixNodeLength": 16,
    "sourceBeforeFix": "bits2[1] == false",
    "sourceAfterFix": "bits2[1] == true"
  },
  {
    "bugType": "SWAP_BOOLEAN_LITERAL",
    "fixCommitSHA1": "339f3ee107cdfd72dbee9201de4b5c1994168b5b",
    "fixCommitParentSHA1": "345389a8a106a9405248e03e54224bc453f504c4",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\nindex 3615998..eb5c42e 100644\n--- a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n+++ b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java\n@@ -115,13 +115,13 @@\n \t\tcase HeatingThermostatPlus:\n \t\t\tHeatingThermostat heatingThermostat = (HeatingThermostat) device;\n \t\t\t// \"xxxx xx00 = automatic, xxxx xx01 = manual, xxxx xx10 = vacation, xxxx xx11 = boost\":\n-\t\t\tif (bits2[0] == false && bits2[0] == false) {\n+\t\t\tif (bits2[1] == false && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.AUTOMATIC);\n-\t\t\t} else if (bits2[0] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == false && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.MANUAL);\n-\t\t\t} else if (bits2[1] == false && bits2[0] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == false) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.VACATION);\n-\t\t\t} else if (bits2[1] == false && bits2[1] == false) {\n+\t\t\t} else if (bits2[1] == true && bits2[0] == true) {\n \t\t\t\theatingThermostat.setMode(ThermostatModeType.BOOST);\n \t\t\t} else {\n \t\t\t\t// TODO: handel malformed message\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 124,
    "bugNodeStartChar": 3838,
    "bugNodeLength": 17,
    "fixLineNum": 124,
    "fixNodeStartChar": 3838,
    "fixNodeLength": 16,
    "sourceBeforeFix": "bits2[1] == false",
    "sourceAfterFix": "bits2[1] == true"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b4d3abf05eee0c6cec4c56fa2853521d95d495e0",
    "fixCommitParentSHA1": "8b0f3cb61e1854d1775f9f85e5d1c0d88cab086b",
    "bugFilePath": "bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\nindex b1a390e..69efd55 100644\n--- a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n+++ b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n@@ -452,7 +452,7 @@\n \t\t@SuppressWarnings(\"rawtypes\")\n \t\t@Override\n \t\tpublic void established(GENASubscription sub) {\n-\t\t\tlogger.info(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n \t\t}\n \n \t\t@SuppressWarnings(\"rawtypes\")\n@@ -499,7 +499,7 @@\n \t\t@Override\n \t\tprotected void ended(GENASubscription subscription,\n \t\t\t\tCancelReason reason, UpnpResponse responseStatus) {\n-\t\t\tlogger.warn(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n \n \t\t\t//rebooting the GENA subscription\n \t\t\tService service = subscription.getService();\t\t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 455,
    "bugNodeStartChar": 14982,
    "bugNodeLength": 143,
    "fixLineNum": 455,
    "fixNodeStartChar": 14982,
    "fixNodeLength": 144,
    "sourceBeforeFix": "logger.info(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice())",
    "sourceAfterFix": "logger.debug(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b4d3abf05eee0c6cec4c56fa2853521d95d495e0",
    "fixCommitParentSHA1": "8b0f3cb61e1854d1775f9f85e5d1c0d88cab086b",
    "bugFilePath": "bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\nindex b1a390e..69efd55 100644\n--- a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n+++ b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n@@ -452,7 +452,7 @@\n \t\t@SuppressWarnings(\"rawtypes\")\n \t\t@Override\n \t\tpublic void established(GENASubscription sub) {\n-\t\t\tlogger.info(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n \t\t}\n \n \t\t@SuppressWarnings(\"rawtypes\")\n@@ -499,7 +499,7 @@\n \t\t@Override\n \t\tprotected void ended(GENASubscription subscription,\n \t\t\t\tCancelReason reason, UpnpResponse responseStatus) {\n-\t\t\tlogger.warn(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n \n \t\t\t//rebooting the GENA subscription\n \t\t\tService service = subscription.getService();\t\t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 455,
    "bugNodeStartChar": 14982,
    "bugNodeLength": 143,
    "fixLineNum": 455,
    "fixNodeStartChar": 14982,
    "fixNodeLength": 144,
    "sourceBeforeFix": "logger.info(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice())",
    "sourceAfterFix": "logger.debug(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice())"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b4d3abf05eee0c6cec4c56fa2853521d95d495e0",
    "fixCommitParentSHA1": "8b0f3cb61e1854d1775f9f85e5d1c0d88cab086b",
    "bugFilePath": "bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\nindex b1a390e..69efd55 100644\n--- a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n+++ b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n@@ -452,7 +452,7 @@\n \t\t@SuppressWarnings(\"rawtypes\")\n \t\t@Override\n \t\tpublic void established(GENASubscription sub) {\n-\t\t\tlogger.info(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n \t\t}\n \n \t\t@SuppressWarnings(\"rawtypes\")\n@@ -499,7 +499,7 @@\n \t\t@Override\n \t\tprotected void ended(GENASubscription subscription,\n \t\t\t\tCancelReason reason, UpnpResponse responseStatus) {\n-\t\t\tlogger.warn(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n \n \t\t\t//rebooting the GENA subscription\n \t\t\tService service = subscription.getService();\t\t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 502,
    "bugNodeStartChar": 16609,
    "bugNodeLength": 152,
    "fixLineNum": 502,
    "fixNodeStartChar": 16609,
    "fixNodeLength": 153,
    "sourceBeforeFix": "logger.warn(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice())",
    "sourceAfterFix": "logger.debug(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b4d3abf05eee0c6cec4c56fa2853521d95d495e0",
    "fixCommitParentSHA1": "8b0f3cb61e1854d1775f9f85e5d1c0d88cab086b",
    "bugFilePath": "bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\nindex b1a390e..69efd55 100644\n--- a/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n+++ b/bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java\n@@ -452,7 +452,7 @@\n \t\t@SuppressWarnings(\"rawtypes\")\n \t\t@Override\n \t\tpublic void established(GENASubscription sub) {\n-\t\t\tlogger.info(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} is established for device {}\",sub.getService().getServiceId(),sub.getService().getDevice());\n \t\t}\n \n \t\t@SuppressWarnings(\"rawtypes\")\n@@ -499,7 +499,7 @@\n \t\t@Override\n \t\tprotected void ended(GENASubscription subscription,\n \t\t\t\tCancelReason reason, UpnpResponse responseStatus) {\n-\t\t\tlogger.warn(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n+\t\t\tlogger.debug(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice());\n \n \t\t\t//rebooting the GENA subscription\n \t\t\tService service = subscription.getService();\t\t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 502,
    "bugNodeStartChar": 16609,
    "bugNodeLength": 152,
    "fixLineNum": 502,
    "fixNodeStartChar": 16609,
    "fixNodeLength": 153,
    "sourceBeforeFix": "logger.warn(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice())",
    "sourceAfterFix": "logger.debug(\"The GENA Subscription for serviceID {} ended for device {}\",subscription.getService().getServiceId(),subscription.getService().getDevice())"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "4ff24720acfd9f9c2100a852526e6a8828277c56",
    "fixCommitParentSHA1": "9eff311e801c4674d508d7e081d4a085c07ec37d",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java\nindex d67d23b..a00aad4 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java\n@@ -111,7 +111,7 @@\n \t\tif (zProvider != null) {\n \t\t\tZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);\n \t\t\t\n-\t\t\tif (bindingConfig != null) {\n+\t\t\tif (bindingConfig != null && converterHandler != null) {\n \t\t\t\t\tconverterHandler.executeRefresh(zProvider, itemName, true);\n \t\t\t}\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 114,
    "bugNodeStartChar": 3899,
    "bugNodeLength": 21,
    "fixLineNum": 114,
    "fixNodeStartChar": 3899,
    "fixNodeLength": 49,
    "sourceBeforeFix": "bindingConfig != null",
    "sourceAfterFix": "bindingConfig != null && converterHandler != null"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "8ac574dd4bedea9829f0403ba2718e86c6aa5211",
    "fixCommitParentSHA1": "9eff311e801c4674d508d7e081d4a085c07ec37d",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java\nindex d67d23b..a00aad4 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java\n@@ -111,7 +111,7 @@\n \t\tif (zProvider != null) {\n \t\t\tZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);\n \t\t\t\n-\t\t\tif (bindingConfig != null) {\n+\t\t\tif (bindingConfig != null && converterHandler != null) {\n \t\t\t\t\tconverterHandler.executeRefresh(zProvider, itemName, true);\n \t\t\t}\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 114,
    "bugNodeStartChar": 3899,
    "bugNodeLength": 21,
    "fixLineNum": 114,
    "fixNodeStartChar": 3899,
    "fixNodeLength": 49,
    "sourceBeforeFix": "bindingConfig != null",
    "sourceAfterFix": "bindingConfig != null && converterHandler != null"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "e81d608aa900b1b569ddfdd0dd41a0fe207d3eae",
    "fixCommitParentSHA1": "44c0bf088e2f3c3e91c5dc6b57e23c49c0254835",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java\nindex 3d9a5df..2fc5529 100644\n--- a/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java\n+++ b/bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java\n@@ -261,7 +261,7 @@\n \t\tfor (MaxCubeBindingProvider provider : providers) {\n \t\t\tserialNumber = provider.getSerialNumber(itemName);\n \n-\t\t\tif (serialNumber.equals(null))\n+\t\t\tif (!serialNumber.equals(null))\n \t\t\t\tbreak;\n \t\t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 264,
    "bugNodeStartChar": 8348,
    "bugNodeLength": 25,
    "fixLineNum": 264,
    "fixNodeStartChar": 8348,
    "fixNodeLength": 26,
    "sourceBeforeFix": "serialNumber.equals(null)",
    "sourceAfterFix": "!serialNumber.equals(null)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e16bf78360f5a93cbc6db48fa486f445e4b9a21a",
    "fixCommitParentSHA1": "25a93b67647105804b4db078907a1919c49994f9",
    "bugFilePath": "bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java b/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java\nindex ee3f13c..9384616 100644\n--- a/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java\n+++ b/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java\n@@ -16,7 +16,7 @@\n     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n-        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n+        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }\n@@ -24,7 +24,7 @@\n     @Test\n     public void testGetBindingValueToStateConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n-        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n+        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverter<?, ?> converter = converterLookup.getBindingValueToStateConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.getClass());\n     }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 19,
    "bugNodeStartChar": 723,
    "bugNodeLength": 71,
    "fixLineNum": 19,
    "fixNodeStartChar": 723,
    "fixNodeLength": 83,
    "sourceBeforeFix": "converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)",
    "sourceAfterFix": "converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "e16bf78360f5a93cbc6db48fa486f445e4b9a21a",
    "fixCommitParentSHA1": "25a93b67647105804b4db078907a1919c49994f9",
    "bugFilePath": "bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java b/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java\nindex ee3f13c..9384616 100644\n--- a/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java\n+++ b/bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java\n@@ -16,7 +16,7 @@\n     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n-        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n+        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }\n@@ -24,7 +24,7 @@\n     @Test\n     public void testGetBindingValueToStateConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n-        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n+        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverter<?, ?> converter = converterLookup.getBindingValueToStateConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.getClass());\n     }\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 27,
    "bugNodeStartChar": 1122,
    "bugNodeLength": 71,
    "fixLineNum": 27,
    "fixNodeStartChar": 1122,
    "fixNodeLength": 83,
    "sourceBeforeFix": "converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)",
    "sourceAfterFix": "converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "63c73d11b2de514fde3e299b573334b82089045c",
    "fixCommitParentSHA1": "116399f5c2bfdb90075368f624a057ef02a1bdc3",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java b/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java\nindex f3efd85..8b82e28 100644\n--- a/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java\n+++ b/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java\n@@ -29,7 +29,7 @@\n \t\n \t@Test\n \tpublic void PrefixTest() {\n-\t\tS_Command scmd = new S_Command(\"00FE30\", 20.0);\n+\t\tS_Command scmd = new S_Command(\"00FE30\", 1, 20.0);\n \t\t\n \t\tString commandStr = scmd.getCommandString();\n \t\t\n@@ -41,7 +41,7 @@\n \t\n \t@Test\n \tpublic void BaseCommandTest() {\n-\t\tS_Command scmd = new S_Command(\"00FE30\", 20.0);\n+\t\tS_Command scmd = new S_Command(\"00FE30\", 1, 20.0);\n \t\t\n \t\tString commandStr = scmd.getCommandString();\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 32,
    "bugNodeStartChar": 760,
    "bugNodeLength": 29,
    "fixLineNum": 32,
    "fixNodeStartChar": 760,
    "fixNodeLength": 32,
    "sourceBeforeFix": "new S_Command(\"00FE30\",20.0)",
    "sourceAfterFix": "new S_Command(\"00FE30\",1,20.0)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "63c73d11b2de514fde3e299b573334b82089045c",
    "fixCommitParentSHA1": "116399f5c2bfdb90075368f624a057ef02a1bdc3",
    "bugFilePath": "bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java b/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java\nindex f3efd85..8b82e28 100644\n--- a/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java\n+++ b/bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java\n@@ -29,7 +29,7 @@\n \t\n \t@Test\n \tpublic void PrefixTest() {\n-\t\tS_Command scmd = new S_Command(\"00FE30\", 20.0);\n+\t\tS_Command scmd = new S_Command(\"00FE30\", 1, 20.0);\n \t\t\n \t\tString commandStr = scmd.getCommandString();\n \t\t\n@@ -41,7 +41,7 @@\n \t\n \t@Test\n \tpublic void BaseCommandTest() {\n-\t\tS_Command scmd = new S_Command(\"00FE30\", 20.0);\n+\t\tS_Command scmd = new S_Command(\"00FE30\", 1, 20.0);\n \t\t\n \t\tString commandStr = scmd.getCommandString();\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 44,
    "bugNodeStartChar": 997,
    "bugNodeLength": 29,
    "fixLineNum": 44,
    "fixNodeStartChar": 997,
    "fixNodeLength": 32,
    "sourceBeforeFix": "new S_Command(\"00FE30\",20.0)",
    "sourceAfterFix": "new S_Command(\"00FE30\",1,20.0)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858",
    "fixCommitParentSHA1": "f5b4f47638ac513227bf880676e0ef98dbea56c9",
    "bugFilePath": "bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java b/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\nindex 6ea7830..d1edb93 100644\n--- a/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\n+++ b/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\n@@ -22,7 +22,7 @@\n \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n \n-\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n+\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 25,
    "bugNodeStartChar": 875,
    "bugNodeLength": 39,
    "fixLineNum": 25,
    "fixNodeStartChar": 875,
    "fixNodeLength": 45,
    "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)",
    "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858",
    "fixCommitParentSHA1": "f5b4f47638ac513227bf880676e0ef98dbea56c9",
    "bugFilePath": "bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java b/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\nindex 6ea7830..d1edb93 100644\n--- a/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\n+++ b/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\n@@ -22,7 +22,7 @@\n \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n \n-\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n+\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 25,
    "bugNodeStartChar": 875,
    "bugNodeLength": 39,
    "fixLineNum": 25,
    "fixNodeStartChar": 875,
    "fixNodeLength": 45,
    "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)",
    "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3d3e4c90f6e07eb007fbe2b88567cf911ff11a36",
    "fixCommitParentSHA1": "1b4e30ac3b74f2fa10072070764a6258a0810fa6",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\nindex 9d38482..3ef5569 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n@@ -281,7 +281,7 @@\n \t\t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\t\n \t\t\tif (endpoint == null){\n-\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\t\tcontinue;\n \t\t\t}\n \t\n@@ -377,7 +377,7 @@\n \t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\n \t\tif (endpoint == null){\n-\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\treturn;\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 284,
    "bugNodeStartChar": 11590,
    "bugNodeLength": 115,
    "fixLineNum": 284,
    "fixNodeStartChar": 11590,
    "fixNodeLength": 117,
    "sourceBeforeFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpoint,this.getNode().getNodeId())",
    "sourceAfterFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpointId,this.getNode().getNodeId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3d3e4c90f6e07eb007fbe2b88567cf911ff11a36",
    "fixCommitParentSHA1": "1b4e30ac3b74f2fa10072070764a6258a0810fa6",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\nindex 9d38482..3ef5569 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n@@ -281,7 +281,7 @@\n \t\t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\t\n \t\t\tif (endpoint == null){\n-\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\t\tcontinue;\n \t\t\t}\n \t\n@@ -377,7 +377,7 @@\n \t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\n \t\tif (endpoint == null){\n-\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\treturn;\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 380,
    "bugNodeStartChar": 15582,
    "bugNodeLength": 115,
    "fixLineNum": 380,
    "fixNodeStartChar": 15582,
    "fixNodeLength": 117,
    "sourceBeforeFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpoint,this.getNode().getNodeId())",
    "sourceAfterFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpointId,this.getNode().getNodeId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ae4306077fa74cd401217e22db96605f060d7a3d",
    "fixCommitParentSHA1": "a626fc33dd81e3a777c175bf20b63f9ecfec225c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\nindex 9d38482..3ef5569 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n@@ -281,7 +281,7 @@\n \t\t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\t\n \t\t\tif (endpoint == null){\n-\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\t\tcontinue;\n \t\t\t}\n \t\n@@ -377,7 +377,7 @@\n \t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\n \t\tif (endpoint == null){\n-\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\treturn;\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 284,
    "bugNodeStartChar": 11590,
    "bugNodeLength": 115,
    "fixLineNum": 284,
    "fixNodeStartChar": 11590,
    "fixNodeLength": 117,
    "sourceBeforeFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpoint,this.getNode().getNodeId())",
    "sourceAfterFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpointId,this.getNode().getNodeId())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "ae4306077fa74cd401217e22db96605f060d7a3d",
    "fixCommitParentSHA1": "a626fc33dd81e3a777c175bf20b63f9ecfec225c",
    "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\nindex 9d38482..3ef5569 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java\n@@ -281,7 +281,7 @@\n \t\t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\t\n \t\t\tif (endpoint == null){\n-\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\t\tcontinue;\n \t\t\t}\n \t\n@@ -377,7 +377,7 @@\n \t\tZWaveEndpoint endpoint = this.endpoints.get(endpointId);\n \t\t\n \t\tif (endpoint == null){\n-\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpoint, this.getNode().getNodeId());\n+\t\t\tlogger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\", endpointId, this.getNode().getNodeId());\n \t\t\treturn;\n \t\t}\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 380,
    "bugNodeStartChar": 15582,
    "bugNodeLength": 115,
    "fixLineNum": 380,
    "fixNodeStartChar": 15582,
    "fixNodeLength": 117,
    "sourceBeforeFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpoint,this.getNode().getNodeId())",
    "sourceAfterFix": "logger.error(\"Endpoint {} not found on node {}. Cannot set command classes.\",endpointId,this.getNode().getNodeId())"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "39a8ea967e9f35cb5eab811c5d7d4d8451be747d",
    "fixCommitParentSHA1": "004798452cd63397d4c16421e2b77e90d503d943",
    "bugFilePath": "bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationUDPConnector.java",
    "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationUDPConnector.java b/bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationUDPConnector.java\nindex 7493576..6e23814 100644\n--- a/bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationUDPConnector.java\n+++ b/bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationUDPConnector.java\n@@ -74,7 +74,7 @@\n \t@Override\n \tpublic void disconnect() throws SwegonVentilationException {\n \n-\t\tif (socket == null) {\n+\t\tif (socket != null) {\n \t\t\tsocket.close();\n \t\t\tsocket = null;\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 77,
    "bugNodeStartChar": 2369,
    "bugNodeLength": 14,
    "fixLineNum": 77,
    "fixNodeStartChar": 2369,
    "fixNodeLength": 14,
    "sourceBeforeFix": "socket == null",
    "sourceAfterFix": "socket != null"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "9a55fc5fadf79bfccbb6e8cf7264e52e9f9aacb6",
    "fixCommitParentSHA1": "b3c09231a9326a55fc6dbafa02c69fc839f6b0ae",
    "bugFilePath": "bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java",
    "fixPatch": "diff --git a/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java b/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java\nindex e723e5f..b9fb350 100644\n--- a/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java\n+++ b/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java\n@@ -106,7 +106,7 @@\n \tprivate static CULHandler createNewHandler(String deviceName, CULMode mode) throws CULDeviceException {\n \t\tString deviceType = getPrefix(deviceName);\n \t\tString deviceAddress = getRawDeviceName(deviceName);\n-\t\tlogger.debug(\"Searching class for device type \" + deviceAddress);\n+\t\tlogger.debug(\"Searching class for device type \" + deviceType);\n \t\tClass<? extends CULHandler> culHandlerclass = deviceTypeClasses.get(deviceType);\n \t\tif (culHandlerclass == null) {\n \t\t\tthrow new CULDeviceException(\"No class for the device type \" + deviceType + \" is registred\");\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 109,
    "bugNodeStartChar": 3712,
    "bugNodeLength": 50,
    "fixLineNum": 109,
    "fixNodeStartChar": 3712,
    "fixNodeLength": 47,
    "sourceBeforeFix": "\"Searching class for device type \" + deviceAddress",
    "sourceAfterFix": "\"Searching class for device type \" + deviceType"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "9a55fc5fadf79bfccbb6e8cf7264e52e9f9aacb6",
    "fixCommitParentSHA1": "b3c09231a9326a55fc6dbafa02c69fc839f6b0ae",
    "bugFilePath": "bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java",
    "fixPatch": "diff --git a/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java b/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java\nindex e723e5f..b9fb350 100644\n--- a/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java\n+++ b/bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java\n@@ -106,7 +106,7 @@\n \tprivate static CULHandler createNewHandler(String deviceName, CULMode mode) throws CULDeviceException {\n \t\tString deviceType = getPrefix(deviceName);\n \t\tString deviceAddress = getRawDeviceName(deviceName);\n-\t\tlogger.debug(\"Searching class for device type \" + deviceAddress);\n+\t\tlogger.debug(\"Searching class for device type \" + deviceType);\n \t\tClass<? extends CULHandler> culHandlerclass = deviceTypeClasses.get(deviceType);\n \t\tif (culHandlerclass == null) {\n \t\t\tthrow new CULDeviceException(\"No class for the device type \" + deviceType + \" is registred\");\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 109,
    "bugNodeStartChar": 3712,
    "bugNodeLength": 50,
    "fixLineNum": 109,
    "fixNodeStartChar": 3712,
    "fixNodeLength": 47,
    "sourceBeforeFix": "\"Searching class for device type \" + deviceAddress",
    "sourceAfterFix": "\"Searching class for device type \" + deviceType"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "08d6809933b9ad51cba7731ec5de7e35857e9b22",
    "fixCommitParentSHA1": "fab036055d985cabb131154ee428c4795520f736",
    "bugFilePath": "bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java",
    "fixPatch": "diff --git a/bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java b/bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java\nindex 963aa60..2268064 100644\n--- a/bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java\n+++ b/bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java\n@@ -143,7 +143,7 @@\n \t */\n \t@Override\n \tpublic Collection<Item> getItems() {\n-\t\tSet<Item> items = new HashSet<Item>();\n+\t\tList<Item> items = new ArrayList<Item>();\n \t\tfor (String name : modelRepository.getAllModelNamesOfType(\"items\")) {\n \t\t\titems.addAll(getItemsFromModel(name));\n \t\t}\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 146,
    "bugNodeStartChar": 5090,
    "bugNodeLength": 9,
    "fixLineNum": 146,
    "fixNodeStartChar": 5090,
    "fixNodeLength": 10,
    "sourceBeforeFix": "Set<Item>",
    "sourceAfterFix": "List<Item>"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "2ead92b6588f9d07196630db46d350636fe40efd",
    "fixCommitParentSHA1": "8aa9c2d2aa45cd2f9e113d835c457856420009fe",
    "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java\nindex 1e1c8ac..09d9807 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java\n@@ -161,7 +161,7 @@\n \t\t\n \t\t@Override\n \t\tpublic void run() {\n-\t\t\tlogger.debug(getName() + \" has been started\");\n+\t\t\tlogger.info(getName() + \" has been started\");\n \t\t\t\n \t\t\twhile (!shutdown) {\n \t\t\t\ttry {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 164,
    "bugNodeStartChar": 4261,
    "bugNodeLength": 45,
    "fixLineNum": 164,
    "fixNodeStartChar": 4261,
    "fixNodeLength": 44,
    "sourceBeforeFix": "logger.debug(getName() + \" has been started\")",
    "sourceAfterFix": "logger.info(getName() + \" has been started\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2ead92b6588f9d07196630db46d350636fe40efd",
    "fixCommitParentSHA1": "8aa9c2d2aa45cd2f9e113d835c457856420009fe",
    "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java\nindex 1e1c8ac..09d9807 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java\n@@ -161,7 +161,7 @@\n \t\t\n \t\t@Override\n \t\tpublic void run() {\n-\t\t\tlogger.debug(getName() + \" has been started\");\n+\t\t\tlogger.info(getName() + \" has been started\");\n \t\t\t\n \t\t\twhile (!shutdown) {\n \t\t\t\ttry {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 164,
    "bugNodeStartChar": 4261,
    "bugNodeLength": 45,
    "fixLineNum": 164,
    "fixNodeStartChar": 4261,
    "fixNodeLength": 44,
    "sourceBeforeFix": "logger.debug(getName() + \" has been started\")",
    "sourceAfterFix": "logger.info(getName() + \" has been started\")"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "41e1d069bfa275a85a4a963c2ec5f437570f76f4",
    "fixCommitParentSHA1": "c739a779b8f03cc21665d1f0d877de62ffaabc9f",
    "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\nindex ff0bf09..d1f8242 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n@@ -194,7 +194,7 @@\n \t\t\t}\n \t\t}\n \n-\t\tCollection<Item> items = Collections.synchronizedCollection(new HashSet<Item>());\n+\t\tCollection<Item> items = Collections.synchronizedCollection(new ArrayList<Item>());\n \t\titemMap.put(provider, items);\n \n \t\tfor(Item item : provider.getItems()) {\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 197,
    "bugNodeStartChar": 6911,
    "bugNodeLength": 13,
    "fixLineNum": 197,
    "fixNodeStartChar": 6911,
    "fixNodeLength": 15,
    "sourceBeforeFix": "HashSet<Item>",
    "sourceAfterFix": "ArrayList<Item>"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "fixCommitSHA1": "d819e4c0748aad7ed80b002b21b0ad8dad2d54b0",
    "fixCommitParentSHA1": "f6f255838943dfb92c0ed6fac973428ece6723ee",
    "bugFilePath": "bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java",
    "fixPatch": "diff --git a/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java b/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java\nindex 42d5874..dec4d1b 100644\n--- a/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java\n+++ b/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java\n@@ -190,7 +190,7 @@\n \t\t\t\n \t\t\t// and now the rules, which only want to see state changes\n \t\t\tif(triggerManager!=null) {\n-\t\t\t\tIterable<Rule> rules = triggerManager.getRules(CHANGE, item, newState, oldState);\n+\t\t\t\tIterable<Rule> rules = triggerManager.getRules(CHANGE, item, oldState, newState);\n \t\t\t\tRuleEvaluationContext context = new RuleEvaluationContext();\n \t\t\t\tcontext.newValue(QualifiedName.create(RuleContextHelper.VAR_PREVIOUS_STATE), oldState);\n \t\t\t\texecuteRules(rules, context);\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 193,
    "bugNodeStartChar": 6563,
    "bugNodeLength": 57,
    "fixLineNum": 193,
    "fixNodeStartChar": 6563,
    "fixNodeLength": 57,
    "sourceBeforeFix": "triggerManager.getRules(CHANGE,item,newState,oldState)",
    "sourceAfterFix": "triggerManager.getRules(CHANGE,item,oldState,newState)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "73a9aed3e2382dff82904b83f1ceb3fa52484889",
    "fixCommitParentSHA1": "2e2b5fe965e1f91c93cfe841ef58c143fc80129d",
    "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java",
    "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java\nindex 9512de6..acf2ea5 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java\n@@ -117,7 +117,7 @@\n \t\tnotifyListeners(oldState, state);\n \t}\n \n-\tprivate void notifyListeners(State oldState, State newState) {\n+\tprivate synchronized void notifyListeners(State oldState, State newState) {\n \t\t// if nothing has changed, we do not need to send notifications\n \t\tif(oldState.equals(newState)) return;\n \t\t\n",
    "projectName": "openhab.openhab",
    "bugLineNum": 120,
    "bugNodeStartChar": 3105,
    "bugNodeLength": 280,
    "fixLineNum": 120,
    "fixNodeStartChar": 3105,
    "fixNodeLength": 293,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "34"
  },
  {
    "bugType": "CHANGE_OPERATOR",
    "fixCommitSHA1": "a5383d4f1932c9d50861d57676bbfe5767a9eb1e",
    "fixCommitParentSHA1": "3ebf96a23fa4527ee7d1383849c557a7f9905ef4",
    "bugFilePath": "openhab-runtime/core/core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java",
    "fixPatch": "diff --git a/openhab-runtime/core/core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java b/openhab-runtime/core/core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java\nindex 1163ad7..d39f500 100644\n--- a/openhab-runtime/core/core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java\n+++ b/openhab-runtime/core/core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java\n@@ -37,16 +37,16 @@\n \t\tString topic = event.getTopic();\n \t\tString[] topicParts = topic.split(TOPIC_SEPERATOR);\n \t\t\n-\t\tif(!(topicParts.length > 2) && !topicParts[0].equals(TOPIC_PREFIX)) {\n+\t\tif(!(topicParts.length > 2) || !topicParts[0].equals(TOPIC_PREFIX)) {\n \t\t\treturn; // we have received an event with an invalid topic\n \t\t}\n \t\tString operation = topicParts[1];\n \t\t\n-\t\tif(operation.equals(EventType.UPDATE)) {\n+\t\tif(operation.equals(EventType.UPDATE.toString())) {\n \t\t\tState newState = (State) event.getProperty(\"state\");\n \t\t\tif(newState!=null) receiveUpdate(itemName, newState);\n \t\t}\n-\t\tif(operation.equals(EventType.COMMAND)) {\n+\t\tif(operation.equals(EventType.COMMAND.toString())) {\n \t\t\tCommand command = (Command) event.getProperty(\"command\");\n \t\t\tif(command!=null) receiveCommand(itemName, command);\n \t\t}\n@@ -56,7 +56,7 @@\n \t\t// default implementation: do nothing\n \t}\n \n-\tpublic void receiveUpdate(String itemName, State newStatus) {\n+\tpublic void receiveUpdate(String itemName, State newState) {\n \t\t// default implementation: do nothing\n \t}\n \n",
    "projectName": "openhab.openhab",
    "bugLineNum": 40,
    "bugNodeStartChar": 1475,
    "bugNodeLength": 63,
    "fixLineNum": 40,
    "fixNodeStartChar": 1475,
    "fixNodeLength": 63,
    "sourceBeforeFix": "!(topicParts.length > 2) && !topicParts[0].equals(TOPIC_PREFIX)",
    "sourceAfterFix": "!(topicParts.length > 2) || !topicParts[0].equals(TOPIC_PREFIX)"
  }
]