[{"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "fixCommitParentSHA1": "172d142332fe8c6c4e15e220f99424a653fce958", "bugFilePath": "guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java", "fixPatch": "diff --git a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\nindex a828630..e54586b 100644\n--- a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n+++ b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n@@ -48,7 +48,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }\n@@ -62,7 +62,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }\n@@ -76,7 +76,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }\n@@ -90,7 +90,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }\n@@ -121,29 +121,29 @@\n         assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)));\n     }\n \n-    static class CustomInjectorSource implements InjectorSource {\n+    public static class CustomInjectorSource implements InjectorSource {\n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class PrivateConstructor implements InjectorSource {\n+    public static class PrivateConstructor implements InjectorSource {\n         private PrivateConstructor() {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class NoDefaultConstructor implements InjectorSource {\n+    public static class NoDefaultConstructor implements InjectorSource {\n         private NoDefaultConstructor(String someParameter) {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 124, "bugNodeStartChar": 7066, "bugNodeLength": 153, "fixLineNum": 124, "fixNodeStartChar": 7066, "fixNodeLength": 160, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "fixCommitParentSHA1": "172d142332fe8c6c4e15e220f99424a653fce958", "bugFilePath": "guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java", "fixPatch": "diff --git a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\nindex a828630..e54586b 100644\n--- a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n+++ b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n@@ -48,7 +48,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }\n@@ -62,7 +62,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }\n@@ -76,7 +76,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }\n@@ -90,7 +90,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }\n@@ -121,29 +121,29 @@\n         assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)));\n     }\n \n-    static class CustomInjectorSource implements InjectorSource {\n+    public static class CustomInjectorSource implements InjectorSource {\n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class PrivateConstructor implements InjectorSource {\n+    public static class PrivateConstructor implements InjectorSource {\n         private PrivateConstructor() {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class NoDefaultConstructor implements InjectorSource {\n+    public static class NoDefaultConstructor implements InjectorSource {\n         private NoDefaultConstructor(String someParameter) {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 125, "bugNodeStartChar": 7136, "bugNodeLength": 77, "fixLineNum": 125, "fixNodeStartChar": 7136, "fixNodeLength": 84, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "fixCommitParentSHA1": "172d142332fe8c6c4e15e220f99424a653fce958", "bugFilePath": "guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java", "fixPatch": "diff --git a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\nindex a828630..e54586b 100644\n--- a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n+++ b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n@@ -48,7 +48,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }\n@@ -62,7 +62,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }\n@@ -76,7 +76,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }\n@@ -90,7 +90,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }\n@@ -121,29 +121,29 @@\n         assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)));\n     }\n \n-    static class CustomInjectorSource implements InjectorSource {\n+    public static class CustomInjectorSource implements InjectorSource {\n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class PrivateConstructor implements InjectorSource {\n+    public static class PrivateConstructor implements InjectorSource {\n         private PrivateConstructor() {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class NoDefaultConstructor implements InjectorSource {\n+    public static class NoDefaultConstructor implements InjectorSource {\n         private NoDefaultConstructor(String someParameter) {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 131, "bugNodeStartChar": 7225, "bugNodeLength": 201, "fixLineNum": 131, "fixNodeStartChar": 7225, "fixNodeLength": 208, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "fixCommitParentSHA1": "172d142332fe8c6c4e15e220f99424a653fce958", "bugFilePath": "guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java", "fixPatch": "diff --git a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\nindex a828630..e54586b 100644\n--- a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n+++ b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n@@ -48,7 +48,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }\n@@ -62,7 +62,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }\n@@ -76,7 +76,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }\n@@ -90,7 +90,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }\n@@ -121,29 +121,29 @@\n         assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)));\n     }\n \n-    static class CustomInjectorSource implements InjectorSource {\n+    public static class CustomInjectorSource implements InjectorSource {\n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class PrivateConstructor implements InjectorSource {\n+    public static class PrivateConstructor implements InjectorSource {\n         private PrivateConstructor() {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class NoDefaultConstructor implements InjectorSource {\n+    public static class NoDefaultConstructor implements InjectorSource {\n         private NoDefaultConstructor(String someParameter) {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 135, "bugNodeStartChar": 7343, "bugNodeLength": 77, "fixLineNum": 135, "fixNodeStartChar": 7343, "fixNodeLength": 84, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "fixCommitParentSHA1": "172d142332fe8c6c4e15e220f99424a653fce958", "bugFilePath": "guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java", "fixPatch": "diff --git a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\nindex a828630..e54586b 100644\n--- a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n+++ b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n@@ -48,7 +48,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }\n@@ -62,7 +62,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }\n@@ -76,7 +76,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }\n@@ -90,7 +90,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }\n@@ -121,29 +121,29 @@\n         assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)));\n     }\n \n-    static class CustomInjectorSource implements InjectorSource {\n+    public static class CustomInjectorSource implements InjectorSource {\n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class PrivateConstructor implements InjectorSource {\n+    public static class PrivateConstructor implements InjectorSource {\n         private PrivateConstructor() {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class NoDefaultConstructor implements InjectorSource {\n+    public static class NoDefaultConstructor implements InjectorSource {\n         private NoDefaultConstructor(String someParameter) {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 141, "bugNodeStartChar": 7432, "bugNodeLength": 225, "fixLineNum": 141, "fixNodeStartChar": 7432, "fixNodeLength": 232, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "fixCommitParentSHA1": "172d142332fe8c6c4e15e220f99424a653fce958", "bugFilePath": "guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java", "fixPatch": "diff --git a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\nindex a828630..e54586b 100644\n--- a/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n+++ b/guice/src/test/java/io/cucumber/guice/InjectorSourceFactoryTest.java\n@@ -48,7 +48,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }\n@@ -62,7 +62,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }\n@@ -76,7 +76,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }\n@@ -90,7 +90,7 @@\n         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n-            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n+            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }\n@@ -121,29 +121,29 @@\n         assertThat(injectorSourceFactory.create(), is(instanceOf(InjectorSource.class)));\n     }\n \n-    static class CustomInjectorSource implements InjectorSource {\n+    public static class CustomInjectorSource implements InjectorSource {\n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class PrivateConstructor implements InjectorSource {\n+    public static class PrivateConstructor implements InjectorSource {\n         private PrivateConstructor() {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n \n-    static class NoDefaultConstructor implements InjectorSource {\n+    public static class NoDefaultConstructor implements InjectorSource {\n         private NoDefaultConstructor(String someParameter) {\n         }\n \n         @Override\n-        Injector getInjector() {\n+        public Injector getInjector() {\n             return null;\n         }\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 145, "bugNodeStartChar": 7574, "bugNodeLength": 77, "fixLineNum": 145, "fixNodeStartChar": 7574, "fixNodeLength": 84, "sourceBeforeFix": "0", "sourceAfterFix": "1"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "6c19a595453278e38fdcda9cb82069802786fdfa", "fixCommitParentSHA1": "4e40c78b4089b8577ad3878f3e3decd46503ea50", "bugFilePath": "core/src/main/java/cucumber/runtime/filter/Filters.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/filter/Filters.java b/core/src/main/java/cucumber/runtime/filter/Filters.java\nindex 69c9d6f..d78d1f8 100644\n--- a/core/src/main/java/cucumber/runtime/filter/Filters.java\n+++ b/core/src/main/java/cucumber/runtime/filter/Filters.java\n@@ -45,7 +45,7 @@\n     }\n     \n     public List<PickleEvent> limitPickleEvents(List<PickleEvent> pickleEvents) {\n-    \tif (count > pickleEvents.size() || count < 0) {\n+    \tif (count > pickleEvents.size() || count < 1) {\n     \t\treturn pickleEvents;\n     \t}\n \t\treturn pickleEvents.subList(0, count);\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 48, "bugNodeStartChar": 1449, "bugNodeLength": 9, "fixLineNum": 48, "fixNodeStartChar": 1449, "fixNodeLength": 9, "sourceBeforeFix": "count < 0", "sourceAfterFix": "count < 1"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "3a43350b65b5008db72f366efa0be7685056d111", "fixCommitParentSHA1": "e97febeab6f6d8b432839ca2e48a3796bd4237da", "bugFilePath": "core/src/main/java/cucumber/runtime/Runtime.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/Runtime.java b/core/src/main/java/cucumber/runtime/Runtime.java\nindex 9d549d9..9c34ddd 100644\n--- a/core/src/main/java/cucumber/runtime/Runtime.java\n+++ b/core/src/main/java/cucumber/runtime/Runtime.java\n@@ -59,7 +59,7 @@\n         this.classLoader = classLoader;\n         this.runtimeOptions = runtimeOptions;\n         final Glue glue;\n-        glue = optionalGlue == null ? new RuntimeGlue(new LocalizedXStreams(classLoader)) : optionalGlue;\n+        glue = optionalGlue == null ? new RuntimeGlue(new LocalizedXStreams(classLoader, runtimeOptions.getConverters())) : optionalGlue;\n         this.stats = new Stats(runtimeOptions.isMonochrome());\n         this.bus = new EventBus(stopWatch);\n         this.runner = new Runner(glue, bus, backends, runtimeOptions);\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 62, "bugNodeStartChar": 2632, "bugNodeLength": 34, "fixLineNum": 62, "fixNodeStartChar": 2632, "fixNodeLength": 66, "sourceBeforeFix": "new LocalizedXStreams(classLoader)", "sourceAfterFix": "new LocalizedXStreams(classLoader,runtimeOptions.getConverters())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "be89d4bbdee130f230e6409b4851f4b20b5c873e", "fixCommitParentSHA1": "19f19e1590aaaae525149e162e0084aca587cfac", "bugFilePath": "core/src/main/java/cucumber/runtime/Runtime.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/Runtime.java b/core/src/main/java/cucumber/runtime/Runtime.java\nindex fb459d6..1e6399c 100644\n--- a/core/src/main/java/cucumber/runtime/Runtime.java\n+++ b/core/src/main/java/cucumber/runtime/Runtime.java\n@@ -86,12 +86,12 @@\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, Glue optionalGlue) {\n         this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, TimeService stopWatch, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, TimeService stopWatch, Glue optionalGlue) {\n         if (backends.isEmpty()) {\n             throw new CucumberException(\"No backends were found. Please make sure you have a backend module on your CLASSPATH.\");\n         }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 89, "bugNodeStartChar": 3358, "bugNodeLength": 24, "fixLineNum": 89, "fixNodeStartChar": 3358, "fixNodeLength": 17, "sourceBeforeFix": "RuntimeGlue optionalGlue", "sourceAfterFix": "Glue optionalGlue"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "be89d4bbdee130f230e6409b4851f4b20b5c873e", "fixCommitParentSHA1": "19f19e1590aaaae525149e162e0084aca587cfac", "bugFilePath": "core/src/main/java/cucumber/runtime/Runtime.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/Runtime.java b/core/src/main/java/cucumber/runtime/Runtime.java\nindex fb459d6..1e6399c 100644\n--- a/core/src/main/java/cucumber/runtime/Runtime.java\n+++ b/core/src/main/java/cucumber/runtime/Runtime.java\n@@ -86,12 +86,12 @@\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, Glue optionalGlue) {\n         this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, TimeService stopWatch, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, TimeService stopWatch, Glue optionalGlue) {\n         if (backends.isEmpty()) {\n             throw new CucumberException(\"No backends were found. Please make sure you have a backend module on your CLASSPATH.\");\n         }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 94, "bugNodeStartChar": 3684, "bugNodeLength": 24, "fixLineNum": 94, "fixNodeStartChar": 3684, "fixNodeLength": 17, "sourceBeforeFix": "RuntimeGlue optionalGlue", "sourceAfterFix": "Glue optionalGlue"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "89fc7248e8d0a2ba5a7f8ce300b5519e9c6570da", "fixCommitParentSHA1": "19f19e1590aaaae525149e162e0084aca587cfac", "bugFilePath": "core/src/main/java/cucumber/runtime/Runtime.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/Runtime.java b/core/src/main/java/cucumber/runtime/Runtime.java\nindex fb459d6..1e6399c 100644\n--- a/core/src/main/java/cucumber/runtime/Runtime.java\n+++ b/core/src/main/java/cucumber/runtime/Runtime.java\n@@ -86,12 +86,12 @@\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, Glue optionalGlue) {\n         this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, TimeService stopWatch, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, TimeService stopWatch, Glue optionalGlue) {\n         if (backends.isEmpty()) {\n             throw new CucumberException(\"No backends were found. Please make sure you have a backend module on your CLASSPATH.\");\n         }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 89, "bugNodeStartChar": 3358, "bugNodeLength": 24, "fixLineNum": 89, "fixNodeStartChar": 3358, "fixNodeLength": 17, "sourceBeforeFix": "RuntimeGlue optionalGlue", "sourceAfterFix": "Glue optionalGlue"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "89fc7248e8d0a2ba5a7f8ce300b5519e9c6570da", "fixCommitParentSHA1": "19f19e1590aaaae525149e162e0084aca587cfac", "bugFilePath": "core/src/main/java/cucumber/runtime/Runtime.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/Runtime.java b/core/src/main/java/cucumber/runtime/Runtime.java\nindex fb459d6..1e6399c 100644\n--- a/core/src/main/java/cucumber/runtime/Runtime.java\n+++ b/core/src/main/java/cucumber/runtime/Runtime.java\n@@ -86,12 +86,12 @@\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, Glue optionalGlue) {\n         this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);\n     }\n \n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n-                   RuntimeOptions runtimeOptions, TimeService stopWatch, RuntimeGlue optionalGlue) {\n+                   RuntimeOptions runtimeOptions, TimeService stopWatch, Glue optionalGlue) {\n         if (backends.isEmpty()) {\n             throw new CucumberException(\"No backends were found. Please make sure you have a backend module on your CLASSPATH.\");\n         }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 94, "bugNodeStartChar": 3684, "bugNodeLength": 24, "fixLineNum": 94, "fixNodeStartChar": 3684, "fixNodeLength": 17, "sourceBeforeFix": "RuntimeGlue optionalGlue", "sourceAfterFix": "Glue optionalGlue"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "ce2c783a1942c292994e256283b7e7ec03c08d01", "fixCommitParentSHA1": "25a0b258d08b071ddf720f734a6ce08f9ec3ebd5", "bugFilePath": "examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java", "fixPatch": "diff --git a/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java b/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java\nindex 61996ce..35a0a22 100644\n--- a/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java\n+++ b/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java\n@@ -34,7 +34,7 @@\n     private static final Thread CLOSE_THREAD = new Thread() {\n         @Override\n         public void run() {\n-            REAL_DRIVER.close();\n+            REAL_DRIVER.quit();\n         }\n     };\n \n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 37, "bugNodeStartChar": 1664, "bugNodeLength": 19, "fixLineNum": 37, "fixNodeStartChar": 1664, "fixNodeLength": 18, "sourceBeforeFix": "REAL_DRIVER.close()", "sourceAfterFix": "REAL_DRIVER.quit()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "ce2c783a1942c292994e256283b7e7ec03c08d01", "fixCommitParentSHA1": "25a0b258d08b071ddf720f734a6ce08f9ec3ebd5", "bugFilePath": "examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java", "fixPatch": "diff --git a/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java b/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java\nindex 61996ce..35a0a22 100644\n--- a/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java\n+++ b/examples/java-webbit-websockets-selenium/src/test/java/cucumber/examples/java/websockets/SharedDriver.java\n@@ -34,7 +34,7 @@\n     private static final Thread CLOSE_THREAD = new Thread() {\n         @Override\n         public void run() {\n-            REAL_DRIVER.close();\n+            REAL_DRIVER.quit();\n         }\n     };\n \n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 37, "bugNodeStartChar": 1664, "bugNodeLength": 19, "fixLineNum": 37, "fixNodeStartChar": 1664, "fixNodeLength": 18, "sourceBeforeFix": "REAL_DRIVER.close()", "sourceAfterFix": "REAL_DRIVER.quit()"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "fixCommitParentSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "bugFilePath": "core/src/main/java/cucumber/runtime/LinePredicate.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/LinePredicate.java b/core/src/main/java/cucumber/runtime/LinePredicate.java\nindex 042dfed..e9e5069 100644\n--- a/core/src/main/java/cucumber/runtime/LinePredicate.java\n+++ b/core/src/main/java/cucumber/runtime/LinePredicate.java\n@@ -17,7 +17,7 @@\n     public boolean apply(PickleEvent pickleEvent) {\n         String picklePath = pickleEvent.uri;\n         if (!lineFilters.containsKey(picklePath)) {\n-            return false;\n+            return true;\n         }\n         for (Long line : lineFilters.get(picklePath)) {\n             for (PickleLocation location : pickleEvent.pickle.getLocations()) {\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 20, "bugNodeStartChar": 540, "bugNodeLength": 13, "fixLineNum": 20, "fixNodeStartChar": 540, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "fixCommitParentSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "bugFilePath": "core/src/test/java/cucumber/runtime/LinePredicateTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/LinePredicateTest.java b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\nindex c63ffd4..414cc53 100644\n--- a/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n+++ b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n@@ -22,11 +22,14 @@\n     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n \n     @Test\n-    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n+    public void matches_pickles_from_files_not_in_the_predicate_map() {\n+        // the argument \"path/file.feature another_path/file.feature:8\"\n+        // results in only line predicates only for another_path/file.feature,\n+        // but all pickles from path/file.feature shall also be executed.\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n-        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n+        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n \n-        assertFalse(predicate.apply(pickleEvent));\n+        assertTrue(predicate.apply(pickleEvent));\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 27, "bugNodeStartChar": 1067, "bugNodeLength": 10, "fixLineNum": 27, "fixNodeStartChar": 1067, "fixNodeLength": 10, "sourceBeforeFix": "asList(4L)", "sourceAfterFix": "asList(8L)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "fixCommitParentSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "bugFilePath": "core/src/test/java/cucumber/runtime/LinePredicateTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/LinePredicateTest.java b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\nindex c63ffd4..414cc53 100644\n--- a/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n+++ b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n@@ -22,11 +22,14 @@\n     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n \n     @Test\n-    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n+    public void matches_pickles_from_files_not_in_the_predicate_map() {\n+        // the argument \"path/file.feature another_path/file.feature:8\"\n+        // results in only line predicates only for another_path/file.feature,\n+        // but all pickles from path/file.feature shall also be executed.\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n-        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n+        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n \n-        assertFalse(predicate.apply(pickleEvent));\n+        assertTrue(predicate.apply(pickleEvent));\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 29, "bugNodeStartChar": 1090, "bugNodeLength": 41, "fixLineNum": 29, "fixNodeStartChar": 1090, "fixNodeLength": 40, "sourceBeforeFix": "assertFalse(predicate.apply(pickleEvent))", "sourceAfterFix": "assertTrue(predicate.apply(pickleEvent))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "fixCommitParentSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "bugFilePath": "core/src/test/java/cucumber/runtime/LinePredicateTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/LinePredicateTest.java b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\nindex c63ffd4..414cc53 100644\n--- a/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n+++ b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n@@ -22,11 +22,14 @@\n     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n \n     @Test\n-    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n+    public void matches_pickles_from_files_not_in_the_predicate_map() {\n+        // the argument \"path/file.feature another_path/file.feature:8\"\n+        // results in only line predicates only for another_path/file.feature,\n+        // but all pickles from path/file.feature shall also be executed.\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n-        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n+        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n \n-        assertFalse(predicate.apply(pickleEvent));\n+        assertTrue(predicate.apply(pickleEvent));\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 29, "bugNodeStartChar": 1090, "bugNodeLength": 41, "fixLineNum": 29, "fixNodeStartChar": 1090, "fixNodeLength": 40, "sourceBeforeFix": "assertFalse(predicate.apply(pickleEvent))", "sourceAfterFix": "assertTrue(predicate.apply(pickleEvent))"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "fixCommitParentSHA1": "ac1b21404584a2f205c3c6e9f30fc486fd300c1f", "bugFilePath": "core/src/main/java/cucumber/runtime/LinePredicate.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/LinePredicate.java b/core/src/main/java/cucumber/runtime/LinePredicate.java\nindex e9e5069..042dfed 100644\n--- a/core/src/main/java/cucumber/runtime/LinePredicate.java\n+++ b/core/src/main/java/cucumber/runtime/LinePredicate.java\n@@ -17,7 +17,7 @@\n     public boolean apply(PickleEvent pickleEvent) {\n         String picklePath = pickleEvent.uri;\n         if (!lineFilters.containsKey(picklePath)) {\n-            return true;\n+            return false;\n         }\n         for (Long line : lineFilters.get(picklePath)) {\n             for (PickleLocation location : pickleEvent.pickle.getLocations()) {\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 20, "bugNodeStartChar": 540, "bugNodeLength": 12, "fixLineNum": 20, "fixNodeStartChar": 540, "fixNodeLength": 13, "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "fixCommitParentSHA1": "ac1b21404584a2f205c3c6e9f30fc486fd300c1f", "bugFilePath": "core/src/test/java/cucumber/runtime/LinePredicateTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/LinePredicateTest.java b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\nindex e67e154..c63ffd4 100644\n--- a/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n+++ b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n@@ -22,11 +22,11 @@\n     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n \n     @Test\n-    public void matches_pickles_from_files_not_in_the_predicate_map() {\n+    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n-        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n+        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n \n-        assertTrue(predicate.apply(pickleEvent));\n+        assertFalse(predicate.apply(pickleEvent));\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 27, "bugNodeStartChar": 1060, "bugNodeLength": 10, "fixLineNum": 27, "fixNodeStartChar": 1060, "fixNodeLength": 10, "sourceBeforeFix": "asList(8L)", "sourceAfterFix": "asList(4L)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "fixCommitParentSHA1": "ac1b21404584a2f205c3c6e9f30fc486fd300c1f", "bugFilePath": "core/src/test/java/cucumber/runtime/LinePredicateTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/LinePredicateTest.java b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\nindex e67e154..c63ffd4 100644\n--- a/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n+++ b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n@@ -22,11 +22,11 @@\n     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n \n     @Test\n-    public void matches_pickles_from_files_not_in_the_predicate_map() {\n+    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n-        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n+        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n \n-        assertTrue(predicate.apply(pickleEvent));\n+        assertFalse(predicate.apply(pickleEvent));\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 29, "bugNodeStartChar": 1083, "bugNodeLength": 40, "fixLineNum": 29, "fixNodeStartChar": 1083, "fixNodeLength": 41, "sourceBeforeFix": "assertTrue(predicate.apply(pickleEvent))", "sourceAfterFix": "assertFalse(predicate.apply(pickleEvent))"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "fixCommitParentSHA1": "ac1b21404584a2f205c3c6e9f30fc486fd300c1f", "bugFilePath": "core/src/test/java/cucumber/runtime/LinePredicateTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/LinePredicateTest.java b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\nindex e67e154..c63ffd4 100644\n--- a/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n+++ b/core/src/test/java/cucumber/runtime/LinePredicateTest.java\n@@ -22,11 +22,11 @@\n     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n \n     @Test\n-    public void matches_pickles_from_files_not_in_the_predicate_map() {\n+    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n-        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n+        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n \n-        assertTrue(predicate.apply(pickleEvent));\n+        assertFalse(predicate.apply(pickleEvent));\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 29, "bugNodeStartChar": 1083, "bugNodeLength": 40, "fixLineNum": 29, "fixNodeStartChar": 1083, "fixNodeLength": 41, "sourceBeforeFix": "assertTrue(predicate.apply(pickleEvent))", "sourceAfterFix": "assertFalse(predicate.apply(pickleEvent))"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "44222d8bd493110bbf925c97d68abf40e0a1b31f", "fixCommitParentSHA1": "65f8e59dd5e58a19e61011868b0f47efd905146f", "bugFilePath": "guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java", "fixPatch": "diff --git a/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java b/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java\nindex 171b99c..59c4dbc 100644\n--- a/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java\n+++ b/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java\n@@ -38,7 +38,7 @@\n \n     private InjectorSource instantiateUserSpecifiedInjectorSource(String injectorSourceClassName) {\n         try {\n-            return (InjectorSource) Class.forName(injectorSourceClassName).newInstance();\n+            return (InjectorSource) Class.forName(injectorSourceClassName, true, Thread.currentThread().getContextClassLoader()).newInstance();\n         } catch (Exception e) {\n             String message = format(\"Instantiation of ''{0}'' failed. Check the caused by exception and ensure your\" +\n                     \"InjectorSource implementation is accessible and has a public zero args constructor.\",\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 41, "bugNodeStartChar": 1375, "bugNodeLength": 38, "fixLineNum": 41, "fixNodeStartChar": 1375, "fixNodeLength": 92, "sourceBeforeFix": "Class.forName(injectorSourceClassName)", "sourceAfterFix": "Class.forName(injectorSourceClassName,true,Thread.currentThread().getContextClassLoader())"}, {"bugType": "OVERLOAD_METHOD_DELETED_ARGS", "fixCommitSHA1": "13ba17a0c8943487fec8ae9bda7ef1b5db143d4a", "fixCommitParentSHA1": "ac35eea6c7109e604af93ab8c741fc6f0bb1f7cb", "bugFilePath": "examples/pax-exam/calculator-test/src/test/java/cucumber/examples/java/paxexam/test/CalculatorTest.java", "fixPatch": "diff --git a/examples/pax-exam/calculator-test/src/test/java/cucumber/examples/java/paxexam/test/CalculatorTest.java b/examples/pax-exam/calculator-test/src/test/java/cucumber/examples/java/paxexam/test/CalculatorTest.java\nindex 346d11e..d76a41a 100644\n--- a/examples/pax-exam/calculator-test/src/test/java/cucumber/examples/java/paxexam/test/CalculatorTest.java\n+++ b/examples/pax-exam/calculator-test/src/test/java/cucumber/examples/java/paxexam/test/CalculatorTest.java\n@@ -53,7 +53,7 @@\n             mavenBundle(\"info.cukes\", \"pax-exam-calculator-service\"),\n \n             mavenBundle(\"info.cukes\", \"gherkin\"),\n-            mavenBundle(\"info.cukes\", \"cucumber-jvm-deps\", \"1.0.4-SNAPSHOT\"),\n+            mavenBundle(\"info.cukes\", \"cucumber-jvm-deps\"),\n             mavenBundle(\"info.cukes\", \"cucumber-core\"),\n             mavenBundle(\"info.cukes\", \"cucumber-java\"),\n             mavenBundle(\"info.cukes\", \"cucumber-osgi\"),\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 56, "bugNodeStartChar": 1789, "bugNodeLength": 64, "fixLineNum": 56, "fixNodeStartChar": 1789, "fixNodeLength": 46, "sourceBeforeFix": "mavenBundle(\"info.cukes\",\"cucumber-jvm-deps\",\"1.0.4-SNAPSHOT\")", "sourceAfterFix": "mavenBundle(\"info.cukes\",\"cucumber-jvm-deps\")"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "fixCommitParentSHA1": "462bc816369822d38dfc34c164fdbe1ac2461e6f", "bugFilePath": "junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java", "fixPatch": "diff --git a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\nindex b26310c..604d4f8 100644\n--- a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n+++ b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n@@ -113,7 +113,7 @@\n         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n \n-        assertFalse(runtimeOptions.isMonochrome());\n+        assertTrue(runtimeOptions.isMonochrome());\n     }\n \n \n@@ -166,12 +166,12 @@\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = false)\n+    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = true)\n+    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n         // empty\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 116, "bugNodeStartChar": 4631, "bugNodeLength": 42, "fixLineNum": 116, "fixNodeStartChar": 4631, "fixNodeLength": 41, "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "fixCommitParentSHA1": "462bc816369822d38dfc34c164fdbe1ac2461e6f", "bugFilePath": "junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java", "fixPatch": "diff --git a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\nindex b26310c..604d4f8 100644\n--- a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n+++ b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n@@ -113,7 +113,7 @@\n         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n \n-        assertFalse(runtimeOptions.isMonochrome());\n+        assertTrue(runtimeOptions.isMonochrome());\n     }\n \n \n@@ -166,12 +166,12 @@\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = false)\n+    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = true)\n+    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n         // empty\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 116, "bugNodeStartChar": 4631, "bugNodeLength": 42, "fixLineNum": 116, "fixNodeStartChar": 4631, "fixNodeLength": 41, "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "fixCommitParentSHA1": "462bc816369822d38dfc34c164fdbe1ac2461e6f", "bugFilePath": "junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java", "fixPatch": "diff --git a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\nindex b26310c..604d4f8 100644\n--- a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n+++ b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n@@ -113,7 +113,7 @@\n         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n \n-        assertFalse(runtimeOptions.isMonochrome());\n+        assertTrue(runtimeOptions.isMonochrome());\n     }\n \n \n@@ -166,12 +166,12 @@\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = false)\n+    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = true)\n+    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n         // empty\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 169, "bugNodeStartChar": 5705, "bugNodeLength": 18, "fixLineNum": 169, "fixNodeStartChar": 5705, "fixNodeLength": 17, "sourceBeforeFix": "monochrome=false", "sourceAfterFix": "monochrome=true"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "fixCommitParentSHA1": "462bc816369822d38dfc34c164fdbe1ac2461e6f", "bugFilePath": "junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java", "fixPatch": "diff --git a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\nindex b26310c..604d4f8 100644\n--- a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n+++ b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n@@ -113,7 +113,7 @@\n         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n \n-        assertFalse(runtimeOptions.isMonochrome());\n+        assertTrue(runtimeOptions.isMonochrome());\n     }\n \n \n@@ -166,12 +166,12 @@\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = false)\n+    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = true)\n+    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n         // empty\n     }\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 174, "bugNodeStartChar": 5854, "bugNodeLength": 17, "fixLineNum": 174, "fixNodeStartChar": 5854, "fixNodeLength": 18, "sourceBeforeFix": "monochrome=true", "sourceAfterFix": "monochrome=false"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "cbf00f998d8bced87361e7a68cb3dcc3ed4b7350", "fixCommitParentSHA1": "a56358e4033cc160630f45858a9f29d65173d66c", "bugFilePath": "groovy/src/main/java/cucumber/runtime/groovy/GroovyBackend.java", "fixPatch": "diff --git a/groovy/src/main/java/cucumber/runtime/groovy/GroovyBackend.java b/groovy/src/main/java/cucumber/runtime/groovy/GroovyBackend.java\nindex 0f94ced..f595394 100644\n--- a/groovy/src/main/java/cucumber/runtime/groovy/GroovyBackend.java\n+++ b/groovy/src/main/java/cucumber/runtime/groovy/GroovyBackend.java\n@@ -29,7 +29,7 @@\n \n \n public class GroovyBackend implements Backend {\n-    static GroovyBackend instance;\n+    public static GroovyBackend instance;\n     private final Set<Class> scripts = new HashSet<Class>();\n     private final SnippetGenerator snippetGenerator = new SnippetGenerator(new GroovySnippet());\n     private final ResourceLoader resourceLoader;\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 32, "bugNodeStartChar": 1011, "bugNodeLength": 30, "fixLineNum": 32, "fixNodeStartChar": 1011, "fixNodeLength": 37, "sourceBeforeFix": "8", "sourceAfterFix": "9"}, {"bugType": "CHANGE_MODIFIER", "fixCommitSHA1": "5dbc9d3fb3ce3e34c094416061da84e6a71456b3", "fixCommitParentSHA1": "2c62cd0ba761526112047e9b8bf31a7db11c4b03", "bugFilePath": "java/src/main/java/cucumber/runtime/java/JavaStepDefinition.java", "fixPatch": "diff --git a/java/src/main/java/cucumber/runtime/java/JavaStepDefinition.java b/java/src/main/java/cucumber/runtime/java/JavaStepDefinition.java\nindex 46a0eef..f770e3b 100644\n--- a/java/src/main/java/cucumber/runtime/java/JavaStepDefinition.java\n+++ b/java/src/main/java/cucumber/runtime/java/JavaStepDefinition.java\n@@ -14,7 +14,7 @@\n import java.util.List;\n import java.util.regex.Pattern;\n \n-public class JavaStepDefinition implements StepDefinition {\n+class JavaStepDefinition implements StepDefinition {\n     private final Method method;\n     private final Pattern pattern;\n     private final int timeout;\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 17, "bugNodeStartChar": 445, "bugNodeLength": 1677, "fixLineNum": 17, "fixNodeStartChar": 445, "fixNodeLength": 1670, "sourceBeforeFix": "1", "sourceAfterFix": "0"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "c4669fc5bb8b622188422e3e75e470077eb7d6d2", "fixCommitParentSHA1": "76b194952bad1f2bc4c49359a10cf620cefac913", "bugFilePath": "core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java b/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java\nindex 1204816..bc7f4ec 100644\n--- a/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java\n+++ b/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java\n@@ -70,7 +70,7 @@\n         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"--name\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n-        assertEquals(actualPattern.pattern(), someName);\n+        assertEquals(someName, actualPattern.pattern());\n     }\n \n     @Test\n@@ -78,7 +78,7 @@\n         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"-n\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n-        assertEquals(actualPattern.pattern(), someName);\n+        assertEquals(someName, actualPattern.pattern());\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 73, "bugNodeStartChar": 2396, "bugNodeLength": 47, "fixLineNum": 73, "fixNodeStartChar": 2396, "fixNodeLength": 47, "sourceBeforeFix": "assertEquals(actualPattern.pattern(),someName)", "sourceAfterFix": "assertEquals(someName,actualPattern.pattern())"}, {"bugType": "SWAP_ARGUMENTS", "fixCommitSHA1": "c4669fc5bb8b622188422e3e75e470077eb7d6d2", "fixCommitParentSHA1": "76b194952bad1f2bc4c49359a10cf620cefac913", "bugFilePath": "core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java", "fixPatch": "diff --git a/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java b/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java\nindex 1204816..bc7f4ec 100644\n--- a/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java\n+++ b/core/src/test/java/cucumber/runtime/RuntimeOptionsTest.java\n@@ -70,7 +70,7 @@\n         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"--name\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n-        assertEquals(actualPattern.pattern(), someName);\n+        assertEquals(someName, actualPattern.pattern());\n     }\n \n     @Test\n@@ -78,7 +78,7 @@\n         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"-n\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n-        assertEquals(actualPattern.pattern(), someName);\n+        assertEquals(someName, actualPattern.pattern());\n     }\n \n     @Test\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 81, "bugNodeStartChar": 2703, "bugNodeLength": 47, "fixLineNum": 81, "fixNodeStartChar": 2703, "fixNodeLength": 47, "sourceBeforeFix": "assertEquals(actualPattern.pattern(),someName)", "sourceAfterFix": "assertEquals(someName,actualPattern.pattern())"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "b9d5009798096f4568e109f00008f70d5f99c52b", "fixCommitParentSHA1": "86f505a90064d76f957edb1117471e161f86f8d7", "bugFilePath": "core/src/main/java/cucumber/runtime/RuntimeOptions.java", "fixPatch": "diff --git a/core/src/main/java/cucumber/runtime/RuntimeOptions.java b/core/src/main/java/cucumber/runtime/RuntimeOptions.java\nindex 4e681e9..8f7aa52 100644\n--- a/core/src/main/java/cucumber/runtime/RuntimeOptions.java\n+++ b/core/src/main/java/cucumber/runtime/RuntimeOptions.java\n@@ -47,7 +47,7 @@\n         }\n     }\n \n-    private void parse(ArrayList<String> args) {\n+    private void parse(List<String> args) {\n         FormatterConverter formatterConverter = new FormatterConverter();\n \n         while (!args.isEmpty()) {\n", "projectName": "cucumber.cucumber-jvm", "bugLineNum": 50, "bugNodeStartChar": 1754, "bugNodeLength": 17, "fixLineNum": 50, "fixNodeStartChar": 1754, "fixNodeLength": 12, "sourceBeforeFix": "ArrayList<String>", "sourceAfterFix": "List<String>"}]