[{"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "fe992fa69dd155ed3a98c0848026d0fd35aa6e57", "fixCommitParentSHA1": "4bff0085272e5a8604923cff2d3dfeb4ffc0de16", "bugFilePath": "tool/src/org/antlr/v4/Tool.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/Tool.java b/tool/src/org/antlr/v4/Tool.java\nindex 42ace2e..1a39dd3 100644\n--- a/tool/src/org/antlr/v4/Tool.java\n+++ b/tool/src/org/antlr/v4/Tool.java\n@@ -246,7 +246,7 @@\n \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n-\t\t\t\tlibDirectory = \".\";\n+\t\t\t\toutputDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 249, "bugNodeStartChar": 9164, "bugNodeLength": 18, "fixLineNum": 249, "fixNodeStartChar": 9164, "fixNodeLength": 21, "sourceBeforeFix": "libDirectory=\".\"", "sourceAfterFix": "outputDirectory=\".\""}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c8c577c3329f17f1542ab269b7fcfd08cdf28f46", "fixCommitParentSHA1": "6693ba73a5ada245f9d9f6d92489ea2563f7f89f", "bugFilePath": "tool/src/org/antlr/v4/Tool.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/Tool.java b/tool/src/org/antlr/v4/Tool.java\nindex 42ace2e..1a39dd3 100644\n--- a/tool/src/org/antlr/v4/Tool.java\n+++ b/tool/src/org/antlr/v4/Tool.java\n@@ -246,7 +246,7 @@\n \t\t\thaveOutputDir = true;\n \t\t\tif (outDir.exists() && !outDir.isDirectory()) {\n \t\t\t\terrMgr.toolError(ErrorType.OUTPUT_DIR_IS_FILE, outputDirectory);\n-\t\t\t\tlibDirectory = \".\";\n+\t\t\t\toutputDirectory = \".\";\n \t\t\t}\n \t\t}\n \t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 249, "bugNodeStartChar": 9164, "bugNodeLength": 18, "fixLineNum": 249, "fixNodeStartChar": 9164, "fixNodeLength": 21, "sourceBeforeFix": "libDirectory=\".\"", "sourceAfterFix": "outputDirectory=\".\""}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "a9dfca3666bdcd74476ca5aa6f3baa1e396ce6ce", "fixCommitParentSHA1": "b09e30c6caf8e44dbddf6c0598480b0c43eb78fb", "bugFilePath": "antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java", "fixPatch": "diff --git a/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java b/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java\nindex dcdc0a2..0a81f51 100644\n--- a/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java\n+++ b/antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java\n@@ -395,7 +395,7 @@\n             String tokensFileName = grammarFile.getName().split(\"\\\\.\")[0] + \".tokens\";\n             File outputFile = new File(outputDirectory, tokensFileName);\n             if ( (! outputFile.exists()) ||\n-                 outputFile.lastModified() < grammarFile.lastModified() ||\n+                 outputFile.lastModified() <= grammarFile.lastModified() ||\n                  dependencies.isDependencyChanged(grammarFile)) {\n                 grammarFilesToProcess.add(grammarFile);\n             }\n", "projectName": "antlr.antlr4", "bugLineNum": 398, "bugNodeStartChar": 12582, "bugNodeLength": 54, "fixLineNum": 398, "fixNodeStartChar": 12582, "fixNodeLength": 55, "sourceBeforeFix": "outputFile.lastModified() < grammarFile.lastModified()", "sourceAfterFix": "outputFile.lastModified() <= grammarFile.lastModified()"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f79a34aa3ab947603330680019cab43a23a29b17", "fixCommitParentSHA1": "1c987e77eaa2baf786023cfff437a409f4623221", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java\nindex cec4c94..ac00eb8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java\n@@ -113,7 +113,7 @@\n \n \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n-\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\").contains(targetName);\n+\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\", \"Cpp\").contains(targetName);\n \t\t}\n \t}\n \n@@ -199,7 +199,7 @@\n \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n \t\t\t// passes, but still too slow in Python and JavaScript\n-\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\").contains(targetName);\n+\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Cpp\").contains(targetName);\n \t\t}\n \t}\n \n", "projectName": "antlr.antlr4", "bugLineNum": 116, "bugNodeStartChar": 21331, "bugNodeLength": 61, "fixLineNum": 116, "fixNodeStartChar": 21331, "fixNodeLength": 68, "sourceBeforeFix": "Arrays.asList(\"Java\",\"CSharp\",\"Python2\",\"Python3\",\"Node\")", "sourceAfterFix": "Arrays.asList(\"Java\",\"CSharp\",\"Python2\",\"Python3\",\"Node\",\"Cpp\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "f79a34aa3ab947603330680019cab43a23a29b17", "fixCommitParentSHA1": "1c987e77eaa2baf786023cfff437a409f4623221", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java\nindex cec4c94..ac00eb8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/PerformanceDescriptors.java\n@@ -113,7 +113,7 @@\n \n \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n-\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\").contains(targetName);\n+\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\", \"Cpp\").contains(targetName);\n \t\t}\n \t}\n \n@@ -199,7 +199,7 @@\n \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n \t\t\t// passes, but still too slow in Python and JavaScript\n-\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\").contains(targetName);\n+\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Cpp\").contains(targetName);\n \t\t}\n \t}\n \n", "projectName": "antlr.antlr4", "bugLineNum": 202, "bugNodeStartChar": 25070, "bugNodeLength": 31, "fixLineNum": 202, "fixNodeStartChar": 25070, "fixNodeLength": 38, "sourceBeforeFix": "Arrays.asList(\"Java\",\"CSharp\")", "sourceAfterFix": "Arrays.asList(\"Java\",\"CSharp\",\"Cpp\")"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "5d3b99b2ee5639dc5baaf6d49f76d70c9f3901a2", "fixCommitParentSHA1": "bc7678011d7503ea769e406e7689e0a0404e2e49", "bugFilePath": "tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java b/tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java\nindex 416909a..4f5e792 100644\n--- a/tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java\n+++ b/tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java\n@@ -471,7 +471,7 @@\n \tprotected void enterTerminal(GrammarAST tree) {\n \t\tString text = tree.getText();\n \t\tif (text.equals(\"''\")) {\n-\t\t\tg.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED, g.fileName, tree.token);\n+\t\t\tg.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED, g.fileName, tree.token, \"''\");\n \t\t}\n \t}\n \n", "projectName": "antlr.antlr4", "bugLineNum": 474, "bugNodeStartChar": 14212, "bugNodeLength": 96, "fixLineNum": 474, "fixNodeStartChar": 14212, "fixNodeLength": 102, "sourceBeforeFix": "g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token)", "sourceAfterFix": "g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token,\"''\")"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "89bfd56a769e67a7392fa3acc57a79fa2cd5d931", "fixCommitParentSHA1": "a6e7a72ac767d73e6f760750b53b13e2e89d7261", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/Recognizer.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java b/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java\nindex 990578f..6b407bc 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java\n@@ -69,7 +69,7 @@\n \t\t\tMap<String, Integer> result = tokenTypeMapCache.get(vocabulary);\n \t\t\tif (result == null) {\n \t\t\t\tresult = new HashMap<String, Integer>();\n-\t\t\t\tfor (int i = 0; i < getATN().maxTokenType; i++) {\n+\t\t\t\tfor (int i = 0; i <= getATN().maxTokenType; i++) {\n \t\t\t\t\tString literalName = vocabulary.getLiteralName(i);\n \t\t\t\t\tif (literalName != null) {\n \t\t\t\t\t\tresult.put(literalName, i);\n", "projectName": "antlr.antlr4", "bugLineNum": 72, "bugNodeStartChar": 2239, "bugNodeLength": 25, "fixLineNum": 72, "fixNodeStartChar": 2239, "fixNodeLength": 26, "sourceBeforeFix": "i < getATN().maxTokenType", "sourceAfterFix": "i <= getATN().maxTokenType"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "f13b09eb3d32265939dfa4233112a4655e0cedef", "fixCommitParentSHA1": "a6e7a72ac767d73e6f760750b53b13e2e89d7261", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/Recognizer.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java b/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java\nindex 990578f..6b407bc 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/Recognizer.java\n@@ -69,7 +69,7 @@\n \t\t\tMap<String, Integer> result = tokenTypeMapCache.get(vocabulary);\n \t\t\tif (result == null) {\n \t\t\t\tresult = new HashMap<String, Integer>();\n-\t\t\t\tfor (int i = 0; i < getATN().maxTokenType; i++) {\n+\t\t\t\tfor (int i = 0; i <= getATN().maxTokenType; i++) {\n \t\t\t\t\tString literalName = vocabulary.getLiteralName(i);\n \t\t\t\t\tif (literalName != null) {\n \t\t\t\t\t\tresult.put(literalName, i);\n", "projectName": "antlr.antlr4", "bugLineNum": 72, "bugNodeStartChar": 2239, "bugNodeLength": 25, "fixLineNum": 72, "fixNodeStartChar": 2239, "fixNodeLength": 26, "sourceBeforeFix": "i < getATN().maxTokenType", "sourceAfterFix": "i <= getATN().maxTokenType"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "0a7e90fe8e5edd548432677f8fbf3e6d1888961d", "fixCommitParentSHA1": "9ef75603ce1edf335c198a6299fd86cdd8f48fcb", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java b/runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java\nindex a510bc4..fd6a8eb 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java\n@@ -77,7 +77,7 @@\n         int i = p;\n         int n = 1;\n         // find k good tokens looking backwards\n-        while ( n<=k ) {\n+        while ( n<=k && i>0 ) {\n             // skip off-channel tokens\n             i = previousTokenOnChannel(i - 1, channel);\n             n++;\n", "projectName": "antlr.antlr4", "bugLineNum": 80, "bugNodeStartChar": 2703, "bugNodeLength": 4, "fixLineNum": 80, "fixNodeStartChar": 2703, "fixNodeLength": 11, "sourceBeforeFix": "n <= k", "sourceAfterFix": "n <= k && i > 0"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "fixCommitParentSHA1": "9b76bc6a719994b0cfdd70794b8ae2715beed4cb", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\nindex 2c09a85..63104b3 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n@@ -285,7 +285,7 @@\n \t@Test\n \tpublic void testTokenGetters_1() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n@@ -301,7 +301,7 @@\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitA(ctx *AContext) {\\n\");\n \t\tgrammarBuilder.append(\"\tif ctx.GetChildCount() == 2 {\\n\");\n-\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), ctx.AllINT())\\n\");\n+\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), antlr.PrintArrayJavaStyle(antlr.TerminalNodeToStringArray(ctx.AllINT())))\\n\");\n \t\tgrammarBuilder.append(\"\t} else {\\n\");\n \t\tgrammarBuilder.append(\"\t\tfmt.Println(ctx.ID().GetSymbol())\\n\");\n \t\tgrammarBuilder.append(\"\t}\\n\");\n@@ -338,7 +338,7 @@\n \t@Test\n \tpublic void testTokenGetters_2() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n@@ -354,7 +354,7 @@\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitA(ctx *AContext) {\\n\");\n \t\tgrammarBuilder.append(\"\tif ctx.GetChildCount() == 2 {\\n\");\n-\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), ctx.AllINT())\\n\");\n+\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), antlr.PrintArrayJavaStyle(antlr.TerminalNodeToStringArray(ctx.AllINT())))\\n\");\n \t\tgrammarBuilder.append(\"\t} else {\\n\");\n \t\tgrammarBuilder.append(\"\t\tfmt.Println(ctx.ID().GetSymbol())\\n\");\n \t\tgrammarBuilder.append(\"\t}\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 288, "bugNodeStartChar": 12488, "bugNodeLength": 22, "fixLineNum": 288, "fixNodeStartChar": 12488, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(674)", "sourceAfterFix": "new StringBuilder(734)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "fixCommitParentSHA1": "9b76bc6a719994b0cfdd70794b8ae2715beed4cb", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\nindex 2c09a85..63104b3 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n@@ -285,7 +285,7 @@\n \t@Test\n \tpublic void testTokenGetters_1() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n@@ -301,7 +301,7 @@\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitA(ctx *AContext) {\\n\");\n \t\tgrammarBuilder.append(\"\tif ctx.GetChildCount() == 2 {\\n\");\n-\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), ctx.AllINT())\\n\");\n+\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), antlr.PrintArrayJavaStyle(antlr.TerminalNodeToStringArray(ctx.AllINT())))\\n\");\n \t\tgrammarBuilder.append(\"\t} else {\\n\");\n \t\tgrammarBuilder.append(\"\t\tfmt.Println(ctx.ID().GetSymbol())\\n\");\n \t\tgrammarBuilder.append(\"\t}\\n\");\n@@ -338,7 +338,7 @@\n \t@Test\n \tpublic void testTokenGetters_2() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n@@ -354,7 +354,7 @@\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitA(ctx *AContext) {\\n\");\n \t\tgrammarBuilder.append(\"\tif ctx.GetChildCount() == 2 {\\n\");\n-\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), ctx.AllINT())\\n\");\n+\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), antlr.PrintArrayJavaStyle(antlr.TerminalNodeToStringArray(ctx.AllINT())))\\n\");\n \t\tgrammarBuilder.append(\"\t} else {\\n\");\n \t\tgrammarBuilder.append(\"\t\tfmt.Println(ctx.ID().GetSymbol())\\n\");\n \t\tgrammarBuilder.append(\"\t}\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 341, "bugNodeStartChar": 14844, "bugNodeLength": 22, "fixLineNum": 341, "fixNodeStartChar": 14844, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(674)", "sourceAfterFix": "new StringBuilder(734)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "fixCommitParentSHA1": "9b76bc6a719994b0cfdd70794b8ae2715beed4cb", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java\nindex d6593a2..8787c5c 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java\n@@ -193,7 +193,7 @@\n \t@Test\n \tpublic void testTokenAndRuleContextString() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(167);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(194);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s\\n\");\n \t\tgrammarBuilder.append(\"@init {\\n\");\n@@ -204,7 +204,7 @@\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"  : r=a ;\\n\");\n \t\tgrammarBuilder.append(\"a : 'x' { \\n\");\n-\t\tgrammarBuilder.append(\"fmt.Println(p.GetRuleInvocationStack(nil))\\n\");\n+\t\tgrammarBuilder.append(\"fmt.Println(antlr.PrintArrayJavaStyle(p.GetRuleInvocationStack(nil)))\\n\");\n \t\tgrammarBuilder.append(\"} ;\");\n \t\tString grammar = grammarBuilder.toString();\n \t\tString input =\"x\";\n", "projectName": "antlr.antlr4", "bugLineNum": 196, "bugNodeStartChar": 7809, "bugNodeLength": 22, "fixLineNum": 196, "fixNodeStartChar": 7809, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(167)", "sourceAfterFix": "new StringBuilder(194)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "28e013e68764d727ce67ac93663489e652562788", "fixCommitParentSHA1": "faeb00a682f6fbf4ae9648d938e9d6957b456b5b", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\nindex 43c5817..2c09a85 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n@@ -120,7 +120,7 @@\n \t@Test\n \tpublic void testLRWithLabels() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(709);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(726);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n@@ -135,7 +135,7 @@\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitCall(ctx *CallContext) {\\n\");\n-\t\tgrammarBuilder.append(\"\tfmt.Printf(\\\"%s %s\\\", ctx.E().GetStart().GetText(), ctx.EList())\\n\");\n+\t\tgrammarBuilder.append(\"\tfmt.Printf(\\\"%s %s\\\", ctx.E().GetStart().GetText(), ctx.EList().String(nil, nil))\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitInt(ctx *IntContext) {\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 123, "bugNodeStartChar": 5084, "bugNodeLength": 22, "fixLineNum": 123, "fixNodeStartChar": 5084, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(709)", "sourceAfterFix": "new StringBuilder(726)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "edbf3225efbcffe9f16f28cbb42c5d95a5de9996", "fixCommitParentSHA1": "53fab2c61ce06e315ff6098b7f23a735197f8ace", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\nindex 6630087..7a12816 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestListeners.java\n@@ -120,7 +120,7 @@\n \t@Test\n \tpublic void testLRWithLabels() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(709);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(726);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n@@ -135,7 +135,7 @@\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitCall(ctx *CallContext) {\\n\");\n-\t\tgrammarBuilder.append(\"\tfmt.Printf(\\\"%s %s\\\", ctx.E().GetStart().GetText(), ctx.EList())\\n\");\n+\t\tgrammarBuilder.append(\"\tfmt.Printf(\\\"%s %s\\\", ctx.E().GetStart().GetText(), ctx.EList().String(nil, nil))\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitInt(ctx *IntContext) {\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 123, "bugNodeStartChar": 5089, "bugNodeLength": 22, "fixLineNum": 123, "fixNodeStartChar": 5089, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(709)", "sourceAfterFix": "new StringBuilder(726)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\nindex f6c8946..45db596 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1918,7 +1918,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -1951,7 +1951,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -1984,7 +1984,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -2017,7 +2017,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1758, "bugNodeStartChar": 79734, "bugNodeLength": 22, "fixLineNum": 1758, "fixNodeStartChar": 79734, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\nindex f6c8946..45db596 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1918,7 +1918,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -1951,7 +1951,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -1984,7 +1984,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -2017,7 +2017,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1784, "bugNodeStartChar": 80789, "bugNodeLength": 22, "fixLineNum": 1784, "fixNodeStartChar": 80789, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\nindex f6c8946..45db596 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/cpp/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1918,7 +1918,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -1951,7 +1951,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -1984,7 +1984,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n@@ -2017,7 +2017,7 @@\n \t\tgrammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}                       # parens\\n\");\n \t\tgrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}      # unary\\n\");\n \t\tgrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}      # unary\\n\");\n-\t\tgrammarBuilder.append(\"  | ID          {$v = 3}                                                     # anID\\n\");\n+\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}                                                     # anID\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1810, "bugNodeStartChar": 81872, "bugNodeLength": 22, "fixLineNum": 1810, "fixNodeStartChar": 81872, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1556, "bugNodeStartChar": 78189, "bugNodeLength": 22, "fixLineNum": 1556, "fixNodeStartChar": 78189, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1577, "bugNodeStartChar": 79206, "bugNodeLength": 22, "fixLineNum": 1577, "fixNodeStartChar": 79206, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1598, "bugNodeStartChar": 80251, "bugNodeLength": 22, "fixLineNum": 1598, "fixNodeStartChar": 80251, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1679, "bugNodeStartChar": 84099, "bugNodeLength": 22, "fixLineNum": 1679, "fixNodeStartChar": 84099, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1707, "bugNodeStartChar": 85816, "bugNodeLength": 22, "fixLineNum": 1707, "fixNodeStartChar": 85816, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1735, "bugNodeStartChar": 87535, "bugNodeLength": 22, "fixLineNum": 1735, "fixNodeStartChar": 87535, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\nindex b3b91fd..c6de456 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/csharp/TestLeftRecursion.java\n@@ -1553,7 +1553,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1574,7 +1574,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1595,7 +1595,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1676,7 +1676,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1704,7 +1704,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1732,7 +1732,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1760,7 +1760,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1763, "bugNodeStartChar": 89256, "bugNodeLength": 22, "fixLineNum": 1763, "fixNodeStartChar": 89256, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1718, "bugNodeStartChar": 78390, "bugNodeLength": 22, "fixLineNum": 1718, "fixNodeStartChar": 78390, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1743, "bugNodeStartChar": 79412, "bugNodeLength": 22, "fixLineNum": 1743, "fixNodeStartChar": 79412, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1768, "bugNodeStartChar": 80462, "bugNodeLength": 22, "fixLineNum": 1768, "fixNodeStartChar": 80462, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1865, "bugNodeStartChar": 84330, "bugNodeLength": 22, "fixLineNum": 1865, "fixNodeStartChar": 84330, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1897, "bugNodeStartChar": 86040, "bugNodeLength": 22, "fixLineNum": 1897, "fixNodeStartChar": 86040, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1929, "bugNodeStartChar": 87752, "bugNodeLength": 22, "fixLineNum": 1929, "fixNodeStartChar": 87752, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\nindex 2f72610..6b415c8 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/java/TestLeftRecursion.java\n@@ -1715,7 +1715,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1740,7 +1740,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1765,7 +1765,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1862,7 +1862,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1894,7 +1894,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1926,7 +1926,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1958,7 +1958,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1961, "bugNodeStartChar": 89466, "bugNodeLength": 22, "fixLineNum": 1961, "fixNodeStartChar": 89466, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1638, "bugNodeStartChar": 81503, "bugNodeLength": 22, "fixLineNum": 1638, "fixNodeStartChar": 81503, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1661, "bugNodeStartChar": 82601, "bugNodeLength": 22, "fixLineNum": 1661, "fixNodeStartChar": 82601, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1684, "bugNodeStartChar": 83727, "bugNodeLength": 22, "fixLineNum": 1684, "fixNodeStartChar": 83727, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1773, "bugNodeStartChar": 87899, "bugNodeLength": 22, "fixLineNum": 1773, "fixNodeStartChar": 87899, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1803, "bugNodeStartChar": 89595, "bugNodeLength": 22, "fixLineNum": 1803, "fixNodeStartChar": 89595, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1833, "bugNodeStartChar": 91293, "bugNodeLength": 22, "fixLineNum": 1833, "fixNodeStartChar": 91293, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\nindex 2b392fc..eddcbff 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/javascript/node/TestLeftRecursion.java\n@@ -1635,7 +1635,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1658,7 +1658,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1681,7 +1681,7 @@\n \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");\n@@ -1770,7 +1770,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1800,7 +1800,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1830,7 +1830,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1860,7 +1860,7 @@\n \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1863, "bugNodeStartChar": 92993, "bugNodeLength": 22, "fixLineNum": 1863, "fixNodeStartChar": 92993, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1758, "bugNodeStartChar": 79217, "bugNodeLength": 22, "fixLineNum": 1758, "fixNodeStartChar": 79217, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1784, "bugNodeStartChar": 80257, "bugNodeLength": 22, "fixLineNum": 1784, "fixNodeStartChar": 80257, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1810, "bugNodeStartChar": 81325, "bugNodeLength": 22, "fixLineNum": 1810, "fixNodeStartChar": 81325, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1911, "bugNodeStartChar": 85265, "bugNodeLength": 22, "fixLineNum": 1911, "fixNodeStartChar": 85265, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1944, "bugNodeStartChar": 86832, "bugNodeLength": 22, "fixLineNum": 1944, "fixNodeStartChar": 86832, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1977, "bugNodeStartChar": 88401, "bugNodeLength": 22, "fixLineNum": 1977, "fixNodeStartChar": 88401, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\nindex d655239..aa1bc16 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 2010, "bugNodeStartChar": 89972, "bugNodeLength": 22, "fixLineNum": 2010, "fixNodeStartChar": 89972, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1758, "bugNodeStartChar": 79217, "bugNodeLength": 22, "fixLineNum": 1758, "fixNodeStartChar": 79217, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1784, "bugNodeStartChar": 80257, "bugNodeLength": 22, "fixLineNum": 1784, "fixNodeStartChar": 80257, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1810, "bugNodeStartChar": 81325, "bugNodeLength": 22, "fixLineNum": 1810, "fixNodeStartChar": 81325, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1911, "bugNodeStartChar": 85265, "bugNodeLength": 22, "fixLineNum": 1911, "fixNodeStartChar": 85265, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1944, "bugNodeStartChar": 86832, "bugNodeLength": 22, "fixLineNum": 1944, "fixNodeStartChar": 86832, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 1977, "bugNodeStartChar": 88401, "bugNodeLength": 22, "fixLineNum": 1977, "fixNodeStartChar": 88401, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "fixCommitParentSHA1": "d6339f5cf4fa98395ca6cb60de4d316b918649ad", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\nindex 72e8341..87fa26f 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/python3/TestLeftRecursion.java\n@@ -1755,7 +1755,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1781,7 +1781,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1807,7 +1807,7 @@\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");\n@@ -1908,7 +1908,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1941,7 +1941,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -1974,7 +1974,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n@@ -2007,7 +2007,7 @@\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n \n-\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 2010, "bugNodeStartChar": 89972, "bugNodeLength": 22, "fixLineNum": 2010, "fixNodeStartChar": 89972, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "fec65477d89e7375a5db1ebb88acb3d1df36a8b7", "fixCommitParentSHA1": "11571fa092616d4cb75ee68df23709547b68a4fd", "bugFilePath": "tool/test/org/antlr/v4/test/BaseTest.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/BaseTest.java b/tool/test/org/antlr/v4/test/BaseTest.java\nindex 362080a..c5b7501 100644\n--- a/tool/test/org/antlr/v4/test/BaseTest.java\n+++ b/tool/test/org/antlr/v4/test/BaseTest.java\n@@ -847,7 +847,7 @@\n \t\t\tg.atn = factory.createATN();\n \n \t\t\tCodeGenerator gen = new CodeGenerator(g);\n-\t\t\tST outputFileST = gen.generateParser();\n+\t\t\tST outputFileST = gen.generateParser(false);\n \t\t\tString output = outputFileST.render();\n \t\t\t//System.out.println(output);\n \t\t\tString b = \"#\" + actionName + \"#\";\n", "projectName": "antlr.antlr4", "bugLineNum": 850, "bugNodeStartChar": 27898, "bugNodeLength": 20, "fixLineNum": 850, "fixNodeStartChar": 27898, "fixNodeLength": 25, "sourceBeforeFix": "gen.generateParser()", "sourceAfterFix": "gen.generateParser(false)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "92b8f9f8911bd3c8662e84ff76257874f0aaa325", "fixCommitParentSHA1": "86d65cf7194cd43db55298a4707b38bac4603ea6", "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestSemPredEvalParser.java", "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestSemPredEvalParser.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestSemPredEvalParser.java\nindex e06ee4d..4d11d3a 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestSemPredEvalParser.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestSemPredEvalParser.java\n@@ -599,11 +599,11 @@\n \t@Test\n \tpublic void testToLeftWithVaryingPredicate() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(259);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@members {var i int = 0; var _ int = i; }\\n\");\n \t\tgrammarBuilder.append(\"s : ({i += 1;\\n\");\n-\t\tgrammarBuilder.append(\"fmt.Println(\\\"i=\\\" + i)} a)+ ;\\n\");\n+\t\tgrammarBuilder.append(\"fmt.Println(\\\"i=\\\" + fmt.Sprint(i))} a)+ ;\\n\");\n \t\tgrammarBuilder.append(\"a : {i % 2 == 0}? ID {fmt.Println(\\\"alt 1\\\")}\\n\");\n \t\tgrammarBuilder.append(\"  | {i % 2 != 0}? ID {fmt.Println(\\\"alt 2\\\")}\\n\");\n \t\tgrammarBuilder.append(\"  ;\\n\");\n", "projectName": "antlr.antlr4", "bugLineNum": 602, "bugNodeStartChar": 26648, "bugNodeLength": 22, "fixLineNum": 602, "fixNodeStartChar": 26648, "fixNodeLength": 22, "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(259)"}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "fa46c498affee1608fbf952d576c7cf9a554e314", "fixCommitParentSHA1": "805f706f023084fa8bd38ecee1abc9490fc24323", "bugFilePath": "tool/src/org/antlr/v4/codegen/target/GoTarget.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/codegen/target/GoTarget.java b/tool/src/org/antlr/v4/codegen/target/GoTarget.java\nindex e0d9929..ddf59b1 100644\n--- a/tool/src/org/antlr/v4/codegen/target/GoTarget.java\n+++ b/tool/src/org/antlr/v4/codegen/target/GoTarget.java\n@@ -96,11 +96,11 @@\n \t}\n \n \tpublic boolean wantsBaseListener() {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \tpublic boolean wantsBaseVisitor() {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \tpublic boolean supportsOverloadedMethods() {\n", "projectName": "antlr.antlr4", "bugLineNum": 99, "bugNodeStartChar": 2236, "bugNodeLength": 13, "fixLineNum": 99, "fixNodeStartChar": 2236, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "SWAP_BOOLEAN_LITERAL", "fixCommitSHA1": "fa46c498affee1608fbf952d576c7cf9a554e314", "fixCommitParentSHA1": "805f706f023084fa8bd38ecee1abc9490fc24323", "bugFilePath": "tool/src/org/antlr/v4/codegen/target/GoTarget.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/codegen/target/GoTarget.java b/tool/src/org/antlr/v4/codegen/target/GoTarget.java\nindex e0d9929..ddf59b1 100644\n--- a/tool/src/org/antlr/v4/codegen/target/GoTarget.java\n+++ b/tool/src/org/antlr/v4/codegen/target/GoTarget.java\n@@ -96,11 +96,11 @@\n \t}\n \n \tpublic boolean wantsBaseListener() {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \tpublic boolean wantsBaseVisitor() {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \tpublic boolean supportsOverloadedMethods() {\n", "projectName": "antlr.antlr4", "bugLineNum": 103, "bugNodeStartChar": 2293, "bugNodeLength": 13, "fixLineNum": 103, "fixNodeStartChar": 2293, "fixNodeLength": 12, "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "4f0afdcf8ee593023a10e3783e1689bd957018c5", "fixCommitParentSHA1": "e604167abbeb66260f47fc0fe59c2cbbcf8ce92d", "bugFilePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/ErrorType.java b/tool/src/org/antlr/v4/tool/ErrorType.java\nindex 6b94f9d..4868931 100644\n--- a/tool/src/org/antlr/v4/tool/ErrorType.java\n+++ b/tool/src/org/antlr/v4/tool/ErrorType.java\n@@ -956,7 +956,7 @@\n \t */\n \tCHANNELS_BLOCK_IN_COMBINED_GRAMMAR(164, \"custom channels are not supported in combined grammars\", ErrorSeverity.ERROR),\n \n-\tNONCONFORMING_LR_RULE(165, \"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle\", ErrorSeverity.ERROR),\n+\tNONCONFORMING_LR_RULE(169, \"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle\", ErrorSeverity.ERROR),\n \n \t/*\n \t * Backward incompatibility errors\n", "projectName": "antlr.antlr4", "bugLineNum": 959, "bugNodeStartChar": 31487, "bugNodeLength": 129, "fixLineNum": 959, "fixNodeStartChar": 31487, "fixNodeLength": 129, "sourceBeforeFix": "NONCONFORMING_LR_RULE(165,\"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle\",ErrorSeverity.ERROR)", "sourceAfterFix": "NONCONFORMING_LR_RULE(169,\"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle\",ErrorSeverity.ERROR)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "072f57871a029f5184644994832261035e3136e2", "fixCommitParentSHA1": "03fea116351a93638170a05506c780df4faced73", "bugFilePath": "tool/src/org/antlr/v4/codegen/Python2Target.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/codegen/Python2Target.java b/tool/src/org/antlr/v4/codegen/Python2Target.java\nindex 34ea685..b4144d8 100644\n--- a/tool/src/org/antlr/v4/codegen/Python2Target.java\n+++ b/tool/src/org/antlr/v4/codegen/Python2Target.java\n@@ -38,7 +38,7 @@\n  *\n  * @author Eric Vergnaud\n  */\n-public class Python2Target extends AbstractPython3Target {\n+public class Python2Target extends AbstractPythonTarget {\n \n \tprotected static final String[] python2Keywords = {\n \t\t\"abs\", \"all\", \"any\", \"apply\", \"as\",\n", "projectName": "antlr.antlr4", "bugLineNum": 37, "bugNodeStartChar": 1657, "bugNodeLength": 1500, "fixLineNum": 37, "fixNodeStartChar": 1657, "fixNodeLength": 1499, "sourceBeforeFix": "/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPython3Target {   protected static final String[] python2Keywords={\"abs\",\"all\",\"any\",\"apply\",\"as\",\"bin\",\"bool\",\"buffer\",\"bytearray\",\"callable\",\"chr\",\"classmethod\",\"coerce\",\"compile\",\"complex\",\"delattr\",\"dict\",\"dir\",\"divmod\",\"enumerate\",\"eval\",\"execfile\",\"file\",\"filter\",\"float\",\"format\",\"frozenset\",\"getattr\",\"globals\",\"hasattr\",\"hash\",\"help\",\"hex\",\"id\",\"input\",\"int\",\"intern\",\"isinstance\",\"issubclass\",\"iter\",\"len\",\"list\",\"locals\",\"map\",\"max\",\"min\",\"next\",\"memoryview\",\"object\",\"oct\",\"open\",\"ord\",\"pow\",\"print\",\"property\",\"range\",\"raw_input\",\"reduce\",\"reload\",\"repr\",\"reversed\",\"round\",\"set\",\"setattr\",\"slice\",\"sorted\",\"staticmethod\",\"str\",\"sum\",\"super\",\"tuple\",\"type\",\"unichr\",\"unicode\",\"vars\",\"with\",\"xrange\",\"zip\",\"__import__\",\"True\",\"False\",\"None\"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,\"Python2\");   }   @Override public String getVersion(){     return \"4.4.0\";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add(\"rule\");     badWords.add(\"parserRule\");   } } ", "sourceAfterFix": "/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPythonTarget {   protected static final String[] python2Keywords={\"abs\",\"all\",\"any\",\"apply\",\"as\",\"bin\",\"bool\",\"buffer\",\"bytearray\",\"callable\",\"chr\",\"classmethod\",\"coerce\",\"compile\",\"complex\",\"delattr\",\"dict\",\"dir\",\"divmod\",\"enumerate\",\"eval\",\"execfile\",\"file\",\"filter\",\"float\",\"format\",\"frozenset\",\"getattr\",\"globals\",\"hasattr\",\"hash\",\"help\",\"hex\",\"id\",\"input\",\"int\",\"intern\",\"isinstance\",\"issubclass\",\"iter\",\"len\",\"list\",\"locals\",\"map\",\"max\",\"min\",\"next\",\"memoryview\",\"object\",\"oct\",\"open\",\"ord\",\"pow\",\"print\",\"property\",\"range\",\"raw_input\",\"reduce\",\"reload\",\"repr\",\"reversed\",\"round\",\"set\",\"setattr\",\"slice\",\"sorted\",\"staticmethod\",\"str\",\"sum\",\"super\",\"tuple\",\"type\",\"unichr\",\"unicode\",\"vars\",\"with\",\"xrange\",\"zip\",\"__import__\",\"True\",\"False\",\"None\"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,\"Python2\");   }   @Override public String getVersion(){     return \"4.4.0\";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add(\"rule\");     badWords.add(\"parserRule\");   } } "}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 287, "bugNodeStartChar": 10574, "bugNodeLength": 23, "fixLineNum": 287, "fixNodeStartChar": 10574, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 287, "bugNodeStartChar": 10574, "bugNodeLength": 23, "fixLineNum": 287, "fixNodeStartChar": 10574, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 296, "bugNodeStartChar": 11016, "bugNodeLength": 23, "fixLineNum": 296, "fixNodeStartChar": 11016, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 296, "bugNodeStartChar": 11016, "bugNodeLength": 23, "fixLineNum": 296, "fixNodeStartChar": 11016, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1124, "bugNodeStartChar": 38669, "bugNodeLength": 15, "fixLineNum": 1124, "fixNodeStartChar": 38669, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1124, "bugNodeStartChar": 38669, "bugNodeLength": 15, "fixLineNum": 1124, "fixNodeStartChar": 38669, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1134, "bugNodeStartChar": 39193, "bugNodeLength": 15, "fixLineNum": 1134, "fixNodeStartChar": 39193, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "fixCommitParentSHA1": "0c0fd67082d8f807c9bedabba4c99cdebf6d1de8", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1134, "bugNodeStartChar": 39193, "bugNodeLength": 15, "fixLineNum": 1134, "fixNodeStartChar": 39193, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 287, "bugNodeStartChar": 10574, "bugNodeLength": 23, "fixLineNum": 287, "fixNodeStartChar": 10574, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 287, "bugNodeStartChar": 10574, "bugNodeLength": 23, "fixLineNum": 287, "fixNodeStartChar": 10574, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 296, "bugNodeStartChar": 11016, "bugNodeLength": 23, "fixLineNum": 296, "fixNodeStartChar": 11016, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/DOTGenerator.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/DOTGenerator.java b/tool/src/org/antlr/v4/tool/DOTGenerator.java\nindex 3788310..59ade76 100644\n--- a/tool/src/org/antlr/v4/tool/DOTGenerator.java\n+++ b/tool/src/org/antlr/v4/tool/DOTGenerator.java\n@@ -284,7 +284,7 @@\n \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n-\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n@@ -293,7 +293,7 @@\n \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n-\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n+\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {\n", "projectName": "antlr.antlr4", "bugLineNum": 296, "bugNodeStartChar": 11016, "bugNodeLength": 23, "fixLineNum": 296, "fixNodeStartChar": 11016, "fixNodeLength": 30, "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1124, "bugNodeStartChar": 38669, "bugNodeLength": 15, "fixLineNum": 1124, "fixNodeStartChar": 38669, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1124, "bugNodeStartChar": 38669, "bugNodeLength": 15, "fixLineNum": 1124, "fixNodeStartChar": 38669, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1134, "bugNodeStartChar": 39193, "bugNodeLength": 15, "fixLineNum": 1134, "fixNodeStartChar": 39193, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "fixCommitParentSHA1": "fdc46c53e6d885307d0ff3f8ceea5474267d1f64", "bugFilePath": "tool/src/org/antlr/v4/tool/Grammar.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/Grammar.java b/tool/src/org/antlr/v4/tool/Grammar.java\nindex acf7d00..fbdcbdf 100644\n--- a/tool/src/org/antlr/v4/tool/Grammar.java\n+++ b/tool/src/org/antlr/v4/tool/Grammar.java\n@@ -1121,7 +1121,7 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n+\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {\n@@ -1131,6 +1131,6 @@\n \n \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n-\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n+\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 1134, "bugNodeStartChar": 39193, "bugNodeLength": 15, "fixLineNum": 1134, "fixNodeStartChar": 39193, "fixNodeLength": 22, "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "d917ad46f7ae5f43a17ed0ad3b1a07c2f2297389", "fixCommitParentSHA1": "97b5d77976b3d1d0e712a451e1a4149063755973", "bugFilePath": "runtime/JavaAnnotations/src/org/antlr/v4/runtime/misc/NullUsageProcessor.java", "fixPatch": "diff --git a/runtime/JavaAnnotations/src/org/antlr/v4/runtime/misc/NullUsageProcessor.java b/runtime/JavaAnnotations/src/org/antlr/v4/runtime/misc/NullUsageProcessor.java\nindex 1e3e290..4343dc1 100644\n--- a/runtime/JavaAnnotations/src/org/antlr/v4/runtime/misc/NullUsageProcessor.java\n+++ b/runtime/JavaAnnotations/src/org/antlr/v4/runtime/misc/NullUsageProcessor.java\n@@ -283,7 +283,7 @@\n \t\t\t\tString error = String.format(\"parameter %s annotated with %s cannot override or implement a parameter annotated with %s\", overriderParameters.get(i).getSimpleName(), notNullType.getSimpleName(), nullableType.getSimpleName());\n \t\t\t\tprocessingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, error, overriderParameters.get(i), getNotNullAnnotationMirror(overriderParameters.get(i)));\n \t\t\t}\n-\t\t\telse if (isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) /*&& !errorElements.contains(overriderParameters.get(i)) && warnedElements.add(overriderParameters.get(i))*/) {\n+\t\t\telse if (isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) && !errorElements.contains(overriderParameters.get(i)) && warnedElements.add(overriderParameters.get(i))) {\n \t\t\t\tString error = String.format(\"parameter %s annotated with %s overrides a parameter that is not annotated\", overriderParameters.get(i).getSimpleName(), notNullType.getSimpleName());\n \t\t\t\tprocessingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, error, overriderParameters.get(i), getNotNullAnnotationMirror(overriderParameters.get(i)));\n \t\t\t}\n", "projectName": "antlr.antlr4", "bugLineNum": 286, "bugNodeStartChar": 13396, "bugNodeLength": 125, "fixLineNum": 286, "fixNodeStartChar": 13396, "fixNodeLength": 230, "sourceBeforeFix": "isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i)))", "sourceAfterFix": "isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) && !errorElements.contains(overriderParameters.get(i))&& warnedElements.add(overriderParameters.get(i))"}, {"bugType": "CHANGE_CALLER_IN_FUNCTION_CALL", "fixCommitSHA1": "664d66d9373b77995163d37c1391da43b526beb0", "fixCommitParentSHA1": "9889de87ac6d3b7c3092e4f95fd67a9a58cdda25", "bugFilePath": "tool/src/org/antlr/v4/codegen/model/RuleFunction.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/codegen/model/RuleFunction.java b/tool/src/org/antlr/v4/codegen/model/RuleFunction.java\nindex 01a41e0..466cf05 100644\n--- a/tool/src/org/antlr/v4/codegen/model/RuleFunction.java\n+++ b/tool/src/org/antlr/v4/codegen/model/RuleFunction.java\n@@ -307,13 +307,23 @@\n \t\t * Common\n \t\t */\n \n+\t\t/**\n+\t\t * Generate a frequency set as the union of two input sets. If an\n+\t\t * element is contained in both sets, the value for the output will be\n+\t\t * the maximum of the two input values.\n+\t\t *\n+\t\t * @param a The first set.\n+\t\t * @param b The second set.\n+\t\t * @return The union of the two sets, with the maximum value chosen\n+\t\t * whenever both sets contain the same key.\n+\t\t */\n \t\tprotected static FrequencySet<String> combineMax(FrequencySet<String> a, FrequencySet<String> b) {\n \t\t\tFrequencySet<String> result = combineAndClip(a, b, 1);\n \t\t\tfor (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n \t\t\t\tresult.get(entry.getKey()).v = entry.getValue().v;\n \t\t\t}\n \n-\t\t\tfor (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n+\t\t\tfor (Map.Entry<String, MutableInt> entry : b.entrySet()) {\n \t\t\t\tMutableInt slot = result.get(entry.getKey());\n \t\t\t\tslot.v = Math.max(slot.v, entry.getValue().v);\n \t\t\t}\n@@ -321,6 +331,18 @@\n \t\t\treturn result;\n \t\t}\n \n+\t\t/**\n+\t\t * Generate a frequency set as the union of two input sets, with the\n+\t\t * values clipped to a specified maximum value. If an element is\n+\t\t * contained in both sets, the value for the output, prior to clipping,\n+\t\t * will be the sum of the two input values.\n+\t\t *\n+\t\t * @param a The first set.\n+\t\t * @param b The second set.\n+\t\t * @param clip The maximum value to allow for any output.\n+\t\t * @return The sum of the two sets, with the individual elements clipped\n+\t\t * to the maximum value gived by {@code clip}.\n+\t\t */\n \t\tprotected static FrequencySet<String> combineAndClip(FrequencySet<String> a, FrequencySet<String> b, int clip) {\n \t\t\tFrequencySet<String> result = new FrequencySet<String>();\n \t\t\tfor (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n", "projectName": "antlr.antlr4", "bugLineNum": 316, "bugNodeStartChar": 11666, "bugNodeLength": 12, "fixLineNum": 316, "fixNodeStartChar": 11666, "fixNodeLength": 12, "sourceBeforeFix": "a.entrySet()", "sourceAfterFix": "b.entrySet()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "664d66d9373b77995163d37c1391da43b526beb0", "fixCommitParentSHA1": "9889de87ac6d3b7c3092e4f95fd67a9a58cdda25", "bugFilePath": "tool/src/org/antlr/v4/codegen/model/RuleFunction.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/codegen/model/RuleFunction.java b/tool/src/org/antlr/v4/codegen/model/RuleFunction.java\nindex 01a41e0..466cf05 100644\n--- a/tool/src/org/antlr/v4/codegen/model/RuleFunction.java\n+++ b/tool/src/org/antlr/v4/codegen/model/RuleFunction.java\n@@ -307,13 +307,23 @@\n \t\t * Common\n \t\t */\n \n+\t\t/**\n+\t\t * Generate a frequency set as the union of two input sets. If an\n+\t\t * element is contained in both sets, the value for the output will be\n+\t\t * the maximum of the two input values.\n+\t\t *\n+\t\t * @param a The first set.\n+\t\t * @param b The second set.\n+\t\t * @return The union of the two sets, with the maximum value chosen\n+\t\t * whenever both sets contain the same key.\n+\t\t */\n \t\tprotected static FrequencySet<String> combineMax(FrequencySet<String> a, FrequencySet<String> b) {\n \t\t\tFrequencySet<String> result = combineAndClip(a, b, 1);\n \t\t\tfor (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n \t\t\t\tresult.get(entry.getKey()).v = entry.getValue().v;\n \t\t\t}\n \n-\t\t\tfor (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n+\t\t\tfor (Map.Entry<String, MutableInt> entry : b.entrySet()) {\n \t\t\t\tMutableInt slot = result.get(entry.getKey());\n \t\t\t\tslot.v = Math.max(slot.v, entry.getValue().v);\n \t\t\t}\n@@ -321,6 +331,18 @@\n \t\t\treturn result;\n \t\t}\n \n+\t\t/**\n+\t\t * Generate a frequency set as the union of two input sets, with the\n+\t\t * values clipped to a specified maximum value. If an element is\n+\t\t * contained in both sets, the value for the output, prior to clipping,\n+\t\t * will be the sum of the two input values.\n+\t\t *\n+\t\t * @param a The first set.\n+\t\t * @param b The second set.\n+\t\t * @param clip The maximum value to allow for any output.\n+\t\t * @return The sum of the two sets, with the individual elements clipped\n+\t\t * to the maximum value gived by {@code clip}.\n+\t\t */\n \t\tprotected static FrequencySet<String> combineAndClip(FrequencySet<String> a, FrequencySet<String> b, int clip) {\n \t\t\tFrequencySet<String> result = new FrequencySet<String>();\n \t\t\tfor (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n", "projectName": "antlr.antlr4", "bugLineNum": 316, "bugNodeStartChar": 11666, "bugNodeLength": 12, "fixLineNum": 316, "fixNodeStartChar": 11666, "fixNodeLength": 12, "sourceBeforeFix": "a.entrySet()", "sourceAfterFix": "b.entrySet()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "8bff26d758f6e739fc4c67aa31cc7fcd9c1319f2", "fixCommitParentSHA1": "21248a42ca3d2be77931f87f211afec9c1dd671a", "bugFilePath": "tool/src/org/antlr/v4/semantics/RuleCollector.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/semantics/RuleCollector.java b/tool/src/org/antlr/v4/semantics/RuleCollector.java\nindex 48a06ff..7791dcf 100644\n--- a/tool/src/org/antlr/v4/semantics/RuleCollector.java\n+++ b/tool/src/org/antlr/v4/semantics/RuleCollector.java\n@@ -96,7 +96,7 @@\n \t\tif ( locals!=null ) {\n \t\t\tr.locals = ScopeParser.parseTypedArgList(locals, locals.getText(), g.tool.errMgr);\n \t\t\tr.locals.type = AttributeDict.DictType.LOCAL;\n-\t\t\tr.locals.ast = returns;\n+\t\t\tr.locals.ast = locals;\n \t\t}\n \n \t\tfor (GrammarAST a : actions) {\n", "projectName": "antlr.antlr4", "bugLineNum": 99, "bugNodeStartChar": 3864, "bugNodeLength": 22, "fixLineNum": 99, "fixNodeStartChar": 3864, "fixNodeLength": 21, "sourceBeforeFix": "r.locals.ast=returns", "sourceAfterFix": "r.locals.ast=locals"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "3694d51c4eb8bdce7a0d15d2705efd704a54fd74", "fixCommitParentSHA1": "9ea47475240a753548bdfddb7a7a89202b6ab762", "bugFilePath": "tool/test/org/antlr/v4/test/TestPerformance.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/TestPerformance.java b/tool/test/org/antlr/v4/test/TestPerformance.java\nindex acab9d9..4ab3681 100644\n--- a/tool/test/org/antlr/v4/test/TestPerformance.java\n+++ b/tool/test/org/antlr/v4/test/TestPerformance.java\n@@ -849,7 +849,7 @@\n \t\t\t\t\tSystem.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n \t\t\t\t\tfor (int i = 0; i < modeToDFA.length; i++) {\n \t\t\t\t\t\tDFA dfa = modeToDFA[i];\n-\t\t\t\t\t\tif (dfa == null) {\n+\t\t\t\t\t\tif (dfa == null || dfa.states.isEmpty()) {\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}\n \n", "projectName": "antlr.antlr4", "bugLineNum": 852, "bugNodeStartChar": 31933, "bugNodeLength": 11, "fixLineNum": 852, "fixNodeStartChar": 31933, "fixNodeLength": 35, "sourceBeforeFix": "dfa == null", "sourceAfterFix": "dfa == null || dfa.states.isEmpty()"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "3694d51c4eb8bdce7a0d15d2705efd704a54fd74", "fixCommitParentSHA1": "9ea47475240a753548bdfddb7a7a89202b6ab762", "bugFilePath": "tool/test/org/antlr/v4/test/TestPerformance.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/TestPerformance.java b/tool/test/org/antlr/v4/test/TestPerformance.java\nindex acab9d9..4ab3681 100644\n--- a/tool/test/org/antlr/v4/test/TestPerformance.java\n+++ b/tool/test/org/antlr/v4/test/TestPerformance.java\n@@ -849,7 +849,7 @@\n \t\t\t\t\tSystem.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n \t\t\t\t\tfor (int i = 0; i < modeToDFA.length; i++) {\n \t\t\t\t\t\tDFA dfa = modeToDFA[i];\n-\t\t\t\t\t\tif (dfa == null) {\n+\t\t\t\t\t\tif (dfa == null || dfa.states.isEmpty()) {\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}\n \n", "projectName": "antlr.antlr4", "bugLineNum": 852, "bugNodeStartChar": 31933, "bugNodeLength": 11, "fixLineNum": 852, "fixNodeStartChar": 31933, "fixNodeLength": 35, "sourceBeforeFix": "dfa == null", "sourceAfterFix": "dfa == null || dfa.states.isEmpty()"}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "7235d71cc0e6cd21792f059cf95952206b531461", "fixCommitParentSHA1": "805430177c024ffb39b99174d79c2e30dcb1e978", "bugFilePath": "tool/src/org/antlr/v4/Tool.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/Tool.java b/tool/src/org/antlr/v4/Tool.java\nindex abd714e..de01f5e 100644\n--- a/tool/src/org/antlr/v4/Tool.java\n+++ b/tool/src/org/antlr/v4/Tool.java\n@@ -527,7 +527,7 @@\n \t/** Manually get option node from tree; return null if no defined. */\n \tpublic static GrammarAST findOptionValueAST(GrammarRootAST root, String option) {\n \t\tGrammarAST options = (GrammarAST)root.getFirstChildWithType(ANTLRParser.OPTIONS);\n-\t\tif ( options!=null ) {\n+\t\tif ( options!=null && options.getChildCount() > 0 ) {\n \t\t\tfor (Object o : options.getChildren()) {\n \t\t\t\tGrammarAST c = (GrammarAST)o;\n \t\t\t\tif ( c.getType() == ANTLRParser.ASSIGN &&\n", "projectName": "antlr.antlr4", "bugLineNum": 530, "bugNodeStartChar": 18578, "bugNodeLength": 13, "fixLineNum": 530, "fixNodeStartChar": 18578, "fixNodeLength": 44, "sourceBeforeFix": "options != null", "sourceAfterFix": "options != null && options.getChildCount() > 0"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "03f8d3772fcdcd84ef8b8edd4a8e3cdc1e0c03df", "fixCommitParentSHA1": "645f80971f44f43c357a795a65b12ceda9fe1a25", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/UnbufferedCharStream.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/UnbufferedCharStream.java b/runtime/Java/src/org/antlr/v4/runtime/UnbufferedCharStream.java\nindex 3d233b1..5eee309 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/UnbufferedCharStream.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/UnbufferedCharStream.java\n@@ -169,7 +169,7 @@\n \t */\n \tprotected int fill(int n) {\n \t\tfor (int i=0; i<n; i++) {\n-\t\t\tif (this.n > 0 && data[this.n - 1] == IntStream.EOF) {\n+\t\t\tif (this.n > 0 && data[this.n - 1] == (char)IntStream.EOF) {\n \t\t\t\treturn i;\n \t\t\t}\n \n@@ -206,7 +206,7 @@\n         sync(i);\n         int index = p + i - 1;\n         if ( index < 0 ) throw new IndexOutOfBoundsException();\n-\t\tif ( index > n ) return IntStream.EOF;\n+\t\tif ( index >= n ) return IntStream.EOF;\n         char c = data[index];\n         if ( c==(char)IntStream.EOF ) return IntStream.EOF;\n         return c;\n@@ -315,7 +315,7 @@\n \n \t\tif (interval.a < bufferStartIndex || interval.b >= bufferStartIndex + n) {\n \t\t\tthrow new UnsupportedOperationException(\"interval \"+interval+\" outside buffer: \"+\n-\t\t\t                    bufferStartIndex+\"..\"+(bufferStartIndex+n));\n+\t\t\t                    bufferStartIndex+\"..\"+(bufferStartIndex+n-1));\n \t\t}\n \t\t// convert from absolute to local index\n \t\tint i = interval.a - bufferStartIndex;\n", "projectName": "antlr.antlr4", "bugLineNum": 209, "bugNodeStartChar": 6325, "bugNodeLength": 9, "fixLineNum": 209, "fixNodeStartChar": 6325, "fixNodeLength": 10, "sourceBeforeFix": "index > n", "sourceAfterFix": "index >= n"}, {"bugType": "OVERLOAD_METHOD_MORE_ARGS", "fixCommitSHA1": "b5650404e00e249d1e305e8b1ce5e1ac12526e4b", "fixCommitParentSHA1": "ed9f52702e969697c8d35e9284803cb9c06debb9", "bugFilePath": "tool/src/org/antlr/v4/semantics/AttributeChecks.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/semantics/AttributeChecks.java b/tool/src/org/antlr/v4/semantics/AttributeChecks.java\nindex 94c48ea..0e96520 100644\n--- a/tool/src/org/antlr/v4/semantics/AttributeChecks.java\n+++ b/tool/src/org/antlr/v4/semantics/AttributeChecks.java\n@@ -135,7 +135,7 @@\n \t\t\tif ( rref!=null ) {\n \t\t\t\tif ( rref.args!=null && rref.args.get(y.getText())!=null ) {\n \t\t\t\t\tg.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,\n-\t\t\t\t\t\t\t\t\t\t\t  g.fileName, y, y.getText(), expr);\n+\t\t\t\t\t\t\t\t\t\t\t  g.fileName, y, y.getText(), rref.name, expr);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\terrMgr.grammarError(ErrorType.UNKNOWN_RULE_ATTRIBUTE,\n", "projectName": "antlr.antlr4", "bugLineNum": 137, "bugNodeStartChar": 5350, "bugNodeLength": 111, "fixLineNum": 137, "fixNodeStartChar": 5350, "fixNodeLength": 122, "sourceBeforeFix": "g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),expr)", "sourceAfterFix": "g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),rref.name,expr)"}, {"bugType": "CHANGE_NUMERAL", "fixCommitSHA1": "73c6ce5c7ec6ee8521a2dc049e1abd0d1a744c6e", "fixCommitParentSHA1": "bfc395d23b5968c338e2ca7827d156e3ea716105", "bugFilePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/tool/ErrorType.java b/tool/src/org/antlr/v4/tool/ErrorType.java\nindex 30635de..e3869ce 100644\n--- a/tool/src/org/antlr/v4/tool/ErrorType.java\n+++ b/tool/src/org/antlr/v4/tool/ErrorType.java\n@@ -157,7 +157,7 @@\n     // Dependency sorting errors\n     //\n     /** t1.g4 -> t2.g4 -> t3.g4 ->t1.g4 */\n-    CIRCULAR_DEPENDENCY(130, \"your grammars contain a circular dependency and cannot be sorted into a valid build order\", ErrorSeverity.ERROR),\n+    CIRCULAR_DEPENDENCY(200, \"your grammars contain a circular dependency and cannot be sorted into a valid build order\", ErrorSeverity.ERROR),\n \n     // Simple informational messages\n     //\n", "projectName": "antlr.antlr4", "bugLineNum": 159, "bugNodeStartChar": 11644, "bugNodeLength": 181, "fixLineNum": 159, "fixNodeStartChar": 11644, "fixNodeLength": 181, "sourceBeforeFix": "/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(130,\"your grammars contain a circular dependency and cannot be sorted into a valid build order\",ErrorSeverity.ERROR)", "sourceAfterFix": "/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(200,\"your grammars contain a circular dependency and cannot be sorted into a valid build order\",ErrorSeverity.ERROR)"}, {"bugType": "CHANGE_OPERATOR", "fixCommitSHA1": "aa2223cd6a4d6ef43e680a1e0c4f074951fb9ab8", "fixCommitParentSHA1": "7c221f13ed7bc91ea080458df9dc50c874494316", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java b/runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java\nindex 2f4ed8d..baee9aa 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java\n@@ -331,7 +331,7 @@\n \t\t\tint p = lastSlot; // walk backwards from last index until we find non-null parent\n \t\t\twhile ( p>=0 && mergedParents[p]==null ) { p--; }\n \t\t\t// p is now last non-null index\n-\t\t\tassert p>0; // could only happen to be <0 if two arrays with $\n+\t\t\tassert p>=0; // could only happen to be <0 if two arrays with $\n \t\t\tif ( p < lastSlot ) {\n \t\t\t\tint n = p+1; // how many slots we really used in merge\n \t\t\t\tif ( n == 1 ) { // for just one merged element, return singleton top\n", "projectName": "antlr.antlr4", "bugLineNum": 334, "bugNodeStartChar": 12379, "bugNodeLength": 3, "fixLineNum": 334, "fixNodeStartChar": 12379, "fixNodeLength": 4, "sourceBeforeFix": "p > 0", "sourceAfterFix": "p >= 0"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "fixCommitParentSHA1": "6539c5f464693490047c9e677a95d6acb9942d4e", "bugFilePath": "tool/test/org/antlr/v4/test/TestCommonTokenStream.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\nindex f5ec1e2..6394d9e 100644\n--- a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n+++ b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n@@ -114,7 +114,7 @@\n         tokens.LT(i++); // push it past end\n         tokens.LT(i++);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n@@ -146,7 +146,7 @@\n         tokens.consume();\n         tokens.LT(1);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n", "projectName": "antlr.antlr4", "bugLineNum": 117, "bugNodeStartChar": 4562, "bugNodeLength": 17, "fixLineNum": 117, "fixNodeStartChar": 4562, "fixNodeLength": 16, "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "fixCommitParentSHA1": "6539c5f464693490047c9e677a95d6acb9942d4e", "bugFilePath": "tool/test/org/antlr/v4/test/TestCommonTokenStream.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\nindex f5ec1e2..6394d9e 100644\n--- a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n+++ b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n@@ -114,7 +114,7 @@\n         tokens.LT(i++); // push it past end\n         tokens.LT(i++);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n@@ -146,7 +146,7 @@\n         tokens.consume();\n         tokens.LT(1);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n", "projectName": "antlr.antlr4", "bugLineNum": 117, "bugNodeStartChar": 4562, "bugNodeLength": 17, "fixLineNum": 117, "fixNodeStartChar": 4562, "fixNodeLength": 16, "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "fixCommitParentSHA1": "6539c5f464693490047c9e677a95d6acb9942d4e", "bugFilePath": "tool/test/org/antlr/v4/test/TestCommonTokenStream.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\nindex f5ec1e2..6394d9e 100644\n--- a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n+++ b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n@@ -114,7 +114,7 @@\n         tokens.LT(i++); // push it past end\n         tokens.LT(i++);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n@@ -146,7 +146,7 @@\n         tokens.consume();\n         tokens.LT(1);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n", "projectName": "antlr.antlr4", "bugLineNum": 149, "bugNodeStartChar": 5649, "bugNodeLength": 17, "fixLineNum": 149, "fixNodeStartChar": 5649, "fixNodeLength": 16, "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "fixCommitParentSHA1": "6539c5f464693490047c9e677a95d6acb9942d4e", "bugFilePath": "tool/test/org/antlr/v4/test/TestCommonTokenStream.java", "fixPatch": "diff --git a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\nindex f5ec1e2..6394d9e 100644\n--- a/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n+++ b/tool/test/org/antlr/v4/test/TestCommonTokenStream.java\n@@ -114,7 +114,7 @@\n         tokens.LT(i++); // push it past end\n         tokens.LT(i++);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n@@ -146,7 +146,7 @@\n         tokens.consume();\n         tokens.LT(1);\n \n-        String result = tokens.toString();\n+        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }\n", "projectName": "antlr.antlr4", "bugLineNum": 149, "bugNodeStartChar": 5649, "bugNodeLength": 17, "fixLineNum": 149, "fixNodeStartChar": 5649, "fixNodeLength": 16, "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "51a15ac4a78ae570251ccc7c6a81b568663f1212", "fixCommitParentSHA1": "83c680850eded20e09b78393548798371564c938", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java b/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java\nindex 212f2d0..f6dffa8 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java\n@@ -335,7 +335,7 @@\n \t\t\ts = target; // flip; current DFA target becomes new src/from state\n \t\t}\n \n-\t\treturn failOrAccept(prevAccept, input, reach, t);\n+\t\treturn failOrAccept(prevAccept, input, closure, t);\n \t}\n \n \tprotected int failOrAccept(ExecState prevAccept, CharStream input,\n", "projectName": "antlr.antlr4", "bugLineNum": 338, "bugNodeStartChar": 10835, "bugNodeLength": 41, "fixLineNum": 338, "fixNodeStartChar": 10835, "fixNodeLength": 43, "sourceBeforeFix": "failOrAccept(prevAccept,input,reach,t)", "sourceAfterFix": "failOrAccept(prevAccept,input,closure,t)"}, {"bugType": "DIFFERENT_METHOD_SAME_ARGS", "fixCommitSHA1": "528e9c7b86b9ba432221ae3164e5faa09c55cef0", "fixCommitParentSHA1": "600c4bbd91bd9d05cad94ea5a92ad70f0dda6190", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java b/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java\nindex 1d4394d..104bd59 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java\n@@ -20,5 +20,5 @@\n \n \tpublic V get(ParseTree node) { return annotations.get(node); }\n \tpublic void put(ParseTree node, V value) { annotations.put(node, value); }\n-\tpublic V removeFrom(ParseTree node) { return annotations.get(node); }\n+\tpublic V removeFrom(ParseTree node) { return annotations.remove(node); }\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 23, "bugNodeStartChar": 882, "bugNodeLength": 21, "fixLineNum": 23, "fixNodeStartChar": 882, "fixNodeLength": 24, "sourceBeforeFix": "annotations.get(node)", "sourceAfterFix": "annotations.remove(node)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "528e9c7b86b9ba432221ae3164e5faa09c55cef0", "fixCommitParentSHA1": "600c4bbd91bd9d05cad94ea5a92ad70f0dda6190", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java b/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java\nindex 1d4394d..104bd59 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeProperty.java\n@@ -20,5 +20,5 @@\n \n \tpublic V get(ParseTree node) { return annotations.get(node); }\n \tpublic void put(ParseTree node, V value) { annotations.put(node, value); }\n-\tpublic V removeFrom(ParseTree node) { return annotations.get(node); }\n+\tpublic V removeFrom(ParseTree node) { return annotations.remove(node); }\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 23, "bugNodeStartChar": 882, "bugNodeLength": 21, "fixLineNum": 23, "fixNodeStartChar": 882, "fixNodeLength": 24, "sourceBeforeFix": "annotations.get(node)", "sourceAfterFix": "annotations.remove(node)"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "c25f3ff3d88976933957e6a2e89e60607e9fe436", "fixCommitParentSHA1": "2243cc2e8130b961992e0676a9ff5cd2781fed12", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java b/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java\nindex cf6d939..af29fbd 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java\n@@ -32,14 +32,14 @@\n /** Bail out of parser at first syntax error. Do this to use it:\n  *      myparser.setErrorHandler(new BailErrorStrategy<Token>());\n  */\n-public class BailErrorStrategy extends DefaultErrorStrategy<Token> {\n+public class BailErrorStrategy<Symbol> extends DefaultErrorStrategy<Symbol> {\n     /** Instead of recovering from exception e, Re-throw wrote it wrapped\n      *  in a generic RuntimeException so it is not caught by the\n      *  rule function catches.  Exception e is the \"cause\" of the\n      *  RuntimeException.\n      */\n     @Override\n-    public void recover(BaseRecognizer recognizer, RecognitionException e) {\n+    public void recover(BaseRecognizer<Symbol> recognizer, RecognitionException e) {\n         throw new RuntimeException(e);\n     }\n \n@@ -47,7 +47,7 @@\n      *  successfully recovers, it won't throw an exception.\n      */\n     @Override\n-    public Token recoverInline(BaseRecognizer recognizer)\n+    public Symbol recoverInline(BaseRecognizer<Symbol> recognizer)\n         throws RecognitionException\n     {\n         throw new RuntimeException(new InputMismatchException(recognizer));\n@@ -55,5 +55,5 @@\n \n     /** Make sure we don't attempt to recover from problems in subrules. */\n     @Override\n-    public void sync(BaseRecognizer recognizer) { }\n+    public void sync(BaseRecognizer<Symbol> recognizer) { }\n }\n", "projectName": "antlr.antlr4", "bugLineNum": 46, "bugNodeStartChar": 2058, "bugNodeLength": 327, "fixLineNum": 46, "fixNodeStartChar": 2058, "fixNodeLength": 336, "sourceBeforeFix": "/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } ", "sourceAfterFix": "/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer<Symbol> recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "30d89abc4a26ae73e5dbbd849c8f8e4a7799e370", "fixCommitParentSHA1": "fe1691da78540dcb4cf828655787c4a78154903d", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java b/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java\nindex c25e654..cf6d939 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/BailErrorStrategy.java\n@@ -32,7 +32,7 @@\n /** Bail out of parser at first syntax error. Do this to use it:\n  *      myparser.setErrorHandler(new BailErrorStrategy<Token>());\n  */\n-public class BailErrorStrategy<Symbol> extends DefaultErrorStrategy<Symbol> {\n+public class BailErrorStrategy extends DefaultErrorStrategy<Token> {\n     /** Instead of recovering from exception e, Re-throw wrote it wrapped\n      *  in a generic RuntimeException so it is not caught by the\n      *  rule function catches.  Exception e is the \"cause\" of the\n@@ -47,7 +47,7 @@\n      *  successfully recovers, it won't throw an exception.\n      */\n     @Override\n-    public Symbol recoverInline(BaseRecognizer recognizer)\n+    public Token recoverInline(BaseRecognizer recognizer)\n         throws RecognitionException\n     {\n         throw new RuntimeException(new InputMismatchException(recognizer));\n", "projectName": "antlr.antlr4", "bugLineNum": 46, "bugNodeStartChar": 2067, "bugNodeLength": 328, "fixLineNum": 46, "fixNodeStartChar": 2067, "fixNodeLength": 327, "sourceBeforeFix": "/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } ", "sourceAfterFix": "/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } "}, {"bugType": "MORE_SPECIFIC_IF", "fixCommitSHA1": "7e6eb1fda4c01e4b44649c364cfdab7f4da227b0", "fixCommitParentSHA1": "dd0d5e3ed56446d003374d7d424ea96c691a42f1", "bugFilePath": "tool/src/org/antlr/v4/codegen/model/RuleElement.java", "fixPatch": "diff --git a/tool/src/org/antlr/v4/codegen/model/RuleElement.java b/tool/src/org/antlr/v4/codegen/model/RuleElement.java\nindex 3037313..0a29cff 100644\n--- a/tool/src/org/antlr/v4/codegen/model/RuleElement.java\n+++ b/tool/src/org/antlr/v4/codegen/model/RuleElement.java\n@@ -38,7 +38,7 @@\n \n \tpublic RuleElement(OutputModelFactory factory, GrammarAST ast) {\n \t\tsuper(factory, ast);\n-\t\tif ( ast.atnState!=null ) stateNumber = ast.atnState.stateNumber;\n+\t\tif ( ast != null && ast.atnState!=null ) stateNumber = ast.atnState.stateNumber;\n \t}\n \n }\n", "projectName": "antlr.antlr4", "bugLineNum": 41, "bugNodeStartChar": 1815, "bugNodeLength": 18, "fixLineNum": 41, "fixNodeStartChar": 1815, "fixNodeLength": 33, "sourceBeforeFix": "ast.atnState != null", "sourceAfterFix": "ast != null && ast.atnState != null"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "3ca6ab034d1764f4186d4df7b4ad15dd86e9ed4c", "fixCommitParentSHA1": "783c3b2e5062280ac8270c247f84ccaced4cb520", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java b/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java\nindex 175bd35..752ac84 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java\n@@ -771,7 +771,7 @@\n \t}\n \n \tprotected void addDFAEdge(DFAState p, int t, DFAState q) {\n-\t\tif ( p==null ) return;\n+\t\tif ( p==null || t < -1 ) return;\n \t\tif ( p.edges==null ) {\n \t\t\tp.edges = new DFAState[atn.maxTokenType+1+1]; // TODO: make adaptive\n \t\t}\n", "projectName": "antlr.antlr4", "bugLineNum": 774, "bugNodeStartChar": 27893, "bugNodeLength": 7, "fixLineNum": 774, "fixNodeStartChar": 27893, "fixNodeLength": 17, "sourceBeforeFix": "p == null", "sourceAfterFix": "p == null || t < -1"}, {"bugType": "LESS_SPECIFIC_IF", "fixCommitSHA1": "3ca6ab034d1764f4186d4df7b4ad15dd86e9ed4c", "fixCommitParentSHA1": "783c3b2e5062280ac8270c247f84ccaced4cb520", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java b/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java\nindex 175bd35..752ac84 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java\n@@ -771,7 +771,7 @@\n \t}\n \n \tprotected void addDFAEdge(DFAState p, int t, DFAState q) {\n-\t\tif ( p==null ) return;\n+\t\tif ( p==null || t < -1 ) return;\n \t\tif ( p.edges==null ) {\n \t\t\tp.edges = new DFAState[atn.maxTokenType+1+1]; // TODO: make adaptive\n \t\t}\n", "projectName": "antlr.antlr4", "bugLineNum": 774, "bugNodeStartChar": 27893, "bugNodeLength": 7, "fixLineNum": 774, "fixNodeStartChar": 27893, "fixNodeLength": 17, "sourceBeforeFix": "p == null", "sourceAfterFix": "p == null || t < -1"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "fixCommitParentSHA1": "72906f5910f552b0d2636c5d4759c36c10f6e6b7", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/Arial.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/Arial.java b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/Arial.java\nindex 0ab876f..c34cca4 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/Arial.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/Arial.java\n@@ -29,7 +29,7 @@\n \n package org.antlr.v4.runtime.tree.gui;\n \n-public class Arial extends FontMetrics {\n+public class Arial extends BasicFontMetrics {\n \t{\n \t\tmaxCharHeight = 781;\n         widths[32] = 277; // space\n", "projectName": "antlr.antlr4", "bugLineNum": 32, "bugNodeStartChar": 1483, "bugNodeLength": 3289, "fixLineNum": 32, "fixNodeStartChar": 1483, "fixNodeLength": 3294, "sourceBeforeFix": "public class Arial extends FontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } ", "sourceAfterFix": "public class Arial extends BasicFontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "fixCommitParentSHA1": "72906f5910f552b0d2636c5d4759c36c10f6e6b7", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/ArialBlack.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/ArialBlack.java b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/ArialBlack.java\nindex d3069ef..8235ab8 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/ArialBlack.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/ArialBlack.java\n@@ -29,7 +29,7 @@\n \n package org.antlr.v4.runtime.tree.gui;\n \n-public class ArialBlack extends FontMetrics {\n+public class ArialBlack extends BasicFontMetrics {\n     {\n \t\tmaxCharHeight = 770;\n         widths[32] = 333; // space\n", "projectName": "antlr.antlr4", "bugLineNum": 32, "bugNodeStartChar": 1483, "bugNodeLength": 3299, "fixLineNum": 32, "fixNodeStartChar": 1483, "fixNodeLength": 3304, "sourceBeforeFix": "public class ArialBlack extends FontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } ", "sourceAfterFix": "public class ArialBlack extends BasicFontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "fixCommitParentSHA1": "72906f5910f552b0d2636c5d4759c36c10f6e6b7", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/CourierNew.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/CourierNew.java b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/CourierNew.java\nindex b4dc5ad..c483b00 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/CourierNew.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/CourierNew.java\n@@ -29,7 +29,7 @@\n \n package org.antlr.v4.runtime.tree.gui;\n \n-public class CourierNew extends FontMetrics {\n+public class CourierNew extends BasicFontMetrics {\n \t{\n \t\tmaxCharHeight = 678;\n \t\tfor (int i=0; i<128; i++) widths[i] = 600;\n", "projectName": "antlr.antlr4", "bugLineNum": 32, "bugNodeStartChar": 1483, "bugNodeLength": 121, "fixLineNum": 32, "fixNodeStartChar": 1483, "fixNodeLength": 126, "sourceBeforeFix": "public class CourierNew extends FontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } ", "sourceAfterFix": "public class CourierNew extends BasicFontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "fixCommitParentSHA1": "72906f5910f552b0d2636c5d4759c36c10f6e6b7", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java\nindex 2d930a9..7ab69a8 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java\n@@ -33,7 +33,7 @@\n \tprotected int boundingBoxWidth;\n \tprotected int boundingBoxHeight;\n \n-\tprotected FontMetrics fontMetrics;\n+\tprotected BasicFontMetrics fontMetrics;\n \tprotected String fontName;\n \tprotected int fontSize = 12;\n \tprotected double lineWidth = 0.3;\n@@ -98,7 +98,7 @@\n \t\tthis.fontSize = fontSize;\n \t\ttry {\n \t\t\tClass c = Class.forName(\"org.antlr.v4.runtime.tree.gui.\" + fontName);\n-\t\t\tthis.fontMetrics = (FontMetrics)c.newInstance();\n+\t\t\tthis.fontMetrics = (BasicFontMetrics)c.newInstance();\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new UnsupportedOperationException(\"No font metrics for \"+fontName);\n", "projectName": "antlr.antlr4", "bugLineNum": 36, "bugNodeStartChar": 1586, "bugNodeLength": 34, "fixLineNum": 36, "fixNodeStartChar": 1586, "fixNodeLength": 39, "sourceBeforeFix": "protected FontMetrics fontMetrics; ", "sourceAfterFix": "protected BasicFontMetrics fontMetrics; "}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "fixCommitParentSHA1": "72906f5910f552b0d2636c5d4759c36c10f6e6b7", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java\nindex 2d930a9..7ab69a8 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java\n@@ -33,7 +33,7 @@\n \tprotected int boundingBoxWidth;\n \tprotected int boundingBoxHeight;\n \n-\tprotected FontMetrics fontMetrics;\n+\tprotected BasicFontMetrics fontMetrics;\n \tprotected String fontName;\n \tprotected int fontSize = 12;\n \tprotected double lineWidth = 0.3;\n@@ -98,7 +98,7 @@\n \t\tthis.fontSize = fontSize;\n \t\ttry {\n \t\t\tClass c = Class.forName(\"org.antlr.v4.runtime.tree.gui.\" + fontName);\n-\t\t\tthis.fontMetrics = (FontMetrics)c.newInstance();\n+\t\t\tthis.fontMetrics = (BasicFontMetrics)c.newInstance();\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new UnsupportedOperationException(\"No font metrics for \"+fontName);\n", "projectName": "antlr.antlr4", "bugLineNum": 101, "bugNodeStartChar": 3307, "bugNodeLength": 28, "fixLineNum": 101, "fixNodeStartChar": 3307, "fixNodeLength": 33, "sourceBeforeFix": "(FontMetrics)c.newInstance()", "sourceAfterFix": "(BasicFontMetrics)c.newInstance()"}, {"bugType": "CHANGE_IDENTIFIER", "fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "fixCommitParentSHA1": "72906f5910f552b0d2636c5d4759c36c10f6e6b7", "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/TimesNewRoman.java", "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/TimesNewRoman.java b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/TimesNewRoman.java\nindex 52c18d2..2ca20c5 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/gui/TimesNewRoman.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/gui/TimesNewRoman.java\n@@ -29,7 +29,7 @@\n \n package org.antlr.v4.runtime.tree.gui;\n \n-public class TimesNewRoman extends FontMetrics {\n+public class TimesNewRoman extends BasicFontMetrics {\n     {\n \t\tmaxCharHeight = 717;\n         widths[32] = 250; // space\n", "projectName": "antlr.antlr4", "bugLineNum": 32, "bugNodeStartChar": 1483, "bugNodeLength": 3299, "fixLineNum": 32, "fixNodeStartChar": 1483, "fixNodeLength": 3304, "sourceBeforeFix": "public class TimesNewRoman extends FontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } ", "sourceAfterFix": "public class TimesNewRoman extends BasicFontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } "}]