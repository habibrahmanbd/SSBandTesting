[
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "d0a169978942736556fd0af1b8e4306c0291e107",
    "fixCommitParentSHA1": "20d5581270c9643f2764f7f5a4cab0e5ea84a673",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex 1298b87..ff121ae 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n@@ -1226,7 +1226,7 @@\n      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n@@ -1235,7 +1235,7 @@\n      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n",
    "projectName": "apache.storm",
    "bugLineNum": 1229,
    "bugNodeStartChar": 51612,
    "bugNodeLength": 21,
    "fixLineNum": 1229,
    "fixNodeStartChar": 51612,
    "fixNodeLength": 22,
    "sourceBeforeFix": "Objects.isNull(value)",
    "sourceAfterFix": "!Objects.isNull(value)"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "d0a169978942736556fd0af1b8e4306c0291e107",
    "fixCommitParentSHA1": "20d5581270c9643f2764f7f5a4cab0e5ea84a673",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex 1298b87..ff121ae 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n@@ -1226,7 +1226,7 @@\n      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n@@ -1235,7 +1235,7 @@\n      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n",
    "projectName": "apache.storm",
    "bugLineNum": 1238,
    "bugNodeStartChar": 51809,
    "bugNodeLength": 21,
    "fixLineNum": 1238,
    "fixNodeStartChar": 51809,
    "fixNodeLength": 22,
    "sourceBeforeFix": "Objects.isNull(value)",
    "sourceAfterFix": "!Objects.isNull(value)"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "fe6116a7119b1ee8ca55dca247b689ca173aeb53",
    "fixCommitParentSHA1": "20d5581270c9643f2764f7f5a4cab0e5ea84a673",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex 1298b87..ff121ae 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n@@ -1226,7 +1226,7 @@\n      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n@@ -1235,7 +1235,7 @@\n      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n",
    "projectName": "apache.storm",
    "bugLineNum": 1229,
    "bugNodeStartChar": 51612,
    "bugNodeLength": 21,
    "fixLineNum": 1229,
    "fixNodeStartChar": 51612,
    "fixNodeLength": 22,
    "sourceBeforeFix": "Objects.isNull(value)",
    "sourceAfterFix": "!Objects.isNull(value)"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "fe6116a7119b1ee8ca55dca247b689ca173aeb53",
    "fixCommitParentSHA1": "20d5581270c9643f2764f7f5a4cab0e5ea84a673",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\nindex 1298b87..ff121ae 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/UIHelpers.java\n@@ -1226,7 +1226,7 @@\n      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n@@ -1235,7 +1235,7 @@\n      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n-        return Objects.isNull(value) ? value : 0;\n+        return !Objects.isNull(value) ? value : 0;\n     }\n \n     /**\n",
    "projectName": "apache.storm",
    "bugLineNum": 1238,
    "bugNodeStartChar": 51809,
    "bugNodeLength": 21,
    "fixLineNum": 1238,
    "fixNodeStartChar": 51809,
    "fixNodeLength": 22,
    "sourceBeforeFix": "Objects.isNull(value)",
    "sourceAfterFix": "!Objects.isNull(value)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "4605ae0a34858309171e726e1924b9a37695c977",
    "fixCommitParentSHA1": "0f89cd8ab29f7db4ceed9afee4a329ff756ce3d4",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java b/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java\nindex 1132432..59b0f31 100644\n--- a/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java\n+++ b/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java\n@@ -332,7 +332,7 @@\n \n         private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {\n             return cachedNodes.computeIfAbsent(rackId,\n-                (rid) -> sortNodes(rackIdToNodes.get(rid), exec, td, rid, perNodeScheduledCount));\n+                (rid) -> sortNodes(rackIdToNodes.getOrDefault(rid, Collections.emptyList()), exec, td, rid, perNodeScheduledCount));\n         }\n \n         @Override\n",
    "projectName": "apache.storm",
    "bugLineNum": 335,
    "bugNodeStartChar": 14222,
    "bugNodeLength": 22,
    "fixLineNum": 335,
    "fixNodeStartChar": 14222,
    "fixNodeLength": 56,
    "sourceBeforeFix": "rackIdToNodes.get(rid)",
    "sourceAfterFix": "rackIdToNodes.getOrDefault(rid,Collections.emptyList())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "6d58e63eb085ef21adf9170fbc3e9eb93db0c621",
    "fixCommitParentSHA1": "f3c14378e4ef48e1516242acd2fd24d287702e98",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java b/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java\nindex 1132432..59b0f31 100644\n--- a/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java\n+++ b/storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java\n@@ -332,7 +332,7 @@\n \n         private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {\n             return cachedNodes.computeIfAbsent(rackId,\n-                (rid) -> sortNodes(rackIdToNodes.get(rid), exec, td, rid, perNodeScheduledCount));\n+                (rid) -> sortNodes(rackIdToNodes.getOrDefault(rid, Collections.emptyList()), exec, td, rid, perNodeScheduledCount));\n         }\n \n         @Override\n",
    "projectName": "apache.storm",
    "bugLineNum": 335,
    "bugNodeStartChar": 14222,
    "bugNodeLength": 22,
    "fixLineNum": 335,
    "fixNodeStartChar": 14222,
    "fixNodeLength": 56,
    "sourceBeforeFix": "rackIdToNodes.get(rid)",
    "sourceAfterFix": "rackIdToNodes.getOrDefault(rid,Collections.emptyList())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "b99982ef3518ffbd502e0e43d57030dfc090ec32",
    "fixCommitParentSHA1": "17a69e001dac77108b32a71b13296167ae607130",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\nindex 6c6d947..1d10f06 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n@@ -169,7 +169,7 @@\n                 containerRequestContext.abortWith(\n                         makeResponse(new AuthorizationException(\"UI request '\" + op + \"' for '\"\n                                         + user + \"' user is not authorized\"),\n-                                containerRequestContext, 401)\n+                                containerRequestContext, 403)\n                 );\n             }\n         }\n",
    "projectName": "apache.storm",
    "bugLineNum": 170,
    "bugNodeStartChar": 7575,
    "bugNodeLength": 211,
    "fixLineNum": 170,
    "fixNodeStartChar": 7575,
    "fixNodeLength": 211,
    "sourceBeforeFix": "makeResponse(new AuthorizationException(\"UI request '\" + op + \"' for '\"+ user+ \"' user is not authorized\"),containerRequestContext,401)",
    "sourceAfterFix": "makeResponse(new AuthorizationException(\"UI request '\" + op + \"' for '\"+ user+ \"' user is not authorized\"),containerRequestContext,403)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8ea2679d47dd14443f44944fed98b9e7b6c6c516",
    "fixCommitParentSHA1": "288eb7fad97adea12c69bc610c30fb9bf7807fd2",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\nindex 9a4a2a1..6c6d947 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n@@ -160,7 +160,7 @@\n         }\n \n         if (uiAclHandler != null) {\n-            if (!uiAclHandler.permit(reqContext, op, conf)) {\n+            if (!uiAclHandler.permit(reqContext, op, topoConf)) {\n                 Principal principal = reqContext.principal();\n                 String user = \"unknown\";\n                 if (principal != null) {\n",
    "projectName": "apache.storm",
    "bugLineNum": 163,
    "bugNodeStartChar": 7241,
    "bugNodeLength": 41,
    "fixLineNum": 163,
    "fixNodeStartChar": 7241,
    "fixNodeLength": 45,
    "sourceBeforeFix": "uiAclHandler.permit(reqContext,op,conf)",
    "sourceAfterFix": "uiAclHandler.permit(reqContext,op,topoConf)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "c179ea7ea1d7619d2a377f9961a9d45d47c3fbfe",
    "fixCommitParentSHA1": "288eb7fad97adea12c69bc610c30fb9bf7807fd2",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\nindex 9a4a2a1..9dd98c5 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n@@ -169,7 +169,7 @@\n                 containerRequestContext.abortWith(\n                         makeResponse(new AuthorizationException(\"UI request '\" + op + \"' for '\"\n                                         + user + \"' user is not authorized\"),\n-                                containerRequestContext, 401)\n+                                containerRequestContext, 403)\n                 );\n             }\n         }\n",
    "projectName": "apache.storm",
    "bugLineNum": 170,
    "bugNodeStartChar": 7571,
    "bugNodeLength": 211,
    "fixLineNum": 170,
    "fixNodeStartChar": 7571,
    "fixNodeLength": 211,
    "sourceBeforeFix": "makeResponse(new AuthorizationException(\"UI request '\" + op + \"' for '\"+ user+ \"' user is not authorized\"),containerRequestContext,401)",
    "sourceAfterFix": "makeResponse(new AuthorizationException(\"UI request '\" + op + \"' for '\"+ user+ \"' user is not authorized\"),containerRequestContext,403)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "8df4ce27c1c689bd1e0d1e771b2506f2e05dbefc",
    "fixCommitParentSHA1": "288eb7fad97adea12c69bc610c30fb9bf7807fd2",
    "bugFilePath": "storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java",
    "fixPatch": "diff --git a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\nindex 9a4a2a1..6c6d947 100644\n--- a/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n+++ b/storm-webapp/src/main/java/org/apache/storm/daemon/ui/filters/AuthorizedUserFilter.java\n@@ -160,7 +160,7 @@\n         }\n \n         if (uiAclHandler != null) {\n-            if (!uiAclHandler.permit(reqContext, op, conf)) {\n+            if (!uiAclHandler.permit(reqContext, op, topoConf)) {\n                 Principal principal = reqContext.principal();\n                 String user = \"unknown\";\n                 if (principal != null) {\n",
    "projectName": "apache.storm",
    "bugLineNum": 163,
    "bugNodeStartChar": 7241,
    "bugNodeLength": 41,
    "fixLineNum": 163,
    "fixNodeStartChar": 7241,
    "fixNodeLength": 45,
    "sourceBeforeFix": "uiAclHandler.permit(reqContext,op,conf)",
    "sourceAfterFix": "uiAclHandler.permit(reqContext,op,topoConf)"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "10f01f49c2166c803bf6ba46f3d6bb9203a9c440",
    "fixCommitParentSHA1": "7893f432a812fc7562de735852dfc80d0be9025f",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\nindex 59fea1e..3fd8cad 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n@@ -1025,7 +1025,7 @@\n                 state = MachineState.RUNNING;\n             }\n \n-            this.startTime = System.currentTimeMillis();\n+            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;\n",
    "projectName": "apache.storm",
    "bugLineNum": 1028,
    "bugNodeStartChar": 49877,
    "bugNodeLength": 26,
    "fixLineNum": 1028,
    "fixNodeStartChar": 49877,
    "fixNodeLength": 24,
    "sourceBeforeFix": "System.currentTimeMillis()",
    "sourceAfterFix": "Time.currentTimeMillis()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "10f01f49c2166c803bf6ba46f3d6bb9203a9c440",
    "fixCommitParentSHA1": "7893f432a812fc7562de735852dfc80d0be9025f",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\nindex 59fea1e..3fd8cad 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n@@ -1025,7 +1025,7 @@\n                 state = MachineState.RUNNING;\n             }\n \n-            this.startTime = System.currentTimeMillis();\n+            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;\n",
    "projectName": "apache.storm",
    "bugLineNum": 1028,
    "bugNodeStartChar": 49877,
    "bugNodeLength": 26,
    "fixLineNum": 1028,
    "fixNodeStartChar": 49877,
    "fixNodeLength": 24,
    "sourceBeforeFix": "System.currentTimeMillis()",
    "sourceAfterFix": "Time.currentTimeMillis()"
  },
  {
    "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
    "fixCommitSHA1": "307f01bf7c83512ca0762935d34c70ba6073b7b2",
    "fixCommitParentSHA1": "d8807671627ee4add1bbe67e6ae19adbf8515938",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\nindex 59fea1e..3fd8cad 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n@@ -1025,7 +1025,7 @@\n                 state = MachineState.RUNNING;\n             }\n \n-            this.startTime = System.currentTimeMillis();\n+            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;\n",
    "projectName": "apache.storm",
    "bugLineNum": 1028,
    "bugNodeStartChar": 49877,
    "bugNodeLength": 26,
    "fixLineNum": 1028,
    "fixNodeStartChar": 49877,
    "fixNodeLength": 24,
    "sourceBeforeFix": "System.currentTimeMillis()",
    "sourceAfterFix": "Time.currentTimeMillis()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "307f01bf7c83512ca0762935d34c70ba6073b7b2",
    "fixCommitParentSHA1": "d8807671627ee4add1bbe67e6ae19adbf8515938",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\nindex 59fea1e..3fd8cad 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n@@ -1025,7 +1025,7 @@\n                 state = MachineState.RUNNING;\n             }\n \n-            this.startTime = System.currentTimeMillis();\n+            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;\n",
    "projectName": "apache.storm",
    "bugLineNum": 1028,
    "bugNodeStartChar": 49877,
    "bugNodeLength": 26,
    "fixLineNum": 1028,
    "fixNodeStartChar": 49877,
    "fixNodeLength": 24,
    "sourceBeforeFix": "System.currentTimeMillis()",
    "sourceAfterFix": "Time.currentTimeMillis()"
  },
  {
    "bugType": "CHANGE_UNARY_OPERATOR",
    "fixCommitSHA1": "498da9e77cec4d5cb9dfbb1044cb9634f1ff0422",
    "fixCommitParentSHA1": "3e098f12e2b09d4954eeeaaf807e4ff6006a6929",
    "bugFilePath": "storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java",
    "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\nindex 1dda41c..b0116e2 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n@@ -381,7 +381,7 @@\n      * @return the updated dynamicState\n      */\n     private static DynamicState filterChangingBlobsFor(DynamicState dynamicState, final LocalAssignment assignment) {\n-        if (!dynamicState.changingBlobs.isEmpty()) {\n+        if (dynamicState.changingBlobs.isEmpty()) {\n             return dynamicState;\n         }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 384,
    "bugNodeStartChar": 18466,
    "bugNodeLength": 37,
    "fixLineNum": 384,
    "fixNodeStartChar": 18466,
    "fixNodeLength": 36,
    "sourceBeforeFix": "!dynamicState.changingBlobs.isEmpty()",
    "sourceAfterFix": "dynamicState.changingBlobs.isEmpty()"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "c78eb0d522e97cc00136b46e1188ba08a5ca9d9c",
    "fixCommitParentSHA1": "559053dec9cd3e6b46cb71323a64c9e0c2e86838",
    "bugFilePath": "external/storm-autocreds/src/main/java/org/apache/storm/hbase/security/HBaseSecurityUtil.java",
    "fixPatch": "diff --git a/external/storm-autocreds/src/main/java/org/apache/storm/hbase/security/HBaseSecurityUtil.java b/external/storm-autocreds/src/main/java/org/apache/storm/hbase/security/HBaseSecurityUtil.java\nindex 65dcd6f..1afdf63 100644\n--- a/external/storm-autocreds/src/main/java/org/apache/storm/hbase/security/HBaseSecurityUtil.java\n+++ b/external/storm-autocreds/src/main/java/org/apache/storm/hbase/security/HBaseSecurityUtil.java\n@@ -45,7 +45,7 @@\n     public static final String HBASE_KEYTAB_FILE_KEY = \"hbase.keytab.file\";\n     public static final String HBASE_PRINCIPAL_KEY = \"hbase.kerberos.principal\";\n \n-    private static UserProvider legacyProvider = null;\n+    private static volatile UserProvider legacyProvider = null;\n \n     private HBaseSecurityUtil() {\n     }\n",
    "projectName": "apache.storm",
    "bugLineNum": 48,
    "bugNodeStartChar": 1941,
    "bugNodeLength": 50,
    "fixLineNum": 48,
    "fixNodeStartChar": 1941,
    "fixNodeLength": 59,
    "sourceBeforeFix": "10",
    "sourceAfterFix": "74"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1274b076e0f5efb4d4114ecf61d985b2000b2d46",
    "fixCommitParentSHA1": "bba4df4514240d9fb88a25cbe4d4e6448f1f1a82",
    "bugFilePath": "external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java",
    "fixPatch": "diff --git a/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java b/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\nindex a391fc6..0028b87 100644\n--- a/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\n+++ b/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\n@@ -38,7 +38,7 @@\n import java.io.IOException;\n \n public class JsonRecordHiveMapper implements HiveMapper {\n-    private static final Logger LOG = LoggerFactory.getLogger(DelimitedRecordHiveMapper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;\n",
    "projectName": "apache.storm",
    "bugLineNum": 41,
    "bugNodeStartChar": 1621,
    "bugNodeLength": 31,
    "fixLineNum": 41,
    "fixNodeStartChar": 1621,
    "fixNodeLength": 26,
    "sourceBeforeFix": "DelimitedRecordHiveMapper.class",
    "sourceAfterFix": "JsonRecordHiveMapper.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7340590ceb9549eb3fe8bc443ba9576260d337cc",
    "fixCommitParentSHA1": "4966d7a69318d2ca690c47dd43466b03574e5e9e",
    "bugFilePath": "external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java",
    "fixPatch": "diff --git a/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java b/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\nindex a391fc6..0028b87 100644\n--- a/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\n+++ b/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\n@@ -38,7 +38,7 @@\n import java.io.IOException;\n \n public class JsonRecordHiveMapper implements HiveMapper {\n-    private static final Logger LOG = LoggerFactory.getLogger(DelimitedRecordHiveMapper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;\n",
    "projectName": "apache.storm",
    "bugLineNum": 41,
    "bugNodeStartChar": 1621,
    "bugNodeLength": 31,
    "fixLineNum": 41,
    "fixNodeStartChar": 1621,
    "fixNodeLength": 26,
    "sourceBeforeFix": "DelimitedRecordHiveMapper.class",
    "sourceAfterFix": "JsonRecordHiveMapper.class"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "cc590a263a42e0c624efcc8bcb8d0729f14b7e27",
    "fixCommitParentSHA1": "d6b69a7cad3ccda634e06dbabdc52338a03b5a8b",
    "bugFilePath": "external/storm-kafka/src/test/org/apache/storm/kafka/bolt/KafkaBoltTest.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/test/org/apache/storm/kafka/bolt/KafkaBoltTest.java b/external/storm-kafka/src/test/org/apache/storm/kafka/bolt/KafkaBoltTest.java\nindex cccbce0..3b8bea1 100644\n--- a/external/storm-kafka/src/test/org/apache/storm/kafka/bolt/KafkaBoltTest.java\n+++ b/external/storm-kafka/src/test/org/apache/storm/kafka/bolt/KafkaBoltTest.java\n@@ -97,7 +97,7 @@\n     }\n \n     @Test\n-    public void shouldAcknowledgeTickTuples() throws Exception {\n+    public void shouldNotAcknowledgeTickTuples() throws Exception {\n         // Given\n         Tuple tickTuple = mockTickTuple();\n \n@@ -105,7 +105,7 @@\n         bolt.execute(tickTuple);\n \n         // Then\n-        verify(collector).ack(tickTuple);\n+        verify(collector, never()).ack(tickTuple);\n     }\n \n     @Test\n",
    "projectName": "apache.storm",
    "bugLineNum": 108,
    "bugNodeStartChar": 3876,
    "bugNodeLength": 17,
    "fixLineNum": 108,
    "fixNodeStartChar": 3876,
    "fixNodeLength": 26,
    "sourceBeforeFix": "verify(collector)",
    "sourceAfterFix": "verify(collector,never())"
  },
  {
    "bugType": "ADD_THROWS_EXCEPTION",
    "fixCommitSHA1": "03e6b841960d7061de6a7dbd01e24dc535594819",
    "fixCommitParentSHA1": "9e898247845f99392fe0b714a6df39fe2cfc5fe7",
    "bugFilePath": "examples/storm-starter/src/jvm/org/apache/storm/starter/JoinBoltExample.java",
    "fixPatch": "diff --git a/examples/storm-starter/src/jvm/org/apache/storm/starter/JoinBoltExample.java b/examples/storm-starter/src/jvm/org/apache/storm/starter/JoinBoltExample.java\nindex ec9b009..a8359fa 100644\n--- a/examples/storm-starter/src/jvm/org/apache/storm/starter/JoinBoltExample.java\n+++ b/examples/storm-starter/src/jvm/org/apache/storm/starter/JoinBoltExample.java\n@@ -31,7 +31,7 @@\n import java.util.concurrent.TimeUnit;\n \n public class JoinBoltExample {\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n \n         FeederSpout genderSpout = new FeederSpout(new Fields(\"id\", \"gender\"));\n         FeederSpout ageSpout = new FeederSpout(new Fields(\"id\", \"age\"));\n",
    "projectName": "apache.storm",
    "bugLineNum": 34,
    "bugNodeStartChar": 1336,
    "bugNodeLength": 1332,
    "fixLineNum": 34,
    "fixNodeStartChar": 1336,
    "fixNodeLength": 1349,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "9"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "fixCommitSHA1": "1e30adc5ff63f184226e8dfaf6002cbb87208377",
    "fixCommitParentSHA1": "ea676940c67f5b5176e74e86d83a0055ce52a498",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java b/storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java\nindex 442457d..21308fd 100644\n--- a/storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java\n+++ b/storm-core/src/jvm/org/apache/storm/daemon/DrpcServer.java\n@@ -118,7 +118,7 @@\n         if (drpcHttpPort != null && drpcHttpPort > 0) {\n             String filterClass = (String) (conf.get(Config.DRPC_HTTP_FILTER));\n             Map<String, String> filterParams = (Map<String, String>) (conf.get(Config.DRPC_HTTP_FILTER_PARAMS));\n-            FilterConfiguration filterConfiguration = new FilterConfiguration(filterParams, filterClass);\n+            FilterConfiguration filterConfiguration = new FilterConfiguration(filterClass, filterParams);\n             final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);\n             final Integer httpsPort = Utils.getInt(conf.get(Config.DRPC_HTTPS_PORT), 0);\n             final String httpsKsPath = (String) (conf.get(Config.DRPC_HTTPS_KEYSTORE_PATH));\n",
    "projectName": "apache.storm",
    "bugLineNum": 121,
    "bugNodeStartChar": 5228,
    "bugNodeLength": 50,
    "fixLineNum": 121,
    "fixNodeStartChar": 5228,
    "fixNodeLength": 50,
    "sourceBeforeFix": "new FilterConfiguration(filterParams,filterClass)",
    "sourceAfterFix": "new FilterConfiguration(filterClass,filterParams)"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "7f0479fba3c7c97288a8cadc856cfd1dfda3ca4a",
    "fixCommitParentSHA1": "32c83d8c614b6f1589d628825e69d037cd441321",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java b/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java\nindex 0bb36e8..f3ffa45 100644\n--- a/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java\n+++ b/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java\n@@ -250,7 +250,7 @@\n     private void freeCPU(double amount) {\n         LOG.debug(\"freeing {} CPU on node...avail CPU: {}\", amount, getHostname(), _availCPU);\n         if ((_availCPU + amount) > getTotalCpuResources()) {\n-            LOG.warn(\"Freeing more CPU than there exists! CPU trying to free: {} Total CPU on Node: {}\", (_availMemory + amount), getTotalCpuResources());\n+            LOG.warn(\"Freeing more CPU than there exists! CPU trying to free: {} Total CPU on Node: {}\", (_availCPU + amount), getTotalCpuResources());\n             return;\n         }\n         _availCPU += amount;\n",
    "projectName": "apache.storm",
    "bugLineNum": 253,
    "bugNodeStartChar": 8975,
    "bugNodeLength": 21,
    "fixLineNum": 253,
    "fixNodeStartChar": 8975,
    "fixNodeLength": 18,
    "sourceBeforeFix": "_availMemory + amount",
    "sourceAfterFix": "_availCPU + amount"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "7f0479fba3c7c97288a8cadc856cfd1dfda3ca4a",
    "fixCommitParentSHA1": "32c83d8c614b6f1589d628825e69d037cd441321",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java b/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java\nindex 0bb36e8..f3ffa45 100644\n--- a/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java\n+++ b/storm-core/src/jvm/org/apache/storm/scheduler/resource/RAS_Node.java\n@@ -250,7 +250,7 @@\n     private void freeCPU(double amount) {\n         LOG.debug(\"freeing {} CPU on node...avail CPU: {}\", amount, getHostname(), _availCPU);\n         if ((_availCPU + amount) > getTotalCpuResources()) {\n-            LOG.warn(\"Freeing more CPU than there exists! CPU trying to free: {} Total CPU on Node: {}\", (_availMemory + amount), getTotalCpuResources());\n+            LOG.warn(\"Freeing more CPU than there exists! CPU trying to free: {} Total CPU on Node: {}\", (_availCPU + amount), getTotalCpuResources());\n             return;\n         }\n         _availCPU += amount;\n",
    "projectName": "apache.storm",
    "bugLineNum": 253,
    "bugNodeStartChar": 8975,
    "bugNodeLength": 21,
    "fixLineNum": 253,
    "fixNodeStartChar": 8975,
    "fixNodeLength": 18,
    "sourceBeforeFix": "_availMemory + amount",
    "sourceAfterFix": "_availCPU + amount"
  },
  {
    "bugType": "MORE_SPECIFIC_IF",
    "fixCommitSHA1": "7cf7647e546201d3f175860526888cd92b3927b3",
    "fixCommitParentSHA1": "da5c3acd7e5123876566db6ddf2d8de2b4a3506e",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java b/storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java\nindex ba1c830..7a5066b 100644\n--- a/storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java\n+++ b/storm-core/src/jvm/org/apache/storm/executor/spout/SpoutExecutor.java\n@@ -202,7 +202,7 @@\n             Long id = (Long) tuple.getValue(0);\n             Long timeDeltaMs = (Long) tuple.getValue(1);\n             TupleInfo tupleInfo = (TupleInfo) pending.remove(id);\n-            if (tupleInfo.getMessageId() != null) {\n+            if (tupleInfo != null && tupleInfo.getMessageId() != null) {\n                 if (taskId != tupleInfo.getTaskId()) {\n                     throw new RuntimeException(\"Fatal error, mismatched task ids: \" + taskId + \" \" + tupleInfo.getTaskId());\n                 }\n",
    "projectName": "apache.storm",
    "bugLineNum": 205,
    "bugNodeStartChar": 9384,
    "bugNodeLength": 32,
    "fixLineNum": 205,
    "fixNodeStartChar": 9384,
    "fixNodeLength": 53,
    "sourceBeforeFix": "tupleInfo.getMessageId() != null",
    "sourceAfterFix": "tupleInfo != null && tupleInfo.getMessageId() != null"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "55c9e1fc7d030a0a381af34ba726cf2d4a19e953",
    "fixCommitParentSHA1": "cf2c6bd5ce8c97b519c9ec822dfda4f8f400455a",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/trident/operation/DefaultResourceDeclarer.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/trident/operation/DefaultResourceDeclarer.java b/storm-core/src/jvm/org/apache/storm/trident/operation/DefaultResourceDeclarer.java\nindex d49011a..b33fc4b 100644\n--- a/storm-core/src/jvm/org/apache/storm/trident/operation/DefaultResourceDeclarer.java\n+++ b/storm-core/src/jvm/org/apache/storm/trident/operation/DefaultResourceDeclarer.java\n@@ -30,7 +30,7 @@\n public class DefaultResourceDeclarer<T extends DefaultResourceDeclarer> implements ResourceDeclarer<T>, ITridentResource {\n \n     private Map<String, Number> resources = new HashMap<>();\n-    private Map conf = Utils.readStormConfig();\n+    private static Map conf = Utils.readStormConfig();\n \n     @Override\n     public T setMemoryLoad(Number onHeap) {\n",
    "projectName": "apache.storm",
    "bugLineNum": 33,
    "bugNodeStartChar": 1374,
    "bugNodeLength": 43,
    "fixLineNum": 33,
    "fixNodeStartChar": 1374,
    "fixNodeLength": 50,
    "sourceBeforeFix": "2",
    "sourceAfterFix": "10"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "0b54767e246d4619cd9f40931b54947da38d317d",
    "fixCommitParentSHA1": "a52e83b833b14f03cb7c742043ba2d0a2933f267",
    "bugFilePath": "external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java",
    "fixPatch": "diff --git a/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java b/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java\nindex cef1a4f..11f329c 100644\n--- a/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java\n+++ b/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java\n@@ -243,7 +243,7 @@\n             LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n             Thread.currentThread().interrupt();\n         } catch (Exception e) {\n-            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + ep, e);\n+            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n         }\n     }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 246,
    "bugNodeStartChar": 9310,
    "bugNodeLength": 66,
    "fixLineNum": 246,
    "fixNodeStartChar": 9310,
    "fixNodeLength": 70,
    "sourceBeforeFix": "\"Interrupted when attempting to close writer for end point: \" + ep",
    "sourceAfterFix": "\"Interrupted when attempting to close writer for end point: \" + eldest"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "0b54767e246d4619cd9f40931b54947da38d317d",
    "fixCommitParentSHA1": "a52e83b833b14f03cb7c742043ba2d0a2933f267",
    "bugFilePath": "external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java",
    "fixPatch": "diff --git a/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java b/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java\nindex cef1a4f..11f329c 100644\n--- a/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java\n+++ b/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java\n@@ -243,7 +243,7 @@\n             LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n             Thread.currentThread().interrupt();\n         } catch (Exception e) {\n-            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + ep, e);\n+            LOG.warn(\"Interrupted when attempting to close writer for end point: \" + eldest, e);\n         }\n     }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 246,
    "bugNodeStartChar": 9310,
    "bugNodeLength": 66,
    "fixLineNum": 246,
    "fixNodeStartChar": 9310,
    "fixNodeLength": 70,
    "sourceBeforeFix": "\"Interrupted when attempting to close writer for end point: \" + ep",
    "sourceAfterFix": "\"Interrupted when attempting to close writer for end point: \" + eldest"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "b7bc9bf9bd0793f2acbf158651e3200b30f97d99",
    "fixCommitParentSHA1": "cc1f6d77962ec96c69cf5af85e4016a9e08ccdcc",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java b/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java\nindex aae4231..1095fff 100644\n--- a/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java\n+++ b/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java\n@@ -94,7 +94,7 @@\n     public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {\n         List<ACL> aclList = null;\n         String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n-        if (Utils.isZkAuthenticationConfiguredStormServer(topoConf)) {\n+        if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) {\n             aclList = new ArrayList<>();\n             ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n             aclList.add(acl1);\n",
    "projectName": "apache.storm",
    "bugLineNum": 97,
    "bugNodeStartChar": 4595,
    "bugNodeLength": 55,
    "fixLineNum": 97,
    "fixNodeStartChar": 4595,
    "fixNodeLength": 52,
    "sourceBeforeFix": "Utils.isZkAuthenticationConfiguredStormServer(topoConf)",
    "sourceAfterFix": "Utils.isZkAuthenticationConfiguredTopology(topoConf)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "b7bc9bf9bd0793f2acbf158651e3200b30f97d99",
    "fixCommitParentSHA1": "cc1f6d77962ec96c69cf5af85e4016a9e08ccdcc",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java b/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java\nindex aae4231..1095fff 100644\n--- a/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java\n+++ b/storm-core/src/jvm/org/apache/storm/cluster/ClusterUtils.java\n@@ -94,7 +94,7 @@\n     public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {\n         List<ACL> aclList = null;\n         String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n-        if (Utils.isZkAuthenticationConfiguredStormServer(topoConf)) {\n+        if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) {\n             aclList = new ArrayList<>();\n             ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n             aclList.add(acl1);\n",
    "projectName": "apache.storm",
    "bugLineNum": 97,
    "bugNodeStartChar": 4595,
    "bugNodeLength": 55,
    "fixLineNum": 97,
    "fixNodeStartChar": 4595,
    "fixNodeLength": 52,
    "sourceBeforeFix": "Utils.isZkAuthenticationConfiguredStormServer(topoConf)",
    "sourceAfterFix": "Utils.isZkAuthenticationConfiguredTopology(topoConf)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "72d409c6065de1209ad00289f147b0f65accef16",
    "fixCommitParentSHA1": "f9184624f18094beb1bb7e9f60e5665225dfb0ee",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/scheduler/DefaultScheduler.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/scheduler/DefaultScheduler.java b/storm-core/src/jvm/org/apache/storm/scheduler/DefaultScheduler.java\nindex 774e8fd..764c198 100644\n--- a/storm-core/src/jvm/org/apache/storm/scheduler/DefaultScheduler.java\n+++ b/storm-core/src/jvm/org/apache/storm/scheduler/DefaultScheduler.java\n@@ -38,7 +38,7 @@\n                 Integer workerCount = distribution.get(executorCount);\n                 if (workerCount != null && workerCount > 0) {\n                     slots.add(entry.getKey());\n-                    executorCount--;\n+                    workerCount--;\n                     distribution.put(executorCount, workerCount);\n                 }\n             }\n",
    "projectName": "apache.storm",
    "bugLineNum": 41,
    "bugNodeStartChar": 1766,
    "bugNodeLength": 15,
    "fixLineNum": 41,
    "fixNodeStartChar": 1766,
    "fixNodeLength": 13,
    "sourceBeforeFix": "executorCount--",
    "sourceAfterFix": "workerCount--"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "81a287652365a2b0d8e656e61d6d93f668fac845",
    "fixCommitParentSHA1": "31b57e8ab6762cf4539353aee9a0a608a4d73dfa",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java b/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java\nindex aa5ce28..eb72939 100644\n--- a/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java\n+++ b/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java\n@@ -86,7 +86,7 @@\n     public static File getCsvLogDir(Map stormConf) {\n         String csvMetricsLogDirectory = Utils.getString(stormConf.get(Config.STORM_DAEMON_METRICS_REPORTER_CSV_LOG_DIR), null);\n         if (csvMetricsLogDirectory == null) {\n-            csvMetricsLogDirectory = ConfigUtils.absoluteHealthCheckDir(stormConf);\n+            csvMetricsLogDirectory = ConfigUtils.absoluteStormLocalDir(stormConf);\n             csvMetricsLogDirectory = csvMetricsLogDirectory + ConfigUtils.FILE_SEPARATOR + \"csvmetrics\";\n         }\n         File csvMetricsDir = new File(csvMetricsLogDirectory);\n",
    "projectName": "apache.storm",
    "bugLineNum": 89,
    "bugNodeStartChar": 3548,
    "bugNodeLength": 45,
    "fixLineNum": 89,
    "fixNodeStartChar": 3548,
    "fixNodeLength": 44,
    "sourceBeforeFix": "ConfigUtils.absoluteHealthCheckDir(stormConf)",
    "sourceAfterFix": "ConfigUtils.absoluteStormLocalDir(stormConf)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "81a287652365a2b0d8e656e61d6d93f668fac845",
    "fixCommitParentSHA1": "31b57e8ab6762cf4539353aee9a0a608a4d73dfa",
    "bugFilePath": "storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java b/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java\nindex aa5ce28..eb72939 100644\n--- a/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java\n+++ b/storm-core/src/jvm/org/apache/storm/daemon/metrics/MetricsUtils.java\n@@ -86,7 +86,7 @@\n     public static File getCsvLogDir(Map stormConf) {\n         String csvMetricsLogDirectory = Utils.getString(stormConf.get(Config.STORM_DAEMON_METRICS_REPORTER_CSV_LOG_DIR), null);\n         if (csvMetricsLogDirectory == null) {\n-            csvMetricsLogDirectory = ConfigUtils.absoluteHealthCheckDir(stormConf);\n+            csvMetricsLogDirectory = ConfigUtils.absoluteStormLocalDir(stormConf);\n             csvMetricsLogDirectory = csvMetricsLogDirectory + ConfigUtils.FILE_SEPARATOR + \"csvmetrics\";\n         }\n         File csvMetricsDir = new File(csvMetricsLogDirectory);\n",
    "projectName": "apache.storm",
    "bugLineNum": 89,
    "bugNodeStartChar": 3548,
    "bugNodeLength": 45,
    "fixLineNum": 89,
    "fixNodeStartChar": 3548,
    "fixNodeLength": 44,
    "sourceBeforeFix": "ConfigUtils.absoluteHealthCheckDir(stormConf)",
    "sourceAfterFix": "ConfigUtils.absoluteStormLocalDir(stormConf)"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "4a3625a061beee6743bfa953dc3c4a17916224aa",
    "fixCommitParentSHA1": "c5929edae1d644b1093c9c2ded1c98ca62e92ba6",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/utils/Utils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/utils/Utils.java b/storm-core/src/jvm/backtype/storm/utils/Utils.java\nindex b210070..0e70e04 100644\n--- a/storm-core/src/jvm/backtype/storm/utils/Utils.java\n+++ b/storm-core/src/jvm/backtype/storm/utils/Utils.java\n@@ -596,7 +596,7 @@\n     }\n \n \n-    public static IFn loadClojureFn(String namespace, String name) {\n+    public static synchronized IFn loadClojureFn(String namespace, String name) {\n         try {\n             clojure.lang.Compiler.eval(RT.readString(\"(require '\" + namespace + \")\"));\n         } catch (Exception e) {\n",
    "projectName": "apache.storm",
    "bugLineNum": 599,
    "bugNodeStartChar": 21672,
    "bugNodeLength": 347,
    "fixLineNum": 599,
    "fixNodeStartChar": 21672,
    "fixNodeLength": 360,
    "sourceBeforeFix": "9",
    "sourceAfterFix": "41"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "91343205d36eb1f245883d4dd370b9dba91e6a90",
    "fixCommitParentSHA1": "6712e8d7e4cf48e045eb0d46187291296d99a1f2",
    "bugFilePath": "external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java b/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\nindex a30887c..da23718 100644\n--- a/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\n+++ b/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\n@@ -50,14 +50,14 @@\n \n     @Test\n     public void testSingleDelay() throws Exception {\n-        ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(10, 1d, 100);\n+        ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(100, 1d, 1000);\n         manager.failed(TEST_OFFSET);\n         Thread.sleep(5);\n         Long next = manager.nextFailedMessageToRetry();\n         assertNull(\"expect no message ready for retry yet\", next);\n         assertFalse(\"message should not be ready for retry yet\", manager.shouldRetryMsg(TEST_OFFSET));\n \n-        Thread.sleep(10);\n+        Thread.sleep(100);\n         next = manager.nextFailedMessageToRetry();\n         assertEquals(\"expect test offset next available for retry\", TEST_OFFSET, next);\n         assertTrue(\"message should be ready for retry\", manager.shouldRetryMsg(TEST_OFFSET));\n",
    "projectName": "apache.storm",
    "bugLineNum": 60,
    "bugNodeStartChar": 2575,
    "bugNodeLength": 16,
    "fixLineNum": 60,
    "fixNodeStartChar": 2575,
    "fixNodeLength": 17,
    "sourceBeforeFix": "Thread.sleep(10)",
    "sourceAfterFix": "Thread.sleep(100)"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "6712e8d7e4cf48e045eb0d46187291296d99a1f2",
    "fixCommitParentSHA1": "aff470495f4f971be2e094ec66a8c3c42c15f3e7",
    "bugFilePath": "external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java b/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\nindex 11ad5b7..a30887c 100644\n--- a/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\n+++ b/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\n@@ -163,9 +163,9 @@\n \n     @Test\n     public void testMaxBackoff() throws Exception {\n-        final long initial = 10;\n+        final long initial = 100;\n         final double mult = 2d;\n-        final long max = 20;\n+        final long max = 2000;\n         ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);\n \n         long expectedWaitTime = initial;\n",
    "projectName": "apache.storm",
    "bugLineNum": 166,
    "bugNodeStartChar": 7097,
    "bugNodeLength": 12,
    "fixLineNum": 166,
    "fixNodeStartChar": 7097,
    "fixNodeLength": 13,
    "sourceBeforeFix": "initial=10",
    "sourceAfterFix": "initial=100"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "6712e8d7e4cf48e045eb0d46187291296d99a1f2",
    "fixCommitParentSHA1": "aff470495f4f971be2e094ec66a8c3c42c15f3e7",
    "bugFilePath": "external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java b/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\nindex 11ad5b7..a30887c 100644\n--- a/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\n+++ b/external/storm-kafka/src/test/storm/kafka/ExponentialBackoffMsgRetryManagerTest.java\n@@ -163,9 +163,9 @@\n \n     @Test\n     public void testMaxBackoff() throws Exception {\n-        final long initial = 10;\n+        final long initial = 100;\n         final double mult = 2d;\n-        final long max = 20;\n+        final long max = 2000;\n         ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);\n \n         long expectedWaitTime = initial;\n",
    "projectName": "apache.storm",
    "bugLineNum": 168,
    "bugNodeStartChar": 7162,
    "bugNodeLength": 8,
    "fixLineNum": 168,
    "fixNodeStartChar": 7162,
    "fixNodeLength": 10,
    "sourceBeforeFix": "max=20",
    "sourceAfterFix": "max=2000"
  },
  {
    "bugType": "CHANGE_MODIFIER",
    "fixCommitSHA1": "040bbd70cbf3a24389107428fcf4676ef7cdf8b5",
    "fixCommitParentSHA1": "a998c4e9de89e7fa8f893a29e7c84e96f3c93d56",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/windowing/EventImpl.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/windowing/EventImpl.java b/storm-core/src/jvm/backtype/storm/windowing/EventImpl.java\nindex 035f41b..b518e42 100644\n--- a/storm-core/src/jvm/backtype/storm/windowing/EventImpl.java\n+++ b/storm-core/src/jvm/backtype/storm/windowing/EventImpl.java\n@@ -17,7 +17,7 @@\n  */\n package backtype.storm.windowing;\n \n-class EventImpl<T> implements Event<T> {\n+public class EventImpl<T> implements Event<T> {\n     private final T event;\n     private long ts;\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 20,
    "bugNodeStartChar": 838,
    "bugNodeLength": 565,
    "fixLineNum": 20,
    "fixNodeStartChar": 838,
    "fixNodeLength": 572,
    "sourceBeforeFix": "0",
    "sourceAfterFix": "1"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3f1de7052513fe59cca020660a5d34d92287a47d",
    "fixCommitParentSHA1": "3f295965dd0ea0e6d20ed7ecd001590d574af06b",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/blobstore/KeySequenceNumber.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/blobstore/KeySequenceNumber.java b/storm-core/src/jvm/backtype/storm/blobstore/KeySequenceNumber.java\nindex 9307993..2a53828 100644\n--- a/storm-core/src/jvm/backtype/storm/blobstore/KeySequenceNumber.java\n+++ b/storm-core/src/jvm/backtype/storm/blobstore/KeySequenceNumber.java\n@@ -117,7 +117,7 @@\n  *  synchronization happens appropriately and all nimbodes have the same blob.\n  */\n public class KeySequenceNumber {\n-    private static final Logger LOG = LoggerFactory.getLogger(Utils.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(KeySequenceNumber.class);\n     private final String BLOBSTORE_SUBTREE=\"/blobstore\";\n     private final String BLOBSTORE_MAX_KEY_SEQUENCE_SUBTREE=\"/blobstoremaxkeysequencenumber\";\n     private final String key;\n",
    "projectName": "apache.storm",
    "bugLineNum": 120,
    "bugNodeStartChar": 7468,
    "bugNodeLength": 11,
    "fixLineNum": 120,
    "fixNodeStartChar": 7468,
    "fixNodeLength": 23,
    "sourceBeforeFix": "Utils.class",
    "sourceAfterFix": "KeySequenceNumber.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "3f295965dd0ea0e6d20ed7ecd001590d574af06b",
    "fixCommitParentSHA1": "b41f45022e7919093bb431cd2c588dd9245b57c1",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/blobstore/BlobStoreUtils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/blobstore/BlobStoreUtils.java b/storm-core/src/jvm/backtype/storm/blobstore/BlobStoreUtils.java\nindex 5e39743..97fb262 100644\n--- a/storm-core/src/jvm/backtype/storm/blobstore/BlobStoreUtils.java\n+++ b/storm-core/src/jvm/backtype/storm/blobstore/BlobStoreUtils.java\n@@ -43,7 +43,7 @@\n \n public class BlobStoreUtils {\n     private static final String BLOBSTORE_SUBTREE=\"/blobstore\";\n-    private static final Logger LOG = LoggerFactory.getLogger(Utils.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(BlobStoreUtils.class);\n \n     public static CuratorFramework createZKClient(Map conf) {\n         List<String> zkServers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n",
    "projectName": "apache.storm",
    "bugLineNum": 46,
    "bugNodeStartChar": 1842,
    "bugNodeLength": 11,
    "fixLineNum": 46,
    "fixNodeStartChar": 1842,
    "fixNodeLength": 20,
    "sourceBeforeFix": "Utils.class",
    "sourceAfterFix": "BlobStoreUtils.class"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "fc0391038c7d839487a2cafce55519d246974b13",
    "fixCommitParentSHA1": "9a25ab79b4457c4ed98b64c96218e0462efe72c4",
    "bugFilePath": "external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java",
    "fixPatch": "diff --git a/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java b/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java\nindex 34e2eba..d470892 100644\n--- a/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java\n+++ b/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java\n@@ -78,13 +78,13 @@\n             conf = new Config();\n         }\n \n-        if (conf.containsKey(\"topology.message.timeout.secs\") && tickTupleInterval == 0) {\n+        if (conf.containsKey(\"topology.message.timeout.secs\") && flushIntervalSecs == 0) {\n             Integer topologyTimeout = Integer.parseInt(conf.get(\"topology.message.timeout.secs\").toString());\n             flushIntervalSecs = (int)(Math.floor(topologyTimeout / 2));\n-            LOG.debug(\"Setting flush interval to [\" + flushIntervalSecs + \"] based on topology.message.timeout.secs\");\n+            LOG.debug(\"Setting flush interval to [{}] based on topology.message.timeout.secs\", flushIntervalSecs);\n         }\n \n-        LOG.info(\"Enabling tick tuple with interval [\" + flushIntervalSecs + \"]\");\n+        LOG.info(\"Enabling tick tuple with interval [{}]\", flushIntervalSecs);\n         conf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, flushIntervalSecs);\n         return conf;\n     }\n",
    "projectName": "apache.storm",
    "bugLineNum": 81,
    "bugNodeStartChar": 2670,
    "bugNodeLength": 22,
    "fixLineNum": 81,
    "fixNodeStartChar": 2670,
    "fixNodeLength": 22,
    "sourceBeforeFix": "tickTupleInterval == 0",
    "sourceAfterFix": "flushIntervalSecs == 0"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "fc0391038c7d839487a2cafce55519d246974b13",
    "fixCommitParentSHA1": "9a25ab79b4457c4ed98b64c96218e0462efe72c4",
    "bugFilePath": "external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java",
    "fixPatch": "diff --git a/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java b/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java\nindex 34e2eba..d470892 100644\n--- a/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java\n+++ b/external/storm-hbase/src/main/java/org/apache/storm/hbase/bolt/HBaseBolt.java\n@@ -78,13 +78,13 @@\n             conf = new Config();\n         }\n \n-        if (conf.containsKey(\"topology.message.timeout.secs\") && tickTupleInterval == 0) {\n+        if (conf.containsKey(\"topology.message.timeout.secs\") && flushIntervalSecs == 0) {\n             Integer topologyTimeout = Integer.parseInt(conf.get(\"topology.message.timeout.secs\").toString());\n             flushIntervalSecs = (int)(Math.floor(topologyTimeout / 2));\n-            LOG.debug(\"Setting flush interval to [\" + flushIntervalSecs + \"] based on topology.message.timeout.secs\");\n+            LOG.debug(\"Setting flush interval to [{}] based on topology.message.timeout.secs\", flushIntervalSecs);\n         }\n \n-        LOG.info(\"Enabling tick tuple with interval [\" + flushIntervalSecs + \"]\");\n+        LOG.info(\"Enabling tick tuple with interval [{}]\", flushIntervalSecs);\n         conf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, flushIntervalSecs);\n         return conf;\n     }\n",
    "projectName": "apache.storm",
    "bugLineNum": 81,
    "bugNodeStartChar": 2670,
    "bugNodeLength": 22,
    "fixLineNum": 81,
    "fixNodeStartChar": 2670,
    "fixNodeLength": 22,
    "sourceBeforeFix": "tickTupleInterval == 0",
    "sourceAfterFix": "flushIntervalSecs == 0"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "8b845392e920d753eb24fcffead0263416bc6227",
    "fixCommitParentSHA1": "4523e54eba2ca7cf4b95aa664daa175fa0ae8185",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/Client.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\nindex 08f5d2a..8e66193 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n@@ -317,7 +317,7 @@\n      * If the write operation fails, then we will close the channel and trigger a reconnect.\n      */\n     private void flushMessages(Channel channel, final MessageBatch batch) {\n-        if(batch.isEmpty()){\n+        if(null == batch || batch.isEmpty()){\n             return;\n         }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 320,
    "bugNodeStartChar": 12469,
    "bugNodeLength": 15,
    "fixLineNum": 320,
    "fixNodeStartChar": 12469,
    "fixNodeLength": 32,
    "sourceBeforeFix": "batch.isEmpty()",
    "sourceAfterFix": "null == batch || batch.isEmpty()"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "5141440bbd267ca954b19b990b77781b7795bd7b",
    "fixCommitParentSHA1": "9906f85d5267d092c61d2e3d532f80feb0886648",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java b/storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java\nindex 932af16..1f2110d 100644\n--- a/storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java\n+++ b/storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java\n@@ -94,7 +94,7 @@\n     public void consumeBatchWhenAvailable(EventHandler<Object> handler) {\n         try {\n             final long nextSequence = _consumer.get() + 1;\n-            final long availableSequence = _barrier.waitFor(nextSequence, 10, TimeUnit.MILLISECONDS);\n+            final long availableSequence = _barrier.waitFor(nextSequence, 1000, TimeUnit.MILLISECONDS);\n             if(availableSequence >= nextSequence) {\n                 consumeBatchToCursor(availableSequence, handler);\n             }\n",
    "projectName": "apache.storm",
    "bugLineNum": 97,
    "bugNodeStartChar": 3735,
    "bugNodeLength": 57,
    "fixLineNum": 97,
    "fixNodeStartChar": 3735,
    "fixNodeLength": 59,
    "sourceBeforeFix": "_barrier.waitFor(nextSequence,10,TimeUnit.MILLISECONDS)",
    "sourceAfterFix": "_barrier.waitFor(nextSequence,1000,TimeUnit.MILLISECONDS)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "93b1b656013a941b03c51936ea2c95cd7952fbc5",
    "fixCommitParentSHA1": "47bcf3ebe7067e86846057cbca2466d7349b0d98",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java b/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java\nindex 89ef028..8653010 100644\n--- a/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java\n+++ b/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java\n@@ -103,6 +103,6 @@\n     }\n     \n     private IBatchBolt newTransactionalBolt() {\n-        return Utils.deserialize(_boltSer, IBatchBolt.class);\n+        return Utils.javaDeserialize(_boltSer, IBatchBolt.class);\n     }\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 106,
    "bugNodeStartChar": 3540,
    "bugNodeLength": 45,
    "fixLineNum": 106,
    "fixNodeStartChar": 3540,
    "fixNodeLength": 49,
    "sourceBeforeFix": "Utils.deserialize(_boltSer,IBatchBolt.class)",
    "sourceAfterFix": "Utils.javaDeserialize(_boltSer,IBatchBolt.class)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "93b1b656013a941b03c51936ea2c95cd7952fbc5",
    "fixCommitParentSHA1": "47bcf3ebe7067e86846057cbca2466d7349b0d98",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java b/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java\nindex 89ef028..8653010 100644\n--- a/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java\n+++ b/storm-core/src/jvm/backtype/storm/coordination/BatchBoltExecutor.java\n@@ -103,6 +103,6 @@\n     }\n     \n     private IBatchBolt newTransactionalBolt() {\n-        return Utils.deserialize(_boltSer, IBatchBolt.class);\n+        return Utils.javaDeserialize(_boltSer, IBatchBolt.class);\n     }\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 106,
    "bugNodeStartChar": 3540,
    "bugNodeLength": 45,
    "fixLineNum": 106,
    "fixNodeStartChar": 3540,
    "fixNodeLength": 49,
    "sourceBeforeFix": "Utils.deserialize(_boltSer,IBatchBolt.class)",
    "sourceAfterFix": "Utils.javaDeserialize(_boltSer,IBatchBolt.class)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "522d96e5953037728422935d31401a58e943c688",
    "fixCommitParentSHA1": "006134383ed448084e358f993e34f12ba5b45dcf",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/Client.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\nindex 189fa95..7392d3e 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n@@ -358,7 +358,7 @@\n     public synchronized void send(Iterator<TaskMessage> msgs) {\n         if (closing) {\n             int numMessages = iteratorSize(msgs);\n-            LOG.warn(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n+            LOG.error(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n                 dstAddressPrefixedName);\n             return;\n         }\n@@ -475,7 +475,7 @@\n                     messagesSent.getAndAdd(batch.size());\n                 }\n                 else {\n-                    LOG.warn(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n+                    LOG.error(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n                         future.getCause());\n                     closeChannelAndReconnect(future.getChannel());\n                     messagesLost.getAndAdd(numMessages);\n",
    "projectName": "apache.storm",
    "bugLineNum": 361,
    "bugNodeStartChar": 14817,
    "bugNodeLength": 134,
    "fixLineNum": 361,
    "fixNodeStartChar": 14817,
    "fixNodeLength": 135,
    "sourceBeforeFix": "LOG.warn(\"discarding {} messages because the Netty client to {} is being closed\",numMessages,dstAddressPrefixedName)",
    "sourceAfterFix": "LOG.error(\"discarding {} messages because the Netty client to {} is being closed\",numMessages,dstAddressPrefixedName)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "522d96e5953037728422935d31401a58e943c688",
    "fixCommitParentSHA1": "006134383ed448084e358f993e34f12ba5b45dcf",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/Client.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\nindex 189fa95..7392d3e 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n@@ -358,7 +358,7 @@\n     public synchronized void send(Iterator<TaskMessage> msgs) {\n         if (closing) {\n             int numMessages = iteratorSize(msgs);\n-            LOG.warn(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n+            LOG.error(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n                 dstAddressPrefixedName);\n             return;\n         }\n@@ -475,7 +475,7 @@\n                     messagesSent.getAndAdd(batch.size());\n                 }\n                 else {\n-                    LOG.warn(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n+                    LOG.error(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n                         future.getCause());\n                     closeChannelAndReconnect(future.getChannel());\n                     messagesLost.getAndAdd(numMessages);\n",
    "projectName": "apache.storm",
    "bugLineNum": 361,
    "bugNodeStartChar": 14817,
    "bugNodeLength": 134,
    "fixLineNum": 361,
    "fixNodeStartChar": 14817,
    "fixNodeLength": 135,
    "sourceBeforeFix": "LOG.warn(\"discarding {} messages because the Netty client to {} is being closed\",numMessages,dstAddressPrefixedName)",
    "sourceAfterFix": "LOG.error(\"discarding {} messages because the Netty client to {} is being closed\",numMessages,dstAddressPrefixedName)"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "522d96e5953037728422935d31401a58e943c688",
    "fixCommitParentSHA1": "006134383ed448084e358f993e34f12ba5b45dcf",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/Client.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\nindex 189fa95..7392d3e 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n@@ -358,7 +358,7 @@\n     public synchronized void send(Iterator<TaskMessage> msgs) {\n         if (closing) {\n             int numMessages = iteratorSize(msgs);\n-            LOG.warn(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n+            LOG.error(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n                 dstAddressPrefixedName);\n             return;\n         }\n@@ -475,7 +475,7 @@\n                     messagesSent.getAndAdd(batch.size());\n                 }\n                 else {\n-                    LOG.warn(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n+                    LOG.error(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n                         future.getCause());\n                     closeChannelAndReconnect(future.getChannel());\n                     messagesLost.getAndAdd(numMessages);\n",
    "projectName": "apache.storm",
    "bugLineNum": 478,
    "bugNodeStartChar": 19822,
    "bugNodeLength": 128,
    "fixLineNum": 478,
    "fixNodeStartChar": 19822,
    "fixNodeLength": 129,
    "sourceBeforeFix": "LOG.warn(\"failed to send {} messages to {}: {}\",numMessages,dstAddressPrefixedName,future.getCause())",
    "sourceAfterFix": "LOG.error(\"failed to send {} messages to {}: {}\",numMessages,dstAddressPrefixedName,future.getCause())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "522d96e5953037728422935d31401a58e943c688",
    "fixCommitParentSHA1": "006134383ed448084e358f993e34f12ba5b45dcf",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/Client.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\nindex 189fa95..7392d3e 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/Client.java\n@@ -358,7 +358,7 @@\n     public synchronized void send(Iterator<TaskMessage> msgs) {\n         if (closing) {\n             int numMessages = iteratorSize(msgs);\n-            LOG.warn(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n+            LOG.error(\"discarding {} messages because the Netty client to {} is being closed\", numMessages,\n                 dstAddressPrefixedName);\n             return;\n         }\n@@ -475,7 +475,7 @@\n                     messagesSent.getAndAdd(batch.size());\n                 }\n                 else {\n-                    LOG.warn(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n+                    LOG.error(\"failed to send {} messages to {}: {}\", numMessages, dstAddressPrefixedName,\n                         future.getCause());\n                     closeChannelAndReconnect(future.getChannel());\n                     messagesLost.getAndAdd(numMessages);\n",
    "projectName": "apache.storm",
    "bugLineNum": 478,
    "bugNodeStartChar": 19822,
    "bugNodeLength": 128,
    "fixLineNum": 478,
    "fixNodeStartChar": 19822,
    "fixNodeLength": 129,
    "sourceBeforeFix": "LOG.warn(\"failed to send {} messages to {}: {}\",numMessages,dstAddressPrefixedName,future.getCause())",
    "sourceAfterFix": "LOG.error(\"failed to send {} messages to {}: {}\",numMessages,dstAddressPrefixedName,future.getCause())"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "f217096cd36383639a7f7384e6ce34c78cf5d954",
    "fixCommitParentSHA1": "396bc61992e1c41407b9ed92c02260d467a5ea8e",
    "bugFilePath": "external/storm-jdbc/src/test/java/org/apache/storm/jdbc/topology/AbstractUserTopology.java",
    "fixPatch": "diff --git a/external/storm-jdbc/src/test/java/org/apache/storm/jdbc/topology/AbstractUserTopology.java b/external/storm-jdbc/src/test/java/org/apache/storm/jdbc/topology/AbstractUserTopology.java\nindex 700f83e..6d2f8e9 100644\n--- a/external/storm-jdbc/src/test/java/org/apache/storm/jdbc/topology/AbstractUserTopology.java\n+++ b/external/storm-jdbc/src/test/java/org/apache/storm/jdbc/topology/AbstractUserTopology.java\n@@ -93,7 +93,7 @@\n             cluster.shutdown();\n             System.exit(0);\n         } else {\n-            StormSubmitter.submitTopology(args[5], config, getTopology());\n+            StormSubmitter.submitTopology(args[4], config, getTopology());\n         }\n     }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 96,
    "bugNodeStartChar": 4476,
    "bugNodeLength": 7,
    "fixLineNum": 96,
    "fixNodeStartChar": 4476,
    "fixNodeLength": 7,
    "sourceBeforeFix": "args[5]",
    "sourceAfterFix": "args[4]"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d34037d2d2b1a1e635d708e9367c5a29d2505eff",
    "fixCommitParentSHA1": "95abbc501c8f29d08dcd1e6200e7ded65c41512e",
    "bugFilePath": "external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java b/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\nindex c228c19..fa5f7e5 100644\n--- a/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\n+++ b/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\n@@ -161,7 +161,7 @@\n         try {\n             msgs = KafkaUtils.fetchMessages(_spoutConfig, _consumer, _partition, offset);\n         } catch (UpdateOffsetException e) {\n-            offset = e.startOffset;\n+            _emittedToOffset = e.startOffset;\n         }\n         long end = System.nanoTime();\n         long millis = (end - start) / 1000000;\n",
    "projectName": "apache.storm",
    "bugLineNum": 164,
    "bugNodeStartChar": 7103,
    "bugNodeLength": 22,
    "fixLineNum": 164,
    "fixNodeStartChar": 7103,
    "fixNodeLength": 32,
    "sourceBeforeFix": "offset=e.startOffset",
    "sourceAfterFix": "_emittedToOffset=e.startOffset"
  },
  {
    "bugType": "SWAP_ARGUMENTS",
    "fixCommitSHA1": "24749f1b18508de151e892dbb756c721bec29f1b",
    "fixCommitParentSHA1": "e9ee271e20607ced950da075cbf998d616296dc1",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/utils/Utils.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/utils/Utils.java b/storm-core/src/jvm/backtype/storm/utils/Utils.java\nindex 2c91ec5..77580c4 100644\n--- a/storm-core/src/jvm/backtype/storm/utils/Utils.java\n+++ b/storm-core/src/jvm/backtype/storm/utils/Utils.java\n@@ -361,8 +361,8 @@\n                 .sessionTimeoutMs(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT)))\n                 .retryPolicy(new StormBoundedExponentialBackoffRetry(\n                             Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),\n-                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),\n-                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING))));\n+                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),\n+                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES))));\n         if(auth!=null && auth.scheme!=null) {\n             builder = builder.authorization(auth.scheme, auth.payload);\n         }\n",
    "projectName": "apache.storm",
    "bugLineNum": 362,
    "bugNodeStartChar": 12700,
    "bugNodeLength": 318,
    "fixLineNum": 362,
    "fixNodeStartChar": 12700,
    "fixNodeLength": 318,
    "sourceBeforeFix": "new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)))",
    "sourceAfterFix": "new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)))"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "cea872d4e9317601eed60f7fa0a9a831446f41be",
    "fixCommitParentSHA1": "b1ccc153d924a971d2f1303023b969f8c975b238",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/task/ShellBolt.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\nindex f34d465..17938dc 100644\n--- a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n+++ b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n@@ -241,8 +241,8 @@\n \n     private void die(Throwable exception) {\n         _exception = exception;\n-        LOG.info(\"Halting process: ShellBolt died.\", exception);\n+        LOG.error(\"Halting process: ShellBolt died.\", exception);\n         _collector.reportError(exception);\n-        Runtime.getRuntime().halt(11);\n+        System.exit(11);\n     }\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 244,
    "bugNodeStartChar": 9157,
    "bugNodeLength": 55,
    "fixLineNum": 244,
    "fixNodeStartChar": 9157,
    "fixNodeLength": 56,
    "sourceBeforeFix": "LOG.info(\"Halting process: ShellBolt died.\",exception)",
    "sourceAfterFix": "LOG.error(\"Halting process: ShellBolt died.\",exception)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "cea872d4e9317601eed60f7fa0a9a831446f41be",
    "fixCommitParentSHA1": "b1ccc153d924a971d2f1303023b969f8c975b238",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/task/ShellBolt.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\nindex f34d465..17938dc 100644\n--- a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n+++ b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n@@ -241,8 +241,8 @@\n \n     private void die(Throwable exception) {\n         _exception = exception;\n-        LOG.info(\"Halting process: ShellBolt died.\", exception);\n+        LOG.error(\"Halting process: ShellBolt died.\", exception);\n         _collector.reportError(exception);\n-        Runtime.getRuntime().halt(11);\n+        System.exit(11);\n     }\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 244,
    "bugNodeStartChar": 9157,
    "bugNodeLength": 55,
    "fixLineNum": 244,
    "fixNodeStartChar": 9157,
    "fixNodeLength": 56,
    "sourceBeforeFix": "LOG.info(\"Halting process: ShellBolt died.\",exception)",
    "sourceAfterFix": "LOG.error(\"Halting process: ShellBolt died.\",exception)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2ea202704a509c0bea14438beb65443f33517ebc",
    "fixCommitParentSHA1": "bf8e4565562dcf7a4a9d3087fbe5206269e19a90",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/spout/ShellSpout.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/spout/ShellSpout.java b/storm-core/src/jvm/backtype/storm/spout/ShellSpout.java\nindex e3865fc..89502ed 100644\n--- a/storm-core/src/jvm/backtype/storm/spout/ShellSpout.java\n+++ b/storm-core/src/jvm/backtype/storm/spout/ShellSpout.java\n@@ -129,7 +129,7 @@\n                 ShellMsg shellMsg = _process.readShellMsg();\n                 String command = shellMsg.getCommand();\n                 if (command == null) {\n-                    throw new UnsupportedOperationException(\"Command not found in spout message: \" + shellMsg);\n+                    throw new IllegalArgumentException(\"Command not found in spout message: \" + shellMsg);\n                 }\n                 if (command.equals(\"sync\")) {\n                     return;\n",
    "projectName": "apache.storm",
    "bugLineNum": 132,
    "bugNodeStartChar": 4217,
    "bugNodeLength": 84,
    "fixLineNum": 132,
    "fixNodeStartChar": 4217,
    "fixNodeLength": 79,
    "sourceBeforeFix": "new UnsupportedOperationException(\"Command not found in spout message: \" + shellMsg)",
    "sourceAfterFix": "new IllegalArgumentException(\"Command not found in spout message: \" + shellMsg)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "2ea202704a509c0bea14438beb65443f33517ebc",
    "fixCommitParentSHA1": "bf8e4565562dcf7a4a9d3087fbe5206269e19a90",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/task/ShellBolt.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\nindex 946f037..eb9e714 100644\n--- a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n+++ b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n@@ -116,7 +116,7 @@\n \n                         String command = shellMsg.getCommand();\n                         if (command == null) {\n-                            throw new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg);\n+                            throw new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());\n",
    "projectName": "apache.storm",
    "bugLineNum": 119,
    "bugNodeStartChar": 4434,
    "bugNodeLength": 83,
    "fixLineNum": 119,
    "fixNodeStartChar": 4434,
    "fixNodeLength": 78,
    "sourceBeforeFix": "new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg)",
    "sourceAfterFix": "new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg)"
  },
  {
    "bugType": "CHANGE_OPERAND",
    "fixCommitSHA1": "57851bb6be4caec950541bcb1f01529224e52af4",
    "fixCommitParentSHA1": "d448e34812e5cbffe848ce88189a05df1be3226e",
    "bugFilePath": "external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java b/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\nindex d868e50..2c32a2c 100644\n--- a/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\n+++ b/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\n@@ -214,7 +214,7 @@\n \n     public void commit() {\n         long lastCompletedOffset = lastCompletedOffset();\n-        if (lastCompletedOffset != lastCompletedOffset) {\n+        if (_committedTo != lastCompletedOffset) {\n             LOG.debug(\"Writing last completed offset (\" + lastCompletedOffset + \") to ZK for \" + _partition + \" for topology: \" + _topologyInstanceId);\n             Map<Object, Object> data = (Map<Object, Object>) ImmutableMap.builder()\n                     .put(\"topology\", ImmutableMap.of(\"id\", _topologyInstanceId,\n",
    "projectName": "apache.storm",
    "bugLineNum": 217,
    "bugNodeStartChar": 9228,
    "bugNodeLength": 42,
    "fixLineNum": 217,
    "fixNodeStartChar": 9228,
    "fixNodeLength": 35,
    "sourceBeforeFix": "lastCompletedOffset != lastCompletedOffset",
    "sourceAfterFix": "_committedTo != lastCompletedOffset"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "57851bb6be4caec950541bcb1f01529224e52af4",
    "fixCommitParentSHA1": "d448e34812e5cbffe848ce88189a05df1be3226e",
    "bugFilePath": "external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java",
    "fixPatch": "diff --git a/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java b/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\nindex d868e50..2c32a2c 100644\n--- a/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\n+++ b/external/storm-kafka/src/jvm/storm/kafka/PartitionManager.java\n@@ -214,7 +214,7 @@\n \n     public void commit() {\n         long lastCompletedOffset = lastCompletedOffset();\n-        if (lastCompletedOffset != lastCompletedOffset) {\n+        if (_committedTo != lastCompletedOffset) {\n             LOG.debug(\"Writing last completed offset (\" + lastCompletedOffset + \") to ZK for \" + _partition + \" for topology: \" + _topologyInstanceId);\n             Map<Object, Object> data = (Map<Object, Object>) ImmutableMap.builder()\n                     .put(\"topology\", ImmutableMap.of(\"id\", _topologyInstanceId,\n",
    "projectName": "apache.storm",
    "bugLineNum": 217,
    "bugNodeStartChar": 9228,
    "bugNodeLength": 42,
    "fixLineNum": 217,
    "fixNodeStartChar": 9228,
    "fixNodeLength": 35,
    "sourceBeforeFix": "lastCompletedOffset != lastCompletedOffset",
    "sourceAfterFix": "_committedTo != lastCompletedOffset"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "20b4f8b2195a1bf214f63e10b1bbca4690c0290f",
    "fixCommitParentSHA1": "9f9a2a556986cc67452081f0bd763e3ed1da8f75",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/Context.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/Context.java b/storm-core/src/jvm/backtype/storm/messaging/netty/Context.java\nindex 8f2b17f..f592aff 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/Context.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/Context.java\n@@ -63,7 +63,7 @@\n                     Executors.newCachedThreadPool(workerFactory));\n         }\n         \n-        int otherWorkers = Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS)) - 1;\n+        int otherWorkers = Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS), 1) - 1;\n         int poolSize = Math.min(Math.max(1, otherWorkers), MAX_CLIENT_SCHEDULER_THREAD_POOL_SIZE);\n         clientScheduleService = Executors.newScheduledThreadPool(poolSize, new NettyRenameThreadFactory(\"client-schedule-service\"));\n     }\n",
    "projectName": "apache.storm",
    "bugLineNum": 66,
    "bugNodeStartChar": 2825,
    "bugNodeLength": 53,
    "fixLineNum": 66,
    "fixNodeStartChar": 2825,
    "fixNodeLength": 56,
    "sourceBeforeFix": "Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS))",
    "sourceAfterFix": "Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS),1)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "1baf9b7f47f1f1592391a9eb18b3ad0b340f7355",
    "fixCommitParentSHA1": "d85c470747c22fa47a1f914388861b018ce9acc8",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/messaging/netty/StormClientPipelineFactory.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/messaging/netty/StormClientPipelineFactory.java b/storm-core/src/jvm/backtype/storm/messaging/netty/StormClientPipelineFactory.java\nindex 6bad8e3..e6e8b3d 100644\n--- a/storm-core/src/jvm/backtype/storm/messaging/netty/StormClientPipelineFactory.java\n+++ b/storm-core/src/jvm/backtype/storm/messaging/netty/StormClientPipelineFactory.java\n@@ -37,7 +37,7 @@\n         // Encoder\n         pipeline.addLast(\"encoder\", new MessageEncoder());\n         // business logic.\n-        pipeline.addLast(\"handler\", new StormClientHandler(client));\n+        pipeline.addLast(\"handler\", new StormClientErrorHandler(client.name()));\n \n         return pipeline;\n     }\n",
    "projectName": "apache.storm",
    "bugLineNum": 40,
    "bugNodeStartChar": 1568,
    "bugNodeLength": 30,
    "fixLineNum": 40,
    "fixNodeStartChar": 1568,
    "fixNodeLength": 42,
    "sourceBeforeFix": "new StormClientHandler(client)",
    "sourceAfterFix": "new StormClientErrorHandler(client.name())"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "a909a3cf19dc6cabc756c6bde62cace12c18c9fa",
    "fixCommitParentSHA1": "80244bf796ac6fedcbdc74c9e2ca6b7bd58a461d",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/Config.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/Config.java b/storm-core/src/jvm/backtype/storm/Config.java\nindex 8151468..564ad0d 100644\n--- a/storm-core/src/jvm/backtype/storm/Config.java\n+++ b/storm-core/src/jvm/backtype/storm/Config.java\n@@ -777,7 +777,7 @@\n      * to backtype.storm.scheduler.IsolationScheduler to make use of the isolation scheduler.\n      */\n     public static final String ISOLATION_SCHEDULER_MACHINES = \"isolation.scheduler.machines\";\n-    public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Number.class;\n+    public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Map.class;\n \n     public static void setDebug(Map conf, boolean isOn) {\n         conf.put(Config.TOPOLOGY_DEBUG, isOn);\n",
    "projectName": "apache.storm",
    "bugLineNum": 780,
    "bugNodeStartChar": 36624,
    "bugNodeLength": 12,
    "fixLineNum": 780,
    "fixNodeStartChar": 36624,
    "fixNodeLength": 9,
    "sourceBeforeFix": "Number.class",
    "sourceAfterFix": "Map.class"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "049905bb60de3984fe36dc1079649090e3be5dfa",
    "fixCommitParentSHA1": "80244bf796ac6fedcbdc74c9e2ca6b7bd58a461d",
    "bugFilePath": "storm-core/src/jvm/backtype/storm/Config.java",
    "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/Config.java b/storm-core/src/jvm/backtype/storm/Config.java\nindex 8151468..564ad0d 100644\n--- a/storm-core/src/jvm/backtype/storm/Config.java\n+++ b/storm-core/src/jvm/backtype/storm/Config.java\n@@ -777,7 +777,7 @@\n      * to backtype.storm.scheduler.IsolationScheduler to make use of the isolation scheduler.\n      */\n     public static final String ISOLATION_SCHEDULER_MACHINES = \"isolation.scheduler.machines\";\n-    public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Number.class;\n+    public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Map.class;\n \n     public static void setDebug(Map conf, boolean isOn) {\n         conf.put(Config.TOPOLOGY_DEBUG, isOn);\n",
    "projectName": "apache.storm",
    "bugLineNum": 780,
    "bugNodeStartChar": 36624,
    "bugNodeLength": 12,
    "fixLineNum": 780,
    "fixNodeStartChar": 36624,
    "fixNodeLength": 9,
    "sourceBeforeFix": "Number.class",
    "sourceAfterFix": "Map.class"
  },
  {
    "bugType": "DIFFERENT_METHOD_SAME_ARGS",
    "fixCommitSHA1": "d3eda036ed839d344415dbaab471fef4472a8d9b",
    "fixCommitParentSHA1": "3d058660c94d97b15e9700b615a82051b599be34",
    "bugFilePath": "src/jvm/storm/kafka/PartitionManager.java",
    "fixPatch": "diff --git a/src/jvm/storm/kafka/PartitionManager.java b/src/jvm/storm/kafka/PartitionManager.java\nindex 9186953..b9cfd97 100644\n--- a/src/jvm/storm/kafka/PartitionManager.java\n+++ b/src/jvm/storm/kafka/PartitionManager.java\n@@ -151,7 +151,7 @@\n         for(MessageAndOffset msg: msgs) {\n             _pending.add(_emittedToOffset);\n             _waitingToEmit.add(new MessageAndRealOffset(msg.message(), _emittedToOffset));\n-            _emittedToOffset = msg.offset();\n+            _emittedToOffset = msg.nextOffset();\n         }\n         if(numMessages>0) {\n           LOG.info(\"Added \" + numMessages + \" messages from Kafka: \" + _consumer.host() + \":\" + _partition.partition + \" to internal buffers\");\n",
    "projectName": "apache.storm",
    "bugLineNum": 154,
    "bugNodeStartChar": 6436,
    "bugNodeLength": 12,
    "fixLineNum": 154,
    "fixNodeStartChar": 6436,
    "fixNodeLength": 16,
    "sourceBeforeFix": "msg.offset()",
    "sourceAfterFix": "msg.nextOffset()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "d3eda036ed839d344415dbaab471fef4472a8d9b",
    "fixCommitParentSHA1": "3d058660c94d97b15e9700b615a82051b599be34",
    "bugFilePath": "src/jvm/storm/kafka/PartitionManager.java",
    "fixPatch": "diff --git a/src/jvm/storm/kafka/PartitionManager.java b/src/jvm/storm/kafka/PartitionManager.java\nindex 9186953..b9cfd97 100644\n--- a/src/jvm/storm/kafka/PartitionManager.java\n+++ b/src/jvm/storm/kafka/PartitionManager.java\n@@ -151,7 +151,7 @@\n         for(MessageAndOffset msg: msgs) {\n             _pending.add(_emittedToOffset);\n             _waitingToEmit.add(new MessageAndRealOffset(msg.message(), _emittedToOffset));\n-            _emittedToOffset = msg.offset();\n+            _emittedToOffset = msg.nextOffset();\n         }\n         if(numMessages>0) {\n           LOG.info(\"Added \" + numMessages + \" messages from Kafka: \" + _consumer.host() + \":\" + _partition.partition + \" to internal buffers\");\n",
    "projectName": "apache.storm",
    "bugLineNum": 154,
    "bugNodeStartChar": 6436,
    "bugNodeLength": 12,
    "fixLineNum": 154,
    "fixNodeStartChar": 6436,
    "fixNodeLength": 16,
    "sourceBeforeFix": "msg.offset()",
    "sourceAfterFix": "msg.nextOffset()"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "687cc25abdb33ef36b4031632874a8624610e8db",
    "fixCommitParentSHA1": "2718142cb7d112bc0b91a8bf0dc249c60184c716",
    "bugFilePath": "storm-netty/src/jvm/backtype/storm/messaging/netty/ControlMessage.java",
    "fixPatch": "diff --git a/storm-netty/src/jvm/backtype/storm/messaging/netty/ControlMessage.java b/storm-netty/src/jvm/backtype/storm/messaging/netty/ControlMessage.java\nindex 9a7f8cc..ec2292f 100644\n--- a/storm-netty/src/jvm/backtype/storm/messaging/netty/ControlMessage.java\n+++ b/storm-netty/src/jvm/backtype/storm/messaging/netty/ControlMessage.java\n@@ -31,11 +31,10 @@\n \n     /**\n      * encode the current Control Message into a channel buffer\n-     * @param bout\n      * @throws Exception\n      */\n     ChannelBuffer buffer() throws Exception {\n-        ChannelBufferOutputStream bout = new ChannelBufferOutputStream(ChannelBuffers.dynamicBuffer());      \n+        ChannelBufferOutputStream bout = new ChannelBufferOutputStream(ChannelBuffers.buffer(2));      \n         write(bout);\n         bout.close();\n         return bout.buffer();\n",
    "projectName": "apache.storm",
    "bugLineNum": 38,
    "bugNodeStartChar": 1011,
    "bugNodeLength": 30,
    "fixLineNum": 38,
    "fixNodeStartChar": 1011,
    "fixNodeLength": 24,
    "sourceBeforeFix": "ChannelBuffers.dynamicBuffer()",
    "sourceAfterFix": "ChannelBuffers.buffer(2)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "40264637f4188e5a9c2eb72632aeb3b9df275eeb",
    "fixCommitParentSHA1": "dd781136c4ecc557ac9c1e22126fed36efa35c25",
    "bugFilePath": "src/jvm/backtype/storm/task/TopologyContext.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/task/TopologyContext.java b/src/jvm/backtype/storm/task/TopologyContext.java\nindex 872f8a9..b74e691 100644\n--- a/src/jvm/backtype/storm/task/TopologyContext.java\n+++ b/src/jvm/backtype/storm/task/TopologyContext.java\n@@ -208,7 +208,7 @@\n      * You must call this during IBolt::prepare or ISpout::open.\n      * @return The IMetric argument unchanged.\n      */\n-    public IMetric registerMetric(String name, IMetric metric, int timeBucketSizeInSecs) {\n+    public <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs) {\n         if((Boolean)_openOrPrepareWasCalled.deref() == true) {\n             throw new RuntimeException(\"TopologyContext.registerMetric can only be called from within overridden \" + \n                                        \"IBolt::prepare() or ISpout::open() method.\");\n@@ -237,13 +237,13 @@\n     /*\n      * Convinience method for registering ReducedMetric.\n      */\n-    public IMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n+    public ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n         return registerMetric(name, new ReducedMetric(reducer), timeBucketSizeInSecs);\n     }\n     /*\n      * Convinience method for registering CombinedMetric.\n      */\n-    public IMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n+    public CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n         return registerMetric(name, new CombinedMetric(combiner), timeBucketSizeInSecs);\n     }\n }\n\\ No newline at end of file\n",
    "projectName": "apache.storm",
    "bugLineNum": 240,
    "bugNodeStartChar": 8846,
    "bugNodeLength": 181,
    "fixLineNum": 240,
    "fixNodeStartChar": 8846,
    "fixNodeLength": 187,
    "sourceBeforeFix": "public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } ",
    "sourceAfterFix": "public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "40264637f4188e5a9c2eb72632aeb3b9df275eeb",
    "fixCommitParentSHA1": "dd781136c4ecc557ac9c1e22126fed36efa35c25",
    "bugFilePath": "src/jvm/backtype/storm/task/TopologyContext.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/task/TopologyContext.java b/src/jvm/backtype/storm/task/TopologyContext.java\nindex 872f8a9..b74e691 100644\n--- a/src/jvm/backtype/storm/task/TopologyContext.java\n+++ b/src/jvm/backtype/storm/task/TopologyContext.java\n@@ -208,7 +208,7 @@\n      * You must call this during IBolt::prepare or ISpout::open.\n      * @return The IMetric argument unchanged.\n      */\n-    public IMetric registerMetric(String name, IMetric metric, int timeBucketSizeInSecs) {\n+    public <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs) {\n         if((Boolean)_openOrPrepareWasCalled.deref() == true) {\n             throw new RuntimeException(\"TopologyContext.registerMetric can only be called from within overridden \" + \n                                        \"IBolt::prepare() or ISpout::open() method.\");\n@@ -237,13 +237,13 @@\n     /*\n      * Convinience method for registering ReducedMetric.\n      */\n-    public IMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n+    public ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n         return registerMetric(name, new ReducedMetric(reducer), timeBucketSizeInSecs);\n     }\n     /*\n      * Convinience method for registering CombinedMetric.\n      */\n-    public IMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n+    public CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n         return registerMetric(name, new CombinedMetric(combiner), timeBucketSizeInSecs);\n     }\n }\n\\ No newline at end of file\n",
    "projectName": "apache.storm",
    "bugLineNum": 246,
    "bugNodeStartChar": 9105,
    "bugNodeLength": 185,
    "fixLineNum": 246,
    "fixNodeStartChar": 9105,
    "fixNodeLength": 192,
    "sourceBeforeFix": "public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } ",
    "sourceAfterFix": "public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "40264637f4188e5a9c2eb72632aeb3b9df275eeb",
    "fixCommitParentSHA1": "dd781136c4ecc557ac9c1e22126fed36efa35c25",
    "bugFilePath": "src/jvm/storm/trident/operation/TridentOperationContext.java",
    "fixPatch": "diff --git a/src/jvm/storm/trident/operation/TridentOperationContext.java b/src/jvm/storm/trident/operation/TridentOperationContext.java\nindex 75251a5..506347f 100644\n--- a/src/jvm/storm/trident/operation/TridentOperationContext.java\n+++ b/src/jvm/storm/trident/operation/TridentOperationContext.java\n@@ -31,13 +31,13 @@\n         return _topoContext.getThisTaskIndex();\n     }\n \n-    public IMetric registerMetric(String name, IMetric metric, int timeBucketSizeInSecs) {\n+    public <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs) {\n         return _topoContext.registerMetric(name, metric, timeBucketSizeInSecs);\n     }\n-    public IMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n+    public ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n         return _topoContext.registerMetric(name, new ReducedMetric(reducer), timeBucketSizeInSecs);\n     }\n-    public IMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n+    public CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n         return _topoContext.registerMetric(name, new CombinedMetric(combiner), timeBucketSizeInSecs);\n     }\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 37,
    "bugNodeStartChar": 1238,
    "bugNodeLength": 194,
    "fixLineNum": 37,
    "fixNodeStartChar": 1238,
    "fixNodeLength": 200,
    "sourceBeforeFix": "public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } ",
    "sourceAfterFix": "public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "40264637f4188e5a9c2eb72632aeb3b9df275eeb",
    "fixCommitParentSHA1": "dd781136c4ecc557ac9c1e22126fed36efa35c25",
    "bugFilePath": "src/jvm/storm/trident/operation/TridentOperationContext.java",
    "fixPatch": "diff --git a/src/jvm/storm/trident/operation/TridentOperationContext.java b/src/jvm/storm/trident/operation/TridentOperationContext.java\nindex 75251a5..506347f 100644\n--- a/src/jvm/storm/trident/operation/TridentOperationContext.java\n+++ b/src/jvm/storm/trident/operation/TridentOperationContext.java\n@@ -31,13 +31,13 @@\n         return _topoContext.getThisTaskIndex();\n     }\n \n-    public IMetric registerMetric(String name, IMetric metric, int timeBucketSizeInSecs) {\n+    public <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs) {\n         return _topoContext.registerMetric(name, metric, timeBucketSizeInSecs);\n     }\n-    public IMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n+    public ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs) {\n         return _topoContext.registerMetric(name, new ReducedMetric(reducer), timeBucketSizeInSecs);\n     }\n-    public IMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n+    public CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs) {\n         return _topoContext.registerMetric(name, new CombinedMetric(combiner), timeBucketSizeInSecs);\n     }\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 40,
    "bugNodeStartChar": 1437,
    "bugNodeLength": 198,
    "fixLineNum": 40,
    "fixNodeStartChar": 1437,
    "fixNodeLength": 205,
    "sourceBeforeFix": "public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } ",
    "sourceAfterFix": "public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "bd963bca14d8ecd4c2eded3c6354045ebf73d505",
    "fixCommitParentSHA1": "e78a9a703fe213d6fcf35eb5f956e80573ba9881",
    "bugFilePath": "src/jvm/backtype/storm/scheduler/Cluster.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/scheduler/Cluster.java b/src/jvm/backtype/storm/scheduler/Cluster.java\nindex b94bfdd..d268831 100644\n--- a/src/jvm/backtype/storm/scheduler/Cluster.java\n+++ b/src/jvm/backtype/storm/scheduler/Cluster.java\n@@ -33,7 +33,7 @@\n         for (String nodeId : supervisors.keySet()) {\n             SupervisorDetails supervisor = supervisors.get(nodeId);\n             String host = supervisor.getHost();\n-            if (!this.supervisors.containsKey(host)) {\n+            if (!this.hostToId.containsKey(host)) {\n                 this.hostToId.put(host, new ArrayList<String>());\n             }\n             this.hostToId.get(host).add(nodeId);\n",
    "projectName": "apache.storm",
    "bugLineNum": 36,
    "bugNodeStartChar": 1255,
    "bugNodeLength": 16,
    "fixLineNum": 36,
    "fixNodeStartChar": 1255,
    "fixNodeLength": 13,
    "sourceBeforeFix": "this.supervisors",
    "sourceAfterFix": "this.hostToId"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "f7505224102a3d9f3119d2685ba2d03cb594dd19",
    "fixCommitParentSHA1": "ae8435611a7ea51fce9c6ed34365448566316779",
    "bugFilePath": "src/jvm/storm/trident/state/Serializer.java",
    "fixPatch": "diff --git a/src/jvm/storm/trident/state/Serializer.java b/src/jvm/storm/trident/state/Serializer.java\nindex 0c18b71..9f91a38 100644\n--- a/src/jvm/storm/trident/state/Serializer.java\n+++ b/src/jvm/storm/trident/state/Serializer.java\n@@ -5,5 +5,5 @@\n \n public interface Serializer<T> extends Serializable {\n     byte[] serialize(T obj);\n-    Object deserialize(byte[] b);\n+    T deserialize(byte[] b);\n }\n",
    "projectName": "apache.storm",
    "bugLineNum": 8,
    "bugNodeStartChar": 148,
    "bugNodeLength": 29,
    "fixLineNum": 8,
    "fixNodeStartChar": 148,
    "fixNodeLength": 24,
    "sourceBeforeFix": "Object deserialize(byte[] b); ",
    "sourceAfterFix": "T deserialize(byte[] b); "
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "59116c60b91cc0bd2d7a52a3a6ff7cf8674527d7",
    "fixCommitParentSHA1": "cb6cec9d728b09b416ade5a5b1a000c498c9bd75",
    "bugFilePath": "src/jvm/storm/trident/state/map/CachedBatchReadsMap.java",
    "fixPatch": "diff --git a/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java b/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java\nindex 62bd202..d6c3b21 100644\n--- a/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java\n+++ b/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java\n@@ -7,11 +7,11 @@\n import storm.trident.state.ValueUpdater;\n \n public class CachedBatchReadsMap<T> implements MapState<T> {\n-    Map<List<Object>, Object> _cached = new HashMap();\n+    Map<List<Object>, T> _cached = new HashMap<List<Object>, T>();\n     \n-    public MapState _delegate;\n+    public MapState<T> _delegate;\n     \n-    public CachedBatchReadsMap(MapState delegate) {\n+    public CachedBatchReadsMap(MapState<T> delegate) {\n         _delegate = delegate;\n     }\n     \n@@ -23,7 +23,7 @@\n             for(int i=0; i<keys.size(); i++) {\n                 List<Object> key = keys.get(i);\n                 if(_cached.containsKey(key)) {\n-                    ret.set(i, (T) _cached.get(key));\n+                    ret.set(i, _cached.get(key));\n                 }\n             }\n         }\n@@ -31,7 +31,7 @@\n     }\n \n     @Override\n-    public List multiUpdate(List<List<Object>> keys, List<ValueUpdater> updaters) {\n+    public List<T> multiUpdate(List<List<Object>> keys, List<ValueUpdater> updaters) {\n         List<T> vals = _delegate.multiUpdate(keys, updaters);\n         cache(keys, vals);\n         return vals;\n",
    "projectName": "apache.storm",
    "bugLineNum": 10,
    "bugNodeStartChar": 240,
    "bugNodeLength": 25,
    "fixLineNum": 10,
    "fixNodeStartChar": 240,
    "fixNodeLength": 20,
    "sourceBeforeFix": "Map<List<Object>,Object>",
    "sourceAfterFix": "Map<List<Object>,T>"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "754ce8b22266079179c9f1275c11fd8364c1b510",
    "fixCommitParentSHA1": "691cdda0ae45304b603aeb97169a08d52757fa5f",
    "bugFilePath": "src/jvm/storm/starter/TransactionalWords.java",
    "fixPatch": "diff --git a/src/jvm/storm/starter/TransactionalWords.java b/src/jvm/storm/starter/TransactionalWords.java\nindex 674600f..0252b66 100644\n--- a/src/jvm/storm/starter/TransactionalWords.java\n+++ b/src/jvm/storm/starter/TransactionalWords.java\n@@ -114,7 +114,7 @@\n                         newVal.count = val.count;\n                     }\n                     newVal.count = newVal.count + _counts.get(key);\n-                    COUNT_DATABASE.put(key, val);\n+                    COUNT_DATABASE.put(key, newVal);\n                 } else {\n                     newVal = val;\n                 }\n",
    "projectName": "apache.storm",
    "bugLineNum": 117,
    "bugNodeStartChar": 4364,
    "bugNodeLength": 28,
    "fixLineNum": 117,
    "fixNodeStartChar": 4364,
    "fixNodeLength": 31,
    "sourceBeforeFix": "COUNT_DATABASE.put(key,val)",
    "sourceAfterFix": "COUNT_DATABASE.put(key,newVal)"
  },
  {
    "bugType": "CHANGE_IDENTIFIER",
    "fixCommitSHA1": "203c48445f33b9bcbdbc377f3e6311babca100fd",
    "fixCommitParentSHA1": "691cdda0ae45304b603aeb97169a08d52757fa5f",
    "bugFilePath": "src/jvm/storm/starter/TransactionalWords.java",
    "fixPatch": "diff --git a/src/jvm/storm/starter/TransactionalWords.java b/src/jvm/storm/starter/TransactionalWords.java\nindex 674600f..0252b66 100644\n--- a/src/jvm/storm/starter/TransactionalWords.java\n+++ b/src/jvm/storm/starter/TransactionalWords.java\n@@ -114,7 +114,7 @@\n                         newVal.count = val.count;\n                     }\n                     newVal.count = newVal.count + _counts.get(key);\n-                    COUNT_DATABASE.put(key, val);\n+                    COUNT_DATABASE.put(key, newVal);\n                 } else {\n                     newVal = val;\n                 }\n",
    "projectName": "apache.storm",
    "bugLineNum": 117,
    "bugNodeStartChar": 4364,
    "bugNodeLength": 28,
    "fixLineNum": 117,
    "fixNodeStartChar": 4364,
    "fixNodeLength": 31,
    "sourceBeforeFix": "COUNT_DATABASE.put(key,val)",
    "sourceAfterFix": "COUNT_DATABASE.put(key,newVal)"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "943561f4adcff1fa156a45d47014b3b6f94ca986",
    "fixCommitParentSHA1": "df6a4186f43d701572fe7779eb51519a851f088a",
    "bugFilePath": "src/jvm/backtype/storm/drpc/DRPCSpout.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/drpc/DRPCSpout.java b/src/jvm/backtype/storm/drpc/DRPCSpout.java\nindex e7b82d4..cbbc501 100644\n--- a/src/jvm/backtype/storm/drpc/DRPCSpout.java\n+++ b/src/jvm/backtype/storm/drpc/DRPCSpout.java\n@@ -57,7 +57,7 @@\n \n             int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));\n             List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);\n-            if(servers.isEmpty()) {\n+            if(servers == null || servers.isEmpty()) {\n                 throw new RuntimeException(\"No DRPC servers configured for topology\");   \n             }\n             if(numTasks < servers.size()) {\n",
    "projectName": "apache.storm",
    "bugLineNum": 60,
    "bugNodeStartChar": 1977,
    "bugNodeLength": 17,
    "fixLineNum": 60,
    "fixNodeStartChar": 1977,
    "fixNodeLength": 36,
    "sourceBeforeFix": "servers.isEmpty()",
    "sourceAfterFix": "servers == null || servers.isEmpty()"
  },
  {
    "bugType": "LESS_SPECIFIC_IF",
    "fixCommitSHA1": "06d716c08a00fc5e3fb3ecf12e1dbb703756e9c9",
    "fixCommitParentSHA1": "baae324079cf5a62f1c72e29c2196c336b53f070",
    "bugFilePath": "src/jvm/backtype/storm/drpc/DRPCSpout.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/drpc/DRPCSpout.java b/src/jvm/backtype/storm/drpc/DRPCSpout.java\nindex 67d619b..9e3ea24 100644\n--- a/src/jvm/backtype/storm/drpc/DRPCSpout.java\n+++ b/src/jvm/backtype/storm/drpc/DRPCSpout.java\n@@ -63,7 +63,7 @@\n \n             int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));\n             List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);\n-            if(servers.isEmpty()) {\n+            if(servers == null || servers.isEmpty()) {\n                 throw new RuntimeException(\"No DRPC servers configured for topology\");   \n             }\n             if(numTasks < servers.size()) {\n",
    "projectName": "apache.storm",
    "bugLineNum": 66,
    "bugNodeStartChar": 2061,
    "bugNodeLength": 17,
    "fixLineNum": 66,
    "fixNodeStartChar": 2061,
    "fixNodeLength": 36,
    "sourceBeforeFix": "servers.isEmpty()",
    "sourceAfterFix": "servers == null || servers.isEmpty()"
  },
  {
    "bugType": "CHANGE_NUMERAL",
    "fixCommitSHA1": "20a29802b0566f72fadd56dc8c661b531eb8fd80",
    "fixCommitParentSHA1": "27d1b8a5177099df6f33d5ae228b7658682709d1",
    "bugFilePath": "src/jvm/backtype/storm/transactional/TransactionalSpoutCoordinator.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/transactional/TransactionalSpoutCoordinator.java b/src/jvm/backtype/storm/transactional/TransactionalSpoutCoordinator.java\nindex 6e9bdf7..4d0084d 100644\n--- a/src/jvm/backtype/storm/transactional/TransactionalSpoutCoordinator.java\n+++ b/src/jvm/backtype/storm/transactional/TransactionalSpoutCoordinator.java\n@@ -57,7 +57,7 @@\n         _coordinator = _spout.getCoordinator(conf, context);\n         _currTransaction = getStoredCurrTransaction(_state);\n         if(!conf.containsKey(Config.TOPOLOGY_MAX_SPOUT_PENDING)) {\n-            _maxTransactionActive = 0;\n+            _maxTransactionActive = 1;\n         } else {\n             _maxTransactionActive = Utils.getInt(conf.get(Config.TOPOLOGY_MAX_SPOUT_PENDING));\n         }\n",
    "projectName": "apache.storm",
    "bugLineNum": 60,
    "bugNodeStartChar": 2472,
    "bugNodeLength": 25,
    "fixLineNum": 60,
    "fixNodeStartChar": 2472,
    "fixNodeLength": 25,
    "sourceBeforeFix": "_maxTransactionActive=0",
    "sourceAfterFix": "_maxTransactionActive=1"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "57ddaae5fd72ff2cef6d179568640b1fac8f4f08",
    "fixCommitParentSHA1": "a95b418fc34fe6d7e4ca54f81123eb66e2aa1fda",
    "bugFilePath": "src/jvm/backtype/storm/task/ShellBolt.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/task/ShellBolt.java b/src/jvm/backtype/storm/task/ShellBolt.java\nindex 72dfd66..041f987 100644\n--- a/src/jvm/backtype/storm/task/ShellBolt.java\n+++ b/src/jvm/backtype/storm/task/ShellBolt.java\n@@ -92,7 +92,7 @@\n             sendToSubprocess(JSONValue.toJSONString(stormConf));\n             sendToSubprocess(context.toJSONString());\n         } catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new RuntimeException(\"Error when launching multilang subprocess\", e);\n         }\n     }\n \n@@ -173,7 +173,7 @@\n               }\n             }\n         } catch(IOException e) {\n-            throw new RuntimeException(e);\n+            throw new RuntimeException(\"Error during multilang processing\", e);\n         }\n     }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 95,
    "bugNodeStartChar": 3521,
    "bugNodeLength": 23,
    "fixLineNum": 95,
    "fixNodeStartChar": 3521,
    "fixNodeLength": 68,
    "sourceBeforeFix": "new RuntimeException(e)",
    "sourceAfterFix": "new RuntimeException(\"Error when launching multilang subprocess\",e)"
  },
  {
    "bugType": "OVERLOAD_METHOD_MORE_ARGS",
    "fixCommitSHA1": "57ddaae5fd72ff2cef6d179568640b1fac8f4f08",
    "fixCommitParentSHA1": "a95b418fc34fe6d7e4ca54f81123eb66e2aa1fda",
    "bugFilePath": "src/jvm/backtype/storm/task/ShellBolt.java",
    "fixPatch": "diff --git a/src/jvm/backtype/storm/task/ShellBolt.java b/src/jvm/backtype/storm/task/ShellBolt.java\nindex 72dfd66..041f987 100644\n--- a/src/jvm/backtype/storm/task/ShellBolt.java\n+++ b/src/jvm/backtype/storm/task/ShellBolt.java\n@@ -92,7 +92,7 @@\n             sendToSubprocess(JSONValue.toJSONString(stormConf));\n             sendToSubprocess(context.toJSONString());\n         } catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new RuntimeException(\"Error when launching multilang subprocess\", e);\n         }\n     }\n \n@@ -173,7 +173,7 @@\n               }\n             }\n         } catch(IOException e) {\n-            throw new RuntimeException(e);\n+            throw new RuntimeException(\"Error during multilang processing\", e);\n         }\n     }\n \n",
    "projectName": "apache.storm",
    "bugLineNum": 176,
    "bugNodeStartChar": 7133,
    "bugNodeLength": 23,
    "fixLineNum": 176,
    "fixNodeStartChar": 7133,
    "fixNodeLength": 60,
    "sourceBeforeFix": "new RuntimeException(e)",
    "sourceAfterFix": "new RuntimeException(\"Error during multilang processing\",e)"
  }
]